
		 "float PhysicsShapeCircle::calculateArea(float radius)": {
			"prefix": "float PhysicsShapeCircle::calculateArea(float radius)",
			"body": [
				"PhysicsShapeCircle:calculateArea(${1:float radius})"
			],
			"description": "float PhysicsShapeCircle::calculateArea(float radius)"
		},
		 "float PhysicsContactPostSolve::getFriction() const": {
			"prefix": "float PhysicsContactPostSolve::getFriction() const",
			"body": [
				"float PhysicsContactPostSolve:getFriction() "
			],
			"description": "float PhysicsContactPostSolve::getFriction() const"
		},
		 "const Mat4& Director::getMatrix(MATRIX_STACK_TYPE type)": {
			"prefix": "const Mat4& Director::getMatrix(MATRIX_STACK_TYPE type)",
			"body": [
				"Mat4& Director:getMatrix(${1:MATRIX_STACK_TYPE type})"
			],
			"description": "const Mat4& Director::getMatrix(MATRIX_STACK_TYPE type)"
		},
		 "void ComAudio::preloadEffect(const char* pszFilePath)": {
			"prefix": "void ComAudio::preloadEffect(const char* pszFilePath)",
			"body": [
				"ComAudio:preloadEffect(${1:char* pszFilePath})"
			],
			"description": "void ComAudio::preloadEffect(const char* pszFilePath)"
		},
		 "void Node::_setLocalZOrder(int z)": {
			"prefix": "void Node::_setLocalZOrder(int z)",
			"body": [
				"Node:_setLocalZOrder(${1:int z})"
			],
			"description": "void Node::_setLocalZOrder(int z)"
		},
		 "CatmullRomBy* CatmullRomBy::create(float dt, cocos2d::PointArray *points)": {
			"prefix": "CatmullRomBy* CatmullRomBy::create(float dt, cocos2d::PointArray *points)",
			"body": [
				"CatmullRomBy:create(${1:float dt},${2:cocos2d:PointArray *points})"
			],
			"description": "CatmullRomBy* CatmullRomBy::create(float dt, cocos2d::PointArray *points)"
		},
		 "bool Physics3DCollider::init(Physics3DColliderDes *info)": {
			"prefix": "bool Physics3DCollider::init(Physics3DColliderDes *info)",
			"body": [
				"Physics3DCollider:init(${1:Physics3DColliderDes *info})"
			],
			"description": "bool Physics3DCollider::init(Physics3DColliderDes *info)"
		},
		 "ActionCamera * ActionCamera::reverse() const": {
			"prefix": "ActionCamera * ActionCamera::reverse() const",
			"body": [
				"ActionCamera * ActionCamera:reverse() "
			],
			"description": "ActionCamera * ActionCamera::reverse() const"
		},
		 "void Director::setEventDispatcher(EventDispatcher* dispatcher)": {
			"prefix": "void Director::setEventDispatcher(EventDispatcher* dispatcher)",
			"body": [
				"Director:setEventDispatcher(${1:EventDispatcher* dispatcher})"
			],
			"description": "void Director::setEventDispatcher(EventDispatcher* dispatcher)"
		},
		 "CameraBackgroundSkyBoxBrush* CameraBackgroundSkyBoxBrush::create(const std::string& positive_x, const std::string& negative_x, const std::string& positive_y, const std::string& negative_y, const std::string& positive_z, const std::string& negative_z)": {
			"prefix": "CameraBackgroundSkyBoxBrush* CameraBackgroundSkyBoxBrush::create(const std::string& positive_x, const std::string& negative_x, const std::string& positive_y, const std::string& negative_y, const std::string& positive_z, const std::string& negative_z)",
			"body": [
				"CameraBackgroundSkyBoxBrush:create(${1:std:string& positive_x},${2:std:string& negative_x},${3:std:string& positive_y},${4:std:string& negative_y},${5:std:string& positive_z},${6:std:string& negative_z})"
			],
			"description": "CameraBackgroundSkyBoxBrush* CameraBackgroundSkyBoxBrush::create(const std::string& positive_x, const std::string& negative_x, const std::string& positive_y, const std::string& negative_y, const std::string& positive_z, const std::string& negative_z)"
		},
		 "void Scheduler::removeUpdateFromHash(struct _listEntry *entry)": {
			"prefix": "void Scheduler::removeUpdateFromHash(struct _listEntry *entry)",
			"body": [
				"Scheduler:removeUpdateFromHash(${1:struct _listEntry *entry})"
			],
			"description": "void Scheduler::removeUpdateFromHash(struct _listEntry *entry)"
		},
		 "void TransitionProgressInOut::sceneOrder()": {
			"prefix": "void TransitionProgressInOut::sceneOrder()",
			"body": [
				"void TransitionProgressInOut:sceneOrder()"
			],
			"description": "void TransitionProgressInOut::sceneOrder()"
		},
		 "void Layer::setSwallowsTouches(bool swallowsTouches)": {
			"prefix": "void Layer::setSwallowsTouches(bool swallowsTouches)",
			"body": [
				"Layer:setSwallowsTouches(${1:bool swallowsTouches})"
			],
			"description": "void Layer::setSwallowsTouches(bool swallowsTouches)"
		},
		 "Vec2 EventMouse::getPreviousLocation() const": {
			"prefix": "Vec2 EventMouse::getPreviousLocation() const",
			"body": [
				"Vec2 EventMouse:getPreviousLocation() "
			],
			"description": "Vec2 EventMouse::getPreviousLocation() const"
		},
		 "bool Bundle3D::loadMeshDatas(MeshDatas& meshdatas)": {
			"prefix": "bool Bundle3D::loadMeshDatas(MeshDatas& meshdatas)",
			"body": [
				"Bundle3D:loadMeshDatas(${1:MeshDatas& meshdatas})"
			],
			"description": "bool Bundle3D::loadMeshDatas(MeshDatas& meshdatas)"
		},
		 "AttachNode* AttachNode::create(Bone3D* attachBone)": {
			"prefix": "AttachNode* AttachNode::create(Bone3D* attachBone)",
			"body": [
				"AttachNode:create(${1:Bone3D* attachBone})"
			],
			"description": "AttachNode* AttachNode::create(Bone3D* attachBone)"
		},
		 "void CCBAnimationManager::runAnimationsForSequenceIdTweenDuration(int nSeqId, float fTweenDuration)": {
			"prefix": "void CCBAnimationManager::runAnimationsForSequenceIdTweenDuration(int nSeqId, float fTweenDuration)",
			"body": [
				"CCBAnimationManager:runAnimationsForSequenceIdTweenDuration(${1:int nSeqId},${2:float fTweenDuration})"
			],
			"description": "void CCBAnimationManager::runAnimationsForSequenceIdTweenDuration(int nSeqId, float fTweenDuration)"
		},
		 "void Label::reset()": {
			"prefix": "void Label::reset()",
			"body": [
				"void Label:reset()"
			],
			"description": "void Label::reset()"
		},
		 "bool cmpEventInfoDes(Animate3D::Animate3DDisplayedEventInfo* info1, Animate3D::Animate3DDisplayedEventInfo* info2)": {
			"prefix": "bool cmpEventInfoDes(Animate3D::Animate3DDisplayedEventInfo* info1, Animate3D::Animate3DDisplayedEventInfo* info2)",
			"body": [
				"cmpEventInfoDes(${1:Animate3D:Animate3DDisplayedEventInfo* info1},${2:Animate3D:Animate3DDisplayedEventInfo* info2})"
			],
			"description": "bool cmpEventInfoDes(Animate3D::Animate3DDisplayedEventInfo* info1, Animate3D::Animate3DDisplayedEventInfo* info2)"
		},
		 "bool TextField::getAttachWithIME()const": {
			"prefix": "bool TextField::getAttachWithIME()const",
			"body": [
				"bool TextField:getAttachWithIME()"
			],
			"description": "bool TextField::getAttachWithIME()const"
		},
		 "void PhysicsWorld::removeAllBodies()": {
			"prefix": "void PhysicsWorld::removeAllBodies()",
			"body": [
				"void PhysicsWorld:removeAllBodies()"
			],
			"description": "void PhysicsWorld::removeAllBodies()"
		},
		 "void TextField::deleteBackwardEvent()": {
			"prefix": "void TextField::deleteBackwardEvent()",
			"body": [
				"void TextField:deleteBackwardEvent()"
			],
			"description": "void TextField::deleteBackwardEvent()"
		},
		 "void ComRender::onExit()": {
			"prefix": "void ComRender::onExit()",
			"body": [
				"void ComRender:onExit()"
			],
			"description": "void ComRender::onExit()"
		},
		 "int Slider::getPercent()const": {
			"prefix": "int Slider::getPercent()const",
			"body": [
				"int Slider:getPercent()"
			],
			"description": "int Slider::getPercent()const"
		},
		 "void EventDispatcher::forceAddEventListener(EventListener* listener)": {
			"prefix": "void EventDispatcher::forceAddEventListener(EventListener* listener)",
			"body": [
				"EventDispatcher:forceAddEventListener(${1:EventListener* listener})"
			],
			"description": "void EventDispatcher::forceAddEventListener(EventListener* listener)"
		},
		 "void RenderTexture::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void RenderTexture::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"RenderTexture:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void RenderTexture::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void RenderTexture::onEnd()": {
			"prefix": "void RenderTexture::onEnd()",
			"body": [
				"void RenderTexture:onEnd()"
			],
			"description": "void RenderTexture::onEnd()"
		},
		 "void Physics3DHingeConstraint::setMotorTarget(float targetAngle, float dt)": {
			"prefix": "void Physics3DHingeConstraint::setMotorTarget(float targetAngle, float dt)",
			"body": [
				"Physics3DHingeConstraint:setMotorTarget(${1:float targetAngle},${2:float dt})"
			],
			"description": "void Physics3DHingeConstraint::setMotorTarget(float targetAngle, float dt)"
		},
		 "PhysicsBody* PhysicsBody::createEdgeBox(const Size& size, const PhysicsMaterial& material, float border/* = 1*/, const Vec2& offset)": {
			"prefix": "PhysicsBody* PhysicsBody::createEdgeBox(const Size& size, const PhysicsMaterial& material, float border/* = 1*/, const Vec2& offset)",
			"body": [
				"PhysicsBody:createEdgeBox(${1:Size& size},${2:PhysicsMaterial& material},${3:float border/* = 1*/},${4:Vec2& offset})"
			],
			"description": "PhysicsBody* PhysicsBody::createEdgeBox(const Size& size, const PhysicsMaterial& material, float border/* = 1*/, const Vec2& offset)"
		},
		 "void Sprite::setSpriteFrame(const std::string &spriteFrameName)": {
			"prefix": "void Sprite::setSpriteFrame(const std::string &spriteFrameName)",
			"body": [
				"Sprite:setSpriteFrame(${1:std:string &spriteFrameName})"
			],
			"description": "void Sprite::setSpriteFrame(const std::string &spriteFrameName)"
		},
		 "void Director::resetMatrixStack()": {
			"prefix": "void Director::resetMatrixStack()",
			"body": [
				"void Director:resetMatrixStack()"
			],
			"description": "void Director::resetMatrixStack()"
		},
		 "void ParticleSystem::update(float dt)": {
			"prefix": "void ParticleSystem::update(float dt)",
			"body": [
				"ParticleSystem:update(${1:float dt})"
			],
			"description": "void ParticleSystem::update(float dt)"
		},
		 "CameraBackgroundDepthBrush* CameraBackgroundBrush::createDepthBrush(float depth)": {
			"prefix": "CameraBackgroundDepthBrush* CameraBackgroundBrush::createDepthBrush(float depth)",
			"body": [
				"CameraBackgroundBrush:createDepthBrush(${1:float depth})"
			],
			"description": "CameraBackgroundDepthBrush* CameraBackgroundBrush::createDepthBrush(float depth)"
		},
		 "void MotionStreak::setTexture(Texture2D *texture)": {
			"prefix": "void MotionStreak::setTexture(Texture2D *texture)",
			"body": [
				"MotionStreak:setTexture(${1:Texture2D *texture})"
			],
			"description": "void MotionStreak::setTexture(Texture2D *texture)"
		},
		 "void Scene::stepPhysicsAndNavigation(float deltaTime)": {
			"prefix": "void Scene::stepPhysicsAndNavigation(float deltaTime)",
			"body": [
				"Scene:stepPhysicsAndNavigation(${1:float deltaTime})"
			],
			"description": "void Scene::stepPhysicsAndNavigation(float deltaTime)"
		},
		 "void EventDispatcher::dissociateNodeAndEventListener(Node* node, EventListener* listener)": {
			"prefix": "void EventDispatcher::dissociateNodeAndEventListener(Node* node, EventListener* listener)",
			"body": [
				"EventDispatcher:dissociateNodeAndEventListener(${1:Node* node},${2:EventListener* listener})"
			],
			"description": "void EventDispatcher::dissociateNodeAndEventListener(Node* node, EventListener* listener)"
		},
		 "ScaleTo* ScaleTo::clone() const": {
			"prefix": "ScaleTo* ScaleTo::clone() const",
			"body": [
				"ScaleTo* ScaleTo:clone() "
			],
			"description": "ScaleTo* ScaleTo::clone() const"
		},
		 "void TextField::setFontName(const std::string& name)": {
			"prefix": "void TextField::setFontName(const std::string& name)",
			"body": [
				"TextField:setFontName(${1:std:string& name})"
			],
			"description": "void TextField::setFontName(const std::string& name)"
		},
		 "void RichText::insertElement(RichElement *element, int index)": {
			"prefix": "void RichText::insertElement(RichElement *element, int index)",
			"body": [
				"RichText:insertElement(${1:RichElement *element},${2:int index})"
			],
			"description": "void RichText::insertElement(RichElement *element, int index)"
		},
		 "void GLProgramState::updateUniformsAndAttributes()": {
			"prefix": "void GLProgramState::updateUniformsAndAttributes()",
			"body": [
				"void GLProgramState:updateUniformsAndAttributes()"
			],
			"description": "void GLProgramState::updateUniformsAndAttributes()"
		},
		 "int NodeLoader::parsePropTypeInteger(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "int NodeLoader::parsePropTypeInteger(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeInteger(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "int NodeLoader::parsePropTypeInteger(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "bool TextureCache::reloadTexture(const std::string& fileName)": {
			"prefix": "bool TextureCache::reloadTexture(const std::string& fileName)",
			"body": [
				"TextureCache:reloadTexture(${1:std:string& fileName})"
			],
			"description": "bool TextureCache::reloadTexture(const std::string& fileName)"
		},
		 "void Widget::setFocused(bool focus)": {
			"prefix": "void Widget::setFocused(bool focus)",
			"body": [
				"Widget:setFocused(${1:bool focus})"
			],
			"description": "void Widget::setFocused(bool focus)"
		},
		 "void PhysicsWorld::step(float delta)": {
			"prefix": "void PhysicsWorld::step(float delta)",
			"body": [
				"PhysicsWorld:step(${1:float delta})"
			],
			"description": "void PhysicsWorld::step(float delta)"
		},
		 "Ref* __Array::getRandomObject()": {
			"prefix": "Ref* __Array::getRandomObject()",
			"body": [
				"Ref* __Array:getRandomObject()"
			],
			"description": "Ref* __Array::getRandomObject()"
		},
		 "float ParticleSystem::getStartRadius() const": {
			"prefix": "float ParticleSystem::getStartRadius() const",
			"body": [
				"float ParticleSystem:getStartRadius() "
			],
			"description": "float ParticleSystem::getStartRadius() const"
		},
		 "void	Physics3DHingeConstraint::setAngularOnly(bool angularOnly)": {
			"prefix": "void	Physics3DHingeConstraint::setAngularOnly(bool angularOnly)",
			"body": [
				"angularOnly})"
			],
			"description": "void	Physics3DHingeConstraint::setAngularOnly(bool angularOnly)"
		},
		 "void AudioEngine::end()": {
			"prefix": "void AudioEngine::end()",
			"body": [
				"void AudioEngine:end()"
			],
			"description": "void AudioEngine::end()"
		},
		 "bool PageView::scrollPages(Vec2 touchOffset)": {
			"prefix": "bool PageView::scrollPages(Vec2 touchOffset)",
			"body": [
				"PageView:scrollPages(${1:Vec2 touchOffset})"
			],
			"description": "bool PageView::scrollPages(Vec2 touchOffset)"
		},
		 "void Animate::startWithTarget(Node *target)": {
			"prefix": "void Animate::startWithTarget(Node *target)",
			"body": [
				"Animate:startWithTarget(${1:Node *target})"
			],
			"description": "void Animate::startWithTarget(Node *target)"
		},
		 "Node* TextField::getVirtualRenderer()": {
			"prefix": "Node* TextField::getVirtualRenderer()",
			"body": [
				"Node* TextField:getVirtualRenderer()"
			],
			"description": "Node* TextField::getVirtualRenderer()"
		},
		 "void EditBoxImplWin::setPlaceHolder(const char* pText)": {
			"prefix": "void EditBoxImplWin::setPlaceHolder(const char* pText)",
			"body": [
				"EditBoxImplWin:setPlaceHolder(${1:char* pText})"
			],
			"description": "void EditBoxImplWin::setPlaceHolder(const char* pText)"
		},
		 "Texture2D* Sprite3DMaterialCache::getSprite3DMaterial(const std::string& key)": {
			"prefix": "Texture2D* Sprite3DMaterialCache::getSprite3DMaterial(const std::string& key)",
			"body": [
				"Sprite3DMaterialCache:getSprite3DMaterial(${1:std:string& key})"
			],
			"description": "Texture2D* Sprite3DMaterialCache::getSprite3DMaterial(const std::string& key)"
		},
		 "DelayTime* DelayTime::clone() const": {
			"prefix": "DelayTime* DelayTime::clone() const",
			"body": [
				"DelayTime* DelayTime:clone() "
			],
			"description": "DelayTime* DelayTime::clone() const"
		},
		 "void ScrollView::jumpToPercentVertical(float percent)": {
			"prefix": "void ScrollView::jumpToPercentVertical(float percent)",
			"body": [
				"ScrollView:jumpToPercentVertical(${1:float percent})"
			],
			"description": "void ScrollView::jumpToPercentVertical(float percent)"
		},
		 "CameraBackgroundBrush* CameraBackgroundBrush::createNoneBrush()": {
			"prefix": "CameraBackgroundBrush* CameraBackgroundBrush::createNoneBrush()",
			"body": [
				"CameraBackgroundBrush* CameraBackgroundBrush:createNoneBrush()"
			],
			"description": "CameraBackgroundBrush* CameraBackgroundBrush::createNoneBrush()"
		},
		 "void DisplayManager::addDisplay(Node *display, int index)": {
			"prefix": "void DisplayManager::addDisplay(Node *display, int index)",
			"body": [
				"DisplayManager:addDisplay(${1:Node *display},${2:int index})"
			],
			"description": "void DisplayManager::addDisplay(Node *display, int index)"
		},
		 "bool PhysicsShapeEdgeBox::init(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/, const Vec2& offset/*= Vec2(0, 0)*/)": {
			"prefix": "bool PhysicsShapeEdgeBox::init(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/, const Vec2& offset/*= Vec2(0, 0)*/)",
			"body": [
				"PhysicsShapeEdgeBox:init(${1:Size& size},${2:PhysicsMaterial& material/* = MaterialDefault*/},${3:float border/* = 1*/},${4:Vec2& offset/*= Vec2(0},${5:0})"
			],
			"description": "bool PhysicsShapeEdgeBox::init(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/, const Vec2& offset/*= Vec2(0, 0)*/)"
		},
		 "bool TextField::isMaxLengthEnabled()const": {
			"prefix": "bool TextField::isMaxLengthEnabled()const",
			"body": [
				"bool TextField:isMaxLengthEnabled()"
			],
			"description": "bool TextField::isMaxLengthEnabled()const"
		},
		 "void __Dictionary::removeAllObjects()": {
			"prefix": "void __Dictionary::removeAllObjects()",
			"body": [
				"void __Dictionary:removeAllObjects()"
			],
			"description": "void __Dictionary::removeAllObjects()"
		},
		 "TiledGrid3D* TiledGrid3D::create(const Size& gridSize, Texture2D *texture, bool flipped)": {
			"prefix": "TiledGrid3D* TiledGrid3D::create(const Size& gridSize, Texture2D *texture, bool flipped)",
			"body": [
				"TiledGrid3D:create(${1:Size& gridSize},${2:Texture2D *texture},${3:bool flipped})"
			],
			"description": "TiledGrid3D* TiledGrid3D::create(const Size& gridSize, Texture2D *texture, bool flipped)"
		},
		 "Properties::Type Properties::getType(const char* name) const": {
			"prefix": "Properties::Type Properties::getType(const char* name) const",
			"body": [
				"Properties:getType(${1:char* name})"
			],
			"description": "Properties::Type Properties::getType(const char* name) const"
		},
		 "void EventDispatcher::EventListenerVector::push_back(EventListener* listener)": {
			"prefix": "void EventDispatcher::EventListenerVector::push_back(EventListener* listener)",
			"body": [
				"EventDispatcher:EventListenerVector:push_back(${1:EventListener* listener})"
			],
			"description": "void EventDispatcher::EventListenerVector::push_back(EventListener* listener)"
		},
		 "void Mesh::setVisible(bool visible)": {
			"prefix": "void Mesh::setVisible(bool visible)",
			"body": [
				"Mesh:setVisible(${1:bool visible})"
			],
			"description": "void Mesh::setVisible(bool visible)"
		},
		 "void GLView::handleTouchesBegin(int num, intptr_t ids[], float xs[], float ys[])": {
			"prefix": "void GLView::handleTouchesBegin(int num, intptr_t ids[], float xs[], float ys[])",
			"body": [
				"GLView:handleTouchesBegin(${1:int num},${2:intptr_t ids[]},${3:float xs[]},${4:float ys[]})"
			],
			"description": "void GLView::handleTouchesBegin(int num, intptr_t ids[], float xs[], float ys[])"
		},
		 "bool ShatteredTiles3D::initWithDuration(float duration, const Size& gridSize, int range, bool shatterZ)": {
			"prefix": "bool ShatteredTiles3D::initWithDuration(float duration, const Size& gridSize, int range, bool shatterZ)",
			"body": [
				"ShatteredTiles3D:initWithDuration(${1:float duration},${2:Size& gridSize},${3:int range},${4:bool shatterZ})"
			],
			"description": "bool ShatteredTiles3D::initWithDuration(float duration, const Size& gridSize, int range, bool shatterZ)"
		},
		 "ParticleBatchNode* ParticleBatchNode::create(const std::string& imageFile, int capacity/* = kParticleDefaultCapacity*/)": {
			"prefix": "ParticleBatchNode* ParticleBatchNode::create(const std::string& imageFile, int capacity/* = kParticleDefaultCapacity*/)",
			"body": [
				"ParticleBatchNode:create(${1:std:string& imageFile},${2:int capacity/* = kParticleDefaultCapacity*/})"
			],
			"description": "ParticleBatchNode* ParticleBatchNode::create(const std::string& imageFile, int capacity/* = kParticleDefaultCapacity*/)"
		},
		 "Director* Director::getInstance()": {
			"prefix": "Director* Director::getInstance()",
			"body": [
				"Director* Director:getInstance()"
			],
			"description": "Director* Director::getInstance()"
		},
		 "Vec2 EventMouse::getPreviousLocationInView() const": {
			"prefix": "Vec2 EventMouse::getPreviousLocationInView() const",
			"body": [
				"Vec2 EventMouse:getPreviousLocationInView() "
			],
			"description": "Vec2 EventMouse::getPreviousLocationInView() const"
		},
		 "void Button::createTitleRenderer()": {
			"prefix": "void Button::createTitleRenderer()",
			"body": [
				"void Button:createTitleRenderer()"
			],
			"description": "void Button::createTitleRenderer()"
		},
		 "void Physics3DSliderConstraint::setTargetAngMotorVelocity(float targetAngMotorVelocity)": {
			"prefix": "void Physics3DSliderConstraint::setTargetAngMotorVelocity(float targetAngMotorVelocity)",
			"body": [
				"Physics3DSliderConstraint:setTargetAngMotorVelocity(${1:float targetAngMotorVelocity})"
			],
			"description": "void Physics3DSliderConstraint::setTargetAngMotorVelocity(float targetAngMotorVelocity)"
		},
		 "void Data::copy(const unsigned char* bytes, const ssize_t size)": {
			"prefix": "void Data::copy(const unsigned char* bytes, const ssize_t size)",
			"body": [
				"Data:copy(${1:unsigned char* bytes},${2:ssize_t size})"
			],
			"description": "void Data::copy(const unsigned char* bytes, const ssize_t size)"
		},
		 "void ControlButtonLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)": {
			"prefix": "void ControlButtonLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)",
			"body": [
				"ControlButtonLoader:onHandlePropTypeSize(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Size pSize},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlButtonLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)"
		},
		 "void PhysicsShape::setFriction(float friction)": {
			"prefix": "void PhysicsShape::setFriction(float friction)",
			"body": [
				"PhysicsShape:setFriction(${1:float friction})"
			],
			"description": "void PhysicsShape::setFriction(float friction)"
		},
		 "SkewTo* SkewTo::create(float t, float sx, float sy)": {
			"prefix": "SkewTo* SkewTo::create(float t, float sx, float sy)",
			"body": [
				"SkewTo:create(${1:float t},${2:float sx},${3:float sy})"
			],
			"description": "SkewTo* SkewTo::create(float t, float sx, float sy)"
		},
		 "TextField* TextField::create(const std::string &placeholder, const std::string &fontName, int fontSize)": {
			"prefix": "TextField* TextField::create(const std::string &placeholder, const std::string &fontName, int fontSize)",
			"body": [
				"TextField:create(${1:std:string &placeholder},${2:std:string &fontName},${3:int fontSize})"
			],
			"description": "TextField* TextField::create(const std::string &placeholder, const std::string &fontName, int fontSize)"
		},
		 "void EditBoxImplAndroid::setNativeReturnType(EditBox::KeyboardReturnType returnType)": {
			"prefix": "void EditBoxImplAndroid::setNativeReturnType(EditBox::KeyboardReturnType returnType)",
			"body": [
				"EditBoxImplAndroid:setNativeReturnType(${1:EditBox:KeyboardReturnType returnType})"
			],
			"description": "void EditBoxImplAndroid::setNativeReturnType(EditBox::KeyboardReturnType returnType)"
		},
		 "void Widget::onExit()": {
			"prefix": "void Widget::onExit()",
			"body": [
				"void Widget:onExit()"
			],
			"description": "void Widget::onExit()"
		},
		 "void AudioEngineImpl::stop(int audioID)": {
			"prefix": "void AudioEngineImpl::stop(int audioID)",
			"body": [
				"AudioEngineImpl:stop(${1:int audioID})"
			],
			"description": "void AudioEngineImpl::stop(int audioID)"
		},
		 "float Value::asFloat() const": {
			"prefix": "float Value::asFloat() const",
			"body": [
				"float Value:asFloat() "
			],
			"description": "float Value::asFloat() const"
		},
		 "Quad3 TiledGrid3D::getTile(const Vec2& pos) const": {
			"prefix": "Quad3 TiledGrid3D::getTile(const Vec2& pos) const",
			"body": [
				"TiledGrid3D:getTile(${1:Vec2& pos})"
			],
			"description": "Quad3 TiledGrid3D::getTile(const Vec2& pos) const"
		},
		 "void Spawn::update(float time)": {
			"prefix": "void Spawn::update(float time)",
			"body": [
				"Spawn:update(${1:float time})"
			],
			"description": "void Spawn::update(float time)"
		},
		 "bool BundleReader::eof()": {
			"prefix": "bool BundleReader::eof()",
			"body": [
				"bool BundleReader:eof()"
			],
			"description": "bool BundleReader::eof()"
		},
		 "void PhysicsShapeEdgePolygon::getPoints(cocos2d::Vec2 *outPoints) const": {
			"prefix": "void PhysicsShapeEdgePolygon::getPoints(cocos2d::Vec2 *outPoints) const",
			"body": [
				"PhysicsShapeEdgePolygon:getPoints(${1:cocos2d:Vec2 *outPoints})"
			],
			"description": "void PhysicsShapeEdgePolygon::getPoints(cocos2d::Vec2 *outPoints) const"
		},
		 "void TransitionZoomFlipX::onEnter()": {
			"prefix": "void TransitionZoomFlipX::onEnter()",
			"body": [
				"void TransitionZoomFlipX:onEnter()"
			],
			"description": "void TransitionZoomFlipX::onEnter()"
		},
		 "bool MoveBy::initWithDuration(float duration, const Vec2& deltaPosition)": {
			"prefix": "bool MoveBy::initWithDuration(float duration, const Vec2& deltaPosition)",
			"body": [
				"MoveBy:initWithDuration(${1:float duration},${2:Vec2& deltaPosition})"
			],
			"description": "bool MoveBy::initWithDuration(float duration, const Vec2& deltaPosition)"
		},
		 "Offset<flatbuffers::ColorFrame> FlatBuffersSerialize::createColorFrame(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<flatbuffers::ColorFrame> FlatBuffersSerialize::createColorFrame(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createColorFrame(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<flatbuffers::ColorFrame> FlatBuffersSerialize::createColorFrame(const tinyxml2::XMLElement *objectData)"
		},
		 "bool Bundle3D::loadAnimationDataBinary(const std::string& id, Animation3DData* animationdata)": {
			"prefix": "bool Bundle3D::loadAnimationDataBinary(const std::string& id, Animation3DData* animationdata)",
			"body": [
				"Bundle3D:loadAnimationDataBinary(${1:std:string& id},${2:Animation3DData* animationdata})"
			],
			"description": "bool Bundle3D::loadAnimationDataBinary(const std::string& id, Animation3DData* animationdata)"
		},
		 "void ScrollView::addEventListener(const ccScrollViewCallback& callback)": {
			"prefix": "void ScrollView::addEventListener(const ccScrollViewCallback& callback)",
			"body": [
				"ScrollView:addEventListener(${1:ccScrollViewCallback& callback})"
			],
			"description": "void ScrollView::addEventListener(const ccScrollViewCallback& callback)"
		},
		 "ActionInterval* ActionRotationFrame::getAction(float fDuration,ActionFrame* srcFrame)": {
			"prefix": "ActionInterval* ActionRotationFrame::getAction(float fDuration,ActionFrame* srcFrame)",
			"body": [
				"ActionRotationFrame:getAction(${1:float fDuration},${2:ActionFrame* srcFrame})"
			],
			"description": "ActionInterval* ActionRotationFrame::getAction(float fDuration,ActionFrame* srcFrame)"
		},
		 "Vec2 Touch::getDelta() const": {
			"prefix": "Vec2 Touch::getDelta() const",
			"body": [
				"Vec2 Touch:getDelta() "
			],
			"description": "Vec2 Touch::getDelta() const"
		},
		 "void SIOClientImpl::heartbeat(float dt)": {
			"prefix": "void SIOClientImpl::heartbeat(float dt)",
			"body": [
				"SIOClientImpl:heartbeat(${1:float dt})"
			],
			"description": "void SIOClientImpl::heartbeat(float dt)"
		},
		 "void ScrollView::copySpecialProperties(Widget *widget)": {
			"prefix": "void ScrollView::copySpecialProperties(Widget *widget)",
			"body": [
				"ScrollView:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void ScrollView::copySpecialProperties(Widget *widget)"
		},
		 "bool Widget::onTouchBegan(Touch *touch, Event *unusedEvent)": {
			"prefix": "bool Widget::onTouchBegan(Touch *touch, Event *unusedEvent)",
			"body": [
				"Widget:onTouchBegan(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "bool Widget::onTouchBegan(Touch *touch, Event *unusedEvent)"
		},
		 "void __Dictionary::removeObjectsForKeys(__Array* pKey__Array)": {
			"prefix": "void __Dictionary::removeObjectsForKeys(__Array* pKey__Array)",
			"body": [
				"__Dictionary:removeObjectsForKeys(${1:__Array* pKey__Array})"
			],
			"description": "void __Dictionary::removeObjectsForKeys(__Array* pKey__Array)"
		},
		 "void ActionObject::play()": {
			"prefix": "void ActionObject::play()",
			"body": [
				"void ActionObject:play()"
			],
			"description": "void ActionObject::play()"
		},
		 "void MenuItemSprite::setSelectedImage(Node* image)": {
			"prefix": "void MenuItemSprite::setSelectedImage(Node* image)",
			"body": [
				"MenuItemSprite:setSelectedImage(${1:Node* image})"
			],
			"description": "void MenuItemSprite::setSelectedImage(Node* image)"
		},
		 "RotateTo* RotateTo::create(float duration, float dstAngle)": {
			"prefix": "RotateTo* RotateTo::create(float duration, float dstAngle)",
			"body": [
				"RotateTo:create(${1:float duration},${2:float dstAngle})"
			],
			"description": "RotateTo* RotateTo::create(float duration, float dstAngle)"
		},
		 "std::string Button::getDescription() const": {
			"prefix": "std::string Button::getDescription() const",
			"body": [
				"std:string Button:getDescription() "
			],
			"description": "std::string Button::getDescription() const"
		},
		 "void ClippingRectangleNode::onBeforeVisitScissor()": {
			"prefix": "void ClippingRectangleNode::onBeforeVisitScissor()",
			"body": [
				"void ClippingRectangleNode:onBeforeVisitScissor()"
			],
			"description": "void ClippingRectangleNode::onBeforeVisitScissor()"
		},
		 "bool TransitionSceneOriented::initWithDuration(float t, Scene *scene, Orientation orientation)": {
			"prefix": "bool TransitionSceneOriented::initWithDuration(float t, Scene *scene, Orientation orientation)",
			"body": [
				"TransitionSceneOriented:initWithDuration(${1:float t},${2:Scene *scene},${3:Orientation orientation})"
			],
			"description": "bool TransitionSceneOriented::initWithDuration(float t, Scene *scene, Orientation orientation)"
		},
		 "Animate3D* Animate3D::createWithFrames(Animation3D* animation, int startFrame, int endFrame, float frameRate)": {
			"prefix": "Animate3D* Animate3D::createWithFrames(Animation3D* animation, int startFrame, int endFrame, float frameRate)",
			"body": [
				"Animate3D:createWithFrames(${1:Animation3D* animation},${2:int startFrame},${3:int endFrame},${4:float frameRate})"
			],
			"description": "Animate3D* Animate3D::createWithFrames(Animation3D* animation, int startFrame, int endFrame, float frameRate)"
		},
		 "SpriteFrameCacheHelper *SpriteFrameCacheHelper::getInstance()": {
			"prefix": "SpriteFrameCacheHelper *SpriteFrameCacheHelper::getInstance()",
			"body": [
				"SpriteFrameCacheHelper *SpriteFrameCacheHelper:getInstance()"
			],
			"description": "SpriteFrameCacheHelper *SpriteFrameCacheHelper::getInstance()"
		},
		 "void __Dictionary::setObjectUnSafe(Ref* pObject, const std::string& key)": {
			"prefix": "void __Dictionary::setObjectUnSafe(Ref* pObject, const std::string& key)",
			"body": [
				"__Dictionary:setObjectUnSafe(${1:Ref* pObject},${2:std:string& key})"
			],
			"description": "void __Dictionary::setObjectUnSafe(Ref* pObject, const std::string& key)"
		},
		 "bool MenuItemAtlasFont::initWithString(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "bool MenuItemAtlasFont::initWithString(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"MenuItemAtlasFont:initWithString(${1:std:string& value},${2:std:string& charMapFile},${3:int itemWidth},${4:int itemHeight},${5:char startCharMap},${6:Ref* target},${7:SEL_MenuHandler selector})"
			],
			"description": "bool MenuItemAtlasFont::initWithString(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, Ref* target, SEL_MenuHandler selector)"
		},
		 "ScaleBy* ScaleBy::create(float duration, float s)": {
			"prefix": "ScaleBy* ScaleBy::create(float duration, float s)",
			"body": [
				"ScaleBy:create(${1:float duration},${2:float s})"
			],
			"description": "ScaleBy* ScaleBy::create(float duration, float s)"
		},
		 "void Widget::setSizePercent(const Vec2 &percent)": {
			"prefix": "void Widget::setSizePercent(const Vec2 &percent)",
			"body": [
				"Widget:setSizePercent(${1:Vec2 &percent})"
			],
			"description": "void Widget::setSizePercent(const Vec2 &percent)"
		},
		 "void ActionNode::playAction()": {
			"prefix": "void ActionNode::playAction()",
			"body": [
				"void ActionNode:playAction()"
			],
			"description": "void ActionNode::playAction()"
		},
		 "FontCharMap* FontCharMap::create(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "FontCharMap* FontCharMap::create(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"FontCharMap:create(${1:Texture2D* texture},${2:int itemWidth},${3:int itemHeight},${4:int startCharMap})"
			],
			"description": "FontCharMap* FontCharMap::create(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "void ActionTimelineCache::init()": {
			"prefix": "void ActionTimelineCache::init()",
			"body": [
				"void ActionTimelineCache:init()"
			],
			"description": "void ActionTimelineCache::init()"
		},
		 "void LoadingBar::setScale9Scale()": {
			"prefix": "void LoadingBar::setScale9Scale()",
			"body": [
				"void LoadingBar:setScale9Scale()"
			],
			"description": "void LoadingBar::setScale9Scale()"
		},
		 "LayoutParameter* LayoutParameter::create()": {
			"prefix": "LayoutParameter* LayoutParameter::create()",
			"body": [
				"LayoutParameter* LayoutParameter:create()"
			],
			"description": "LayoutParameter* LayoutParameter::create()"
		},
		 "cocos2d::Rect BoneNode::getVisibleSkinsRect() const": {
			"prefix": "cocos2d::Rect BoneNode::getVisibleSkinsRect() const",
			"body": [
				"cocos2d:Rect BoneNode:getVisibleSkinsRect() "
			],
			"description": "cocos2d::Rect BoneNode::getVisibleSkinsRect() const"
		},
		 "Widget* WidgetPropertiesReader0250::widgetFromJsonDictionary(const rapidjson::Value&data)": {
			"prefix": "Widget* WidgetPropertiesReader0250::widgetFromJsonDictionary(const rapidjson::Value&data)",
			"body": [
				"WidgetPropertiesReader0250:widgetFromJsonDictionary(${1:rapidjson:Value&data})"
			],
			"description": "Widget* WidgetPropertiesReader0250::widgetFromJsonDictionary(const rapidjson::Value&data)"
		},
		 "PhysicsBody* PhysicsBody::createCircle(float radius, const PhysicsMaterial& material, const Vec2& offset)": {
			"prefix": "PhysicsBody* PhysicsBody::createCircle(float radius, const PhysicsMaterial& material, const Vec2& offset)",
			"body": [
				"PhysicsBody:createCircle(${1:float radius},${2:PhysicsMaterial& material},${3:Vec2& offset})"
			],
			"description": "PhysicsBody* PhysicsBody::createCircle(float radius, const PhysicsMaterial& material, const Vec2& offset)"
		},
		 "void RenderTexture::end()": {
			"prefix": "void RenderTexture::end()",
			"body": [
				"void RenderTexture:end()"
			],
			"description": "void RenderTexture::end()"
		},
		 "void UICCTextField::setDeleteBackward(bool deleteBackward)": {
			"prefix": "void UICCTextField::setDeleteBackward(bool deleteBackward)",
			"body": [
				"UICCTextField:setDeleteBackward(${1:bool deleteBackward})"
			],
			"description": "void UICCTextField::setDeleteBackward(bool deleteBackward)"
		},
		 "void updateAssets(const std::string& filePath)": {
			"prefix": "void updateAssets(const std::string& filePath)",
			"body": [
				"updateAssets(${1:std:string& filePath})"
			],
			"description": "void updateAssets(const std::string& filePath)"
		},
		 "void PhysicsWorld::debugDraw()": {
			"prefix": "void PhysicsWorld::debugDraw()",
			"body": [
				"void PhysicsWorld:debugDraw()"
			],
			"description": "void PhysicsWorld::debugDraw()"
		},
		 "void Node::setOrderOfArrival(int orderOfArrival)": {
			"prefix": "void Node::setOrderOfArrival(int orderOfArrival)",
			"body": [
				"Node:setOrderOfArrival(${1:int orderOfArrival})"
			],
			"description": "void Node::setOrderOfArrival(int orderOfArrival)"
		},
		 "void ZipUtils::setPvrEncryptionKey(unsigned int keyPart1, unsigned int keyPart2, unsigned int keyPart3, unsigned int keyPart4)": {
			"prefix": "void ZipUtils::setPvrEncryptionKey(unsigned int keyPart1, unsigned int keyPart2, unsigned int keyPart3, unsigned int keyPart4)",
			"body": [
				"ZipUtils:setPvrEncryptionKey(${1:unsigned int keyPart1},${2:unsigned int keyPart2},${3:unsigned int keyPart3},${4:unsigned int keyPart4})"
			],
			"description": "void ZipUtils::setPvrEncryptionKey(unsigned int keyPart1, unsigned int keyPart2, unsigned int keyPart3, unsigned int keyPart4)"
		},
		 "float FadeOutBLTiles::testFunc(const Size& pos, float time)": {
			"prefix": "float FadeOutBLTiles::testFunc(const Size& pos, float time)",
			"body": [
				"FadeOutBLTiles:testFunc(${1:Size& pos},${2:float time})"
			],
			"description": "float FadeOutBLTiles::testFunc(const Size& pos, float time)"
		},
		 "void Layout::onAfterVisitScissor()": {
			"prefix": "void Layout::onAfterVisitScissor()",
			"body": [
				"void Layout:onAfterVisitScissor()"
			],
			"description": "void Layout::onAfterVisitScissor()"
		},
		 "void Mat4::rotateY(float angle)": {
			"prefix": "void Mat4::rotateY(float angle)",
			"body": [
				"Mat4:rotateY(${1:float angle})"
			],
			"description": "void Mat4::rotateY(float angle)"
		},
		 "bool EditBoxImplWin::initWithSize(const Size& size)": {
			"prefix": "bool EditBoxImplWin::initWithSize(const Size& size)",
			"body": [
				"EditBoxImplWin:initWithSize(${1:Size& size})"
			],
			"description": "bool EditBoxImplWin::initWithSize(const Size& size)"
		},
		 "EaseQuarticActionIn* EaseQuarticActionIn::clone() const": {
			"prefix": "EaseQuarticActionIn* EaseQuarticActionIn::clone() const",
			"body": [
				"EaseQuarticActionIn* EaseQuarticActionIn:clone() "
			],
			"description": "EaseQuarticActionIn* EaseQuarticActionIn::clone() const"
		},
		 "void BillBoard::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void BillBoard::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"BillBoard:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void BillBoard::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "TransitionSceneOriented * TransitionSceneOriented::create(float t, Scene *scene, Orientation orientation)": {
			"prefix": "TransitionSceneOriented * TransitionSceneOriented::create(float t, Scene *scene, Orientation orientation)",
			"body": [
				"* TransitionSceneOriented:create(${1:float t},${2:Scene *scene},${3:Orientation orientation})"
			],
			"description": "TransitionSceneOriented * TransitionSceneOriented::create(float t, Scene *scene, Orientation orientation)"
		},
		 "void CCBSequence::setDuration(float fDuration)": {
			"prefix": "void CCBSequence::setDuration(float fDuration)",
			"body": [
				"CCBSequence:setDuration(${1:float fDuration})"
			],
			"description": "void CCBSequence::setDuration(float fDuration)"
		},
		 "bool Widget::isTouchEnabled() const": {
			"prefix": "bool Widget::isTouchEnabled() const",
			"body": [
				"bool Widget:isTouchEnabled() "
			],
			"description": "bool Widget::isTouchEnabled() const"
		},
		 "bool Tween::init(Bone *bone)": {
			"prefix": "bool Tween::init(Bone *bone)",
			"body": [
				"Tween:init(${1:Bone *bone})"
			],
			"description": "bool Tween::init(Bone *bone)"
		},
		 "ReverseTime* ReverseTime::clone() const": {
			"prefix": "ReverseTime* ReverseTime::clone() const",
			"body": [
				"ReverseTime* ReverseTime:clone() "
			],
			"description": "ReverseTime* ReverseTime::clone() const"
		},
		 "void ParticleSystem::setScaleY(float newScaleY)": {
			"prefix": "void ParticleSystem::setScaleY(float newScaleY)",
			"body": [
				"ParticleSystem:setScaleY(${1:float newScaleY})"
			],
			"description": "void ParticleSystem::setScaleY(float newScaleY)"
		},
		 "void TextureFrame::setNode(Node* node)": {
			"prefix": "void TextureFrame::setNode(Node* node)",
			"body": [
				"TextureFrame:setNode(${1:Node* node})"
			],
			"description": "void TextureFrame::setNode(Node* node)"
		},
		 "void WebSocket::onUIThreadReceiveMessage(WsMessage* msg)": {
			"prefix": "void WebSocket::onUIThreadReceiveMessage(WsMessage* msg)",
			"body": [
				"WebSocket:onUIThreadReceiveMessage(${1:WsMessage* msg})"
			],
			"description": "void WebSocket::onUIThreadReceiveMessage(WsMessage* msg)"
		},
		 "ParticleFire* ParticleFire::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleFire* ParticleFire::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleFire:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleFire* ParticleFire::createWithTotalParticles(int numberOfParticles)"
		},
		 "void ControlButtonLoader::onHandlePropTypeString(Node * pNode, Node * pParent, const char * pPropertyName, const char * pString, CCBReader * ccbReader)": {
			"prefix": "void ControlButtonLoader::onHandlePropTypeString(Node * pNode, Node * pParent, const char * pPropertyName, const char * pString, CCBReader * ccbReader)",
			"body": [
				"ControlButtonLoader:onHandlePropTypeString(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:char * pString},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlButtonLoader::onHandlePropTypeString(Node * pNode, Node * pParent, const char * pPropertyName, const char * pString, CCBReader * ccbReader)"
		},
		 "bool RotateBy::initWithDuration(float duration, float deltaAngleX, float deltaAngleY)": {
			"prefix": "bool RotateBy::initWithDuration(float duration, float deltaAngleX, float deltaAngleY)",
			"body": [
				"RotateBy:initWithDuration(${1:float duration},${2:float deltaAngleX},${3:float deltaAngleY})"
			],
			"description": "bool RotateBy::initWithDuration(float duration, float deltaAngleX, float deltaAngleY)"
		},
		 "void ImageView::ignoreContentAdaptWithSize(bool ignore)": {
			"prefix": "void ImageView::ignoreContentAdaptWithSize(bool ignore)",
			"body": [
				"ImageView:ignoreContentAdaptWithSize(${1:bool ignore})"
			],
			"description": "void ImageView::ignoreContentAdaptWithSize(bool ignore)"
		},
		 "ActionTimeline* ActionTimeline::clone() const": {
			"prefix": "ActionTimeline* ActionTimeline::clone() const",
			"body": [
				"ActionTimeline* ActionTimeline:clone() "
			],
			"description": "ActionTimeline* ActionTimeline::clone() const"
		},
		 "bool MenuItemSprite::initWithNormalSprite(Node* normalSprite, Node* selectedSprite, Node* disabledSprite, const ccMenuCallback& callback)": {
			"prefix": "bool MenuItemSprite::initWithNormalSprite(Node* normalSprite, Node* selectedSprite, Node* disabledSprite, const ccMenuCallback& callback)",
			"body": [
				"MenuItemSprite:initWithNormalSprite(${1:Node* normalSprite},${2:Node* selectedSprite},${3:Node* disabledSprite},${4:ccMenuCallback& callback})"
			],
			"description": "bool MenuItemSprite::initWithNormalSprite(Node* normalSprite, Node* selectedSprite, Node* disabledSprite, const ccMenuCallback& callback)"
		},
		 "void ComAudio::pauseEffect(unsigned int nSoundId)": {
			"prefix": "void ComAudio::pauseEffect(unsigned int nSoundId)",
			"body": [
				"ComAudio:pauseEffect(${1:unsigned int nSoundId})"
			],
			"description": "void ComAudio::pauseEffect(unsigned int nSoundId)"
		},
		 "GLProgramStateCache* GLProgramStateCache::getInstance()": {
			"prefix": "GLProgramStateCache* GLProgramStateCache::getInstance()",
			"body": [
				"GLProgramStateCache* GLProgramStateCache:getInstance()"
			],
			"description": "GLProgramStateCache* GLProgramStateCache::getInstance()"
		},
		 "void EaseCircleActionIn::update(float time)": {
			"prefix": "void EaseCircleActionIn::update(float time)",
			"body": [
				"EaseCircleActionIn:update(${1:float time})"
			],
			"description": "void EaseCircleActionIn::update(float time)"
		},
		 "float Physics3DSliderConstraint::getAngularPos() const": {
			"prefix": "float Physics3DSliderConstraint::getAngularPos() const",
			"body": [
				"float Physics3DSliderConstraint:getAngularPos() "
			],
			"description": "float Physics3DSliderConstraint::getAngularPos() const"
		},
		 "const Rect& Layout::getClippingRect()": {
			"prefix": "const Rect& Layout::getClippingRect()",
			"body": [
				" Rect& Layout:getClippingRect()"
			],
			"description": "const Rect& Layout::getClippingRect()"
		},
		 "void TextureAtlas::removeAllQuads()": {
			"prefix": "void TextureAtlas::removeAllQuads()",
			"body": [
				"void TextureAtlas:removeAllQuads()"
			],
			"description": "void TextureAtlas::removeAllQuads()"
		},
		 "CameraBackgroundColorBrush* CameraBackgroundBrush::createColorBrush(const Color4F& color, float depth)": {
			"prefix": "CameraBackgroundColorBrush* CameraBackgroundBrush::createColorBrush(const Color4F& color, float depth)",
			"body": [
				"CameraBackgroundBrush:createColorBrush(${1:Color4F& color},${2:float depth})"
			],
			"description": "CameraBackgroundColorBrush* CameraBackgroundBrush::createColorBrush(const Color4F& color, float depth)"
		},
		 "int Renderer::createRenderQueue()": {
			"prefix": "int Renderer::createRenderQueue()",
			"body": [
				"int Renderer:createRenderQueue()"
			],
			"description": "int Renderer::createRenderQueue()"
		},
		 "Quaternion Node::getRotationQuat() const": {
			"prefix": "Quaternion Node::getRotationQuat() const",
			"body": [
				"Quaternion Node:getRotationQuat() "
			],
			"description": "Quaternion Node::getRotationQuat() const"
		},
		 "spSlot* SkeletonRenderer::findSlot (const std::string& slotName) const": {
			"prefix": "spSlot* SkeletonRenderer::findSlot (const std::string& slotName) const",
			"body": [
				"SkeletonRenderer:findSlot (${1:std:string& slotName})"
			],
			"description": "spSlot* SkeletonRenderer::findSlot (const std::string& slotName) const"
		},
		 "float ActionFrame::getFrameTime()": {
			"prefix": "float ActionFrame::getFrameTime()",
			"body": [
				"float ActionFrame:getFrameTime()"
			],
			"description": "float ActionFrame::getFrameTime()"
		},
		 "ProgressTo* ProgressTo::create(float duration, float percent)": {
			"prefix": "ProgressTo* ProgressTo::create(float duration, float percent)",
			"body": [
				"ProgressTo:create(${1:float duration},${2:float percent})"
			],
			"description": "ProgressTo* ProgressTo::create(float duration, float percent)"
		},
		 "ActionTween* ActionTween::reverse() const": {
			"prefix": "ActionTween* ActionTween::reverse() const",
			"body": [
				"ActionTween* ActionTween:reverse() "
			],
			"description": "ActionTween* ActionTween::reverse() const"
		},
		 "CCBSoundEffect* CCBSoundEffect::actionWithSoundFile(const std::string &filename, float pitch, float pan, float gain)": {
			"prefix": "CCBSoundEffect* CCBSoundEffect::actionWithSoundFile(const std::string &filename, float pitch, float pan, float gain)",
			"body": [
				"CCBSoundEffect:actionWithSoundFile(${1:std:string &filename},${2:float pitch},${3:float pan},${4:float gain})"
			],
			"description": "CCBSoundEffect* CCBSoundEffect::actionWithSoundFile(const std::string &filename, float pitch, float pan, float gain)"
		},
		 "void EaseQuinticActionIn::update(float time)": {
			"prefix": "void EaseQuinticActionIn::update(float time)",
			"body": [
				"EaseQuinticActionIn:update(${1:float time})"
			],
			"description": "void EaseQuinticActionIn::update(float time)"
		},
		 "void AudioEngineImpl::uncacheAll()": {
			"prefix": "void AudioEngineImpl::uncacheAll()",
			"body": [
				"void AudioEngineImpl:uncacheAll()"
			],
			"description": "void AudioEngineImpl::uncacheAll()"
		},
		 "void AbstractCheckButton::frontCrossDisabledTextureScaleChangedWithSize()": {
			"prefix": "void AbstractCheckButton::frontCrossDisabledTextureScaleChangedWithSize()",
			"body": [
				"void AbstractCheckButton:frontCrossDisabledTextureScaleChangedWithSize()"
			],
			"description": "void AbstractCheckButton::frontCrossDisabledTextureScaleChangedWithSize()"
		},
		 "void SkeletonNode::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)": {
			"prefix": "void SkeletonNode::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)",
			"body": [
				"SkeletonNode:draw(${1:cocos2d:Renderer *renderer},${2:cocos2d:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void SkeletonNode::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)"
		},
		 "void Layout::forceDoLayout()": {
			"prefix": "void Layout::forceDoLayout()",
			"body": [
				"void Layout:forceDoLayout()"
			],
			"description": "void Layout::forceDoLayout()"
		},
		 "ShatteredTiles3D* ShatteredTiles3D::clone() const": {
			"prefix": "ShatteredTiles3D* ShatteredTiles3D::clone() const",
			"body": [
				"ShatteredTiles3D* ShatteredTiles3D:clone() "
			],
			"description": "ShatteredTiles3D* ShatteredTiles3D::clone() const"
		},
		 "float Physics3DSliderConstraint::getSoftnessLimAng() const": {
			"prefix": "float Physics3DSliderConstraint::getSoftnessLimAng() const",
			"body": [
				"float Physics3DSliderConstraint:getSoftnessLimAng() "
			],
			"description": "float Physics3DSliderConstraint::getSoftnessLimAng() const"
		},
		 "EaseQuadraticActionOut* EaseQuadraticActionOut::clone() const": {
			"prefix": "EaseQuadraticActionOut* EaseQuadraticActionOut::clone() const",
			"body": [
				"EaseQuadraticActionOut* EaseQuadraticActionOut:clone() "
			],
			"description": "EaseQuadraticActionOut* EaseQuadraticActionOut::clone() const"
		},
		 "void Scene::addChildToPhysicsWorld(Node* child)": {
			"prefix": "void Scene::addChildToPhysicsWorld(Node* child)",
			"body": [
				"Scene:addChildToPhysicsWorld(${1:Node* child})"
			],
			"description": "void Scene::addChildToPhysicsWorld(Node* child)"
		},
		 "void Widget::ignoreContentAdaptWithSize(bool ignore)": {
			"prefix": "void Widget::ignoreContentAdaptWithSize(bool ignore)",
			"body": [
				"Widget:ignoreContentAdaptWithSize(${1:bool ignore})"
			],
			"description": "void Widget::ignoreContentAdaptWithSize(bool ignore)"
		},
		 "void Sprite::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void Sprite::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"Sprite:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void Sprite::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "TintBy* TintBy::create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)": {
			"prefix": "TintBy* TintBy::create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)",
			"body": [
				"TintBy:create(${1:float duration},${2:GLshort deltaRed},${3:GLshort deltaGreen},${4:GLshort deltaBlue})"
			],
			"description": "TintBy* TintBy::create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)"
		},
		 "int HttpClient::getTimeoutForRead()": {
			"prefix": "int HttpClient::getTimeoutForRead()",
			"body": [
				"int HttpClient:getTimeoutForRead()"
			],
			"description": "int HttpClient::getTimeoutForRead()"
		},
		 "void Physics3DComponent::onExit()": {
			"prefix": "void Physics3DComponent::onExit()",
			"body": [
				"void Physics3DComponent:onExit()"
			],
			"description": "void Physics3DComponent::onExit()"
		},
		 "BlockData * NodeLoader::parsePropTypeBlock(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "BlockData * NodeLoader::parsePropTypeBlock(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"* NodeLoader:parsePropTypeBlock(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "BlockData * NodeLoader::parsePropTypeBlock(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void BaseLight::setIntensity(float intensity)": {
			"prefix": "void BaseLight::setIntensity(float intensity)",
			"body": [
				"BaseLight:setIntensity(${1:float intensity})"
			],
			"description": "void BaseLight::setIntensity(float intensity)"
		},
		 "bool RichElementCustomNode::init(int tag, const Color3B &color, GLubyte opacity, cocos2d::Node *customNode)": {
			"prefix": "bool RichElementCustomNode::init(int tag, const Color3B &color, GLubyte opacity, cocos2d::Node *customNode)",
			"body": [
				"RichElementCustomNode:init(${1:int tag},${2:Color3B &color},${3:GLubyte opacity},${4:cocos2d:Node *customNode})"
			],
			"description": "bool RichElementCustomNode::init(int tag, const Color3B &color, GLubyte opacity, cocos2d::Node *customNode)"
		},
		 "void Slider::loadProgressBarTexture(const std::string& fileName, TextureResType texType)": {
			"prefix": "void Slider::loadProgressBarTexture(const std::string& fileName, TextureResType texType)",
			"body": [
				"Slider:loadProgressBarTexture(${1:std:string& fileName},${2:TextureResType texType})"
			],
			"description": "void Slider::loadProgressBarTexture(const std::string& fileName, TextureResType texType)"
		},
		 "const Mat4& Camera::getProjectionMatrix() const": {
			"prefix": "const Mat4& Camera::getProjectionMatrix() const",
			"body": [
				" Mat4& Camera:getProjectionMatrix() "
			],
			"description": "const Mat4& Camera::getProjectionMatrix() const"
		},
		 "void ListView::updateInnerContainerSize()": {
			"prefix": "void ListView::updateInnerContainerSize()",
			"body": [
				"void ListView:updateInnerContainerSize()"
			],
			"description": "void ListView::updateInnerContainerSize()"
		},
		 "bool MenuItemFont::initWithString(const std::string& value, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "bool MenuItemFont::initWithString(const std::string& value, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"MenuItemFont:initWithString(${1:std:string& value},${2:Ref* target},${3:SEL_MenuHandler selector})"
			],
			"description": "bool MenuItemFont::initWithString(const std::string& value, Ref* target, SEL_MenuHandler selector)"
		},
		 "bool SpriteFrame::initWithTexture(Texture2D* texture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)": {
			"prefix": "bool SpriteFrame::initWithTexture(Texture2D* texture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)",
			"body": [
				"SpriteFrame:initWithTexture(${1:Texture2D* texture},${2:Rect& rect},${3:bool rotated},${4:Vec2& offset},${5:Size& originalSize})"
			],
			"description": "bool SpriteFrame::initWithTexture(Texture2D* texture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)"
		},
		 "void Widget::onFocusChange(Widget* widgetLostFocus, Widget* widgetGetFocus)": {
			"prefix": "void Widget::onFocusChange(Widget* widgetLostFocus, Widget* widgetGetFocus)",
			"body": [
				"Widget:onFocusChange(${1:Widget* widgetLostFocus},${2:Widget* widgetGetFocus})"
			],
			"description": "void Widget::onFocusChange(Widget* widgetLostFocus, Widget* widgetGetFocus)"
		},
		 "void Menu::alignItemsInColumns(int columns, va_list args)": {
			"prefix": "void Menu::alignItemsInColumns(int columns, va_list args)",
			"body": [
				"Menu:alignItemsInColumns(${1:int columns},${2:va_list args})"
			],
			"description": "void Menu::alignItemsInColumns(int columns, va_list args)"
		},
		 "bool Texture2D::initWithString(const char *text, const std::string& fontName, float fontSize, const Size& dimensions/* = Size(0, 0)*/, TextHAlignment hAlignment/* =  TextHAlignment::CENTER */, TextVAlignment vAlignment/* =  TextVAlignment::TOP */)": {
			"prefix": "bool Texture2D::initWithString(const char *text, const std::string& fontName, float fontSize, const Size& dimensions/* = Size(0, 0)*/, TextHAlignment hAlignment/* =  TextHAlignment::CENTER */, TextVAlignment vAlignment/* =  TextVAlignment::TOP */)",
			"body": [
				"Texture2D:initWithString(${1:char *text},${2:std:string& fontName},${3:float fontSize},${4:Size& dimensions/* = Size(0},${5:0})"
			],
			"description": "bool Texture2D::initWithString(const char *text, const std::string& fontName, float fontSize, const Size& dimensions/* = Size(0, 0)*/, TextHAlignment hAlignment/* =  TextHAlignment::CENTER */, TextVAlignment vAlignment/* =  TextVAlignment::TOP */)"
		},
		 "EaseSineIn* EaseSineIn::create(ActionInterval* action)": {
			"prefix": "EaseSineIn* EaseSineIn::create(ActionInterval* action)",
			"body": [
				"EaseSineIn:create(${1:ActionInterval* action})"
			],
			"description": "EaseSineIn* EaseSineIn::create(ActionInterval* action)"
		},
		 "PositionFrame* PositionFrame::create()": {
			"prefix": "PositionFrame* PositionFrame::create()",
			"body": [
				"PositionFrame* PositionFrame:create()"
			],
			"description": "PositionFrame* PositionFrame::create()"
		},
		 "void ParticleBatchNode::updateAllAtlasIndexes()": {
			"prefix": "void ParticleBatchNode::updateAllAtlasIndexes()",
			"body": [
				"void ParticleBatchNode:updateAllAtlasIndexes()"
			],
			"description": "void ParticleBatchNode::updateAllAtlasIndexes()"
		},
		 "void Slider::onTouchCancelled(Touch *touch, Event *unusedEvent)": {
			"prefix": "void Slider::onTouchCancelled(Touch *touch, Event *unusedEvent)",
			"body": [
				"Slider:onTouchCancelled(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void Slider::onTouchCancelled(Touch *touch, Event *unusedEvent)"
		},
		 "bool PhysicsJoint::init(cocos2d::PhysicsBody *a, cocos2d::PhysicsBody *b)": {
			"prefix": "bool PhysicsJoint::init(cocos2d::PhysicsBody *a, cocos2d::PhysicsBody *b)",
			"body": [
				"PhysicsJoint:init(${1:cocos2d:PhysicsBody *a},${2:cocos2d:PhysicsBody *b})"
			],
			"description": "bool PhysicsJoint::init(cocos2d::PhysicsBody *a, cocos2d::PhysicsBody *b)"
		},
		 "float PageView::getPositionXByIndex(ssize_t idx)const": {
			"prefix": "float PageView::getPositionXByIndex(ssize_t idx)const",
			"body": [
				"PageView:getPositionXByIndex(${1:ssize_t idx})"
			],
			"description": "float PageView::getPositionXByIndex(ssize_t idx)const"
		},
		 "void MenuItemLabel::setString(const std::string& label)": {
			"prefix": "void MenuItemLabel::setString(const std::string& label)",
			"body": [
				"MenuItemLabel:setString(${1:std:string& label})"
			],
			"description": "void MenuItemLabel::setString(const std::string& label)"
		},
		 "Properties* Properties::clone()": {
			"prefix": "Properties* Properties::clone()",
			"body": [
				"Properties* Properties:clone()"
			],
			"description": "Properties* Properties::clone()"
		},
		 "void Label::recordPlaceholderInfo(int letterIndex, char16_t utf16Char)": {
			"prefix": "void Label::recordPlaceholderInfo(int letterIndex, char16_t utf16Char)",
			"body": [
				"Label:recordPlaceholderInfo(${1:int letterIndex},${2:char16_t utf16Char})"
			],
			"description": "void Label::recordPlaceholderInfo(int letterIndex, char16_t utf16Char)"
		},
		 "void ScrollView::scrollToTopRight(float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToTopRight(float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToTopRight(${1:float second},${2:bool attenuated})"
			],
			"description": "void ScrollView::scrollToTopRight(float second, bool attenuated)"
		},
		 "void RenderQueue::realloc(size_t reserveSize)": {
			"prefix": "void RenderQueue::realloc(size_t reserveSize)",
			"body": [
				"RenderQueue:realloc(${1:size_t reserveSize})"
			],
			"description": "void RenderQueue::realloc(size_t reserveSize)"
		},
		 "MenuItem* MenuItem::create( const ccMenuCallback& callback)": {
			"prefix": "MenuItem* MenuItem::create( const ccMenuCallback& callback)",
			"body": [
				"MenuItem:create(${1:ccMenuCallback& callback})"
			],
			"description": "MenuItem* MenuItem::create( const ccMenuCallback& callback)"
		},
		 "void Node::setParent(Node * parent)": {
			"prefix": "void Node::setParent(Node * parent)",
			"body": [
				"Node:setParent(${1:Node * parent})"
			],
			"description": "void Node::setParent(Node * parent)"
		},
		 "void LabelBMFont::setColor(const Color3B& color)": {
			"prefix": "void LabelBMFont::setColor(const Color3B& color)",
			"body": [
				"LabelBMFont:setColor(${1:Color3B& color})"
			],
			"description": "void LabelBMFont::setColor(const Color3B& color)"
		},
		 "Armature *Armature::create()": {
			"prefix": "Armature *Armature::create()",
			"body": [
				"Armature *Armature:create()"
			],
			"description": "Armature *Armature::create()"
		},
		 "void BaseData::copy(const BaseData *node )": {
			"prefix": "void BaseData::copy(const BaseData *node )",
			"body": [
				"BaseData:copy(${1:BaseData *node})"
			],
			"description": "void BaseData::copy(const BaseData *node )"
		},
		 "void UserDefault::purgeSharedUserDefault()": {
			"prefix": "void UserDefault::purgeSharedUserDefault()",
			"body": [
				"void UserDefault:purgeSharedUserDefault()"
			],
			"description": "void UserDefault::purgeSharedUserDefault()"
		},
		 "GridBase* GridAction::getGrid()": {
			"prefix": "GridBase* GridAction::getGrid()",
			"body": [
				"GridBase* GridAction:getGrid()"
			],
			"description": "GridBase* GridAction::getGrid()"
		},
		 "GLfloat Texture2D::getMaxT() const": {
			"prefix": "GLfloat Texture2D::getMaxT() const",
			"body": [
				"GLfloat Texture2D:getMaxT() "
			],
			"description": "GLfloat Texture2D::getMaxT() const"
		},
		 "void GLView::handleTouchesCancel(int num, intptr_t ids[], float xs[], float ys[])": {
			"prefix": "void GLView::handleTouchesCancel(int num, intptr_t ids[], float xs[], float ys[])",
			"body": [
				"GLView:handleTouchesCancel(${1:int num},${2:intptr_t ids[]},${3:float xs[]},${4:float ys[]})"
			],
			"description": "void GLView::handleTouchesCancel(int num, intptr_t ids[], float xs[], float ys[])"
		},
		 "void ListView::addEventListener(const ccListViewCallback& callback)": {
			"prefix": "void ListView::addEventListener(const ccListViewCallback& callback)",
			"body": [
				"ListView:addEventListener(${1:ccListViewCallback& callback})"
			],
			"description": "void ListView::addEventListener(const ccListViewCallback& callback)"
		},
		 "void Vec2::set(const float* array)": {
			"prefix": "void Vec2::set(const float* array)",
			"body": [
				"Vec2:set(${1:float* array})"
			],
			"description": "void Vec2::set(const float* array)"
		},
		 "void ScrollView::scrollToBottomRight(float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToBottomRight(float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToBottomRight(${1:float second},${2:bool attenuated})"
			],
			"description": "void ScrollView::scrollToBottomRight(float second, bool attenuated)"
		},
		 "float Physics3DSliderConstraint::getMaxAngMotorForce() const": {
			"prefix": "float Physics3DSliderConstraint::getMaxAngMotorForce() const",
			"body": [
				"float Physics3DSliderConstraint:getMaxAngMotorForce() "
			],
			"description": "float Physics3DSliderConstraint::getMaxAngMotorForce() const"
		},
		 "Animate* Animate::create(Animation *animation)": {
			"prefix": "Animate* Animate::create(Animation *animation)",
			"body": [
				"Animate:create(${1:Animation *animation})"
			],
			"description": "Animate* Animate::create(Animation *animation)"
		},
		 "void ScrollView::jumpToPercentHorizontal(float percent)": {
			"prefix": "void ScrollView::jumpToPercentHorizontal(float percent)",
			"body": [
				"ScrollView:jumpToPercentHorizontal(${1:float percent})"
			],
			"description": "void ScrollView::jumpToPercentHorizontal(float percent)"
		},
		 "void Vec4::negate()": {
			"prefix": "void Vec4::negate()",
			"body": [
				"void Vec4:negate()"
			],
			"description": "void Vec4::negate()"
		},
		 "LayerMultiplex * LayerMultiplex::createWithLayer(Layer* layer)": {
			"prefix": "LayerMultiplex * LayerMultiplex::createWithLayer(Layer* layer)",
			"body": [
				"* LayerMultiplex:createWithLayer(${1:Layer* layer})"
			],
			"description": "LayerMultiplex * LayerMultiplex::createWithLayer(Layer* layer)"
		},
		 "void TransitionZoomFlipAngular::onEnter()": {
			"prefix": "void TransitionZoomFlipAngular::onEnter()",
			"body": [
				"void TransitionZoomFlipAngular:onEnter()"
			],
			"description": "void TransitionZoomFlipAngular::onEnter()"
		},
		 "void Label::createSpriteForSystemFont(const FontDefinition& fontDef)": {
			"prefix": "void Label::createSpriteForSystemFont(const FontDefinition& fontDef)",
			"body": [
				"Label:createSpriteForSystemFont(${1:FontDefinition& fontDef})"
			],
			"description": "void Label::createSpriteForSystemFont(const FontDefinition& fontDef)"
		},
		 "void Widget::setUnifySizeEnabled(bool enable)": {
			"prefix": "void Widget::setUnifySizeEnabled(bool enable)",
			"body": [
				"Widget:setUnifySizeEnabled(${1:bool enable})"
			],
			"description": "void Widget::setUnifySizeEnabled(bool enable)"
		},
		 "void ParticleBatchNode::addChild(Node * aChild, int zOrder, int tag)": {
			"prefix": "void ParticleBatchNode::addChild(Node * aChild, int zOrder, int tag)",
			"body": [
				"ParticleBatchNode:addChild(${1:Node * aChild},${2:int zOrder},${3:int tag})"
			],
			"description": "void ParticleBatchNode::addChild(Node * aChild, int zOrder, int tag)"
		},
		 "void RadioButtonGroup::addRadioButton(RadioButton* radioButton)": {
			"prefix": "void RadioButtonGroup::addRadioButton(RadioButton* radioButton)",
			"body": [
				"RadioButtonGroup:addRadioButton(${1:RadioButton* radioButton})"
			],
			"description": "void RadioButtonGroup::addRadioButton(RadioButton* radioButton)"
		},
		 "void Physics3DComponent::syncNodeToPhysics()": {
			"prefix": "void Physics3DComponent::syncNodeToPhysics()",
			"body": [
				"void Physics3DComponent:syncNodeToPhysics()"
			],
			"description": "void Physics3DComponent::syncNodeToPhysics()"
		},
		 "void ControlButtonLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)": {
			"prefix": "void ControlButtonLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)",
			"body": [
				"ControlButtonLoader:onHandlePropTypeSpriteFrame(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:SpriteFrame * pSpriteFrame},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlButtonLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)"
		},
		 "void Sprite3D::genGLProgramState(bool useLight)": {
			"prefix": "void Sprite3D::genGLProgramState(bool useLight)",
			"body": [
				"Sprite3D:genGLProgramState(${1:bool useLight})"
			],
			"description": "void Sprite3D::genGLProgramState(bool useLight)"
		},
		 "TMXMapInfo * TMXMapInfo::createWithXML(const std::string& tmxString, const std::string& resourcePath)": {
			"prefix": "TMXMapInfo * TMXMapInfo::createWithXML(const std::string& tmxString, const std::string& resourcePath)",
			"body": [
				"* TMXMapInfo:createWithXML(${1:std:string& tmxString},${2:std:string& resourcePath})"
			],
			"description": "TMXMapInfo * TMXMapInfo::createWithXML(const std::string& tmxString, const std::string& resourcePath)"
		},
		 "void FontAtlas::addLetterDefinition(char16_t utf16Char, const FontLetterDefinition &letterDefinition)": {
			"prefix": "void FontAtlas::addLetterDefinition(char16_t utf16Char, const FontLetterDefinition &letterDefinition)",
			"body": [
				"FontAtlas:addLetterDefinition(${1:char16_t utf16Char},${2:FontLetterDefinition &letterDefinition})"
			],
			"description": "void FontAtlas::addLetterDefinition(char16_t utf16Char, const FontLetterDefinition &letterDefinition)"
		},
		 "void CCBAnimationManager::setDocumentControllerName(const std::string &name)": {
			"prefix": "void CCBAnimationManager::setDocumentControllerName(const std::string &name)",
			"body": [
				"CCBAnimationManager:setDocumentControllerName(${1:std:string &name})"
			],
			"description": "void CCBAnimationManager::setDocumentControllerName(const std::string &name)"
		},
		 "bool GLProgramCache::init()": {
			"prefix": "bool GLProgramCache::init()",
			"body": [
				"bool GLProgramCache:init()"
			],
			"description": "bool GLProgramCache::init()"
		},
		 "void FontFNT::purgeCachedData()": {
			"prefix": "void FontFNT::purgeCachedData()",
			"body": [
				"void FontFNT:purgeCachedData()"
			],
			"description": "void FontFNT::purgeCachedData()"
		},
		 "bool Physics3DShape::initConvexHull( const cocos2d::Vec3 *points, int numPoints )": {
			"prefix": "bool Physics3DShape::initConvexHull( const cocos2d::Vec3 *points, int numPoints )",
			"body": [
				"Physics3DShape:initConvexHull(${1:cocos2d:Vec3 *points},${2:int numPoints})"
			],
			"description": "bool Physics3DShape::initConvexHull( const cocos2d::Vec3 *points, int numPoints )"
		},
		 "void NodeLoader::onHandlePropTypeBlock(Node * pNode, Node * pParent, const char* pPropertyName, BlockData * pBlockData, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeBlock(Node * pNode, Node * pParent, const char* pPropertyName, BlockData * pBlockData, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeBlock(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:BlockData * pBlockData},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeBlock(Node * pNode, Node * pParent, const char* pPropertyName, BlockData * pBlockData, CCBReader * ccbReader)"
		},
		 "void Animate3D::setSpeed(float speed)": {
			"prefix": "void Animate3D::setSpeed(float speed)",
			"body": [
				"Animate3D:setSpeed(${1:float speed})"
			],
			"description": "void Animate3D::setSpeed(float speed)"
		},
		 "bool FontAtlasCache::releaseFontAtlas(FontAtlas *atlas)": {
			"prefix": "bool FontAtlasCache::releaseFontAtlas(FontAtlas *atlas)",
			"body": [
				"FontAtlasCache:releaseFontAtlas(${1:FontAtlas *atlas})"
			],
			"description": "bool FontAtlasCache::releaseFontAtlas(FontAtlas *atlas)"
		},
		 "void TileMapAtlas::loadTGAfile(const std::string& file)": {
			"prefix": "void TileMapAtlas::loadTGAfile(const std::string& file)",
			"body": [
				"TileMapAtlas:loadTGAfile(${1:std:string& file})"
			],
			"description": "void TileMapAtlas::loadTGAfile(const std::string& file)"
		},
		 "void AbstractCheckButton::loadTextureFrontCross(SpriteFrame* spriteFrame)": {
			"prefix": "void AbstractCheckButton::loadTextureFrontCross(SpriteFrame* spriteFrame)",
			"body": [
				"AbstractCheckButton:loadTextureFrontCross(${1:SpriteFrame* spriteFrame})"
			],
			"description": "void AbstractCheckButton::loadTextureFrontCross(SpriteFrame* spriteFrame)"
		},
		 "CallFuncN * CallFuncN::create(const std::function<void(Node*)> &func)": {
			"prefix": "CallFuncN * CallFuncN::create(const std::function<void(Node*)> &func)",
			"body": [
				"* CallFuncN:create(${1:std:function<void(Node*})"
			],
			"description": "CallFuncN * CallFuncN::create(const std::function<void(Node*)> &func)"
		},
		 "int MenuItemFont::getFontSize()": {
			"prefix": "int MenuItemFont::getFontSize()",
			"body": [
				"int MenuItemFont:getFontSize()"
			],
			"description": "int MenuItemFont::getFontSize()"
		},
		 "bool ParticleMeteor::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleMeteor::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleMeteor:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleMeteor::initWithTotalParticles(int numberOfParticles)"
		},
		 "void CCBRotateYTo::startWithTarget(Node *pNode)": {
			"prefix": "void CCBRotateYTo::startWithTarget(Node *pNode)",
			"body": [
				"CCBRotateYTo:startWithTarget(${1:Node *pNode})"
			],
			"description": "void CCBRotateYTo::startWithTarget(Node *pNode)"
		},
		 "void RenderQueue::clear()": {
			"prefix": "void RenderQueue::clear()",
			"body": [
				"void RenderQueue:clear()"
			],
			"description": "void RenderQueue::clear()"
		},
		 "bool Component::serialize(void *ar)": {
			"prefix": "bool Component::serialize(void *ar)",
			"body": [
				"Component:serialize(${1:void *ar})"
			],
			"description": "bool Component::serialize(void *ar)"
		},
		 "const Color3B& AtlasNode::getColor() const": {
			"prefix": "const Color3B& AtlasNode::getColor() const",
			"body": [
				" Color3B& AtlasNode:getColor() "
			],
			"description": "const Color3B& AtlasNode::getColor() const"
		},
		 "bool EventListenerKeyboard::init()": {
			"prefix": "bool EventListenerKeyboard::init()",
			"body": [
				"bool EventListenerKeyboard:init()"
			],
			"description": "bool EventListenerKeyboard::init()"
		},
		 "SpriteBatchNode* Sprite::getBatchNode() const": {
			"prefix": "SpriteBatchNode* Sprite::getBatchNode() const",
			"body": [
				"SpriteBatchNode* Sprite:getBatchNode() "
			],
			"description": "SpriteBatchNode* Sprite::getBatchNode() const"
		},
		 "Margin::Margin(const Margin& other) : left(other.left), top(other.top), right(other.right), bottom(other.bottom)": {
			"prefix": "Margin::Margin(const Margin& other) : left(other.left), top(other.top), right(other.right), bottom(other.bottom)",
			"body": [
				"other})"
			],
			"description": "Margin::Margin(const Margin& other) : left(other.left), top(other.top), right(other.right), bottom(other.bottom)"
		},
		 "EaseBackOut* EaseBackOut::clone() const": {
			"prefix": "EaseBackOut* EaseBackOut::clone() const",
			"body": [
				"EaseBackOut* EaseBackOut:clone() "
			],
			"description": "EaseBackOut* EaseBackOut::clone() const"
		},
		 "ReverseTime* ReverseTime::create(FiniteTimeAction *action)": {
			"prefix": "ReverseTime* ReverseTime::create(FiniteTimeAction *action)",
			"body": [
				"ReverseTime:create(${1:FiniteTimeAction *action})"
			],
			"description": "ReverseTime* ReverseTime::create(FiniteTimeAction *action)"
		},
		 "void Menu::onTouchMoved(Touch* touch, Event* event)": {
			"prefix": "void Menu::onTouchMoved(Touch* touch, Event* event)",
			"body": [
				"Menu:onTouchMoved(${1:Touch* touch},${2:Event* event})"
			],
			"description": "void Menu::onTouchMoved(Touch* touch, Event* event)"
		},
		 "void Mat4::add(const Mat4& m1, const Mat4& m2, Mat4* dst)": {
			"prefix": "void Mat4::add(const Mat4& m1, const Mat4& m2, Mat4* dst)",
			"body": [
				"Mat4:add(${1:Mat4& m1},${2:Mat4& m2},${3:Mat4* dst})"
			],
			"description": "void Mat4::add(const Mat4& m1, const Mat4& m2, Mat4* dst)"
		},
		 "ssize_t TMXLayer::atlasIndexForNewZ(int z)": {
			"prefix": "ssize_t TMXLayer::atlasIndexForNewZ(int z)",
			"body": [
				"TMXLayer:atlasIndexForNewZ(${1:int z})"
			],
			"description": "ssize_t TMXLayer::atlasIndexForNewZ(int z)"
		},
		 "void ActionObject::initWithDictionary(const rapidjson::Value& dic, Ref* root)": {
			"prefix": "void ActionObject::initWithDictionary(const rapidjson::Value& dic, Ref* root)",
			"body": [
				"ActionObject:initWithDictionary(${1:rapidjson:Value& dic},${2:Ref* root})"
			],
			"description": "void ActionObject::initWithDictionary(const rapidjson::Value& dic, Ref* root)"
		},
		 "bool Renderer::checkVisibility(const Mat4 &transform, const Size &size)": {
			"prefix": "bool Renderer::checkVisibility(const Mat4 &transform, const Size &size)",
			"body": [
				"Renderer:checkVisibility(${1:Mat4 &transform},${2:Size &size})"
			],
			"description": "bool Renderer::checkVisibility(const Mat4 &transform, const Size &size)"
		},
		 "void Physics3DCollider::setCcdMotionThreshold(float ccdMotionThreshold)": {
			"prefix": "void Physics3DCollider::setCcdMotionThreshold(float ccdMotionThreshold)",
			"body": [
				"Physics3DCollider:setCcdMotionThreshold(${1:float ccdMotionThreshold})"
			],
			"description": "void Physics3DCollider::setCcdMotionThreshold(float ccdMotionThreshold)"
		},
		 "ssize_t Text::getStringLength()const": {
			"prefix": "ssize_t Text::getStringLength()const",
			"body": [
				"ssize_t Text:getStringLength()"
			],
			"description": "ssize_t Text::getStringLength()const"
		},
		 "void Node::scheduleOnce(SEL_SCHEDULE selector, float delay)": {
			"prefix": "void Node::scheduleOnce(SEL_SCHEDULE selector, float delay)",
			"body": [
				"Node:scheduleOnce(${1:SEL_SCHEDULE selector},${2:float delay})"
			],
			"description": "void Node::scheduleOnce(SEL_SCHEDULE selector, float delay)"
		},
		 "DisplayManager *DisplayManager::create(Bone *bone)": {
			"prefix": "DisplayManager *DisplayManager::create(Bone *bone)",
			"body": [
				"*DisplayManager:create(${1:Bone *bone})"
			],
			"description": "DisplayManager *DisplayManager::create(Bone *bone)"
		},
		 "void DataReaderHelper::addDataFromCache(const std::string& pFileContent, DataInfo *dataInfo)": {
			"prefix": "void DataReaderHelper::addDataFromCache(const std::string& pFileContent, DataInfo *dataInfo)",
			"body": [
				"DataReaderHelper:addDataFromCache(${1:std:string& pFileContent},${2:DataInfo *dataInfo})"
			],
			"description": "void DataReaderHelper::addDataFromCache(const std::string& pFileContent, DataInfo *dataInfo)"
		},
		 "void PhysicsJointRatchet::setPhase(float phase)": {
			"prefix": "void PhysicsJointRatchet::setPhase(float phase)",
			"body": [
				"PhysicsJointRatchet:setPhase(${1:float phase})"
			],
			"description": "void PhysicsJointRatchet::setPhase(float phase)"
		},
		 "void PhysicsWorld::update(float delta, bool userCall/* = false*/)": {
			"prefix": "void PhysicsWorld::update(float delta, bool userCall/* = false*/)",
			"body": [
				"PhysicsWorld:update(${1:float delta},${2:bool userCall/* = false*/})"
			],
			"description": "void PhysicsWorld::update(float delta, bool userCall/* = false*/)"
		},
		 "std::string CCBReader::toLowerCase(const char* pString)": {
			"prefix": "std::string CCBReader::toLowerCase(const char* pString)",
			"body": [
				"CCBReader:toLowerCase(${1:char* pString})"
			],
			"description": "std::string CCBReader::toLowerCase(const char* pString)"
		},
		 "Vec2 EventMouse::getStartLocation() const": {
			"prefix": "Vec2 EventMouse::getStartLocation() const",
			"body": [
				"Vec2 EventMouse:getStartLocation() "
			],
			"description": "Vec2 EventMouse::getStartLocation() const"
		},
		 "TransitionTurnOffTiles* TransitionTurnOffTiles::create(float t, Scene* scene)": {
			"prefix": "TransitionTurnOffTiles* TransitionTurnOffTiles::create(float t, Scene* scene)",
			"body": [
				"TransitionTurnOffTiles:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionTurnOffTiles* TransitionTurnOffTiles::create(float t, Scene* scene)"
		},
		 "MoveTo* MoveTo::create(float duration, const Vec3& position)": {
			"prefix": "MoveTo* MoveTo::create(float duration, const Vec3& position)",
			"body": [
				"MoveTo:create(${1:float duration},${2:Vec3& position})"
			],
			"description": "MoveTo* MoveTo::create(float duration, const Vec3& position)"
		},
		 "void Node::pauseSchedulerAndActions()": {
			"prefix": "void Node::pauseSchedulerAndActions()",
			"body": [
				"void Node:pauseSchedulerAndActions()"
			],
			"description": "void Node::pauseSchedulerAndActions()"
		},
		 "void GridBase::afterDraw(cocos2d::Node *target)": {
			"prefix": "void GridBase::afterDraw(cocos2d::Node *target)",
			"body": [
				"GridBase:afterDraw(${1:cocos2d:Node *target})"
			],
			"description": "void GridBase::afterDraw(cocos2d::Node *target)"
		},
		 "bool ScrollView::init()": {
			"prefix": "bool ScrollView::init()",
			"body": [
				"bool ScrollView:init()"
			],
			"description": "bool ScrollView::init()"
		},
		 "MovementData *DataReaderHelper::decodeMovement(tinyxml2::XMLElement *movementXML, ArmatureData *armatureData, DataInfo *dataInfo)": {
			"prefix": "MovementData *DataReaderHelper::decodeMovement(tinyxml2::XMLElement *movementXML, ArmatureData *armatureData, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeMovement(${1:tinyxml2:XMLElement *movementXML},${2:ArmatureData *armatureData},${3:DataInfo *dataInfo})"
			],
			"description": "MovementData *DataReaderHelper::decodeMovement(tinyxml2::XMLElement *movementXML, ArmatureData *armatureData, DataInfo *dataInfo)"
		},
		 "Frame* BlendFuncFrame::clone()": {
			"prefix": "Frame* BlendFuncFrame::clone()",
			"body": [
				"Frame* BlendFuncFrame:clone()"
			],
			"description": "Frame* BlendFuncFrame::clone()"
		},
		 "FrameData *Tween::tweenNodeTo(float percent, FrameData *node)": {
			"prefix": "FrameData *Tween::tweenNodeTo(float percent, FrameData *node)",
			"body": [
				"*Tween:tweenNodeTo(${1:float percent},${2:FrameData *node})"
			],
			"description": "FrameData *Tween::tweenNodeTo(float percent, FrameData *node)"
		},
		 "void Node::setAdditionalTransform(const AffineTransform& additionalTransform)": {
			"prefix": "void Node::setAdditionalTransform(const AffineTransform& additionalTransform)",
			"body": [
				"Node:setAdditionalTransform(${1:AffineTransform& additionalTransform})"
			],
			"description": "void Node::setAdditionalTransform(const AffineTransform& additionalTransform)"
		},
		 "bool Configuration::supportsS3TC() const": {
			"prefix": "bool Configuration::supportsS3TC() const",
			"body": [
				"bool Configuration:supportsS3TC() "
			],
			"description": "bool Configuration::supportsS3TC() const"
		},
		 "void Action::step(float dt)": {
			"prefix": "void Action::step(float dt)",
			"body": [
				"Action:step(${1:float dt})"
			],
			"description": "void Action::step(float dt)"
		},
		 "void ScrollView::addChild(Node* child, int zOrder, const std::string &name)": {
			"prefix": "void ScrollView::addChild(Node* child, int zOrder, const std::string &name)",
			"body": [
				"ScrollView:addChild(${1:Node* child},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void ScrollView::addChild(Node* child, int zOrder, const std::string &name)"
		},
		 "void LinearAllocator::free(void* /*ptr*/)": {
			"prefix": "void LinearAllocator::free(void* /*ptr*/)",
			"body": [
				"LinearAllocator:free(${1:void* /*ptr*/})"
			],
			"description": "void LinearAllocator::free(void* /*ptr*/)"
		},
		 "bool __String::initWithFormatAndValist(const char* format, va_list ap)": {
			"prefix": "bool __String::initWithFormatAndValist(const char* format, va_list ap)",
			"body": [
				"__String:initWithFormatAndValist(${1:char* format},${2:va_list ap})"
			],
			"description": "bool __String::initWithFormatAndValist(const char* format, va_list ap)"
		},
		 "void __Array::setObject(Ref* object, int index)": {
			"prefix": "void __Array::setObject(Ref* object, int index)",
			"body": [
				"__Array:setObject(${1:Ref* object},${2:int index})"
			],
			"description": "void __Array::setObject(Ref* object, int index)"
		},
		 "GLuint VertexBuffer::getVBO() const": {
			"prefix": "GLuint VertexBuffer::getVBO() const",
			"body": [
				"GLuint VertexBuffer:getVBO() "
			],
			"description": "GLuint VertexBuffer::getVBO() const"
		},
		 "void cocos2d::NavMeshAgent::setAutoOrientation(bool isAuto)": {
			"prefix": "void cocos2d::NavMeshAgent::setAutoOrientation(bool isAuto)",
			"body": [
				"cocos2d:NavMeshAgent:setAutoOrientation(${1:bool isAuto})"
			],
			"description": "void cocos2d::NavMeshAgent::setAutoOrientation(bool isAuto)"
		},
		 "void LayoutParameter::setMargin(const Margin &margin)": {
			"prefix": "void LayoutParameter::setMargin(const Margin &margin)",
			"body": [
				"LayoutParameter:setMargin(${1:Margin &margin})"
			],
			"description": "void LayoutParameter::setMargin(const Margin &margin)"
		},
		 "DeccelAmplitude* DeccelAmplitude::reverse() const": {
			"prefix": "DeccelAmplitude* DeccelAmplitude::reverse() const",
			"body": [
				"DeccelAmplitude* DeccelAmplitude:reverse() "
			],
			"description": "DeccelAmplitude* DeccelAmplitude::reverse() const"
		},
		 "GLuint Mesh::getVertexBuffer() const": {
			"prefix": "GLuint Mesh::getVertexBuffer() const",
			"body": [
				"GLuint Mesh:getVertexBuffer() "
			],
			"description": "GLuint Mesh::getVertexBuffer() const"
		},
		 "bool SkeletonRenderer::setSkin (const std::string& skinName)": {
			"prefix": "bool SkeletonRenderer::setSkin (const std::string& skinName)",
			"body": [
				"SkeletonRenderer:setSkin (${1:std:string& skinName})"
			],
			"description": "bool SkeletonRenderer::setSkin (const std::string& skinName)"
		},
		 "void Mat4::transformVector(Vec4* vector) const": {
			"prefix": "void Mat4::transformVector(Vec4* vector) const",
			"body": [
				"Mat4:transformVector(${1:Vec4* vector})"
			],
			"description": "void Mat4::transformVector(Vec4* vector) const"
		},
		 "EaseCircleActionOut* EaseCircleActionOut::reverse() const": {
			"prefix": "EaseCircleActionOut* EaseCircleActionOut::reverse() const",
			"body": [
				"EaseCircleActionOut* EaseCircleActionOut:reverse() "
			],
			"description": "EaseCircleActionOut* EaseCircleActionOut::reverse() const"
		},
		 "VertexAttrib* GLProgram::getVertexAttrib(const std::string &name)": {
			"prefix": "VertexAttrib* GLProgram::getVertexAttrib(const std::string &name)",
			"body": [
				"GLProgram:getVertexAttrib(${1:std:string &name})"
			],
			"description": "VertexAttrib* GLProgram::getVertexAttrib(const std::string &name)"
		},
		 "cocos2d::Mat4 Physics3DCollider::getWorldTransform() const": {
			"prefix": "cocos2d::Mat4 Physics3DCollider::getWorldTransform() const",
			"body": [
				"cocos2d:Mat4 Physics3DCollider:getWorldTransform() "
			],
			"description": "cocos2d::Mat4 Physics3DCollider::getWorldTransform() const"
		},
		 "void EaseExponentialInOut::update(float time)": {
			"prefix": "void EaseExponentialInOut::update(float time)",
			"body": [
				"EaseExponentialInOut:update(${1:float time})"
			],
			"description": "void EaseExponentialInOut::update(float time)"
		},
		 "void TextureCube::setTexParameters(const TexParams& texParams)": {
			"prefix": "void TextureCube::setTexParameters(const TexParams& texParams)",
			"body": [
				"TextureCube:setTexParameters(${1:TexParams& texParams})"
			],
			"description": "void TextureCube::setTexParameters(const TexParams& texParams)"
		},
		 "void SplitRows::update(float time)": {
			"prefix": "void SplitRows::update(float time)",
			"body": [
				"SplitRows:update(${1:float time})"
			],
			"description": "void SplitRows::update(float time)"
		},
		 "bool PhysicsBody::isResting() const": {
			"prefix": "bool PhysicsBody::isResting() const",
			"body": [
				"bool PhysicsBody:isResting() "
			],
			"description": "bool PhysicsBody::isResting() const"
		},
		 "VertexStreamAttribute* VertexData::getStreamAttribute(int semantic)": {
			"prefix": "VertexStreamAttribute* VertexData::getStreamAttribute(int semantic)",
			"body": [
				"VertexData:getStreamAttribute(${1:int semantic})"
			],
			"description": "VertexStreamAttribute* VertexData::getStreamAttribute(int semantic)"
		},
		 "bool GridBase::initWithSize(const Size& gridSize, Texture2D *texture, bool flipped)": {
			"prefix": "bool GridBase::initWithSize(const Size& gridSize, Texture2D *texture, bool flipped)",
			"body": [
				"GridBase:initWithSize(${1:Size& gridSize},${2:Texture2D *texture},${3:bool flipped})"
			],
			"description": "bool GridBase::initWithSize(const Size& gridSize, Texture2D *texture, bool flipped)"
		},
		 "void PageView::copyClonedWidgetChildren(Widget* model)": {
			"prefix": "void PageView::copyClonedWidgetChildren(Widget* model)",
			"body": [
				"PageView:copyClonedWidgetChildren(${1:Widget* model})"
			],
			"description": "void PageView::copyClonedWidgetChildren(Widget* model)"
		},
		 "void SimpleAudioEngine::setEffectsVolume(float volume)": {
			"prefix": "void SimpleAudioEngine::setEffectsVolume(float volume)",
			"body": [
				"SimpleAudioEngine:setEffectsVolume(${1:float volume})"
			],
			"description": "void SimpleAudioEngine::setEffectsVolume(float volume)"
		},
		 "void Mat4::scale(const Vec3& s)": {
			"prefix": "void Mat4::scale(const Vec3& s)",
			"body": [
				"Mat4:scale(${1:Vec3& s})"
			],
			"description": "void Mat4::scale(const Vec3& s)"
		},
		 "void SkeletonAnimation::setStartListener (const StartListener& listener)": {
			"prefix": "void SkeletonAnimation::setStartListener (const StartListener& listener)",
			"body": [
				"SkeletonAnimation:setStartListener (${1:StartListener& listener})"
			],
			"description": "void SkeletonAnimation::setStartListener (const StartListener& listener)"
		},
		 "cocos2d::Vec3 Physics3DRigidBody::getLinearVelocity() const": {
			"prefix": "cocos2d::Vec3 Physics3DRigidBody::getLinearVelocity() const",
			"body": [
				"cocos2d:Vec3 Physics3DRigidBody:getLinearVelocity() "
			],
			"description": "cocos2d::Vec3 Physics3DRigidBody::getLinearVelocity() const"
		},
		 "ActionInterval* TransitionSlideInB:: action()": {
			"prefix": "ActionInterval* TransitionSlideInB:: action()",
			"body": [
				"ActionInterval* TransitionSlideInB: action()"
			],
			"description": "ActionInterval* TransitionSlideInB:: action()"
		},
		 "Label* Label::createWithBMFont(const std::string& bmfontFilePath, const std::string& text,const TextHAlignment& hAlignment /* = TextHAlignment::LEFT */, int maxLineWidth /* = 0 */, const Vec2& imageOffset /* = Vec2::ZERO */)": {
			"prefix": "Label* Label::createWithBMFont(const std::string& bmfontFilePath, const std::string& text,const TextHAlignment& hAlignment /* = TextHAlignment::LEFT */, int maxLineWidth /* = 0 */, const Vec2& imageOffset /* = Vec2::ZERO */)",
			"body": [
				"Label:createWithBMFont(${1:std:string& bmfontFilePath},${2:std:string& text},${3:TextHAlignment& hAlignment /* = TextHAlignment:LEFT */},${4:int maxLineWidth /* = 0 */},${5:Vec2& imageOffset /* = Vec2:ZERO */})"
			],
			"description": "Label* Label::createWithBMFont(const std::string& bmfontFilePath, const std::string& text,const TextHAlignment& hAlignment /* = TextHAlignment::LEFT */, int maxLineWidth /* = 0 */, const Vec2& imageOffset /* = Vec2::ZERO */)"
		},
		 "void ImageView::imageTextureScaleChangedWithSize()": {
			"prefix": "void ImageView::imageTextureScaleChangedWithSize()",
			"body": [
				"void ImageView:imageTextureScaleChangedWithSize()"
			],
			"description": "void ImageView::imageTextureScaleChangedWithSize()"
		},
		 "void Node::resume()": {
			"prefix": "void Node::resume()",
			"body": [
				"void Node:resume()"
			],
			"description": "void Node::resume()"
		},
		 "Application::Platform Application::getTargetPlatform()": {
			"prefix": "Application::Platform Application::getTargetPlatform()",
			"body": [
				"Application:Platform Application:getTargetPlatform()"
			],
			"description": "Application::Platform Application::getTargetPlatform()"
		},
		 "bool Sprite::initWithTexture(Texture2D *texture, const Rect& rect)": {
			"prefix": "bool Sprite::initWithTexture(Texture2D *texture, const Rect& rect)",
			"body": [
				"Sprite:initWithTexture(${1:Texture2D *texture},${2:Rect& rect})"
			],
			"description": "bool Sprite::initWithTexture(Texture2D *texture, const Rect& rect)"
		},
		 "int Configuration::getMaxTextureUnits() const": {
			"prefix": "int Configuration::getMaxTextureUnits() const",
			"body": [
				"int Configuration:getMaxTextureUnits() "
			],
			"description": "int Configuration::getMaxTextureUnits() const"
		},
		 "float Text::getFontSize()const": {
			"prefix": "float Text::getFontSize()const",
			"body": [
				"float Text:getFontSize()"
			],
			"description": "float Text::getFontSize()const"
		},
		 "void TransformHelp::matrixToNode(const Mat4 &matrix, BaseData &node)": {
			"prefix": "void TransformHelp::matrixToNode(const Mat4 &matrix, BaseData &node)",
			"body": [
				"TransformHelp:matrixToNode(${1:Mat4 &matrix},${2:BaseData &node})"
			],
			"description": "void TransformHelp::matrixToNode(const Mat4 &matrix, BaseData &node)"
		},
		 "void Bone3D::clearBoneBlendState()": {
			"prefix": "void Bone3D::clearBoneBlendState()",
			"body": [
				"void Bone3D:clearBoneBlendState()"
			],
			"description": "void Bone3D::clearBoneBlendState()"
		},
		 "Liquid* Liquid::clone() const": {
			"prefix": "Liquid* Liquid::clone() const",
			"body": [
				"Liquid* Liquid:clone() "
			],
			"description": "Liquid* Liquid::clone() const"
		},
		 "Physics3DConstraint* Physics3DRigidBody::getConstraint( unsigned int idx ) const": {
			"prefix": "Physics3DConstraint* Physics3DRigidBody::getConstraint( unsigned int idx ) const",
			"body": [
				"Physics3DRigidBody:getConstraint(${1:unsigned int idx})"
			],
			"description": "Physics3DConstraint* Physics3DRigidBody::getConstraint( unsigned int idx ) const"
		},
		 "int NinePatchImageParser::getFrameWidth()const": {
			"prefix": "int NinePatchImageParser::getFrameWidth()const",
			"body": [
				"int NinePatchImageParser:getFrameWidth()"
			],
			"description": "int NinePatchImageParser::getFrameWidth()const"
		},
		 "Animation* AnimationCache::getAnimation(const std::string& name)": {
			"prefix": "Animation* AnimationCache::getAnimation(const std::string& name)",
			"body": [
				"AnimationCache:getAnimation(${1:std:string& name})"
			],
			"description": "Animation* AnimationCache::getAnimation(const std::string& name)"
		},
		 "bool PhysicsShapeEdgePolygon::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)": {
			"prefix": "bool PhysicsShapeEdgePolygon::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)",
			"body": [
				"PhysicsShapeEdgePolygon:init(${1:Vec2* points},${2:int count},${3:PhysicsMaterial& material/* = MaterialDefault*/},${4:float border/* = 1*/})"
			],
			"description": "bool PhysicsShapeEdgePolygon::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)"
		},
		 "SkeletonRenderer* SkeletonRenderer::createWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)": {
			"prefix": "SkeletonRenderer* SkeletonRenderer::createWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)",
			"body": [
				"SkeletonRenderer:createWithFile (${1:std:string& skeletonDataFile},${2:spAtlas* atlas},${3:float scale})"
			],
			"description": "SkeletonRenderer* SkeletonRenderer::createWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)"
		},
		 "const std::string& HttpClient::getSSLVerification()": {
			"prefix": "const std::string& HttpClient::getSSLVerification()",
			"body": [
				" std:string& HttpClient:getSSLVerification()"
			],
			"description": "const std::string& HttpClient::getSSLVerification()"
		},
		 "std::string FileUtilsWin32::getSuitableFOpen(const std::string& filenameUtf8) const": {
			"prefix": "std::string FileUtilsWin32::getSuitableFOpen(const std::string& filenameUtf8) const",
			"body": [
				"FileUtilsWin32:getSuitableFOpen(${1:std:string& filenameUtf8})"
			],
			"description": "std::string FileUtilsWin32::getSuitableFOpen(const std::string& filenameUtf8) const"
		},
		 "void Physics3DHingeConstraint::enableMotor(bool enableMotor)": {
			"prefix": "void Physics3DHingeConstraint::enableMotor(bool enableMotor)",
			"body": [
				"Physics3DHingeConstraint:enableMotor(${1:bool enableMotor})"
			],
			"description": "void Physics3DHingeConstraint::enableMotor(bool enableMotor)"
		},
		 "float Physics3DConeTwistConstraint::getTwistAngle() const": {
			"prefix": "float Physics3DConeTwistConstraint::getTwistAngle() const",
			"body": [
				"float Physics3DConeTwistConstraint:getTwistAngle() "
			],
			"description": "float Physics3DConeTwistConstraint::getTwistAngle() const"
		},
		 "void Node::schedule(SEL_SCHEDULE selector, float interval)": {
			"prefix": "void Node::schedule(SEL_SCHEDULE selector, float interval)",
			"body": [
				"Node:schedule(${1:SEL_SCHEDULE selector},${2:float interval})"
			],
			"description": "void Node::schedule(SEL_SCHEDULE selector, float interval)"
		},
		 "void DrawNode::drawRect(const Vec2 &p1, const Vec2 &p2, const Vec2 &p3, const Vec2& p4, const Color4F &color)": {
			"prefix": "void DrawNode::drawRect(const Vec2 &p1, const Vec2 &p2, const Vec2 &p3, const Vec2& p4, const Color4F &color)",
			"body": [
				"DrawNode:drawRect(${1:Vec2 &p1},${2:Vec2 &p2},${3:Vec2 &p3},${4:Vec2& p4},${5:Color4F &color})"
			],
			"description": "void DrawNode::drawRect(const Vec2 &p1, const Vec2 &p2, const Vec2 &p3, const Vec2& p4, const Color4F &color)"
		},
		 "bool ComponentContainer::add(Component *com)": {
			"prefix": "bool ComponentContainer::add(Component *com)",
			"body": [
				"ComponentContainer:add(${1:Component *com})"
			],
			"description": "bool ComponentContainer::add(Component *com)"
		},
		 "void Helper::doLayout(cocos2d::Node *rootNode)": {
			"prefix": "void Helper::doLayout(cocos2d::Node *rootNode)",
			"body": [
				"Helper:doLayout(${1:cocos2d:Node *rootNode})"
			],
			"description": "void Helper::doLayout(cocos2d::Node *rootNode)"
		},
		 "void DrawNode::onDrawGLPoint(const Mat4 &transform, uint32_t flags)": {
			"prefix": "void DrawNode::onDrawGLPoint(const Mat4 &transform, uint32_t flags)",
			"body": [
				"DrawNode:onDrawGLPoint(${1:Mat4 &transform},${2:uint32_t flags})"
			],
			"description": "void DrawNode::onDrawGLPoint(const Mat4 &transform, uint32_t flags)"
		},
		 "void loadFileJNI(const int index, const std::string &filePath)": {
			"prefix": "void loadFileJNI(const int index, const std::string &filePath)",
			"body": [
				"loadFileJNI(${1:int index},${2:std:string &filePath})"
			],
			"description": "void loadFileJNI(const int index, const std::string &filePath)"
		},
		 "void ScrollViewBar::updateLength(float length)": {
			"prefix": "void ScrollViewBar::updateLength(float length)",
			"body": [
				"ScrollViewBar:updateLength(${1:float length})"
			],
			"description": "void ScrollViewBar::updateLength(float length)"
		},
		 "void SIOClientImpl::send(const std::string& endpoint, const std::string& s)": {
			"prefix": "void SIOClientImpl::send(const std::string& endpoint, const std::string& s)",
			"body": [
				"SIOClientImpl:send(${1:std:string& endpoint},${2:std:string& s})"
			],
			"description": "void SIOClientImpl::send(const std::string& endpoint, const std::string& s)"
		},
		 "CCBRotateYTo* CCBRotateYTo::create(float fDuration, float fAngle)": {
			"prefix": "CCBRotateYTo* CCBRotateYTo::create(float fDuration, float fAngle)",
			"body": [
				"CCBRotateYTo:create(${1:float fDuration},${2:float fAngle})"
			],
			"description": "CCBRotateYTo* CCBRotateYTo::create(float fDuration, float fAngle)"
		},
		 "ParticleSystem * ParticleSystem::create(const std::string& plistFile)": {
			"prefix": "ParticleSystem * ParticleSystem::create(const std::string& plistFile)",
			"body": [
				"* ParticleSystem:create(${1:std:string& plistFile})"
			],
			"description": "ParticleSystem * ParticleSystem::create(const std::string& plistFile)"
		},
		 "void Sprite::setOpacityModifyRGB(bool modify)": {
			"prefix": "void Sprite::setOpacityModifyRGB(bool modify)",
			"body": [
				"Sprite:setOpacityModifyRGB(${1:bool modify})"
			],
			"description": "void Sprite::setOpacityModifyRGB(bool modify)"
		},
		 "void ProgressTimer::updateBar(void)": {
			"prefix": "void ProgressTimer::updateBar(void)",
			"body": [
				"ProgressTimer:updateBar(${1:void})"
			],
			"description": "void ProgressTimer::updateBar(void)"
		},
		 "ssize_t BundleReader::tell()": {
			"prefix": "ssize_t BundleReader::tell()",
			"body": [
				"ssize_t BundleReader:tell()"
			],
			"description": "ssize_t BundleReader::tell()"
		},
		 "void Physics3DRigidBody::addConstraint( Physics3DConstraint *constraint )": {
			"prefix": "void Physics3DRigidBody::addConstraint( Physics3DConstraint *constraint )",
			"body": [
				"Physics3DRigidBody:addConstraint(${1:Physics3DConstraint *raint})"
			],
			"description": "void Physics3DRigidBody::addConstraint( Physics3DConstraint *constraint )"
		},
		 "Size Director::getVisibleSize() const": {
			"prefix": "Size Director::getVisibleSize() const",
			"body": [
				"Size Director:getVisibleSize() "
			],
			"description": "Size Director::getVisibleSize() const"
		},
		 "cocos2d::ui::Widget* WidgetPropertiesReader0300::createWidgetFromBinary(CocoLoader* cocoLoader,stExpCocoNode*	cocoNode, const char* fileName)": {
			"prefix": "cocos2d::ui::Widget* WidgetPropertiesReader0300::createWidgetFromBinary(CocoLoader* cocoLoader,stExpCocoNode*	cocoNode, const char* fileName)",
			"body": [
				"WidgetPropertiesReader0300:createWidgetFromBinary(${1:CocoLoader* cocoLoader},${2:stExpCocoNode*	cocoNode},${3:char* fileName})"
			],
			"description": "cocos2d::ui::Widget* WidgetPropertiesReader0300::createWidgetFromBinary(CocoLoader* cocoLoader,stExpCocoNode*	cocoNode, const char* fileName)"
		},
		 "void EventListenerTouchOneByOne::setSwallowTouches(bool needSwallow)": {
			"prefix": "void EventListenerTouchOneByOne::setSwallowTouches(bool needSwallow)",
			"body": [
				"EventListenerTouchOneByOne:setSwallowTouches(${1:bool needSwallow})"
			],
			"description": "void EventListenerTouchOneByOne::setSwallowTouches(bool needSwallow)"
		},
		 "Show* Show::create()": {
			"prefix": "Show* Show::create()",
			"body": [
				"Show* Show:create()"
			],
			"description": "Show* Show::create()"
		},
		 "Node * CCBReader::readNodeGraph()": {
			"prefix": "Node * CCBReader::readNodeGraph()",
			"body": [
				"Node * CCBReader:readNodeGraph()"
			],
			"description": "Node * CCBReader::readNodeGraph()"
		},
		 "const IndexBuffer* Primitive::getIndexData() const": {
			"prefix": "const IndexBuffer* Primitive::getIndexData() const",
			"body": [
				" IndexBuffer* Primitive:getIndexData() "
			],
			"description": "const IndexBuffer* Primitive::getIndexData() const"
		},
		 "float ParticleSystem::getRadialAccel() const": {
			"prefix": "float ParticleSystem::getRadialAccel() const",
			"body": [
				"float ParticleSystem:getRadialAccel() "
			],
			"description": "float ParticleSystem::getRadialAccel() const"
		},
		 "void GLProgram::setUniformLocationWith3fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)": {
			"prefix": "void GLProgram::setUniformLocationWith3fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)",
			"body": [
				"GLProgram:setUniformLocationWith3fv(${1:GLint location},${2:GLfloat* floats},${3:unsigned int numberOfArrays})"
			],
			"description": "void GLProgram::setUniformLocationWith3fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)"
		},
		 "void Terrain::QuadTree::resetNeedDraw(bool value)": {
			"prefix": "void Terrain::QuadTree::resetNeedDraw(bool value)",
			"body": [
				"Terrain:QuadTree:resetNeedDraw(${1:bool value})"
			],
			"description": "void Terrain::QuadTree::resetNeedDraw(bool value)"
		},
		 "void EditBoxImplCommon::onEnter(void)": {
			"prefix": "void EditBoxImplCommon::onEnter(void)",
			"body": [
				"EditBoxImplCommon:onEnter(${1:void})"
			],
			"description": "void EditBoxImplCommon::onEnter(void)"
		},
		 "void Menu::alignItemsInColumns(int columns, ...)": {
			"prefix": "void Menu::alignItemsInColumns(int columns, ...)",
			"body": [
				"Menu:alignItemsInColumns(${1:int columns},${2:...})"
			],
			"description": "void Menu::alignItemsInColumns(int columns, ...)"
		},
		 "void GLViewImpl::onGLFWMouseMoveCallBack(GLFWwindow* window, double x, double y)": {
			"prefix": "void GLViewImpl::onGLFWMouseMoveCallBack(GLFWwindow* window, double x, double y)",
			"body": [
				"GLViewImpl:onGLFWMouseMoveCallBack(${1:GLFWwindow* window},${2:double x},${3:double y})"
			],
			"description": "void GLViewImpl::onGLFWMouseMoveCallBack(GLFWwindow* window, double x, double y)"
		},
		 "void BoneNode::setContentSize(const cocos2d::Size& contentSize)": {
			"prefix": "void BoneNode::setContentSize(const cocos2d::Size& contentSize)",
			"body": [
				"BoneNode:setContentSize(${1:cocos2d:Size& contentSize})"
			],
			"description": "void BoneNode::setContentSize(const cocos2d::Size& contentSize)"
		},
		 "void CCBAnimationManager::runAnimationsForSequenceNamed(const char *pName)": {
			"prefix": "void CCBAnimationManager::runAnimationsForSequenceNamed(const char *pName)",
			"body": [
				"CCBAnimationManager:runAnimationsForSequenceNamed(${1:char *pName})"
			],
			"description": "void CCBAnimationManager::runAnimationsForSequenceNamed(const char *pName)"
		},
		 "ActionTimeline* CSLoader::createTimeline(const Data data, const std::string& filename)": {
			"prefix": "ActionTimeline* CSLoader::createTimeline(const Data data, const std::string& filename)",
			"body": [
				"CSLoader:createTimeline(${1:Data data},${2:std:string& filename})"
			],
			"description": "ActionTimeline* CSLoader::createTimeline(const Data data, const std::string& filename)"
		},
		 "float ActionFrameEasing::bounceTime(float t)": {
			"prefix": "float ActionFrameEasing::bounceTime(float t)",
			"body": [
				"ActionFrameEasing:bounceTime(${1:float t})"
			],
			"description": "float ActionFrameEasing::bounceTime(float t)"
		},
		 "bool Properties::getColor(const char* name, Vec3* out) const": {
			"prefix": "bool Properties::getColor(const char* name, Vec3* out) const",
			"body": [
				"Properties:getColor(${1:char* name},${2:Vec3* out})"
			],
			"description": "bool Properties::getColor(const char* name, Vec3* out) const"
		},
		 "void Director::setActionManager(ActionManager* actionManager)": {
			"prefix": "void Director::setActionManager(ActionManager* actionManager)",
			"body": [
				"Director:setActionManager(${1:ActionManager* actionManager})"
			],
			"description": "void Director::setActionManager(ActionManager* actionManager)"
		},
		 "ValueMap* Animate3D::getKeyFrameUserInfo(int keyFrame)": {
			"prefix": "ValueMap* Animate3D::getKeyFrameUserInfo(int keyFrame)",
			"body": [
				"Animate3D:getKeyFrameUserInfo(${1:int keyFrame})"
			],
			"description": "ValueMap* Animate3D::getKeyFrameUserInfo(int keyFrame)"
		},
		 "void Grabber::afterRender(cocos2d::Texture2D *texture)": {
			"prefix": "void Grabber::afterRender(cocos2d::Texture2D *texture)",
			"body": [
				"Grabber:afterRender(${1:cocos2d:Texture2D *texture})"
			],
			"description": "void Grabber::afterRender(cocos2d::Texture2D *texture)"
		},
		 "bool Bundle3D::loadMaterialDataJson_0_2(MaterialDatas& materialdatas)": {
			"prefix": "bool Bundle3D::loadMaterialDataJson_0_2(MaterialDatas& materialdatas)",
			"body": [
				"Bundle3D:loadMaterialDataJson_0_2(${1:MaterialDatas& materialdatas})"
			],
			"description": "bool Bundle3D::loadMaterialDataJson_0_2(MaterialDatas& materialdatas)"
		},
		 "cocos2d::Mat4 Physics3DConeTwistConstraint::getFrameOffsetB() const": {
			"prefix": "cocos2d::Mat4 Physics3DConeTwistConstraint::getFrameOffsetB() const",
			"body": [
				"cocos2d:Mat4 Physics3DConeTwistConstraint:getFrameOffsetB() "
			],
			"description": "cocos2d::Mat4 Physics3DConeTwistConstraint::getFrameOffsetB() const"
		},
		 "TransitionShrinkGrow* TransitionShrinkGrow::create(float t, Scene* scene)": {
			"prefix": "TransitionShrinkGrow* TransitionShrinkGrow::create(float t, Scene* scene)",
			"body": [
				"TransitionShrinkGrow:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionShrinkGrow* TransitionShrinkGrow::create(float t, Scene* scene)"
		},
		 "std::string GLProgram::getProgramLog() const": {
			"prefix": "std::string GLProgram::getProgramLog() const",
			"body": [
				"std:string GLProgram:getProgramLog() "
			],
			"description": "std::string GLProgram::getProgramLog() const"
		},
		 "void AbstractCheckButton::initRenderer()": {
			"prefix": "void AbstractCheckButton::initRenderer()",
			"body": [
				"void AbstractCheckButton:initRenderer()"
			],
			"description": "void AbstractCheckButton::initRenderer()"
		},
		 "EaseCubicActionOut* EaseCubicActionOut::create(ActionInterval* action)": {
			"prefix": "EaseCubicActionOut* EaseCubicActionOut::create(ActionInterval* action)",
			"body": [
				"EaseCubicActionOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseCubicActionOut* EaseCubicActionOut::create(ActionInterval* action)"
		},
		 "SkeletonNode* SkeletonNode::create()": {
			"prefix": "SkeletonNode* SkeletonNode::create()",
			"body": [
				"SkeletonNode* SkeletonNode:create()"
			],
			"description": "SkeletonNode* SkeletonNode::create()"
		},
		 "FadeOutBLTiles* FadeOutBLTiles::clone() const": {
			"prefix": "FadeOutBLTiles* FadeOutBLTiles::clone() const",
			"body": [
				"FadeOutBLTiles* FadeOutBLTiles:clone() "
			],
			"description": "FadeOutBLTiles* FadeOutBLTiles::clone() const"
		},
		 "CCBKeyframe::EasingType CCBKeyframe::getEasingType()": {
			"prefix": "CCBKeyframe::EasingType CCBKeyframe::getEasingType()",
			"body": [
				"CCBKeyframe:EasingType CCBKeyframe:getEasingType()"
			],
			"description": "CCBKeyframe::EasingType CCBKeyframe::getEasingType()"
		},
		 "float Rect::getMidX() const": {
			"prefix": "float Rect::getMidX() const",
			"body": [
				"float Rect:getMidX() "
			],
			"description": "float Rect::getMidX() const"
		},
		 "void Terrain::setMaxDetailMapAmount(int max_value)": {
			"prefix": "void Terrain::setMaxDetailMapAmount(int max_value)",
			"body": [
				"Terrain:setMaxDetailMapAmount(${1:int max_value})"
			],
			"description": "void Terrain::setMaxDetailMapAmount(int max_value)"
		},
		 "EaseOut* EaseOut::clone() const": {
			"prefix": "EaseOut* EaseOut::clone() const",
			"body": [
				"EaseOut* EaseOut:clone() "
			],
			"description": "EaseOut* EaseOut::clone() const"
		},
		 "void NodeLoader::onHandlePropTypeFloatVar(Node * pNode, Node * pParent, const char* pPropertyName, float * pFloatVar, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeFloatVar(Node * pNode, Node * pParent, const char* pPropertyName, float * pFloatVar, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeFloatVar(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:float * pFloatVar},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeFloatVar(Node * pNode, Node * pParent, const char* pPropertyName, float * pFloatVar, CCBReader * ccbReader)"
		},
		 "void ReverseTime::stop(void)": {
			"prefix": "void ReverseTime::stop(void)",
			"body": [
				"ReverseTime:stop(${1:void})"
			],
			"description": "void ReverseTime::stop(void)"
		},
		 "bool Image::initWithImageData(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithImageData(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithImageData(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithImageData(const unsigned char * data, ssize_t dataLen)"
		},
		 "void ParallaxNode::addChild(Node *child, int z, const Vec2& ratio, const Vec2& offset)": {
			"prefix": "void ParallaxNode::addChild(Node *child, int z, const Vec2& ratio, const Vec2& offset)",
			"body": [
				"ParallaxNode:addChild(${1:Node *child},${2:int z},${3:Vec2& ratio},${4:Vec2& offset})"
			],
			"description": "void ParallaxNode::addChild(Node *child, int z, const Vec2& ratio, const Vec2& offset)"
		},
		 "void SIOClientImpl::emit(const std::string& endpoint, const std::string& eventname, const std::string& args)": {
			"prefix": "void SIOClientImpl::emit(const std::string& endpoint, const std::string& eventname, const std::string& args)",
			"body": [
				"SIOClientImpl:emit(${1:std:string& endpoint},${2:std:string& eventname},${3:std:string& args})"
			],
			"description": "void SIOClientImpl::emit(const std::string& endpoint, const std::string& eventname, const std::string& args)"
		},
		 "void CCBRotateYTo::update(float time)": {
			"prefix": "void CCBRotateYTo::update(float time)",
			"body": [
				"CCBRotateYTo:update(${1:float time})"
			],
			"description": "void CCBRotateYTo::update(float time)"
		},
		 "void TransitionSplitCols::onExit()": {
			"prefix": "void TransitionSplitCols::onExit()",
			"body": [
				"void TransitionSplitCols:onExit()"
			],
			"description": "void TransitionSplitCols::onExit()"
		},
		 "void ParticleBatchNode::insertChild(ParticleSystem* system, int index)": {
			"prefix": "void ParticleBatchNode::insertChild(ParticleSystem* system, int index)",
			"body": [
				"ParticleBatchNode:insertChild(${1:ParticleSystem* system},${2:int index})"
			],
			"description": "void ParticleBatchNode::insertChild(ParticleSystem* system, int index)"
		},
		 "void PageView::update(float dt)": {
			"prefix": "void PageView::update(float dt)",
			"body": [
				"PageView:update(${1:float dt})"
			],
			"description": "void PageView::update(float dt)"
		},
		 "Widget* Widget::getAncensterWidget(Node* node)": {
			"prefix": "Widget* Widget::getAncensterWidget(Node* node)",
			"body": [
				"Widget:getAncensterWidget(${1:Node* node})"
			],
			"description": "Widget* Widget::getAncensterWidget(Node* node)"
		},
		 "Mat4::Mat4(const float* mat)": {
			"prefix": "Mat4::Mat4(const float* mat)",
			"body": [
				"mat})"
			],
			"description": "Mat4::Mat4(const float* mat)"
		},
		 "void GLProgram::setUniformsForBuiltins()": {
			"prefix": "void GLProgram::setUniformsForBuiltins()",
			"body": [
				"void GLProgram:setUniformsForBuiltins()"
			],
			"description": "void GLProgram::setUniformsForBuiltins()"
		},
		 "void Button::loadTexturePressed(const std::string& selected,TextureResType texType)": {
			"prefix": "void Button::loadTexturePressed(const std::string& selected,TextureResType texType)",
			"body": [
				"Button:loadTexturePressed(${1:std:string& selected},${2:TextureResType texType})"
			],
			"description": "void Button::loadTexturePressed(const std::string& selected,TextureResType texType)"
		},
		 "BoneNode* BoneNode::create()": {
			"prefix": "BoneNode* BoneNode::create()",
			"body": [
				"BoneNode* BoneNode:create()"
			],
			"description": "BoneNode* BoneNode::create()"
		},
		 "void TextField::addEventListenerTextField(Ref *target, SEL_TextFieldEvent selecor)": {
			"prefix": "void TextField::addEventListenerTextField(Ref *target, SEL_TextFieldEvent selecor)",
			"body": [
				"TextField:addEventListenerTextField(${1:Ref *target},${2:SEL_TextFieldEvent selecor})"
			],
			"description": "void TextField::addEventListenerTextField(Ref *target, SEL_TextFieldEvent selecor)"
		},
		 "void Value::reset(Type type)": {
			"prefix": "void Value::reset(Type type)",
			"body": [
				"Value:reset(${1:Type type})"
			],
			"description": "void Value::reset(Type type)"
		},
		 "void Label::createShadowSpriteForSystemFont(const FontDefinition& fontDef)": {
			"prefix": "void Label::createShadowSpriteForSystemFont(const FontDefinition& fontDef)",
			"body": [
				"Label:createShadowSpriteForSystemFont(${1:FontDefinition& fontDef})"
			],
			"description": "void Label::createShadowSpriteForSystemFont(const FontDefinition& fontDef)"
		},
		 "void SpriteBatchNode::removeChild(Node *child, bool cleanup)": {
			"prefix": "void SpriteBatchNode::removeChild(Node *child, bool cleanup)",
			"body": [
				"SpriteBatchNode:removeChild(${1:Node *child},${2:bool cleanup})"
			],
			"description": "void SpriteBatchNode::removeChild(Node *child, bool cleanup)"
		},
		 "void AABB::reset()": {
			"prefix": "void AABB::reset()",
			"body": [
				"void AABB:reset()"
			],
			"description": "void AABB::reset()"
		},
		 "int Image::getBitPerPixel()": {
			"prefix": "int Image::getBitPerPixel()",
			"body": [
				"int Image:getBitPerPixel()"
			],
			"description": "int Image::getBitPerPixel()"
		},
		 "void EaseQuinticActionInOut::update(float time)": {
			"prefix": "void EaseQuinticActionInOut::update(float time)",
			"body": [
				"EaseQuinticActionInOut:update(${1:float time})"
			],
			"description": "void EaseQuinticActionInOut::update(float time)"
		},
		 "void Bone3D::updateLocalMat()": {
			"prefix": "void Bone3D::updateLocalMat()",
			"body": [
				"void Bone3D:updateLocalMat()"
			],
			"description": "void Bone3D::updateLocalMat()"
		},
		 "CCBSequenceProperty* CCBSequence::getCallbackChannel()": {
			"prefix": "CCBSequenceProperty* CCBSequence::getCallbackChannel()",
			"body": [
				"CCBSequenceProperty* CCBSequence:getCallbackChannel()"
			],
			"description": "CCBSequenceProperty* CCBSequence::getCallbackChannel()"
		},
		 "void Node::updateDisplayedOpacity(GLubyte parentOpacity)": {
			"prefix": "void Node::updateDisplayedOpacity(GLubyte parentOpacity)",
			"body": [
				"Node:updateDisplayedOpacity(${1:GLubyte parentOpacity})"
			],
			"description": "void Node::updateDisplayedOpacity(GLubyte parentOpacity)"
		},
		 "__CCCallFuncO * __CCCallFuncO::clone() const": {
			"prefix": "__CCCallFuncO * __CCCallFuncO::clone() const",
			"body": [
				"__CCCallFuncO * __CCCallFuncO:clone() "
			],
			"description": "__CCCallFuncO * __CCCallFuncO::clone() const"
		},
		 "float Camera::getDepthInView(const Mat4& transform) const": {
			"prefix": "float Camera::getDepthInView(const Mat4& transform) const",
			"body": [
				"Camera:getDepthInView(${1:Mat4& transform})"
			],
			"description": "float Camera::getDepthInView(const Mat4& transform) const"
		},
		 "std::string FileUtils::fullPathForFilename(const std::string &filename) const": {
			"prefix": "std::string FileUtils::fullPathForFilename(const std::string &filename) const",
			"body": [
				"FileUtils:fullPathForFilename(${1:std:string &filename})"
			],
			"description": "std::string FileUtils::fullPathForFilename(const std::string &filename) const"
		},
		 "std::string ParticleSystemQuad::getDescription() const": {
			"prefix": "std::string ParticleSystemQuad::getDescription() const",
			"body": [
				"std:string ParticleSystemQuad:getDescription() "
			],
			"description": "std::string ParticleSystemQuad::getDescription() const"
		},
		 "void Layout::addBackGroundImage()": {
			"prefix": "void Layout::addBackGroundImage()",
			"body": [
				"void Layout:addBackGroundImage()"
			],
			"description": "void Layout::addBackGroundImage()"
		},
		 "void Animation3DCache::addAnimation(const std::string& key, Animation3D* animation)": {
			"prefix": "void Animation3DCache::addAnimation(const std::string& key, Animation3D* animation)",
			"body": [
				"Animation3DCache:addAnimation(${1:std:string& key},${2:Animation3D* animation})"
			],
			"description": "void Animation3DCache::addAnimation(const std::string& key, Animation3D* animation)"
		},
		 "void Widget::pushDownEvent()": {
			"prefix": "void Widget::pushDownEvent()",
			"body": [
				"void Widget:pushDownEvent()"
			],
			"description": "void Widget::pushDownEvent()"
		},
		 "char* stExpCocoNode::GetValue(CocoLoader* pCoco)": {
			"prefix": "char* stExpCocoNode::GetValue(CocoLoader* pCoco)",
			"body": [
				"stExpCocoNode:GetValue(${1:CocoLoader* pCoco})"
			],
			"description": "char* stExpCocoNode::GetValue(CocoLoader* pCoco)"
		},
		 "const Color3B& ProgressTimer::getColor() const": {
			"prefix": "const Color3B& ProgressTimer::getColor() const",
			"body": [
				" Color3B& ProgressTimer:getColor() "
			],
			"description": "const Color3B& ProgressTimer::getColor() const"
		},
		 "bool TriggerObj::detect()": {
			"prefix": "bool TriggerObj::detect()",
			"body": [
				"bool TriggerObj:detect()"
			],
			"description": "bool TriggerObj::detect()"
		},
		 "void Sprite3D::createAsync(const std::string& modelPath, const std::string& texturePath, const std::function<void(Sprite3D*, void*)>& callback, void* callbackparam)": {
			"prefix": "void Sprite3D::createAsync(const std::string& modelPath, const std::string& texturePath, const std::function<void(Sprite3D*, void*)>& callback, void* callbackparam)",
			"body": [
				"Sprite3D:createAsync(${1:std:string& modelPath},${2:std:string& texturePath},${3:std:function<void(Sprite3D*},${4:void*})"
			],
			"description": "void Sprite3D::createAsync(const std::string& modelPath, const std::string& texturePath, const std::function<void(Sprite3D*, void*)>& callback, void* callbackparam)"
		},
		 "bool Label::multilineTextWrapByChar()": {
			"prefix": "bool Label::multilineTextWrapByChar()",
			"body": [
				"bool Label:multilineTextWrapByChar()"
			],
			"description": "bool Label::multilineTextWrapByChar()"
		},
		 "void BaseLight::setRotationFromDirection( const Vec3 &direction )": {
			"prefix": "void BaseLight::setRotationFromDirection( const Vec3 &direction )",
			"body": [
				"BaseLight:setRotationFromDirection(${1:Vec3 &direction})"
			],
			"description": "void BaseLight::setRotationFromDirection( const Vec3 &direction )"
		},
		 "void Texture2D::addSpriteFrameCapInset(SpriteFrame* spritframe, const Rect& capInsets)": {
			"prefix": "void Texture2D::addSpriteFrameCapInset(SpriteFrame* spritframe, const Rect& capInsets)",
			"body": [
				"Texture2D:addSpriteFrameCapInset(${1:SpriteFrame* spritframe},${2:Rect& capInsets})"
			],
			"description": "void Texture2D::addSpriteFrameCapInset(SpriteFrame* spritframe, const Rect& capInsets)"
		},
		 "bool TriggerObj::init()": {
			"prefix": "bool TriggerObj::init()",
			"body": [
				"bool TriggerObj:init()"
			],
			"description": "bool TriggerObj::init()"
		},
		 "Tween *Tween::create(Bone *bone)": {
			"prefix": "Tween *Tween::create(Bone *bone)",
			"body": [
				"*Tween:create(${1:Bone *bone})"
			],
			"description": "Tween *Tween::create(Bone *bone)"
		},
		 "void GLProgram::setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)": {
			"prefix": "void GLProgram::setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)",
			"body": [
				"GLProgram:setUniformLocationWith3f(${1:GLint location},${2:GLfloat f1},${3:GLfloat f2},${4:GLfloat f3})"
			],
			"description": "void GLProgram::setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)"
		},
		 "void cocos2d::NavMesh::drawAgents()": {
			"prefix": "void cocos2d::NavMesh::drawAgents()",
			"body": [
				"void cocos2d:NavMesh:drawAgents()"
			],
			"description": "void cocos2d::NavMesh::drawAgents()"
		},
		 "void PointArray::removeControlPointAtIndex(ssize_t index)": {
			"prefix": "void PointArray::removeControlPointAtIndex(ssize_t index)",
			"body": [
				"PointArray:removeControlPointAtIndex(${1:ssize_t index})"
			],
			"description": "void PointArray::removeControlPointAtIndex(ssize_t index)"
		},
		 "float GLViewImpl::getFrameZoomFactor() const": {
			"prefix": "float GLViewImpl::getFrameZoomFactor() const",
			"body": [
				"float GLViewImpl:getFrameZoomFactor() "
			],
			"description": "float GLViewImpl::getFrameZoomFactor() const"
		},
		 "void Button::updateContentSize()": {
			"prefix": "void Button::updateContentSize()",
			"body": [
				"void Button:updateContentSize()"
			],
			"description": "void Button::updateContentSize()"
		},
		 "bool Node::removeComponent(const std::string& name)": {
			"prefix": "bool Node::removeComponent(const std::string& name)",
			"body": [
				"Node:removeComponent(${1:std:string& name})"
			],
			"description": "bool Node::removeComponent(const std::string& name)"
		},
		 "void localStorageInit( const std::string& fullpath/* = "" */)": {
			"prefix": "void localStorageInit( const std::string& fullpath/* = "" */)",
			"body": [
				"localStorageInit(${1:std:string& fullpath/* = "" */})"
			],
			"description": "void localStorageInit( const std::string& fullpath/* = "" */)"
		},
		 "Node* CSLoader::loadTMXTiledMap(const rapidjson::Value &json)": {
			"prefix": "Node* CSLoader::loadTMXTiledMap(const rapidjson::Value &json)",
			"body": [
				"CSLoader:loadTMXTiledMap(${1:rapidjson:Value &json})"
			],
			"description": "Node* CSLoader::loadTMXTiledMap(const rapidjson::Value &json)"
		},
		 "void AbstractCheckButton::backGroundDisabledTextureScaleChangedWithSize()": {
			"prefix": "void AbstractCheckButton::backGroundDisabledTextureScaleChangedWithSize()",
			"body": [
				"void AbstractCheckButton:backGroundDisabledTextureScaleChangedWithSize()"
			],
			"description": "void AbstractCheckButton::backGroundDisabledTextureScaleChangedWithSize()"
		},
		 "void Text::onPressStateChangedToPressed()": {
			"prefix": "void Text::onPressStateChangedToPressed()",
			"body": [
				"void Text:onPressStateChangedToPressed()"
			],
			"description": "void Text::onPressStateChangedToPressed()"
		},
		 "void Layout::onBeforeVisitScissor()": {
			"prefix": "void Layout::onBeforeVisitScissor()",
			"body": [
				"void Layout:onBeforeVisitScissor()"
			],
			"description": "void Layout::onBeforeVisitScissor()"
		},
		 "void GLProgramState::setUniformInt(GLint uniformLocation, int value)": {
			"prefix": "void GLProgramState::setUniformInt(GLint uniformLocation, int value)",
			"body": [
				"GLProgramState:setUniformInt(${1:GLint uniformLocation},${2:int value})"
			],
			"description": "void GLProgramState::setUniformInt(GLint uniformLocation, int value)"
		},
		 "Frame* ActionTimelineCache::loadRotationSkewFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadRotationSkewFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadRotationSkewFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadRotationSkewFrame(const rapidjson::Value& json)"
		},
		 "void DataReaderHelper::loadData()": {
			"prefix": "void DataReaderHelper::loadData()",
			"body": [
				"void DataReaderHelper:loadData()"
			],
			"description": "void DataReaderHelper::loadData()"
		},
		 "void BaseData::setColor(const Color4B &color)": {
			"prefix": "void BaseData::setColor(const Color4B &color)",
			"body": [
				"BaseData:setColor(${1:Color4B &color})"
			],
			"description": "void BaseData::setColor(const Color4B &color)"
		},
		 "ParticleExplosion* ParticleExplosion::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleExplosion* ParticleExplosion::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleExplosion:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleExplosion* ParticleExplosion::createWithTotalParticles(int numberOfParticles)"
		},
		 "char*	stExpCocoObjectDesc::GetName(CocoLoader* pCoco)": {
			"prefix": "char*	stExpCocoObjectDesc::GetName(CocoLoader* pCoco)",
			"body": [
				"pCoco})"
			],
			"description": "char*	stExpCocoObjectDesc::GetName(CocoLoader* pCoco)"
		},
		 "ShatteredTiles3D* ShatteredTiles3D::create(float duration, const Size& gridSize, int range, bool shatterZ)": {
			"prefix": "ShatteredTiles3D* ShatteredTiles3D::create(float duration, const Size& gridSize, int range, bool shatterZ)",
			"body": [
				"ShatteredTiles3D:create(${1:float duration},${2:Size& gridSize},${3:int range},${4:bool shatterZ})"
			],
			"description": "ShatteredTiles3D* ShatteredTiles3D::create(float duration, const Size& gridSize, int range, bool shatterZ)"
		},
		 "void Pass::setVertexAttribBinding(VertexAttribBinding* binding)": {
			"prefix": "void Pass::setVertexAttribBinding(VertexAttribBinding* binding)",
			"body": [
				"Pass:setVertexAttribBinding(${1:VertexAttribBinding* binding})"
			],
			"description": "void Pass::setVertexAttribBinding(VertexAttribBinding* binding)"
		},
		 "Vec3 SpotLight::getDirection() const": {
			"prefix": "Vec3 SpotLight::getDirection() const",
			"body": [
				"Vec3 SpotLight:getDirection() "
			],
			"description": "Vec3 SpotLight::getDirection() const"
		},
		 "void NodeLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char* pPropertyName, float pFloat, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char* pPropertyName, float pFloat, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeFloat(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:float pFloat},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char* pPropertyName, float pFloat, CCBReader * ccbReader)"
		},
		 "void TMXLayer::removeTileAt(const Vec2& tileCoordinate)": {
			"prefix": "void TMXLayer::removeTileAt(const Vec2& tileCoordinate)",
			"body": [
				"TMXLayer:removeTileAt(${1:Vec2& tileCoordinate})"
			],
			"description": "void TMXLayer::removeTileAt(const Vec2& tileCoordinate)"
		},
		 "void MeshCommand::applyRenderState()": {
			"prefix": "void MeshCommand::applyRenderState()",
			"body": [
				"void MeshCommand:applyRenderState()"
			],
			"description": "void MeshCommand::applyRenderState()"
		},
		 "bool Physics3DWorld::needCollisionChecking()": {
			"prefix": "bool Physics3DWorld::needCollisionChecking()",
			"body": [
				"bool Physics3DWorld:needCollisionChecking()"
			],
			"description": "bool Physics3DWorld::needCollisionChecking()"
		},
		 "Node* CSLoader::createNode(const std::string &filename, const ccNodeLoadCallback &callback)": {
			"prefix": "Node* CSLoader::createNode(const std::string &filename, const ccNodeLoadCallback &callback)",
			"body": [
				"CSLoader:createNode(${1:std:string &filename},${2:ccNodeLoadCallback &callback})"
			],
			"description": "Node* CSLoader::createNode(const std::string &filename, const ccNodeLoadCallback &callback)"
		},
		 "void Layout::onSizeChanged()": {
			"prefix": "void Layout::onSizeChanged()",
			"body": [
				"void Layout:onSizeChanged()"
			],
			"description": "void Layout::onSizeChanged()"
		},
		 "FadeOutBLTiles* FadeOutBLTiles::create(float duration, const Size& gridSize)": {
			"prefix": "FadeOutBLTiles* FadeOutBLTiles::create(float duration, const Size& gridSize)",
			"body": [
				"FadeOutBLTiles:create(${1:float duration},${2:Size& gridSize})"
			],
			"description": "FadeOutBLTiles* FadeOutBLTiles::create(float duration, const Size& gridSize)"
		},
		 "void TintTo::startWithTarget(Node *target)": {
			"prefix": "void TintTo::startWithTarget(Node *target)",
			"body": [
				"TintTo:startWithTarget(${1:Node *target})"
			],
			"description": "void TintTo::startWithTarget(Node *target)"
		},
		 "void CameraBackgroundColorBrush::setColor(const Color4F& color)": {
			"prefix": "void CameraBackgroundColorBrush::setColor(const Color4F& color)",
			"body": [
				"CameraBackgroundColorBrush:setColor(${1:Color4F& color})"
			],
			"description": "void CameraBackgroundColorBrush::setColor(const Color4F& color)"
		},
		 "void Bone3D::addChildBone(Bone3D* bone)": {
			"prefix": "void Bone3D::addChildBone(Bone3D* bone)",
			"body": [
				"Bone3D:addChildBone(${1:Bone3D* bone})"
			],
			"description": "void Bone3D::addChildBone(Bone3D* bone)"
		},
		 "void PhysicsJoint::setEnable(bool enable)": {
			"prefix": "void PhysicsJoint::setEnable(bool enable)",
			"body": [
				"PhysicsJoint:setEnable(${1:bool enable})"
			],
			"description": "void PhysicsJoint::setEnable(bool enable)"
		},
		 "GLubyte Node::getDisplayedOpacity() const": {
			"prefix": "GLubyte Node::getDisplayedOpacity() const",
			"body": [
				"GLubyte Node:getDisplayedOpacity() "
			],
			"description": "GLubyte Node::getDisplayedOpacity() const"
		},
		 "bool ScrollView::scrollChildren(float touchOffsetX, float touchOffsetY)": {
			"prefix": "bool ScrollView::scrollChildren(float touchOffsetX, float touchOffsetY)",
			"body": [
				"ScrollView:scrollChildren(${1:float touchOffsetX},${2:float touchOffsetY})"
			],
			"description": "bool ScrollView::scrollChildren(float touchOffsetX, float touchOffsetY)"
		},
		 "void RenderQueue::restoreRenderState()": {
			"prefix": "void RenderQueue::restoreRenderState()",
			"body": [
				"void RenderQueue:restoreRenderState()"
			],
			"description": "void RenderQueue::restoreRenderState()"
		},
		 "Rect::Rect(float x, float y, float width, float height)": {
			"prefix": "Rect::Rect(float x, float y, float width, float height)",
			"body": [
				"x},${2:float y},${3:float width},${4:float height})"
			],
			"description": "Rect::Rect(float x, float y, float width, float height)"
		},
		 "bool Terrain::initTextures()": {
			"prefix": "bool Terrain::initTextures()",
			"body": [
				"bool Terrain:initTextures()"
			],
			"description": "bool Terrain::initTextures()"
		},
		 "void ParticleBatchNode::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void ParticleBatchNode::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"ParticleBatchNode:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void ParticleBatchNode::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "void SpriteLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)": {
			"prefix": "void SpriteLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)",
			"body": [
				"SpriteLoader:onHandlePropTypeSpriteFrame(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:SpriteFrame * pSpriteFrame},${5:CCBReader * ccbReader})"
			],
			"description": "void SpriteLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)"
		},
		 "void Node::setScaleZ(float scaleZ)": {
			"prefix": "void Node::setScaleZ(float scaleZ)",
			"body": [
				"Node:setScaleZ(${1:float scaleZ})"
			],
			"description": "void Node::setScaleZ(float scaleZ)"
		},
		 "ActionInterval* ActionTintFrame::getAction(float fDuration)": {
			"prefix": "ActionInterval* ActionTintFrame::getAction(float fDuration)",
			"body": [
				"ActionTintFrame:getAction(${1:float fDuration})"
			],
			"description": "ActionInterval* ActionTintFrame::getAction(float fDuration)"
		},
		 "void Physics3DWorld::removeAllPhysics3DObjects()": {
			"prefix": "void Physics3DWorld::removeAllPhysics3DObjects()",
			"body": [
				"void Physics3DWorld:removeAllPhysics3DObjects()"
			],
			"description": "void Physics3DWorld::removeAllPhysics3DObjects()"
		},
		 "void EaseBounceInOut::update(float time)": {
			"prefix": "void EaseBounceInOut::update(float time)",
			"body": [
				"EaseBounceInOut:update(${1:float time})"
			],
			"description": "void EaseBounceInOut::update(float time)"
		},
		 "EventListenerFocus* EventListenerFocus::clone()": {
			"prefix": "EventListenerFocus* EventListenerFocus::clone()",
			"body": [
				"EventListenerFocus* EventListenerFocus:clone()"
			],
			"description": "EventListenerFocus* EventListenerFocus::clone()"
		},
		 "void TMXLayer::setTileGID(int gid, const Vec2& tileCoordinate, TMXTileFlags flags)": {
			"prefix": "void TMXLayer::setTileGID(int gid, const Vec2& tileCoordinate, TMXTileFlags flags)",
			"body": [
				"TMXLayer:setTileGID(${1:int gid},${2:Vec2& tileCoordinate},${3:TMXTileFlags flags})"
			],
			"description": "void TMXLayer::setTileGID(int gid, const Vec2& tileCoordinate, TMXTileFlags flags)"
		},
		 "bool Bundle3D::loadMeshDataJson_0_1(MeshDatas& meshdatas)": {
			"prefix": "bool Bundle3D::loadMeshDataJson_0_1(MeshDatas& meshdatas)",
			"body": [
				"Bundle3D:loadMeshDataJson_0_1(${1:MeshDatas& meshdatas})"
			],
			"description": "bool Bundle3D::loadMeshDataJson_0_1(MeshDatas& meshdatas)"
		},
		 "Animation* Animation::clone() const": {
			"prefix": "Animation* Animation::clone() const",
			"body": [
				"Animation* Animation:clone() "
			],
			"description": "Animation* Animation::clone() const"
		},
		 "const Mat4& Camera::getViewMatrix() const": {
			"prefix": "const Mat4& Camera::getViewMatrix() const",
			"body": [
				" Mat4& Camera:getViewMatrix() "
			],
			"description": "const Mat4& Camera::getViewMatrix() const"
		},
		 "bool UserDefault::isXMLFileExist()": {
			"prefix": "bool UserDefault::isXMLFileExist()",
			"body": [
				"bool UserDefault:isXMLFileExist()"
			],
			"description": "bool UserDefault::isXMLFileExist()"
		},
		 "static inline std::string parseString(const char *&token)": {
			"prefix": "static inline std::string parseString(const char *&token)",
			"body": [
				"inline std:string parseString(${1:char *&token})"
			],
			"description": "static inline std::string parseString(const char *&token)"
		},
		 "Technique* Material::getTechniqueByIndex(ssize_t index)": {
			"prefix": "Technique* Material::getTechniqueByIndex(ssize_t index)",
			"body": [
				"Material:getTechniqueByIndex(${1:ssize_t index})"
			],
			"description": "Technique* Material::getTechniqueByIndex(ssize_t index)"
		},
		 "uint32_t GLProgramState::getVertexAttribsFlags() const": {
			"prefix": "uint32_t GLProgramState::getVertexAttribsFlags() const",
			"body": [
				"uint32_t GLProgramState:getVertexAttribsFlags() "
			],
			"description": "uint32_t GLProgramState::getVertexAttribsFlags() const"
		},
		 "cocos2d::ui::Widget* WidgetPropertiesReader::createGUI(const std::string &classname)": {
			"prefix": "cocos2d::ui::Widget* WidgetPropertiesReader::createGUI(const std::string &classname)",
			"body": [
				"WidgetPropertiesReader:createGUI(${1:std:string &classname})"
			],
			"description": "cocos2d::ui::Widget* WidgetPropertiesReader::createGUI(const std::string &classname)"
		},
		 "bool Vec2::equals(const Vec2& target) const": {
			"prefix": "bool Vec2::equals(const Vec2& target) const",
			"body": [
				"Vec2:equals(${1:Vec2& target})"
			],
			"description": "bool Vec2::equals(const Vec2& target) const"
		},
		 "bool CameraBackgroundSkyBoxBrush::init()": {
			"prefix": "bool CameraBackgroundSkyBoxBrush::init()",
			"body": [
				"bool CameraBackgroundSkyBoxBrush:init()"
			],
			"description": "bool CameraBackgroundSkyBoxBrush::init()"
		},
		 "void Text::disableEffect(LabelEffect effect)": {
			"prefix": "void Text::disableEffect(LabelEffect effect)",
			"body": [
				"Text:disableEffect(${1:LabelEffect effect})"
			],
			"description": "void Text::disableEffect(LabelEffect effect)"
		},
		 "bool AudioEngineImpl::pause(int audioID)": {
			"prefix": "bool AudioEngineImpl::pause(int audioID)",
			"body": [
				"AudioEngineImpl:pause(${1:int audioID})"
			],
			"description": "bool AudioEngineImpl::pause(int audioID)"
		},
		 "Quad3 TiledGrid3DAction::getOriginalTile(const Vec2& pos) const": {
			"prefix": "Quad3 TiledGrid3DAction::getOriginalTile(const Vec2& pos) const",
			"body": [
				"TiledGrid3DAction:getOriginalTile(${1:Vec2& pos})"
			],
			"description": "Quad3 TiledGrid3DAction::getOriginalTile(const Vec2& pos) const"
		},
		 "bool ComponentContainer::isEmpty() const": {
			"prefix": "bool ComponentContainer::isEmpty() const",
			"body": [
				"bool ComponentContainer:isEmpty() "
			],
			"description": "bool ComponentContainer::isEmpty() const"
		},
		 "void MotionStreak::getPosition(float* x, float* y) const": {
			"prefix": "void MotionStreak::getPosition(float* x, float* y) const",
			"body": [
				"MotionStreak:getPosition(${1:float* x},${2:float* y})"
			],
			"description": "void MotionStreak::getPosition(float* x, float* y) const"
		},
		 "void ProtectedNode::setCameraMask(unsigned short mask, bool applyChildren)": {
			"prefix": "void ProtectedNode::setCameraMask(unsigned short mask, bool applyChildren)",
			"body": [
				"ProtectedNode:setCameraMask(${1:unsigned short mask},${2:bool applyChildren})"
			],
			"description": "void ProtectedNode::setCameraMask(unsigned short mask, bool applyChildren)"
		},
		 "std::vector<cocos2d::Vec2> AutoPolygon::marchSquare(const Rect& rect, const Vec2& start, const float& threshold)": {
			"prefix": "std::vector<cocos2d::Vec2> AutoPolygon::marchSquare(const Rect& rect, const Vec2& start, const float& threshold)",
			"body": [
				"AutoPolygon:marchSquare(${1:Rect& rect},${2:Vec2& start},${3:float& threshold})"
			],
			"description": "std::vector<cocos2d::Vec2> AutoPolygon::marchSquare(const Rect& rect, const Vec2& start, const float& threshold)"
		},
		 "void ScrollView::scrollToBottom(float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToBottom(float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToBottom(${1:float second},${2:bool attenuated})"
			],
			"description": "void ScrollView::scrollToBottom(float second, bool attenuated)"
		},
		 "HBox* HBox::create()": {
			"prefix": "HBox* HBox::create()",
			"body": [
				"HBox* HBox:create()"
			],
			"description": "HBox* HBox::create()"
		},
		 "void RenderTexture::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void RenderTexture::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"RenderTexture:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void RenderTexture::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void InputDelegate::onTouchesEnded(const std::vector<Touch*>& pTouches, Event *pEvent)": {
			"prefix": "void InputDelegate::onTouchesEnded(const std::vector<Touch*>& pTouches, Event *pEvent)",
			"body": [
				"InputDelegate:onTouchesEnded(${1:std:vector<Touch*>& pTouches},${2:Event *pEvent})"
			],
			"description": "void InputDelegate::onTouchesEnded(const std::vector<Touch*>& pTouches, Event *pEvent)"
		},
		 "EventListenerMouse* EventListenerMouse::clone()": {
			"prefix": "EventListenerMouse* EventListenerMouse::clone()",
			"body": [
				"EventListenerMouse* EventListenerMouse:clone()"
			],
			"description": "EventListenerMouse* EventListenerMouse::clone()"
		},
		 "EaseBounceOut* EaseBounceOut::create(ActionInterval* action)": {
			"prefix": "EaseBounceOut* EaseBounceOut::create(ActionInterval* action)",
			"body": [
				"EaseBounceOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseBounceOut* EaseBounceOut::create(ActionInterval* action)"
		},
		 "void Sprite::setVisible(bool bVisible)": {
			"prefix": "void Sprite::setVisible(bool bVisible)",
			"body": [
				"Sprite:setVisible(${1:bool bVisible})"
			],
			"description": "void Sprite::setVisible(bool bVisible)"
		},
		 "void Timeline::addFrame(Frame* frame)": {
			"prefix": "void Timeline::addFrame(Frame* frame)",
			"body": [
				"Timeline:addFrame(${1:Frame* frame})"
			],
			"description": "void Timeline::addFrame(Frame* frame)"
		},
		 "void ScrollView::jumpToLeft()": {
			"prefix": "void ScrollView::jumpToLeft()",
			"body": [
				"void ScrollView:jumpToLeft()"
			],
			"description": "void ScrollView::jumpToLeft()"
		},
		 "Size TextField::getTouchSize()const": {
			"prefix": "Size TextField::getTouchSize()const",
			"body": [
				"Size TextField:getTouchSize()"
			],
			"description": "Size TextField::getTouchSize()const"
		},
		 "std::string Helper::getSubStringOfUTF8String(const std::string& str, std::string::size_type start, std::string::size_type length)": {
			"prefix": "std::string Helper::getSubStringOfUTF8String(const std::string& str, std::string::size_type start, std::string::size_type length)",
			"body": [
				"Helper:getSubStringOfUTF8String(${1:std:string& str},${2:std:string:size_type start},${3:std:string:size_type length})"
			],
			"description": "std::string Helper::getSubStringOfUTF8String(const std::string& str, std::string::size_type start, std::string::size_type length)"
		},
		 "static Data getData(const std::string& filename, bool forString)": {
			"prefix": "static Data getData(const std::string& filename, bool forString)",
			"body": [
				"Data getData(${1:std:string& filename},${2:bool forString})"
			],
			"description": "static Data getData(const std::string& filename, bool forString)"
		},
		 "ScrollView::Direction ScrollView::getDirection()const": {
			"prefix": "ScrollView::Direction ScrollView::getDirection()const",
			"body": [
				"ScrollView:Direction ScrollView:getDirection()"
			],
			"description": "ScrollView::Direction ScrollView::getDirection()const"
		},
		 "void NodeLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char* pPropertyName, Color3B pColor3B, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char* pPropertyName, Color3B pColor3B, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeColor3(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:Color3B pColor3B},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char* pPropertyName, Color3B pColor3B, CCBReader * ccbReader)"
		},
		 "Mat4 Mat4::getNegated() const": {
			"prefix": "Mat4 Mat4::getNegated() const",
			"body": [
				"Mat4 Mat4:getNegated() "
			],
			"description": "Mat4 Mat4::getNegated() const"
		},
		 "int PhysicsBody::getCollisionBitmask() const": {
			"prefix": "int PhysicsBody::getCollisionBitmask() const",
			"body": [
				"int PhysicsBody:getCollisionBitmask() "
			],
			"description": "int PhysicsBody::getCollisionBitmask() const"
		},
		 "void Timeline::stepToFrame(int frameIndex)": {
			"prefix": "void Timeline::stepToFrame(int frameIndex)",
			"body": [
				"Timeline:stepToFrame(${1:int frameIndex})"
			],
			"description": "void Timeline::stepToFrame(int frameIndex)"
		},
		 "void CCBReader::addOwnerCallbackNode(Node *node)": {
			"prefix": "void CCBReader::addOwnerCallbackNode(Node *node)",
			"body": [
				"CCBReader:addOwnerCallbackNode(${1:Node *node})"
			],
			"description": "void CCBReader::addOwnerCallbackNode(Node *node)"
		},
		 "void RenderState::bind(Pass* pass)": {
			"prefix": "void RenderState::bind(Pass* pass)",
			"body": [
				"RenderState:bind(${1:Pass* pass})"
			],
			"description": "void RenderState::bind(Pass* pass)"
		},
		 "void PageView::onTouchEnded(Touch *touch, Event *unusedEvent)": {
			"prefix": "void PageView::onTouchEnded(Touch *touch, Event *unusedEvent)",
			"body": [
				"PageView:onTouchEnded(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void PageView::onTouchEnded(Touch *touch, Event *unusedEvent)"
		},
		 "void SkeletonRenderer::updateWorldTransform ()": {
			"prefix": "void SkeletonRenderer::updateWorldTransform ()",
			"body": [
				"void SkeletonRenderer:updateWorldTransform ()"
			],
			"description": "void SkeletonRenderer::updateWorldTransform ()"
		},
		 "bool EventListenerPhysicsContact::init()": {
			"prefix": "bool EventListenerPhysicsContact::init()",
			"body": [
				"bool EventListenerPhysicsContact:init()"
			],
			"description": "bool EventListenerPhysicsContact::init()"
		},
		 "bool SchedulerScriptHandlerEntry::init(float interval, bool paused)": {
			"prefix": "bool SchedulerScriptHandlerEntry::init(float interval, bool paused)",
			"body": [
				"SchedulerScriptHandlerEntry:init(${1:float interval},${2:bool paused})"
			],
			"description": "bool SchedulerScriptHandlerEntry::init(float interval, bool paused)"
		},
		 "void Widget::cleanupWidget()": {
			"prefix": "void Widget::cleanupWidget()",
			"body": [
				"void Widget:cleanupWidget()"
			],
			"description": "void Widget::cleanupWidget()"
		},
		 "void DrawNode::drawSolidCircle( const Vec2& center, float radius, float angle, unsigned int segments, const Color4F& color)": {
			"prefix": "void DrawNode::drawSolidCircle( const Vec2& center, float radius, float angle, unsigned int segments, const Color4F& color)",
			"body": [
				"DrawNode:drawSolidCircle(${1:Vec2& center},${2:float radius},${3:float angle},${4:unsigned int segments},${5:Color4F& color})"
			],
			"description": "void DrawNode::drawSolidCircle( const Vec2& center, float radius, float angle, unsigned int segments, const Color4F& color)"
		},
		 "void RenderTexture::setKeepMatrix(bool keepMatrix)": {
			"prefix": "void RenderTexture::setKeepMatrix(bool keepMatrix)",
			"body": [
				"RenderTexture:setKeepMatrix(${1:bool keepMatrix})"
			],
			"description": "void RenderTexture::setKeepMatrix(bool keepMatrix)"
		},
		 "void EditBoxImplCommon::setFont(const char* pFontName, int fontSize)": {
			"prefix": "void EditBoxImplCommon::setFont(const char* pFontName, int fontSize)",
			"body": [
				"EditBoxImplCommon:setFont(${1:char* pFontName},${2:int fontSize})"
			],
			"description": "void EditBoxImplCommon::setFont(const char* pFontName, int fontSize)"
		},
		 "void ActionNode::deleteFrame(ActionFrame* frame)": {
			"prefix": "void ActionNode::deleteFrame(ActionFrame* frame)",
			"body": [
				"ActionNode:deleteFrame(${1:ActionFrame* frame})"
			],
			"description": "void ActionNode::deleteFrame(ActionFrame* frame)"
		},
		 "void Material::setTechnique(const std::string& techniqueName)": {
			"prefix": "void Material::setTechnique(const std::string& techniqueName)",
			"body": [
				"Material:setTechnique(${1:std:string& techniqueName})"
			],
			"description": "void Material::setTechnique(const std::string& techniqueName)"
		},
		 "void Animation::addSpriteFrame(SpriteFrame* spriteFrame)": {
			"prefix": "void Animation::addSpriteFrame(SpriteFrame* spriteFrame)",
			"body": [
				"Animation:addSpriteFrame(${1:SpriteFrame* spriteFrame})"
			],
			"description": "void Animation::addSpriteFrame(SpriteFrame* spriteFrame)"
		},
		 "void Mat4::translate(float x, float y, float z)": {
			"prefix": "void Mat4::translate(float x, float y, float z)",
			"body": [
				"Mat4:translate(${1:float x},${2:float y},${3:float z})"
			],
			"description": "void Mat4::translate(float x, float y, float z)"
		},
		 "Label* Button::getTitleRenderer()const": {
			"prefix": "Label* Button::getTitleRenderer()const",
			"body": [
				"Label* Button:getTitleRenderer()"
			],
			"description": "Label* Button::getTitleRenderer()const"
		},
		 "bool LayerMultiplex::initWithLayers(Layer *layer, va_list params)": {
			"prefix": "bool LayerMultiplex::initWithLayers(Layer *layer, va_list params)",
			"body": [
				"LayerMultiplex:initWithLayers(${1:Layer *layer},${2:va_list params})"
			],
			"description": "bool LayerMultiplex::initWithLayers(Layer *layer, va_list params)"
		},
		 "const std::string Button::getTitleText() const": {
			"prefix": "const std::string Button::getTitleText() const",
			"body": [
				" std:string Button:getTitleText() "
			],
			"description": "const std::string Button::getTitleText() const"
		},
		 "std::string getUrlStringByFileName(const std::string &fileName)": {
			"prefix": "std::string getUrlStringByFileName(const std::string &fileName)",
			"body": [
				"getUrlStringByFileName(${1:std:string &fileName})"
			],
			"description": "std::string getUrlStringByFileName(const std::string &fileName)"
		},
		 "Node* LabelBMFont::getChildByTag(int tag) const": {
			"prefix": "Node* LabelBMFont::getChildByTag(int tag) const",
			"body": [
				"LabelBMFont:getChildByTag(${1:int tag})"
			],
			"description": "Node* LabelBMFont::getChildByTag(int tag) const"
		},
		 "void Physics3DDebugDrawer::draw3dText( const btVector3& location,const char* textString )": {
			"prefix": "void Physics3DDebugDrawer::draw3dText( const btVector3& location,const char* textString )",
			"body": [
				"Physics3DDebugDrawer:draw3dText(${1:btVector3& location},${2:char* textString})"
			],
			"description": "void Physics3DDebugDrawer::draw3dText( const btVector3& location,const char* textString )"
		},
		 "void Button::onPressStateChangedToPressed()": {
			"prefix": "void Button::onPressStateChangedToPressed()",
			"body": [
				"void Button:onPressStateChangedToPressed()"
			],
			"description": "void Button::onPressStateChangedToPressed()"
		},
		 "void Sprite::setSkewX(float sx)": {
			"prefix": "void Sprite::setSkewX(float sx)",
			"body": [
				"Sprite:setSkewX(${1:float sx})"
			],
			"description": "void Sprite::setSkewX(float sx)"
		},
		 "AtlasNode * AtlasNode::create(const std::string& tile, int tileWidth, int tileHeight, int itemsToRender)": {
			"prefix": "AtlasNode * AtlasNode::create(const std::string& tile, int tileWidth, int tileHeight, int itemsToRender)",
			"body": [
				"* AtlasNode:create(${1:std:string& tile},${2:int tileWidth},${3:int tileHeight},${4:int itemsToRender})"
			],
			"description": "AtlasNode * AtlasNode::create(const std::string& tile, int tileWidth, int tileHeight, int itemsToRender)"
		},
		 "Widget* Widget::getWidgetParent()": {
			"prefix": "Widget* Widget::getWidgetParent()",
			"body": [
				"Widget* Widget:getWidgetParent()"
			],
			"description": "Widget* Widget::getWidgetParent()"
		},
		 "std::string getStringUTFCharsJNI(JNIEnv* env, jstring srcjStr, bool* ret)": {
			"prefix": "std::string getStringUTFCharsJNI(JNIEnv* env, jstring srcjStr, bool* ret)",
			"body": [
				"getStringUTFCharsJNI(${1:JNIEnv* env},${2:jstring srcjStr},${3:bool* ret})"
			],
			"description": "std::string getStringUTFCharsJNI(JNIEnv* env, jstring srcjStr, bool* ret)"
		},
		 "void MenuItemLabel::setEnabled(bool enabled)": {
			"prefix": "void MenuItemLabel::setEnabled(bool enabled)",
			"body": [
				"MenuItemLabel:setEnabled(${1:bool enabled})"
			],
			"description": "void MenuItemLabel::setEnabled(bool enabled)"
		},
		 "bool Vec4::isZero() const": {
			"prefix": "bool Vec4::isZero() const",
			"body": [
				"bool Vec4:isZero() "
			],
			"description": "bool Vec4::isZero() const"
		},
		 "void ScriptEngineManager::setScriptEngine(ScriptEngineProtocol *scriptEngine)": {
			"prefix": "void ScriptEngineManager::setScriptEngine(ScriptEngineProtocol *scriptEngine)",
			"body": [
				"ScriptEngineManager:setScriptEngine(${1:ScriptEngineProtocol *scriptEngine})"
			],
			"description": "void ScriptEngineManager::setScriptEngine(ScriptEngineProtocol *scriptEngine)"
		},
		 "void  ParticleBatchNode::removeChild(Node* aChild, bool cleanup)": {
			"prefix": "void  ParticleBatchNode::removeChild(Node* aChild, bool cleanup)",
			"body": [
				"ParticleBatchNode:removeChild(${1:Node* aChild},${2:bool cleanup})"
			],
			"description": "void  ParticleBatchNode::removeChild(Node* aChild, bool cleanup)"
		},
		 "void Repeat::stop(void)": {
			"prefix": "void Repeat::stop(void)",
			"body": [
				"Repeat:stop(${1:void})"
			],
			"description": "void Repeat::stop(void)"
		},
		 "const BlendFunc& ParticleSystem::getBlendFunc() const": {
			"prefix": "const BlendFunc& ParticleSystem::getBlendFunc() const",
			"body": [
				" BlendFunc& ParticleSystem:getBlendFunc() "
			],
			"description": "const BlendFunc& ParticleSystem::getBlendFunc() const"
		},
		 "void Console::addClient()": {
			"prefix": "void Console::addClient()",
			"body": [
				"void Console:addClient()"
			],
			"description": "void Console::addClient()"
		},
		 "Rect Rect::unionWithRect(const Rect & rect) const": {
			"prefix": "Rect Rect::unionWithRect(const Rect & rect) const",
			"body": [
				"Rect:unionWithRect(${1:Rect & rect})"
			],
			"description": "Rect Rect::unionWithRect(const Rect & rect) const"
		},
		 "const char* FontFreeType::getGlyphCollection() const": {
			"prefix": "const char* FontFreeType::getGlyphCollection() const",
			"body": [
				" char* FontFreeType:getGlyphCollection() "
			],
			"description": "const char* FontFreeType::getGlyphCollection() const"
		},
		 "ValueVector& CCBReader::getOwnerCallbackControlEvents()": {
			"prefix": "ValueVector& CCBReader::getOwnerCallbackControlEvents()",
			"body": [
				"ValueVector& CCBReader:getOwnerCallbackControlEvents()"
			],
			"description": "ValueVector& CCBReader::getOwnerCallbackControlEvents()"
		},
		 "void Grid3DAction::setVertex(const Vec2& position, const Vec3& vertex)": {
			"prefix": "void Grid3DAction::setVertex(const Vec2& position, const Vec3& vertex)",
			"body": [
				"Grid3DAction:setVertex(${1:Vec2& position},${2:Vec3& vertex})"
			],
			"description": "void Grid3DAction::setVertex(const Vec2& position, const Vec3& vertex)"
		},
		 "void Console::commandAllocator(int fd, const std::string& args)": {
			"prefix": "void Console::commandAllocator(int fd, const std::string& args)",
			"body": [
				"Console:commandAllocator(${1:int fd},${2:std:string& args})"
			],
			"description": "void Console::commandAllocator(int fd, const std::string& args)"
		},
		 "int VertexBuffer::getSizePerVertex() const": {
			"prefix": "int VertexBuffer::getSizePerVertex() const",
			"body": [
				"int VertexBuffer:getSizePerVertex() "
			],
			"description": "int VertexBuffer::getSizePerVertex() const"
		},
		 "bool FontFreeType::createFontObject(const std::string &fontName, int fontSize)": {
			"prefix": "bool FontFreeType::createFontObject(const std::string &fontName, int fontSize)",
			"body": [
				"FontFreeType:createFontObject(${1:std:string &fontName},${2:int fontSize})"
			],
			"description": "bool FontFreeType::createFontObject(const std::string &fontName, int fontSize)"
		},
		 "void CCBAnimationManager::setObject(Ref* obj, Node *pNode, const std::string& propName)": {
			"prefix": "void CCBAnimationManager::setObject(Ref* obj, Node *pNode, const std::string& propName)",
			"body": [
				"CCBAnimationManager:setObject(${1:Ref* obj},${2:Node *pNode},${3:std:string& propName})"
			],
			"description": "void CCBAnimationManager::setObject(Ref* obj, Node *pNode, const std::string& propName)"
		},
		 "void ControlButtonLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char * pPropertyName, const char * pFontTTF, CCBReader * ccbReader)": {
			"prefix": "void ControlButtonLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char * pPropertyName, const char * pFontTTF, CCBReader * ccbReader)",
			"body": [
				"ControlButtonLoader:onHandlePropTypeFontTTF(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:char * pFontTTF},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlButtonLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char * pPropertyName, const char * pFontTTF, CCBReader * ccbReader)"
		},
		 "void Widget::FocusNavigationController::setFirstFocsuedWidget(Widget* widget)": {
			"prefix": "void Widget::FocusNavigationController::setFirstFocsuedWidget(Widget* widget)",
			"body": [
				"Widget:FocusNavigationController:setFirstFocsuedWidget(${1:Widget* widget})"
			],
			"description": "void Widget::FocusNavigationController::setFirstFocsuedWidget(Widget* widget)"
		},
		 "void Vec3::cross(const Vec3& v)": {
			"prefix": "void Vec3::cross(const Vec3& v)",
			"body": [
				"Vec3:cross(${1:Vec3& v})"
			],
			"description": "void Vec3::cross(const Vec3& v)"
		},
		 "int NinePatchImageParser::getPixelOriginOffset(Direction direction)const": {
			"prefix": "int NinePatchImageParser::getPixelOriginOffset(Direction direction)const",
			"body": [
				"NinePatchImageParser:getPixelOriginOffset(${1:Direction direction})"
			],
			"description": "int NinePatchImageParser::getPixelOriginOffset(Direction direction)const"
		},
		 "Node* SceneReader::nodeByTag(Node *parent, int tag)": {
			"prefix": "Node* SceneReader::nodeByTag(Node *parent, int tag)",
			"body": [
				"SceneReader:nodeByTag(${1:Node *parent},${2:int tag})"
			],
			"description": "Node* SceneReader::nodeByTag(Node *parent, int tag)"
		},
		 "MenuItemFont * MenuItemFont::create(const std::string& value, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "MenuItemFont * MenuItemFont::create(const std::string& value, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"* MenuItemFont:create(${1:std:string& value},${2:Ref* target},${3:SEL_MenuHandler selector})"
			],
			"description": "MenuItemFont * MenuItemFont::create(const std::string& value, Ref* target, SEL_MenuHandler selector)"
		},
		 "void NodeLoader::onHandlePropTypePosition(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPosition, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypePosition(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPosition, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypePosition(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:Vec2 pPosition},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypePosition(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPosition, CCBReader * ccbReader)"
		},
		 "void ActionTimeline::addAnimationInfo(const AnimationInfo& animationInfo)": {
			"prefix": "void ActionTimeline::addAnimationInfo(const AnimationInfo& animationInfo)",
			"body": [
				"ActionTimeline:addAnimationInfo(${1:AnimationInfo& animationInfo})"
			],
			"description": "void ActionTimeline::addAnimationInfo(const AnimationInfo& animationInfo)"
		},
		 "void FontFreeType::setGlyphCollection(GlyphCollection glyphs, const char* customGlyphs /* = nullptr */)": {
			"prefix": "void FontFreeType::setGlyphCollection(GlyphCollection glyphs, const char* customGlyphs /* = nullptr */)",
			"body": [
				"FontFreeType:setGlyphCollection(${1:GlyphCollection glyphs},${2:char* customGlyphs /* = nullptr */})"
			],
			"description": "void FontFreeType::setGlyphCollection(GlyphCollection glyphs, const char* customGlyphs /* = nullptr */)"
		},
		 "void Controller::startDiscoveryController()": {
			"prefix": "void Controller::startDiscoveryController()",
			"body": [
				"void Controller:startDiscoveryController()"
			],
			"description": "void Controller::startDiscoveryController()"
		},
		 "void TransitionScene::setNewScene(float dt)": {
			"prefix": "void TransitionScene::setNewScene(float dt)",
			"body": [
				"TransitionScene:setNewScene(${1:float dt})"
			],
			"description": "void TransitionScene::setNewScene(float dt)"
		},
		 "bool Label::setCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "bool Label::setCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"Label:setCharMap(${1:std:string& charMapFile},${2:int itemWidth},${3:int itemHeight},${4:int startCharMap})"
			],
			"description": "bool Label::setCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "void VideoPlayer::copySpecialProperties(Widget *widget)": {
			"prefix": "void VideoPlayer::copySpecialProperties(Widget *widget)",
			"body": [
				"VideoPlayer:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void VideoPlayer::copySpecialProperties(Widget *widget)"
		},
		 "ActionTimeline* ActionTimelineCache::createActionWithFlatBuffersFile(const std::string &fileName)": {
			"prefix": "ActionTimeline* ActionTimelineCache::createActionWithFlatBuffersFile(const std::string &fileName)",
			"body": [
				"ActionTimelineCache:createActionWithFlatBuffersFile(${1:std:string &fileName})"
			],
			"description": "ActionTimeline* ActionTimelineCache::createActionWithFlatBuffersFile(const std::string &fileName)"
		},
		 "void Vec3::cross(const Vec3& v1, const Vec3& v2, Vec3* dst)": {
			"prefix": "void Vec3::cross(const Vec3& v1, const Vec3& v2, Vec3* dst)",
			"body": [
				"Vec3:cross(${1:Vec3& v1},${2:Vec3& v2},${3:Vec3* dst})"
			],
			"description": "void Vec3::cross(const Vec3& v1, const Vec3& v2, Vec3* dst)"
		},
		 "void MotionStreak::setPosition(float x, float y)": {
			"prefix": "void MotionStreak::setPosition(float x, float y)",
			"body": [
				"MotionStreak:setPosition(${1:float x},${2:float y})"
			],
			"description": "void MotionStreak::setPosition(float x, float y)"
		},
		 "void WebViewImpl::draw(cocos2d::Renderer *renderer, cocos2d::Mat4 const &transform, uint32_t flags)": {
			"prefix": "void WebViewImpl::draw(cocos2d::Renderer *renderer, cocos2d::Mat4 const &transform, uint32_t flags)",
			"body": [
				"WebViewImpl:draw(${1:cocos2d:Renderer *renderer},${2:cocos2d:Mat4  &transform},${3:uint32_t flags})"
			],
			"description": "void WebViewImpl::draw(cocos2d::Renderer *renderer, cocos2d::Mat4 const &transform, uint32_t flags)"
		},
		 "void RenderState::StateBlock::setBlendFunc(const BlendFunc& blendFunc)": {
			"prefix": "void RenderState::StateBlock::setBlendFunc(const BlendFunc& blendFunc)",
			"body": [
				"RenderState:StateBlock:setBlendFunc(${1:BlendFunc& blendFunc})"
			],
			"description": "void RenderState::StateBlock::setBlendFunc(const BlendFunc& blendFunc)"
		},
		 "void Texture2D::convertRGB888ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGB888ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGB888ToI8(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGB888ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void PhysicsBody::addMass(float mass)": {
			"prefix": "void PhysicsBody::addMass(float mass)",
			"body": [
				"PhysicsBody:addMass(${1:float mass})"
			],
			"description": "void PhysicsBody::addMass(float mass)"
		},
		 "void Ray::transform(const Mat4& matrix)": {
			"prefix": "void Ray::transform(const Mat4& matrix)",
			"body": [
				"Ray:transform(${1:Mat4& matrix})"
			],
			"description": "void Ray::transform(const Mat4& matrix)"
		},
		 "void GLProgramState::setUniformTexture(const std::string& uniformName, Texture2D *texture)": {
			"prefix": "void GLProgramState::setUniformTexture(const std::string& uniformName, Texture2D *texture)",
			"body": [
				"GLProgramState:setUniformTexture(${1:std:string& uniformName},${2:Texture2D *texture})"
			],
			"description": "void GLProgramState::setUniformTexture(const std::string& uniformName, Texture2D *texture)"
		},
		 "JumpTiles3D* JumpTiles3D::create(float duration, const Size& gridSize, unsigned int numberOfJumps, float amplitude)": {
			"prefix": "JumpTiles3D* JumpTiles3D::create(float duration, const Size& gridSize, unsigned int numberOfJumps, float amplitude)",
			"body": [
				"JumpTiles3D:create(${1:float duration},${2:Size& gridSize},${3:unsigned int numberOfJumps},${4:float amplitude})"
			],
			"description": "JumpTiles3D* JumpTiles3D::create(float duration, const Size& gridSize, unsigned int numberOfJumps, float amplitude)"
		},
		 "Component* Component::create(void)": {
			"prefix": "Component* Component::create(void)",
			"body": [
				"Component:create(${1:void})"
			],
			"description": "Component* Component::create(void)"
		},
		 "bool Place::initWithPosition(const Vec2& pos)": {
			"prefix": "bool Place::initWithPosition(const Vec2& pos)",
			"body": [
				"Place:initWithPosition(${1:Vec2& pos})"
			],
			"description": "bool Place::initWithPosition(const Vec2& pos)"
		},
		 "void Physics3DWorld::collisionChecking()": {
			"prefix": "void Physics3DWorld::collisionChecking()",
			"body": [
				"void Physics3DWorld:collisionChecking()"
			],
			"description": "void Physics3DWorld::collisionChecking()"
		},
		 "ArmatureAnimation *ArmatureAnimation::create(Armature *armature)": {
			"prefix": "ArmatureAnimation *ArmatureAnimation::create(Armature *armature)",
			"body": [
				"*ArmatureAnimation:create(${1:Armature *armature})"
			],
			"description": "ArmatureAnimation *ArmatureAnimation::create(Armature *armature)"
		},
		 "void ArmatureAnimation::setAnimationScale(float animationScale )": {
			"prefix": "void ArmatureAnimation::setAnimationScale(float animationScale )",
			"body": [
				"ArmatureAnimation:setAnimationScale(${1:float animationScale})"
			],
			"description": "void ArmatureAnimation::setAnimationScale(float animationScale )"
		},
		 "CameraBackgroundColorBrush* CameraBackgroundColorBrush::create(const Color4F& color, float depth)": {
			"prefix": "CameraBackgroundColorBrush* CameraBackgroundColorBrush::create(const Color4F& color, float depth)",
			"body": [
				"CameraBackgroundColorBrush:create(${1:Color4F& color},${2:float depth})"
			],
			"description": "CameraBackgroundColorBrush* CameraBackgroundColorBrush::create(const Color4F& color, float depth)"
		},
		 "void UniformValue::setVec4(const Vec4& value)": {
			"prefix": "void UniformValue::setVec4(const Vec4& value)",
			"body": [
				"UniformValue:setVec4(${1:Vec4& value})"
			],
			"description": "void UniformValue::setVec4(const Vec4& value)"
		},
		 "void ArmatureDataManager::removeTextureData(const std::string& id)": {
			"prefix": "void ArmatureDataManager::removeTextureData(const std::string& id)",
			"body": [
				"ArmatureDataManager:removeTextureData(${1:std:string& id})"
			],
			"description": "void ArmatureDataManager::removeTextureData(const std::string& id)"
		},
		 "Waves3D* Waves3D::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)": {
			"prefix": "Waves3D* Waves3D::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)",
			"body": [
				"Waves3D:create(${1:float duration},${2:Size& gridSize},${3:unsigned int waves},${4:float amplitude})"
			],
			"description": "Waves3D* Waves3D::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)"
		},
		 "BMFontConfiguration* FNTConfigLoadFile(const std::string& fntFile)": {
			"prefix": "BMFontConfiguration* FNTConfigLoadFile(const std::string& fntFile)",
			"body": [
				"FNTConfigLoadFile(${1:std:string& fntFile})"
			],
			"description": "BMFontConfiguration* FNTConfigLoadFile(const std::string& fntFile)"
		},
		 "void SpriteFrame::setRectInPixels(const Rect& rectInPixels)": {
			"prefix": "void SpriteFrame::setRectInPixels(const Rect& rectInPixels)",
			"body": [
				"SpriteFrame:setRectInPixels(${1:Rect& rectInPixels})"
			],
			"description": "void SpriteFrame::setRectInPixels(const Rect& rectInPixels)"
		},
		 "void Grabber::grab(Texture2D *texture)": {
			"prefix": "void Grabber::grab(Texture2D *texture)",
			"body": [
				"Grabber:grab(${1:Texture2D *texture})"
			],
			"description": "void Grabber::grab(Texture2D *texture)"
		},
		 "void Renderer::processRenderCommand(RenderCommand* command)": {
			"prefix": "void Renderer::processRenderCommand(RenderCommand* command)",
			"body": [
				"Renderer:processRenderCommand(${1:RenderCommand* command})"
			],
			"description": "void Renderer::processRenderCommand(RenderCommand* command)"
		},
		 "bool  Bundle3D::loadMeshDatasJson(MeshDatas& meshdatas)": {
			"prefix": "bool  Bundle3D::loadMeshDatasJson(MeshDatas& meshdatas)",
			"body": [
				"Bundle3D:loadMeshDatasJson(${1:MeshDatas& meshdatas})"
			],
			"description": "bool  Bundle3D::loadMeshDatasJson(MeshDatas& meshdatas)"
		},
		 "Vec2 Touch::getPreviousLocation() const": {
			"prefix": "Vec2 Touch::getPreviousLocation() const",
			"body": [
				"Vec2 Touch:getPreviousLocation() "
			],
			"description": "Vec2 Touch::getPreviousLocation() const"
		},
		 "const Size& Layout::getBackGroundImageTextureSize() const": {
			"prefix": "const Size& Layout::getBackGroundImageTextureSize() const",
			"body": [
				" Size& Layout:getBackGroundImageTextureSize() "
			],
			"description": "const Size& Layout::getBackGroundImageTextureSize() const"
		},
		 "FontFreeType * FontFreeType::create(const std::string &fontName, int fontSize, GlyphCollection glyphs, const char *customGlyphs,bool distanceFieldEnabled /* = false */,int outline /* = 0 */)": {
			"prefix": "FontFreeType * FontFreeType::create(const std::string &fontName, int fontSize, GlyphCollection glyphs, const char *customGlyphs,bool distanceFieldEnabled /* = false */,int outline /* = 0 */)",
			"body": [
				"* FontFreeType:create(${1:std:string &fontName},${2:int fontSize},${3:GlyphCollection glyphs},${4:char *customGlyphs},${5:bool distanceFieldEnabled /* = false */},${6:int outline /* = 0 */})"
			],
			"description": "FontFreeType * FontFreeType::create(const std::string &fontName, int fontSize, GlyphCollection glyphs, const char *customGlyphs,bool distanceFieldEnabled /* = false */,int outline /* = 0 */)"
		},
		 "Vec2 PhysicsContactPreSolve::getSurfaceVelocity() const": {
			"prefix": "Vec2 PhysicsContactPreSolve::getSurfaceVelocity() const",
			"body": [
				"Vec2 PhysicsContactPreSolve:getSurfaceVelocity() "
			],
			"description": "Vec2 PhysicsContactPreSolve::getSurfaceVelocity() const"
		},
		 "void ListView::setGravity(Gravity gravity)": {
			"prefix": "void ListView::setGravity(Gravity gravity)",
			"body": [
				"ListView:setGravity(${1:Gravity gravity})"
			],
			"description": "void ListView::setGravity(Gravity gravity)"
		},
		 "void Widget::updateSizeAndPosition(const cocos2d::Size &parentSize)": {
			"prefix": "void Widget::updateSizeAndPosition(const cocos2d::Size &parentSize)",
			"body": [
				"Widget:updateSizeAndPosition(${1:cocos2d:Size &parentSize})"
			],
			"description": "void Widget::updateSizeAndPosition(const cocos2d::Size &parentSize)"
		},
		 "void CCBAnimationManager::setRootContainerSize(const Size &rootContainerSize)": {
			"prefix": "void CCBAnimationManager::setRootContainerSize(const Size &rootContainerSize)",
			"body": [
				"CCBAnimationManager:setRootContainerSize(${1:Size &rootContainerSize})"
			],
			"description": "void CCBAnimationManager::setRootContainerSize(const Size &rootContainerSize)"
		},
		 "void Sprite::updateBlendFunc(void)": {
			"prefix": "void Sprite::updateBlendFunc(void)",
			"body": [
				"Sprite:updateBlendFunc(${1:void})"
			],
			"description": "void Sprite::updateBlendFunc(void)"
		},
		 "bool FileUtilsWin32::removeDirectory(const std::string& dirPath)": {
			"prefix": "bool FileUtilsWin32::removeDirectory(const std::string& dirPath)",
			"body": [
				"FileUtilsWin32:removeDirectory(${1:std:string& dirPath})"
			],
			"description": "bool FileUtilsWin32::removeDirectory(const std::string& dirPath)"
		},
		 "PhysicsShape* PhysicsBody::getShape(int tag) const": {
			"prefix": "PhysicsShape* PhysicsBody::getShape(int tag) const",
			"body": [
				"PhysicsBody:getShape(${1:int tag})"
			],
			"description": "PhysicsShape* PhysicsBody::getShape(int tag) const"
		},
		 "EaseQuinticActionIn* EaseQuinticActionIn::create(ActionInterval* action)": {
			"prefix": "EaseQuinticActionIn* EaseQuinticActionIn::create(ActionInterval* action)",
			"body": [
				"EaseQuinticActionIn:create(${1:ActionInterval* action})"
			],
			"description": "EaseQuinticActionIn* EaseQuinticActionIn::create(ActionInterval* action)"
		},
		 "void CCBSequence::setName(const char *pName)": {
			"prefix": "void CCBSequence::setName(const char *pName)",
			"body": [
				"CCBSequence:setName(${1:char *pName})"
			],
			"description": "void CCBSequence::setName(const char *pName)"
		},
		 "float Vec4::length() const": {
			"prefix": "float Vec4::length() const",
			"body": [
				"float Vec4:length() "
			],
			"description": "float Vec4::length() const"
		},
		 "Widget *Layout::findFirstNonLayoutWidget()": {
			"prefix": "Widget *Layout::findFirstNonLayoutWidget()",
			"body": [
				"Widget *Layout:findFirstNonLayoutWidget()"
			],
			"description": "Widget *Layout::findFirstNonLayoutWidget()"
		},
		 "TransitionFadeBL* TransitionFadeBL::create(float t, Scene* scene)": {
			"prefix": "TransitionFadeBL* TransitionFadeBL::create(float t, Scene* scene)",
			"body": [
				"TransitionFadeBL:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionFadeBL* TransitionFadeBL::create(float t, Scene* scene)"
		},
		 "void PhysicsShapeEdgeSegment::updateScale()": {
			"prefix": "void PhysicsShapeEdgeSegment::updateScale()",
			"body": [
				"void PhysicsShapeEdgeSegment:updateScale()"
			],
			"description": "void PhysicsShapeEdgeSegment::updateScale()"
		},
		 "bool ScrollView::isOutOfBoundaryLeftOrRight() const": {
			"prefix": "bool ScrollView::isOutOfBoundaryLeftOrRight() const",
			"body": [
				"bool ScrollView:isOutOfBoundaryLeftOrRight() "
			],
			"description": "bool ScrollView::isOutOfBoundaryLeftOrRight() const"
		},
		 "bool EventListenerAcceleration::checkAvailable()": {
			"prefix": "bool EventListenerAcceleration::checkAvailable()",
			"body": [
				"bool EventListenerAcceleration:checkAvailable()"
			],
			"description": "bool EventListenerAcceleration::checkAvailable()"
		},
		 "void TextAtlas::copySpecialProperties(Widget *widget)": {
			"prefix": "void TextAtlas::copySpecialProperties(Widget *widget)",
			"body": [
				"TextAtlas:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void TextAtlas::copySpecialProperties(Widget *widget)"
		},
		 "int UserDefault::getIntegerForKey(const char* pKey, int defaultValue)": {
			"prefix": "int UserDefault::getIntegerForKey(const char* pKey, int defaultValue)",
			"body": [
				"UserDefault:getIntegerForKey(${1:char* pKey},${2:int defaultValue})"
			],
			"description": "int UserDefault::getIntegerForKey(const char* pKey, int defaultValue)"
		},
		 "ProgressTimer* TransitionProgressInOut::progressTimerNodeWithRenderTexture(RenderTexture* texture)": {
			"prefix": "ProgressTimer* TransitionProgressInOut::progressTimerNodeWithRenderTexture(RenderTexture* texture)",
			"body": [
				"TransitionProgressInOut:progressTimerNodeWithRenderTexture(${1:RenderTexture* texture})"
			],
			"description": "ProgressTimer* TransitionProgressInOut::progressTimerNodeWithRenderTexture(RenderTexture* texture)"
		},
		 "ContourData *DataReaderHelper::decodeContour(const rapidjson::Value& json)": {
			"prefix": "ContourData *DataReaderHelper::decodeContour(const rapidjson::Value& json)",
			"body": [
				"*DataReaderHelper:decodeContour(${1:rapidjson:Value& json})"
			],
			"description": "ContourData *DataReaderHelper::decodeContour(const rapidjson::Value& json)"
		},
		 "void EditBoxImplCommon::initInactiveLabels(const Size& size)": {
			"prefix": "void EditBoxImplCommon::initInactiveLabels(const Size& size)",
			"body": [
				"EditBoxImplCommon:initInactiveLabels(${1:Size& size})"
			],
			"description": "void EditBoxImplCommon::initInactiveLabels(const Size& size)"
		},
		 "bool Image::isPvr(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::isPvr(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:isPvr(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::isPvr(const unsigned char * data, ssize_t dataLen)"
		},
		 "Mat4 AttachNode::getNodeToWorldTransform() const": {
			"prefix": "Mat4 AttachNode::getNodeToWorldTransform() const",
			"body": [
				"Mat4 AttachNode:getNodeToWorldTransform() "
			],
			"description": "Mat4 AttachNode::getNodeToWorldTransform() const"
		},
		 "void PhysicsShape::setMoment(float moment)": {
			"prefix": "void PhysicsShape::setMoment(float moment)",
			"body": [
				"PhysicsShape:setMoment(${1:float moment})"
			],
			"description": "void PhysicsShape::setMoment(float moment)"
		},
		 "void GLProgram::setUniformLocationWith3iv(GLint location, GLint* ints, unsigned int numberOfArrays)": {
			"prefix": "void GLProgram::setUniformLocationWith3iv(GLint location, GLint* ints, unsigned int numberOfArrays)",
			"body": [
				"GLProgram:setUniformLocationWith3iv(${1:GLint location},${2:GLint* ints},${3:unsigned int numberOfArrays})"
			],
			"description": "void GLProgram::setUniformLocationWith3iv(GLint location, GLint* ints, unsigned int numberOfArrays)"
		},
		 "bool PageView::isUsingCustomScrollThreshold()const": {
			"prefix": "bool PageView::isUsingCustomScrollThreshold()const",
			"body": [
				"bool PageView:isUsingCustomScrollThreshold()"
			],
			"description": "bool PageView::isUsingCustomScrollThreshold()const"
		},
		 "void AbstractCheckButton::loadTextureFrontCross(const std::string& cross,TextureResType texType)": {
			"prefix": "void AbstractCheckButton::loadTextureFrontCross(const std::string& cross,TextureResType texType)",
			"body": [
				"AbstractCheckButton:loadTextureFrontCross(${1:std:string& cross},${2:TextureResType texType})"
			],
			"description": "void AbstractCheckButton::loadTextureFrontCross(const std::string& cross,TextureResType texType)"
		},
		 "void RichText::pushToContainer(cocos2d::Node *renderer)": {
			"prefix": "void RichText::pushToContainer(cocos2d::Node *renderer)",
			"body": [
				"RichText:pushToContainer(${1:cocos2d:Node *renderer})"
			],
			"description": "void RichText::pushToContainer(cocos2d::Node *renderer)"
		},
		 "void BatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void BatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"BatchNode:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void BatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "TintTo* TintTo::reverse() const": {
			"prefix": "TintTo* TintTo::reverse() const",
			"body": [
				"TintTo* TintTo:reverse() "
			],
			"description": "TintTo* TintTo::reverse() const"
		},
		 "CCBKeyframe* CCBReader::readKeyframe(PropertyType type)": {
			"prefix": "CCBKeyframe* CCBReader::readKeyframe(PropertyType type)",
			"body": [
				"CCBReader:readKeyframe(${1:PropertyType type})"
			],
			"description": "CCBKeyframe* CCBReader::readKeyframe(PropertyType type)"
		},
		 "void Sprite::setPolygonInfo(const PolygonInfo& info)": {
			"prefix": "void Sprite::setPolygonInfo(const PolygonInfo& info)",
			"body": [
				"Sprite:setPolygonInfo(${1:PolygonInfo& info})"
			],
			"description": "void Sprite::setPolygonInfo(const PolygonInfo& info)"
		},
		 "void Physics3DSliderConstraint::setRestitutionLimLin(float restitutionLimLin)": {
			"prefix": "void Physics3DSliderConstraint::setRestitutionLimLin(float restitutionLimLin)",
			"body": [
				"Physics3DSliderConstraint:setRestitutionLimLin(${1:float restitutionLimLin})"
			],
			"description": "void Physics3DSliderConstraint::setRestitutionLimLin(float restitutionLimLin)"
		},
		 "Frame* ActionTimelineCache::loadColorFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadColorFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadColorFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadColorFrame(const rapidjson::Value& json)"
		},
		 "void Menu::addChild(Node * child, int zOrder)": {
			"prefix": "void Menu::addChild(Node * child, int zOrder)",
			"body": [
				"Menu:addChild(${1:Node * child},${2:int zOrder})"
			],
			"description": "void Menu::addChild(Node * child, int zOrder)"
		},
		 "bool Bundle3D::loadObj(MeshDatas& meshdatas, MaterialDatas& materialdatas, NodeDatas& nodedatas, const std::string& fullPath, const char* mtl_basepath)": {
			"prefix": "bool Bundle3D::loadObj(MeshDatas& meshdatas, MaterialDatas& materialdatas, NodeDatas& nodedatas, const std::string& fullPath, const char* mtl_basepath)",
			"body": [
				"Bundle3D:loadObj(${1:MeshDatas& meshdatas},${2:MaterialDatas& materialdatas},${3:NodeDatas& nodedatas},${4:std:string& fullPath},${5:char* mtl_basepath})"
			],
			"description": "bool Bundle3D::loadObj(MeshDatas& meshdatas, MaterialDatas& materialdatas, NodeDatas& nodedatas, const std::string& fullPath, const char* mtl_basepath)"
		},
		 "void CCBFileLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char * pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)": {
			"prefix": "void CCBFileLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char * pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)",
			"body": [
				"CCBFileLoader:onHandlePropTypeCCBFile(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Node * pCCBFileNode},${5:CCBReader * ccbReader})"
			],
			"description": "void CCBFileLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char * pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)"
		},
		 "void GLView::setFrameSize(float width, float height)": {
			"prefix": "void GLView::setFrameSize(float width, float height)",
			"body": [
				"GLView:setFrameSize(${1:float width},${2:float height})"
			],
			"description": "void GLView::setFrameSize(float width, float height)"
		},
		 "Ref *NotificationObserver::getTarget() const": {
			"prefix": "Ref *NotificationObserver::getTarget() const",
			"body": [
				"Ref *NotificationObserver:getTarget() "
			],
			"description": "Ref *NotificationObserver::getTarget() const"
		},
		 "Texture2D::PixelFormat Texture2D::convertI8ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)": {
			"prefix": "Texture2D::PixelFormat Texture2D::convertI8ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)",
			"body": [
				"Texture2D:convertI8ToFormat(${1:unsigned char* data},${2:ssize_t dataLen},${3:PixelFormat format},${4:unsigned char** outData},${5:ssize_t* outDataLen})"
			],
			"description": "Texture2D::PixelFormat Texture2D::convertI8ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)"
		},
		 "void Widget::dispatchFocusEvent(cocos2d::ui::Widget *widgetLoseFocus, cocos2d::ui::Widget *widgetGetFocus)": {
			"prefix": "void Widget::dispatchFocusEvent(cocos2d::ui::Widget *widgetLoseFocus, cocos2d::ui::Widget *widgetGetFocus)",
			"body": [
				"Widget:dispatchFocusEvent(${1:cocos2d:ui:Widget *widgetLoseFocus},${2:cocos2d:ui:Widget *widgetGetFocus})"
			],
			"description": "void Widget::dispatchFocusEvent(cocos2d::ui::Widget *widgetLoseFocus, cocos2d::ui::Widget *widgetGetFocus)"
		},
		 "void GridAction::cacheTargetAsGridNode()": {
			"prefix": "void GridAction::cacheTargetAsGridNode()",
			"body": [
				"void GridAction:cacheTargetAsGridNode()"
			],
			"description": "void GridAction::cacheTargetAsGridNode()"
		},
		 "cocos2d::AABB Terrain::getAABB()": {
			"prefix": "cocos2d::AABB Terrain::getAABB()",
			"body": [
				"cocos2d:AABB Terrain:getAABB()"
			],
			"description": "cocos2d::AABB Terrain::getAABB()"
		},
		 "void GLViewImpl::setFrameSize(float width, float height)": {
			"prefix": "void GLViewImpl::setFrameSize(float width, float height)",
			"body": [
				"GLViewImpl:setFrameSize(${1:float width},${2:float height})"
			],
			"description": "void GLViewImpl::setFrameSize(float width, float height)"
		},
		 "bool LayerColor::init()": {
			"prefix": "bool LayerColor::init()",
			"body": [
				"bool LayerColor:init()"
			],
			"description": "bool LayerColor::init()"
		},
		 "Widget::PositionType Widget::getPositionType() const": {
			"prefix": "Widget::PositionType Widget::getPositionType() const",
			"body": [
				"Widget:PositionType Widget:getPositionType() "
			],
			"description": "Widget::PositionType Widget::getPositionType() const"
		},
		 "void NavMesh::addNavMeshAgent(NavMeshAgent *agent)": {
			"prefix": "void NavMesh::addNavMeshAgent(NavMeshAgent *agent)",
			"body": [
				"NavMesh:addNavMeshAgent(${1:NavMeshAgent *agent})"
			],
			"description": "void NavMesh::addNavMeshAgent(NavMeshAgent *agent)"
		},
		 "void GLProgram::setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)": {
			"prefix": "void GLProgram::setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)",
			"body": [
				"GLProgram:setUniformLocationWith4f(${1:GLint location},${2:GLfloat f1},${3:GLfloat f2},${4:GLfloat f3},${5:GLfloat f4})"
			],
			"description": "void GLProgram::setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)"
		},
		 "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Mat4& rbAFrame, bool useReferenceFrameA)": {
			"prefix": "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Mat4& rbAFrame, bool useReferenceFrameA)",
			"body": [
				"Physics3DHingeConstraint:create(${1:Physics3DRigidBody* rbA},${2:cocos2d:Mat4& rbAFrame},${3:bool useReferenceFrameA})"
			],
			"description": "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Mat4& rbAFrame, bool useReferenceFrameA)"
		},
		 "std::string getFileDirectoryJNI()": {
			"prefix": "std::string getFileDirectoryJNI()",
			"body": [
				"std:string getFileDirectoryJNI()"
			],
			"description": "std::string getFileDirectoryJNI()"
		},
		 "static inline void split(const std::string& src, const std::string& token, strArray& vect)": {
			"prefix": "static inline void split(const std::string& src, const std::string& token, strArray& vect)",
			"body": [
				"inline void split(${1:std:string& src},${2:std:string& token},${3:strArray& vect})"
			],
			"description": "static inline void split(const std::string& src, const std::string& token, strArray& vect)"
		},
		 "void Sprite3D::setCullFace(GLenum cullFace)": {
			"prefix": "void Sprite3D::setCullFace(GLenum cullFace)",
			"body": [
				"Sprite3D:setCullFace(${1:GLenum cullFace})"
			],
			"description": "void Sprite3D::setCullFace(GLenum cullFace)"
		},
		 "BezierBy* BezierBy::reverse() const": {
			"prefix": "BezierBy* BezierBy::reverse() const",
			"body": [
				"BezierBy* BezierBy:reverse() "
			],
			"description": "BezierBy* BezierBy::reverse() const"
		},
		 "bool Bundle3D::loadMaterialsBinary(MaterialDatas& materialdatas)": {
			"prefix": "bool Bundle3D::loadMaterialsBinary(MaterialDatas& materialdatas)",
			"body": [
				"Bundle3D:loadMaterialsBinary(${1:MaterialDatas& materialdatas})"
			],
			"description": "bool Bundle3D::loadMaterialsBinary(MaterialDatas& materialdatas)"
		},
		 "Mat4 Node::transform(const Mat4& parentTransform)": {
			"prefix": "Mat4 Node::transform(const Mat4& parentTransform)",
			"body": [
				"Node:transform(${1:Mat4& parentTransform})"
			],
			"description": "Mat4 Node::transform(const Mat4& parentTransform)"
		},
		 "ssize_t SpriteBatchNode::rebuildIndexInOrder(Sprite *parent, ssize_t index)": {
			"prefix": "ssize_t SpriteBatchNode::rebuildIndexInOrder(Sprite *parent, ssize_t index)",
			"body": [
				"SpriteBatchNode:rebuildIndexInOrder(${1:Sprite *parent},${2:ssize_t index})"
			],
			"description": "ssize_t SpriteBatchNode::rebuildIndexInOrder(Sprite *parent, ssize_t index)"
		},
		 "void TMXMapInfo::textHandler(void *ctx, const char *ch, int len)": {
			"prefix": "void TMXMapInfo::textHandler(void *ctx, const char *ch, int len)",
			"body": [
				"TMXMapInfo:textHandler(${1:void *ctx},${2:char *ch},${3:int len})"
			],
			"description": "void TMXMapInfo::textHandler(void *ctx, const char *ch, int len)"
		},
		 "void Sprite3DMaterialCache::removeUnusedSprite3DMaterial()": {
			"prefix": "void Sprite3DMaterialCache::removeUnusedSprite3DMaterial()",
			"body": [
				"void Sprite3DMaterialCache:removeUnusedSprite3DMaterial()"
			],
			"description": "void Sprite3DMaterialCache::removeUnusedSprite3DMaterial()"
		},
		 "TextField* TextField::create()": {
			"prefix": "TextField* TextField::create()",
			"body": [
				"TextField* TextField:create()"
			],
			"description": "TextField* TextField::create()"
		},
		 "void MenuItemSprite::updateImagesVisibility()": {
			"prefix": "void MenuItemSprite::updateImagesVisibility()",
			"body": [
				"void MenuItemSprite:updateImagesVisibility()"
			],
			"description": "void MenuItemSprite::updateImagesVisibility()"
		},
		 "void Director::createStatsLabel()": {
			"prefix": "void Director::createStatsLabel()",
			"body": [
				"void Director:createStatsLabel()"
			],
			"description": "void Director::createStatsLabel()"
		},
		 "ActionCamera* ActionCamera::clone() const": {
			"prefix": "ActionCamera* ActionCamera::clone() const",
			"body": [
				"ActionCamera* ActionCamera:clone() "
			],
			"description": "ActionCamera* ActionCamera::clone() const"
		},
		 "void TargetedAction::startWithTarget(Node *target)": {
			"prefix": "void TargetedAction::startWithTarget(Node *target)",
			"body": [
				"TargetedAction:startWithTarget(${1:Node *target})"
			],
			"description": "void TargetedAction::startWithTarget(Node *target)"
		},
		 "void BoneNode::sortAllChildren()": {
			"prefix": "void BoneNode::sortAllChildren()",
			"body": [
				"void BoneNode:sortAllChildren()"
			],
			"description": "void BoneNode::sortAllChildren()"
		},
		 "static tinyxml2::XMLElement* generateElementForObject(const Value& value, tinyxml2::XMLDocument *doc)": {
			"prefix": "static tinyxml2::XMLElement* generateElementForObject(const Value& value, tinyxml2::XMLDocument *doc)",
			"body": [
				"tinyxml2:XMLElement* generateElementForObject(${1:Value& value},${2:tinyxml2:XMLDocument *doc})"
			],
			"description": "static tinyxml2::XMLElement* generateElementForObject(const Value& value, tinyxml2::XMLDocument *doc)"
		},
		 "void MenuItemSprite::setEnabled(bool bEnabled)": {
			"prefix": "void MenuItemSprite::setEnabled(bool bEnabled)",
			"body": [
				"MenuItemSprite:setEnabled(${1:bool bEnabled})"
			],
			"description": "void MenuItemSprite::setEnabled(bool bEnabled)"
		},
		 "bool ReuseGrid::initWithTimes(int times)": {
			"prefix": "bool ReuseGrid::initWithTimes(int times)",
			"body": [
				"ReuseGrid:initWithTimes(${1:int times})"
			],
			"description": "bool ReuseGrid::initWithTimes(int times)"
		},
		 "bool Image::initWithImageFileThreadSafe(const std::string& fullpath)": {
			"prefix": "bool Image::initWithImageFileThreadSafe(const std::string& fullpath)",
			"body": [
				"Image:initWithImageFileThreadSafe(${1:std:string& fullpath})"
			],
			"description": "bool Image::initWithImageFileThreadSafe(const std::string& fullpath)"
		},
		 "void WavesTiles3D::update(float time)": {
			"prefix": "void WavesTiles3D::update(float time)",
			"body": [
				"WavesTiles3D:update(${1:float time})"
			],
			"description": "void WavesTiles3D::update(float time)"
		},
		 "void TMXLayer::parseInternalProperties()": {
			"prefix": "void TMXLayer::parseInternalProperties()",
			"body": [
				"void TMXLayer:parseInternalProperties()"
			],
			"description": "void TMXLayer::parseInternalProperties()"
		},
		 "bool MenuItemImage::initWithNormalImage(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "bool MenuItemImage::initWithNormalImage(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"MenuItemImage:initWithNormalImage(${1:std:string& normalImage},${2:std:string& selectedImage},${3:std:string& disabledImage},${4:Ref* target},${5:SEL_MenuHandler selector})"
			],
			"description": "bool MenuItemImage::initWithNormalImage(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, Ref* target, SEL_MenuHandler selector)"
		},
		 "void DisplayManager::changeDisplayWithIndex(int index, bool force)": {
			"prefix": "void DisplayManager::changeDisplayWithIndex(int index, bool force)",
			"body": [
				"DisplayManager:changeDisplayWithIndex(${1:int index},${2:bool force})"
			],
			"description": "void DisplayManager::changeDisplayWithIndex(int index, bool force)"
		},
		 "void ParticleSystem::postStep()": {
			"prefix": "void ParticleSystem::postStep()",
			"body": [
				"void ParticleSystem:postStep()"
			],
			"description": "void ParticleSystem::postStep()"
		},
		 "void PhysicsJointLimit::setAnchr1(const Vec2& anchr)": {
			"prefix": "void PhysicsJointLimit::setAnchr1(const Vec2& anchr)",
			"body": [
				"PhysicsJointLimit:setAnchr1(${1:Vec2& anchr})"
			],
			"description": "void PhysicsJointLimit::setAnchr1(const Vec2& anchr)"
		},
		 "bool CCBReader::isJSControlled()": {
			"prefix": "bool CCBReader::isJSControlled()",
			"body": [
				"bool CCBReader:isJSControlled()"
			],
			"description": "bool CCBReader::isJSControlled()"
		},
		 "void Layer::onTouchesCancelled(const std::vector<Touch*>& touches, Event *event)": {
			"prefix": "void Layer::onTouchesCancelled(const std::vector<Touch*>& touches, Event *event)",
			"body": [
				"Layer:onTouchesCancelled(${1:std:vector<Touch*>& touches},${2:Event *event})"
			],
			"description": "void Layer::onTouchesCancelled(const std::vector<Touch*>& touches, Event *event)"
		},
		 "void Layout::removeAllChildrenWithCleanup(bool cleanup)": {
			"prefix": "void Layout::removeAllChildrenWithCleanup(bool cleanup)",
			"body": [
				"Layout:removeAllChildrenWithCleanup(${1:bool cleanup})"
			],
			"description": "void Layout::removeAllChildrenWithCleanup(bool cleanup)"
		},
		 "void Sprite::ignoreAnchorPointForPosition(bool value)": {
			"prefix": "void Sprite::ignoreAnchorPointForPosition(bool value)",
			"body": [
				"Sprite:ignoreAnchorPointForPosition(${1:bool value})"
			],
			"description": "void Sprite::ignoreAnchorPointForPosition(bool value)"
		},
		 "ProgressTo* ProgressTo::clone() const": {
			"prefix": "ProgressTo* ProgressTo::clone() const",
			"body": [
				"ProgressTo* ProgressTo:clone() "
			],
			"description": "ProgressTo* ProgressTo::clone() const"
		},
		 "void Button::onPressStateChangedToDisabled()": {
			"prefix": "void Button::onPressStateChangedToDisabled()",
			"body": [
				"void Button:onPressStateChangedToDisabled()"
			],
			"description": "void Button::onPressStateChangedToDisabled()"
		},
		 "ScaleTo* ScaleTo::create(float duration, float sx, float sy)": {
			"prefix": "ScaleTo* ScaleTo::create(float duration, float sx, float sy)",
			"body": [
				"ScaleTo:create(${1:float duration},${2:float sx},${3:float sy})"
			],
			"description": "ScaleTo* ScaleTo::create(float duration, float sx, float sy)"
		},
		 "void ScrollView::setLayoutType(Type type)": {
			"prefix": "void ScrollView::setLayoutType(Type type)",
			"body": [
				"ScrollView:setLayoutType(${1:Type type})"
			],
			"description": "void ScrollView::setLayoutType(Type type)"
		},
		 "ActionObject* ActionManagerEx::playActionByName(const char* jsonName,const char* actionName)": {
			"prefix": "ActionObject* ActionManagerEx::playActionByName(const char* jsonName,const char* actionName)",
			"body": [
				"ActionManagerEx:playActionByName(${1:char* jsonName},${2:char* actionName})"
			],
			"description": "ActionObject* ActionManagerEx::playActionByName(const char* jsonName,const char* actionName)"
		},
		 "bool __Dictionary::writeToFile(const char *fullPath)": {
			"prefix": "bool __Dictionary::writeToFile(const char *fullPath)",
			"body": [
				"__Dictionary:writeToFile(${1:char *fullPath})"
			],
			"description": "bool __Dictionary::writeToFile(const char *fullPath)"
		},
		 "float Vec2::angle(const Vec2& v1, const Vec2& v2)": {
			"prefix": "float Vec2::angle(const Vec2& v1, const Vec2& v2)",
			"body": [
				"Vec2:angle(${1:Vec2& v1},${2:Vec2& v2})"
			],
			"description": "float Vec2::angle(const Vec2& v1, const Vec2& v2)"
		},
		 "void ParticleSystem::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void ParticleSystem::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"ParticleSystem:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void ParticleSystem::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "bool Physics3DShape::initCapsule(float radius, float height)": {
			"prefix": "bool Physics3DShape::initCapsule(float radius, float height)",
			"body": [
				"Physics3DShape:initCapsule(${1:float radius},${2:float height})"
			],
			"description": "bool Physics3DShape::initCapsule(float radius, float height)"
		},
		 "void Slider::initRenderer()": {
			"prefix": "void Slider::initRenderer()",
			"body": [
				"void Slider:initRenderer()"
			],
			"description": "void Slider::initRenderer()"
		},
		 "void Layout::removeAllChildren()": {
			"prefix": "void Layout::removeAllChildren()",
			"body": [
				"void Layout:removeAllChildren()"
			],
			"description": "void Layout::removeAllChildren()"
		},
		 "void LabelBMFont::setAlignment(TextHAlignment alignment)": {
			"prefix": "void LabelBMFont::setAlignment(TextHAlignment alignment)",
			"body": [
				"LabelBMFont:setAlignment(${1:TextHAlignment alignment})"
			],
			"description": "void LabelBMFont::setAlignment(TextHAlignment alignment)"
		},
		 "void EventDispatcher::EventListenerVector::clear()": {
			"prefix": "void EventDispatcher::EventListenerVector::clear()",
			"body": [
				"void EventDispatcher:EventListenerVector:clear()"
			],
			"description": "void EventDispatcher::EventListenerVector::clear()"
		},
		 "void __Dictionary::setObjectUnSafe(Ref* pObject, const intptr_t key)": {
			"prefix": "void __Dictionary::setObjectUnSafe(Ref* pObject, const intptr_t key)",
			"body": [
				"__Dictionary:setObjectUnSafe(${1:Ref* pObject},${2:intptr_t key})"
			],
			"description": "void __Dictionary::setObjectUnSafe(Ref* pObject, const intptr_t key)"
		},
		 "float Widget::getRightBoundary() const": {
			"prefix": "float Widget::getRightBoundary() const",
			"body": [
				"float Widget:getRightBoundary() "
			],
			"description": "float Widget::getRightBoundary() const"
		},
		 "void ArmatureAnimation::setSpeedScale(float speedScale)": {
			"prefix": "void ArmatureAnimation::setSpeedScale(float speedScale)",
			"body": [
				"ArmatureAnimation:setSpeedScale(${1:float speedScale})"
			],
			"description": "void ArmatureAnimation::setSpeedScale(float speedScale)"
		},
		 "void DrawNode::drawPoint(const Vec2& position, const float pointSize, const Color4F &color)": {
			"prefix": "void DrawNode::drawPoint(const Vec2& position, const float pointSize, const Color4F &color)",
			"body": [
				"DrawNode:drawPoint(${1:Vec2& position},${2:float pointSize},${3:Color4F &color})"
			],
			"description": "void DrawNode::drawPoint(const Vec2& position, const float pointSize, const Color4F &color)"
		},
		 "void GLProgramCache::destroyInstance()": {
			"prefix": "void GLProgramCache::destroyInstance()",
			"body": [
				"void GLProgramCache:destroyInstance()"
			],
			"description": "void GLProgramCache::destroyInstance()"
		},
		 "void SpriteBatchNode::updateQuadFromSprite(Sprite *sprite, ssize_t index)": {
			"prefix": "void SpriteBatchNode::updateQuadFromSprite(Sprite *sprite, ssize_t index)",
			"body": [
				"SpriteBatchNode:updateQuadFromSprite(${1:Sprite *sprite},${2:ssize_t index})"
			],
			"description": "void SpriteBatchNode::updateQuadFromSprite(Sprite *sprite, ssize_t index)"
		},
		 "void VolatileTextureMgr::addStringTexture(Texture2D *tt, const char* text, const FontDefinition& fontDefinition)": {
			"prefix": "void VolatileTextureMgr::addStringTexture(Texture2D *tt, const char* text, const FontDefinition& fontDefinition)",
			"body": [
				"VolatileTextureMgr:addStringTexture(${1:Texture2D *tt},${2:char* text},${3:FontDefinition& fontDefinition})"
			],
			"description": "void VolatileTextureMgr::addStringTexture(Texture2D *tt, const char* text, const FontDefinition& fontDefinition)"
		},
		 "Size Size::operator-(const Size& right) const": {
			"prefix": "Size Size::operator-(const Size& right) const",
			"body": [
				"Size:operator-(${1:Size& right})"
			],
			"description": "Size Size::operator-(const Size& right) const"
		},
		 "ActionInterval*  TransitionFadeBL::actionWithSize(const Size& size)": {
			"prefix": "ActionInterval*  TransitionFadeBL::actionWithSize(const Size& size)",
			"body": [
				"TransitionFadeBL:actionWithSize(${1:Size& size})"
			],
			"description": "ActionInterval*  TransitionFadeBL::actionWithSize(const Size& size)"
		},
		 "void Vec4::set(const float* array)": {
			"prefix": "void Vec4::set(const float* array)",
			"body": [
				"Vec4:set(${1:float* array})"
			],
			"description": "void Vec4::set(const float* array)"
		},
		 "void SceneReader::setPropertyFromJsonDict(CocoLoader *cocoLoader, stExpCocoNode *cocoNode, cocos2d::Node *node)": {
			"prefix": "void SceneReader::setPropertyFromJsonDict(CocoLoader *cocoLoader, stExpCocoNode *cocoNode, cocos2d::Node *node)",
			"body": [
				"SceneReader:setPropertyFromJsonDict(${1:CocoLoader *cocoLoader},${2:stExpCocoNode *cocoNode},${3:cocos2d:Node *node})"
			],
			"description": "void SceneReader::setPropertyFromJsonDict(CocoLoader *cocoLoader, stExpCocoNode *cocoNode, cocos2d::Node *node)"
		},
		 "btTransform convertMat4TobtTransform( const cocos2d::Mat4 &mat4 )": {
			"prefix": "btTransform convertMat4TobtTransform( const cocos2d::Mat4 &mat4 )",
			"body": [
				"convertMat4TobtTransform(${1:cocos2d:Mat4 &mat4})"
			],
			"description": "btTransform convertMat4TobtTransform( const cocos2d::Mat4 &mat4 )"
		},
		 "const Vec2& Armature::getAnchorPointInPoints() const": {
			"prefix": "const Vec2& Armature::getAnchorPointInPoints() const",
			"body": [
				" Vec2& Armature:getAnchorPointInPoints() "
			],
			"description": "const Vec2& Armature::getAnchorPointInPoints() const"
		},
		 "bool DisplayManager::containPoint(float x, float y)": {
			"prefix": "bool DisplayManager::containPoint(float x, float y)",
			"body": [
				"DisplayManager:containPoint(${1:float x},${2:float y})"
			],
			"description": "bool DisplayManager::containPoint(float x, float y)"
		},
		 "Mesh* Mesh::create(const std::vector<float>& positions, const std::vector<float>& normals, const std::vector<float>& texs, const IndexArray& indices)": {
			"prefix": "Mesh* Mesh::create(const std::vector<float>& positions, const std::vector<float>& normals, const std::vector<float>& texs, const IndexArray& indices)",
			"body": [
				"Mesh:create(${1:std:vector<float>& positions},${2:std:vector<float>& normals},${3:std:vector<float>& texs},${4:IndexArray& indices})"
			],
			"description": "Mesh* Mesh::create(const std::vector<float>& positions, const std::vector<float>& normals, const std::vector<float>& texs, const IndexArray& indices)"
		},
		 "void Physics3D6DofConstraint::setUseFrameOffset(bool frameOffsetOnOff) const": {
			"prefix": "void Physics3D6DofConstraint::setUseFrameOffset(bool frameOffsetOnOff) const",
			"body": [
				"Physics3D6DofConstraint:setUseFrameOffset(${1:bool frameOffsetOnOff})"
			],
			"description": "void Physics3D6DofConstraint::setUseFrameOffset(bool frameOffsetOnOff) const"
		},
		 "TransitionFade * TransitionFade::create(float duration, Scene *scene, const Color3B& color)": {
			"prefix": "TransitionFade * TransitionFade::create(float duration, Scene *scene, const Color3B& color)",
			"body": [
				"* TransitionFade:create(${1:float duration},${2:Scene *scene},${3:Color3B& color})"
			],
			"description": "TransitionFade * TransitionFade::create(float duration, Scene *scene, const Color3B& color)"
		},
		 "void Layout::requestDoLayout()": {
			"prefix": "void Layout::requestDoLayout()",
			"body": [
				"void Layout:requestDoLayout()"
			],
			"description": "void Layout::requestDoLayout()"
		},
		 "void Slider::setupProgressBarTexture()": {
			"prefix": "void Slider::setupProgressBarTexture()",
			"body": [
				"void Slider:setupProgressBarTexture()"
			],
			"description": "void Slider::setupProgressBarTexture()"
		},
		 "void Physics3DWorld::removePhysics3DConstraint(Physics3DConstraint* constraint)": {
			"prefix": "void Physics3DWorld::removePhysics3DConstraint(Physics3DConstraint* constraint)",
			"body": [
				"Physics3DWorld:removePhysics3DConstraint(${1:Physics3DConstraint* raint})"
			],
			"description": "void Physics3DWorld::removePhysics3DConstraint(Physics3DConstraint* constraint)"
		},
		 "ComRender* ComRender::create(cocos2d::Node *node, const char *comName)": {
			"prefix": "ComRender* ComRender::create(cocos2d::Node *node, const char *comName)",
			"body": [
				"ComRender:create(${1:cocos2d:Node *node},${2:char *comName})"
			],
			"description": "ComRender* ComRender::create(cocos2d::Node *node, const char *comName)"
		},
		 "Rect Sprite3D::getBoundingBox() const": {
			"prefix": "Rect Sprite3D::getBoundingBox() const",
			"body": [
				"Rect Sprite3D:getBoundingBox() "
			],
			"description": "Rect Sprite3D::getBoundingBox() const"
		},
		 "void Scene::setPhysics3DDebugCamera(Camera* camera)": {
			"prefix": "void Scene::setPhysics3DDebugCamera(Camera* camera)",
			"body": [
				"Scene:setPhysics3DDebugCamera(${1:Camera* camera})"
			],
			"description": "void Scene::setPhysics3DDebugCamera(Camera* camera)"
		},
		 "Vec4 NavMeshDebugDraw::getColor(unsigned int col)": {
			"prefix": "Vec4 NavMeshDebugDraw::getColor(unsigned int col)",
			"body": [
				"NavMeshDebugDraw:getColor(${1:unsigned int col})"
			],
			"description": "Vec4 NavMeshDebugDraw::getColor(unsigned int col)"
		},
		 "void Animate3D::setOriginInterval(float interval)": {
			"prefix": "void Animate3D::setOriginInterval(float interval)",
			"body": [
				"Animate3D:setOriginInterval(${1:float interval})"
			],
			"description": "void Animate3D::setOriginInterval(float interval)"
		},
		 "void Controller::registerListeners()": {
			"prefix": "void Controller::registerListeners()",
			"body": [
				"void Controller:registerListeners()"
			],
			"description": "void Controller::registerListeners()"
		},
		 "void __Array::removeAllObjects()": {
			"prefix": "void __Array::removeAllObjects()",
			"body": [
				"void __Array:removeAllObjects()"
			],
			"description": "void __Array::removeAllObjects()"
		},
		 "bool Configuration::checkForGLExtension(const std::string &searchName) const": {
			"prefix": "bool Configuration::checkForGLExtension(const std::string &searchName) const",
			"body": [
				"Configuration:checkForGLExtension(${1:std:string &searchName})"
			],
			"description": "bool Configuration::checkForGLExtension(const std::string &searchName) const"
		},
		 "void PhysicsBody::setMass(float mass)": {
			"prefix": "void PhysicsBody::setMass(float mass)",
			"body": [
				"PhysicsBody:setMass(${1:float mass})"
			],
			"description": "void PhysicsBody::setMass(float mass)"
		},
		 "void Bone::setLocalZOrder(int zOrder)": {
			"prefix": "void Bone::setLocalZOrder(int zOrder)",
			"body": [
				"Bone:setLocalZOrder(${1:int zOrder})"
			],
			"description": "void Bone::setLocalZOrder(int zOrder)"
		},
		 "bool FileUtils::isPopupNotify() const": {
			"prefix": "bool FileUtils::isPopupNotify() const",
			"body": [
				"bool FileUtils:isPopupNotify() "
			],
			"description": "bool FileUtils::isPopupNotify() const"
		},
		 "FontAtlas* FontAtlasCache::getFontAtlasCharMap(const std::string& plistFile)": {
			"prefix": "FontAtlas* FontAtlasCache::getFontAtlasCharMap(const std::string& plistFile)",
			"body": [
				"FontAtlasCache:getFontAtlasCharMap(${1:std:string& plistFile})"
			],
			"description": "FontAtlas* FontAtlasCache::getFontAtlasCharMap(const std::string& plistFile)"
		},
		 "void MenuItemImage::setNormalSpriteFrame(SpriteFrame * frame)": {
			"prefix": "void MenuItemImage::setNormalSpriteFrame(SpriteFrame * frame)",
			"body": [
				"MenuItemImage:setNormalSpriteFrame(${1:SpriteFrame * frame})"
			],
			"description": "void MenuItemImage::setNormalSpriteFrame(SpriteFrame * frame)"
		},
		 "GUIReader* GUIReader::getInstance()": {
			"prefix": "GUIReader* GUIReader::getInstance()",
			"body": [
				"GUIReader* GUIReader:getInstance()"
			],
			"description": "GUIReader* GUIReader::getInstance()"
		},
		 "void NodeLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char* pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char* pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeSpriteFrame(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:SpriteFrame * pSpriteFrame},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char* pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)"
		},
		 "ArmatureAnimation *Armature::getAnimation() const": {
			"prefix": "ArmatureAnimation *Armature::getAnimation() const",
			"body": [
				"ArmatureAnimation *Armature:getAnimation() "
			],
			"description": "ArmatureAnimation *Armature::getAnimation() const"
		},
		 "void DrawNode::drawLine(const Vec2 &origin, const Vec2 &destination, const Color4F &color)": {
			"prefix": "void DrawNode::drawLine(const Vec2 &origin, const Vec2 &destination, const Color4F &color)",
			"body": [
				"DrawNode:drawLine(${1:Vec2 &origin},${2:Vec2 &destination},${3:Color4F &color})"
			],
			"description": "void DrawNode::drawLine(const Vec2 &origin, const Vec2 &destination, const Color4F &color)"
		},
		 "ActionTimelineCache* ActionTimelineCache::getInstance()": {
			"prefix": "ActionTimelineCache* ActionTimelineCache::getInstance()",
			"body": [
				"ActionTimelineCache* ActionTimelineCache:getInstance()"
			],
			"description": "ActionTimelineCache* ActionTimelineCache::getInstance()"
		},
		 "Spawn* Spawn::createWithVariableList(FiniteTimeAction *action1, va_list args)": {
			"prefix": "Spawn* Spawn::createWithVariableList(FiniteTimeAction *action1, va_list args)",
			"body": [
				"Spawn:createWithVariableList(${1:FiniteTimeAction *action1},${2:va_list args})"
			],
			"description": "Spawn* Spawn::createWithVariableList(FiniteTimeAction *action1, va_list args)"
		},
		 "Widget* Layout::findFocusEnabledChildWidgetByIndex(ssize_t index)": {
			"prefix": "Widget* Layout::findFocusEnabledChildWidgetByIndex(ssize_t index)",
			"body": [
				"Layout:findFocusEnabledChildWidgetByIndex(${1:ssize_t index})"
			],
			"description": "Widget* Layout::findFocusEnabledChildWidgetByIndex(ssize_t index)"
		},
		 "float Physics3DCollider::getCcdSweptSphereRadius() const": {
			"prefix": "float Physics3DCollider::getCcdSweptSphereRadius() const",
			"body": [
				"float Physics3DCollider:getCcdSweptSphereRadius() "
			],
			"description": "float Physics3DCollider::getCcdSweptSphereRadius() const"
		},
		 "void BoneNode::setName(const std::string& name)": {
			"prefix": "void BoneNode::setName(const std::string& name)",
			"body": [
				"BoneNode:setName(${1:std:string& name})"
			],
			"description": "void BoneNode::setName(const std::string& name)"
		},
		 "void DisplayManager::setCurrentDecorativeDisplay(DecorativeDisplay *decoDisplay)": {
			"prefix": "void DisplayManager::setCurrentDecorativeDisplay(DecorativeDisplay *decoDisplay)",
			"body": [
				"DisplayManager:setCurrentDecorativeDisplay(${1:DecorativeDisplay *decoDisplay})"
			],
			"description": "void DisplayManager::setCurrentDecorativeDisplay(DecorativeDisplay *decoDisplay)"
		},
		 "void EventDispatcher::removeEventListenersForTarget(Node* target, bool recursive/* = false */)": {
			"prefix": "void EventDispatcher::removeEventListenersForTarget(Node* target, bool recursive/* = false */)",
			"body": [
				"EventDispatcher:removeEventListenersForTarget(${1:Node* target},${2:bool recursive/* = false */})"
			],
			"description": "void EventDispatcher::removeEventListenersForTarget(Node* target, bool recursive/* = false */)"
		},
		 "EaseQuarticActionOut* EaseQuarticActionOut::reverse() const": {
			"prefix": "EaseQuarticActionOut* EaseQuarticActionOut::reverse() const",
			"body": [
				"EaseQuarticActionOut* EaseQuarticActionOut:reverse() "
			],
			"description": "EaseQuarticActionOut* EaseQuarticActionOut::reverse() const"
		},
		 "void Slider::onPressStateChangedToDisabled()": {
			"prefix": "void Slider::onPressStateChangedToDisabled()",
			"body": [
				"void Slider:onPressStateChangedToDisabled()"
			],
			"description": "void Slider::onPressStateChangedToDisabled()"
		},
		 "EaseInOut* EaseInOut::reverse() const": {
			"prefix": "EaseInOut* EaseInOut::reverse() const",
			"body": [
				"EaseInOut* EaseInOut:reverse() "
			],
			"description": "EaseInOut* EaseInOut::reverse() const"
		},
		 "void LinearVerticalLayoutManager::doLayout(LayoutProtocol* layout)": {
			"prefix": "void LinearVerticalLayoutManager::doLayout(LayoutProtocol* layout)",
			"body": [
				"LinearVerticalLayoutManager:doLayout(${1:LayoutProtocol* layout})"
			],
			"description": "void LinearVerticalLayoutManager::doLayout(LayoutProtocol* layout)"
		},
		 "void Menu::alignItemsInRowsWithArray(const ValueVector& columns)": {
			"prefix": "void Menu::alignItemsInRowsWithArray(const ValueVector& columns)",
			"body": [
				"Menu:alignItemsInRowsWithArray(${1:ValueVector& columns})"
			],
			"description": "void Menu::alignItemsInRowsWithArray(const ValueVector& columns)"
		},
		 "Vec2 Node::convertToNodeSpace(const Vec2& worldPoint) const": {
			"prefix": "Vec2 Node::convertToNodeSpace(const Vec2& worldPoint) const",
			"body": [
				"Node:convertToNodeSpace(${1:Vec2& worldPoint})"
			],
			"description": "Vec2 Node::convertToNodeSpace(const Vec2& worldPoint) const"
		},
		 "void localStorageInit( const std::string& fullpath)": {
			"prefix": "void localStorageInit( const std::string& fullpath)",
			"body": [
				"localStorageInit(${1:std:string& fullpath})"
			],
			"description": "void localStorageInit( const std::string& fullpath)"
		},
		 "Mat4 Bone::getNodeToArmatureTransform() const": {
			"prefix": "Mat4 Bone::getNodeToArmatureTransform() const",
			"body": [
				"Mat4 Bone:getNodeToArmatureTransform() "
			],
			"description": "Mat4 Bone::getNodeToArmatureTransform() const"
		},
		 "void UserDefault::setBoolForKey(const char* pKey, bool value)": {
			"prefix": "void UserDefault::setBoolForKey(const char* pKey, bool value)",
			"body": [
				"UserDefault:setBoolForKey(${1:char* pKey},${2:bool value})"
			],
			"description": "void UserDefault::setBoolForKey(const char* pKey, bool value)"
		},
		 "float Physics3DSliderConstraint::getTargetLinMotorVelocity() const": {
			"prefix": "float Physics3DSliderConstraint::getTargetLinMotorVelocity() const",
			"body": [
				"float Physics3DSliderConstraint:getTargetLinMotorVelocity() "
			],
			"description": "float Physics3DSliderConstraint::getTargetLinMotorVelocity() const"
		},
		 "void TextureAtlas::removeQuadsAtIndex(ssize_t index, ssize_t amount)": {
			"prefix": "void TextureAtlas::removeQuadsAtIndex(ssize_t index, ssize_t amount)",
			"body": [
				"TextureAtlas:removeQuadsAtIndex(${1:ssize_t index},${2:ssize_t amount})"
			],
			"description": "void TextureAtlas::removeQuadsAtIndex(ssize_t index, ssize_t amount)"
		},
		 "ScaleFrame* ScaleFrame::create()": {
			"prefix": "ScaleFrame* ScaleFrame::create()",
			"body": [
				"ScaleFrame* ScaleFrame:create()"
			],
			"description": "ScaleFrame* ScaleFrame::create()"
		},
		 "float ParticleSystem::getTangentialAccelVar() const": {
			"prefix": "float ParticleSystem::getTangentialAccelVar() const",
			"body": [
				"float ParticleSystem:getTangentialAccelVar() "
			],
			"description": "float ParticleSystem::getTangentialAccelVar() const"
		},
		 "void GridBase::beforeDraw(void)": {
			"prefix": "void GridBase::beforeDraw(void)",
			"body": [
				"GridBase:beforeDraw(${1:void})"
			],
			"description": "void GridBase::beforeDraw(void)"
		},
		 "void EditBoxImplWin::doAnimationWhenKeyboardMove(float duration, float distance)": {
			"prefix": "void EditBoxImplWin::doAnimationWhenKeyboardMove(float duration, float distance)",
			"body": [
				"EditBoxImplWin:doAnimationWhenKeyboardMove(${1:float duration},${2:float distance})"
			],
			"description": "void EditBoxImplWin::doAnimationWhenKeyboardMove(float duration, float distance)"
		},
		 "const std::string& TextField::getFontName()const": {
			"prefix": "const std::string& TextField::getFontName()const",
			"body": [
				" std:string& TextField:getFontName()"
			],
			"description": "const std::string& TextField::getFontName()const"
		},
		 "CCBEaseInstant* CCBEaseInstant::reverse() const": {
			"prefix": "CCBEaseInstant* CCBEaseInstant::reverse() const",
			"body": [
				"CCBEaseInstant* CCBEaseInstant:reverse() "
			],
			"description": "CCBEaseInstant* CCBEaseInstant::reverse() const"
		},
		 "void EditBoxImplCommon::editBoxEditingDidEnd(const std::string& text)": {
			"prefix": "void EditBoxImplCommon::editBoxEditingDidEnd(const std::string& text)",
			"body": [
				"EditBoxImplCommon:editBoxEditingDidEnd(${1:std:string& text})"
			],
			"description": "void EditBoxImplCommon::editBoxEditingDidEnd(const std::string& text)"
		},
		 "void CSLoader::destroyInstance()": {
			"prefix": "void CSLoader::destroyInstance()",
			"body": [
				"void CSLoader:destroyInstance()"
			],
			"description": "void CSLoader::destroyInstance()"
		},
		 "FlatBufferBuilder* FlatBuffersSerialize::createFlatBuffersWithXMLFileForSimulator(const std::string &xmlFileName)": {
			"prefix": "FlatBufferBuilder* FlatBuffersSerialize::createFlatBuffersWithXMLFileForSimulator(const std::string &xmlFileName)",
			"body": [
				"FlatBuffersSerialize:createFlatBuffersWithXMLFileForSimulator(${1:std:string &xmlFileName})"
			],
			"description": "FlatBufferBuilder* FlatBuffersSerialize::createFlatBuffersWithXMLFileForSimulator(const std::string &xmlFileName)"
		},
		 "ssize_t Skeleton3D::getRootCount() const": {
			"prefix": "ssize_t Skeleton3D::getRootCount() const",
			"body": [
				"ssize_t Skeleton3D:getRootCount() "
			],
			"description": "ssize_t Skeleton3D::getRootCount() const"
		},
		 "float NodeLoader::parsePropTypeFloatScale(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "float NodeLoader::parsePropTypeFloatScale(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeFloatScale(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "float NodeLoader::parsePropTypeFloatScale(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void ScrollViewLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)": {
			"prefix": "void ScrollViewLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)",
			"body": [
				"ScrollViewLoader:onHandlePropTypeIntegerLabeled(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:int pIntegerLabeled},${5:CCBReader * ccbReader})"
			],
			"description": "void ScrollViewLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)"
		},
		 "void PhysicsWorld::removeBody(int tag)": {
			"prefix": "void PhysicsWorld::removeBody(int tag)",
			"body": [
				"PhysicsWorld:removeBody(${1:int tag})"
			],
			"description": "void PhysicsWorld::removeBody(int tag)"
		},
		 "bool Physics3DShape::initCompoundShape( const std::vector<std::pair<Physics3DShape *, Mat4>> &shapes )": {
			"prefix": "bool Physics3DShape::initCompoundShape( const std::vector<std::pair<Physics3DShape *, Mat4>> &shapes )",
			"body": [
				"Physics3DShape:initCompoundShape(${1:std:vector<std:pair<Physics3DShape *},${2:Mat4>> &shapes})"
			],
			"description": "bool Physics3DShape::initCompoundShape( const std::vector<std::pair<Physics3DShape *, Mat4>> &shapes )"
		},
		 "void EaseQuarticActionOut::update(float time)": {
			"prefix": "void EaseQuarticActionOut::update(float time)",
			"body": [
				"EaseQuarticActionOut:update(${1:float time})"
			],
			"description": "void EaseQuarticActionOut::update(float time)"
		},
		 "void NavMeshObstacle::syncToNode()": {
			"prefix": "void NavMeshObstacle::syncToNode()",
			"body": [
				"void NavMeshObstacle:syncToNode()"
			],
			"description": "void NavMeshObstacle::syncToNode()"
		},
		 "void DeccelAmplitude::update(float time)": {
			"prefix": "void DeccelAmplitude::update(float time)",
			"body": [
				"DeccelAmplitude:update(${1:float time})"
			],
			"description": "void DeccelAmplitude::update(float time)"
		},
		 "void ParticleSystemQuad::setupVBO()": {
			"prefix": "void ParticleSystemQuad::setupVBO()",
			"body": [
				"void ParticleSystemQuad:setupVBO()"
			],
			"description": "void ParticleSystemQuad::setupVBO()"
		},
		 "void CheckBox::addEventListenerCheckBox(Ref *target, SEL_SelectedStateEvent selector)": {
			"prefix": "void CheckBox::addEventListenerCheckBox(Ref *target, SEL_SelectedStateEvent selector)",
			"body": [
				"CheckBox:addEventListenerCheckBox(${1:Ref *target},${2:SEL_SelectedStateEvent selector})"
			],
			"description": "void CheckBox::addEventListenerCheckBox(Ref *target, SEL_SelectedStateEvent selector)"
		},
		 "void Layout::setBackGroundColorVector(const Vec2 &vector)": {
			"prefix": "void Layout::setBackGroundColorVector(const Vec2 &vector)",
			"body": [
				"Layout:setBackGroundColorVector(${1:Vec2 &vector})"
			],
			"description": "void Layout::setBackGroundColorVector(const Vec2 &vector)"
		},
		 "ComAttribute* ComAttribute::create(void)": {
			"prefix": "ComAttribute* ComAttribute::create(void)",
			"body": [
				"ComAttribute:create(${1:void})"
			],
			"description": "ComAttribute* ComAttribute::create(void)"
		},
		 "void ParallaxNode::addChild(Node * child, int zOrder, int tag)": {
			"prefix": "void ParallaxNode::addChild(Node * child, int zOrder, int tag)",
			"body": [
				"ParallaxNode:addChild(${1:Node * child},${2:int zOrder},${3:int tag})"
			],
			"description": "void ParallaxNode::addChild(Node * child, int zOrder, int tag)"
		},
		 "void EditBoxImplCommon::setContentSize(const Size& size)": {
			"prefix": "void EditBoxImplCommon::setContentSize(const Size& size)",
			"body": [
				"EditBoxImplCommon:setContentSize(${1:Size& size})"
			],
			"description": "void EditBoxImplCommon::setContentSize(const Size& size)"
		},
		 "void TMXLayer::updateIndexBuffer()": {
			"prefix": "void TMXLayer::updateIndexBuffer()",
			"body": [
				"void TMXLayer:updateIndexBuffer()"
			],
			"description": "void TMXLayer::updateIndexBuffer()"
		},
		 "void LabelTTF::setString(const std::string &string)": {
			"prefix": "void LabelTTF::setString(const std::string &string)",
			"body": [
				"LabelTTF:setString(${1:std:string &string})"
			],
			"description": "void LabelTTF::setString(const std::string &string)"
		},
		 "TransitionFadeDown* TransitionFadeDown::create(float t, Scene* scene)": {
			"prefix": "TransitionFadeDown* TransitionFadeDown::create(float t, Scene* scene)",
			"body": [
				"TransitionFadeDown:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionFadeDown* TransitionFadeDown::create(float t, Scene* scene)"
		},
		 "void ActionTimeline::emitFrameEvent(Frame* frame)": {
			"prefix": "void ActionTimeline::emitFrameEvent(Frame* frame)",
			"body": [
				"ActionTimeline:emitFrameEvent(${1:Frame* frame})"
			],
			"description": "void ActionTimeline::emitFrameEvent(Frame* frame)"
		},
		 "void SIOClientImpl::openSocket()": {
			"prefix": "void SIOClientImpl::openSocket()",
			"body": [
				"void SIOClientImpl:openSocket()"
			],
			"description": "void SIOClientImpl::openSocket()"
		},
		 "void EventDispatcher::addEventListenerWithSceneGraphPriority(EventListener* listener, Node* node)": {
			"prefix": "void EventDispatcher::addEventListenerWithSceneGraphPriority(EventListener* listener, Node* node)",
			"body": [
				"EventDispatcher:addEventListenerWithSceneGraphPriority(${1:EventListener* listener},${2:Node* node})"
			],
			"description": "void EventDispatcher::addEventListenerWithSceneGraphPriority(EventListener* listener, Node* node)"
		},
		 "void Renderer::fillQuads(const QuadCommand *cmd)": {
			"prefix": "void Renderer::fillQuads(const QuadCommand *cmd)",
			"body": [
				"Renderer:fillQuads(${1:QuadCommand *cmd})"
			],
			"description": "void Renderer::fillQuads(const QuadCommand *cmd)"
		},
		 "void MotionStreak::setPositionY(float y)": {
			"prefix": "void MotionStreak::setPositionY(float y)",
			"body": [
				"MotionStreak:setPositionY(${1:float y})"
			],
			"description": "void MotionStreak::setPositionY(float y)"
		},
		 "float PhysicsJointRotaryLimit::getMax() const": {
			"prefix": "float PhysicsJointRotaryLimit::getMax() const",
			"body": [
				"float PhysicsJointRotaryLimit:getMax() "
			],
			"description": "float PhysicsJointRotaryLimit::getMax() const"
		},
		 "void Texture2D::generateMipmap()": {
			"prefix": "void Texture2D::generateMipmap()",
			"body": [
				"void Texture2D:generateMipmap()"
			],
			"description": "void Texture2D::generateMipmap()"
		},
		 "void Label::setMaxLineWidth(float maxLineWidth)": {
			"prefix": "void Label::setMaxLineWidth(float maxLineWidth)",
			"body": [
				"Label:setMaxLineWidth(${1:float maxLineWidth})"
			],
			"description": "void Label::setMaxLineWidth(float maxLineWidth)"
		},
		 "void Physics3DDebugDrawer::draw( Renderer *renderer)": {
			"prefix": "void Physics3DDebugDrawer::draw( Renderer *renderer)",
			"body": [
				"Physics3DDebugDrawer:draw(${1:Renderer *renderer})"
			],
			"description": "void Physics3DDebugDrawer::draw( Renderer *renderer)"
		},
		 "NodeData* Bundle3D::parseNodesRecursivelyJson(const rapidjson::Value& jvalue, bool singleSprite)": {
			"prefix": "NodeData* Bundle3D::parseNodesRecursivelyJson(const rapidjson::Value& jvalue, bool singleSprite)",
			"body": [
				"Bundle3D:parseNodesRecursivelyJson(${1:rapidjson:Value& jvalue},${2:bool singleSprite})"
			],
			"description": "NodeData* Bundle3D::parseNodesRecursivelyJson(const rapidjson::Value& jvalue, bool singleSprite)"
		},
		 "void FlipY3D::update(float time)": {
			"prefix": "void FlipY3D::update(float time)",
			"body": [
				"FlipY3D:update(${1:float time})"
			],
			"description": "void FlipY3D::update(float time)"
		},
		 "ColliderDetector *ColliderDetector::create()": {
			"prefix": "ColliderDetector *ColliderDetector::create()",
			"body": [
				"ColliderDetector *ColliderDetector:create()"
			],
			"description": "ColliderDetector *ColliderDetector::create()"
		},
		 "void CCBSequenceProperty::setType(int type)": {
			"prefix": "void CCBSequenceProperty::setType(int type)",
			"body": [
				"CCBSequenceProperty:setType(${1:int type})"
			],
			"description": "void CCBSequenceProperty::setType(int type)"
		},
		 "void GLProgram::updateUniforms()": {
			"prefix": "void GLProgram::updateUniforms()",
			"body": [
				"void GLProgram:updateUniforms()"
			],
			"description": "void GLProgram::updateUniforms()"
		},
		 "void	Physics3DPointToPointConstraint::setPivotPointInB(const cocos2d::Vec3& pivotB)": {
			"prefix": "void	Physics3DPointToPointConstraint::setPivotPointInB(const cocos2d::Vec3& pivotB)",
			"body": [
				"pivotB})"
			],
			"description": "void	Physics3DPointToPointConstraint::setPivotPointInB(const cocos2d::Vec3& pivotB)"
		},
		 "const flatbuffers::EasingData *flatbuffers)": {
			"prefix": "const flatbuffers::EasingData *flatbuffers)",
			"body": [
				" flatbuffers:EasingData *flatbuffers)"
			],
			"description": "const flatbuffers::EasingData *flatbuffers)"
		},
		 "void VolatileTextureMgr::addImageTexture(Texture2D *tt, const std::string& imageFileName)": {
			"prefix": "void VolatileTextureMgr::addImageTexture(Texture2D *tt, const std::string& imageFileName)",
			"body": [
				"VolatileTextureMgr:addImageTexture(${1:Texture2D *tt},${2:std:string& imageFileName})"
			],
			"description": "void VolatileTextureMgr::addImageTexture(Texture2D *tt, const std::string& imageFileName)"
		},
		 "const char * Application::getCurrentLanguageCode()": {
			"prefix": "const char * Application::getCurrentLanguageCode()",
			"body": [
				" char * Application:getCurrentLanguageCode()"
			],
			"description": "const char * Application::getCurrentLanguageCode()"
		},
		 "Size ImageView::getVirtualRendererSize() const": {
			"prefix": "Size ImageView::getVirtualRendererSize() const",
			"body": [
				"Size ImageView:getVirtualRendererSize() "
			],
			"description": "Size ImageView::getVirtualRendererSize() const"
		},
		 "void Camera::setDepth(int8_t depth)": {
			"prefix": "void Camera::setDepth(int8_t depth)",
			"body": [
				"Camera:setDepth(${1:int8_t depth})"
			],
			"description": "void Camera::setDepth(int8_t depth)"
		},
		 "bool Sprite::initWithSpriteFrame(SpriteFrame *spriteFrame)": {
			"prefix": "bool Sprite::initWithSpriteFrame(SpriteFrame *spriteFrame)",
			"body": [
				"Sprite:initWithSpriteFrame(${1:SpriteFrame *spriteFrame})"
			],
			"description": "bool Sprite::initWithSpriteFrame(SpriteFrame *spriteFrame)"
		},
		 "void RenderTexture::onSaveToFile(const std::string& filename, bool isRGBA)": {
			"prefix": "void RenderTexture::onSaveToFile(const std::string& filename, bool isRGBA)",
			"body": [
				"RenderTexture:onSaveToFile(${1:std:string& filename},${2:bool isRGBA})"
			],
			"description": "void RenderTexture::onSaveToFile(const std::string& filename, bool isRGBA)"
		},
		 "void GLProgramState::setGLProgram(GLProgram *glprogram)": {
			"prefix": "void GLProgramState::setGLProgram(GLProgram *glprogram)",
			"body": [
				"GLProgramState:setGLProgram(${1:GLProgram *glprogram})"
			],
			"description": "void GLProgramState::setGLProgram(GLProgram *glprogram)"
		},
		 "void Console::commandFileUtils(int fd, const std::string &args)": {
			"prefix": "void Console::commandFileUtils(int fd, const std::string &args)",
			"body": [
				"Console:commandFileUtils(${1:int fd},${2:std:string &args})"
			],
			"description": "void Console::commandFileUtils(int fd, const std::string &args)"
		},
		 "void PhysicsWorld::setDebugDrawMask(int mask)": {
			"prefix": "void PhysicsWorld::setDebugDrawMask(int mask)",
			"body": [
				"PhysicsWorld:setDebugDrawMask(${1:int mask})"
			],
			"description": "void PhysicsWorld::setDebugDrawMask(int mask)"
		},
		 "bool FontFreeType::initFreeType()": {
			"prefix": "bool FontFreeType::initFreeType()",
			"body": [
				"bool FontFreeType:initFreeType()"
			],
			"description": "bool FontFreeType::initFreeType()"
		},
		 "Terrain::ChunkIndices Terrain::lookForIndicesLOD(int neighborLod[4], int selfLod, bool * result)": {
			"prefix": "Terrain::ChunkIndices Terrain::lookForIndicesLOD(int neighborLod[4], int selfLod, bool * result)",
			"body": [
				"Terrain:lookForIndicesLOD(${1:int neighborLod[4]},${2:int selfLod},${3:bool * result})"
			],
			"description": "Terrain::ChunkIndices Terrain::lookForIndicesLOD(int neighborLod[4], int selfLod, bool * result)"
		},
		 "bool Widget::isAncestorsEnabled()": {
			"prefix": "bool Widget::isAncestorsEnabled()",
			"body": [
				"bool Widget:isAncestorsEnabled()"
			],
			"description": "bool Widget::isAncestorsEnabled()"
		},
		 "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage)": {
			"prefix": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage)",
			"body": [
				"* MenuItemImage:create(${1:std:string& normalImage},${2:std:string& selectedImage})"
			],
			"description": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage)"
		},
		 "int DictionaryHelper::getArrayCount_json(const rapidjson::Value& root, const char* key, int def)": {
			"prefix": "int DictionaryHelper::getArrayCount_json(const rapidjson::Value& root, const char* key, int def)",
			"body": [
				"DictionaryHelper:getArrayCount_json(${1:rapidjson:Value& root},${2:char* key},${3:int def})"
			],
			"description": "int DictionaryHelper::getArrayCount_json(const rapidjson::Value& root, const char* key, int def)"
		},
		 "void ActionObject::addActionNode(ActionNode* node)": {
			"prefix": "void ActionObject::addActionNode(ActionNode* node)",
			"body": [
				"ActionObject:addActionNode(${1:ActionNode* node})"
			],
			"description": "void ActionObject::addActionNode(ActionNode* node)"
		},
		 "void GLView::handleTouchesEnd(int num, intptr_t ids[], float xs[], float ys[])": {
			"prefix": "void GLView::handleTouchesEnd(int num, intptr_t ids[], float xs[], float ys[])",
			"body": [
				"GLView:handleTouchesEnd(${1:int num},${2:intptr_t ids[]},${3:float xs[]},${4:float ys[]})"
			],
			"description": "void GLView::handleTouchesEnd(int num, intptr_t ids[], float xs[], float ys[])"
		},
		 "void Widget::setBright(bool bright)": {
			"prefix": "void Widget::setBright(bool bright)",
			"body": [
				"Widget:setBright(${1:bool bright})"
			],
			"description": "void Widget::setBright(bool bright)"
		},
		 "void Physics3DConeTwistConstraint::setMaxMotorImpulseNormalized(float maxMotorImpulse)": {
			"prefix": "void Physics3DConeTwistConstraint::setMaxMotorImpulseNormalized(float maxMotorImpulse)",
			"body": [
				"Physics3DConeTwistConstraint:setMaxMotorImpulseNormalized(${1:float maxMotorImpulse})"
			],
			"description": "void Physics3DConeTwistConstraint::setMaxMotorImpulseNormalized(float maxMotorImpulse)"
		},
		 "bool Layer::onTouchBegan(Touch *touch, Event *event)": {
			"prefix": "bool Layer::onTouchBegan(Touch *touch, Event *event)",
			"body": [
				"Layer:onTouchBegan(${1:Touch *touch},${2:Event *event})"
			],
			"description": "bool Layer::onTouchBegan(Touch *touch, Event *event)"
		},
		 "void RenderState::StateBlock::setCullFaceSide(CullFaceSide side)": {
			"prefix": "void RenderState::StateBlock::setCullFaceSide(CullFaceSide side)",
			"body": [
				"RenderState:StateBlock:setCullFaceSide(${1:CullFaceSide side})"
			],
			"description": "void RenderState::StateBlock::setCullFaceSide(CullFaceSide side)"
		},
		 "void Vec4::subtract(const Vec4& v1, const Vec4& v2, Vec4* dst)": {
			"prefix": "void Vec4::subtract(const Vec4& v1, const Vec4& v2, Vec4* dst)",
			"body": [
				"Vec4:subtract(${1:Vec4& v1},${2:Vec4& v2},${3:Vec4* dst})"
			],
			"description": "void Vec4::subtract(const Vec4& v1, const Vec4& v2, Vec4* dst)"
		},
		 "void ScrollView::startRecordSlidAction()": {
			"prefix": "void ScrollView::startRecordSlidAction()",
			"body": [
				"void ScrollView:startRecordSlidAction()"
			],
			"description": "void ScrollView::startRecordSlidAction()"
		},
		 "void Widget::updateContentSizeWithTextureSize(const cocos2d::Size &size)": {
			"prefix": "void Widget::updateContentSizeWithTextureSize(const cocos2d::Size &size)",
			"body": [
				"Widget:updateContentSizeWithTextureSize(${1:cocos2d:Size &size})"
			],
			"description": "void Widget::updateContentSizeWithTextureSize(const cocos2d::Size &size)"
		},
		 "EaseQuadraticActionOut* EaseQuadraticActionOut::create(ActionInterval* action)": {
			"prefix": "EaseQuadraticActionOut* EaseQuadraticActionOut::create(ActionInterval* action)",
			"body": [
				"EaseQuadraticActionOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseQuadraticActionOut* EaseQuadraticActionOut::create(ActionInterval* action)"
		},
		 "ClippingRectangleNode* ClippingRectangleNode::create()": {
			"prefix": "ClippingRectangleNode* ClippingRectangleNode::create()",
			"body": [
				"ClippingRectangleNode* ClippingRectangleNode:create()"
			],
			"description": "ClippingRectangleNode* ClippingRectangleNode::create()"
		},
		 "float PageView::getCustomScrollThreshold()const": {
			"prefix": "float PageView::getCustomScrollThreshold()const",
			"body": [
				"float PageView:getCustomScrollThreshold()"
			],
			"description": "float PageView::getCustomScrollThreshold()const"
		},
		 "Quaternion::Quaternion(const Mat4& m)": {
			"prefix": "Quaternion::Quaternion(const Mat4& m)",
			"body": [
				"m})"
			],
			"description": "Quaternion::Quaternion(const Mat4& m)"
		},
		 "bool ComAudio::isEnabled() const": {
			"prefix": "bool ComAudio::isEnabled() const",
			"body": [
				"bool ComAudio:isEnabled() "
			],
			"description": "bool ComAudio::isEnabled() const"
		},
		 "void* ThreadHelper::createAutoreleasePool()": {
			"prefix": "void* ThreadHelper::createAutoreleasePool()",
			"body": [
				"void* ThreadHelper:createAutoreleasePool()"
			],
			"description": "void* ThreadHelper::createAutoreleasePool()"
		},
		 "Quaternion::Quaternion(const Quaternion& copy)": {
			"prefix": "Quaternion::Quaternion(const Quaternion& copy)",
			"body": [
				"copy})"
			],
			"description": "Quaternion::Quaternion(const Quaternion& copy)"
		},
		 "void Physics3DConeTwistConstraint::setDamping(float damping)": {
			"prefix": "void Physics3DConeTwistConstraint::setDamping(float damping)",
			"body": [
				"Physics3DConeTwistConstraint:setDamping(${1:float damping})"
			],
			"description": "void Physics3DConeTwistConstraint::setDamping(float damping)"
		},
		 "void MathUtil::multiplyMatrix(const float* m, float scalar, float* dst)": {
			"prefix": "void MathUtil::multiplyMatrix(const float* m, float scalar, float* dst)",
			"body": [
				"MathUtil:multiplyMatrix(${1:float* m},${2:float scalar},${3:float* dst})"
			],
			"description": "void MathUtil::multiplyMatrix(const float* m, float scalar, float* dst)"
		},
		 "void Skin::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void Skin::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"Skin:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void Skin::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "bool EventDispatcher::isEnabled() const": {
			"prefix": "bool EventDispatcher::isEnabled() const",
			"body": [
				"bool EventDispatcher:isEnabled() "
			],
			"description": "bool EventDispatcher::isEnabled() const"
		},
		 "void NavMeshDebugDraw::depthMask(bool state)": {
			"prefix": "void NavMeshDebugDraw::depthMask(bool state)",
			"body": [
				"NavMeshDebugDraw:depthMask(${1:bool state})"
			],
			"description": "void NavMeshDebugDraw::depthMask(bool state)"
		},
		 "CCBRotateYTo* CCBRotateYTo::clone() const": {
			"prefix": "CCBRotateYTo* CCBRotateYTo::clone() const",
			"body": [
				"CCBRotateYTo* CCBRotateYTo:clone() "
			],
			"description": "CCBRotateYTo* CCBRotateYTo::clone() const"
		},
		 "std::string TMXLayer::getDescription() const": {
			"prefix": "std::string TMXLayer::getDescription() const",
			"body": [
				"std:string TMXLayer:getDescription() "
			],
			"description": "std::string TMXLayer::getDescription() const"
		},
		 "void Frame::setEasingParams(const std::vector<float>& easingParams)": {
			"prefix": "void Frame::setEasingParams(const std::vector<float>& easingParams)",
			"body": [
				"Frame:setEasingParams(${1:std:vector<float>& easingParams})"
			],
			"description": "void Frame::setEasingParams(const std::vector<float>& easingParams)"
		},
		 "EventListenerPhysicsContactWithShapes* EventListenerPhysicsContactWithShapes::clone()": {
			"prefix": "EventListenerPhysicsContactWithShapes* EventListenerPhysicsContactWithShapes::clone()",
			"body": [
				"EventListenerPhysicsContactWithShapes* EventListenerPhysicsContactWithShapes:clone()"
			],
			"description": "EventListenerPhysicsContactWithShapes* EventListenerPhysicsContactWithShapes::clone()"
		},
		 "bool UICCTextField::onTextFieldAttachWithIME(TextFieldTTF *pSender)": {
			"prefix": "bool UICCTextField::onTextFieldAttachWithIME(TextFieldTTF *pSender)",
			"body": [
				"UICCTextField:onTextFieldAttachWithIME(${1:TextFieldTTF *pSender})"
			],
			"description": "bool UICCTextField::onTextFieldAttachWithIME(TextFieldTTF *pSender)"
		},
		 "void GLProgramState::applyGLProgram(const Mat4& modelView)": {
			"prefix": "void GLProgramState::applyGLProgram(const Mat4& modelView)",
			"body": [
				"GLProgramState:applyGLProgram(${1:Mat4& modelView})"
			],
			"description": "void GLProgramState::applyGLProgram(const Mat4& modelView)"
		},
		 "StopGrid* StopGrid::clone() const": {
			"prefix": "StopGrid* StopGrid::clone() const",
			"body": [
				"StopGrid* StopGrid:clone() "
			],
			"description": "StopGrid* StopGrid::clone() const"
		},
		 "int * FontFreeType::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const": {
			"prefix": "int * FontFreeType::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const",
			"body": [
				"* FontFreeType:getHorizontalKerningForTextUTF16(${1:std:u16string& text},${2:int &outNumLetters})"
			],
			"description": "int * FontFreeType::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const"
		},
		 "void LayoutParameter::copyProperties(LayoutParameter *model)": {
			"prefix": "void LayoutParameter::copyProperties(LayoutParameter *model)",
			"body": [
				"LayoutParameter:copyProperties(${1:LayoutParameter *model})"
			],
			"description": "void LayoutParameter::copyProperties(LayoutParameter *model)"
		},
		 "void GLProgram::parseVertexAttribs()": {
			"prefix": "void GLProgram::parseVertexAttribs()",
			"body": [
				"void GLProgram:parseVertexAttribs()"
			],
			"description": "void GLProgram::parseVertexAttribs()"
		},
		 "void Quaternion::multiply(const Quaternion& q1, const Quaternion& q2, Quaternion* dst)": {
			"prefix": "void Quaternion::multiply(const Quaternion& q1, const Quaternion& q2, Quaternion* dst)",
			"body": [
				"Quaternion:multiply(${1:Quaternion& q1},${2:Quaternion& q2},${3:Quaternion* dst})"
			],
			"description": "void Quaternion::multiply(const Quaternion& q1, const Quaternion& q2, Quaternion* dst)"
		},
		 "void NavMeshAgent::setSeparationWeight(float weight)": {
			"prefix": "void NavMeshAgent::setSeparationWeight(float weight)",
			"body": [
				"NavMeshAgent:setSeparationWeight(${1:float weight})"
			],
			"description": "void NavMeshAgent::setSeparationWeight(float weight)"
		},
		 "FadeOutTRTiles* FadeOutTRTiles::clone() const": {
			"prefix": "FadeOutTRTiles* FadeOutTRTiles::clone() const",
			"body": [
				"FadeOutTRTiles* FadeOutTRTiles:clone() "
			],
			"description": "FadeOutTRTiles* FadeOutTRTiles::clone() const"
		},
		 "unsigned int ComAudio::playEffect(const char* pszFilePath)": {
			"prefix": "unsigned int ComAudio::playEffect(const char* pszFilePath)",
			"body": [
				"int ComAudio:playEffect(${1:char* pszFilePath})"
			],
			"description": "unsigned int ComAudio::playEffect(const char* pszFilePath)"
		},
		 "Vec2 PhysicsJointGroove::getAnchr2() const": {
			"prefix": "Vec2 PhysicsJointGroove::getAnchr2() const",
			"body": [
				"Vec2 PhysicsJointGroove:getAnchr2() "
			],
			"description": "Vec2 PhysicsJointGroove::getAnchr2() const"
		},
		 "void Label::updateShaderProgram()": {
			"prefix": "void Label::updateShaderProgram()",
			"body": [
				"void Label:updateShaderProgram()"
			],
			"description": "void Label::updateShaderProgram()"
		},
		 "DecorativeDisplay *DisplayManager::getDecorativeDisplayByIndex( int index) const": {
			"prefix": "DecorativeDisplay *DisplayManager::getDecorativeDisplayByIndex( int index) const",
			"body": [
				"*DisplayManager:getDecorativeDisplayByIndex(${1:int index})"
			],
			"description": "DecorativeDisplay *DisplayManager::getDecorativeDisplayByIndex( int index) const"
		},
		 "void VertexAttribBinding::unbind()": {
			"prefix": "void VertexAttribBinding::unbind()",
			"body": [
				"void VertexAttribBinding:unbind()"
			],
			"description": "void VertexAttribBinding::unbind()"
		},
		 "int ZipUtils::inflateGZipFile(const char *path, unsigned char **out)": {
			"prefix": "int ZipUtils::inflateGZipFile(const char *path, unsigned char **out)",
			"body": [
				"ZipUtils:inflateGZipFile(${1:char *path},${2:unsigned char **out})"
			],
			"description": "int ZipUtils::inflateGZipFile(const char *path, unsigned char **out)"
		},
		 "void Node::setEventDispatcher(EventDispatcher* dispatcher)": {
			"prefix": "void Node::setEventDispatcher(EventDispatcher* dispatcher)",
			"body": [
				"Node:setEventDispatcher(${1:EventDispatcher* dispatcher})"
			],
			"description": "void Node::setEventDispatcher(EventDispatcher* dispatcher)"
		},
		 "Vec2 PhysicsShapeEdgeChain::getCenter()": {
			"prefix": "Vec2 PhysicsShapeEdgeChain::getCenter()",
			"body": [
				"Vec2 PhysicsShapeEdgeChain:getCenter()"
			],
			"description": "Vec2 PhysicsShapeEdgeChain::getCenter()"
		},
		 "Layout* ScrollView::getInnerContainer()const": {
			"prefix": "Layout* ScrollView::getInnerContainer()const",
			"body": [
				"Layout* ScrollView:getInnerContainer()"
			],
			"description": "Layout* ScrollView::getInnerContainer()const"
		},
		 "BatchNode *BatchNode::create()": {
			"prefix": "BatchNode *BatchNode::create()",
			"body": [
				"BatchNode *BatchNode:create()"
			],
			"description": "BatchNode *BatchNode::create()"
		},
		 "void Node::unschedule(SEL_SCHEDULE selector)": {
			"prefix": "void Node::unschedule(SEL_SCHEDULE selector)",
			"body": [
				"Node:unschedule(${1:SEL_SCHEDULE selector})"
			],
			"description": "void Node::unschedule(SEL_SCHEDULE selector)"
		},
		 "void TextFieldTTF::setString(const std::string &text)": {
			"prefix": "void TextFieldTTF::setString(const std::string &text)",
			"body": [
				"TextFieldTTF:setString(${1:std:string &text})"
			],
			"description": "void TextFieldTTF::setString(const std::string &text)"
		},
		 "void MathUtil::subtractMatrix(const float* m1, const float* m2, float* dst)": {
			"prefix": "void MathUtil::subtractMatrix(const float* m1, const float* m2, float* dst)",
			"body": [
				"MathUtil:subtractMatrix(${1:float* m1},${2:float* m2},${3:float* dst})"
			],
			"description": "void MathUtil::subtractMatrix(const float* m1, const float* m2, float* dst)"
		},
		 "bool Physics3DCollider::isTrigger() const": {
			"prefix": "bool Physics3DCollider::isTrigger() const",
			"body": [
				"bool Physics3DCollider:isTrigger() "
			],
			"description": "bool Physics3DCollider::isTrigger() const"
		},
		 "void RadioButtonGroup::addEventListener(const ccRadioButtonGroupCallback& callback)": {
			"prefix": "void RadioButtonGroup::addEventListener(const ccRadioButtonGroupCallback& callback)",
			"body": [
				"RadioButtonGroup:addEventListener(${1:ccRadioButtonGroupCallback& callback})"
			],
			"description": "void RadioButtonGroup::addEventListener(const ccRadioButtonGroupCallback& callback)"
		},
		 "void ArmatureAnimation::playWithIndex(int animationIndex, int durationTo, int loop)": {
			"prefix": "void ArmatureAnimation::playWithIndex(int animationIndex, int durationTo, int loop)",
			"body": [
				"ArmatureAnimation:playWithIndex(${1:int animationIndex},${2:int durationTo},${3:int loop})"
			],
			"description": "void ArmatureAnimation::playWithIndex(int animationIndex, int durationTo, int loop)"
		},
		 "void ScrollViewLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)": {
			"prefix": "void ScrollViewLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)",
			"body": [
				"ScrollViewLoader:onHandlePropTypeFloat(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:float pFloat},${5:CCBReader * ccbReader})"
			],
			"description": "void ScrollViewLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)"
		},
		 "bool ScaleTo::initWithDuration(float duration, float sx, float sy, float sz)": {
			"prefix": "bool ScaleTo::initWithDuration(float duration, float sx, float sy, float sz)",
			"body": [
				"ScaleTo:initWithDuration(${1:float duration},${2:float sx},${3:float sy},${4:float sz})"
			],
			"description": "bool ScaleTo::initWithDuration(float duration, float sx, float sy, float sz)"
		},
		 "CardinalSplineBy* CardinalSplineBy::clone() const": {
			"prefix": "CardinalSplineBy* CardinalSplineBy::clone() const",
			"body": [
				"CardinalSplineBy* CardinalSplineBy:clone() "
			],
			"description": "CardinalSplineBy* CardinalSplineBy::clone() const"
		},
		 "bool FlipX3D::initWithDuration(float duration)": {
			"prefix": "bool FlipX3D::initWithDuration(float duration)",
			"body": [
				"FlipX3D:initWithDuration(${1:float duration})"
			],
			"description": "bool FlipX3D::initWithDuration(float duration)"
		},
		 "CallFuncN * CallFuncN::clone() const": {
			"prefix": "CallFuncN * CallFuncN::clone() const",
			"body": [
				"CallFuncN * CallFuncN:clone() "
			],
			"description": "CallFuncN * CallFuncN::clone() const"
		},
		 "void GLProgramState::setUniformFloat(GLint uniformLocation, float value)": {
			"prefix": "void GLProgramState::setUniformFloat(GLint uniformLocation, float value)",
			"body": [
				"GLProgramState:setUniformFloat(${1:GLint uniformLocation},${2:float value})"
			],
			"description": "void GLProgramState::setUniformFloat(GLint uniformLocation, float value)"
		},
		 "void Quaternion::conjugate()": {
			"prefix": "void Quaternion::conjugate()",
			"body": [
				"void Quaternion:conjugate()"
			],
			"description": "void Quaternion::conjugate()"
		},
		 "EaseIn* EaseIn::clone() const": {
			"prefix": "EaseIn* EaseIn::clone() const",
			"body": [
				"EaseIn* EaseIn:clone() "
			],
			"description": "EaseIn* EaseIn::clone() const"
		},
		 "std::string FlatBuffersSerialize::getWidgetReaderClassName(Widget* widget)": {
			"prefix": "std::string FlatBuffersSerialize::getWidgetReaderClassName(Widget* widget)",
			"body": [
				"FlatBuffersSerialize:getWidgetReaderClassName(${1:Widget* widget})"
			],
			"description": "std::string FlatBuffersSerialize::getWidgetReaderClassName(Widget* widget)"
		},
		 "Frame* ActionTimelineCache::loadZOrderFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadZOrderFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadZOrderFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadZOrderFrame(const rapidjson::Value& json)"
		},
		 "bool TextFieldTTF::isSecureTextEntry()": {
			"prefix": "bool TextFieldTTF::isSecureTextEntry()",
			"body": [
				"bool TextFieldTTF:isSecureTextEntry()"
			],
			"description": "bool TextFieldTTF::isSecureTextEntry()"
		},
		 "void ComRender::onEnter()": {
			"prefix": "void ComRender::onEnter()",
			"body": [
				"void ComRender:onEnter()"
			],
			"description": "void ComRender::onEnter()"
		},
		 "void Bone::addDisplay(DisplayData *displayData, int index)": {
			"prefix": "void Bone::addDisplay(DisplayData *displayData, int index)",
			"body": [
				"Bone:addDisplay(${1:DisplayData *displayData},${2:int index})"
			],
			"description": "void Bone::addDisplay(DisplayData *displayData, int index)"
		},
		 "void ScrollView::setScrollBarPositionFromCornerForHorizontal(const Vec2& positionFromCorner)": {
			"prefix": "void ScrollView::setScrollBarPositionFromCornerForHorizontal(const Vec2& positionFromCorner)",
			"body": [
				"ScrollView:setScrollBarPositionFromCornerForHorizontal(${1:Vec2& positionFromCorner})"
			],
			"description": "void ScrollView::setScrollBarPositionFromCornerForHorizontal(const Vec2& positionFromCorner)"
		},
		 "void GLProgram::use()": {
			"prefix": "void GLProgram::use()",
			"body": [
				"void GLProgram:use()"
			],
			"description": "void GLProgram::use()"
		},
		 "void Texture2D::setMaxS(GLfloat maxS)": {
			"prefix": "void Texture2D::setMaxS(GLfloat maxS)",
			"body": [
				"Texture2D:setMaxS(${1:GLfloat maxS})"
			],
			"description": "void Texture2D::setMaxS(GLfloat maxS)"
		},
		 "void GLProgramStateCache::destroyInstance()": {
			"prefix": "void GLProgramStateCache::destroyInstance()",
			"body": [
				"void GLProgramStateCache:destroyInstance()"
			],
			"description": "void GLProgramStateCache::destroyInstance()"
		},
		 "ssize_t GLProgramState::getVertexAttribCount() const": {
			"prefix": "ssize_t GLProgramState::getVertexAttribCount() const",
			"body": [
				"ssize_t GLProgramState:getVertexAttribCount() "
			],
			"description": "ssize_t GLProgramState::getVertexAttribCount() const"
		},
		 "void Physics3DSliderConstraint::setRestitutionOrthoAng(float restitutionOrthoAng)": {
			"prefix": "void Physics3DSliderConstraint::setRestitutionOrthoAng(float restitutionOrthoAng)",
			"body": [
				"Physics3DSliderConstraint:setRestitutionOrthoAng(${1:float restitutionOrthoAng})"
			],
			"description": "void Physics3DSliderConstraint::setRestitutionOrthoAng(float restitutionOrthoAng)"
		},
		 "bool EventListenerPhysicsContactWithBodies::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)": {
			"prefix": "bool EventListenerPhysicsContactWithBodies::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)",
			"body": [
				"EventListenerPhysicsContactWithBodies:hitTest(${1:PhysicsShape* shapeA},${2:PhysicsShape* shapeB})"
			],
			"description": "bool EventListenerPhysicsContactWithBodies::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)"
		},
		 "const Color3B& Layout::getBackGroundEndColor()const": {
			"prefix": "const Color3B& Layout::getBackGroundEndColor()const",
			"body": [
				" Color3B& Layout:getBackGroundEndColor()"
			],
			"description": "const Color3B& Layout::getBackGroundEndColor()const"
		},
		 "__Set::__Set(const __Set &other)": {
			"prefix": "__Set::__Set(const __Set &other)",
			"body": [
				"&other})"
			],
			"description": "__Set::__Set(const __Set &other)"
		},
		 "bool ActionFloat::initWithDuration(float duration, float from, float to, ActionFloatCallback callback)": {
			"prefix": "bool ActionFloat::initWithDuration(float duration, float from, float to, ActionFloatCallback callback)",
			"body": [
				"ActionFloat:initWithDuration(${1:float duration},${2:float from},${3:float to},${4:ActionFloatCallback callback})"
			],
			"description": "bool ActionFloat::initWithDuration(float duration, float from, float to, ActionFloatCallback callback)"
		},
		 "bool SpriteFrameCache::isSpriteFramesWithFileLoaded(const std::string& plist) const": {
			"prefix": "bool SpriteFrameCache::isSpriteFramesWithFileLoaded(const std::string& plist) const",
			"body": [
				"SpriteFrameCache:isSpriteFramesWithFileLoaded(${1:std:string& plist})"
			],
			"description": "bool SpriteFrameCache::isSpriteFramesWithFileLoaded(const std::string& plist) const"
		},
		 "Vec4::Vec4(const Vec4& copy)": {
			"prefix": "Vec4::Vec4(const Vec4& copy)",
			"body": [
				"copy})"
			],
			"description": "Vec4::Vec4(const Vec4& copy)"
		},
		 "void NavMeshAgent::syncToAgent()": {
			"prefix": "void NavMeshAgent::syncToAgent()",
			"body": [
				"void NavMeshAgent:syncToAgent()"
			],
			"description": "void NavMeshAgent::syncToAgent()"
		},
		 "BoneNodeReader* BoneNodeReader::getInstance()": {
			"prefix": "BoneNodeReader* BoneNodeReader::getInstance()",
			"body": [
				"BoneNodeReader* BoneNodeReader:getInstance()"
			],
			"description": "BoneNodeReader* BoneNodeReader::getInstance()"
		},
		 "ActionInterval* ActionMoveFrame::getAction(float fDuration)": {
			"prefix": "ActionInterval* ActionMoveFrame::getAction(float fDuration)",
			"body": [
				"ActionMoveFrame:getAction(${1:float fDuration})"
			],
			"description": "ActionInterval* ActionMoveFrame::getAction(float fDuration)"
		},
		 "void PhysicsBody::removeAllShapes(bool reduceMassAndMoment/* = true*/)": {
			"prefix": "void PhysicsBody::removeAllShapes(bool reduceMassAndMoment/* = true*/)",
			"body": [
				"PhysicsBody:removeAllShapes(${1:bool reduceMassAndMoment/* = true*/})"
			],
			"description": "void PhysicsBody::removeAllShapes(bool reduceMassAndMoment/* = true*/)"
		},
		 "void Node::setLocalZOrder(int z)": {
			"prefix": "void Node::setLocalZOrder(int z)",
			"body": [
				"Node:setLocalZOrder(${1:int z})"
			],
			"description": "void Node::setLocalZOrder(int z)"
		},
		 "bool MenuItemToggle::initWithTarget(Ref* target, SEL_MenuHandler selector, MenuItem* item, va_list args)": {
			"prefix": "bool MenuItemToggle::initWithTarget(Ref* target, SEL_MenuHandler selector, MenuItem* item, va_list args)",
			"body": [
				"MenuItemToggle:initWithTarget(${1:Ref* target},${2:SEL_MenuHandler selector},${3:MenuItem* item},${4:va_list args})"
			],
			"description": "bool MenuItemToggle::initWithTarget(Ref* target, SEL_MenuHandler selector, MenuItem* item, va_list args)"
		},
		 "void ActionTimeline::startWithTarget(Node *target)": {
			"prefix": "void ActionTimeline::startWithTarget(Node *target)",
			"body": [
				"ActionTimeline:startWithTarget(${1:Node *target})"
			],
			"description": "void ActionTimeline::startWithTarget(Node *target)"
		},
		 "bool AudioEngineImpl::stop(int audioID)": {
			"prefix": "bool AudioEngineImpl::stop(int audioID)",
			"body": [
				"AudioEngineImpl:stop(${1:int audioID})"
			],
			"description": "bool AudioEngineImpl::stop(int audioID)"
		},
		 "void Label::setLineHeight(float height)": {
			"prefix": "void Label::setLineHeight(float height)",
			"body": [
				"Label:setLineHeight(${1:float height})"
			],
			"description": "void Label::setLineHeight(float height)"
		},
		 "PhysicsJointMotor* PhysicsJointMotor::construct(PhysicsBody* a, PhysicsBody* b, float rate)": {
			"prefix": "PhysicsJointMotor* PhysicsJointMotor::construct(PhysicsBody* a, PhysicsBody* b, float rate)",
			"body": [
				"PhysicsJointMotor:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:float rate})"
			],
			"description": "PhysicsJointMotor* PhysicsJointMotor::construct(PhysicsBody* a, PhysicsBody* b, float rate)"
		},
		 "void TurnOffTiles::turnOnTile(const Vec2& pos)": {
			"prefix": "void TurnOffTiles::turnOnTile(const Vec2& pos)",
			"body": [
				"TurnOffTiles:turnOnTile(${1:Vec2& pos})"
			],
			"description": "void TurnOffTiles::turnOnTile(const Vec2& pos)"
		},
		 "void Terrain::setIsEnableFrustumCull(bool bool_value)": {
			"prefix": "void Terrain::setIsEnableFrustumCull(bool bool_value)",
			"body": [
				"Terrain:setIsEnableFrustumCull(${1:bool bool_value})"
			],
			"description": "void Terrain::setIsEnableFrustumCull(bool bool_value)"
		},
		 "void Text::setTextHorizontalAlignment(TextHAlignment alignment)": {
			"prefix": "void Text::setTextHorizontalAlignment(TextHAlignment alignment)",
			"body": [
				"Text:setTextHorizontalAlignment(${1:TextHAlignment alignment})"
			],
			"description": "void Text::setTextHorizontalAlignment(TextHAlignment alignment)"
		},
		 "void ParticleSystem::setRadialAccel(float t)": {
			"prefix": "void ParticleSystem::setRadialAccel(float t)",
			"body": [
				"ParticleSystem:setRadialAccel(${1:float t})"
			],
			"description": "void ParticleSystem::setRadialAccel(float t)"
		},
		 "Widget* WidgetPropertiesReader0300::widgetFromBinary(CocoLoader* cocoLoader,  stExpCocoNode*	cocoNode)": {
			"prefix": "Widget* WidgetPropertiesReader0300::widgetFromBinary(CocoLoader* cocoLoader,  stExpCocoNode*	cocoNode)",
			"body": [
				"WidgetPropertiesReader0300:widgetFromBinary(${1:CocoLoader* cocoLoader},${2:stExpCocoNode*	cocoNode})"
			],
			"description": "Widget* WidgetPropertiesReader0300::widgetFromBinary(CocoLoader* cocoLoader,  stExpCocoNode*	cocoNode)"
		},
		 "std::string EditBox::getDescription() const": {
			"prefix": "std::string EditBox::getDescription() const",
			"body": [
				"std:string EditBox:getDescription() "
			],
			"description": "std::string EditBox::getDescription() const"
		},
		 "void Physics3DRigidBody::applyDamping( float timeStep )": {
			"prefix": "void Physics3DRigidBody::applyDamping( float timeStep )",
			"body": [
				"Physics3DRigidBody:applyDamping(${1:float timeStep})"
			],
			"description": "void Physics3DRigidBody::applyDamping( float timeStep )"
		},
		 "void ClippingNode::setInverted(bool inverted)": {
			"prefix": "void ClippingNode::setInverted(bool inverted)",
			"body": [
				"ClippingNode:setInverted(${1:bool inverted})"
			],
			"description": "void ClippingNode::setInverted(bool inverted)"
		},
		 "float Physics3DCollider::getRollingFriction() const": {
			"prefix": "float Physics3DCollider::getRollingFriction() const",
			"body": [
				"float Physics3DCollider:getRollingFriction() "
			],
			"description": "float Physics3DCollider::getRollingFriction() const"
		},
		 "void Sprite::setScale(float fScale)": {
			"prefix": "void Sprite::setScale(float fScale)",
			"body": [
				"Sprite:setScale(${1:float fScale})"
			],
			"description": "void Sprite::setScale(float fScale)"
		},
		 "bool Physics3DWorld::init(Physics3DWorldDes* info)": {
			"prefix": "bool Physics3DWorld::init(Physics3DWorldDes* info)",
			"body": [
				"Physics3DWorld:init(${1:Physics3DWorldDes* info})"
			],
			"description": "bool Physics3DWorld::init(Physics3DWorldDes* info)"
		},
		 "std::istream &inStream, MaterialReader &readMatFn)": {
			"prefix": "std::istream &inStream, MaterialReader &readMatFn)",
			"body": [
				"std:istream &inStream, MaterialReader &readMatFn)"
			],
			"description": "std::istream &inStream, MaterialReader &readMatFn)"
		},
		 "void PhysicsBody::applyImpulse(const Vect& impulse, const Vec2& offset)": {
			"prefix": "void PhysicsBody::applyImpulse(const Vect& impulse, const Vec2& offset)",
			"body": [
				"PhysicsBody:applyImpulse(${1:Vect& impulse},${2:Vec2& offset})"
			],
			"description": "void PhysicsBody::applyImpulse(const Vect& impulse, const Vec2& offset)"
		},
		 "void WebSocket::onSubThreadStarted()": {
			"prefix": "void WebSocket::onSubThreadStarted()",
			"body": [
				"void WebSocket:onSubThreadStarted()"
			],
			"description": "void WebSocket::onSubThreadStarted()"
		},
		 "void Terrain::calculateNormal()": {
			"prefix": "void Terrain::calculateNormal()",
			"body": [
				"void Terrain:calculateNormal()"
			],
			"description": "void Terrain::calculateNormal()"
		},
		 "void Node::disableCascadeColor()": {
			"prefix": "void Node::disableCascadeColor()",
			"body": [
				"void Node:disableCascadeColor()"
			],
			"description": "void Node::disableCascadeColor()"
		},
		 "void __NotificationCenter::purgeNotificationCenter(void)": {
			"prefix": "void __NotificationCenter::purgeNotificationCenter(void)",
			"body": [
				"__NotificationCenter:purgeNotificationCenter(${1:void})"
			],
			"description": "void __NotificationCenter::purgeNotificationCenter(void)"
		},
		 "void AbstractCheckButton::onPressStateChangedToPressed()": {
			"prefix": "void AbstractCheckButton::onPressStateChangedToPressed()",
			"body": [
				"void AbstractCheckButton:onPressStateChangedToPressed()"
			],
			"description": "void AbstractCheckButton::onPressStateChangedToPressed()"
		},
		 "MoveBy* MoveBy::reverse() const": {
			"prefix": "MoveBy* MoveBy::reverse() const",
			"body": [
				"MoveBy* MoveBy:reverse() "
			],
			"description": "MoveBy* MoveBy::reverse() const"
		},
		 "Material* Material::createWithProperties(Properties* materialProperties)": {
			"prefix": "Material* Material::createWithProperties(Properties* materialProperties)",
			"body": [
				"Material:createWithProperties(${1:Properties* materialProperties})"
			],
			"description": "Material* Material::createWithProperties(Properties* materialProperties)"
		},
		 "void AudioCache::invokingLoadCallbacks()": {
			"prefix": "void AudioCache::invokingLoadCallbacks()",
			"body": [
				"void AudioCache:invokingLoadCallbacks()"
			],
			"description": "void AudioCache::invokingLoadCallbacks()"
		},
		 "void SpriteFrameCache::addSpriteFrame(SpriteFrame* frame, const std::string& frameName)": {
			"prefix": "void SpriteFrameCache::addSpriteFrame(SpriteFrame* frame, const std::string& frameName)",
			"body": [
				"SpriteFrameCache:addSpriteFrame(${1:SpriteFrame* frame},${2:std:string& frameName})"
			],
			"description": "void SpriteFrameCache::addSpriteFrame(SpriteFrame* frame, const std::string& frameName)"
		},
		 "void ComAudio::onAdd()": {
			"prefix": "void ComAudio::onAdd()",
			"body": [
				"void ComAudio:onAdd()"
			],
			"description": "void ComAudio::onAdd()"
		},
		 "void ComAudio::setEffectsVolume(float volume)": {
			"prefix": "void ComAudio::setEffectsVolume(float volume)",
			"body": [
				"ComAudio:setEffectsVolume(${1:float volume})"
			],
			"description": "void ComAudio::setEffectsVolume(float volume)"
		},
		 "void EditBoxImplAndroid::setNativeInputFlag(EditBox::InputFlag inputFlag)": {
			"prefix": "void EditBoxImplAndroid::setNativeInputFlag(EditBox::InputFlag inputFlag)",
			"body": [
				"EditBoxImplAndroid:setNativeInputFlag(${1:EditBox:InputFlag inputFlag})"
			],
			"description": "void EditBoxImplAndroid::setNativeInputFlag(EditBox::InputFlag inputFlag)"
		},
		 "int Downloader::downloadProgressFunc(void *userdata, double totalToDownload, double nowDownloaded)": {
			"prefix": "int Downloader::downloadProgressFunc(void *userdata, double totalToDownload, double nowDownloaded)",
			"body": [
				"Downloader:downloadProgressFunc(${1:void *userdata},${2:double totalToDownload},${3:double nowDownloaded})"
			],
			"description": "int Downloader::downloadProgressFunc(void *userdata, double totalToDownload, double nowDownloaded)"
		},
		 "const char* Properties::getVariable(const char* name, const char* defaultValue) const": {
			"prefix": "const char* Properties::getVariable(const char* name, const char* defaultValue) const",
			"body": [
				"char* Properties:getVariable(${1:char* name},${2:char* defaultValue})"
			],
			"description": "const char* Properties::getVariable(const char* name, const char* defaultValue) const"
		},
		 "FontCharMap* FontCharMap::create(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "FontCharMap* FontCharMap::create(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"FontCharMap:create(${1:std:string& charMapFile},${2:int itemWidth},${3:int itemHeight},${4:int startCharMap})"
			],
			"description": "FontCharMap* FontCharMap::create(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "float ScrollView::getScrollBarAutoHideTime() const": {
			"prefix": "float ScrollView::getScrollBarAutoHideTime() const",
			"body": [
				"float ScrollView:getScrollBarAutoHideTime() "
			],
			"description": "float ScrollView::getScrollBarAutoHideTime() const"
		},
		 "Vec2 Layout::getWorldCenterPoint(Widget* widget)const": {
			"prefix": "Vec2 Layout::getWorldCenterPoint(Widget* widget)const",
			"body": [
				"Layout:getWorldCenterPoint(${1:Widget* widget})"
			],
			"description": "Vec2 Layout::getWorldCenterPoint(Widget* widget)const"
		},
		 "bool ArmatureData::init()": {
			"prefix": "bool ArmatureData::init()",
			"body": [
				"bool ArmatureData:init()"
			],
			"description": "bool ArmatureData::init()"
		},
		 "Twirl *Twirl::clone() const": {
			"prefix": "Twirl *Twirl::clone() const",
			"body": [
				"Twirl *Twirl:clone() "
			],
			"description": "Twirl *Twirl::clone() const"
		},
		 "void PageView::addWidgetToPage(Widget *widget, ssize_t pageIdx, bool forceCreate)": {
			"prefix": "void PageView::addWidgetToPage(Widget *widget, ssize_t pageIdx, bool forceCreate)",
			"body": [
				"PageView:addWidgetToPage(${1:Widget *widget},${2:ssize_t pageIdx},${3:bool forceCreate})"
			],
			"description": "void PageView::addWidgetToPage(Widget *widget, ssize_t pageIdx, bool forceCreate)"
		},
		 "bool Speed::initWithAction(ActionInterval *action, float speed)": {
			"prefix": "bool Speed::initWithAction(ActionInterval *action, float speed)",
			"body": [
				"Speed:initWithAction(${1:ActionInterval *action},${2:float speed})"
			],
			"description": "bool Speed::initWithAction(ActionInterval *action, float speed)"
		},
		 "void MotionStreak::update(float delta)": {
			"prefix": "void MotionStreak::update(float delta)",
			"body": [
				"MotionStreak:update(${1:float delta})"
			],
			"description": "void MotionStreak::update(float delta)"
		},
		 "bool PhysicsJointMotor::createConstraints()": {
			"prefix": "bool PhysicsJointMotor::createConstraints()",
			"body": [
				"bool PhysicsJointMotor:createConstraints()"
			],
			"description": "bool PhysicsJointMotor::createConstraints()"
		},
		 "void RenderTexture::begin()": {
			"prefix": "void RenderTexture::begin()",
			"body": [
				"void RenderTexture:begin()"
			],
			"description": "void RenderTexture::begin()"
		},
		 "void Node::setRotationSkewX(float rotationX)": {
			"prefix": "void Node::setRotationSkewX(float rotationX)",
			"body": [
				"Node:setRotationSkewX(${1:float rotationX})"
			],
			"description": "void Node::setRotationSkewX(float rotationX)"
		},
		 "void ProtectedNode::onExit()": {
			"prefix": "void ProtectedNode::onExit()",
			"body": [
				"void ProtectedNode:onExit()"
			],
			"description": "void ProtectedNode::onExit()"
		},
		 "void ParticleSystem::setScale(float s)": {
			"prefix": "void ParticleSystem::setScale(float s)",
			"body": [
				"ParticleSystem:setScale(${1:float s})"
			],
			"description": "void ParticleSystem::setScale(float s)"
		},
		 "Ref*  CCBReader::getOwner()": {
			"prefix": "Ref*  CCBReader::getOwner()",
			"body": [
				"Ref*  CCBReader:getOwner()"
			],
			"description": "Ref*  CCBReader::getOwner()"
		},
		 "void WidgetPropertiesReader0250::setPropsForButtonFromJsonDictionary(Widget*widget,const rapidjson::Value& options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForButtonFromJsonDictionary(Widget*widget,const rapidjson::Value& options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForButtonFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value& options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForButtonFromJsonDictionary(Widget*widget,const rapidjson::Value& options)"
		},
		 "Primitive* Primitive::create(VertexData* verts, IndexBuffer* indices, int type)": {
			"prefix": "Primitive* Primitive::create(VertexData* verts, IndexBuffer* indices, int type)",
			"body": [
				"Primitive:create(${1:VertexData* verts},${2:IndexBuffer* indices},${3:int type})"
			],
			"description": "Primitive* Primitive::create(VertexData* verts, IndexBuffer* indices, int type)"
		},
		 "const ValueVector& Value::asValueVector() const": {
			"prefix": "const ValueVector& Value::asValueVector() const",
			"body": [
				" ValueVector& Value:asValueVector() "
			],
			"description": "const ValueVector& Value::asValueVector() const"
		},
		 "void SpriteLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)": {
			"prefix": "void SpriteLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)",
			"body": [
				"SpriteLoader:onHandlePropTypeBlendFunc(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:BlendFunc pBlendFunc},${5:CCBReader * ccbReader})"
			],
			"description": "void SpriteLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)"
		},
		 "static RenderState::Blend parseBlend(const std::string& value)": {
			"prefix": "static RenderState::Blend parseBlend(const std::string& value)",
			"body": [
				"RenderState:Blend parseBlend(${1:std:string& value})"
			],
			"description": "static RenderState::Blend parseBlend(const std::string& value)"
		},
		 "Widget* Widget::createCloneInstance()": {
			"prefix": "Widget* Widget::createCloneInstance()",
			"body": [
				"Widget* Widget:createCloneInstance()"
			],
			"description": "Widget* Widget::createCloneInstance()"
		},
		 "void PhysicsBody::setPosition(const Vec2& position)": {
			"prefix": "void PhysicsBody::setPosition(const Vec2& position)",
			"body": [
				"PhysicsBody:setPosition(${1:Vec2& position})"
			],
			"description": "void PhysicsBody::setPosition(const Vec2& position)"
		},
		 "void Node::insertChild(Node* child, int z)": {
			"prefix": "void Node::insertChild(Node* child, int z)",
			"body": [
				"Node:insertChild(${1:Node* child},${2:int z})"
			],
			"description": "void Node::insertChild(Node* child, int z)"
		},
		 "void NodeLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char* pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char* pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeBlendFunc(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:BlendFunc pBlendFunc},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char* pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)"
		},
		 "void ParticleSystem::setStartRadius(float startRadius)": {
			"prefix": "void ParticleSystem::setStartRadius(float startRadius)",
			"body": [
				"ParticleSystem:setStartRadius(${1:float startRadius})"
			],
			"description": "void ParticleSystem::setStartRadius(float startRadius)"
		},
		 "void Button::setupPressedTexture()": {
			"prefix": "void Button::setupPressedTexture()",
			"body": [
				"void Button:setupPressedTexture()"
			],
			"description": "void Button::setupPressedTexture()"
		},
		 "void Scheduler::unscheduleAll(void)": {
			"prefix": "void Scheduler::unscheduleAll(void)",
			"body": [
				"Scheduler:unscheduleAll(${1:void})"
			],
			"description": "void Scheduler::unscheduleAll(void)"
		},
		 "void PageView::interceptTouchEvent(TouchEventType event, Widget *sender, Touch *touch)": {
			"prefix": "void PageView::interceptTouchEvent(TouchEventType event, Widget *sender, Touch *touch)",
			"body": [
				"PageView:interceptTouchEvent(${1:TouchEventType event},${2:Widget *sender},${3:Touch *touch})"
			],
			"description": "void PageView::interceptTouchEvent(TouchEventType event, Widget *sender, Touch *touch)"
		},
		 "void ListView::setItemModel(Widget *model)": {
			"prefix": "void ListView::setItemModel(Widget *model)",
			"body": [
				"ListView:setItemModel(${1:Widget *model})"
			],
			"description": "void ListView::setItemModel(Widget *model)"
		},
		 "void RadioButton::dispatchSelectChangedEvent(bool selected)": {
			"prefix": "void RadioButton::dispatchSelectChangedEvent(bool selected)",
			"body": [
				"RadioButton:dispatchSelectChangedEvent(${1:bool selected})"
			],
			"description": "void RadioButton::dispatchSelectChangedEvent(bool selected)"
		},
		 "void ScrollView::startAutoScroll(const Vec2& deltaMove, float duration, bool attenuated)": {
			"prefix": "void ScrollView::startAutoScroll(const Vec2& deltaMove, float duration, bool attenuated)",
			"body": [
				"ScrollView:startAutoScroll(${1:Vec2& deltaMove},${2:float duration},${3:bool attenuated})"
			],
			"description": "void ScrollView::startAutoScroll(const Vec2& deltaMove, float duration, bool attenuated)"
		},
		 "void ProtectedNode::onEnter()": {
			"prefix": "void ProtectedNode::onEnter()",
			"body": [
				"void ProtectedNode:onEnter()"
			],
			"description": "void ProtectedNode::onEnter()"
		},
		 "void cocos2d::NavMeshObstacle::addTo(dtTileCache *tileCache)": {
			"prefix": "void cocos2d::NavMeshObstacle::addTo(dtTileCache *tileCache)",
			"body": [
				"cocos2d:NavMeshObstacle:addTo(${1:dtTileCache *tileCache})"
			],
			"description": "void cocos2d::NavMeshObstacle::addTo(dtTileCache *tileCache)"
		},
		 "void AbstractCheckButton::setupFrontCrossTexture()": {
			"prefix": "void AbstractCheckButton::setupFrontCrossTexture()",
			"body": [
				"void AbstractCheckButton:setupFrontCrossTexture()"
			],
			"description": "void AbstractCheckButton::setupFrontCrossTexture()"
		},
		 "Waves3D* Waves3D::clone() const": {
			"prefix": "Waves3D* Waves3D::clone() const",
			"body": [
				"Waves3D* Waves3D:clone() "
			],
			"description": "Waves3D* Waves3D::clone() const"
		},
		 "ArmatureDataManager *ArmatureDataManager::getInstance()": {
			"prefix": "ArmatureDataManager *ArmatureDataManager::getInstance()",
			"body": [
				"ArmatureDataManager *ArmatureDataManager:getInstance()"
			],
			"description": "ArmatureDataManager *ArmatureDataManager::getInstance()"
		},
		 "bool Pass::init(Technique* technique)": {
			"prefix": "bool Pass::init(Technique* technique)",
			"body": [
				"Pass:init(${1:Technique* technique})"
			],
			"description": "bool Pass::init(Technique* technique)"
		},
		 "void ActionTimeline::stepToFrame(int frameIndex)": {
			"prefix": "void ActionTimeline::stepToFrame(int frameIndex)",
			"body": [
				"ActionTimeline:stepToFrame(${1:int frameIndex})"
			],
			"description": "void ActionTimeline::stepToFrame(int frameIndex)"
		},
		 "void Camera::onEnter()": {
			"prefix": "void Camera::onEnter()",
			"body": [
				"void Camera:onEnter()"
			],
			"description": "void Camera::onEnter()"
		},
		 "void PhysicsWorld::removeJoint(PhysicsJoint* joint, bool destroy)": {
			"prefix": "void PhysicsWorld::removeJoint(PhysicsJoint* joint, bool destroy)",
			"body": [
				"PhysicsWorld:removeJoint(${1:PhysicsJoint* joint},${2:bool destroy})"
			],
			"description": "void PhysicsWorld::removeJoint(PhysicsJoint* joint, bool destroy)"
		},
		 "bool Pass::initWithGLProgramState(Technique* technique, GLProgramState *glProgramState)": {
			"prefix": "bool Pass::initWithGLProgramState(Technique* technique, GLProgramState *glProgramState)",
			"body": [
				"Pass:initWithGLProgramState(${1:Technique* technique},${2:GLProgramState *glProgramState})"
			],
			"description": "bool Pass::initWithGLProgramState(Technique* technique, GLProgramState *glProgramState)"
		},
		 "Vector<Node*>& CCBReader::getOwnerCallbackNodes()": {
			"prefix": "Vector<Node*>& CCBReader::getOwnerCallbackNodes()",
			"body": [
				"Vector<Node*>& CCBReader:getOwnerCallbackNodes()"
			],
			"description": "Vector<Node*>& CCBReader::getOwnerCallbackNodes()"
		},
		 "EaseElasticIn* EaseElasticIn::create(ActionInterval *action, float period/* = 0.3f*/)": {
			"prefix": "EaseElasticIn* EaseElasticIn::create(ActionInterval *action, float period/* = 0.3f*/)",
			"body": [
				"EaseElasticIn:create(${1:ActionInterval *action},${2:float period/* = 0.3f*/})"
			],
			"description": "EaseElasticIn* EaseElasticIn::create(ActionInterval *action, float period/* = 0.3f*/)"
		},
		 "void SkeletonRenderer::draw (Renderer* renderer, const Mat4& transform, uint32_t transformFlags)": {
			"prefix": "void SkeletonRenderer::draw (Renderer* renderer, const Mat4& transform, uint32_t transformFlags)",
			"body": [
				"SkeletonRenderer:draw (${1:Renderer* renderer},${2:Mat4& transform},${3:uint32_t transformFlags})"
			],
			"description": "void SkeletonRenderer::draw (Renderer* renderer, const Mat4& transform, uint32_t transformFlags)"
		},
		 "EaseElasticInOut* EaseElasticInOut::create(ActionInterval *action, float period/* = 0.3f*/)": {
			"prefix": "EaseElasticInOut* EaseElasticInOut::create(ActionInterval *action, float period/* = 0.3f*/)",
			"body": [
				"EaseElasticInOut:create(${1:ActionInterval *action},${2:float period/* = 0.3f*/})"
			],
			"description": "EaseElasticInOut* EaseElasticInOut::create(ActionInterval *action, float period/* = 0.3f*/)"
		},
		 "Ref*  __Array::getRandomObject()": {
			"prefix": "Ref*  __Array::getRandomObject()",
			"body": [
				"Ref*  __Array:getRandomObject()"
			],
			"description": "Ref*  __Array::getRandomObject()"
		},
		 "Vec2 Director::convertToUI(const Vec2& glPoint)": {
			"prefix": "Vec2 Director::convertToUI(const Vec2& glPoint)",
			"body": [
				"Director:convertToUI(${1:Vec2& glPoint})"
			],
			"description": "Vec2 Director::convertToUI(const Vec2& glPoint)"
		},
		 "FlipY * FlipY::clone() const": {
			"prefix": "FlipY * FlipY::clone() const",
			"body": [
				"FlipY * FlipY:clone() "
			],
			"description": "FlipY * FlipY::clone() const"
		},
		 "void Tween::gotoAndPlay(int frameIndex)": {
			"prefix": "void Tween::gotoAndPlay(int frameIndex)",
			"body": [
				"Tween:gotoAndPlay(${1:int frameIndex})"
			],
			"description": "void Tween::gotoAndPlay(int frameIndex)"
		},
		 "Size Button::getNormalTextureSize() const": {
			"prefix": "Size Button::getNormalTextureSize() const",
			"body": [
				"Size Button:getNormalTextureSize() "
			],
			"description": "Size Button::getNormalTextureSize() const"
		},
		 "void NavMeshAgent::setMaxAcceleration(float maxAcceleration)": {
			"prefix": "void NavMeshAgent::setMaxAcceleration(float maxAcceleration)",
			"body": [
				"NavMeshAgent:setMaxAcceleration(${1:float maxAcceleration})"
			],
			"description": "void NavMeshAgent::setMaxAcceleration(float maxAcceleration)"
		},
		 "Offset<flatbuffers::BoolFrame> FlatBuffersSerialize::createBoolFrame(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<flatbuffers::BoolFrame> FlatBuffersSerialize::createBoolFrame(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createBoolFrame(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<flatbuffers::BoolFrame> FlatBuffersSerialize::createBoolFrame(const tinyxml2::XMLElement *objectData)"
		},
		 "void PhysicsBody::applyImpulse(const Vect& impulse)": {
			"prefix": "void PhysicsBody::applyImpulse(const Vect& impulse)",
			"body": [
				"PhysicsBody:applyImpulse(${1:Vect& impulse})"
			],
			"description": "void PhysicsBody::applyImpulse(const Vect& impulse)"
		},
		 "void Node::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void Node::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"Node:visit(${1:Renderer* renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void Node::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "Profiler* Profiler::getInstance()": {
			"prefix": "Profiler* Profiler::getInstance()",
			"body": [
				"Profiler* Profiler:getInstance()"
			],
			"description": "Profiler* Profiler::getInstance()"
		},
		 "void Quaternion::slerp(float q1x, float q1y, float q1z, float q1w, float q2x, float q2y, float q2z, float q2w, float t, float* dstx, float* dsty, float* dstz, float* dstw)": {
			"prefix": "void Quaternion::slerp(float q1x, float q1y, float q1z, float q1w, float q2x, float q2y, float q2z, float q2w, float t, float* dstx, float* dsty, float* dstz, float* dstw)",
			"body": [
				"Quaternion:slerp(${1:float q1x},${2:float q1y},${3:float q1z},${4:float q1w},${5:float q2x},${6:float q2y},${7:float q2z},${8:float q2w},${9:float t},${10:float* dstx},${11:float* dsty},${12:float* dstz},${13:float* dstw})"
			],
			"description": "void Quaternion::slerp(float q1x, float q1y, float q1z, float q1w, float q2x, float q2y, float q2z, float q2w, float t, float* dstx, float* dsty, float* dstz, float* dstw)"
		},
		 "const ValueMap& Value::asValueMap() const": {
			"prefix": "const ValueMap& Value::asValueMap() const",
			"body": [
				" ValueMap& Value:asValueMap() "
			],
			"description": "const ValueMap& Value::asValueMap() const"
		},
		 "void LoadingBar::setScale9Enabled(bool enabled)": {
			"prefix": "void LoadingBar::setScale9Enabled(bool enabled)",
			"body": [
				"LoadingBar:setScale9Enabled(${1:bool enabled})"
			],
			"description": "void LoadingBar::setScale9Enabled(bool enabled)"
		},
		 "NTextureData::Usage Bundle3D::parseGLTextureType(const std::string& str)": {
			"prefix": "NTextureData::Usage Bundle3D::parseGLTextureType(const std::string& str)",
			"body": [
				"Bundle3D:parseGLTextureType(${1:std:string& str})"
			],
			"description": "NTextureData::Usage Bundle3D::parseGLTextureType(const std::string& str)"
		},
		 "bool __Array::initWithCapacity(ssize_t capacity)": {
			"prefix": "bool __Array::initWithCapacity(ssize_t capacity)",
			"body": [
				"__Array:initWithCapacity(${1:ssize_t capacity})"
			],
			"description": "bool __Array::initWithCapacity(ssize_t capacity)"
		},
		 "void Mat4::translate(const Vec3& t, Mat4* dst) const": {
			"prefix": "void Mat4::translate(const Vec3& t, Mat4* dst) const",
			"body": [
				"Mat4:translate(${1:Vec3& t},${2:Mat4* dst})"
			],
			"description": "void Mat4::translate(const Vec3& t, Mat4* dst) const"
		},
		 "void Speed::stop()": {
			"prefix": "void Speed::stop()",
			"body": [
				"void Speed:stop()"
			],
			"description": "void Speed::stop()"
		},
		 "void	Physics3D6DofConstraint::setAngularLowerLimit(const cocos2d::Vec3& angularLower)": {
			"prefix": "void	Physics3D6DofConstraint::setAngularLowerLimit(const cocos2d::Vec3& angularLower)",
			"body": [
				"angularLower})"
			],
			"description": "void	Physics3D6DofConstraint::setAngularLowerLimit(const cocos2d::Vec3& angularLower)"
		},
		 "Rect Grid3DAction::getGridRect() const": {
			"prefix": "Rect Grid3DAction::getGridRect() const",
			"body": [
				"Rect Grid3DAction:getGridRect() "
			],
			"description": "Rect Grid3DAction::getGridRect() const"
		},
		 "void Scene::removeAllChildren()": {
			"prefix": "void Scene::removeAllChildren()",
			"body": [
				"void Scene:removeAllChildren()"
			],
			"description": "void Scene::removeAllChildren()"
		},
		 "void BezierBy::startWithTarget(Node *target)": {
			"prefix": "void BezierBy::startWithTarget(Node *target)",
			"body": [
				"BezierBy:startWithTarget(${1:Node *target})"
			],
			"description": "void BezierBy::startWithTarget(Node *target)"
		},
		 "void	Physics3D6DofConstraint::setLinearUpperLimit(const cocos2d::Vec3& linearUpper)": {
			"prefix": "void	Physics3D6DofConstraint::setLinearUpperLimit(const cocos2d::Vec3& linearUpper)",
			"body": [
				"linearUpper})"
			],
			"description": "void	Physics3D6DofConstraint::setLinearUpperLimit(const cocos2d::Vec3& linearUpper)"
		},
		 "void ParticleSystemQuadLoader::onHandlePropTypeColor4FVar(Node * pNode, Node * pParent, const char * pPropertyName, Color4F * pColor4FVar, CCBReader * ccbReader)": {
			"prefix": "void ParticleSystemQuadLoader::onHandlePropTypeColor4FVar(Node * pNode, Node * pParent, const char * pPropertyName, Color4F * pColor4FVar, CCBReader * ccbReader)",
			"body": [
				"ParticleSystemQuadLoader:onHandlePropTypeColor4FVar(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Color4F * pColor4FVar},${5:CCBReader * ccbReader})"
			],
			"description": "void ParticleSystemQuadLoader::onHandlePropTypeColor4FVar(Node * pNode, Node * pParent, const char * pPropertyName, Color4F * pColor4FVar, CCBReader * ccbReader)"
		},
		 "void ClippingNode::setStencil(Node *stencil)": {
			"prefix": "void ClippingNode::setStencil(Node *stencil)",
			"body": [
				"ClippingNode:setStencil(${1:Node *stencil})"
			],
			"description": "void ClippingNode::setStencil(Node *stencil)"
		},
		 "GLProgramState* Widget::getNormalGLProgramState()const": {
			"prefix": "GLProgramState* Widget::getNormalGLProgramState()const",
			"body": [
				"GLProgramState* Widget:getNormalGLProgramState()"
			],
			"description": "GLProgramState* Widget::getNormalGLProgramState()const"
		},
		 "float Layout::calculateNearestDistance(Widget* baseWidget)": {
			"prefix": "float Layout::calculateNearestDistance(Widget* baseWidget)",
			"body": [
				"Layout:calculateNearestDistance(${1:Widget* baseWidget})"
			],
			"description": "float Layout::calculateNearestDistance(Widget* baseWidget)"
		},
		 "bool PhysicsJointSpring::createConstraints()": {
			"prefix": "bool PhysicsJointSpring::createConstraints()",
			"body": [
				"bool PhysicsJointSpring:createConstraints()"
			],
			"description": "bool PhysicsJointSpring::createConstraints()"
		},
		 "void Text::setFontSize(float size)": {
			"prefix": "void Text::setFontSize(float size)",
			"body": [
				"Text:setFontSize(${1:float size})"
			],
			"description": "void Text::setFontSize(float size)"
		},
		 "static std::string &rtrim(std::string &s)": {
			"prefix": "static std::string &rtrim(std::string &s)",
			"body": [
				"std:string &rtrim(${1:std:string &s})"
			],
			"description": "static std::string &rtrim(std::string &s)"
		},
		 "void TransitionScene::cleanup()": {
			"prefix": "void TransitionScene::cleanup()",
			"body": [
				"void TransitionScene:cleanup()"
			],
			"description": "void TransitionScene::cleanup()"
		},
		 "static std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems)": {
			"prefix": "static std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems)",
			"body": [
				"std:vector<std:string> &split(${1:std:string &s},${2:char delim},${3:std:vector<std:string> &elems})"
			],
			"description": "static std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems)"
		},
		 "bool ZipUtils::isGZipFile(const char *path)": {
			"prefix": "bool ZipUtils::isGZipFile(const char *path)",
			"body": [
				"ZipUtils:isGZipFile(${1:char *path})"
			],
			"description": "bool ZipUtils::isGZipFile(const char *path)"
		},
		 "bool Texture2D::initWithData(const void *data, ssize_t dataLen, Texture2D::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const Size& contentSize)": {
			"prefix": "bool Texture2D::initWithData(const void *data, ssize_t dataLen, Texture2D::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const Size& contentSize)",
			"body": [
				"Texture2D:initWithData(${1:void *data},${2:ssize_t dataLen},${3:Texture2D:PixelFormat pixelFormat},${4:int pixelsWide},${5:int pixelsHigh},${6:Size& contentSize})"
			],
			"description": "bool Texture2D::initWithData(const void *data, ssize_t dataLen, Texture2D::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const Size& contentSize)"
		},
		 "Bundle3D* Bundle3D::createBundle()": {
			"prefix": "Bundle3D* Bundle3D::createBundle()",
			"body": [
				"Bundle3D* Bundle3D:createBundle()"
			],
			"description": "Bundle3D* Bundle3D::createBundle()"
		},
		 "void ActionObject::setLoop(bool bLoop)": {
			"prefix": "void ActionObject::setLoop(bool bLoop)",
			"body": [
				"ActionObject:setLoop(${1:bool bLoop})"
			],
			"description": "void ActionObject::setLoop(bool bLoop)"
		},
		 "void SimpleAudioEngine::pauseBackgroundMusic()": {
			"prefix": "void SimpleAudioEngine::pauseBackgroundMusic()",
			"body": [
				"void SimpleAudioEngine:pauseBackgroundMusic()"
			],
			"description": "void SimpleAudioEngine::pauseBackgroundMusic()"
		},
		 "void ProgressTimer::setMidpoint(const Vec2& midPoint)": {
			"prefix": "void ProgressTimer::setMidpoint(const Vec2& midPoint)",
			"body": [
				"ProgressTimer:setMidpoint(${1:Vec2& midPoint})"
			],
			"description": "void ProgressTimer::setMidpoint(const Vec2& midPoint)"
		},
		 "void Lens3D::setPosition(const Vec2& pos)": {
			"prefix": "void Lens3D::setPosition(const Vec2& pos)",
			"body": [
				"Lens3D:setPosition(${1:Vec2& pos})"
			],
			"description": "void Lens3D::setPosition(const Vec2& pos)"
		},
		 "float ComAttribute::getFloat(const std::string& key, float def) const": {
			"prefix": "float ComAttribute::getFloat(const std::string& key, float def) const",
			"body": [
				"ComAttribute:getFloat(${1:std:string& key},${2:float def})"
			],
			"description": "float ComAttribute::getFloat(const std::string& key, float def) const"
		},
		 "void EaseExponentialOut::update(float time)": {
			"prefix": "void EaseExponentialOut::update(float time)",
			"body": [
				"EaseExponentialOut:update(${1:float time})"
			],
			"description": "void EaseExponentialOut::update(float time)"
		},
		 "float Vec2::length() const": {
			"prefix": "float Vec2::length() const",
			"body": [
				"float Vec2:length() "
			],
			"description": "float Vec2::length() const"
		},
		 "bool Bundle3D::loadNodes(NodeDatas& nodedatas)": {
			"prefix": "bool Bundle3D::loadNodes(NodeDatas& nodedatas)",
			"body": [
				"Bundle3D:loadNodes(${1:NodeDatas& nodedatas})"
			],
			"description": "bool Bundle3D::loadNodes(NodeDatas& nodedatas)"
		},
		 "bool Physics3DShape::initSphere(float radius)": {
			"prefix": "bool Physics3DShape::initSphere(float radius)",
			"body": [
				"Physics3DShape:initSphere(${1:float radius})"
			],
			"description": "bool Physics3DShape::initSphere(float radius)"
		},
		 "Node* CSLoader::nodeWithFlatBuffers(const flatbuffers::NodeTree *nodetree)": {
			"prefix": "Node* CSLoader::nodeWithFlatBuffers(const flatbuffers::NodeTree *nodetree)",
			"body": [
				"CSLoader:nodeWithFlatBuffers(${1:flatbuffers:NodeTree *nodetree})"
			],
			"description": "Node* CSLoader::nodeWithFlatBuffers(const flatbuffers::NodeTree *nodetree)"
		},
		 "std::string FileUtilsWin32::getStringFromFile(const std::string& filename)": {
			"prefix": "std::string FileUtilsWin32::getStringFromFile(const std::string& filename)",
			"body": [
				"FileUtilsWin32:getStringFromFile(${1:std:string& filename})"
			],
			"description": "std::string FileUtilsWin32::getStringFromFile(const std::string& filename)"
		},
		 "void PhysicsJoint::setMaxForce(float force)": {
			"prefix": "void PhysicsJoint::setMaxForce(float force)",
			"body": [
				"PhysicsJoint:setMaxForce(${1:float force})"
			],
			"description": "void PhysicsJoint::setMaxForce(float force)"
		},
		 "bool ParticleSystem::initWithDictionary(ValueMap& dictionary, const std::string& dirname)": {
			"prefix": "bool ParticleSystem::initWithDictionary(ValueMap& dictionary, const std::string& dirname)",
			"body": [
				"ParticleSystem:initWithDictionary(${1:ValueMap& dictionary},${2:std:string& dirname})"
			],
			"description": "bool ParticleSystem::initWithDictionary(ValueMap& dictionary, const std::string& dirname)"
		},
		 "bool Text::init()": {
			"prefix": "bool Text::init()",
			"body": [
				"bool Text:init()"
			],
			"description": "bool Text::init()"
		},
		 "std::string FileUtils::fullPathFromRelativeFile(const std::string &filename, const std::string &relativeFile)": {
			"prefix": "std::string FileUtils::fullPathFromRelativeFile(const std::string &filename, const std::string &relativeFile)",
			"body": [
				"FileUtils:fullPathFromRelativeFile(${1:std:string &filename},${2:std:string &relativeFile})"
			],
			"description": "std::string FileUtils::fullPathFromRelativeFile(const std::string &filename, const std::string &relativeFile)"
		},
		 "int Downloader::getConnectionTimeout()": {
			"prefix": "int Downloader::getConnectionTimeout()",
			"body": [
				"int Downloader:getConnectionTimeout()"
			],
			"description": "int Downloader::getConnectionTimeout()"
		},
		 "CallFunc * CallFunc::create(Ref* selectorTarget, SEL_CallFunc selector)": {
			"prefix": "CallFunc * CallFunc::create(Ref* selectorTarget, SEL_CallFunc selector)",
			"body": [
				"* CallFunc:create(${1:Ref* selectorTarget},${2:SEL_CallFunc selector})"
			],
			"description": "CallFunc * CallFunc::create(Ref* selectorTarget, SEL_CallFunc selector)"
		},
		 "void ActionFrame::setFrameTime(float fTime)": {
			"prefix": "void ActionFrame::setFrameTime(float fTime)",
			"body": [
				"ActionFrame:setFrameTime(${1:float fTime})"
			],
			"description": "void ActionFrame::setFrameTime(float fTime)"
		},
		 "PhysicsShapeEdgeBox* PhysicsShapeEdgeBox::create(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/, const Vec2& offset/* = Vec2(0, 0)*/)": {
			"prefix": "PhysicsShapeEdgeBox* PhysicsShapeEdgeBox::create(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/, const Vec2& offset/* = Vec2(0, 0)*/)",
			"body": [
				"PhysicsShapeEdgeBox:create(${1:Size& size},${2:PhysicsMaterial& material/* = MaterialDefault*/},${3:float border/* = 1*/},${4:Vec2& offset/* = Vec2(0},${5:0})"
			],
			"description": "PhysicsShapeEdgeBox* PhysicsShapeEdgeBox::create(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/, const Vec2& offset/* = Vec2(0, 0)*/)"
		},
		 "RotationSkewFrame* RotationSkewFrame::create()": {
			"prefix": "RotationSkewFrame* RotationSkewFrame::create()",
			"body": [
				"RotationSkewFrame* RotationSkewFrame:create()"
			],
			"description": "RotationSkewFrame* RotationSkewFrame::create()"
		},
		 "void TextField::attachWithIMEEvent()": {
			"prefix": "void TextField::attachWithIMEEvent()",
			"body": [
				"void TextField:attachWithIMEEvent()"
			],
			"description": "void TextField::attachWithIMEEvent()"
		},
		 "void Layout::onAfterDrawStencil()": {
			"prefix": "void Layout::onAfterDrawStencil()",
			"body": [
				"void Layout:onAfterDrawStencil()"
			],
			"description": "void Layout::onAfterDrawStencil()"
		},
		 "void DataVisitor::visit(const __Integer *value)": {
			"prefix": "void DataVisitor::visit(const __Integer *value)",
			"body": [
				"DataVisitor:visit(${1:__Integer *value})"
			],
			"description": "void DataVisitor::visit(const __Integer *value)"
		},
		 "void MenuItemSprite::setNormalImage(Node* image)": {
			"prefix": "void MenuItemSprite::setNormalImage(Node* image)",
			"body": [
				"MenuItemSprite:setNormalImage(${1:Node* image})"
			],
			"description": "void MenuItemSprite::setNormalImage(Node* image)"
		},
		 "void Widget::setPosition(const Vec2 &pos)": {
			"prefix": "void Widget::setPosition(const Vec2 &pos)",
			"body": [
				"Widget:setPosition(${1:Vec2 &pos})"
			],
			"description": "void Widget::setPosition(const Vec2 &pos)"
		},
		 "void Mat4::scale(const Vec3& s, Mat4* dst) const": {
			"prefix": "void Mat4::scale(const Vec3& s, Mat4* dst) const",
			"body": [
				"Mat4:scale(${1:Vec3& s},${2:Mat4* dst})"
			],
			"description": "void Mat4::scale(const Vec3& s, Mat4* dst) const"
		},
		 "bool RadioButtonGroup::isAllowedNoSelection() const": {
			"prefix": "bool RadioButtonGroup::isAllowedNoSelection() const",
			"body": [
				"bool RadioButtonGroup:isAllowedNoSelection() "
			],
			"description": "bool RadioButtonGroup::isAllowedNoSelection() const"
		},
		 "const Mat4& Node::getParentToNodeTransform() const": {
			"prefix": "const Mat4& Node::getParentToNodeTransform() const",
			"body": [
				" Mat4& Node:getParentToNodeTransform() "
			],
			"description": "const Mat4& Node::getParentToNodeTransform() const"
		},
		 "bool BundleReader::seek(long int offset, int origin)": {
			"prefix": "bool BundleReader::seek(long int offset, int origin)",
			"body": [
				"BundleReader:seek(${1:long int offset},${2:int origin})"
			],
			"description": "bool BundleReader::seek(long int offset, int origin)"
		},
		 "bool AccelAmplitude::initWithAction(Action *action, float duration)": {
			"prefix": "bool AccelAmplitude::initWithAction(Action *action, float duration)",
			"body": [
				"AccelAmplitude:initWithAction(${1:Action *action},${2:float duration})"
			],
			"description": "bool AccelAmplitude::initWithAction(Action *action, float duration)"
		},
		 "void ColliderDetector::updateTransform(Mat4 &t)": {
			"prefix": "void ColliderDetector::updateTransform(Mat4 &t)",
			"body": [
				"ColliderDetector:updateTransform(${1:Mat4 &t})"
			],
			"description": "void ColliderDetector::updateTransform(Mat4 &t)"
		},
		 "void Grid3D::afterBlit()": {
			"prefix": "void Grid3D::afterBlit()",
			"body": [
				"void Grid3D:afterBlit()"
			],
			"description": "void Grid3D::afterBlit()"
		},
		 "Bone3D* Skeleton3D::getBoneByName(const std::string& id) const": {
			"prefix": "Bone3D* Skeleton3D::getBoneByName(const std::string& id) const",
			"body": [
				"Skeleton3D:getBoneByName(${1:std:string& id})"
			],
			"description": "Bone3D* Skeleton3D::getBoneByName(const std::string& id) const"
		},
		 "const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, const char* key, int idx)": {
			"prefix": "const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, const char* key, int idx)",
			"body": [
				"rapidjson:Value& DictionaryHelper:getSubDictionary_json(${1:rapidjson:Value &root},${2:char* key},${3:int idx})"
			],
			"description": "const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, const char* key, int idx)"
		},
		 "void Physics3DHingeConstraint::setMaxMotorImpulse(float maxMotorImpulse)": {
			"prefix": "void Physics3DHingeConstraint::setMaxMotorImpulse(float maxMotorImpulse)",
			"body": [
				"Physics3DHingeConstraint:setMaxMotorImpulse(${1:float maxMotorImpulse})"
			],
			"description": "void Physics3DHingeConstraint::setMaxMotorImpulse(float maxMotorImpulse)"
		},
		 "EaseInOut* EaseInOut::clone() const": {
			"prefix": "EaseInOut* EaseInOut::clone() const",
			"body": [
				"EaseInOut* EaseInOut:clone() "
			],
			"description": "EaseInOut* EaseInOut::clone() const"
		},
		 "const std::vector<std::string>* protocols/* = nullptr*/)": {
			"prefix": "const std::vector<std::string>* protocols/* = nullptr*/)",
			"body": [
				" std:vector<std:string>* protocols/* = nullptr*/)"
			],
			"description": "const std::vector<std::string>* protocols/* = nullptr*/)"
		},
		 "JNIEnv* JniHelper::getEnv()": {
			"prefix": "JNIEnv* JniHelper::getEnv()",
			"body": [
				"JNIEnv* JniHelper:getEnv()"
			],
			"description": "JNIEnv* JniHelper::getEnv()"
		},
		 "Vec2 NodeLoader::parsePropTypePosition(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)": {
			"prefix": "Vec2 NodeLoader::parsePropTypePosition(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)",
			"body": [
				"NodeLoader:parsePropTypePosition(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader},${4:char *pPropertyName})"
			],
			"description": "Vec2 NodeLoader::parsePropTypePosition(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)"
		},
		 "bool  Bundle3D::loadMaterialsJson(MaterialDatas& materialdatas)": {
			"prefix": "bool  Bundle3D::loadMaterialsJson(MaterialDatas& materialdatas)",
			"body": [
				"Bundle3D:loadMaterialsJson(${1:MaterialDatas& materialdatas})"
			],
			"description": "bool  Bundle3D::loadMaterialsJson(MaterialDatas& materialdatas)"
		},
		 "void Node::scheduleUpdateWithPriorityLua(int nHandler, int priority)": {
			"prefix": "void Node::scheduleUpdateWithPriorityLua(int nHandler, int priority)",
			"body": [
				"Node:scheduleUpdateWithPriorityLua(${1:int nHandler},${2:int priority})"
			],
			"description": "void Node::scheduleUpdateWithPriorityLua(int nHandler, int priority)"
		},
		 "void GLProgramCache::loadDefaultGLPrograms()": {
			"prefix": "void GLProgramCache::loadDefaultGLPrograms()",
			"body": [
				"void GLProgramCache:loadDefaultGLPrograms()"
			],
			"description": "void GLProgramCache::loadDefaultGLPrograms()"
		},
		 "void RotateBy::update(float time)": {
			"prefix": "void RotateBy::update(float time)",
			"body": [
				"RotateBy:update(${1:float time})"
			],
			"description": "void RotateBy::update(float time)"
		},
		 "void Texture2D::setAntiAliasTexParameters()": {
			"prefix": "void Texture2D::setAntiAliasTexParameters()",
			"body": [
				"void Texture2D:setAntiAliasTexParameters()"
			],
			"description": "void Texture2D::setAntiAliasTexParameters()"
		},
		 "Vector<Node*>& CCBReader::getOwnerOutletNodes()": {
			"prefix": "Vector<Node*>& CCBReader::getOwnerOutletNodes()",
			"body": [
				"Vector<Node*>& CCBReader:getOwnerOutletNodes()"
			],
			"description": "Vector<Node*>& CCBReader::getOwnerOutletNodes()"
		},
		 "const int material_id, const std::string &name, bool clearCache)": {
			"prefix": "const int material_id, const std::string &name, bool clearCache)",
			"body": [
				" int material_id,  std:string &name, bool clearCache)"
			],
			"description": "const int material_id, const std::string &name, bool clearCache)"
		},
		 "__Array* __Array::createWithCapacity(ssize_t capacity)": {
			"prefix": "__Array* __Array::createWithCapacity(ssize_t capacity)",
			"body": [
				"__Array:createWithCapacity(${1:ssize_t capacity})"
			],
			"description": "__Array* __Array::createWithCapacity(ssize_t capacity)"
		},
		 "void ProtectedNode::addProtectedChild(cocos2d::Node *child)": {
			"prefix": "void ProtectedNode::addProtectedChild(cocos2d::Node *child)",
			"body": [
				"ProtectedNode:addProtectedChild(${1:cocos2d:Node *child})"
			],
			"description": "void ProtectedNode::addProtectedChild(cocos2d::Node *child)"
		},
		 "void ShakyTiles3D::update(float time)": {
			"prefix": "void ShakyTiles3D::update(float time)",
			"body": [
				"ShakyTiles3D:update(${1:float time})"
			],
			"description": "void ShakyTiles3D::update(float time)"
		},
		 "bool FileUtils::writeValueVectorToFile(ValueVector vecData, const std::string& fullPath)": {
			"prefix": "bool FileUtils::writeValueVectorToFile(ValueVector vecData, const std::string& fullPath)",
			"body": [
				"FileUtils:writeValueVectorToFile(${1:ValueVector vecData},${2:std:string& fullPath})"
			],
			"description": "bool FileUtils::writeValueVectorToFile(ValueVector vecData, const std::string& fullPath)"
		},
		 "void EaseQuadraticActionInOut::update(float time)": {
			"prefix": "void EaseQuadraticActionInOut::update(float time)",
			"body": [
				"EaseQuadraticActionInOut:update(${1:float time})"
			],
			"description": "void EaseQuadraticActionInOut::update(float time)"
		},
		 "int __String::compare(const char * pStr) const": {
			"prefix": "int __String::compare(const char * pStr) const",
			"body": [
				"__String:compare(${1:char * pStr})"
			],
			"description": "int __String::compare(const char * pStr) const"
		},
		 "void CCBKeyframe::setEasingOpt(float fEasingOpt)": {
			"prefix": "void CCBKeyframe::setEasingOpt(float fEasingOpt)",
			"body": [
				"CCBKeyframe:setEasingOpt(${1:float fEasingOpt})"
			],
			"description": "void CCBKeyframe::setEasingOpt(float fEasingOpt)"
		},
		 "void cocos2d::Terrain::setLightMap(const std::string& fileName)": {
			"prefix": "void cocos2d::Terrain::setLightMap(const std::string& fileName)",
			"body": [
				"cocos2d:Terrain:setLightMap(${1:std:string& fileName})"
			],
			"description": "void cocos2d::Terrain::setLightMap(const std::string& fileName)"
		},
		 "void AudioCache::addPlayCallback(const std::function<void()>& callback)": {
			"prefix": "void AudioCache::addPlayCallback(const std::function<void()>& callback)",
			"body": [
				"void AudioCache:addPlayCallback( std:function<void()>& callback)"
			],
			"description": "void AudioCache::addPlayCallback(const std::function<void()>& callback)"
		},
		 "ActionInterval* ActionEase::getInnerAction()": {
			"prefix": "ActionInterval* ActionEase::getInnerAction()",
			"body": [
				"ActionInterval* ActionEase:getInnerAction()"
			],
			"description": "ActionInterval* ActionEase::getInnerAction()"
		},
		 "bool PhysicsShapePolygon::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)": {
			"prefix": "bool PhysicsShapePolygon::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)",
			"body": [
				"PhysicsShapePolygon:init(${1:Vec2* points},${2:int count},${3:PhysicsMaterial& material/* = MaterialDefault*/},${4:Vec2& offset/* = Vec2(0},${5:0})"
			],
			"description": "bool PhysicsShapePolygon::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)"
		},
		 "void Sprite::addChild(Node *child, int zOrder, const std::string &name)": {
			"prefix": "void Sprite::addChild(Node *child, int zOrder, const std::string &name)",
			"body": [
				"Sprite:addChild(${1:Node *child},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void Sprite::addChild(Node *child, int zOrder, const std::string &name)"
		},
		 "TransitionFadeUp* TransitionFadeUp::create(float t, Scene* scene)": {
			"prefix": "TransitionFadeUp* TransitionFadeUp::create(float t, Scene* scene)",
			"body": [
				"TransitionFadeUp:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionFadeUp* TransitionFadeUp::create(float t, Scene* scene)"
		},
		 "void CallFunc::update(float time)": {
			"prefix": "void CallFunc::update(float time)",
			"body": [
				"CallFunc:update(${1:float time})"
			],
			"description": "void CallFunc::update(float time)"
		},
		 "void captureScreen(const std::function<void(bool, const std::string&)>& afterCaptured, const std::string& filename)": {
			"prefix": "void captureScreen(const std::function<void(bool, const std::string&)>& afterCaptured, const std::string& filename)",
			"body": [
				"captureScreen(${1:std:function<void(bool},${2:std:string&})"
			],
			"description": "void captureScreen(const std::function<void(bool, const std::string&)>& afterCaptured, const std::string& filename)"
		},
		 "float Physics3DConeTwistConstraint::getSwingSpan2() const": {
			"prefix": "float Physics3DConeTwistConstraint::getSwingSpan2() const",
			"body": [
				"float Physics3DConeTwistConstraint:getSwingSpan2() "
			],
			"description": "float Physics3DConeTwistConstraint::getSwingSpan2() const"
		},
		 "void LoadingBar::updateProgressBar()": {
			"prefix": "void LoadingBar::updateProgressBar()",
			"body": [
				"void LoadingBar:updateProgressBar()"
			],
			"description": "void LoadingBar::updateProgressBar()"
		},
		 "void Physics3DSliderConstraint::setTargetLinMotorVelocity(float targetLinMotorVelocity)": {
			"prefix": "void Physics3DSliderConstraint::setTargetLinMotorVelocity(float targetLinMotorVelocity)",
			"body": [
				"Physics3DSliderConstraint:setTargetLinMotorVelocity(${1:float targetLinMotorVelocity})"
			],
			"description": "void Physics3DSliderConstraint::setTargetLinMotorVelocity(float targetLinMotorVelocity)"
		},
		 "float ActionScaleFrame::getScaleY()": {
			"prefix": "float ActionScaleFrame::getScaleY()",
			"body": [
				"float ActionScaleFrame:getScaleY()"
			],
			"description": "float ActionScaleFrame::getScaleY()"
		},
		 "void TriggerMng::removeEventListener(cocos2d::EventListener* listener)": {
			"prefix": "void TriggerMng::removeEventListener(cocos2d::EventListener* listener)",
			"body": [
				"TriggerMng:removeEventListener(${1:cocos2d:EventListener* listener})"
			],
			"description": "void TriggerMng::removeEventListener(cocos2d::EventListener* listener)"
		},
		 "void RadioButton::addEventListener(const ccRadioButtonCallback& callback)": {
			"prefix": "void RadioButton::addEventListener(const ccRadioButtonCallback& callback)",
			"body": [
				"RadioButton:addEventListener(${1:ccRadioButtonCallback& callback})"
			],
			"description": "void RadioButton::addEventListener(const ccRadioButtonCallback& callback)"
		},
		 "void SkewBy::startWithTarget(Node *target)": {
			"prefix": "void SkewBy::startWithTarget(Node *target)",
			"body": [
				"SkewBy:startWithTarget(${1:Node *target})"
			],
			"description": "void SkewBy::startWithTarget(Node *target)"
		},
		 "float ScrollViewBar::calculateLength(float innerContainerMeasure, float scrollViewMeasure, float outOfBoundaryValue)": {
			"prefix": "float ScrollViewBar::calculateLength(float innerContainerMeasure, float scrollViewMeasure, float outOfBoundaryValue)",
			"body": [
				"ScrollViewBar:calculateLength(${1:float innerContainerMeasure},${2:float scrollViewMeasure},${3:float outOfBoundaryValue})"
			],
			"description": "float ScrollViewBar::calculateLength(float innerContainerMeasure, float scrollViewMeasure, float outOfBoundaryValue)"
		},
		 "void Label::setGlobalZOrder(float globalZOrder)": {
			"prefix": "void Label::setGlobalZOrder(float globalZOrder)",
			"body": [
				"Label:setGlobalZOrder(${1:float globalZOrder})"
			],
			"description": "void Label::setGlobalZOrder(float globalZOrder)"
		},
		 "EaseCircleActionIn* EaseCircleActionIn::create(ActionInterval* action)": {
			"prefix": "EaseCircleActionIn* EaseCircleActionIn::create(ActionInterval* action)",
			"body": [
				"EaseCircleActionIn:create(${1:ActionInterval* action})"
			],
			"description": "EaseCircleActionIn* EaseCircleActionIn::create(ActionInterval* action)"
		},
		 "void Animate::setAnimation(cocos2d::Animation *animation)": {
			"prefix": "void Animate::setAnimation(cocos2d::Animation *animation)",
			"body": [
				"Animate:setAnimation(${1:cocos2d:Animation *animation})"
			],
			"description": "void Animate::setAnimation(cocos2d::Animation *animation)"
		},
		 "void Node::scheduleOnce(const std::function<void(float)> &callback, float delay, const std::string &key)": {
			"prefix": "void Node::scheduleOnce(const std::function<void(float)> &callback, float delay, const std::string &key)",
			"body": [
				"Node:scheduleOnce(${1:std:function<void(float})"
			],
			"description": "void Node::scheduleOnce(const std::function<void(float)> &callback, float delay, const std::string &key)"
		},
		 "void BatchCommand::init(float globalOrder, GLProgram* shader, BlendFunc blendType, TextureAtlas *textureAtlas, const Mat4& modelViewTransform)": {
			"prefix": "void BatchCommand::init(float globalOrder, GLProgram* shader, BlendFunc blendType, TextureAtlas *textureAtlas, const Mat4& modelViewTransform)",
			"body": [
				"BatchCommand:init(${1:float globalOrder},${2:GLProgram* shader},${3:BlendFunc blendType},${4:TextureAtlas *textureAtlas},${5:Mat4& modelViewTransform})"
			],
			"description": "void BatchCommand::init(float globalOrder, GLProgram* shader, BlendFunc blendType, TextureAtlas *textureAtlas, const Mat4& modelViewTransform)"
		},
		 "PhysicsJointLimit* PhysicsJointLimit::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2, float min, float max)": {
			"prefix": "PhysicsJointLimit* PhysicsJointLimit::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2, float min, float max)",
			"body": [
				"PhysicsJointLimit:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:Vec2& anchr1},${4:Vec2& anchr2},${5:float min},${6:float max})"
			],
			"description": "PhysicsJointLimit* PhysicsJointLimit::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2, float min, float max)"
		},
		 "float Physics3DSliderConstraint::getSoftnessDirLin() const": {
			"prefix": "float Physics3DSliderConstraint::getSoftnessDirLin() const",
			"body": [
				"float Physics3DSliderConstraint:getSoftnessDirLin() "
			],
			"description": "float Physics3DSliderConstraint::getSoftnessDirLin() const"
		},
		 "void Node::setPositionY(float y)": {
			"prefix": "void Node::setPositionY(float y)",
			"body": [
				"Node:setPositionY(${1:float y})"
			],
			"description": "void Node::setPositionY(float y)"
		},
		 "void	Physics3D6DofConstraint::setLinearLowerLimit(const cocos2d::Vec3& linearLower)": {
			"prefix": "void	Physics3D6DofConstraint::setLinearLowerLimit(const cocos2d::Vec3& linearLower)",
			"body": [
				"linearLower})"
			],
			"description": "void	Physics3D6DofConstraint::setLinearLowerLimit(const cocos2d::Vec3& linearLower)"
		},
		 "void MeshCommand::execute()": {
			"prefix": "void MeshCommand::execute()",
			"body": [
				"void MeshCommand:execute()"
			],
			"description": "void MeshCommand::execute()"
		},
		 "void Bone3D::removeChildBone(Bone3D* bone)": {
			"prefix": "void Bone3D::removeChildBone(Bone3D* bone)",
			"body": [
				"Bone3D:removeChildBone(${1:Bone3D* bone})"
			],
			"description": "void Bone3D::removeChildBone(Bone3D* bone)"
		},
		 "bool XmlSaxHander::Visit( const tinyxml2::XMLText& text )": {
			"prefix": "bool XmlSaxHander::Visit( const tinyxml2::XMLText& text )",
			"body": [
				"XmlSaxHander:Visit(${1:tinyxml2:XMLText& text})"
			],
			"description": "bool XmlSaxHander::Visit( const tinyxml2::XMLText& text )"
		},
		 "bool JumpBy::initWithDuration(float duration, const Vec2& position, float height, int jumps)": {
			"prefix": "bool JumpBy::initWithDuration(float duration, const Vec2& position, float height, int jumps)",
			"body": [
				"JumpBy:initWithDuration(${1:float duration},${2:Vec2& position},${3:float height},${4:int jumps})"
			],
			"description": "bool JumpBy::initWithDuration(float duration, const Vec2& position, float height, int jumps)"
		},
		 "void RotationFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void RotationFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"RotationFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void RotationFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void ComRender::onAdd()": {
			"prefix": "void ComRender::onAdd()",
			"body": [
				"void ComRender:onAdd()"
			],
			"description": "void ComRender::onAdd()"
		},
		 "void PhysicsBody::setResting(bool rest) const": {
			"prefix": "void PhysicsBody::setResting(bool rest) const",
			"body": [
				"PhysicsBody:setResting(${1:bool rest})"
			],
			"description": "void PhysicsBody::setResting(bool rest) const"
		},
		 "void Helper::changeLayoutSystemActiveState(bool bActive)": {
			"prefix": "void Helper::changeLayoutSystemActiveState(bool bActive)",
			"body": [
				"Helper:changeLayoutSystemActiveState(${1:bool bActive})"
			],
			"description": "void Helper::changeLayoutSystemActiveState(bool bActive)"
		},
		 "void EditBoxImplCommon::setText(const char* text)": {
			"prefix": "void EditBoxImplCommon::setText(const char* text)",
			"body": [
				"EditBoxImplCommon:setText(${1:char* text})"
			],
			"description": "void EditBoxImplCommon::setText(const char* text)"
		},
		 "void PhysicsJoint::setCollisionEnable(bool enable)": {
			"prefix": "void PhysicsJoint::setCollisionEnable(bool enable)",
			"body": [
				"PhysicsJoint:setCollisionEnable(${1:bool enable})"
			],
			"description": "void PhysicsJoint::setCollisionEnable(bool enable)"
		},
		 "int ZipUtils::inflateMemoryWithHint(unsigned char *in, ssize_t inLength, unsigned char **out, ssize_t *outLength, ssize_t outLenghtHint)": {
			"prefix": "int ZipUtils::inflateMemoryWithHint(unsigned char *in, ssize_t inLength, unsigned char **out, ssize_t *outLength, ssize_t outLenghtHint)",
			"body": [
				"ZipUtils:inflateMemoryWithHint(${1:unsigned char *in},${2:ssize_t inLength},${3:unsigned char **out},${4:ssize_t *outLength},${5:ssize_t outLenghtHint})"
			],
			"description": "int ZipUtils::inflateMemoryWithHint(unsigned char *in, ssize_t inLength, unsigned char **out, ssize_t *outLength, ssize_t outLenghtHint)"
		},
		 "void BatchNode::generateGroupCommand()": {
			"prefix": "void BatchNode::generateGroupCommand()",
			"body": [
				"void BatchNode:generateGroupCommand()"
			],
			"description": "void BatchNode::generateGroupCommand()"
		},
		 "Vec3 OBB::getFaceDirection(int index) const": {
			"prefix": "Vec3 OBB::getFaceDirection(int index) const",
			"body": [
				"OBB:getFaceDirection(${1:int index})"
			],
			"description": "Vec3 OBB::getFaceDirection(int index) const"
		},
		 "MenuItemToggle * MenuItemToggle::createWithCallback(const ccMenuCallback &callback, const Vector<MenuItem*>& menuItems)": {
			"prefix": "MenuItemToggle * MenuItemToggle::createWithCallback(const ccMenuCallback &callback, const Vector<MenuItem*>& menuItems)",
			"body": [
				"* MenuItemToggle:createWithCallback(${1:ccMenuCallback &callback},${2:Vector<MenuItem*>& menuItems})"
			],
			"description": "MenuItemToggle * MenuItemToggle::createWithCallback(const ccMenuCallback &callback, const Vector<MenuItem*>& menuItems)"
		},
		 "float Slider::getPercentWithBallPos(const Vec2 &pt) const": {
			"prefix": "float Slider::getPercentWithBallPos(const Vec2 &pt) const",
			"body": [
				"Slider:getPercentWithBallPos(${1:Vec2 &pt})"
			],
			"description": "float Slider::getPercentWithBallPos(const Vec2 &pt) const"
		},
		 "TextFieldTTF * TextFieldTTF::textFieldWithPlaceHolder(const std::string& placeholder, const Size& dimensions, TextHAlignment alignment, const std::string& fontName, float fontSize)": {
			"prefix": "TextFieldTTF * TextFieldTTF::textFieldWithPlaceHolder(const std::string& placeholder, const Size& dimensions, TextHAlignment alignment, const std::string& fontName, float fontSize)",
			"body": [
				"* TextFieldTTF:textFieldWithPlaceHolder(${1:std:string& placeholder},${2:Size& dimensions},${3:TextHAlignment alignment},${4:std:string& fontName},${5:float fontSize})"
			],
			"description": "TextFieldTTF * TextFieldTTF::textFieldWithPlaceHolder(const std::string& placeholder, const Size& dimensions, TextHAlignment alignment, const std::string& fontName, float fontSize)"
		},
		 "std::string AllocatorDiagnostics::diagnostics()": {
			"prefix": "std::string AllocatorDiagnostics::diagnostics()",
			"body": [
				"std:string AllocatorDiagnostics:diagnostics()"
			],
			"description": "std::string AllocatorDiagnostics::diagnostics()"
		},
		 "void ScrollView::update(float dt)": {
			"prefix": "void ScrollView::update(float dt)",
			"body": [
				"ScrollView:update(${1:float dt})"
			],
			"description": "void ScrollView::update(float dt)"
		},
		 "void Slider::setCapInsets(const Rect &capInsets)": {
			"prefix": "void Slider::setCapInsets(const Rect &capInsets)",
			"body": [
				"Slider:setCapInsets(${1:Rect &capInsets})"
			],
			"description": "void Slider::setCapInsets(const Rect &capInsets)"
		},
		 "bool ActionInterval::initWithDuration(float d)": {
			"prefix": "bool ActionInterval::initWithDuration(float d)",
			"body": [
				"ActionInterval:initWithDuration(${1:float d})"
			],
			"description": "bool ActionInterval::initWithDuration(float d)"
		},
		 "bool Blink::initWithDuration(float duration, int blinks)": {
			"prefix": "bool Blink::initWithDuration(float duration, int blinks)",
			"body": [
				"Blink:initWithDuration(${1:float duration},${2:int blinks})"
			],
			"description": "bool Blink::initWithDuration(float duration, int blinks)"
		},
		 "void Label::disableEffect()": {
			"prefix": "void Label::disableEffect()",
			"body": [
				"void Label:disableEffect()"
			],
			"description": "void Label::disableEffect()"
		},
		 "void RenderTexture::listenToBackground(EventCustom *event)": {
			"prefix": "void RenderTexture::listenToBackground(EventCustom *event)",
			"body": [
				"RenderTexture:listenToBackground(${1:EventCustom *event})"
			],
			"description": "void RenderTexture::listenToBackground(EventCustom *event)"
		},
		 "Rect Helper::convertBoundingBoxToScreen(Node* node)": {
			"prefix": "Rect Helper::convertBoundingBoxToScreen(Node* node)",
			"body": [
				"Helper:convertBoundingBoxToScreen(${1:Node* node})"
			],
			"description": "Rect Helper::convertBoundingBoxToScreen(Node* node)"
		},
		 "void ComAudio::stopBackgroundMusic()": {
			"prefix": "void ComAudio::stopBackgroundMusic()",
			"body": [
				"void ComAudio:stopBackgroundMusic()"
			],
			"description": "void ComAudio::stopBackgroundMusic()"
		},
		 "void ActionManager::resumeTargets(const Vector<Node*>& targetsToResume)": {
			"prefix": "void ActionManager::resumeTargets(const Vector<Node*>& targetsToResume)",
			"body": [
				"ActionManager:resumeTargets(${1:Vector<Node*>& targetsToResume})"
			],
			"description": "void ActionManager::resumeTargets(const Vector<Node*>& targetsToResume)"
		},
		 "void Camera::applyFrameBufferObject()": {
			"prefix": "void Camera::applyFrameBufferObject()",
			"body": [
				"void Camera:applyFrameBufferObject()"
			],
			"description": "void Camera::applyFrameBufferObject()"
		},
		 "void MoveBy::update(float t)": {
			"prefix": "void MoveBy::update(float t)",
			"body": [
				"MoveBy:update(${1:float t})"
			],
			"description": "void MoveBy::update(float t)"
		},
		 "void Camera::unproject(const Size& viewport, const Vec3* src, Vec3* dst) const": {
			"prefix": "void Camera::unproject(const Size& viewport, const Vec3* src, Vec3* dst) const",
			"body": [
				"Camera:unproject(${1:Size& viewport},${2:Vec3* src},${3:Vec3* dst})"
			],
			"description": "void Camera::unproject(const Size& viewport, const Vec3* src, Vec3* dst) const"
		},
		 "void MotionStreak::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void MotionStreak::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"MotionStreak:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void MotionStreak::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "void BMFontConfiguration::purgeFontDefDictionary()": {
			"prefix": "void BMFontConfiguration::purgeFontDefDictionary()",
			"body": [
				"void BMFontConfiguration:purgeFontDefDictionary()"
			],
			"description": "void BMFontConfiguration::purgeFontDefDictionary()"
		},
		 "bool PoolManager::isObjectInPools(Ref* obj) const": {
			"prefix": "bool PoolManager::isObjectInPools(Ref* obj) const",
			"body": [
				"PoolManager:isObjectInPools(${1:Ref* obj})"
			],
			"description": "bool PoolManager::isObjectInPools(Ref* obj) const"
		},
		 "void TintBy::update(float time)": {
			"prefix": "void TintBy::update(float time)",
			"body": [
				"TintBy:update(${1:float time})"
			],
			"description": "void TintBy::update(float time)"
		},
		 "bool __Array::isEqualToArray(__Array* otherArray)": {
			"prefix": "bool __Array::isEqualToArray(__Array* otherArray)",
			"body": [
				"__Array:isEqualToArray(${1:__Array* otherArray})"
			],
			"description": "bool __Array::isEqualToArray(__Array* otherArray)"
		},
		 "void DrawNode::ensureCapacityGLPoint(int count)": {
			"prefix": "void DrawNode::ensureCapacityGLPoint(int count)",
			"body": [
				"DrawNode:ensureCapacityGLPoint(${1:int count})"
			],
			"description": "void DrawNode::ensureCapacityGLPoint(int count)"
		},
		 "void DrawNode::onDrawGLLine(const Mat4 &transform, uint32_t flags)": {
			"prefix": "void DrawNode::onDrawGLLine(const Mat4 &transform, uint32_t flags)",
			"body": [
				"DrawNode:onDrawGLLine(${1:Mat4 &transform},${2:uint32_t flags})"
			],
			"description": "void DrawNode::onDrawGLLine(const Mat4 &transform, uint32_t flags)"
		},
		 "void LabelTTF::disableShadow(bool updateTexture)": {
			"prefix": "void LabelTTF::disableShadow(bool updateTexture)",
			"body": [
				"LabelTTF:disableShadow(${1:bool updateTexture})"
			],
			"description": "void LabelTTF::disableShadow(bool updateTexture)"
		},
		 "void Plane::initPlane(const Vec3& normal, float dist)": {
			"prefix": "void Plane::initPlane(const Vec3& normal, float dist)",
			"body": [
				"Plane:initPlane(${1:Vec3& normal},${2:float dist})"
			],
			"description": "void Plane::initPlane(const Vec3& normal, float dist)"
		},
		 "void TextureCache::removeAllTextures()": {
			"prefix": "void TextureCache::removeAllTextures()",
			"body": [
				"void TextureCache:removeAllTextures()"
			],
			"description": "void TextureCache::removeAllTextures()"
		},
		 "void PhysicsShape::setRestitution(float restitution)": {
			"prefix": "void PhysicsShape::setRestitution(float restitution)",
			"body": [
				"PhysicsShape:setRestitution(${1:float restitution})"
			],
			"description": "void PhysicsShape::setRestitution(float restitution)"
		},
		 "void VideoPlayer::play()": {
			"prefix": "void VideoPlayer::play()",
			"body": [
				"void VideoPlayer:play()"
			],
			"description": "void VideoPlayer::play()"
		},
		 "void Physics3DRigidBody::setActive(bool active)": {
			"prefix": "void Physics3DRigidBody::setActive(bool active)",
			"body": [
				"Physics3DRigidBody:setActive(${1:bool active})"
			],
			"description": "void Physics3DRigidBody::setActive(bool active)"
		},
		 "void AABB::transform(const Mat4& mat)": {
			"prefix": "void AABB::transform(const Mat4& mat)",
			"body": [
				"AABB:transform(${1:Mat4& mat})"
			],
			"description": "void AABB::transform(const Mat4& mat)"
		},
		 "void DisplayLinkDirector::stopAnimation()": {
			"prefix": "void DisplayLinkDirector::stopAnimation()",
			"body": [
				"void DisplayLinkDirector:stopAnimation()"
			],
			"description": "void DisplayLinkDirector::stopAnimation()"
		},
		 "void calculateNamespacePath(const std::string& urlString, std::string& fileString, std::vector<std::string>& namespacePath)": {
			"prefix": "void calculateNamespacePath(const std::string& urlString, std::string& fileString, std::vector<std::string>& namespacePath)",
			"body": [
				"calculateNamespacePath(${1:std:string& urlString},${2:std:string& fileString},${3:std:vector<std:string>& namespacePath})"
			],
			"description": "void calculateNamespacePath(const std::string& urlString, std::string& fileString, std::vector<std::string>& namespacePath)"
		},
		 "void Terrain::QuadTree::preCalculateAABB(const Mat4 & worldTransform)": {
			"prefix": "void Terrain::QuadTree::preCalculateAABB(const Mat4 & worldTransform)",
			"body": [
				"Terrain:QuadTree:preCalculateAABB(${1:Mat4 & worldTransform})"
			],
			"description": "void Terrain::QuadTree::preCalculateAABB(const Mat4 & worldTransform)"
		},
		 "AttachNode* Sprite3D::getAttachNode(const std::string& boneName)": {
			"prefix": "AttachNode* Sprite3D::getAttachNode(const std::string& boneName)",
			"body": [
				"Sprite3D:getAttachNode(${1:std:string& boneName})"
			],
			"description": "AttachNode* Sprite3D::getAttachNode(const std::string& boneName)"
		},
		 "float PhysicsContactPreSolve::getFriction() const": {
			"prefix": "float PhysicsContactPreSolve::getFriction() const",
			"body": [
				"float PhysicsContactPreSolve:getFriction() "
			],
			"description": "float PhysicsContactPreSolve::getFriction() const"
		},
		 "bool Image::initWithPVRv2Data(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithPVRv2Data(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithPVRv2Data(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithPVRv2Data(const unsigned char * data, ssize_t dataLen)"
		},
		 "void AudioCache::invokingPlayCallbacks()": {
			"prefix": "void AudioCache::invokingPlayCallbacks()",
			"body": [
				"void AudioCache:invokingPlayCallbacks()"
			],
			"description": "void AudioCache::invokingPlayCallbacks()"
		},
		 "void __String::acceptVisitor(DataVisitor &visitor)": {
			"prefix": "void __String::acceptVisitor(DataVisitor &visitor)",
			"body": [
				"__String:acceptVisitor(${1:DataVisitor &visitor})"
			],
			"description": "void __String::acceptVisitor(DataVisitor &visitor)"
		},
		 "bool Animate::initWithAnimation(Animation* animation)": {
			"prefix": "bool Animate::initWithAnimation(Animation* animation)",
			"body": [
				"Animate:initWithAnimation(${1:Animation* animation})"
			],
			"description": "bool Animate::initWithAnimation(Animation* animation)"
		},
		 "void Downloader::reportProgressFinished(double totalToDownload, double nowDownloaded, const DownloadUnit* unit)": {
			"prefix": "void Downloader::reportProgressFinished(double totalToDownload, double nowDownloaded, const DownloadUnit* unit)",
			"body": [
				"Downloader:reportProgressFinished(${1:double totalToDownload},${2:double nowDownloaded},${3:DownloadUnit* unit})"
			],
			"description": "void Downloader::reportProgressFinished(double totalToDownload, double nowDownloaded, const DownloadUnit* unit)"
		},
		 "void ProtectedNode::disableCascadeColor()": {
			"prefix": "void ProtectedNode::disableCascadeColor()",
			"body": [
				"void ProtectedNode:disableCascadeColor()"
			],
			"description": "void ProtectedNode::disableCascadeColor()"
		},
		 "void EditBox::keyboardWillShow(IMEKeyboardNotificationInfo& info)": {
			"prefix": "void EditBox::keyboardWillShow(IMEKeyboardNotificationInfo& info)",
			"body": [
				"EditBox:keyboardWillShow(${1:IMEKeyboardNotificationInfo& info})"
			],
			"description": "void EditBox::keyboardWillShow(IMEKeyboardNotificationInfo& info)"
		},
		 "bool ParticleSystem::addParticle()": {
			"prefix": "bool ParticleSystem::addParticle()",
			"body": [
				"bool ParticleSystem:addParticle()"
			],
			"description": "bool ParticleSystem::addParticle()"
		},
		 "void LabelTTF::setFontSize(float fontSize)": {
			"prefix": "void LabelTTF::setFontSize(float fontSize)",
			"body": [
				"LabelTTF:setFontSize(${1:float fontSize})"
			],
			"description": "void LabelTTF::setFontSize(float fontSize)"
		},
		 "const AABB& Sprite3D::getAABB() const": {
			"prefix": "const AABB& Sprite3D::getAABB() const",
			"body": [
				" AABB& Sprite3D:getAABB() "
			],
			"description": "const AABB& Sprite3D::getAABB() const"
		},
		 "void Node::setRotationQuat(const Quaternion& quat)": {
			"prefix": "void Node::setRotationQuat(const Quaternion& quat)",
			"body": [
				"Node:setRotationQuat(${1:Quaternion& quat})"
			],
			"description": "void Node::setRotationQuat(const Quaternion& quat)"
		},
		 "const Size& Text::getTextAreaSize()const": {
			"prefix": "const Size& Text::getTextAreaSize()const",
			"body": [
				" Size& Text:getTextAreaSize()"
			],
			"description": "const Size& Text::getTextAreaSize()const"
		},
		 "int DictionaryHelper::getIntValue_json(const rapidjson::Value& root, const char* key, int def)": {
			"prefix": "int DictionaryHelper::getIntValue_json(const rapidjson::Value& root, const char* key, int def)",
			"body": [
				"DictionaryHelper:getIntValue_json(${1:rapidjson:Value& root},${2:char* key},${3:int def})"
			],
			"description": "int DictionaryHelper::getIntValue_json(const rapidjson::Value& root, const char* key, int def)"
		},
		 "void TextField::detachWithIMEEvent()": {
			"prefix": "void TextField::detachWithIMEEvent()",
			"body": [
				"void TextField:detachWithIMEEvent()"
			],
			"description": "void TextField::detachWithIMEEvent()"
		},
		 "void Layout::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void Layout::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"Layout:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void Layout::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "Show * Show::clone() const": {
			"prefix": "Show * Show::clone() const",
			"body": [
				"Show * Show:clone() "
			],
			"description": "Show * Show::clone() const"
		},
		 "void ScrollView::removeAllChildrenWithCleanup(bool cleanup)": {
			"prefix": "void ScrollView::removeAllChildrenWithCleanup(bool cleanup)",
			"body": [
				"ScrollView:removeAllChildrenWithCleanup(${1:bool cleanup})"
			],
			"description": "void ScrollView::removeAllChildrenWithCleanup(bool cleanup)"
		},
		 "ssize_t BundleReader::length()": {
			"prefix": "ssize_t BundleReader::length()",
			"body": [
				"ssize_t BundleReader:length()"
			],
			"description": "ssize_t BundleReader::length()"
		},
		 "__Set * __Set::create()": {
			"prefix": "__Set * __Set::create()",
			"body": [
				"__Set * __Set:create()"
			],
			"description": "__Set * __Set::create()"
		},
		 "bool MenuItemLabel::initWithLabel(Node* label, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "bool MenuItemLabel::initWithLabel(Node* label, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"MenuItemLabel:initWithLabel(${1:Node* label},${2:Ref* target},${3:SEL_MenuHandler selector})"
			],
			"description": "bool MenuItemLabel::initWithLabel(Node* label, Ref* target, SEL_MenuHandler selector)"
		},
		 "ActionInterval* ActionFrame::getEasingAction(ActionInterval* action)": {
			"prefix": "ActionInterval* ActionFrame::getEasingAction(ActionInterval* action)",
			"body": [
				"ActionFrame:getEasingAction(${1:ActionInterval* action})"
			],
			"description": "ActionInterval* ActionFrame::getEasingAction(ActionInterval* action)"
		},
		 "void CCBAnimationManager::setFirstFrame(Node *pNode, CCBSequenceProperty *pSeqProp, float fTweenDuration)": {
			"prefix": "void CCBAnimationManager::setFirstFrame(Node *pNode, CCBSequenceProperty *pSeqProp, float fTweenDuration)",
			"body": [
				"CCBAnimationManager:setFirstFrame(${1:Node *pNode},${2:CCBSequenceProperty *pSeqProp},${3:float fTweenDuration})"
			],
			"description": "void CCBAnimationManager::setFirstFrame(Node *pNode, CCBSequenceProperty *pSeqProp, float fTweenDuration)"
		},
		 "ActionTimelineNode* CSLoader::createActionTimelineNode(const std::string& filename)": {
			"prefix": "ActionTimelineNode* CSLoader::createActionTimelineNode(const std::string& filename)",
			"body": [
				"CSLoader:createActionTimelineNode(${1:std:string& filename})"
			],
			"description": "ActionTimelineNode* CSLoader::createActionTimelineNode(const std::string& filename)"
		},
		 "float PhysicsJointGear::getRatio() const": {
			"prefix": "float PhysicsJointGear::getRatio() const",
			"body": [
				"float PhysicsJointGear:getRatio() "
			],
			"description": "float PhysicsJointGear::getRatio() const"
		},
		 "const std::string& LabelBMFont::getString() const": {
			"prefix": "const std::string& LabelBMFont::getString() const",
			"body": [
				" std:string& LabelBMFont:getString() "
			],
			"description": "const std::string& LabelBMFont::getString() const"
		},
		 "float Node::getRotationSkewX() const": {
			"prefix": "float Node::getRotationSkewX() const",
			"body": [
				"float Node:getRotationSkewX() "
			],
			"description": "float Node::getRotationSkewX() const"
		},
		 "Rect GLView::getVisibleRect() const": {
			"prefix": "Rect GLView::getVisibleRect() const",
			"body": [
				"Rect GLView:getVisibleRect() "
			],
			"description": "Rect GLView::getVisibleRect() const"
		},
		 "void Widget::FocusNavigationController::addKeyboardEventListener()": {
			"prefix": "void Widget::FocusNavigationController::addKeyboardEventListener()",
			"body": [
				"void Widget:FocusNavigationController:addKeyboardEventListener()"
			],
			"description": "void Widget::FocusNavigationController::addKeyboardEventListener()"
		},
		 "Size TextField::getVirtualRendererSize() const": {
			"prefix": "Size TextField::getVirtualRendererSize() const",
			"body": [
				"Size TextField:getVirtualRendererSize() "
			],
			"description": "Size TextField::getVirtualRendererSize() const"
		},
		 "Skin *Skin::create(const std::string& pszFileName)": {
			"prefix": "Skin *Skin::create(const std::string& pszFileName)",
			"body": [
				"*Skin:create(${1:std:string& pszFileName})"
			],
			"description": "Skin *Skin::create(const std::string& pszFileName)"
		},
		 "void Component::update(float delta)": {
			"prefix": "void Component::update(float delta)",
			"body": [
				"Component:update(${1:float delta})"
			],
			"description": "void Component::update(float delta)"
		},
		 "const BlendFunc& Sprite3D::getBlendFunc() const": {
			"prefix": "const BlendFunc& Sprite3D::getBlendFunc() const",
			"body": [
				" BlendFunc& Sprite3D:getBlendFunc() "
			],
			"description": "const BlendFunc& Sprite3D::getBlendFunc() const"
		},
		 "long Properties::getLong(const char* name) const": {
			"prefix": "long Properties::getLong(const char* name) const",
			"body": [
				"Properties:getLong(${1:char* name})"
			],
			"description": "long Properties::getLong(const char* name) const"
		},
		 "DictElement::DictElement(const char* pszKey, Ref* pObject)": {
			"prefix": "DictElement::DictElement(const char* pszKey, Ref* pObject)",
			"body": [
				"pszKey},${2:Ref* pObject})"
			],
			"description": "DictElement::DictElement(const char* pszKey, Ref* pObject)"
		},
		 "float Physics3DSliderConstraint::getDampingDirAng() const": {
			"prefix": "float Physics3DSliderConstraint::getDampingDirAng() const",
			"body": [
				"float Physics3DSliderConstraint:getDampingDirAng() "
			],
			"description": "float Physics3DSliderConstraint::getDampingDirAng() const"
		},
		 "void TransformHelp::transformToParent(BaseData &node, const BaseData &parentNode)": {
			"prefix": "void TransformHelp::transformToParent(BaseData &node, const BaseData &parentNode)",
			"body": [
				"TransformHelp:transformToParent(${1:BaseData &node},${2:BaseData &parentNode})"
			],
			"description": "void TransformHelp::transformToParent(BaseData &node, const BaseData &parentNode)"
		},
		 "void TextAtlas::onSizeChanged()": {
			"prefix": "void TextAtlas::onSizeChanged()",
			"body": [
				"void TextAtlas:onSizeChanged()"
			],
			"description": "void TextAtlas::onSizeChanged()"
		},
		 "void EditBox::draw(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void EditBox::draw(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"EditBox:draw(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void EditBox::draw(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void Layout::setBackGroundImageOpacity(GLubyte opacity)": {
			"prefix": "void Layout::setBackGroundImageOpacity(GLubyte opacity)",
			"body": [
				"Layout:setBackGroundImageOpacity(${1:GLubyte opacity})"
			],
			"description": "void Layout::setBackGroundImageOpacity(GLubyte opacity)"
		},
		 "void Plane::initPlane(const Vec3& p1, const Vec3& p2, const Vec3& p3)": {
			"prefix": "void Plane::initPlane(const Vec3& p1, const Vec3& p2, const Vec3& p3)",
			"body": [
				"Plane:initPlane(${1:Vec3& p1},${2:Vec3& p2},${3:Vec3& p3})"
			],
			"description": "void Plane::initPlane(const Vec3& p1, const Vec3& p2, const Vec3& p3)"
		},
		 "void HttpClient::enableCookies(const char* cookieFile)": {
			"prefix": "void HttpClient::enableCookies(const char* cookieFile)",
			"body": [
				"HttpClient:enableCookies(${1:char* cookieFile})"
			],
			"description": "void HttpClient::enableCookies(const char* cookieFile)"
		},
		 "bool CCBAnimationManager::init()": {
			"prefix": "bool CCBAnimationManager::init()",
			"body": [
				"bool CCBAnimationManager:init()"
			],
			"description": "bool CCBAnimationManager::init()"
		},
		 "void VertexAttribValue::apply()": {
			"prefix": "void VertexAttribValue::apply()",
			"body": [
				"void VertexAttribValue:apply()"
			],
			"description": "void VertexAttribValue::apply()"
		},
		 "void PhysicsShape::recenterPoints(Vec2* points, int count, const Vec2& center)": {
			"prefix": "void PhysicsShape::recenterPoints(Vec2* points, int count, const Vec2& center)",
			"body": [
				"PhysicsShape:recenterPoints(${1:Vec2* points},${2:int count},${3:Vec2& center})"
			],
			"description": "void PhysicsShape::recenterPoints(Vec2* points, int count, const Vec2& center)"
		},
		 "void Skybox::initBuffers()": {
			"prefix": "void Skybox::initBuffers()",
			"body": [
				"void Skybox:initBuffers()"
			],
			"description": "void Skybox::initBuffers()"
		},
		 "TransitionProgressHorizontal* TransitionProgressHorizontal::create(float t, Scene* scene)": {
			"prefix": "TransitionProgressHorizontal* TransitionProgressHorizontal::create(float t, Scene* scene)",
			"body": [
				"TransitionProgressHorizontal:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionProgressHorizontal* TransitionProgressHorizontal::create(float t, Scene* scene)"
		},
		 "WebViewImpl::WebViewImpl(WebView *webView) : _viewTag(-1), _webView(webView)": {
			"prefix": "WebViewImpl::WebViewImpl(WebView *webView) : _viewTag(-1), _webView(webView)",
			"body": [
				"*webView})"
			],
			"description": "WebViewImpl::WebViewImpl(WebView *webView) : _viewTag(-1), _webView(webView)"
		},
		 "const std::string& SocketIOPacket::typeForIndex(int index)const": {
			"prefix": "const std::string& SocketIOPacket::typeForIndex(int index)const",
			"body": [
				"std:string& SocketIOPacket:typeForIndex(${1:int index})"
			],
			"description": "const std::string& SocketIOPacket::typeForIndex(int index)const"
		},
		 "void Physics3DSliderConstraint::setPoweredLinMotor(bool onOff)": {
			"prefix": "void Physics3DSliderConstraint::setPoweredLinMotor(bool onOff)",
			"body": [
				"Physics3DSliderConstraint:setPoweredLinMotor(${1:bool onOff})"
			],
			"description": "void Physics3DSliderConstraint::setPoweredLinMotor(bool onOff)"
		},
		 "static tinyxml2::XMLElement* generateElementForArray(const ValueVector& array, tinyxml2::XMLDocument *pDoc)": {
			"prefix": "static tinyxml2::XMLElement* generateElementForArray(const ValueVector& array, tinyxml2::XMLDocument *pDoc)",
			"body": [
				"tinyxml2:XMLElement* generateElementForArray(${1:ValueVector& array},${2:tinyxml2:XMLDocument *pDoc})"
			],
			"description": "static tinyxml2::XMLElement* generateElementForArray(const ValueVector& array, tinyxml2::XMLDocument *pDoc)"
		},
		 "void PoolManager::pop()": {
			"prefix": "void PoolManager::pop()",
			"body": [
				"void PoolManager:pop()"
			],
			"description": "void PoolManager::pop()"
		},
		 "void loadUrlJNI(const int index, const std::string &url)": {
			"prefix": "void loadUrlJNI(const int index, const std::string &url)",
			"body": [
				"loadUrlJNI(${1:int index},${2:std:string &url})"
			],
			"description": "void loadUrlJNI(const int index, const std::string &url)"
		},
		 "void Timer::update(float dt)": {
			"prefix": "void Timer::update(float dt)",
			"body": [
				"Timer:update(${1:float dt})"
			],
			"description": "void Timer::update(float dt)"
		},
		 "void Quaternion::multiply(const Quaternion& q)": {
			"prefix": "void Quaternion::multiply(const Quaternion& q)",
			"body": [
				"Quaternion:multiply(${1:Quaternion& q})"
			],
			"description": "void Quaternion::multiply(const Quaternion& q)"
		},
		 "FlipY3D* FlipY3D::clone() const": {
			"prefix": "FlipY3D* FlipY3D::clone() const",
			"body": [
				"FlipY3D* FlipY3D:clone() "
			],
			"description": "FlipY3D* FlipY3D::clone() const"
		},
		 "void AtlasNode::updateBlendFunc()": {
			"prefix": "void AtlasNode::updateBlendFunc()",
			"body": [
				"void AtlasNode:updateBlendFunc()"
			],
			"description": "void AtlasNode::updateBlendFunc()"
		},
		 "void Grid3D::setVertex(const Vec2& pos, const Vec3& vertex)": {
			"prefix": "void Grid3D::setVertex(const Vec2& pos, const Vec3& vertex)",
			"body": [
				"Grid3D:setVertex(${1:Vec2& pos},${2:Vec3& vertex})"
			],
			"description": "void Grid3D::setVertex(const Vec2& pos, const Vec3& vertex)"
		},
		 "void Downloader::downloadSync(const std::string& srcUrl, const std::string& storagePath, const std::string& customId/* = ""*/)": {
			"prefix": "void Downloader::downloadSync(const std::string& srcUrl, const std::string& storagePath, const std::string& customId/* = ""*/)",
			"body": [
				"Downloader:downloadSync(${1:std:string& srcUrl},${2:std:string& storagePath},${3:std:string& customId/* = ""*/})"
			],
			"description": "void Downloader::downloadSync(const std::string& srcUrl, const std::string& storagePath, const std::string& customId/* = ""*/)"
		},
		 "void ActionManager::resumeTarget(Node *target)": {
			"prefix": "void ActionManager::resumeTarget(Node *target)",
			"body": [
				"ActionManager:resumeTarget(${1:Node *target})"
			],
			"description": "void ActionManager::resumeTarget(Node *target)"
		},
		 "void PhysicsBody::setGravityEnable(bool enable)": {
			"prefix": "void PhysicsBody::setGravityEnable(bool enable)",
			"body": [
				"PhysicsBody:setGravityEnable(${1:bool enable})"
			],
			"description": "void PhysicsBody::setGravityEnable(bool enable)"
		},
		 "SocketIOPacket * SocketIOPacket::createPacketWithTypeIndex(int type, SocketIOPacket::SocketIOVersion version)": {
			"prefix": "SocketIOPacket * SocketIOPacket::createPacketWithTypeIndex(int type, SocketIOPacket::SocketIOVersion version)",
			"body": [
				"* SocketIOPacket:createPacketWithTypeIndex(${1:int type},${2:SocketIOPacket:SocketIOVersion version})"
			],
			"description": "SocketIOPacket * SocketIOPacket::createPacketWithTypeIndex(int type, SocketIOPacket::SocketIOVersion version)"
		},
		 "int PhysicsShapePolygon::getPointsCount() const": {
			"prefix": "int PhysicsShapePolygon::getPointsCount() const",
			"body": [
				"int PhysicsShapePolygon:getPointsCount() "
			],
			"description": "int PhysicsShapePolygon::getPointsCount() const"
		},
		 "void Sprite::setAnchorPoint(const Vec2& anchor)": {
			"prefix": "void Sprite::setAnchorPoint(const Vec2& anchor)",
			"body": [
				"Sprite:setAnchorPoint(${1:Vec2& anchor})"
			],
			"description": "void Sprite::setAnchorPoint(const Vec2& anchor)"
		},
		 "uint32_t Node::processParentFlags(const Mat4& parentTransform, uint32_t parentFlags)": {
			"prefix": "uint32_t Node::processParentFlags(const Mat4& parentTransform, uint32_t parentFlags)",
			"body": [
				"Node:processParentFlags(${1:Mat4& parentTransform},${2:uint32_t parentFlags})"
			],
			"description": "uint32_t Node::processParentFlags(const Mat4& parentTransform, uint32_t parentFlags)"
		},
		 "Component* ComponentContainer::get(const std::string& name) const": {
			"prefix": "Component* ComponentContainer::get(const std::string& name) const",
			"body": [
				"ComponentContainer:get(${1:std:string& name})"
			],
			"description": "Component* ComponentContainer::get(const std::string& name) const"
		},
		 "void RichText::handleTextRenderer(const std::string& text, const std::string& fontName, float fontSize, const Color3B &color, GLubyte opacity)": {
			"prefix": "void RichText::handleTextRenderer(const std::string& text, const std::string& fontName, float fontSize, const Color3B &color, GLubyte opacity)",
			"body": [
				"RichText:handleTextRenderer(${1:std:string& text},${2:std:string& fontName},${3:float fontSize},${4:Color3B &color},${5:GLubyte opacity})"
			],
			"description": "void RichText::handleTextRenderer(const std::string& text, const std::string& fontName, float fontSize, const Color3B &color, GLubyte opacity)"
		},
		 "void Bone3D::removeChildBoneByIndex(int index)": {
			"prefix": "void Bone3D::removeChildBoneByIndex(int index)",
			"body": [
				"Bone3D:removeChildBoneByIndex(${1:int index})"
			],
			"description": "void Bone3D::removeChildBoneByIndex(int index)"
		},
		 "bool FileUtils::isDirectoryExistInternal(const std::string& dirPath) const": {
			"prefix": "bool FileUtils::isDirectoryExistInternal(const std::string& dirPath) const",
			"body": [
				"FileUtils:isDirectoryExistInternal(${1:std:string& dirPath})"
			],
			"description": "bool FileUtils::isDirectoryExistInternal(const std::string& dirPath) const"
		},
		 "Widget* GUIReader::widgetFromBinaryFile(const char *fileName)": {
			"prefix": "Widget* GUIReader::widgetFromBinaryFile(const char *fileName)",
			"body": [
				"GUIReader:widgetFromBinaryFile(${1:char *fileName})"
			],
			"description": "Widget* GUIReader::widgetFromBinaryFile(const char *fileName)"
		},
		 "EventListenerCustom* EventListenerCustom::create(const std::string& eventName, const std::function<void(EventCustom*)>& callback)": {
			"prefix": "EventListenerCustom* EventListenerCustom::create(const std::string& eventName, const std::function<void(EventCustom*)>& callback)",
			"body": [
				"EventListenerCustom:create(${1:std:string& eventName},${2:std:function<void(EventCustom*})"
			],
			"description": "EventListenerCustom* EventListenerCustom::create(const std::string& eventName, const std::function<void(EventCustom*)>& callback)"
		},
		 "double __String::doubleValue() const": {
			"prefix": "double __String::doubleValue() const",
			"body": [
				"double __String:doubleValue() "
			],
			"description": "double __String::doubleValue() const"
		},
		 "void Scale9SpriteLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)": {
			"prefix": "void Scale9SpriteLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)",
			"body": [
				"Scale9SpriteLoader:onHandlePropTypeSize(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Size pSize},${5:CCBReader * ccbReader})"
			],
			"description": "void Scale9SpriteLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)"
		},
		 "bool ZipFile::fileExists(const std::string &fileName) const": {
			"prefix": "bool ZipFile::fileExists(const std::string &fileName) const",
			"body": [
				"ZipFile:fileExists(${1:std:string &fileName})"
			],
			"description": "bool ZipFile::fileExists(const std::string &fileName) const"
		},
		 "__Array* __Array::createWithObject(Ref* object)": {
			"prefix": "__Array* __Array::createWithObject(Ref* object)",
			"body": [
				"__Array:createWithObject(${1:Ref* object})"
			],
			"description": "__Array* __Array::createWithObject(Ref* object)"
		},
		 "void GLProgramCache::loadDefaultGLProgram(GLProgram *p, int type)": {
			"prefix": "void GLProgramCache::loadDefaultGLProgram(GLProgram *p, int type)",
			"body": [
				"GLProgramCache:loadDefaultGLProgram(${1:GLProgram *p},${2:int type})"
			],
			"description": "void GLProgramCache::loadDefaultGLProgram(GLProgram *p, int type)"
		},
		 "float ScrollViewBar::getWidth() const": {
			"prefix": "float ScrollViewBar::getWidth() const",
			"body": [
				"float ScrollViewBar:getWidth() "
			],
			"description": "float ScrollViewBar::getWidth() const"
		},
		 "void GLProgram::parseUniforms()": {
			"prefix": "void GLProgram::parseUniforms()",
			"body": [
				"void GLProgram:parseUniforms()"
			],
			"description": "void GLProgram::parseUniforms()"
		},
		 "const std::string& TextBMFont::getString()const": {
			"prefix": "const std::string& TextBMFont::getString()const",
			"body": [
				" std:string& TextBMFont:getString()"
			],
			"description": "const std::string& TextBMFont::getString()const"
		},
		 "float Physics3DHingeConstraint::getMaxMotorImpulse() const": {
			"prefix": "float Physics3DHingeConstraint::getMaxMotorImpulse() const",
			"body": [
				"float Physics3DHingeConstraint:getMaxMotorImpulse() "
			],
			"description": "float Physics3DHingeConstraint::getMaxMotorImpulse() const"
		},
		 "void SpotLight::setDirection(const Vec3 &dir)": {
			"prefix": "void SpotLight::setDirection(const Vec3 &dir)",
			"body": [
				"SpotLight:setDirection(${1:Vec3 &dir})"
			],
			"description": "void SpotLight::setDirection(const Vec3 &dir)"
		},
		 "void DictionaryHelper::destroyInstance()": {
			"prefix": "void DictionaryHelper::destroyInstance()",
			"body": [
				"void DictionaryHelper:destroyInstance()"
			],
			"description": "void DictionaryHelper::destroyInstance()"
		},
		 "void FadeOutTRTiles::update(float time)": {
			"prefix": "void FadeOutTRTiles::update(float time)",
			"body": [
				"FadeOutTRTiles:update(${1:float time})"
			],
			"description": "void FadeOutTRTiles::update(float time)"
		},
		 "void TransitionTurnOffTiles::onEnter()": {
			"prefix": "void TransitionTurnOffTiles::onEnter()",
			"body": [
				"void TransitionTurnOffTiles:onEnter()"
			],
			"description": "void TransitionTurnOffTiles::onEnter()"
		},
		 "Vec2 PhysicsBody::local2World(const Vec2& point)": {
			"prefix": "Vec2 PhysicsBody::local2World(const Vec2& point)",
			"body": [
				"PhysicsBody:local2World(${1:Vec2& point})"
			],
			"description": "Vec2 PhysicsBody::local2World(const Vec2& point)"
		},
		 "EaseBackInOut* EaseBackInOut::reverse() const": {
			"prefix": "EaseBackInOut* EaseBackInOut::reverse() const",
			"body": [
				"EaseBackInOut* EaseBackInOut:reverse() "
			],
			"description": "EaseBackInOut* EaseBackInOut::reverse() const"
		},
		 "bool InputDelegate::isTouchEnabled() const": {
			"prefix": "bool InputDelegate::isTouchEnabled() const",
			"body": [
				"bool InputDelegate:isTouchEnabled() "
			],
			"description": "bool InputDelegate::isTouchEnabled() const"
		},
		 "ContourData *TextureData::getContourData(int index)": {
			"prefix": "ContourData *TextureData::getContourData(int index)",
			"body": [
				"*TextureData:getContourData(${1:int index})"
			],
			"description": "ContourData *TextureData::getContourData(int index)"
		},
		 "void ParticleSystemQuadLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)": {
			"prefix": "void ParticleSystemQuadLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)",
			"body": [
				"ParticleSystemQuadLoader:onHandlePropTypeFloat(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:float pFloat},${5:CCBReader * ccbReader})"
			],
			"description": "void ParticleSystemQuadLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)"
		},
		 "void LabelBMFontLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)": {
			"prefix": "void LabelBMFontLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)",
			"body": [
				"LabelBMFontLoader:onHandlePropTypeBlendFunc(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:BlendFunc pBlendFunc},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelBMFontLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)"
		},
		 "void ParticleBatchNode::getCurrentIndex(int* oldIndex, int* newIndex, Node* child, int z)": {
			"prefix": "void ParticleBatchNode::getCurrentIndex(int* oldIndex, int* newIndex, Node* child, int z)",
			"body": [
				"ParticleBatchNode:getCurrentIndex(${1:int* oldIndex},${2:int* newIndex},${3:Node* child},${4:int z})"
			],
			"description": "void ParticleBatchNode::getCurrentIndex(int* oldIndex, int* newIndex, Node* child, int z)"
		},
		 "void Mat4::rotate(const Vec3& axis, float angle)": {
			"prefix": "void Mat4::rotate(const Vec3& axis, float angle)",
			"body": [
				"Mat4:rotate(${1:Vec3& axis},${2:float angle})"
			],
			"description": "void Mat4::rotate(const Vec3& axis, float angle)"
		},
		 "const std::vector<float> &in_texcoords, const vertex_index &i)": {
			"prefix": "const std::vector<float> &in_texcoords, const vertex_index &i)",
			"body": [
				" std:vector<float> &in_texcoords,  vertex_index &i)"
			],
			"description": "const std::vector<float> &in_texcoords, const vertex_index &i)"
		},
		 "void EditBoxImplWin::setAnchorPoint(const Vec2& anchorPoint)": {
			"prefix": "void EditBoxImplWin::setAnchorPoint(const Vec2& anchorPoint)",
			"body": [
				"EditBoxImplWin:setAnchorPoint(${1:Vec2& anchorPoint})"
			],
			"description": "void EditBoxImplWin::setAnchorPoint(const Vec2& anchorPoint)"
		},
		 "bool RenderTargetBase::init(unsigned int width, unsigned int height)": {
			"prefix": "bool RenderTargetBase::init(unsigned int width, unsigned int height)",
			"body": [
				"RenderTargetBase:init(${1:unsigned int width},${2:unsigned int height})"
			],
			"description": "bool RenderTargetBase::init(unsigned int width, unsigned int height)"
		},
		 "BlockControlData * NodeLoader::parsePropTypeBlockControl(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "BlockControlData * NodeLoader::parsePropTypeBlockControl(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"* NodeLoader:parsePropTypeBlockControl(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "BlockControlData * NodeLoader::parsePropTypeBlockControl(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void __String::append(const std::string& str)": {
			"prefix": "void __String::append(const std::string& str)",
			"body": [
				"__String:append(${1:std:string& str})"
			],
			"description": "void __String::append(const std::string& str)"
		},
		 "bool Widget::hitTest(const Vec2 &pt, const Camera* camera, Vec3 *p) const": {
			"prefix": "bool Widget::hitTest(const Vec2 &pt, const Camera* camera, Vec3 *p) const",
			"body": [
				"Widget:hitTest(${1:Vec2 &pt},${2:Camera* camera},${3:Vec3 *p})"
			],
			"description": "bool Widget::hitTest(const Vec2 &pt, const Camera* camera, Vec3 *p) const"
		},
		 "const VertexBuffer* MeshIndexData::getVertexBuffer() const": {
			"prefix": "const VertexBuffer* MeshIndexData::getVertexBuffer() const",
			"body": [
				" VertexBuffer* MeshIndexData:getVertexBuffer() "
			],
			"description": "const VertexBuffer* MeshIndexData::getVertexBuffer() const"
		},
		 "void PhysicsBody::setPositionOffset(const Vec2& position)": {
			"prefix": "void PhysicsBody::setPositionOffset(const Vec2& position)",
			"body": [
				"PhysicsBody:setPositionOffset(${1:Vec2& position})"
			],
			"description": "void PhysicsBody::setPositionOffset(const Vec2& position)"
		},
		 "std::set<unsigned int>* BMFontConfiguration::getCharacterSet() const": {
			"prefix": "std::set<unsigned int>* BMFontConfiguration::getCharacterSet() const",
			"body": [
				"std:set<unsigned int>* BMFontConfiguration:getCharacterSet() "
			],
			"description": "std::set<unsigned int>* BMFontConfiguration::getCharacterSet() const"
		},
		 "bool RelativeLayoutManager::caculateFinalPositionWithRelativeWidget(LayoutProtocol *layout)": {
			"prefix": "bool RelativeLayoutManager::caculateFinalPositionWithRelativeWidget(LayoutProtocol *layout)",
			"body": [
				"RelativeLayoutManager:caculateFinalPositionWithRelativeWidget(${1:LayoutProtocol *layout})"
			],
			"description": "bool RelativeLayoutManager::caculateFinalPositionWithRelativeWidget(LayoutProtocol *layout)"
		},
		 "void AttachNode::visit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)": {
			"prefix": "void AttachNode::visit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)",
			"body": [
				"AttachNode:visit(${1:Renderer *renderer},${2:Mat4& parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void AttachNode::visit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)"
		},
		 "void SkeletonRenderer::setBonesToSetupPose ()": {
			"prefix": "void SkeletonRenderer::setBonesToSetupPose ()",
			"body": [
				"void SkeletonRenderer:setBonesToSetupPose ()"
			],
			"description": "void SkeletonRenderer::setBonesToSetupPose ()"
		},
		 "void NodeLoader::onHandlePropTypeString(Node * pNode, Node * pParent, const char* pPropertyName, const char * pString, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeString(Node * pNode, Node * pParent, const char* pPropertyName, const char * pString, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeString(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:char * pString},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeString(Node * pNode, Node * pParent, const char* pPropertyName, const char * pString, CCBReader * ccbReader)"
		},
		 "void Node::removeAllChildren()": {
			"prefix": "void Node::removeAllChildren()",
			"body": [
				"void Node:removeAllChildren()"
			],
			"description": "void Node::removeAllChildren()"
		},
		 "void ActionCamera::setCenter(const Vec3& center)": {
			"prefix": "void ActionCamera::setCenter(const Vec3& center)",
			"body": [
				"ActionCamera:setCenter(${1:Vec3& center})"
			],
			"description": "void ActionCamera::setCenter(const Vec3& center)"
		},
		 "void ExtraAction::update(float time)": {
			"prefix": "void ExtraAction::update(float time)",
			"body": [
				"ExtraAction:update(${1:float time})"
			],
			"description": "void ExtraAction::update(float time)"
		},
		 "MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap)": {
			"prefix": "MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap)",
			"body": [
				"* MenuItemAtlasFont:create(${1:std:string& value},${2:std:string& charMapFile},${3:int itemWidth},${4:int itemHeight},${5:char startCharMap})"
			],
			"description": "MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap)"
		},
		 "Sequence* Sequence::createWithTwoActions(FiniteTimeAction *actionOne, FiniteTimeAction *actionTwo)": {
			"prefix": "Sequence* Sequence::createWithTwoActions(FiniteTimeAction *actionOne, FiniteTimeAction *actionTwo)",
			"body": [
				"Sequence:createWithTwoActions(${1:FiniteTimeAction *actionOne},${2:FiniteTimeAction *actionTwo})"
			],
			"description": "Sequence* Sequence::createWithTwoActions(FiniteTimeAction *actionOne, FiniteTimeAction *actionTwo)"
		},
		 "ActionFloat* ActionFloat::reverse() const": {
			"prefix": "ActionFloat* ActionFloat::reverse() const",
			"body": [
				"ActionFloat* ActionFloat:reverse() "
			],
			"description": "ActionFloat* ActionFloat::reverse() const"
		},
		 "bool Ray::intersects(const OBB& obb, float* distance) const": {
			"prefix": "bool Ray::intersects(const OBB& obb, float* distance) const",
			"body": [
				"Ray:intersects(${1:OBB& obb},${2:float* distance})"
			],
			"description": "bool Ray::intersects(const OBB& obb, float* distance) const"
		},
		 "void MenuItemLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)": {
			"prefix": "void MenuItemLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)",
			"body": [
				"MenuItemLoader:onHandlePropTypeCheck(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:bool pCheck},${5:CCBReader * ccbReader})"
			],
			"description": "void MenuItemLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)"
		},
		 "bool PhysicsJointFixed::createConstraints()": {
			"prefix": "bool PhysicsJointFixed::createConstraints()",
			"body": [
				"bool PhysicsJointFixed:createConstraints()"
			],
			"description": "bool PhysicsJointFixed::createConstraints()"
		},
		 "void SIOClientImpl::connectToEndpoint(const std::string& endpoint)": {
			"prefix": "void SIOClientImpl::connectToEndpoint(const std::string& endpoint)",
			"body": [
				"SIOClientImpl:connectToEndpoint(${1:std:string& endpoint})"
			],
			"description": "void SIOClientImpl::connectToEndpoint(const std::string& endpoint)"
		},
		 "float Vec3::distance(const Vec3& v) const": {
			"prefix": "float Vec3::distance(const Vec3& v) const",
			"body": [
				"Vec3:distance(${1:Vec3& v})"
			],
			"description": "float Vec3::distance(const Vec3& v) const"
		},
		 "void GLProgramState::setNodeBinding(Node* target)": {
			"prefix": "void GLProgramState::setNodeBinding(Node* target)",
			"body": [
				"GLProgramState:setNodeBinding(${1:Node* target})"
			],
			"description": "void GLProgramState::setNodeBinding(Node* target)"
		},
		 "bool Terrain::Chunk::getInsterctPointWithRay(const Ray& ray, Vec3 &interscetPoint)": {
			"prefix": "bool Terrain::Chunk::getInsterctPointWithRay(const Ray& ray, Vec3 &interscetPoint)",
			"body": [
				"Terrain:Chunk:getInsterctPointWithRay(${1:Ray& ray},${2:Vec3 &interscetPoint})"
			],
			"description": "bool Terrain::Chunk::getInsterctPointWithRay(const Ray& ray, Vec3 &interscetPoint)"
		},
		 "void BMFontConfiguration::parseInfoArguments(const char* line)": {
			"prefix": "void BMFontConfiguration::parseInfoArguments(const char* line)",
			"body": [
				"BMFontConfiguration:parseInfoArguments(${1:char* line})"
			],
			"description": "void BMFontConfiguration::parseInfoArguments(const char* line)"
		},
		 "Node* Node::getChildByName(const std::string& name) const": {
			"prefix": "Node* Node::getChildByName(const std::string& name) const",
			"body": [
				"Node:getChildByName(${1:std:string& name})"
			],
			"description": "Node* Node::getChildByName(const std::string& name) const"
		},
		 "spBone* SkeletonRenderer::findBone (const std::string& boneName) const": {
			"prefix": "spBone* SkeletonRenderer::findBone (const std::string& boneName) const",
			"body": [
				"SkeletonRenderer:findBone (${1:std:string& boneName})"
			],
			"description": "spBone* SkeletonRenderer::findBone (const std::string& boneName) const"
		},
		 "Rect::Rect(const Vec2& pos, const Size& dimension)": {
			"prefix": "Rect::Rect(const Vec2& pos, const Size& dimension)",
			"body": [
				"pos},${2:Size& dimension})"
			],
			"description": "Rect::Rect(const Vec2& pos, const Size& dimension)"
		},
		 "bool FileUtilsAndroid::isFileExistInternal(const std::string& strFilePath) const": {
			"prefix": "bool FileUtilsAndroid::isFileExistInternal(const std::string& strFilePath) const",
			"body": [
				"FileUtilsAndroid:isFileExistInternal(${1:std:string& strFilePath})"
			],
			"description": "bool FileUtilsAndroid::isFileExistInternal(const std::string& strFilePath) const"
		},
		 "void ActionNode::clearAllFrame()": {
			"prefix": "void ActionNode::clearAllFrame()",
			"body": [
				"void ActionNode:clearAllFrame()"
			],
			"description": "void ActionNode::clearAllFrame()"
		},
		 "bool GroupCommandManager::init()": {
			"prefix": "bool GroupCommandManager::init()",
			"body": [
				"bool GroupCommandManager:init()"
			],
			"description": "bool GroupCommandManager::init()"
		},
		 "void BoneNode::setDebugDrawLength(float length)": {
			"prefix": "void BoneNode::setDebugDrawLength(float length)",
			"body": [
				"BoneNode:setDebugDrawLength(${1:float length})"
			],
			"description": "void BoneNode::setDebugDrawLength(float length)"
		},
		 "float SkeletonRenderer::getTimeScale () const": {
			"prefix": "float SkeletonRenderer::getTimeScale () const",
			"body": [
				"float SkeletonRenderer:getTimeScale () "
			],
			"description": "float SkeletonRenderer::getTimeScale () const"
		},
		 "void __NotificationCenter::removeObserver(Ref *target, const std::string& name)": {
			"prefix": "void __NotificationCenter::removeObserver(Ref *target, const std::string& name)",
			"body": [
				"__NotificationCenter:removeObserver(${1:Ref *target},${2:std:string& name})"
			],
			"description": "void __NotificationCenter::removeObserver(Ref *target, const std::string& name)"
		},
		 "void EditBox::setFont(const char* pFontName, int fontSize)": {
			"prefix": "void EditBox::setFont(const char* pFontName, int fontSize)",
			"body": [
				"EditBox:setFont(${1:char* pFontName},${2:int fontSize})"
			],
			"description": "void EditBox::setFont(const char* pFontName, int fontSize)"
		},
		 "__String* __String::clone() const": {
			"prefix": "__String* __String::clone() const",
			"body": [
				"__String* __String:clone() "
			],
			"description": "__String* __String::clone() const"
		},
		 "void TextBMFont::copySpecialProperties(Widget *widget)": {
			"prefix": "void TextBMFont::copySpecialProperties(Widget *widget)",
			"body": [
				"TextBMFont:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void TextBMFont::copySpecialProperties(Widget *widget)"
		},
		 "void Bundle3D::getModelRelativePath(const std::string& path)": {
			"prefix": "void Bundle3D::getModelRelativePath(const std::string& path)",
			"body": [
				"Bundle3D:getModelRelativePath(${1:std:string& path})"
			],
			"description": "void Bundle3D::getModelRelativePath(const std::string& path)"
		},
		 "bool ParticleSystem::getRotationIsDir() const": {
			"prefix": "bool ParticleSystem::getRotationIsDir() const",
			"body": [
				"bool ParticleSystem:getRotationIsDir() "
			],
			"description": "bool ParticleSystem::getRotationIsDir() const"
		},
		 "std::shared_ptr<GLubyte> flippedBuffer(new GLubyte[width * height * 4], [](GLubyte* p)": {
			"prefix": "std::shared_ptr<GLubyte> flippedBuffer(new GLubyte[width * height * 4], [](GLubyte* p)",
			"body": [
				"flippedBuffer(${1:new GLubyte[width * height * 4]},${2:[](GLubyte* p})"
			],
			"description": "std::shared_ptr<GLubyte> flippedBuffer(new GLubyte[width * height * 4], [](GLubyte* p)"
		},
		 "DataReaderHelper *DataReaderHelper::getInstance()": {
			"prefix": "DataReaderHelper *DataReaderHelper::getInstance()",
			"body": [
				"DataReaderHelper *DataReaderHelper:getInstance()"
			],
			"description": "DataReaderHelper *DataReaderHelper::getInstance()"
		},
		 "void ListView::removeAllItems()": {
			"prefix": "void ListView::removeAllItems()",
			"body": [
				"void ListView:removeAllItems()"
			],
			"description": "void ListView::removeAllItems()"
		},
		 "void TriggerMng::addArmatureMovementCallBack(Armature *pAr, Ref *pTarget, SEL_MovementEventCallFunc mecf)": {
			"prefix": "void TriggerMng::addArmatureMovementCallBack(Armature *pAr, Ref *pTarget, SEL_MovementEventCallFunc mecf)",
			"body": [
				"TriggerMng:addArmatureMovementCallBack(${1:Armature *pAr},${2:Ref *pTarget},${3:SEL_MovementEventCallFunc mecf})"
			],
			"description": "void TriggerMng::addArmatureMovementCallBack(Armature *pAr, Ref *pTarget, SEL_MovementEventCallFunc mecf)"
		},
		 "TransitionProgressRadialCCW* TransitionProgressRadialCCW::create(float t, Scene* scene)": {
			"prefix": "TransitionProgressRadialCCW* TransitionProgressRadialCCW::create(float t, Scene* scene)",
			"body": [
				"TransitionProgressRadialCCW:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionProgressRadialCCW* TransitionProgressRadialCCW::create(float t, Scene* scene)"
		},
		 "void Blink::stop()": {
			"prefix": "void Blink::stop()",
			"body": [
				"void Blink:stop()"
			],
			"description": "void Blink::stop()"
		},
		 "void Label::updateDisplayedOpacity(GLubyte parentOpacity)": {
			"prefix": "void Label::updateDisplayedOpacity(GLubyte parentOpacity)",
			"body": [
				"Label:updateDisplayedOpacity(${1:GLubyte parentOpacity})"
			],
			"description": "void Label::updateDisplayedOpacity(GLubyte parentOpacity)"
		},
		 "void TransitionProgress::sceneOrder()": {
			"prefix": "void TransitionProgress::sceneOrder()",
			"body": [
				"void TransitionProgress:sceneOrder()"
			],
			"description": "void TransitionProgress::sceneOrder()"
		},
		 "void PhysicsBody::setVelocity(const Vec2& velocity)": {
			"prefix": "void PhysicsBody::setVelocity(const Vec2& velocity)",
			"body": [
				"PhysicsBody:setVelocity(${1:Vec2& velocity})"
			],
			"description": "void PhysicsBody::setVelocity(const Vec2& velocity)"
		},
		 "void SkeletonNodeReader::destroyInstance()": {
			"prefix": "void SkeletonNodeReader::destroyInstance()",
			"body": [
				"void SkeletonNodeReader:destroyInstance()"
			],
			"description": "void SkeletonNodeReader::destroyInstance()"
		},
		 "ActionInterval* TransitionSplitCols:: action()": {
			"prefix": "ActionInterval* TransitionSplitCols:: action()",
			"body": [
				"ActionInterval* TransitionSplitCols: action()"
			],
			"description": "ActionInterval* TransitionSplitCols:: action()"
		},
		 "void EditBoxImplWin::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void EditBoxImplWin::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"EditBoxImplWin:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void EditBoxImplWin::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void Layer::setAccelerometerInterval(double interval)": {
			"prefix": "void Layer::setAccelerometerInterval(double interval)",
			"body": [
				"Layer:setAccelerometerInterval(${1:double interval})"
			],
			"description": "void Layer::setAccelerometerInterval(double interval)"
		},
		 "void RadioButton::copySpecialProperties(Widget *widget)": {
			"prefix": "void RadioButton::copySpecialProperties(Widget *widget)",
			"body": [
				"RadioButton:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void RadioButton::copySpecialProperties(Widget *widget)"
		},
		 "void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist, const std::string& textureFileName)": {
			"prefix": "void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist, const std::string& textureFileName)",
			"body": [
				"SpriteFrameCache:addSpriteFramesWithFile(${1:std:string& plist},${2:std:string& textureFileName})"
			],
			"description": "void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist, const std::string& textureFileName)"
		},
		 "Properties* Properties::getNamespace(const char* id, bool searchNames, bool recurse) const": {
			"prefix": "Properties* Properties::getNamespace(const char* id, bool searchNames, bool recurse) const",
			"body": [
				"Properties:getNamespace(${1:char* id},${2:bool searchNames},${3:bool recurse})"
			],
			"description": "Properties* Properties::getNamespace(const char* id, bool searchNames, bool recurse) const"
		},
		 "ParticleBatchNode* ParticleBatchNode::createWithTexture(Texture2D *tex, int capacity/* = kParticleDefaultCapacity*/)": {
			"prefix": "ParticleBatchNode* ParticleBatchNode::createWithTexture(Texture2D *tex, int capacity/* = kParticleDefaultCapacity*/)",
			"body": [
				"ParticleBatchNode:createWithTexture(${1:Texture2D *tex},${2:int capacity/* = kParticleDefaultCapacity*/})"
			],
			"description": "ParticleBatchNode* ParticleBatchNode::createWithTexture(Texture2D *tex, int capacity/* = kParticleDefaultCapacity*/)"
		},
		 "void MenuItem::setEnabled(bool enabled)": {
			"prefix": "void MenuItem::setEnabled(bool enabled)",
			"body": [
				"MenuItem:setEnabled(${1:bool enabled})"
			],
			"description": "void MenuItem::setEnabled(bool enabled)"
		},
		 "bool AudioPlayer::setLoop(bool loop)": {
			"prefix": "bool AudioPlayer::setLoop(bool loop)",
			"body": [
				"AudioPlayer:setLoop(${1:bool loop})"
			],
			"description": "bool AudioPlayer::setLoop(bool loop)"
		},
		 "void ActionObject::setCurrentTime(float fTime)": {
			"prefix": "void ActionObject::setCurrentTime(float fTime)",
			"body": [
				"ActionObject:setCurrentTime(${1:float fTime})"
			],
			"description": "void ActionObject::setCurrentTime(float fTime)"
		},
		 "void AtlasNode::calculateMaxItems()": {
			"prefix": "void AtlasNode::calculateMaxItems()",
			"body": [
				"void AtlasNode:calculateMaxItems()"
			],
			"description": "void AtlasNode::calculateMaxItems()"
		},
		 "bool AndroidJavaEngine::isBackgroundMusicPlaying()": {
			"prefix": "bool AndroidJavaEngine::isBackgroundMusicPlaying()",
			"body": [
				"bool AndroidJavaEngine:isBackgroundMusicPlaying()"
			],
			"description": "bool AndroidJavaEngine::isBackgroundMusicPlaying()"
		},
		 "AllocatorDiagnostics* AllocatorDiagnostics::instance()": {
			"prefix": "AllocatorDiagnostics* AllocatorDiagnostics::instance()",
			"body": [
				"AllocatorDiagnostics* AllocatorDiagnostics:instance()"
			],
			"description": "AllocatorDiagnostics* AllocatorDiagnostics::instance()"
		},
		 "void Armature::removeBone(Bone *bone, bool recursion)": {
			"prefix": "void Armature::removeBone(Bone *bone, bool recursion)",
			"body": [
				"Armature:removeBone(${1:Bone *bone},${2:bool recursion})"
			],
			"description": "void Armature::removeBone(Bone *bone, bool recursion)"
		},
		 "cocos2d::Mat4 Physics3DRigidBody::getWorldTransform() const": {
			"prefix": "cocos2d::Mat4 Physics3DRigidBody::getWorldTransform() const",
			"body": [
				"cocos2d:Mat4 Physics3DRigidBody:getWorldTransform() "
			],
			"description": "cocos2d::Mat4 Physics3DRigidBody::getWorldTransform() const"
		},
		 "void Controller::onButtonEvent(int keyCode, bool isPressed, float value, bool isAnalog)": {
			"prefix": "void Controller::onButtonEvent(int keyCode, bool isPressed, float value, bool isAnalog)",
			"body": [
				"Controller:onButtonEvent(${1:int keyCode},${2:bool isPressed},${3:float value},${4:bool isAnalog})"
			],
			"description": "void Controller::onButtonEvent(int keyCode, bool isPressed, float value, bool isAnalog)"
		},
		 "Rect GLView::getScissorRect() const": {
			"prefix": "Rect GLView::getScissorRect() const",
			"body": [
				"Rect GLView:getScissorRect() "
			],
			"description": "Rect GLView::getScissorRect() const"
		},
		 "void Widget::onEnter()": {
			"prefix": "void Widget::onEnter()",
			"body": [
				"void Widget:onEnter()"
			],
			"description": "void Widget::onEnter()"
		},
		 "void Widget::onTouchEnded(Touch *touch, Event *unusedEvent)": {
			"prefix": "void Widget::onTouchEnded(Touch *touch, Event *unusedEvent)",
			"body": [
				"Widget:onTouchEnded(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void Widget::onTouchEnded(Touch *touch, Event *unusedEvent)"
		},
		 "SIOClient* SocketIO::connect(SocketIO::SIODelegate& delegate, const std::string& uri)": {
			"prefix": "SIOClient* SocketIO::connect(SocketIO::SIODelegate& delegate, const std::string& uri)",
			"body": [
				"SocketIO:connect(${1:SocketIO:SIODelegate& delegate},${2:std:string& uri})"
			],
			"description": "SIOClient* SocketIO::connect(SocketIO::SIODelegate& delegate, const std::string& uri)"
		},
		 "void AndroidJavaEngine::resumeEffect(unsigned int soundID)": {
			"prefix": "void AndroidJavaEngine::resumeEffect(unsigned int soundID)",
			"body": [
				"AndroidJavaEngine:resumeEffect(${1:unsigned int soundID})"
			],
			"description": "void AndroidJavaEngine::resumeEffect(unsigned int soundID)"
		},
		 "void Physics3DComponent::setSyncFlag(PhysicsSyncFlag syncFlag)": {
			"prefix": "void Physics3DComponent::setSyncFlag(PhysicsSyncFlag syncFlag)",
			"body": [
				"Physics3DComponent:setSyncFlag(${1:PhysicsSyncFlag syncFlag})"
			],
			"description": "void Physics3DComponent::setSyncFlag(PhysicsSyncFlag syncFlag)"
		},
		 "void LayerGradient::setEndOpacity(GLubyte o)": {
			"prefix": "void LayerGradient::setEndOpacity(GLubyte o)",
			"body": [
				"LayerGradient:setEndOpacity(${1:GLubyte o})"
			],
			"description": "void LayerGradient::setEndOpacity(GLubyte o)"
		},
		 "float Frame::tweenPercent(float percent)": {
			"prefix": "float Frame::tweenPercent(float percent)",
			"body": [
				"Frame:tweenPercent(${1:float percent})"
			],
			"description": "float Frame::tweenPercent(float percent)"
		},
		 "void Mat4::multiply(const Mat4& mat)": {
			"prefix": "void Mat4::multiply(const Mat4& mat)",
			"body": [
				"Mat4:multiply(${1:Mat4& mat})"
			],
			"description": "void Mat4::multiply(const Mat4& mat)"
		},
		 "ActionTimelineNode* CSLoader::createActionTimelineNode(const std::string& filename, int startIndex, int endIndex, bool loop)": {
			"prefix": "ActionTimelineNode* CSLoader::createActionTimelineNode(const std::string& filename, int startIndex, int endIndex, bool loop)",
			"body": [
				"CSLoader:createActionTimelineNode(${1:std:string& filename},${2:int startIndex},${3:int endIndex},${4:bool loop})"
			],
			"description": "ActionTimelineNode* CSLoader::createActionTimelineNode(const std::string& filename, int startIndex, int endIndex, bool loop)"
		},
		 "void ListView::interceptTouchEvent(TouchEventType event, Widget *sender, Touch* touch)": {
			"prefix": "void ListView::interceptTouchEvent(TouchEventType event, Widget *sender, Touch* touch)",
			"body": [
				"ListView:interceptTouchEvent(${1:TouchEventType event},${2:Widget *sender},${3:Touch* touch})"
			],
			"description": "void ListView::interceptTouchEvent(TouchEventType event, Widget *sender, Touch* touch)"
		},
		 "void GLProgramState::setUniformMat4(const std::string& uniformName, const Mat4& value)": {
			"prefix": "void GLProgramState::setUniformMat4(const std::string& uniformName, const Mat4& value)",
			"body": [
				"GLProgramState:setUniformMat4(${1:std:string& uniformName},${2:Mat4& value})"
			],
			"description": "void GLProgramState::setUniformMat4(const std::string& uniformName, const Mat4& value)"
		},
		 "void Downloader::notifyError(const std::string& msg, const std::string& customId, int curle_code)": {
			"prefix": "void Downloader::notifyError(const std::string& msg, const std::string& customId, int curle_code)",
			"body": [
				"Downloader:notifyError(${1:std:string& msg},${2:std:string& customId},${3:int curle_code})"
			],
			"description": "void Downloader::notifyError(const std::string& msg, const std::string& customId, int curle_code)"
		},
		 "void Sprite3D::createAttachSprite3DNode(NodeData* nodedata, const MaterialDatas& materialdatas)": {
			"prefix": "void Sprite3D::createAttachSprite3DNode(NodeData* nodedata, const MaterialDatas& materialdatas)",
			"body": [
				"Sprite3D:createAttachSprite3DNode(${1:NodeData* nodedata},${2:MaterialDatas& materialdatas})"
			],
			"description": "void Sprite3D::createAttachSprite3DNode(NodeData* nodedata, const MaterialDatas& materialdatas)"
		},
		 "void SkeletonAnimation::clearTrack (int trackIndex)": {
			"prefix": "void SkeletonAnimation::clearTrack (int trackIndex)",
			"body": [
				"SkeletonAnimation:clearTrack (${1:int trackIndex})"
			],
			"description": "void SkeletonAnimation::clearTrack (int trackIndex)"
		},
		 "const MeshVertexAttrib& Mesh::getMeshVertexAttribute(int idx)": {
			"prefix": "const MeshVertexAttrib& Mesh::getMeshVertexAttribute(int idx)",
			"body": [
				"MeshVertexAttrib& Mesh:getMeshVertexAttribute(${1:int idx})"
			],
			"description": "const MeshVertexAttrib& Mesh::getMeshVertexAttribute(int idx)"
		},
		 "bool Node::doEnumerateRecursive(const Node* node, const std::string &name, std::function<bool (Node *)> callback) const": {
			"prefix": "bool Node::doEnumerateRecursive(const Node* node, const std::string &name, std::function<bool (Node *)> callback) const",
			"body": [
				"Node:doEnumerateRecursive(${1:Node* node},${2:std:string &name},${3:std:function<bool (Node *})"
			],
			"description": "bool Node::doEnumerateRecursive(const Node* node, const std::string &name, std::function<bool (Node *)> callback) const"
		},
		 "Terrain::TerrainData::TerrainData(const char * heightMapsrc , const char * textureSrc, const Size & chunksize, float height, float scale)": {
			"prefix": "Terrain::TerrainData::TerrainData(const char * heightMapsrc , const char * textureSrc, const Size & chunksize, float height, float scale)",
			"body": [
				"* heightMapsrc},${2:char * textureSrc},${3:Size & chunksize},${4:float height},${5:float scale})"
			],
			"description": "Terrain::TerrainData::TerrainData(const char * heightMapsrc , const char * textureSrc, const Size & chunksize, float height, float scale)"
		},
		 "float ArmatureAnimation::getSpeedScale() const": {
			"prefix": "float ArmatureAnimation::getSpeedScale() const",
			"body": [
				"float ArmatureAnimation:getSpeedScale() "
			],
			"description": "float ArmatureAnimation::getSpeedScale() const"
		},
		 "void UserDefault::setFloatForKey(const char* pKey, float value)": {
			"prefix": "void UserDefault::setFloatForKey(const char* pKey, float value)",
			"body": [
				"UserDefault:setFloatForKey(${1:char* pKey},${2:float value})"
			],
			"description": "void UserDefault::setFloatForKey(const char* pKey, float value)"
		},
		 "cocos2d::Vec3 Physics3DRigidBody::getAngularVelocity() const": {
			"prefix": "cocos2d::Vec3 Physics3DRigidBody::getAngularVelocity() const",
			"body": [
				"cocos2d:Vec3 Physics3DRigidBody:getAngularVelocity() "
			],
			"description": "cocos2d::Vec3 Physics3DRigidBody::getAngularVelocity() const"
		},
		 "void TextAtlas::setProperty(const std::string& stringValue, const std::string& charMapFile, int itemWidth, int itemHeight, const std::string& startCharMap)": {
			"prefix": "void TextAtlas::setProperty(const std::string& stringValue, const std::string& charMapFile, int itemWidth, int itemHeight, const std::string& startCharMap)",
			"body": [
				"TextAtlas:setProperty(${1:std:string& stringValue},${2:std:string& charMapFile},${3:int itemWidth},${4:int itemHeight},${5:std:string& startCharMap})"
			],
			"description": "void TextAtlas::setProperty(const std::string& stringValue, const std::string& charMapFile, int itemWidth, int itemHeight, const std::string& startCharMap)"
		},
		 "void Menu::onExit()": {
			"prefix": "void Menu::onExit()",
			"body": [
				"void Menu:onExit()"
			],
			"description": "void Menu::onExit()"
		},
		 "bool ProgressTimer::initWithSprite(Sprite* sp)": {
			"prefix": "bool ProgressTimer::initWithSprite(Sprite* sp)",
			"body": [
				"ProgressTimer:initWithSprite(${1:Sprite* sp})"
			],
			"description": "bool ProgressTimer::initWithSprite(Sprite* sp)"
		},
		 "void CCBAnimationManager::setBaseValue(const Value& value, Node *pNode, const std::string& propName)": {
			"prefix": "void CCBAnimationManager::setBaseValue(const Value& value, Node *pNode, const std::string& propName)",
			"body": [
				"CCBAnimationManager:setBaseValue(${1:Value& value},${2:Node *pNode},${3:std:string& propName})"
			],
			"description": "void CCBAnimationManager::setBaseValue(const Value& value, Node *pNode, const std::string& propName)"
		},
		 "Armature *Armature::create(const std::string& name)": {
			"prefix": "Armature *Armature::create(const std::string& name)",
			"body": [
				"*Armature:create(${1:std:string& name})"
			],
			"description": "Armature *Armature::create(const std::string& name)"
		},
		 "cocos2d::Vec3 Physics3DRigidBody::getGravity() const": {
			"prefix": "cocos2d::Vec3 Physics3DRigidBody::getGravity() const",
			"body": [
				"cocos2d:Vec3 Physics3DRigidBody:getGravity() "
			],
			"description": "cocos2d::Vec3 Physics3DRigidBody::getGravity() const"
		},
		 "void GLViewImpl::onGLFWWindowIconifyCallback(GLFWwindow* window, int iconified)": {
			"prefix": "void GLViewImpl::onGLFWWindowIconifyCallback(GLFWwindow* window, int iconified)",
			"body": [
				"GLViewImpl:onGLFWWindowIconifyCallback(${1:GLFWwindow* window},${2:int iconified})"
			],
			"description": "void GLViewImpl::onGLFWWindowIconifyCallback(GLFWwindow* window, int iconified)"
		},
		 "void ListView::copySpecialProperties(Widget *widget)": {
			"prefix": "void ListView::copySpecialProperties(Widget *widget)",
			"body": [
				"ListView:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void ListView::copySpecialProperties(Widget *widget)"
		},
		 "const char* Properties::getNextProperty()": {
			"prefix": "const char* Properties::getNextProperty()",
			"body": [
				" char* Properties:getNextProperty()"
			],
			"description": "const char* Properties::getNextProperty()"
		},
		 "EaseBounceInOut* EaseBounceInOut::clone() const": {
			"prefix": "EaseBounceInOut* EaseBounceInOut::clone() const",
			"body": [
				"EaseBounceInOut* EaseBounceInOut:clone() "
			],
			"description": "EaseBounceInOut* EaseBounceInOut::clone() const"
		},
		 "void ActionInterval::step(float dt)": {
			"prefix": "void ActionInterval::step(float dt)",
			"body": [
				"ActionInterval:step(${1:float dt})"
			],
			"description": "void ActionInterval::step(float dt)"
		},
		 "std::sort(fixedListeners->begin(), fixedListeners->end(), [](const EventListener* l1, const EventListener* l2)": {
			"prefix": "std::sort(fixedListeners->begin(), fixedListeners->end(), [](const EventListener* l1, const EventListener* l2)",
			"body": [
				"std:sort(fixedListeners->begin(), fixedListeners->end(), []( EventListener* l1,  EventListener* l2)"
			],
			"description": "std::sort(fixedListeners->begin(), fixedListeners->end(), [](const EventListener* l1, const EventListener* l2)"
		},
		 "void Button::copySpecialProperties(Widget *widget)": {
			"prefix": "void Button::copySpecialProperties(Widget *widget)",
			"body": [
				"Button:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void Button::copySpecialProperties(Widget *widget)"
		},
		 "const Quaternion& Quaternion::zero()": {
			"prefix": "const Quaternion& Quaternion::zero()",
			"body": [
				" Quaternion& Quaternion:zero()"
			],
			"description": "const Quaternion& Quaternion::zero()"
		},
		 "__Array* __Dictionary::allKeys()": {
			"prefix": "__Array* __Dictionary::allKeys()",
			"body": [
				"__Array* __Dictionary:allKeys()"
			],
			"description": "__Array* __Dictionary::allKeys()"
		},
		 "void Configuration::destroyInstance()": {
			"prefix": "void Configuration::destroyInstance()",
			"body": [
				"void Configuration:destroyInstance()"
			],
			"description": "void Configuration::destroyInstance()"
		},
		 "Widget* WidgetPropertiesReader0300::createWidget(const rapidjson::Value& data, const char* fullPath, const char* fileName)": {
			"prefix": "Widget* WidgetPropertiesReader0300::createWidget(const rapidjson::Value& data, const char* fullPath, const char* fileName)",
			"body": [
				"WidgetPropertiesReader0300:createWidget(${1:rapidjson:Value& data},${2:char* fullPath},${3:char* fileName})"
			],
			"description": "Widget* WidgetPropertiesReader0300::createWidget(const rapidjson::Value& data, const char* fullPath, const char* fileName)"
		},
		 "Widget* Layout::getNextFocusedWidget(FocusDirection direction, Widget *current)": {
			"prefix": "Widget* Layout::getNextFocusedWidget(FocusDirection direction, Widget *current)",
			"body": [
				"Layout:getNextFocusedWidget(${1:FocusDirection direction},${2:Widget *current})"
			],
			"description": "Widget* Layout::getNextFocusedWidget(FocusDirection direction, Widget *current)"
		},
		 "void ContourData::addVertex(Vec2 &vertex)": {
			"prefix": "void ContourData::addVertex(Vec2 &vertex)",
			"body": [
				"ContourData:addVertex(${1:Vec2 &vertex})"
			],
			"description": "void ContourData::addVertex(Vec2 &vertex)"
		},
		 "Rect AutoPolygon::getRealRect(const Rect& rect)": {
			"prefix": "Rect AutoPolygon::getRealRect(const Rect& rect)",
			"body": [
				"AutoPolygon:getRealRect(${1:Rect& rect})"
			],
			"description": "Rect AutoPolygon::getRealRect(const Rect& rect)"
		},
		 "void LabelTTF::setVerticalAlignment(TextVAlignment verticalAlignment)": {
			"prefix": "void LabelTTF::setVerticalAlignment(TextVAlignment verticalAlignment)",
			"body": [
				"LabelTTF:setVerticalAlignment(${1:TextVAlignment verticalAlignment})"
			],
			"description": "void LabelTTF::setVerticalAlignment(TextVAlignment verticalAlignment)"
		},
		 "float Physics3DSliderConstraint::getRestitutionOrthoAng() const": {
			"prefix": "float Physics3DSliderConstraint::getRestitutionOrthoAng() const",
			"body": [
				"float Physics3DSliderConstraint:getRestitutionOrthoAng() "
			],
			"description": "float Physics3DSliderConstraint::getRestitutionOrthoAng() const"
		},
		 "void Label::setAlignment(TextHAlignment hAlignment,TextVAlignment vAlignment)": {
			"prefix": "void Label::setAlignment(TextHAlignment hAlignment,TextVAlignment vAlignment)",
			"body": [
				"Label:setAlignment(${1:TextHAlignment hAlignment},${2:TextVAlignment vAlignment})"
			],
			"description": "void Label::setAlignment(TextHAlignment hAlignment,TextVAlignment vAlignment)"
		},
		 "void GLProgramState::setUniformVec2v(const std::string& uniformName, ssize_t size, const Vec2* pointer)": {
			"prefix": "void GLProgramState::setUniformVec2v(const std::string& uniformName, ssize_t size, const Vec2* pointer)",
			"body": [
				"GLProgramState:setUniformVec2v(${1:std:string& uniformName},${2:ssize_t size},${3:Vec2* pointer})"
			],
			"description": "void GLProgramState::setUniformVec2v(const std::string& uniformName, ssize_t size, const Vec2* pointer)"
		},
		 "void EditBoxImplAndroid::setNativeText(const char* pText)": {
			"prefix": "void EditBoxImplAndroid::setNativeText(const char* pText)",
			"body": [
				"EditBoxImplAndroid:setNativeText(${1:char* pText})"
			],
			"description": "void EditBoxImplAndroid::setNativeText(const char* pText)"
		},
		 "void __Set::addObject(Ref *pObject)": {
			"prefix": "void __Set::addObject(Ref *pObject)",
			"body": [
				"__Set:addObject(${1:Ref *pObject})"
			],
			"description": "void __Set::addObject(Ref *pObject)"
		},
		 "void cc_utf8_trim_ws(std::vector<unsigned short>* str)": {
			"prefix": "void cc_utf8_trim_ws(std::vector<unsigned short>* str)",
			"body": [
				"cc_utf8_trim_ws(${1:std:vector<unsigned short>* str})"
			],
			"description": "void cc_utf8_trim_ws(std::vector<unsigned short>* str)"
		},
		 "void BoneNode::addToChildrenListHelper(Node * child)": {
			"prefix": "void BoneNode::addToChildrenListHelper(Node * child)",
			"body": [
				"BoneNode:addToChildrenListHelper(${1:Node * child})"
			],
			"description": "void BoneNode::addToChildrenListHelper(Node * child)"
		},
		 "void EventDispatcher::updateListeners(Event* event)": {
			"prefix": "void EventDispatcher::updateListeners(Event* event)",
			"body": [
				"EventDispatcher:updateListeners(${1:Event* event})"
			],
			"description": "void EventDispatcher::updateListeners(Event* event)"
		},
		 "float Physics3DRigidBody::getRollingFriction() const": {
			"prefix": "float Physics3DRigidBody::getRollingFriction() const",
			"body": [
				"float Physics3DRigidBody:getRollingFriction() "
			],
			"description": "float Physics3DRigidBody::getRollingFriction() const"
		},
		 "ScaleBy* ScaleBy::reverse() const": {
			"prefix": "ScaleBy* ScaleBy::reverse() const",
			"body": [
				"ScaleBy* ScaleBy:reverse() "
			],
			"description": "ScaleBy* ScaleBy::reverse() const"
		},
		 "std::string format(const char* format, ...)": {
			"prefix": "std::string format(const char* format, ...)",
			"body": [
				"format(${1:char* format},${2:...})"
			],
			"description": "std::string format(const char* format, ...)"
		},
		 "EaseElastic* EaseElasticIn::reverse() const": {
			"prefix": "EaseElastic* EaseElasticIn::reverse() const",
			"body": [
				"EaseElastic* EaseElasticIn:reverse() "
			],
			"description": "EaseElastic* EaseElasticIn::reverse() const"
		},
		 "bool UICCTextField::getAttachWithIME()const": {
			"prefix": "bool UICCTextField::getAttachWithIME()const",
			"body": [
				"bool UICCTextField:getAttachWithIME()"
			],
			"description": "bool UICCTextField::getAttachWithIME()const"
		},
		 "Node* ScrollView::getChildByTag(int tag) const": {
			"prefix": "Node* ScrollView::getChildByTag(int tag) const",
			"body": [
				"ScrollView:getChildByTag(${1:int tag})"
			],
			"description": "Node* ScrollView::getChildByTag(int tag) const"
		},
		 "ObjectFactory* ObjectFactory::getInstance()": {
			"prefix": "ObjectFactory* ObjectFactory::getInstance()",
			"body": [
				"ObjectFactory* ObjectFactory:getInstance()"
			],
			"description": "ObjectFactory* ObjectFactory::getInstance()"
		},
		 "std::string Widget::getDescription() const": {
			"prefix": "std::string Widget::getDescription() const",
			"body": [
				"std:string Widget:getDescription() "
			],
			"description": "std::string Widget::getDescription() const"
		},
		 "void SIOClient::onConnect()": {
			"prefix": "void SIOClient::onConnect()",
			"body": [
				"void SIOClient:onConnect()"
			],
			"description": "void SIOClient::onConnect()"
		},
		 "Ripple3D* Ripple3D::clone() const": {
			"prefix": "Ripple3D* Ripple3D::clone() const",
			"body": [
				"Ripple3D* Ripple3D:clone() "
			],
			"description": "Ripple3D* Ripple3D::clone() const"
		},
		 "TriggerObj* TriggerMng::getTriggerObj(unsigned int id) const": {
			"prefix": "TriggerObj* TriggerMng::getTriggerObj(unsigned int id) const",
			"body": [
				"TriggerMng:getTriggerObj(${1:unsigned int id})"
			],
			"description": "TriggerObj* TriggerMng::getTriggerObj(unsigned int id) const"
		},
		 "void setVideoURLJNI(int index,int videoSource,const std::string& videoUrl)": {
			"prefix": "void setVideoURLJNI(int index,int videoSource,const std::string& videoUrl)",
			"body": [
				"setVideoURLJNI(${1:int index},${2:int videoSource},${3:std:string& videoUrl})"
			],
			"description": "void setVideoURLJNI(int index,int videoSource,const std::string& videoUrl)"
		},
		 "Vec2 ParallaxNode::absolutePosition()": {
			"prefix": "Vec2 ParallaxNode::absolutePosition()",
			"body": [
				"Vec2 ParallaxNode:absolutePosition()"
			],
			"description": "Vec2 ParallaxNode::absolutePosition()"
		},
		 "void Sprite3D::setTexture(const std::string& texFile)": {
			"prefix": "void Sprite3D::setTexture(const std::string& texFile)",
			"body": [
				"Sprite3D:setTexture(${1:std:string& texFile})"
			],
			"description": "void Sprite3D::setTexture(const std::string& texFile)"
		},
		 "void Mat4::createScale(const Vec3& scale, Mat4* dst)": {
			"prefix": "void Mat4::createScale(const Vec3& scale, Mat4* dst)",
			"body": [
				"Mat4:createScale(${1:Vec3& scale},${2:Mat4* dst})"
			],
			"description": "void Mat4::createScale(const Vec3& scale, Mat4* dst)"
		},
		 "float Physics3DHingeConstraint::getHingeAngle(const cocos2d::Mat4& transA, const cocos2d::Mat4& transB)": {
			"prefix": "float Physics3DHingeConstraint::getHingeAngle(const cocos2d::Mat4& transA, const cocos2d::Mat4& transB)",
			"body": [
				"Physics3DHingeConstraint:getHingeAngle(${1:cocos2d:Mat4& transA},${2:cocos2d:Mat4& transB})"
			],
			"description": "float Physics3DHingeConstraint::getHingeAngle(const cocos2d::Mat4& transA, const cocos2d::Mat4& transB)"
		},
		 "bool Properties::exists(const char* name) const": {
			"prefix": "bool Properties::exists(const char* name) const",
			"body": [
				"Properties:exists(${1:char* name})"
			],
			"description": "bool Properties::exists(const char* name) const"
		},
		 "float ActionScaleFrame::getScaleX()": {
			"prefix": "float ActionScaleFrame::getScaleX()",
			"body": [
				"float ActionScaleFrame:getScaleX()"
			],
			"description": "float ActionScaleFrame::getScaleX()"
		},
		 "void SkeletonAnimation::setCompleteListener (const CompleteListener& listener)": {
			"prefix": "void SkeletonAnimation::setCompleteListener (const CompleteListener& listener)",
			"body": [
				"SkeletonAnimation:setCompleteListener (${1:CompleteListener& listener})"
			],
			"description": "void SkeletonAnimation::setCompleteListener (const CompleteListener& listener)"
		},
		 "void AbstractCheckButton::loadTextureBackGround(SpriteFrame* spriteFrame)": {
			"prefix": "void AbstractCheckButton::loadTextureBackGround(SpriteFrame* spriteFrame)",
			"body": [
				"AbstractCheckButton:loadTextureBackGround(${1:SpriteFrame* spriteFrame})"
			],
			"description": "void AbstractCheckButton::loadTextureBackGround(SpriteFrame* spriteFrame)"
		},
		 "MenuItemImage* MenuItemImage::create()": {
			"prefix": "MenuItemImage* MenuItemImage::create()",
			"body": [
				"MenuItemImage* MenuItemImage:create()"
			],
			"description": "MenuItemImage* MenuItemImage::create()"
		},
		 "void CCBAnimationManager::runAnimations(const char *pName, float fTweenDuration)": {
			"prefix": "void CCBAnimationManager::runAnimations(const char *pName, float fTweenDuration)",
			"body": [
				"CCBAnimationManager:runAnimations(${1:char *pName},${2:float fTweenDuration})"
			],
			"description": "void CCBAnimationManager::runAnimations(const char *pName, float fTweenDuration)"
		},
		 "CCBSoundEffect* CCBSoundEffect::clone() const": {
			"prefix": "CCBSoundEffect* CCBSoundEffect::clone() const",
			"body": [
				"CCBSoundEffect* CCBSoundEffect:clone() "
			],
			"description": "CCBSoundEffect* CCBSoundEffect::clone() const"
		},
		 "void EditBoxImplAndroid::setNativePlaceholderFontColor(const Color4B& color)": {
			"prefix": "void EditBoxImplAndroid::setNativePlaceholderFontColor(const Color4B& color)",
			"body": [
				"EditBoxImplAndroid:setNativePlaceholderFontColor(${1:Color4B& color})"
			],
			"description": "void EditBoxImplAndroid::setNativePlaceholderFontColor(const Color4B& color)"
		},
		 "void SpriteBatchNode::addChild(Node * child, int zOrder, const std::string &name)": {
			"prefix": "void SpriteBatchNode::addChild(Node * child, int zOrder, const std::string &name)",
			"body": [
				"SpriteBatchNode:addChild(${1:Node * child},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void SpriteBatchNode::addChild(Node * child, int zOrder, const std::string &name)"
		},
		 "SplitCols* SplitCols::create(float duration, unsigned int cols)": {
			"prefix": "SplitCols* SplitCols::create(float duration, unsigned int cols)",
			"body": [
				"SplitCols:create(${1:float duration},${2:unsigned int cols})"
			],
			"description": "SplitCols* SplitCols::create(float duration, unsigned int cols)"
		},
		 "void Renderer::setupVBO()": {
			"prefix": "void Renderer::setupVBO()",
			"body": [
				"void Renderer:setupVBO()"
			],
			"description": "void Renderer::setupVBO()"
		},
		 "bool Sprite3D::loadFromFile(const std::string& path, NodeDatas* nodedatas, MeshDatas* meshdatas,  MaterialDatas* materialdatas)": {
			"prefix": "bool Sprite3D::loadFromFile(const std::string& path, NodeDatas* nodedatas, MeshDatas* meshdatas,  MaterialDatas* materialdatas)",
			"body": [
				"Sprite3D:loadFromFile(${1:std:string& path},${2:NodeDatas* nodedatas},${3:MeshDatas* meshdatas},${4:MaterialDatas* materialdatas})"
			],
			"description": "bool Sprite3D::loadFromFile(const std::string& path, NodeDatas* nodedatas, MeshDatas* meshdatas,  MaterialDatas* materialdatas)"
		},
		 "ssize_t Node::getChildrenCount() const": {
			"prefix": "ssize_t Node::getChildrenCount() const",
			"body": [
				"ssize_t Node:getChildrenCount() "
			],
			"description": "ssize_t Node::getChildrenCount() const"
		},
		 "std::string ProfilingTimer::getDescription() const": {
			"prefix": "std::string ProfilingTimer::getDescription() const",
			"body": [
				"std:string ProfilingTimer:getDescription() "
			],
			"description": "std::string ProfilingTimer::getDescription() const"
		},
		 "void Mesh::setMeshIndexData(MeshIndexData* subMesh)": {
			"prefix": "void Mesh::setMeshIndexData(MeshIndexData* subMesh)",
			"body": [
				"Mesh:setMeshIndexData(${1:MeshIndexData* subMesh})"
			],
			"description": "void Mesh::setMeshIndexData(MeshIndexData* subMesh)"
		},
		 "void Terrain::QuadTree::cullByCamera(const Camera * camera, const Mat4 & worldTransform)": {
			"prefix": "void Terrain::QuadTree::cullByCamera(const Camera * camera, const Mat4 & worldTransform)",
			"body": [
				"Terrain:QuadTree:cullByCamera(${1:Camera * camera},${2:Mat4 & worldTransform})"
			],
			"description": "void Terrain::QuadTree::cullByCamera(const Camera * camera, const Mat4 & worldTransform)"
		},
		 "bool Physics3DSliderConstraint::getUseLinearReferenceFrameA() const": {
			"prefix": "bool Physics3DSliderConstraint::getUseLinearReferenceFrameA() const",
			"body": [
				"bool Physics3DSliderConstraint:getUseLinearReferenceFrameA() "
			],
			"description": "bool Physics3DSliderConstraint::getUseLinearReferenceFrameA() const"
		},
		 "const char* CCBSequence::getName()": {
			"prefix": "const char* CCBSequence::getName()",
			"body": [
				" char* CCBSequence:getName()"
			],
			"description": "const char* CCBSequence::getName()"
		},
		 "void Physics3DRigidBody::applyImpulse( const cocos2d::Vec3& impulse, const cocos2d::Vec3& rel_pos )": {
			"prefix": "void Physics3DRigidBody::applyImpulse( const cocos2d::Vec3& impulse, const cocos2d::Vec3& rel_pos )",
			"body": [
				"Physics3DRigidBody:applyImpulse(${1:cocos2d:Vec3& impulse},${2:cocos2d:Vec3& rel_pos})"
			],
			"description": "void Physics3DRigidBody::applyImpulse( const cocos2d::Vec3& impulse, const cocos2d::Vec3& rel_pos )"
		},
		 "void FrameData::copy(const BaseData *baseData)": {
			"prefix": "void FrameData::copy(const BaseData *baseData)",
			"body": [
				"FrameData:copy(${1:BaseData *baseData})"
			],
			"description": "void FrameData::copy(const BaseData *baseData)"
		},
		 "void ScrollView::scrollToPercentBothDirection(const Vec2& percent, float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToPercentBothDirection(const Vec2& percent, float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToPercentBothDirection(${1:Vec2& percent},${2:float second},${3:bool attenuated})"
			],
			"description": "void ScrollView::scrollToPercentBothDirection(const Vec2& percent, float second, bool attenuated)"
		},
		 "void Layout::scissorClippingVisit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)": {
			"prefix": "void Layout::scissorClippingVisit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)",
			"body": [
				"Layout:scissorClippingVisit(${1:Renderer *renderer},${2:Mat4& parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void Layout::scissorClippingVisit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)"
		},
		 "void ActionTimeline::pause()": {
			"prefix": "void ActionTimeline::pause()",
			"body": [
				"void ActionTimeline:pause()"
			],
			"description": "void ActionTimeline::pause()"
		},
		 "void WsThreadHelper::wsThreadEntryFunc()": {
			"prefix": "void WsThreadHelper::wsThreadEntryFunc()",
			"body": [
				"void WsThreadHelper:wsThreadEntryFunc()"
			],
			"description": "void WsThreadHelper::wsThreadEntryFunc()"
		},
		 "void HttpCookie::writeFile()": {
			"prefix": "void HttpCookie::writeFile()",
			"body": [
				"void HttpCookie:writeFile()"
			],
			"description": "void HttpCookie::writeFile()"
		},
		 "ssize_t TextureAtlas::getTotalQuads() const": {
			"prefix": "ssize_t TextureAtlas::getTotalQuads() const",
			"body": [
				"ssize_t TextureAtlas:getTotalQuads() "
			],
			"description": "ssize_t TextureAtlas::getTotalQuads() const"
		},
		 "VertexAttribValue* VertexAttribBinding::getVertexAttribValue(const std::string& name)": {
			"prefix": "VertexAttribValue* VertexAttribBinding::getVertexAttribValue(const std::string& name)",
			"body": [
				"VertexAttribBinding:getVertexAttribValue(${1:std:string& name})"
			],
			"description": "VertexAttribValue* VertexAttribBinding::getVertexAttribValue(const std::string& name)"
		},
		 "void ScrollView::interceptTouchEvent(Widget::TouchEventType event, Widget *sender,Touch* touch)": {
			"prefix": "void ScrollView::interceptTouchEvent(Widget::TouchEventType event, Widget *sender,Touch* touch)",
			"body": [
				"ScrollView:interceptTouchEvent(${1:Widget:TouchEventType event},${2:Widget *sender},${3:Touch* touch})"
			],
			"description": "void ScrollView::interceptTouchEvent(Widget::TouchEventType event, Widget *sender,Touch* touch)"
		},
		 "SplitRows* SplitRows::clone() const": {
			"prefix": "SplitRows* SplitRows::clone() const",
			"body": [
				"SplitRows* SplitRows:clone() "
			],
			"description": "SplitRows* SplitRows::clone() const"
		},
		 "bool FileUtils::createDirectory(const std::string& path)": {
			"prefix": "bool FileUtils::createDirectory(const std::string& path)",
			"body": [
				"FileUtils:createDirectory(${1:std:string& path})"
			],
			"description": "bool FileUtils::createDirectory(const std::string& path)"
		},
		 "bool Bone::init()": {
			"prefix": "bool Bone::init()",
			"body": [
				"bool Bone:init()"
			],
			"description": "bool Bone::init()"
		},
		 "float ParticleSystem::getRotatePerSecond() const": {
			"prefix": "float ParticleSystem::getRotatePerSecond() const",
			"body": [
				"float ParticleSystem:getRotatePerSecond() "
			],
			"description": "float ParticleSystem::getRotatePerSecond() const"
		},
		 "DrawNode* DrawNode::create()": {
			"prefix": "DrawNode* DrawNode::create()",
			"body": [
				"DrawNode* DrawNode:create()"
			],
			"description": "DrawNode* DrawNode::create()"
		},
		 "unsigned char AutoPolygon::getAlphaByIndex(const unsigned int& i)": {
			"prefix": "unsigned char AutoPolygon::getAlphaByIndex(const unsigned int& i)",
			"body": [
				"char AutoPolygon:getAlphaByIndex(${1:unsigned int& i})"
			],
			"description": "unsigned char AutoPolygon::getAlphaByIndex(const unsigned int& i)"
		},
		 "void SpriteBatchNode::removeChildAtIndex(ssize_t index, bool doCleanup)": {
			"prefix": "void SpriteBatchNode::removeChildAtIndex(ssize_t index, bool doCleanup)",
			"body": [
				"SpriteBatchNode:removeChildAtIndex(${1:ssize_t index},${2:bool doCleanup})"
			],
			"description": "void SpriteBatchNode::removeChildAtIndex(ssize_t index, bool doCleanup)"
		},
		 "bool CatmullRomBy::initWithDuration(float dt, cocos2d::PointArray *points)": {
			"prefix": "bool CatmullRomBy::initWithDuration(float dt, cocos2d::PointArray *points)",
			"body": [
				"CatmullRomBy:initWithDuration(${1:float dt},${2:cocos2d:PointArray *points})"
			],
			"description": "bool CatmullRomBy::initWithDuration(float dt, cocos2d::PointArray *points)"
		},
		 "void EditBoxImplAndroid::setNativeMaxLength(int maxLength)": {
			"prefix": "void EditBoxImplAndroid::setNativeMaxLength(int maxLength)",
			"body": [
				"EditBoxImplAndroid:setNativeMaxLength(${1:int maxLength})"
			],
			"description": "void EditBoxImplAndroid::setNativeMaxLength(int maxLength)"
		},
		 "const string& UserDefault::getXMLFilePath()": {
			"prefix": "const string& UserDefault::getXMLFilePath()",
			"body": [
				" string& UserDefault:getXMLFilePath()"
			],
			"description": "const string& UserDefault::getXMLFilePath()"
		},
		 "string FileUtilsAndroid::getWritablePath() const": {
			"prefix": "string FileUtilsAndroid::getWritablePath() const",
			"body": [
				"string FileUtilsAndroid:getWritablePath() "
			],
			"description": "string FileUtilsAndroid::getWritablePath() const"
		},
		 "void TextBMFont::setString(const std::string& value)": {
			"prefix": "void TextBMFont::setString(const std::string& value)",
			"body": [
				"TextBMFont:setString(${1:std:string& value})"
			],
			"description": "void TextBMFont::setString(const std::string& value)"
		},
		 "MoveBy* MoveBy::create(float duration, const Vec2& deltaPosition)": {
			"prefix": "MoveBy* MoveBy::create(float duration, const Vec2& deltaPosition)",
			"body": [
				"MoveBy:create(${1:float duration},${2:Vec2& deltaPosition})"
			],
			"description": "MoveBy* MoveBy::create(float duration, const Vec2& deltaPosition)"
		},
		 "void ClippingNode::setAlphaThreshold(GLfloat alphaThreshold)": {
			"prefix": "void ClippingNode::setAlphaThreshold(GLfloat alphaThreshold)",
			"body": [
				"ClippingNode:setAlphaThreshold(${1:GLfloat alphaThreshold})"
			],
			"description": "void ClippingNode::setAlphaThreshold(GLfloat alphaThreshold)"
		},
		 "void TextFieldTTF::setTextColor(const Color4B &color)": {
			"prefix": "void TextFieldTTF::setTextColor(const Color4B &color)",
			"body": [
				"TextFieldTTF:setTextColor(${1:Color4B &color})"
			],
			"description": "void TextFieldTTF::setTextColor(const Color4B &color)"
		},
		 "void Node::sortAllChildren()": {
			"prefix": "void Node::sortAllChildren()",
			"body": [
				"void Node:sortAllChildren()"
			],
			"description": "void Node::sortAllChildren()"
		},
		 "Quaternion Quaternion::getConjugated() const": {
			"prefix": "Quaternion Quaternion::getConjugated() const",
			"body": [
				"Quaternion Quaternion:getConjugated() "
			],
			"description": "Quaternion Quaternion::getConjugated() const"
		},
		 "bool GridBase::initWithSize(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)": {
			"prefix": "bool GridBase::initWithSize(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)",
			"body": [
				"GridBase:initWithSize(${1:cocos2d:Size &gridSize},${2:cocos2d:Rect &rect})"
			],
			"description": "bool GridBase::initWithSize(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)"
		},
		 "void ScrollViewBar::setWidth(float width)": {
			"prefix": "void ScrollViewBar::setWidth(float width)",
			"body": [
				"ScrollViewBar:setWidth(${1:float width})"
			],
			"description": "void ScrollViewBar::setWidth(float width)"
		},
		 "float PhysicsBody::getVelocityLimit()": {
			"prefix": "float PhysicsBody::getVelocityLimit()",
			"body": [
				"float PhysicsBody:getVelocityLimit()"
			],
			"description": "float PhysicsBody::getVelocityLimit()"
		},
		 "void Mat4::scale(float value, Mat4* dst) const": {
			"prefix": "void Mat4::scale(float value, Mat4* dst) const",
			"body": [
				"Mat4:scale(${1:float value},${2:Mat4* dst})"
			],
			"description": "void Mat4::scale(float value, Mat4* dst) const"
		},
		 "void Mat4::multiply(float scalar)": {
			"prefix": "void Mat4::multiply(float scalar)",
			"body": [
				"Mat4:multiply(${1:float scalar})"
			],
			"description": "void Mat4::multiply(float scalar)"
		},
		 "void GLProgramState::setUniformTexture(GLint uniformLocation, GLuint textureId)": {
			"prefix": "void GLProgramState::setUniformTexture(GLint uniformLocation, GLuint textureId)",
			"body": [
				"GLProgramState:setUniformTexture(${1:GLint uniformLocation},${2:GLuint textureId})"
			],
			"description": "void GLProgramState::setUniformTexture(GLint uniformLocation, GLuint textureId)"
		},
		 "EaseExponentialInOut* EaseExponentialInOut::clone() const": {
			"prefix": "EaseExponentialInOut* EaseExponentialInOut::clone() const",
			"body": [
				"EaseExponentialInOut* EaseExponentialInOut:clone() "
			],
			"description": "EaseExponentialInOut* EaseExponentialInOut::clone() const"
		},
		 "void RenderState::StateBlock::setBlendDst(Blend blend)": {
			"prefix": "void RenderState::StateBlock::setBlendDst(Blend blend)",
			"body": [
				"RenderState:StateBlock:setBlendDst(${1:Blend blend})"
			],
			"description": "void RenderState::StateBlock::setBlendDst(Blend blend)"
		},
		 "void AbstractCheckButton::onSizeChanged()": {
			"prefix": "void AbstractCheckButton::onSizeChanged()",
			"body": [
				"void AbstractCheckButton:onSizeChanged()"
			],
			"description": "void AbstractCheckButton::onSizeChanged()"
		},
		 "Sprite* TMXLayer::getTileAt(const Vec2& tileCoordinate)": {
			"prefix": "Sprite* TMXLayer::getTileAt(const Vec2& tileCoordinate)",
			"body": [
				"TMXLayer:getTileAt(${1:Vec2& tileCoordinate})"
			],
			"description": "Sprite* TMXLayer::getTileAt(const Vec2& tileCoordinate)"
		},
		 "bool RemoveSelf::init(bool isNeedCleanUp)": {
			"prefix": "bool RemoveSelf::init(bool isNeedCleanUp)",
			"body": [
				"RemoveSelf:init(${1:bool isNeedCleanUp})"
			],
			"description": "bool RemoveSelf::init(bool isNeedCleanUp)"
		},
		 "void Slider::setMaxPercent(int percent)": {
			"prefix": "void Slider::setMaxPercent(int percent)",
			"body": [
				"Slider:setMaxPercent(${1:int percent})"
			],
			"description": "void Slider::setMaxPercent(int percent)"
		},
		 "void Node::setRotationSkewY(float rotationY)": {
			"prefix": "void Node::setRotationSkewY(float rotationY)",
			"body": [
				"Node:setRotationSkewY(${1:float rotationY})"
			],
			"description": "void Node::setRotationSkewY(float rotationY)"
		},
		 "void CCBKeyframe::setObject(Ref* obj)": {
			"prefix": "void CCBKeyframe::setObject(Ref* obj)",
			"body": [
				"CCBKeyframe:setObject(${1:Ref* obj})"
			],
			"description": "void CCBKeyframe::setObject(Ref* obj)"
		},
		 "void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)": {
			"prefix": "void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)",
			"body": [
				"RenderTexture:beginWithClear(${1:float r},${2:float g},${3:float b},${4:float a},${5:float depthValue},${6:int stencilValue},${7:GLbitfield flags})"
			],
			"description": "void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)"
		},
		 "Terrain::ChunkIndices Terrain::lookForIndicesLODSkrit(int selfLod, bool * result)": {
			"prefix": "Terrain::ChunkIndices Terrain::lookForIndicesLODSkrit(int selfLod, bool * result)",
			"body": [
				"Terrain:lookForIndicesLODSkrit(${1:int selfLod},${2:bool * result})"
			],
			"description": "Terrain::ChunkIndices Terrain::lookForIndicesLODSkrit(int selfLod, bool * result)"
		},
		 "void Bone::changeDisplayWithName(const std::string& name, bool force)": {
			"prefix": "void Bone::changeDisplayWithName(const std::string& name, bool force)",
			"body": [
				"Bone:changeDisplayWithName(${1:std:string& name},${2:bool force})"
			],
			"description": "void Bone::changeDisplayWithName(const std::string& name, bool force)"
		},
		 "float Quaternion::toAxisAngle(Vec3* axis) const": {
			"prefix": "float Quaternion::toAxisAngle(Vec3* axis) const",
			"body": [
				"Quaternion:toAxisAngle(${1:Vec3* axis})"
			],
			"description": "float Quaternion::toAxisAngle(Vec3* axis) const"
		},
		 "Vec2 Vec2::getIntersectPoint(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D)": {
			"prefix": "Vec2 Vec2::getIntersectPoint(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D)",
			"body": [
				"Vec2:getIntersectPoint(${1:Vec2& A},${2:Vec2& B},${3:Vec2& C},${4:Vec2& D})"
			],
			"description": "Vec2 Vec2::getIntersectPoint(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D)"
		},
		 "void InputDelegate::onTouchMoved(Touch *pTouch, Event *pEvent)": {
			"prefix": "void InputDelegate::onTouchMoved(Touch *pTouch, Event *pEvent)",
			"body": [
				"InputDelegate:onTouchMoved(${1:Touch *pTouch},${2:Event *pEvent})"
			],
			"description": "void InputDelegate::onTouchMoved(Touch *pTouch, Event *pEvent)"
		},
		 "void PhysicsJointSpring::setRestLength(float restLength)": {
			"prefix": "void PhysicsJointSpring::setRestLength(float restLength)",
			"body": [
				"PhysicsJointSpring:setRestLength(${1:float restLength})"
			],
			"description": "void PhysicsJointSpring::setRestLength(float restLength)"
		},
		 "const Value& CCBKeyframe::getValue() const": {
			"prefix": "const Value& CCBKeyframe::getValue() const",
			"body": [
				" Value& CCBKeyframe:getValue() "
			],
			"description": "const Value& CCBKeyframe::getValue() const"
		},
		 "void SocketIOPacket::initWithTypeIndex(int index)": {
			"prefix": "void SocketIOPacket::initWithTypeIndex(int index)",
			"body": [
				"SocketIOPacket:initWithTypeIndex(${1:int index})"
			],
			"description": "void SocketIOPacket::initWithTypeIndex(int index)"
		},
		 "void Text::onPressStateChangedToDisabled()": {
			"prefix": "void Text::onPressStateChangedToDisabled()",
			"body": [
				"void Text:onPressStateChangedToDisabled()"
			],
			"description": "void Text::onPressStateChangedToDisabled()"
		},
		 "const Mat4& Node::getNodeToParentTransform() const": {
			"prefix": "const Mat4& Node::getNodeToParentTransform() const",
			"body": [
				" Mat4& Node:getNodeToParentTransform() "
			],
			"description": "const Mat4& Node::getNodeToParentTransform() const"
		},
		 "PhysicsSprite3D* PhysicsSprite3D::createWithCollider(const std::string &modelPath, Physics3DColliderDes* colliderDes, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)": {
			"prefix": "PhysicsSprite3D* PhysicsSprite3D::createWithCollider(const std::string &modelPath, Physics3DColliderDes* colliderDes, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)",
			"body": [
				"PhysicsSprite3D:createWithCollider(${1:std:string &modelPath},${2:Physics3DColliderDes* colliderDes},${3:cocos2d:Vec3& translateInPhysics},${4:cocos2d:Quaternion& rotInPhsyics})"
			],
			"description": "PhysicsSprite3D* PhysicsSprite3D::createWithCollider(const std::string &modelPath, Physics3DColliderDes* colliderDes, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)"
		},
		 "ssize_t TextureAtlas::getCapacity() const": {
			"prefix": "ssize_t TextureAtlas::getCapacity() const",
			"body": [
				"ssize_t TextureAtlas:getCapacity() "
			],
			"description": "ssize_t TextureAtlas::getCapacity() const"
		},
		 "bool Bundle3D::loadMaterialsBinary_0_1(MaterialDatas& materialdatas)": {
			"prefix": "bool Bundle3D::loadMaterialsBinary_0_1(MaterialDatas& materialdatas)",
			"body": [
				"Bundle3D:loadMaterialsBinary_0_1(${1:MaterialDatas& materialdatas})"
			],
			"description": "bool Bundle3D::loadMaterialsBinary_0_1(MaterialDatas& materialdatas)"
		},
		 "bool Material::parseProperties(Properties* materialProperties)": {
			"prefix": "bool Material::parseProperties(Properties* materialProperties)",
			"body": [
				"Material:parseProperties(${1:Properties* materialProperties})"
			],
			"description": "bool Material::parseProperties(Properties* materialProperties)"
		},
		 "Sprite* Sprite::create(const PolygonInfo& info)": {
			"prefix": "Sprite* Sprite::create(const PolygonInfo& info)",
			"body": [
				"Sprite:create(${1:PolygonInfo& info})"
			],
			"description": "Sprite* Sprite::create(const PolygonInfo& info)"
		},
		 "void HttpClient::increaseThreadCount()": {
			"prefix": "void HttpClient::increaseThreadCount()",
			"body": [
				"void HttpClient:increaseThreadCount()"
			],
			"description": "void HttpClient::increaseThreadCount()"
		},
		 "TintTo* TintTo::create(float duration, const Color3B& color)": {
			"prefix": "TintTo* TintTo::create(float duration, const Color3B& color)",
			"body": [
				"TintTo:create(${1:float duration},${2:Color3B& color})"
			],
			"description": "TintTo* TintTo::create(float duration, const Color3B& color)"
		},
		 "void Mat4::add(float scalar)": {
			"prefix": "void Mat4::add(float scalar)",
			"body": [
				"Mat4:add(${1:float scalar})"
			],
			"description": "void Mat4::add(float scalar)"
		},
		 "bool LabelAtlas::initWithString(const std::string& theString, const std::string& fntFile)": {
			"prefix": "bool LabelAtlas::initWithString(const std::string& theString, const std::string& fntFile)",
			"body": [
				"LabelAtlas:initWithString(${1:std:string& theString},${2:std:string& fntFile})"
			],
			"description": "bool LabelAtlas::initWithString(const std::string& theString, const std::string& fntFile)"
		},
		 "void __Array::insertObject(Ref* object, int index)": {
			"prefix": "void __Array::insertObject(Ref* object, int index)",
			"body": [
				"__Array:insertObject(${1:Ref* object},${2:int index})"
			],
			"description": "void __Array::insertObject(Ref* object, int index)"
		},
		 "int Configuration::getMaxModelviewStackDepth() const": {
			"prefix": "int Configuration::getMaxModelviewStackDepth() const",
			"body": [
				"int Configuration:getMaxModelviewStackDepth() "
			],
			"description": "int Configuration::getMaxModelviewStackDepth() const"
		},
		 "Widget* TextAtlas::createCloneInstance()": {
			"prefix": "Widget* TextAtlas::createCloneInstance()",
			"body": [
				"Widget* TextAtlas:createCloneInstance()"
			],
			"description": "Widget* TextAtlas::createCloneInstance()"
		},
		 "void IMEDispatcher::dispatchKeyboardWillHide(IMEKeyboardNotificationInfo& info)": {
			"prefix": "void IMEDispatcher::dispatchKeyboardWillHide(IMEKeyboardNotificationInfo& info)",
			"body": [
				"IMEDispatcher:dispatchKeyboardWillHide(${1:IMEKeyboardNotificationInfo& info})"
			],
			"description": "void IMEDispatcher::dispatchKeyboardWillHide(IMEKeyboardNotificationInfo& info)"
		},
		 "void ListView::requestRefreshView()": {
			"prefix": "void ListView::requestRefreshView()",
			"body": [
				"void ListView:requestRefreshView()"
			],
			"description": "void ListView::requestRefreshView()"
		},
		 "void AbstractCheckButton::loadTextureBackGroundSelected(const std::string& backGroundSelected,TextureResType texType)": {
			"prefix": "void AbstractCheckButton::loadTextureBackGroundSelected(const std::string& backGroundSelected,TextureResType texType)",
			"body": [
				"AbstractCheckButton:loadTextureBackGroundSelected(${1:std:string& backGroundSelected},${2:TextureResType texType})"
			],
			"description": "void AbstractCheckButton::loadTextureBackGroundSelected(const std::string& backGroundSelected,TextureResType texType)"
		},
		 "void PageView::onTouchCancelled(Touch *touch, Event *unusedEvent)": {
			"prefix": "void PageView::onTouchCancelled(Touch *touch, Event *unusedEvent)",
			"body": [
				"PageView:onTouchCancelled(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void PageView::onTouchCancelled(Touch *touch, Event *unusedEvent)"
		},
		 "void Quaternion::set(float* array)": {
			"prefix": "void Quaternion::set(float* array)",
			"body": [
				"Quaternion:set(${1:float* array})"
			],
			"description": "void Quaternion::set(float* array)"
		},
		 "const std::vector<Vec2*>* PointArray::getControlPoints() const": {
			"prefix": "const std::vector<Vec2*>* PointArray::getControlPoints() const",
			"body": [
				" std:vector<Vec2*>* PointArray:getControlPoints() "
			],
			"description": "const std::vector<Vec2*>* PointArray::getControlPoints() const"
		},
		 "TintBy* TintBy::clone() const": {
			"prefix": "TintBy* TintBy::clone() const",
			"body": [
				"TintBy* TintBy:clone() "
			],
			"description": "TintBy* TintBy::clone() const"
		},
		 "RadioButtonGroup* RadioButtonGroup::create()": {
			"prefix": "RadioButtonGroup* RadioButtonGroup::create()",
			"body": [
				"RadioButtonGroup* RadioButtonGroup:create()"
			],
			"description": "RadioButtonGroup* RadioButtonGroup::create()"
		},
		 "void Node::setUserData(void *userData)": {
			"prefix": "void Node::setUserData(void *userData)",
			"body": [
				"Node:setUserData(${1:void *userData})"
			],
			"description": "void Node::setUserData(void *userData)"
		},
		 "Speed *Speed::clone() const": {
			"prefix": "Speed *Speed::clone() const",
			"body": [
				"Speed *Speed:clone() "
			],
			"description": "Speed *Speed::clone() const"
		},
		 "void Layout::setCameraMask(unsigned short mask, bool applyChildren)": {
			"prefix": "void Layout::setCameraMask(unsigned short mask, bool applyChildren)",
			"body": [
				"Layout:setCameraMask(${1:unsigned short mask},${2:bool applyChildren})"
			],
			"description": "void Layout::setCameraMask(unsigned short mask, bool applyChildren)"
		},
		 "void SIOClient::onOpen()": {
			"prefix": "void SIOClient::onOpen()",
			"body": [
				"void SIOClient:onOpen()"
			],
			"description": "void SIOClient::onOpen()"
		},
		 "TransitionSlideInB* TransitionSlideInB::create(float t, Scene* scene)": {
			"prefix": "TransitionSlideInB* TransitionSlideInB::create(float t, Scene* scene)",
			"body": [
				"TransitionSlideInB:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionSlideInB* TransitionSlideInB::create(float t, Scene* scene)"
		},
		 "RotateTo* RotateTo::create(float duration, const Vec3& dstAngle3D)": {
			"prefix": "RotateTo* RotateTo::create(float duration, const Vec3& dstAngle3D)",
			"body": [
				"RotateTo:create(${1:float duration},${2:Vec3& dstAngle3D})"
			],
			"description": "RotateTo* RotateTo::create(float duration, const Vec3& dstAngle3D)"
		},
		 "int  FontFreeType::getHorizontalKerningForChars(unsigned short firstChar, unsigned short secondChar) const": {
			"prefix": "int  FontFreeType::getHorizontalKerningForChars(unsigned short firstChar, unsigned short secondChar) const",
			"body": [
				"FontFreeType:getHorizontalKerningForChars(${1:unsigned short firstChar},${2:unsigned short secondChar})"
			],
			"description": "int  FontFreeType::getHorizontalKerningForChars(unsigned short firstChar, unsigned short secondChar) const"
		},
		 "const cocos2d::Map<std::string, AnimationData*>& ArmatureDataManager::getAnimationDatas() const": {
			"prefix": "const cocos2d::Map<std::string, AnimationData*>& ArmatureDataManager::getAnimationDatas() const",
			"body": [
				" cocos2d:Map<std:string, AnimationData*>& ArmatureDataManager:getAnimationDatas() "
			],
			"description": "const cocos2d::Map<std::string, AnimationData*>& ArmatureDataManager::getAnimationDatas() const"
		},
		 "void Vec4::add(const Vec4& v1, const Vec4& v2, Vec4* dst)": {
			"prefix": "void Vec4::add(const Vec4& v1, const Vec4& v2, Vec4* dst)",
			"body": [
				"Vec4:add(${1:Vec4& v1},${2:Vec4& v2},${3:Vec4* dst})"
			],
			"description": "void Vec4::add(const Vec4& v1, const Vec4& v2, Vec4* dst)"
		},
		 "ValueVector CCBReader::getOwnerCallbackNames()": {
			"prefix": "ValueVector CCBReader::getOwnerCallbackNames()",
			"body": [
				"ValueVector CCBReader:getOwnerCallbackNames()"
			],
			"description": "ValueVector CCBReader::getOwnerCallbackNames()"
		},
		 "void Node::removeChildByName(const std::string &name, bool cleanup)": {
			"prefix": "void Node::removeChildByName(const std::string &name, bool cleanup)",
			"body": [
				"Node:removeChildByName(${1:std:string &name},${2:bool cleanup})"
			],
			"description": "void Node::removeChildByName(const std::string &name, bool cleanup)"
		},
		 "float Physics3DHingeConstraint::getHingeAngle() const": {
			"prefix": "float Physics3DHingeConstraint::getHingeAngle() const",
			"body": [
				"float Physics3DHingeConstraint:getHingeAngle() "
			],
			"description": "float Physics3DHingeConstraint::getHingeAngle() const"
		},
		 "bool Bundle3D::loadSkinDataJson(SkinData* skindata)": {
			"prefix": "bool Bundle3D::loadSkinDataJson(SkinData* skindata)",
			"body": [
				"Bundle3D:loadSkinDataJson(${1:SkinData* skindata})"
			],
			"description": "bool Bundle3D::loadSkinDataJson(SkinData* skindata)"
		},
		 "void Bone::setChildArmature(Armature *armature)": {
			"prefix": "void Bone::setChildArmature(Armature *armature)",
			"body": [
				"Bone:setChildArmature(${1:Armature *armature})"
			],
			"description": "void Bone::setChildArmature(Armature *armature)"
		},
		 "Node* CCBReader::readFileWithCleanUp(bool bCleanUp, CCBAnimationManagerMapPtr am)": {
			"prefix": "Node* CCBReader::readFileWithCleanUp(bool bCleanUp, CCBAnimationManagerMapPtr am)",
			"body": [
				"CCBReader:readFileWithCleanUp(${1:bool bCleanUp},${2:CCBAnimationManagerMapPtr am})"
			],
			"description": "Node* CCBReader::readFileWithCleanUp(bool bCleanUp, CCBAnimationManagerMapPtr am)"
		},
		 "void trimUTF16Vector(std::vector<char16_t>& str)": {
			"prefix": "void trimUTF16Vector(std::vector<char16_t>& str)",
			"body": [
				"trimUTF16Vector(${1:std:vector<char16_t>& str})"
			],
			"description": "void trimUTF16Vector(std::vector<char16_t>& str)"
		},
		 "unsigned int Physics3DRigidBody::getConstraintCount() const": {
			"prefix": "unsigned int Physics3DRigidBody::getConstraintCount() const",
			"body": [
				"unsigned int Physics3DRigidBody:getConstraintCount() "
			],
			"description": "unsigned int Physics3DRigidBody::getConstraintCount() const"
		},
		 "int EnhanceAPI::getTemperature()": {
			"prefix": "int EnhanceAPI::getTemperature()",
			"body": [
				"int EnhanceAPI:getTemperature()"
			],
			"description": "int EnhanceAPI::getTemperature()"
		},
		 "DirectionLight* DirectionLight::create(const Vec3 &direction, const Color3B &color)": {
			"prefix": "DirectionLight* DirectionLight::create(const Vec3 &direction, const Color3B &color)",
			"body": [
				"DirectionLight:create(${1:Vec3 &direction},${2:Color3B &color})"
			],
			"description": "DirectionLight* DirectionLight::create(const Vec3 &direction, const Color3B &color)"
		},
		 "void UserDefault::deleteValueForKey(const char* key)": {
			"prefix": "void UserDefault::deleteValueForKey(const char* key)",
			"body": [
				"UserDefault:deleteValueForKey(${1:char* key})"
			],
			"description": "void UserDefault::deleteValueForKey(const char* key)"
		},
		 "void EaseSineInOut::update(float time)": {
			"prefix": "void EaseSineInOut::update(float time)",
			"body": [
				"EaseSineInOut:update(${1:float time})"
			],
			"description": "void EaseSineInOut::update(float time)"
		},
		 "ssize_t AnimationData::getMovementCount()": {
			"prefix": "ssize_t AnimationData::getMovementCount()",
			"body": [
				"ssize_t AnimationData:getMovementCount()"
			],
			"description": "ssize_t AnimationData::getMovementCount()"
		},
		 "void MenuItemSprite::setDisabledImage(Node* image)": {
			"prefix": "void MenuItemSprite::setDisabledImage(Node* image)",
			"body": [
				"MenuItemSprite:setDisabledImage(${1:Node* image})"
			],
			"description": "void MenuItemSprite::setDisabledImage(Node* image)"
		},
		 "void Physics3DSliderConstraint::setUseFrameOffset(bool frameOffsetOnOff)": {
			"prefix": "void Physics3DSliderConstraint::setUseFrameOffset(bool frameOffsetOnOff)",
			"body": [
				"Physics3DSliderConstraint:setUseFrameOffset(${1:bool frameOffsetOnOff})"
			],
			"description": "void Physics3DSliderConstraint::setUseFrameOffset(bool frameOffsetOnOff)"
		},
		 "void CCBSequenceProperty::setName(const char *pName)": {
			"prefix": "void CCBSequenceProperty::setName(const char *pName)",
			"body": [
				"CCBSequenceProperty:setName(${1:char *pName})"
			],
			"description": "void CCBSequenceProperty::setName(const char *pName)"
		},
		 "ssize_t SpriteBatchNode::atlasIndexForChild(Sprite *sprite, int nZ)": {
			"prefix": "ssize_t SpriteBatchNode::atlasIndexForChild(Sprite *sprite, int nZ)",
			"body": [
				"SpriteBatchNode:atlasIndexForChild(${1:Sprite *sprite},${2:int nZ})"
			],
			"description": "ssize_t SpriteBatchNode::atlasIndexForChild(Sprite *sprite, int nZ)"
		},
		 "const std::string TextureCache::getTextureFilePath( cocos2d::Texture2D *texture )const": {
			"prefix": "const std::string TextureCache::getTextureFilePath( cocos2d::Texture2D *texture )const",
			"body": [
				"std:string TextureCache:getTextureFilePath(${1:cocos2d:Texture2D *texture})"
			],
			"description": "const std::string TextureCache::getTextureFilePath( cocos2d::Texture2D *texture )const"
		},
		 "void TargetedAction::update(float time)": {
			"prefix": "void TargetedAction::update(float time)",
			"body": [
				"TargetedAction:update(${1:float time})"
			],
			"description": "void TargetedAction::update(float time)"
		},
		 "bool Image::initWithPngData(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithPngData(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithPngData(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithPngData(const unsigned char * data, ssize_t dataLen)"
		},
		 "void VolatileTextureMgr::removeTexture(Texture2D *t)": {
			"prefix": "void VolatileTextureMgr::removeTexture(Texture2D *t)",
			"body": [
				"VolatileTextureMgr:removeTexture(${1:Texture2D *t})"
			],
			"description": "void VolatileTextureMgr::removeTexture(Texture2D *t)"
		},
		 "void Director::calculateDeltaTime()": {
			"prefix": "void Director::calculateDeltaTime()",
			"body": [
				"void Director:calculateDeltaTime()"
			],
			"description": "void Director::calculateDeltaTime()"
		},
		 "void TextureAtlas::insertQuad(V3F_C4B_T2F_Quad *quad, ssize_t index)": {
			"prefix": "void TextureAtlas::insertQuad(V3F_C4B_T2F_Quad *quad, ssize_t index)",
			"body": [
				"TextureAtlas:insertQuad(${1:V3F_C4B_T2F_Quad *quad},${2:ssize_t index})"
			],
			"description": "void TextureAtlas::insertQuad(V3F_C4B_T2F_Quad *quad, ssize_t index)"
		},
		 "void CardinalSplineBy::startWithTarget(cocos2d::Node *target)": {
			"prefix": "void CardinalSplineBy::startWithTarget(cocos2d::Node *target)",
			"body": [
				"CardinalSplineBy:startWithTarget(${1:cocos2d:Node *target})"
			],
			"description": "void CardinalSplineBy::startWithTarget(cocos2d::Node *target)"
		},
		 "std::string  WidgetPropertiesReader::getWidgetReaderClassName(const std::string& classname)": {
			"prefix": "std::string  WidgetPropertiesReader::getWidgetReaderClassName(const std::string& classname)",
			"body": [
				"WidgetPropertiesReader:getWidgetReaderClassName(${1:std:string& classname})"
			],
			"description": "std::string  WidgetPropertiesReader::getWidgetReaderClassName(const std::string& classname)"
		},
		 "GLenum Mesh::getIndexFormat() const": {
			"prefix": "GLenum Mesh::getIndexFormat() const",
			"body": [
				"GLenum Mesh:getIndexFormat() "
			],
			"description": "GLenum Mesh::getIndexFormat() const"
		},
		 "void Node::setOpacity(GLubyte opacity)": {
			"prefix": "void Node::setOpacity(GLubyte opacity)",
			"body": [
				"Node:setOpacity(${1:GLubyte opacity})"
			],
			"description": "void Node::setOpacity(GLubyte opacity)"
		},
		 "Node* SceneReader::createObject(const rapidjson::Value &dict, cocos2d::Node* parent, AttachComponentType attachComponent)": {
			"prefix": "Node* SceneReader::createObject(const rapidjson::Value &dict, cocos2d::Node* parent, AttachComponentType attachComponent)",
			"body": [
				"SceneReader:createObject(${1:rapidjson:Value &dict},${2:cocos2d:Node* parent},${3:AttachComponentType attachComponent})"
			],
			"description": "Node* SceneReader::createObject(const rapidjson::Value &dict, cocos2d::Node* parent, AttachComponentType attachComponent)"
		},
		 "TextAtlas* TextAtlas::create()": {
			"prefix": "TextAtlas* TextAtlas::create()",
			"body": [
				"TextAtlas* TextAtlas:create()"
			],
			"description": "TextAtlas* TextAtlas::create()"
		},
		 "void TextField::setPasswordStyleText(const char *styleText)": {
			"prefix": "void TextField::setPasswordStyleText(const char *styleText)",
			"body": [
				"TextField:setPasswordStyleText(${1:char *styleText})"
			],
			"description": "void TextField::setPasswordStyleText(const char *styleText)"
		},
		 "bool Properties::seekFromCurrent(int offset)": {
			"prefix": "bool Properties::seekFromCurrent(int offset)",
			"body": [
				"Properties:seekFromCurrent(${1:int offset})"
			],
			"description": "bool Properties::seekFromCurrent(int offset)"
		},
		 "std::string TMXTiledMap::getDescription() const": {
			"prefix": "std::string TMXTiledMap::getDescription() const",
			"body": [
				"std:string TMXTiledMap:getDescription() "
			],
			"description": "std::string TMXTiledMap::getDescription() const"
		},
		 "Vec2 TMXLayer::getPositionForHexAt(const Vec2& pos)": {
			"prefix": "Vec2 TMXLayer::getPositionForHexAt(const Vec2& pos)",
			"body": [
				"TMXLayer:getPositionForHexAt(${1:Vec2& pos})"
			],
			"description": "Vec2 TMXLayer::getPositionForHexAt(const Vec2& pos)"
		},
		 "void Physics3DConeTwistConstraint::setMotorTargetInConstraintSpace(const btQuaternion &q)": {
			"prefix": "void Physics3DConeTwistConstraint::setMotorTargetInConstraintSpace(const btQuaternion &q)",
			"body": [
				"Physics3DConeTwistConstraint:setMotorTargetInConstraintSpace(${1:btQuaternion &q})"
			],
			"description": "void Physics3DConeTwistConstraint::setMotorTargetInConstraintSpace(const btQuaternion &q)"
		},
		 "void Component::setOwner(Node *owner)": {
			"prefix": "void Component::setOwner(Node *owner)",
			"body": [
				"Component:setOwner(${1:Node *owner})"
			],
			"description": "void Component::setOwner(Node *owner)"
		},
		 "cocos2d::Vec3 Terrain::getIntersectionPoint(const Ray & ray) const": {
			"prefix": "cocos2d::Vec3 Terrain::getIntersectionPoint(const Ray & ray) const",
			"body": [
				"Terrain:getIntersectionPoint(${1:Ray & ray})"
			],
			"description": "cocos2d::Vec3 Terrain::getIntersectionPoint(const Ray & ray) const"
		},
		 "Vec2 AutoPolygon::findFirstNoneTransparentPixel(const Rect& rect, const float& threshold)": {
			"prefix": "Vec2 AutoPolygon::findFirstNoneTransparentPixel(const Rect& rect, const float& threshold)",
			"body": [
				"AutoPolygon:findFirstNoneTransparentPixel(${1:Rect& rect},${2:float& threshold})"
			],
			"description": "Vec2 AutoPolygon::findFirstNoneTransparentPixel(const Rect& rect, const float& threshold)"
		},
		 "cocos2d::Mat4 Physics3DConeTwistConstraint::getBFrame() const": {
			"prefix": "cocos2d::Mat4 Physics3DConeTwistConstraint::getBFrame() const",
			"body": [
				"cocos2d:Mat4 Physics3DConeTwistConstraint:getBFrame() "
			],
			"description": "cocos2d::Mat4 Physics3DConeTwistConstraint::getBFrame() const"
		},
		 "void RelativeLayoutManager::doLayout(LayoutProtocol *layout)": {
			"prefix": "void RelativeLayoutManager::doLayout(LayoutProtocol *layout)",
			"body": [
				"RelativeLayoutManager:doLayout(${1:LayoutProtocol *layout})"
			],
			"description": "void RelativeLayoutManager::doLayout(LayoutProtocol *layout)"
		},
		 "bool EditBoxImplAndroid::isEditing()": {
			"prefix": "bool EditBoxImplAndroid::isEditing()",
			"body": [
				"bool EditBoxImplAndroid:isEditing()"
			],
			"description": "bool EditBoxImplAndroid::isEditing()"
		},
		 "Vector<Node*>& CCBAnimationManager::getDocumentCallbackNodes()": {
			"prefix": "Vector<Node*>& CCBAnimationManager::getDocumentCallbackNodes()",
			"body": [
				"Vector<Node*>& CCBAnimationManager:getDocumentCallbackNodes()"
			],
			"description": "Vector<Node*>& CCBAnimationManager::getDocumentCallbackNodes()"
		},
		 "ReuseGrid* ReuseGrid::reverse() const": {
			"prefix": "ReuseGrid* ReuseGrid::reverse() const",
			"body": [
				"ReuseGrid* ReuseGrid:reverse() "
			],
			"description": "ReuseGrid* ReuseGrid::reverse() const"
		},
		 "Node * NodeLoader::parsePropTypeCCBFile(Node * pNode, Node * pParent, CCBReader * pCCBReader)": {
			"prefix": "Node * NodeLoader::parsePropTypeCCBFile(Node * pNode, Node * pParent, CCBReader * pCCBReader)",
			"body": [
				"* NodeLoader:parsePropTypeCCBFile(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * pCCBReader})"
			],
			"description": "Node * NodeLoader::parsePropTypeCCBFile(Node * pNode, Node * pParent, CCBReader * pCCBReader)"
		},
		 "void OBB::transform(const Mat4& mat)": {
			"prefix": "void OBB::transform(const Mat4& mat)",
			"body": [
				"OBB:transform(${1:Mat4& mat})"
			],
			"description": "void OBB::transform(const Mat4& mat)"
		},
		 "bool AtlasNode::initWithTexture(Texture2D* texture, int tileWidth, int tileHeight, int itemsToRender)": {
			"prefix": "bool AtlasNode::initWithTexture(Texture2D* texture, int tileWidth, int tileHeight, int itemsToRender)",
			"body": [
				"AtlasNode:initWithTexture(${1:Texture2D* texture},${2:int tileWidth},${3:int tileHeight},${4:int itemsToRender})"
			],
			"description": "bool AtlasNode::initWithTexture(Texture2D* texture, int tileWidth, int tileHeight, int itemsToRender)"
		},
		 "bool Terrain::getIntersectionPoint(const Ray & ray_, Vec3 & intersectionPoint) const": {
			"prefix": "bool Terrain::getIntersectionPoint(const Ray & ray_, Vec3 & intersectionPoint) const",
			"body": [
				"Terrain:getIntersectionPoint(${1:Ray & ray_},${2:Vec3 & intersectionPoint})"
			],
			"description": "bool Terrain::getIntersectionPoint(const Ray & ray_, Vec3 & intersectionPoint) const"
		},
		 "void InputDelegate::onTouchesCancelled(const std::vector<Touch*>& pTouches, Event *pEvent)": {
			"prefix": "void InputDelegate::onTouchesCancelled(const std::vector<Touch*>& pTouches, Event *pEvent)",
			"body": [
				"InputDelegate:onTouchesCancelled(${1:std:vector<Touch*>& pTouches},${2:Event *pEvent})"
			],
			"description": "void InputDelegate::onTouchesCancelled(const std::vector<Touch*>& pTouches, Event *pEvent)"
		},
		 "ComRender::ComRender(cocos2d::Node *node, const char *comName)": {
			"prefix": "ComRender::ComRender(cocos2d::Node *node, const char *comName)",
			"body": [
				"*node},${2:char *comName})"
			],
			"description": "ComRender::ComRender(cocos2d::Node *node, const char *comName)"
		},
		 "bool SplitRows::initWithDuration(float duration, unsigned int rows)": {
			"prefix": "bool SplitRows::initWithDuration(float duration, unsigned int rows)",
			"body": [
				"SplitRows:initWithDuration(${1:float duration},${2:unsigned int rows})"
			],
			"description": "bool SplitRows::initWithDuration(float duration, unsigned int rows)"
		},
		 "void WebViewImpl::loadHTMLString(const std::string &string, const std::string &baseURL)": {
			"prefix": "void WebViewImpl::loadHTMLString(const std::string &string, const std::string &baseURL)",
			"body": [
				"WebViewImpl:loadHTMLString(${1:std:string &string},${2:std:string &baseURL})"
			],
			"description": "void WebViewImpl::loadHTMLString(const std::string &string, const std::string &baseURL)"
		},
		 "GLProgram* Texture2D::getGLProgram() const": {
			"prefix": "GLProgram* Texture2D::getGLProgram() const",
			"body": [
				"GLProgram* Texture2D:getGLProgram() "
			],
			"description": "GLProgram* Texture2D::getGLProgram() const"
		},
		 "void ArmatureAnimation::gotoAndPlay(int frameIndex)": {
			"prefix": "void ArmatureAnimation::gotoAndPlay(int frameIndex)",
			"body": [
				"ArmatureAnimation:gotoAndPlay(${1:int frameIndex})"
			],
			"description": "void ArmatureAnimation::gotoAndPlay(int frameIndex)"
		},
		 "std::string Configuration::getInfo() const": {
			"prefix": "std::string Configuration::getInfo() const",
			"body": [
				"std:string Configuration:getInfo() "
			],
			"description": "std::string Configuration::getInfo() const"
		},
		 "void ClippingNode::onBeforeVisit()": {
			"prefix": "void ClippingNode::onBeforeVisit()",
			"body": [
				"void ClippingNode:onBeforeVisit()"
			],
			"description": "void ClippingNode::onBeforeVisit()"
		},
		 "Node* ImageView::getVirtualRenderer()": {
			"prefix": "Node* ImageView::getVirtualRenderer()",
			"body": [
				"Node* ImageView:getVirtualRenderer()"
			],
			"description": "Node* ImageView::getVirtualRenderer()"
		},
		 "bool Bundle3D::loadMaterialsBinary_0_2(MaterialDatas& materialdatas)": {
			"prefix": "bool Bundle3D::loadMaterialsBinary_0_2(MaterialDatas& materialdatas)",
			"body": [
				"Bundle3D:loadMaterialsBinary_0_2(${1:MaterialDatas& materialdatas})"
			],
			"description": "bool Bundle3D::loadMaterialsBinary_0_2(MaterialDatas& materialdatas)"
		},
		 "EaseBounceInOut* EaseBounceInOut::create(ActionInterval* action)": {
			"prefix": "EaseBounceInOut* EaseBounceInOut::create(ActionInterval* action)",
			"body": [
				"EaseBounceInOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseBounceInOut* EaseBounceInOut::create(ActionInterval* action)"
		},
		 "bool Frustum::isOutOfFrustum(const AABB& aabb) const": {
			"prefix": "bool Frustum::isOutOfFrustum(const AABB& aabb) const",
			"body": [
				"Frustum:isOutOfFrustum(${1:AABB& aabb})"
			],
			"description": "bool Frustum::isOutOfFrustum(const AABB& aabb) const"
		},
		 "bool RichText::init()": {
			"prefix": "bool RichText::init()",
			"body": [
				"bool RichText:init()"
			],
			"description": "bool RichText::init()"
		},
		 "void Physics3DRigidBody::setCenterOfMassTransform( const cocos2d::Mat4& xform )": {
			"prefix": "void Physics3DRigidBody::setCenterOfMassTransform( const cocos2d::Mat4& xform )",
			"body": [
				"Physics3DRigidBody:setCenterOfMassTransform(${1:cocos2d:Mat4& xform})"
			],
			"description": "void Physics3DRigidBody::setCenterOfMassTransform( const cocos2d::Mat4& xform )"
		},
		 "bool AudioEngineImpl::init()": {
			"prefix": "bool AudioEngineImpl::init()",
			"body": [
				"bool AudioEngineImpl:init()"
			],
			"description": "bool AudioEngineImpl::init()"
		},
		 "void TMXMapInfo::internalInit(const std::string& tmxFileName, const std::string& resourcePath)": {
			"prefix": "void TMXMapInfo::internalInit(const std::string& tmxFileName, const std::string& resourcePath)",
			"body": [
				"TMXMapInfo:internalInit(${1:std:string& tmxFileName},${2:std:string& resourcePath})"
			],
			"description": "void TMXMapInfo::internalInit(const std::string& tmxFileName, const std::string& resourcePath)"
		},
		 "void TextFieldTTF::setColorSpaceHolder(const Color4B& color)": {
			"prefix": "void TextFieldTTF::setColorSpaceHolder(const Color4B& color)",
			"body": [
				"TextFieldTTF:setColorSpaceHolder(${1:Color4B& color})"
			],
			"description": "void TextFieldTTF::setColorSpaceHolder(const Color4B& color)"
		},
		 "int Texture2D::getPixelsHigh() const": {
			"prefix": "int Texture2D::getPixelsHigh() const",
			"body": [
				"int Texture2D:getPixelsHigh() "
			],
			"description": "int Texture2D::getPixelsHigh() const"
		},
		 "void SpriteFrame::setOffsetInPixels(const Vec2& offsetInPixels)": {
			"prefix": "void SpriteFrame::setOffsetInPixels(const Vec2& offsetInPixels)",
			"body": [
				"SpriteFrame:setOffsetInPixels(${1:Vec2& offsetInPixels})"
			],
			"description": "void SpriteFrame::setOffsetInPixels(const Vec2& offsetInPixels)"
		},
		 "void Menu::onTouchEnded(Touch* touch, Event* event)": {
			"prefix": "void Menu::onTouchEnded(Touch* touch, Event* event)",
			"body": [
				"Menu:onTouchEnded(${1:Touch* touch},${2:Event* event})"
			],
			"description": "void Menu::onTouchEnded(Touch* touch, Event* event)"
		},
		 "void CCBAnimationManager::runAnimations(const char *pName)": {
			"prefix": "void CCBAnimationManager::runAnimations(const char *pName)",
			"body": [
				"CCBAnimationManager:runAnimations(${1:char *pName})"
			],
			"description": "void CCBAnimationManager::runAnimations(const char *pName)"
		},
		 "void EditBoxImplCommon::editBoxEditingDidBegin()": {
			"prefix": "void EditBoxImplCommon::editBoxEditingDidBegin()",
			"body": [
				"void EditBoxImplCommon:editBoxEditingDidBegin()"
			],
			"description": "void EditBoxImplCommon::editBoxEditingDidBegin()"
		},
		 "std::string Value::asString() const": {
			"prefix": "std::string Value::asString() const",
			"body": [
				"std:string Value:asString() "
			],
			"description": "std::string Value::asString() const"
		},
		 "void Node::setNodeToParentTransform(const Mat4& transform)": {
			"prefix": "void Node::setNodeToParentTransform(const Mat4& transform)",
			"body": [
				"Node:setNodeToParentTransform(${1:Mat4& transform})"
			],
			"description": "void Node::setNodeToParentTransform(const Mat4& transform)"
		},
		 "void Physics3DDebugDrawer::ensureCapacity( int count )": {
			"prefix": "void Physics3DDebugDrawer::ensureCapacity( int count )",
			"body": [
				"Physics3DDebugDrawer:ensureCapacity(${1:int count})"
			],
			"description": "void Physics3DDebugDrawer::ensureCapacity( int count )"
		},
		 "ActionTimeline* ActionTimelineCache::loadAnimationActionWithFile(const std::string& fileName)": {
			"prefix": "ActionTimeline* ActionTimelineCache::loadAnimationActionWithFile(const std::string& fileName)",
			"body": [
				"ActionTimelineCache:loadAnimationActionWithFile(${1:std:string& fileName})"
			],
			"description": "ActionTimeline* ActionTimelineCache::loadAnimationActionWithFile(const std::string& fileName)"
		},
		 "Widget* Widget::getCurrentFocusedWidget()const": {
			"prefix": "Widget* Widget::getCurrentFocusedWidget()const",
			"body": [
				"Widget* Widget:getCurrentFocusedWidget()"
			],
			"description": "Widget* Widget::getCurrentFocusedWidget()const"
		},
		 "MotionStreak* MotionStreak::create(float fade, float minSeg, float stroke, const Color3B& color, Texture2D* texture)": {
			"prefix": "MotionStreak* MotionStreak::create(float fade, float minSeg, float stroke, const Color3B& color, Texture2D* texture)",
			"body": [
				"MotionStreak:create(${1:float fade},${2:float minSeg},${3:float stroke},${4:Color3B& color},${5:Texture2D* texture})"
			],
			"description": "MotionStreak* MotionStreak::create(float fade, float minSeg, float stroke, const Color3B& color, Texture2D* texture)"
		},
		 "void UserDefault::initXMLFilePath()": {
			"prefix": "void UserDefault::initXMLFilePath()",
			"body": [
				"void UserDefault:initXMLFilePath()"
			],
			"description": "void UserDefault::initXMLFilePath()"
		},
		 "void TriggerMng::parse(cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)": {
			"prefix": "void TriggerMng::parse(cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)",
			"body": [
				"TriggerMng:parse(${1:cocostudio:CocoLoader *pCocoLoader},${2:cocostudio:stExpCocoNode *pCocoNode})"
			],
			"description": "void TriggerMng::parse(cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)"
		},
		 "EventListenerPhysicsContactWithGroup* EventListenerPhysicsContactWithGroup::clone()": {
			"prefix": "EventListenerPhysicsContactWithGroup* EventListenerPhysicsContactWithGroup::clone()",
			"body": [
				"EventListenerPhysicsContactWithGroup* EventListenerPhysicsContactWithGroup:clone()"
			],
			"description": "EventListenerPhysicsContactWithGroup* EventListenerPhysicsContactWithGroup::clone()"
		},
		 "void EditBox::setFontColor(const Color4B& color)": {
			"prefix": "void EditBox::setFontColor(const Color4B& color)",
			"body": [
				"EditBox:setFontColor(${1:Color4B& color})"
			],
			"description": "void EditBox::setFontColor(const Color4B& color)"
		},
		 "void FileUtils::addSearchResolutionsOrder(const std::string &order,const bool front)": {
			"prefix": "void FileUtils::addSearchResolutionsOrder(const std::string &order,const bool front)",
			"body": [
				"FileUtils:addSearchResolutionsOrder(${1:std:string &order},${2:bool front})"
			],
			"description": "void FileUtils::addSearchResolutionsOrder(const std::string &order,const bool front)"
		},
		 "void SkewFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void SkewFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"SkewFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void SkewFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "TransitionFlipY* TransitionFlipY::create(float t, Scene* s, Orientation o)": {
			"prefix": "TransitionFlipY* TransitionFlipY::create(float t, Scene* s, Orientation o)",
			"body": [
				"TransitionFlipY:create(${1:float t},${2:Scene* s},${3:Orientation o})"
			],
			"description": "TransitionFlipY* TransitionFlipY::create(float t, Scene* s, Orientation o)"
		},
		 "void MenuItemFont::setFontSize(int s)": {
			"prefix": "void MenuItemFont::setFontSize(int s)",
			"body": [
				"MenuItemFont:setFontSize(${1:int s})"
			],
			"description": "void MenuItemFont::setFontSize(int s)"
		},
		 "bool Director::init(void)": {
			"prefix": "bool Director::init(void)",
			"body": [
				"Director:init(${1:void})"
			],
			"description": "bool Director::init(void)"
		},
		 "void AudioEngineImpl::setVolume(int audioID,float volume)": {
			"prefix": "void AudioEngineImpl::setVolume(int audioID,float volume)",
			"body": [
				"AudioEngineImpl:setVolume(${1:int audioID},${2:float volume})"
			],
			"description": "void AudioEngineImpl::setVolume(int audioID,float volume)"
		},
		 "Texture2D* TextureCache::addImage(Image *image, const std::string &key)": {
			"prefix": "Texture2D* TextureCache::addImage(Image *image, const std::string &key)",
			"body": [
				"TextureCache:addImage(${1:Image *image},${2:std:string &key})"
			],
			"description": "Texture2D* TextureCache::addImage(Image *image, const std::string &key)"
		},
		 "Node * CSLoader::createNode(const Data data, const ccNodeLoadCallback &callback)": {
			"prefix": "Node * CSLoader::createNode(const Data data, const ccNodeLoadCallback &callback)",
			"body": [
				"* CSLoader:createNode(${1:Data data},${2:ccNodeLoadCallback &callback})"
			],
			"description": "Node * CSLoader::createNode(const Data data, const ccNodeLoadCallback &callback)"
		},
		 "void NavMeshAgent::syncToNode()": {
			"prefix": "void NavMeshAgent::syncToNode()",
			"body": [
				"void NavMeshAgent:syncToNode()"
			],
			"description": "void NavMeshAgent::syncToNode()"
		},
		 "CatmullRomTo* CatmullRomTo::reverse() const": {
			"prefix": "CatmullRomTo* CatmullRomTo::reverse() const",
			"body": [
				"CatmullRomTo* CatmullRomTo:reverse() "
			],
			"description": "CatmullRomTo* CatmullRomTo::reverse() const"
		},
		 "bool CameraBackgroundColorBrush::init()": {
			"prefix": "bool CameraBackgroundColorBrush::init()",
			"body": [
				"bool CameraBackgroundColorBrush:init()"
			],
			"description": "bool CameraBackgroundColorBrush::init()"
		},
		 "void CCBRotateXTo::startWithTarget(Node *pNode)": {
			"prefix": "void CCBRotateXTo::startWithTarget(Node *pNode)",
			"body": [
				"CCBRotateXTo:startWithTarget(${1:Node *pNode})"
			],
			"description": "void CCBRotateXTo::startWithTarget(Node *pNode)"
		},
		 "void RelativeLayoutManager::caculateFinalPositionWithRelativeAlign()": {
			"prefix": "void RelativeLayoutManager::caculateFinalPositionWithRelativeAlign()",
			"body": [
				"void RelativeLayoutManager:caculateFinalPositionWithRelativeAlign()"
			],
			"description": "void RelativeLayoutManager::caculateFinalPositionWithRelativeAlign()"
		},
		 "std::set<void*> Scheduler::pauseAllTargetsWithMinPriority(int minPriority)": {
			"prefix": "std::set<void*> Scheduler::pauseAllTargetsWithMinPriority(int minPriority)",
			"body": [
				"Scheduler:pauseAllTargetsWithMinPriority(${1:int minPriority})"
			],
			"description": "std::set<void*> Scheduler::pauseAllTargetsWithMinPriority(int minPriority)"
		},
		 "DelayTime* DelayTime::create(float d)": {
			"prefix": "DelayTime* DelayTime::create(float d)",
			"body": [
				"DelayTime:create(${1:float d})"
			],
			"description": "DelayTime* DelayTime::create(float d)"
		},
		 "EventListenerKeyboard* EventListenerKeyboard::create()": {
			"prefix": "EventListenerKeyboard* EventListenerKeyboard::create()",
			"body": [
				"EventListenerKeyboard* EventListenerKeyboard:create()"
			],
			"description": "EventListenerKeyboard* EventListenerKeyboard::create()"
		},
		 "EaseQuinticActionIn* EaseQuinticActionIn::reverse() const": {
			"prefix": "EaseQuinticActionIn* EaseQuinticActionIn::reverse() const",
			"body": [
				"EaseQuinticActionIn* EaseQuinticActionIn:reverse() "
			],
			"description": "EaseQuinticActionIn* EaseQuinticActionIn::reverse() const"
		},
		 "float AudioEngineImpl::getCurrentTime(int audioID)": {
			"prefix": "float AudioEngineImpl::getCurrentTime(int audioID)",
			"body": [
				"AudioEngineImpl:getCurrentTime(${1:int audioID})"
			],
			"description": "float AudioEngineImpl::getCurrentTime(int audioID)"
		},
		 "int UserDefault::getIntegerForKey(const char* pKey)": {
			"prefix": "int UserDefault::getIntegerForKey(const char* pKey)",
			"body": [
				"UserDefault:getIntegerForKey(${1:char* pKey})"
			],
			"description": "int UserDefault::getIntegerForKey(const char* pKey)"
		},
		 "void TransitionSlideInL:: initScenes()": {
			"prefix": "void TransitionSlideInL:: initScenes()",
			"body": [
				"void TransitionSlideInL: initScenes()"
			],
			"description": "void TransitionSlideInL:: initScenes()"
		},
		 "void Quaternion::normalize()": {
			"prefix": "void Quaternion::normalize()",
			"body": [
				"void Quaternion:normalize()"
			],
			"description": "void Quaternion::normalize()"
		},
		 "Skin *Skin::createWithSpriteFrameName(const std::string& pszSpriteFrameName)": {
			"prefix": "Skin *Skin::createWithSpriteFrameName(const std::string& pszSpriteFrameName)",
			"body": [
				"*Skin:createWithSpriteFrameName(${1:std:string& pszSpriteFrameName})"
			],
			"description": "Skin *Skin::createWithSpriteFrameName(const std::string& pszSpriteFrameName)"
		},
		 "bool Camera::isVisibleInFrustum(const AABB* aabb) const": {
			"prefix": "bool Camera::isVisibleInFrustum(const AABB* aabb) const",
			"body": [
				"Camera:isVisibleInFrustum(${1:AABB* aabb})"
			],
			"description": "bool Camera::isVisibleInFrustum(const AABB* aabb) const"
		},
		 "bool Physics3DSliderConstraint::getPoweredLinMotor() const": {
			"prefix": "bool Physics3DSliderConstraint::getPoweredLinMotor() const",
			"body": [
				"bool Physics3DSliderConstraint:getPoweredLinMotor() "
			],
			"description": "bool Physics3DSliderConstraint::getPoweredLinMotor() const"
		},
		 "TMXLayer * TMXTiledMap::getLayer(const std::string& layerName) const": {
			"prefix": "TMXLayer * TMXTiledMap::getLayer(const std::string& layerName) const",
			"body": [
				"* TMXTiledMap:getLayer(${1:std:string& layerName})"
			],
			"description": "TMXLayer * TMXTiledMap::getLayer(const std::string& layerName) const"
		},
		 "void UserDefault::setDelegate(UserDefault *delegate)": {
			"prefix": "void UserDefault::setDelegate(UserDefault *delegate)",
			"body": [
				"UserDefault:setDelegate(${1:UserDefault *delegate})"
			],
			"description": "void UserDefault::setDelegate(UserDefault *delegate)"
		},
		 "Mat4 TMXLayer::tileToNodeTransform()": {
			"prefix": "Mat4 TMXLayer::tileToNodeTransform()",
			"body": [
				"Mat4 TMXLayer:tileToNodeTransform()"
			],
			"description": "Mat4 TMXLayer::tileToNodeTransform()"
		},
		 "float FadeOutUpTiles::testFunc(const Size& pos, float time)": {
			"prefix": "float FadeOutUpTiles::testFunc(const Size& pos, float time)",
			"body": [
				"FadeOutUpTiles:testFunc(${1:Size& pos},${2:float time})"
			],
			"description": "float FadeOutUpTiles::testFunc(const Size& pos, float time)"
		},
		 "void ComController::onRemove()": {
			"prefix": "void ComController::onRemove()",
			"body": [
				"void ComController:onRemove()"
			],
			"description": "void ComController::onRemove()"
		},
		 "void Controller::onAxisEvent(int axisCode, float value, bool isAnalog)": {
			"prefix": "void Controller::onAxisEvent(int axisCode, float value, bool isAnalog)",
			"body": [
				"Controller:onAxisEvent(${1:int axisCode},${2:float value},${3:bool isAnalog})"
			],
			"description": "void Controller::onAxisEvent(int axisCode, float value, bool isAnalog)"
		},
		 "void LabelTTFLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)": {
			"prefix": "void LabelTTFLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)",
			"body": [
				"LabelTTFLoader:onHandlePropTypeIntegerLabeled(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:int pIntegerLabeled},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelTTFLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)"
		},
		 "void Layout::addChild(Node *child, int zOrder, int tag)": {
			"prefix": "void Layout::addChild(Node *child, int zOrder, int tag)",
			"body": [
				"Layout:addChild(${1:Node *child},${2:int zOrder},${3:int tag})"
			],
			"description": "void Layout::addChild(Node *child, int zOrder, int tag)"
		},
		 "cocos2d::Vec3 convertbtVector3ToVec3( const btVector3 &btVec3 )": {
			"prefix": "cocos2d::Vec3 convertbtVector3ToVec3( const btVector3 &btVec3 )",
			"body": [
				"convertbtVector3ToVec3(${1:btVector3 &btVec3})"
			],
			"description": "cocos2d::Vec3 convertbtVector3ToVec3( const btVector3 &btVec3 )"
		},
		 "std::string LoadingBar::getDescription() const": {
			"prefix": "std::string LoadingBar::getDescription() const",
			"body": [
				"std:string LoadingBar:getDescription() "
			],
			"description": "std::string LoadingBar::getDescription() const"
		},
		 "bool SkewTo::initWithDuration(float t, float sx, float sy)": {
			"prefix": "bool SkewTo::initWithDuration(float t, float sx, float sy)",
			"body": [
				"SkewTo:initWithDuration(${1:float t},${2:float sx},${3:float sy})"
			],
			"description": "bool SkewTo::initWithDuration(float t, float sx, float sy)"
		},
		 "void AudioEngine::remove(int audioID)": {
			"prefix": "void AudioEngine::remove(int audioID)",
			"body": [
				"AudioEngine:remove(${1:int audioID})"
			],
			"description": "void AudioEngine::remove(int audioID)"
		},
		 "void ScrollView::jumpToTopLeft()": {
			"prefix": "void ScrollView::jumpToTopLeft()",
			"body": [
				"void ScrollView:jumpToTopLeft()"
			],
			"description": "void ScrollView::jumpToTopLeft()"
		},
		 "void GLViewImpl::setIMEKeyboardState(bool /*bOpen*/)": {
			"prefix": "void GLViewImpl::setIMEKeyboardState(bool /*bOpen*/)",
			"body": [
				"GLViewImpl:setIMEKeyboardState(${1:bool /*bOpen*/})"
			],
			"description": "void GLViewImpl::setIMEKeyboardState(bool /*bOpen*/)"
		},
		 "void AbstractCheckButton::loadTextureBackGroundDisabled(const std::string& backGroundDisabled,TextureResType texType)": {
			"prefix": "void AbstractCheckButton::loadTextureBackGroundDisabled(const std::string& backGroundDisabled,TextureResType texType)",
			"body": [
				"AbstractCheckButton:loadTextureBackGroundDisabled(${1:std:string& backGroundDisabled},${2:TextureResType texType})"
			],
			"description": "void AbstractCheckButton::loadTextureBackGroundDisabled(const std::string& backGroundDisabled,TextureResType texType)"
		},
		 "Texture2D::PixelFormat Texture2D::convertRGBA8888ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)": {
			"prefix": "Texture2D::PixelFormat Texture2D::convertRGBA8888ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)",
			"body": [
				"Texture2D:convertRGBA8888ToFormat(${1:unsigned char* data},${2:ssize_t dataLen},${3:PixelFormat format},${4:unsigned char** outData},${5:ssize_t* outDataLen})"
			],
			"description": "Texture2D::PixelFormat Texture2D::convertRGBA8888ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)"
		},
		 "void Texture2D::convertRGBA8888ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGBA8888ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGBA8888ToRGB888(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGBA8888ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "bool Mat4::decompose(Vec3* scale, Quaternion* rotation, Vec3* translation) const": {
			"prefix": "bool Mat4::decompose(Vec3* scale, Quaternion* rotation, Vec3* translation) const",
			"body": [
				"Mat4:decompose(${1:Vec3* scale},${2:Quaternion* rotation},${3:Vec3* translation})"
			],
			"description": "bool Mat4::decompose(Vec3* scale, Quaternion* rotation, Vec3* translation) const"
		},
		 "bool TextField::isPasswordEnabled()const": {
			"prefix": "bool TextField::isPasswordEnabled()const",
			"body": [
				"bool TextField:isPasswordEnabled()"
			],
			"description": "bool TextField::isPasswordEnabled()const"
		},
		 "void PhysicsBody::setRotationEnable(bool enable)": {
			"prefix": "void PhysicsBody::setRotationEnable(bool enable)",
			"body": [
				"PhysicsBody:setRotationEnable(${1:bool enable})"
			],
			"description": "void PhysicsBody::setRotationEnable(bool enable)"
		},
		 "SkewBy* SkewBy::create(float t, float sx, float sy)": {
			"prefix": "SkewBy* SkewBy::create(float t, float sx, float sy)",
			"body": [
				"SkewBy:create(${1:float t},${2:float sx},${3:float sy})"
			],
			"description": "SkewBy* SkewBy::create(float t, float sx, float sy)"
		},
		 "VBox* VBox::create(const cocos2d::Size &size)": {
			"prefix": "VBox* VBox::create(const cocos2d::Size &size)",
			"body": [
				"VBox:create(${1:cocos2d:Size &size})"
			],
			"description": "VBox* VBox::create(const cocos2d::Size &size)"
		},
		 "JumpTiles3D* JumpTiles3D::clone() const": {
			"prefix": "JumpTiles3D* JumpTiles3D::clone() const",
			"body": [
				"JumpTiles3D* JumpTiles3D:clone() "
			],
			"description": "JumpTiles3D* JumpTiles3D::clone() const"
		},
		 "bool Bundle3D::loadNodesBinary(NodeDatas& nodedatas)": {
			"prefix": "bool Bundle3D::loadNodesBinary(NodeDatas& nodedatas)",
			"body": [
				"Bundle3D:loadNodesBinary(${1:NodeDatas& nodedatas})"
			],
			"description": "bool Bundle3D::loadNodesBinary(NodeDatas& nodedatas)"
		},
		 "void Layout::findProperSearchingFunctor(FocusDirection dir, Widget* baseWidget)": {
			"prefix": "void Layout::findProperSearchingFunctor(FocusDirection dir, Widget* baseWidget)",
			"body": [
				"Layout:findProperSearchingFunctor(${1:FocusDirection dir},${2:Widget* baseWidget})"
			],
			"description": "void Layout::findProperSearchingFunctor(FocusDirection dir, Widget* baseWidget)"
		},
		 "ProgressTimer* TransitionProgressHorizontal::progressTimerNodeWithRenderTexture(RenderTexture* texture)": {
			"prefix": "ProgressTimer* TransitionProgressHorizontal::progressTimerNodeWithRenderTexture(RenderTexture* texture)",
			"body": [
				"TransitionProgressHorizontal:progressTimerNodeWithRenderTexture(${1:RenderTexture* texture})"
			],
			"description": "ProgressTimer* TransitionProgressHorizontal::progressTimerNodeWithRenderTexture(RenderTexture* texture)"
		},
		 "bool ComAttribute::init()": {
			"prefix": "bool ComAttribute::init()",
			"body": [
				"bool ComAttribute:init()"
			],
			"description": "bool ComAttribute::init()"
		},
		 "std::string CCBAnimationManager::getDocumentControllerName()": {
			"prefix": "std::string CCBAnimationManager::getDocumentControllerName()",
			"body": [
				"std:string CCBAnimationManager:getDocumentControllerName()"
			],
			"description": "std::string CCBAnimationManager::getDocumentControllerName()"
		},
		 "void Label::setString(const std::string& text)": {
			"prefix": "void Label::setString(const std::string& text)",
			"body": [
				"Label:setString(${1:std:string& text})"
			],
			"description": "void Label::setString(const std::string& text)"
		},
		 "SkeletonAnimation::~SkeletonAnimation ()": {
			"prefix": "SkeletonAnimation::~SkeletonAnimation ()",
			"body": [
				"SkeletonAnimation:~SkeletonAnimation ()"
			],
			"description": "SkeletonAnimation::~SkeletonAnimation ()"
		},
		 "void Bone::updateDisplayedColor(const Color3B &parentColor)": {
			"prefix": "void Bone::updateDisplayedColor(const Color3B &parentColor)",
			"body": [
				"Bone:updateDisplayedColor(${1:Color3B &parentColor})"
			],
			"description": "void Bone::updateDisplayedColor(const Color3B &parentColor)"
		},
		 "Sprite3D* Sprite3D::create()": {
			"prefix": "Sprite3D* Sprite3D::create()",
			"body": [
				"Sprite3D* Sprite3D:create()"
			],
			"description": "Sprite3D* Sprite3D::create()"
		},
		 "void	Physics3DHingeConstraint::enableAngularMotor(bool enableMotor, float targetVelocity, float maxMotorImpulse)": {
			"prefix": "void	Physics3DHingeConstraint::enableAngularMotor(bool enableMotor, float targetVelocity, float maxMotorImpulse)",
			"body": [
				"enableMotor},${2:float targetVelocity},${3:float maxMotorImpulse})"
			],
			"description": "void	Physics3DHingeConstraint::enableAngularMotor(bool enableMotor, float targetVelocity, float maxMotorImpulse)"
		},
		 "ParticleSun* ParticleSun::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleSun* ParticleSun::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSun:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleSun* ParticleSun::createWithTotalParticles(int numberOfParticles)"
		},
		 "void MeshCommand::setMatrixPalette(const Vec4* matrixPalette)": {
			"prefix": "void MeshCommand::setMatrixPalette(const Vec4* matrixPalette)",
			"body": [
				"MeshCommand:setMatrixPalette(${1:Vec4* matrixPalette})"
			],
			"description": "void MeshCommand::setMatrixPalette(const Vec4* matrixPalette)"
		},
		 "bool Image::isPng(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::isPng(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:isPng(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::isPng(const unsigned char * data, ssize_t dataLen)"
		},
		 "void TMXLayer::setFlaggedTileGIDByIndex(int index, int gid)": {
			"prefix": "void TMXLayer::setFlaggedTileGIDByIndex(int index, int gid)",
			"body": [
				"TMXLayer:setFlaggedTileGIDByIndex(${1:int index},${2:int gid})"
			],
			"description": "void TMXLayer::setFlaggedTileGIDByIndex(int index, int gid)"
		},
		 "void ScrollViewBar::update(float deltaTime)": {
			"prefix": "void ScrollViewBar::update(float deltaTime)",
			"body": [
				"ScrollViewBar:update(${1:float deltaTime})"
			],
			"description": "void ScrollViewBar::update(float deltaTime)"
		},
		 "void PageView::setCurPageIndex( ssize_t index )": {
			"prefix": "void PageView::setCurPageIndex( ssize_t index )",
			"body": [
				"PageView:setCurPageIndex(${1:ssize_t index})"
			],
			"description": "void PageView::setCurPageIndex( ssize_t index )"
		},
		 "void HttpClient::networkThread()": {
			"prefix": "void HttpClient::networkThread()",
			"body": [
				"void HttpClient:networkThread()"
			],
			"description": "void HttpClient::networkThread()"
		},
		 "float Node::getPositionZ() const": {
			"prefix": "float Node::getPositionZ() const",
			"body": [
				"float Node:getPositionZ() "
			],
			"description": "float Node::getPositionZ() const"
		},
		 "bool FileUtilsWin32::isDirectoryExistInternal(const std::string& dirPath) const": {
			"prefix": "bool FileUtilsWin32::isDirectoryExistInternal(const std::string& dirPath) const",
			"body": [
				"FileUtilsWin32:isDirectoryExistInternal(${1:std:string& dirPath})"
			],
			"description": "bool FileUtilsWin32::isDirectoryExistInternal(const std::string& dirPath) const"
		},
		 "FontFNT * FontFNT::create(const std::string& fntFilePath, const Vec2& imageOffset /* = Vec2::ZERO */)": {
			"prefix": "FontFNT * FontFNT::create(const std::string& fntFilePath, const Vec2& imageOffset /* = Vec2::ZERO */)",
			"body": [
				"* FontFNT:create(${1:std:string& fntFilePath},${2:Vec2& imageOffset /* = Vec2:ZERO */})"
			],
			"description": "FontFNT * FontFNT::create(const std::string& fntFilePath, const Vec2& imageOffset /* = Vec2::ZERO */)"
		},
		 "void CameraBackgroundDepthBrush::drawBackground(Camera* camera)": {
			"prefix": "void CameraBackgroundDepthBrush::drawBackground(Camera* camera)",
			"body": [
				"CameraBackgroundDepthBrush:drawBackground(${1:Camera* camera})"
			],
			"description": "void CameraBackgroundDepthBrush::drawBackground(Camera* camera)"
		},
		 "std::string LayerColor::getDescription() const": {
			"prefix": "std::string LayerColor::getDescription() const",
			"body": [
				"std:string LayerColor:getDescription() "
			],
			"description": "std::string LayerColor::getDescription() const"
		},
		 "std::string LabelTTF::getDescription() const": {
			"prefix": "std::string LabelTTF::getDescription() const",
			"body": [
				"std:string LabelTTF:getDescription() "
			],
			"description": "std::string LabelTTF::getDescription() const"
		},
		 "const Rect& LoadingBar::getCapInsets()const": {
			"prefix": "const Rect& LoadingBar::getCapInsets()const",
			"body": [
				" Rect& LoadingBar:getCapInsets()"
			],
			"description": "const Rect& LoadingBar::getCapInsets()const"
		},
		 "void ScrollView::startAutoScrollChildrenWithDestination(const Vec2& des, float second, bool attenuated)": {
			"prefix": "void ScrollView::startAutoScrollChildrenWithDestination(const Vec2& des, float second, bool attenuated)",
			"body": [
				"ScrollView:startAutoScrollChildrenWithDestination(${1:Vec2& des},${2:float second},${3:bool attenuated})"
			],
			"description": "void ScrollView::startAutoScrollChildrenWithDestination(const Vec2& des, float second, bool attenuated)"
		},
		 "ParticleFlower* ParticleFlower::create()": {
			"prefix": "ParticleFlower* ParticleFlower::create()",
			"body": [
				"ParticleFlower* ParticleFlower:create()"
			],
			"description": "ParticleFlower* ParticleFlower::create()"
		},
		 "Rect SkeletonRenderer::getBoundingBox () const": {
			"prefix": "Rect SkeletonRenderer::getBoundingBox () const",
			"body": [
				"Rect SkeletonRenderer:getBoundingBox () "
			],
			"description": "Rect SkeletonRenderer::getBoundingBox () const"
		},
		 "ParticleSmoke* ParticleSmoke::create()": {
			"prefix": "ParticleSmoke* ParticleSmoke::create()",
			"body": [
				"ParticleSmoke* ParticleSmoke:create()"
			],
			"description": "ParticleSmoke* ParticleSmoke::create()"
		},
		 "bool LabelTTF::initWithStringAndTextDefinition(const std::string& string, FontDefinition &textDefinition)": {
			"prefix": "bool LabelTTF::initWithStringAndTextDefinition(const std::string& string, FontDefinition &textDefinition)",
			"body": [
				"LabelTTF:initWithStringAndTextDefinition(${1:std:string& string},${2:FontDefinition &textDefinition})"
			],
			"description": "bool LabelTTF::initWithStringAndTextDefinition(const std::string& string, FontDefinition &textDefinition)"
		},
		 "Vec2 ProgressTimer::vertexFromAlphaPoint(Vec2 alpha)": {
			"prefix": "Vec2 ProgressTimer::vertexFromAlphaPoint(Vec2 alpha)",
			"body": [
				"ProgressTimer:vertexFromAlphaPoint(${1:Vec2 alpha})"
			],
			"description": "Vec2 ProgressTimer::vertexFromAlphaPoint(Vec2 alpha)"
		},
		 "bool SAXParser::parse(const char* xmlData, size_t dataLength)": {
			"prefix": "bool SAXParser::parse(const char* xmlData, size_t dataLength)",
			"body": [
				"SAXParser:parse(${1:char* xmlData},${2:size_t dataLength})"
			],
			"description": "bool SAXParser::parse(const char* xmlData, size_t dataLength)"
		},
		 "TMXMapInfo * TMXMapInfo::create(const std::string& tmxFile)": {
			"prefix": "TMXMapInfo * TMXMapInfo::create(const std::string& tmxFile)",
			"body": [
				"* TMXMapInfo:create(${1:std:string& tmxFile})"
			],
			"description": "TMXMapInfo * TMXMapInfo::create(const std::string& tmxFile)"
		},
		 "Frame* ActionTimelineCache::loadAnchorPointFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadAnchorPointFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadAnchorPointFrameWithFlatBuffers(${1:flatbuffers:ScaleFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadAnchorPointFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)"
		},
		 "void TextureCache::parseNinePatchImage(cocos2d::Image *image, cocos2d::Texture2D *texture,const std::string& path)": {
			"prefix": "void TextureCache::parseNinePatchImage(cocos2d::Image *image, cocos2d::Texture2D *texture,const std::string& path)",
			"body": [
				"TextureCache:parseNinePatchImage(${1:cocos2d:Image *image},${2:cocos2d:Texture2D *texture},${3:std:string& path})"
			],
			"description": "void TextureCache::parseNinePatchImage(cocos2d::Image *image, cocos2d::Texture2D *texture,const std::string& path)"
		},
		 "static std::wstring StringUtf8ToWideChar(const std::string& strUtf8)": {
			"prefix": "static std::wstring StringUtf8ToWideChar(const std::string& strUtf8)",
			"body": [
				"std:wstring StringUtf8ToWideChar(${1:std:string& strUtf8})"
			],
			"description": "static std::wstring StringUtf8ToWideChar(const std::string& strUtf8)"
		},
		 "LabelBMFont *LabelBMFont::create(const std::string& str, const std::string& fntFile, float width /* = 0 */, TextHAlignment alignment /* = TextHAlignment::LEFT */,const Vec2& imageOffset /* = Vec2::ZERO */)": {
			"prefix": "LabelBMFont *LabelBMFont::create(const std::string& str, const std::string& fntFile, float width /* = 0 */, TextHAlignment alignment /* = TextHAlignment::LEFT */,const Vec2& imageOffset /* = Vec2::ZERO */)",
			"body": [
				"*LabelBMFont:create(${1:std:string& str},${2:std:string& fntFile},${3:float width /* = 0 */},${4:TextHAlignment alignment /* = TextHAlignment:LEFT */},${5:Vec2& imageOffset /* = Vec2:ZERO */})"
			],
			"description": "LabelBMFont *LabelBMFont::create(const std::string& str, const std::string& fntFile, float width /* = 0 */, TextHAlignment alignment /* = TextHAlignment::LEFT */,const Vec2& imageOffset /* = Vec2::ZERO */)"
		},
		 "void Label::recordLetterInfo(const cocos2d::Vec2& point, char16_t utf16Char, int letterIndex, int lineIndex)": {
			"prefix": "void Label::recordLetterInfo(const cocos2d::Vec2& point, char16_t utf16Char, int letterIndex, int lineIndex)",
			"body": [
				"Label:recordLetterInfo(${1:cocos2d:Vec2& point},${2:char16_t utf16Char},${3:int letterIndex},${4:int lineIndex})"
			],
			"description": "void Label::recordLetterInfo(const cocos2d::Vec2& point, char16_t utf16Char, int letterIndex, int lineIndex)"
		},
		 "bool VertexData::setStream(VertexBuffer* buffer, const VertexStreamAttribute& stream)": {
			"prefix": "bool VertexData::setStream(VertexBuffer* buffer, const VertexStreamAttribute& stream)",
			"body": [
				"VertexData:setStream(${1:VertexBuffer* buffer},${2:VertexStreamAttribute& stream})"
			],
			"description": "bool VertexData::setStream(VertexBuffer* buffer, const VertexStreamAttribute& stream)"
		},
		 "void cocos2d::NavMesh::drawOffMeshConnections()": {
			"prefix": "void cocos2d::NavMesh::drawOffMeshConnections()",
			"body": [
				"void cocos2d:NavMesh:drawOffMeshConnections()"
			],
			"description": "void cocos2d::NavMesh::drawOffMeshConnections()"
		},
		 "void TrianglesCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, const Triangles& triangles,const Mat4& mv)": {
			"prefix": "void TrianglesCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, const Triangles& triangles,const Mat4& mv)",
			"body": [
				"TrianglesCommand:init(${1:float globalOrder},${2:GLuint textureID},${3:GLProgramState* glProgramState},${4:BlendFunc blendType},${5:Triangles& triangles},${6:Mat4& mv})"
			],
			"description": "void TrianglesCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, const Triangles& triangles,const Mat4& mv)"
		},
		 "bool Image::encodeWithWIC(const std::string& filePath, bool isToRGB, GUID containerFormat)": {
			"prefix": "bool Image::encodeWithWIC(const std::string& filePath, bool isToRGB, GUID containerFormat)",
			"body": [
				"Image:encodeWithWIC(${1:std:string& filePath},${2:bool isToRGB},${3:GUID containerFormat})"
			],
			"description": "bool Image::encodeWithWIC(const std::string& filePath, bool isToRGB, GUID containerFormat)"
		},
		 "bool RichElementImage::init(int tag, const Color3B &color, GLubyte opacity, const std::string& filePath)": {
			"prefix": "bool RichElementImage::init(int tag, const Color3B &color, GLubyte opacity, const std::string& filePath)",
			"body": [
				"RichElementImage:init(${1:int tag},${2:Color3B &color},${3:GLubyte opacity},${4:std:string& filePath})"
			],
			"description": "bool RichElementImage::init(int tag, const Color3B &color, GLubyte opacity, const std::string& filePath)"
		},
		 "void PhysicsDebugDraw::drawContact()": {
			"prefix": "void PhysicsDebugDraw::drawContact()",
			"body": [
				"void PhysicsDebugDraw:drawContact()"
			],
			"description": "void PhysicsDebugDraw::drawContact()"
		},
		 "Physics3DShape* Physics3DShape::createCapsule(float radius, float height)": {
			"prefix": "Physics3DShape* Physics3DShape::createCapsule(float radius, float height)",
			"body": [
				"Physics3DShape:createCapsule(${1:float radius},${2:float height})"
			],
			"description": "Physics3DShape* Physics3DShape::createCapsule(float radius, float height)"
		},
		 "void EditBoxImplCommon::refreshInactiveText()": {
			"prefix": "void EditBoxImplCommon::refreshInactiveText()",
			"body": [
				"void EditBoxImplCommon:refreshInactiveText()"
			],
			"description": "void EditBoxImplCommon::refreshInactiveText()"
		},
		 "void UICCTextField::setMaxLength(int length)": {
			"prefix": "void UICCTextField::setMaxLength(int length)",
			"body": [
				"UICCTextField:setMaxLength(${1:int length})"
			],
			"description": "void UICCTextField::setMaxLength(int length)"
		},
		 "GridBase* PageTurn3D::getGrid()": {
			"prefix": "GridBase* PageTurn3D::getGrid()",
			"body": [
				"GridBase* PageTurn3D:getGrid()"
			],
			"description": "GridBase* PageTurn3D::getGrid()"
		},
		 "Frame* SkewFrame::clone()": {
			"prefix": "Frame* SkewFrame::clone()",
			"body": [
				"Frame* SkewFrame:clone()"
			],
			"description": "Frame* SkewFrame::clone()"
		},
		 "void SimpleAudioEngine::setBackgroundMusicVolume(float volume)": {
			"prefix": "void SimpleAudioEngine::setBackgroundMusicVolume(float volume)",
			"body": [
				"SimpleAudioEngine:setBackgroundMusicVolume(${1:float volume})"
			],
			"description": "void SimpleAudioEngine::setBackgroundMusicVolume(float volume)"
		},
		 "float ArmatureAnimation::getAnimationScale() const": {
			"prefix": "float ArmatureAnimation::getAnimationScale() const",
			"body": [
				"float ArmatureAnimation:getAnimationScale() "
			],
			"description": "float ArmatureAnimation::getAnimationScale() const"
		},
		 "jstring newStringUTFJNI(JNIEnv* env, std::string utf8Str, bool* ret)": {
			"prefix": "jstring newStringUTFJNI(JNIEnv* env, std::string utf8Str, bool* ret)",
			"body": [
				"newStringUTFJNI(${1:JNIEnv* env},${2:std:string utf8Str},${3:bool* ret})"
			],
			"description": "jstring newStringUTFJNI(JNIEnv* env, std::string utf8Str, bool* ret)"
		},
		 "bool Widget::isAncestorsVisible(Node* node)": {
			"prefix": "bool Widget::isAncestorsVisible(Node* node)",
			"body": [
				"Widget:isAncestorsVisible(${1:Node* node})"
			],
			"description": "bool Widget::isAncestorsVisible(Node* node)"
		},
		 "void ListView::pushBackDefaultItem()": {
			"prefix": "void ListView::pushBackDefaultItem()",
			"body": [
				"void ListView:pushBackDefaultItem()"
			],
			"description": "void ListView::pushBackDefaultItem()"
		},
		 "void Label::enableShadow(const Color4B& shadowColor /* = Color4B::BLACK */,const Size &offset /* = Size(2 ,-2)*/, int blurRadius /* = 0 */)": {
			"prefix": "void Label::enableShadow(const Color4B& shadowColor /* = Color4B::BLACK */,const Size &offset /* = Size(2 ,-2)*/, int blurRadius /* = 0 */)",
			"body": [
				"Label:enableShadow(${1:Color4B& shadowColor /* = Color4B:BLACK */},${2:Size &offset /* = Size(2},${3:-2})"
			],
			"description": "void Label::enableShadow(const Color4B& shadowColor /* = Color4B::BLACK */,const Size &offset /* = Size(2 ,-2)*/, int blurRadius /* = 0 */)"
		},
		 "void FileUtils::setDefaultResourceRootPath(const std::string& path)": {
			"prefix": "void FileUtils::setDefaultResourceRootPath(const std::string& path)",
			"body": [
				"FileUtils:setDefaultResourceRootPath(${1:std:string& path})"
			],
			"description": "void FileUtils::setDefaultResourceRootPath(const std::string& path)"
		},
		 "EaseQuarticActionOut* EaseQuarticActionOut::create(ActionInterval* action)": {
			"prefix": "EaseQuarticActionOut* EaseQuarticActionOut::create(ActionInterval* action)",
			"body": [
				"EaseQuarticActionOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseQuarticActionOut* EaseQuarticActionOut::create(ActionInterval* action)"
		},
		 "EaseQuinticActionOut* EaseQuinticActionOut::clone() const": {
			"prefix": "EaseQuinticActionOut* EaseQuinticActionOut::clone() const",
			"body": [
				"EaseQuinticActionOut* EaseQuinticActionOut:clone() "
			],
			"description": "EaseQuinticActionOut* EaseQuinticActionOut::clone() const"
		},
		 "float Widget::getTopBoundary() const": {
			"prefix": "float Widget::getTopBoundary() const",
			"body": [
				"float Widget:getTopBoundary() "
			],
			"description": "float Widget::getTopBoundary() const"
		},
		 "int ZipUtils::inflateCCZBuffer(const unsigned char *buffer, ssize_t bufferLen, unsigned char **out)": {
			"prefix": "int ZipUtils::inflateCCZBuffer(const unsigned char *buffer, ssize_t bufferLen, unsigned char **out)",
			"body": [
				"ZipUtils:inflateCCZBuffer(${1:unsigned char *buffer},${2:ssize_t bufferLen},${3:unsigned char **out})"
			],
			"description": "int ZipUtils::inflateCCZBuffer(const unsigned char *buffer, ssize_t bufferLen, unsigned char **out)"
		},
		 "void Label::setSystemFontSize(float fontSize)": {
			"prefix": "void Label::setSystemFontSize(float fontSize)",
			"body": [
				"Label:setSystemFontSize(${1:float fontSize})"
			],
			"description": "void Label::setSystemFontSize(float fontSize)"
		},
		 "Armature *Bone::getChildArmature() const": {
			"prefix": "Armature *Bone::getChildArmature() const",
			"body": [
				"Armature *Bone:getChildArmature() "
			],
			"description": "Armature *Bone::getChildArmature() const"
		},
		 "float AudioEngine::getDuration(int audioID)": {
			"prefix": "float AudioEngine::getDuration(int audioID)",
			"body": [
				"AudioEngine:getDuration(${1:int audioID})"
			],
			"description": "float AudioEngine::getDuration(int audioID)"
		},
		 "void Mat4::rotateZ(float angle, Mat4* dst) const": {
			"prefix": "void Mat4::rotateZ(float angle, Mat4* dst) const",
			"body": [
				"Mat4:rotateZ(${1:float angle},${2:Mat4* dst})"
			],
			"description": "void Mat4::rotateZ(float angle, Mat4* dst) const"
		},
		 "Node* Timeline::getNode() const": {
			"prefix": "Node* Timeline::getNode() const",
			"body": [
				"Node* Timeline:getNode() "
			],
			"description": "Node* Timeline::getNode() const"
		},
		 "bool LayerColor::initWithColor(const Color4B& color)": {
			"prefix": "bool LayerColor::initWithColor(const Color4B& color)",
			"body": [
				"LayerColor:initWithColor(${1:Color4B& color})"
			],
			"description": "bool LayerColor::initWithColor(const Color4B& color)"
		},
		 "void TransitionMoveInB::initScenes()": {
			"prefix": "void TransitionMoveInB::initScenes()",
			"body": [
				"void TransitionMoveInB:initScenes()"
			],
			"description": "void TransitionMoveInB::initScenes()"
		},
		 "void Widget::onSizeChanged()": {
			"prefix": "void Widget::onSizeChanged()",
			"body": [
				"void Widget:onSizeChanged()"
			],
			"description": "void Widget::onSizeChanged()"
		},
		 "FlatBuffersSerialize* FlatBuffersSerialize::getInstance()": {
			"prefix": "FlatBuffersSerialize* FlatBuffersSerialize::getInstance()",
			"body": [
				"FlatBuffersSerialize* FlatBuffersSerialize:getInstance()"
			],
			"description": "FlatBuffersSerialize* FlatBuffersSerialize::getInstance()"
		},
		 "void LayerGradient::updateColor()": {
			"prefix": "void LayerGradient::updateColor()",
			"body": [
				"void LayerGradient:updateColor()"
			],
			"description": "void LayerGradient::updateColor()"
		},
		 "bool ParticleFireworks::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleFireworks::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleFireworks:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleFireworks::initWithTotalParticles(int numberOfParticles)"
		},
		 "void Action::startWithTarget(Node *aTarget)": {
			"prefix": "void Action::startWithTarget(Node *aTarget)",
			"body": [
				"Action:startWithTarget(${1:Node *aTarget})"
			],
			"description": "void Action::startWithTarget(Node *aTarget)"
		},
		 "SpriteFrame* SpriteFrame::create(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)": {
			"prefix": "SpriteFrame* SpriteFrame::create(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)",
			"body": [
				"SpriteFrame:create(${1:std:string& filename},${2:Rect& rect},${3:bool rotated},${4:Vec2& offset},${5:Size& originalSize})"
			],
			"description": "SpriteFrame* SpriteFrame::create(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)"
		},
		 "bool EventListenerCustom::init(const ListenerID& listenerId, const std::function<void(EventCustom*)>& callback)": {
			"prefix": "bool EventListenerCustom::init(const ListenerID& listenerId, const std::function<void(EventCustom*)>& callback)",
			"body": [
				"EventListenerCustom:init(${1:ListenerID& listenerId},${2:std:function<void(EventCustom*})"
			],
			"description": "bool EventListenerCustom::init(const ListenerID& listenerId, const std::function<void(EventCustom*)>& callback)"
		},
		 "void ActionNode::runAction()": {
			"prefix": "void ActionNode::runAction()",
			"body": [
				"void ActionNode:runAction()"
			],
			"description": "void ActionNode::runAction()"
		},
		 "VertexAttribBinding* Pass::getVertexAttributeBinding() const": {
			"prefix": "VertexAttribBinding* Pass::getVertexAttributeBinding() const",
			"body": [
				"VertexAttribBinding* Pass:getVertexAttributeBinding() "
			],
			"description": "VertexAttribBinding* Pass::getVertexAttributeBinding() const"
		},
		 "void Widget::onPressStateChangedToDisabled()": {
			"prefix": "void Widget::onPressStateChangedToDisabled()",
			"body": [
				"void Widget:onPressStateChangedToDisabled()"
			],
			"description": "void Widget::onPressStateChangedToDisabled()"
		},
		 "bool TimerTargetSelector::initWithSelector(Scheduler* scheduler, SEL_SCHEDULE selector, Ref* target, float seconds, unsigned int repeat, float delay)": {
			"prefix": "bool TimerTargetSelector::initWithSelector(Scheduler* scheduler, SEL_SCHEDULE selector, Ref* target, float seconds, unsigned int repeat, float delay)",
			"body": [
				"TimerTargetSelector:initWithSelector(${1:Scheduler* scheduler},${2:SEL_SCHEDULE selector},${3:Ref* target},${4:float seconds},${5:unsigned int repeat},${6:float delay})"
			],
			"description": "bool TimerTargetSelector::initWithSelector(Scheduler* scheduler, SEL_SCHEDULE selector, Ref* target, float seconds, unsigned int repeat, float delay)"
		},
		 "void Sprite3D::setBlendFunc(const BlendFunc& blendFunc)": {
			"prefix": "void Sprite3D::setBlendFunc(const BlendFunc& blendFunc)",
			"body": [
				"Sprite3D:setBlendFunc(${1:BlendFunc& blendFunc})"
			],
			"description": "void Sprite3D::setBlendFunc(const BlendFunc& blendFunc)"
		},
		 "void PageView::addEventListener(const ccPageViewCallback& callback)": {
			"prefix": "void PageView::addEventListener(const ccPageViewCallback& callback)",
			"body": [
				"PageView:addEventListener(${1:ccPageViewCallback& callback})"
			],
			"description": "void PageView::addEventListener(const ccPageViewCallback& callback)"
		},
		 "void DrawNode::drawQuadraticBezier(const Vec2& from, const Vec2& control, const Vec2& to, unsigned int segments, const Color4F &color)": {
			"prefix": "void DrawNode::drawQuadraticBezier(const Vec2& from, const Vec2& control, const Vec2& to, unsigned int segments, const Color4F &color)",
			"body": [
				"DrawNode:drawQuadraticBezier(${1:Vec2& from},${2:Vec2& control},${3:Vec2& to},${4:unsigned int segments},${5:Color4F &color})"
			],
			"description": "void DrawNode::drawQuadraticBezier(const Vec2& from, const Vec2& control, const Vec2& to, unsigned int segments, const Color4F &color)"
		},
		 "void TextureCache::removeUnusedTextures()": {
			"prefix": "void TextureCache::removeUnusedTextures()",
			"body": [
				"void TextureCache:removeUnusedTextures()"
			],
			"description": "void TextureCache::removeUnusedTextures()"
		},
		 "void ScrollView::setInnerContainerSize(const Size &size)": {
			"prefix": "void ScrollView::setInnerContainerSize(const Size &size)",
			"body": [
				"ScrollView:setInnerContainerSize(${1:Size &size})"
			],
			"description": "void ScrollView::setInnerContainerSize(const Size &size)"
		},
		 "float Vec4::lengthSquared() const": {
			"prefix": "float Vec4::lengthSquared() const",
			"body": [
				"float Vec4:lengthSquared() "
			],
			"description": "float Vec4::lengthSquared() const"
		},
		 "SpriteBatchNode * SpriteBatchNode::addSpriteWithoutQuad(Sprite*child, int z, int aTag)": {
			"prefix": "SpriteBatchNode * SpriteBatchNode::addSpriteWithoutQuad(Sprite*child, int z, int aTag)",
			"body": [
				"* SpriteBatchNode:addSpriteWithoutQuad(${1:Sprite*child},${2:int z},${3:int aTag})"
			],
			"description": "SpriteBatchNode * SpriteBatchNode::addSpriteWithoutQuad(Sprite*child, int z, int aTag)"
		},
		 "MovementData *AnimationData::getMovement(const std::string& movementName)": {
			"prefix": "MovementData *AnimationData::getMovement(const std::string& movementName)",
			"body": [
				"*AnimationData:getMovement(${1:std:string& movementName})"
			],
			"description": "MovementData *AnimationData::getMovement(const std::string& movementName)"
		},
		 "Armature *Armature::create(const std::string& name, Bone *parentBone)": {
			"prefix": "Armature *Armature::create(const std::string& name, Bone *parentBone)",
			"body": [
				"*Armature:create(${1:std:string& name},${2:Bone *parentBone})"
			],
			"description": "Armature *Armature::create(const std::string& name, Bone *parentBone)"
		},
		 "bool Shaky3D::initWithDuration(float duration, const Size& gridSize, int range, bool shakeZ)": {
			"prefix": "bool Shaky3D::initWithDuration(float duration, const Size& gridSize, int range, bool shakeZ)",
			"body": [
				"Shaky3D:initWithDuration(${1:float duration},${2:Size& gridSize},${3:int range},${4:bool shakeZ})"
			],
			"description": "bool Shaky3D::initWithDuration(float duration, const Size& gridSize, int range, bool shakeZ)"
		},
		 "void Node::schedule(SEL_SCHEDULE selector)": {
			"prefix": "void Node::schedule(SEL_SCHEDULE selector)",
			"body": [
				"Node:schedule(${1:SEL_SCHEDULE selector})"
			],
			"description": "void Node::schedule(SEL_SCHEDULE selector)"
		},
		 "float ActionRotationFrame::getRotation()": {
			"prefix": "float ActionRotationFrame::getRotation()",
			"body": [
				"float ActionRotationFrame:getRotation()"
			],
			"description": "float ActionRotationFrame::getRotation()"
		},
		 "void Layer::setKeypadEnabled(bool enabled)": {
			"prefix": "void Layer::setKeypadEnabled(bool enabled)",
			"body": [
				"Layer:setKeypadEnabled(${1:bool enabled})"
			],
			"description": "void Layer::setKeypadEnabled(bool enabled)"
		},
		 "void FlatBuffersSerialize::deleteFlatBufferBuilder()": {
			"prefix": "void FlatBuffersSerialize::deleteFlatBufferBuilder()",
			"body": [
				"void FlatBuffersSerialize:deleteFlatBufferBuilder()"
			],
			"description": "void FlatBuffersSerialize::deleteFlatBufferBuilder()"
		},
		 "void ParticleBatchNode::reorderChild(Node * aChild, int zOrder)": {
			"prefix": "void ParticleBatchNode::reorderChild(Node * aChild, int zOrder)",
			"body": [
				"ParticleBatchNode:reorderChild(${1:Node * aChild},${2:int zOrder})"
			],
			"description": "void ParticleBatchNode::reorderChild(Node * aChild, int zOrder)"
		},
		 "void PhysicsJointLimit::setMin(float min)": {
			"prefix": "void PhysicsJointLimit::setMin(float min)",
			"body": [
				"PhysicsJointLimit:setMin(${1:float min})"
			],
			"description": "void PhysicsJointLimit::setMin(float min)"
		},
		 "PhysicsJointDistance* PhysicsJointDistance::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)": {
			"prefix": "PhysicsJointDistance* PhysicsJointDistance::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)",
			"body": [
				"PhysicsJointDistance:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:Vec2& anchr1},${4:Vec2& anchr2})"
			],
			"description": "PhysicsJointDistance* PhysicsJointDistance::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)"
		},
		 "bool SpriteBatchNode::initWithFile(const std::string& fileImage, ssize_t capacity/* = DEFAULT_CAPACITY*/)": {
			"prefix": "bool SpriteBatchNode::initWithFile(const std::string& fileImage, ssize_t capacity/* = DEFAULT_CAPACITY*/)",
			"body": [
				"SpriteBatchNode:initWithFile(${1:std:string& fileImage},${2:ssize_t capacity/* = DEFAULT_CAPACITY*/})"
			],
			"description": "bool SpriteBatchNode::initWithFile(const std::string& fileImage, ssize_t capacity/* = DEFAULT_CAPACITY*/)"
		},
		 "void PhysicsWorld::collisionSeparateCallback(PhysicsContact& contact)": {
			"prefix": "void PhysicsWorld::collisionSeparateCallback(PhysicsContact& contact)",
			"body": [
				"PhysicsWorld:collisionSeparateCallback(${1:PhysicsContact& contact})"
			],
			"description": "void PhysicsWorld::collisionSeparateCallback(PhysicsContact& contact)"
		},
		 "Widget* ScrollView::createCloneInstance()": {
			"prefix": "Widget* ScrollView::createCloneInstance()",
			"body": [
				"Widget* ScrollView:createCloneInstance()"
			],
			"description": "Widget* ScrollView::createCloneInstance()"
		},
		 "const Rect& GLView::getViewPortRect() const": {
			"prefix": "const Rect& GLView::getViewPortRect() const",
			"body": [
				" Rect& GLView:getViewPortRect() "
			],
			"description": "const Rect& GLView::getViewPortRect() const"
		},
		 "void TransitionPageTurn::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void TransitionPageTurn::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"TransitionPageTurn:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void TransitionPageTurn::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "TextureAtlas * TextureAtlas::createWithTexture(Texture2D *texture, ssize_t capacity)": {
			"prefix": "TextureAtlas * TextureAtlas::createWithTexture(Texture2D *texture, ssize_t capacity)",
			"body": [
				"* TextureAtlas:createWithTexture(${1:Texture2D *texture},${2:ssize_t capacity})"
			],
			"description": "TextureAtlas * TextureAtlas::createWithTexture(Texture2D *texture, ssize_t capacity)"
		},
		 "void Label::drawSelf(bool visibleByCamera, Renderer* renderer, uint32_t flags)": {
			"prefix": "void Label::drawSelf(bool visibleByCamera, Renderer* renderer, uint32_t flags)",
			"body": [
				"Label:drawSelf(${1:bool visibleByCamera},${2:Renderer* renderer},${3:uint32_t flags})"
			],
			"description": "void Label::drawSelf(bool visibleByCamera, Renderer* renderer, uint32_t flags)"
		},
		 "void Console::setBindAddress(const std::string &address)": {
			"prefix": "void Console::setBindAddress(const std::string &address)",
			"body": [
				"Console:setBindAddress(${1:std:string &address})"
			],
			"description": "void Console::setBindAddress(const std::string &address)"
		},
		 "void TransformHelp::transformFromParent(BaseData &node, const BaseData &parentNode)": {
			"prefix": "void TransformHelp::transformFromParent(BaseData &node, const BaseData &parentNode)",
			"body": [
				"TransformHelp:transformFromParent(${1:BaseData &node},${2:BaseData &parentNode})"
			],
			"description": "void TransformHelp::transformFromParent(BaseData &node, const BaseData &parentNode)"
		},
		 "CardinalSplineBy::CardinalSplineBy() : _startPosition(0,0)": {
			"prefix": "CardinalSplineBy::CardinalSplineBy() : _startPosition(0,0)",
			"body": [
				"CardinalSplineBy:CardinalSplineBy() : _startPosition(0,0)"
			],
			"description": "CardinalSplineBy::CardinalSplineBy() : _startPosition(0,0)"
		},
		 "string FileUtilsWin32::getWritablePath() const": {
			"prefix": "string FileUtilsWin32::getWritablePath() const",
			"body": [
				"string FileUtilsWin32:getWritablePath() "
			],
			"description": "string FileUtilsWin32::getWritablePath() const"
		},
		 "SpriteFrame* SpriteFrame::createWithTexture(Texture2D *texture, const Rect& rect)": {
			"prefix": "SpriteFrame* SpriteFrame::createWithTexture(Texture2D *texture, const Rect& rect)",
			"body": [
				"SpriteFrame:createWithTexture(${1:Texture2D *texture},${2:Rect& rect})"
			],
			"description": "SpriteFrame* SpriteFrame::createWithTexture(Texture2D *texture, const Rect& rect)"
		},
		 "float PhysicsShapeCircle::getRadius() const": {
			"prefix": "float PhysicsShapeCircle::getRadius() const",
			"body": [
				"float PhysicsShapeCircle:getRadius() "
			],
			"description": "float PhysicsShapeCircle::getRadius() const"
		},
		 "void ParticleSystem::setTotalParticles(int var)": {
			"prefix": "void ParticleSystem::setTotalParticles(int var)",
			"body": [
				"ParticleSystem:setTotalParticles(${1:int var})"
			],
			"description": "void ParticleSystem::setTotalParticles(int var)"
		},
		 "Ref* __CCCallFuncO::getObject() const": {
			"prefix": "Ref* __CCCallFuncO::getObject() const",
			"body": [
				"Ref* __CCCallFuncO:getObject() "
			],
			"description": "Ref* __CCCallFuncO::getObject() const"
		},
		 "__Dictionary* __Dictionary::create()": {
			"prefix": "__Dictionary* __Dictionary::create()",
			"body": [
				"__Dictionary* __Dictionary:create()"
			],
			"description": "__Dictionary* __Dictionary::create()"
		},
		 "void TextureAtlas::setQuads(V3F_C4B_T2F_Quad* quads)": {
			"prefix": "void TextureAtlas::setQuads(V3F_C4B_T2F_Quad* quads)",
			"body": [
				"TextureAtlas:setQuads(${1:V3F_C4B_T2F_Quad* quads})"
			],
			"description": "void TextureAtlas::setQuads(V3F_C4B_T2F_Quad* quads)"
		},
		 "void CCBReader::cleanUpNodeGraph(Node *node)": {
			"prefix": "void CCBReader::cleanUpNodeGraph(Node *node)",
			"body": [
				"CCBReader:cleanUpNodeGraph(${1:Node *node})"
			],
			"description": "void CCBReader::cleanUpNodeGraph(Node *node)"
		},
		 "bool Mat4::isIdentity() const": {
			"prefix": "bool Mat4::isIdentity() const",
			"body": [
				"bool Mat4:isIdentity() "
			],
			"description": "bool Mat4::isIdentity() const"
		},
		 "AccelDeccelAmplitude* AccelDeccelAmplitude::clone() const": {
			"prefix": "AccelDeccelAmplitude* AccelDeccelAmplitude::clone() const",
			"body": [
				"AccelDeccelAmplitude* AccelDeccelAmplitude:clone() "
			],
			"description": "AccelDeccelAmplitude* AccelDeccelAmplitude::clone() const"
		},
		 "LabelTTF * LabelTTF::createWithFontDefinition(const std::string& string, FontDefinition &textDefinition)": {
			"prefix": "LabelTTF * LabelTTF::createWithFontDefinition(const std::string& string, FontDefinition &textDefinition)",
			"body": [
				"* LabelTTF:createWithFontDefinition(${1:std:string& string},${2:FontDefinition &textDefinition})"
			],
			"description": "LabelTTF * LabelTTF::createWithFontDefinition(const std::string& string, FontDefinition &textDefinition)"
		},
		 "void ActionObject::setName(const char* name)": {
			"prefix": "void ActionObject::setName(const char* name)",
			"body": [
				"ActionObject:setName(${1:char* name})"
			],
			"description": "void ActionObject::setName(const char* name)"
		},
		 "ColliderFilter *Bone::getColliderFilter()": {
			"prefix": "ColliderFilter *Bone::getColliderFilter()",
			"body": [
				"ColliderFilter *Bone:getColliderFilter()"
			],
			"description": "ColliderFilter *Bone::getColliderFilter()"
		},
		 "void DrawNode::drawPolygon(const Vec2 *verts, int count, const Color4F &fillColor, float borderWidth, const Color4F &borderColor)": {
			"prefix": "void DrawNode::drawPolygon(const Vec2 *verts, int count, const Color4F &fillColor, float borderWidth, const Color4F &borderColor)",
			"body": [
				"DrawNode:drawPolygon(${1:Vec2 *verts},${2:int count},${3:Color4F &fillColor},${4:float borderWidth},${5:Color4F &borderColor})"
			],
			"description": "void DrawNode::drawPolygon(const Vec2 *verts, int count, const Color4F &fillColor, float borderWidth, const Color4F &borderColor)"
		},
		 "void Skybox::setTexture(TextureCube* texture)": {
			"prefix": "void Skybox::setTexture(TextureCube* texture)",
			"body": [
				"Skybox:setTexture(${1:TextureCube* texture})"
			],
			"description": "void Skybox::setTexture(TextureCube* texture)"
		},
		 "bool GridAction::initWithDuration(float duration, const Size& gridSize)": {
			"prefix": "bool GridAction::initWithDuration(float duration, const Size& gridSize)",
			"body": [
				"GridAction:initWithDuration(${1:float duration},${2:Size& gridSize})"
			],
			"description": "bool GridAction::initWithDuration(float duration, const Size& gridSize)"
		},
		 "void Texture2D::convertRGB888ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGB888ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGB888ToRGBA4444(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGB888ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void ActionObject::pause()": {
			"prefix": "void ActionObject::pause()",
			"body": [
				"void ActionObject:pause()"
			],
			"description": "void ActionObject::pause()"
		},
		 "void Terrain::setDetailMap(unsigned int index, DetailMap detailMap)": {
			"prefix": "void Terrain::setDetailMap(unsigned int index, DetailMap detailMap)",
			"body": [
				"Terrain:setDetailMap(${1:unsigned int index},${2:DetailMap detailMap})"
			],
			"description": "void Terrain::setDetailMap(unsigned int index, DetailMap detailMap)"
		},
		 "void EditBox::updatePosition(float dt)": {
			"prefix": "void EditBox::updatePosition(float dt)",
			"body": [
				"EditBox:updatePosition(${1:float dt})"
			],
			"description": "void EditBox::updatePosition(float dt)"
		},
		 "ProgressFromTo* ProgressFromTo::reverse() const": {
			"prefix": "ProgressFromTo* ProgressFromTo::reverse() const",
			"body": [
				"ProgressFromTo* ProgressFromTo:reverse() "
			],
			"description": "ProgressFromTo* ProgressFromTo::reverse() const"
		},
		 "MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, const ccMenuCallback& callback)": {
			"prefix": "MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, const ccMenuCallback& callback)",
			"body": [
				"* MenuItemSprite:create(${1:Node* normalSprite},${2:Node* selectedSprite},${3:ccMenuCallback& callback})"
			],
			"description": "MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, const ccMenuCallback& callback)"
		},
		 "void SplitCols::update(float time)": {
			"prefix": "void SplitCols::update(float time)",
			"body": [
				"SplitCols:update(${1:float time})"
			],
			"description": "void SplitCols::update(float time)"
		},
		 "int WebSocket::onSubThreadLoop()": {
			"prefix": "int WebSocket::onSubThreadLoop()",
			"body": [
				"int WebSocket:onSubThreadLoop()"
			],
			"description": "int WebSocket::onSubThreadLoop()"
		},
		 "void Sprite::setPosition(float x, float y)": {
			"prefix": "void Sprite::setPosition(float x, float y)",
			"body": [
				"Sprite:setPosition(${1:float x},${2:float y})"
			],
			"description": "void Sprite::setPosition(float x, float y)"
		},
		 "void AudioEngineImpl::resume(int audioID)": {
			"prefix": "void AudioEngineImpl::resume(int audioID)",
			"body": [
				"AudioEngineImpl:resume(${1:int audioID})"
			],
			"description": "void AudioEngineImpl::resume(int audioID)"
		},
		 "void Node::updateRotation3D()": {
			"prefix": "void Node::updateRotation3D()",
			"body": [
				"void Node:updateRotation3D()"
			],
			"description": "void Node::updateRotation3D()"
		},
		 "int EnhanceAPI::setFPS(int fps)": {
			"prefix": "int EnhanceAPI::setFPS(int fps)",
			"body": [
				"EnhanceAPI:setFPS(${1:int fps})"
			],
			"description": "int EnhanceAPI::setFPS(int fps)"
		},
		 "void TransitionProgress::onExit()": {
			"prefix": "void TransitionProgress::onExit()",
			"body": [
				"void TransitionProgress:onExit()"
			],
			"description": "void TransitionProgress::onExit()"
		},
		 "void __Array::fastRemoveObject(Ref* object)": {
			"prefix": "void __Array::fastRemoveObject(Ref* object)",
			"body": [
				"__Array:fastRemoveObject(${1:Ref* object})"
			],
			"description": "void __Array::fastRemoveObject(Ref* object)"
		},
		 "int PhysicsWorld::collisionBeginCallback(PhysicsContact& contact)": {
			"prefix": "int PhysicsWorld::collisionBeginCallback(PhysicsContact& contact)",
			"body": [
				"PhysicsWorld:collisionBeginCallback(${1:PhysicsContact& contact})"
			],
			"description": "int PhysicsWorld::collisionBeginCallback(PhysicsContact& contact)"
		},
		 "void ColorFrame::onApply(float percent)": {
			"prefix": "void ColorFrame::onApply(float percent)",
			"body": [
				"ColorFrame:onApply(${1:float percent})"
			],
			"description": "void ColorFrame::onApply(float percent)"
		},
		 "void Bone::removeChildBone(Bone *bone, bool recursion)": {
			"prefix": "void Bone::removeChildBone(Bone *bone, bool recursion)",
			"body": [
				"Bone:removeChildBone(${1:Bone *bone},${2:bool recursion})"
			],
			"description": "void Bone::removeChildBone(Bone *bone, bool recursion)"
		},
		 "void Texture2D::convertRGB888ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGB888ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGB888ToAI88(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGB888ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void Director::pause()": {
			"prefix": "void Director::pause()",
			"body": [
				"void Director:pause()"
			],
			"description": "void Director::pause()"
		},
		 "std::string JniHelper::jstring2string(jstring jstr)": {
			"prefix": "std::string JniHelper::jstring2string(jstring jstr)",
			"body": [
				"JniHelper:jstring2string(${1:jstring jstr})"
			],
			"description": "std::string JniHelper::jstring2string(jstring jstr)"
		},
		 "Widget::SizeType Widget::getSizeType() const": {
			"prefix": "Widget::SizeType Widget::getSizeType() const",
			"body": [
				"Widget:SizeType Widget:getSizeType() "
			],
			"description": "Widget::SizeType Widget::getSizeType() const"
		},
		 "void CCBRotateXTo::update(float time)": {
			"prefix": "void CCBRotateXTo::update(float time)",
			"body": [
				"CCBRotateXTo:update(${1:float time})"
			],
			"description": "void CCBRotateXTo::update(float time)"
		},
		 "void TextField::setTextVerticalAlignment(TextVAlignment alignment)": {
			"prefix": "void TextField::setTextVerticalAlignment(TextVAlignment alignment)",
			"body": [
				"TextField:setTextVerticalAlignment(${1:TextVAlignment alignment})"
			],
			"description": "void TextField::setTextVerticalAlignment(TextVAlignment alignment)"
		},
		 "void Armature::updateOffsetPoint()": {
			"prefix": "void Armature::updateOffsetPoint()",
			"body": [
				"void Armature:updateOffsetPoint()"
			],
			"description": "void Armature::updateOffsetPoint()"
		},
		 "bool CSLoader::isWidget(const std::string &type)": {
			"prefix": "bool CSLoader::isWidget(const std::string &type)",
			"body": [
				"CSLoader:isWidget(${1:std:string &type})"
			],
			"description": "bool CSLoader::isWidget(const std::string &type)"
		},
		 "void __Dictionary::removeObjectForKey(const std::string& key)": {
			"prefix": "void __Dictionary::removeObjectForKey(const std::string& key)",
			"body": [
				"__Dictionary:removeObjectForKey(${1:std:string& key})"
			],
			"description": "void __Dictionary::removeObjectForKey(const std::string& key)"
		},
		 "Sprite * TMXLayer::updateTileForGID(uint32_t gid, const Vec2& pos)": {
			"prefix": "Sprite * TMXLayer::updateTileForGID(uint32_t gid, const Vec2& pos)",
			"body": [
				"* TMXLayer:updateTileForGID(${1:uint32_t gid},${2:Vec2& pos})"
			],
			"description": "Sprite * TMXLayer::updateTileForGID(uint32_t gid, const Vec2& pos)"
		},
		 "void ScrollView::setScrollBarPositionFromCornerForVertical(const Vec2& positionFromCorner)": {
			"prefix": "void ScrollView::setScrollBarPositionFromCornerForVertical(const Vec2& positionFromCorner)",
			"body": [
				"ScrollView:setScrollBarPositionFromCornerForVertical(${1:Vec2& positionFromCorner})"
			],
			"description": "void ScrollView::setScrollBarPositionFromCornerForVertical(const Vec2& positionFromCorner)"
		},
		 "void Node::cleanup()": {
			"prefix": "void Node::cleanup()",
			"body": [
				"void Node:cleanup()"
			],
			"description": "void Node::cleanup()"
		},
		 "AABB Sprite3D::getAABBRecursivelyImp(Node *node)": {
			"prefix": "AABB Sprite3D::getAABBRecursivelyImp(Node *node)",
			"body": [
				"Sprite3D:getAABBRecursivelyImp(${1:Node *node})"
			],
			"description": "AABB Sprite3D::getAABBRecursivelyImp(Node *node)"
		},
		 "void AtlasNode::setColor(const Color3B& color3)": {
			"prefix": "void AtlasNode::setColor(const Color3B& color3)",
			"body": [
				"AtlasNode:setColor(${1:Color3B& color3})"
			],
			"description": "void AtlasNode::setColor(const Color3B& color3)"
		},
		 "float Vec4::angle(const Vec4& v1, const Vec4& v2)": {
			"prefix": "float Vec4::angle(const Vec4& v1, const Vec4& v2)",
			"body": [
				"Vec4:angle(${1:Vec4& v1},${2:Vec4& v2})"
			],
			"description": "float Vec4::angle(const Vec4& v1, const Vec4& v2)"
		},
		 "bool Bundle3D::loadSkinDataBinary(SkinData* skindata)": {
			"prefix": "bool Bundle3D::loadSkinDataBinary(SkinData* skindata)",
			"body": [
				"Bundle3D:loadSkinDataBinary(${1:SkinData* skindata})"
			],
			"description": "bool Bundle3D::loadSkinDataBinary(SkinData* skindata)"
		},
		 "Vec3 AABB::getCenter()": {
			"prefix": "Vec3 AABB::getCenter()",
			"body": [
				"Vec3 AABB:getCenter()"
			],
			"description": "Vec3 AABB::getCenter()"
		},
		 "Bone *Armature::getBoneAtPoint(float x, float y) const": {
			"prefix": "Bone *Armature::getBoneAtPoint(float x, float y) const",
			"body": [
				"*Armature:getBoneAtPoint(${1:float x},${2:float y})"
			],
			"description": "Bone *Armature::getBoneAtPoint(float x, float y) const"
		},
		 "void ProgressTimer::setColor(const Color3B &color)": {
			"prefix": "void ProgressTimer::setColor(const Color3B &color)",
			"body": [
				"ProgressTimer:setColor(${1:Color3B &color})"
			],
			"description": "void ProgressTimer::setColor(const Color3B &color)"
		},
		 "void __NotificationCenter::postNotification(const std::string& name)": {
			"prefix": "void __NotificationCenter::postNotification(const std::string& name)",
			"body": [
				"__NotificationCenter:postNotification(${1:std:string& name})"
			],
			"description": "void __NotificationCenter::postNotification(const std::string& name)"
		},
		 "void GLViewImpl::onGLFWframebuffersize(GLFWwindow* window, int w, int h)": {
			"prefix": "void GLViewImpl::onGLFWframebuffersize(GLFWwindow* window, int w, int h)",
			"body": [
				"GLViewImpl:onGLFWframebuffersize(${1:GLFWwindow* window},${2:int w},${3:int h})"
			],
			"description": "void GLViewImpl::onGLFWframebuffersize(GLFWwindow* window, int w, int h)"
		},
		 "float AudioEngine::getVolume(int audioID)": {
			"prefix": "float AudioEngine::getVolume(int audioID)",
			"body": [
				"AudioEngine:getVolume(${1:int audioID})"
			],
			"description": "float AudioEngine::getVolume(int audioID)"
		},
		 "void Physics3DConeTwistConstraint::setMaxMotorImpulse(float maxMotorImpulse)": {
			"prefix": "void Physics3DConeTwistConstraint::setMaxMotorImpulse(float maxMotorImpulse)",
			"body": [
				"Physics3DConeTwistConstraint:setMaxMotorImpulse(${1:float maxMotorImpulse})"
			],
			"description": "void Physics3DConeTwistConstraint::setMaxMotorImpulse(float maxMotorImpulse)"
		},
		 "Sprite* LabelBMFont::getLetter(int ID)": {
			"prefix": "Sprite* LabelBMFont::getLetter(int ID)",
			"body": [
				"LabelBMFont:getLetter(${1:int ID})"
			],
			"description": "Sprite* LabelBMFont::getLetter(int ID)"
		},
		 "const Rect& Layout::getBackGroundImageCapInsets()const": {
			"prefix": "const Rect& Layout::getBackGroundImageCapInsets()const",
			"body": [
				" Rect& Layout:getBackGroundImageCapInsets()"
			],
			"description": "const Rect& Layout::getBackGroundImageCapInsets()const"
		},
		 "SceneReader* SceneReader::getInstance()": {
			"prefix": "SceneReader* SceneReader::getInstance()",
			"body": [
				"SceneReader* SceneReader:getInstance()"
			],
			"description": "SceneReader* SceneReader::getInstance()"
		},
		 "void Widget::addTouchEventListener(Ref *target, SEL_TouchEvent selector)": {
			"prefix": "void Widget::addTouchEventListener(Ref *target, SEL_TouchEvent selector)",
			"body": [
				"Widget:addTouchEventListener(${1:Ref *target},${2:SEL_TouchEvent selector})"
			],
			"description": "void Widget::addTouchEventListener(Ref *target, SEL_TouchEvent selector)"
		},
		 "void EditBox::setFontName(const char* pFontName)": {
			"prefix": "void EditBox::setFontName(const char* pFontName)",
			"body": [
				"EditBox:setFontName(${1:char* pFontName})"
			],
			"description": "void EditBox::setFontName(const char* pFontName)"
		},
		 "float Node::getScaleX() const": {
			"prefix": "float Node::getScaleX() const",
			"body": [
				"float Node:getScaleX() "
			],
			"description": "float Node::getScaleX() const"
		},
		 "void Bone3D::setOriPose(const Mat4& m)": {
			"prefix": "void Bone3D::setOriPose(const Mat4& m)",
			"body": [
				"Bone3D:setOriPose(${1:Mat4& m})"
			],
			"description": "void Bone3D::setOriPose(const Mat4& m)"
		},
		 "bool Configuration::supportsNPOT() const": {
			"prefix": "bool Configuration::supportsNPOT() const",
			"body": [
				"bool Configuration:supportsNPOT() "
			],
			"description": "bool Configuration::supportsNPOT() const"
		},
		 "float ParticleSystem::getSpeed() const": {
			"prefix": "float ParticleSystem::getSpeed() const",
			"body": [
				"float ParticleSystem:getSpeed() "
			],
			"description": "float ParticleSystem::getSpeed() const"
		},
		 "Sprite3D* Sprite3D::create(const std::string& modelPath)": {
			"prefix": "Sprite3D* Sprite3D::create(const std::string& modelPath)",
			"body": [
				"Sprite3D:create(${1:std:string& modelPath})"
			],
			"description": "Sprite3D* Sprite3D::create(const std::string& modelPath)"
		},
		 "void TransitionTurnOffTiles::sceneOrder()": {
			"prefix": "void TransitionTurnOffTiles::sceneOrder()",
			"body": [
				"void TransitionTurnOffTiles:sceneOrder()"
			],
			"description": "void TransitionTurnOffTiles::sceneOrder()"
		},
		 "Vec3 Vec3::fromColor(unsigned int color)": {
			"prefix": "Vec3 Vec3::fromColor(unsigned int color)",
			"body": [
				"Vec3:fromColor(${1:unsigned int color})"
			],
			"description": "Vec3 Vec3::fromColor(unsigned int color)"
		},
		 "int DisplayManager::getCurrentDisplayIndex() const": {
			"prefix": "int DisplayManager::getCurrentDisplayIndex() const",
			"body": [
				"int DisplayManager:getCurrentDisplayIndex() "
			],
			"description": "int DisplayManager::getCurrentDisplayIndex() const"
		},
		 "void Animate3D::removeFromMap()": {
			"prefix": "void Animate3D::removeFromMap()",
			"body": [
				"void Animate3D:removeFromMap()"
			],
			"description": "void Animate3D::removeFromMap()"
		},
		 "void Sprite::setTextureCoords(Rect rect)": {
			"prefix": "void Sprite::setTextureCoords(Rect rect)",
			"body": [
				"Sprite:setTextureCoords(${1:Rect rect})"
			],
			"description": "void Sprite::setTextureCoords(Rect rect)"
		},
		 "void SAXParser::setDelegator(SAXDelegator* delegator)": {
			"prefix": "void SAXParser::setDelegator(SAXDelegator* delegator)",
			"body": [
				"SAXParser:setDelegator(${1:SAXDelegator* delegator})"
			],
			"description": "void SAXParser::setDelegator(SAXDelegator* delegator)"
		},
		 "void TextFieldTTF::insertText(const char * text, size_t len)": {
			"prefix": "void TextFieldTTF::insertText(const char * text, size_t len)",
			"body": [
				"TextFieldTTF:insertText(${1:char * text},${2:size_t len})"
			],
			"description": "void TextFieldTTF::insertText(const char * text, size_t len)"
		},
		 "void NodeLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char* pPropertyName, float pFloatScale, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char* pPropertyName, float pFloatScale, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeFloatScale(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:float pFloatScale},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char* pPropertyName, float pFloatScale, CCBReader * ccbReader)"
		},
		 "void DrawNode::drawCircle(const Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, const Color4F &color)": {
			"prefix": "void DrawNode::drawCircle(const Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, const Color4F &color)",
			"body": [
				"DrawNode:drawCircle(${1:Vec2 &center},${2:float radius},${3:float angle},${4:unsigned int segments},${5:bool drawLineToCenter},${6:Color4F &color})"
			],
			"description": "void DrawNode::drawCircle(const Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, const Color4F &color)"
		},
		 "Node* ScrollView::getChildByName(const std::string& name)const": {
			"prefix": "Node* ScrollView::getChildByName(const std::string& name)const",
			"body": [
				"ScrollView:getChildByName(${1:std:string& name})"
			],
			"description": "Node* ScrollView::getChildByName(const std::string& name)const"
		},
		 "const std::string& LabelTTF::getFontName() const": {
			"prefix": "const std::string& LabelTTF::getFontName() const",
			"body": [
				" std:string& LabelTTF:getFontName() "
			],
			"description": "const std::string& LabelTTF::getFontName() const"
		},
		 "void Mat4::getForwardVector(Vec3* dst) const": {
			"prefix": "void Mat4::getForwardVector(Vec3* dst) const",
			"body": [
				"Mat4:getForwardVector(${1:Vec3* dst})"
			],
			"description": "void Mat4::getForwardVector(Vec3* dst) const"
		},
		 "void ScrollView::addChild(Node * child, int localZOrder)": {
			"prefix": "void ScrollView::addChild(Node * child, int localZOrder)",
			"body": [
				"ScrollView:addChild(${1:Node * child},${2:int localZOrder})"
			],
			"description": "void ScrollView::addChild(Node * child, int localZOrder)"
		},
		 "Vec2 ActionMoveFrame::getPosition()": {
			"prefix": "Vec2 ActionMoveFrame::getPosition()",
			"body": [
				"Vec2 ActionMoveFrame:getPosition()"
			],
			"description": "Vec2 ActionMoveFrame::getPosition()"
		},
		 "ParticleSpiral* ParticleSpiral::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleSpiral* ParticleSpiral::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSpiral:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleSpiral* ParticleSpiral::createWithTotalParticles(int numberOfParticles)"
		},
		 "CatmullRomBy* CatmullRomBy::reverse() const": {
			"prefix": "CatmullRomBy* CatmullRomBy::reverse() const",
			"body": [
				"CatmullRomBy* CatmullRomBy:reverse() "
			],
			"description": "CatmullRomBy* CatmullRomBy::reverse() const"
		},
		 "void RichText::formatText()": {
			"prefix": "void RichText::formatText()",
			"body": [
				"void RichText:formatText()"
			],
			"description": "void RichText::formatText()"
		},
		 "void Node::onEnter()": {
			"prefix": "void Node::onEnter()",
			"body": [
				"void Node:onEnter()"
			],
			"description": "void Node::onEnter()"
		},
		 "CCBSequence* CCBAnimationManager::getSequence(int nSequenceId)": {
			"prefix": "CCBSequence* CCBAnimationManager::getSequence(int nSequenceId)",
			"body": [
				"CCBAnimationManager:getSequence(${1:int nSequenceId})"
			],
			"description": "CCBSequence* CCBAnimationManager::getSequence(int nSequenceId)"
		},
		 "TintBy* TintBy::reverse() const": {
			"prefix": "TintBy* TintBy::reverse() const",
			"body": [
				"TintBy* TintBy:reverse() "
			],
			"description": "TintBy* TintBy::reverse() const"
		},
		 "bool PhysicsShapeEdgeChain::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)": {
			"prefix": "bool PhysicsShapeEdgeChain::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)",
			"body": [
				"PhysicsShapeEdgeChain:init(${1:Vec2* points},${2:int count},${3:PhysicsMaterial& material/* = MaterialDefault*/},${4:float border/* = 1*/})"
			],
			"description": "bool PhysicsShapeEdgeChain::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)"
		},
		 "bool Image::initWithImageFile(const std::string& path)": {
			"prefix": "bool Image::initWithImageFile(const std::string& path)",
			"body": [
				"Image:initWithImageFile(${1:std:string& path})"
			],
			"description": "bool Image::initWithImageFile(const std::string& path)"
		},
		 "void Material::addTechnique(Technique* technique)": {
			"prefix": "void Material::addTechnique(Technique* technique)",
			"body": [
				"Material:addTechnique(${1:Technique* technique})"
			],
			"description": "void Material::addTechnique(Technique* technique)"
		},
		 "void LoadingBar::adaptRenderers()": {
			"prefix": "void LoadingBar::adaptRenderers()",
			"body": [
				"void LoadingBar:adaptRenderers()"
			],
			"description": "void LoadingBar::adaptRenderers()"
		},
		 "float Physics3DSliderConstraint::getDampingDirLin() const": {
			"prefix": "float Physics3DSliderConstraint::getDampingDirLin() const",
			"body": [
				"float Physics3DSliderConstraint:getDampingDirLin() "
			],
			"description": "float Physics3DSliderConstraint::getDampingDirLin() const"
		},
		 "bool PageView::init()": {
			"prefix": "bool PageView::init()",
			"body": [
				"bool PageView:init()"
			],
			"description": "bool PageView::init()"
		},
		 "static bool splitWithForm(const std::string& content, strArray& strs)": {
			"prefix": "static bool splitWithForm(const std::string& content, strArray& strs)",
			"body": [
				"bool splitWithForm(${1:std:string& content},${2:strArray& strs})"
			],
			"description": "static bool splitWithForm(const std::string& content, strArray& strs)"
		},
		 "void PhysicsWorld::rayCast(PhysicsRayCastCallbackFunc func, const Vec2& point1, const Vec2& point2, void* data)": {
			"prefix": "void PhysicsWorld::rayCast(PhysicsRayCastCallbackFunc func, const Vec2& point1, const Vec2& point2, void* data)",
			"body": [
				"PhysicsWorld:rayCast(${1:PhysicsRayCastCallbackFunc func},${2:Vec2& point1},${3:Vec2& point2},${4:void* data})"
			],
			"description": "void PhysicsWorld::rayCast(PhysicsRayCastCallbackFunc func, const Vec2& point1, const Vec2& point2, void* data)"
		},
		 "void PhysicsBody::applyForce(const Vect& force, const Vec2& offset)": {
			"prefix": "void PhysicsBody::applyForce(const Vect& force, const Vec2& offset)",
			"body": [
				"PhysicsBody:applyForce(${1:Vect& force},${2:Vec2& offset})"
			],
			"description": "void PhysicsBody::applyForce(const Vect& force, const Vec2& offset)"
		},
		 "void TMXLayer::setTileGID(int gid, const Vec2& tileCoordinate)": {
			"prefix": "void TMXLayer::setTileGID(int gid, const Vec2& tileCoordinate)",
			"body": [
				"TMXLayer:setTileGID(${1:int gid},${2:Vec2& tileCoordinate})"
			],
			"description": "void TMXLayer::setTileGID(int gid, const Vec2& tileCoordinate)"
		},
		 "void LayerColorLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)": {
			"prefix": "void LayerColorLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)",
			"body": [
				"LayerColorLoader:onHandlePropTypeColor3(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Color3B pColor3B},${5:CCBReader * ccbReader})"
			],
			"description": "void LayerColorLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)"
		},
		 "void Physics3DSliderConstraint::setDampingDirAng(float dampingDirAng)": {
			"prefix": "void Physics3DSliderConstraint::setDampingDirAng(float dampingDirAng)",
			"body": [
				"Physics3DSliderConstraint:setDampingDirAng(${1:float dampingDirAng})"
			],
			"description": "void Physics3DSliderConstraint::setDampingDirAng(float dampingDirAng)"
		},
		 "int TextField::getFontSize()const": {
			"prefix": "int TextField::getFontSize()const",
			"body": [
				"int TextField:getFontSize()"
			],
			"description": "int TextField::getFontSize()const"
		},
		 "bool EventListenerCustom::checkAvailable()": {
			"prefix": "bool EventListenerCustom::checkAvailable()",
			"body": [
				"bool EventListenerCustom:checkAvailable()"
			],
			"description": "bool EventListenerCustom::checkAvailable()"
		},
		 "void SocketIOPacket::addData(const std::string& data)": {
			"prefix": "void SocketIOPacket::addData(const std::string& data)",
			"body": [
				"SocketIOPacket:addData(${1:std:string& data})"
			],
			"description": "void SocketIOPacket::addData(const std::string& data)"
		},
		 "void MeshCommand::setDisplayColor(const Vec4& color)": {
			"prefix": "void MeshCommand::setDisplayColor(const Vec4& color)",
			"body": [
				"MeshCommand:setDisplayColor(${1:Vec4& color})"
			],
			"description": "void MeshCommand::setDisplayColor(const Vec4& color)"
		},
		 "void MeshCommand::buildVAO()": {
			"prefix": "void MeshCommand::buildVAO()",
			"body": [
				"void MeshCommand:buildVAO()"
			],
			"description": "void MeshCommand::buildVAO()"
		},
		 "bool SpriteFrame::initWithTextureFilename(const std::string& filename, const Rect& rect)": {
			"prefix": "bool SpriteFrame::initWithTextureFilename(const std::string& filename, const Rect& rect)",
			"body": [
				"SpriteFrame:initWithTextureFilename(${1:std:string& filename},${2:Rect& rect})"
			],
			"description": "bool SpriteFrame::initWithTextureFilename(const std::string& filename, const Rect& rect)"
		},
		 "EaseExponentialOut* EaseExponentialOut::create(ActionInterval* action)": {
			"prefix": "EaseExponentialOut* EaseExponentialOut::create(ActionInterval* action)",
			"body": [
				"EaseExponentialOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseExponentialOut* EaseExponentialOut::create(ActionInterval* action)"
		},
		 "void TriggerMng::addEventListenerWithFixedPriority(cocos2d::EventListener* listener, int fixedPriority)": {
			"prefix": "void TriggerMng::addEventListenerWithFixedPriority(cocos2d::EventListener* listener, int fixedPriority)",
			"body": [
				"TriggerMng:addEventListenerWithFixedPriority(${1:cocos2d:EventListener* listener},${2:int fixedPriority})"
			],
			"description": "void TriggerMng::addEventListenerWithFixedPriority(cocos2d::EventListener* listener, int fixedPriority)"
		},
		 "void PrettyPrinter::clear()": {
			"prefix": "void PrettyPrinter::clear()",
			"body": [
				"void PrettyPrinter:clear()"
			],
			"description": "void PrettyPrinter::clear()"
		},
		 "bool DictionaryHelper::getBoolValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, bool def)": {
			"prefix": "bool DictionaryHelper::getBoolValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, bool def)",
			"body": [
				"DictionaryHelper:getBoolValueFromArray_json(${1:rapidjson:Value& root},${2:char* arrayKey},${3:int idx},${4:bool def})"
			],
			"description": "bool DictionaryHelper::getBoolValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, bool def)"
		},
		 "void PhysicsWorld::addBody(PhysicsBody* body)": {
			"prefix": "void PhysicsWorld::addBody(PhysicsBody* body)",
			"body": [
				"PhysicsWorld:addBody(${1:PhysicsBody* body})"
			],
			"description": "void PhysicsWorld::addBody(PhysicsBody* body)"
		},
		 "CCBMemberVariableAssigner * CCBReader::getCCBMemberVariableAssigner()": {
			"prefix": "CCBMemberVariableAssigner * CCBReader::getCCBMemberVariableAssigner()",
			"body": [
				"CCBMemberVariableAssigner * CCBReader:getCCBMemberVariableAssigner()"
			],
			"description": "CCBMemberVariableAssigner * CCBReader::getCCBMemberVariableAssigner()"
		},
		 "BoneNode* SkeletonNode::getBoneNode(const std::string& boneName)": {
			"prefix": "BoneNode* SkeletonNode::getBoneNode(const std::string& boneName)",
			"body": [
				"SkeletonNode:getBoneNode(${1:std:string& boneName})"
			],
			"description": "BoneNode* SkeletonNode::getBoneNode(const std::string& boneName)"
		},
		 "bool BezierTo::initWithDuration(float t, const ccBezierConfig &c)": {
			"prefix": "bool BezierTo::initWithDuration(float t, const ccBezierConfig &c)",
			"body": [
				"BezierTo:initWithDuration(${1:float t},${2:ccBezierConfig &c})"
			],
			"description": "bool BezierTo::initWithDuration(float t, const ccBezierConfig &c)"
		},
		 "void InputDelegate::onTouchesBegan(const std::vector<Touch*>& pTouches, Event *pEvent)": {
			"prefix": "void InputDelegate::onTouchesBegan(const std::vector<Touch*>& pTouches, Event *pEvent)",
			"body": [
				"InputDelegate:onTouchesBegan(${1:std:vector<Touch*>& pTouches},${2:Event *pEvent})"
			],
			"description": "void InputDelegate::onTouchesBegan(const std::vector<Touch*>& pTouches, Event *pEvent)"
		},
		 "Animate* Animate::clone() const": {
			"prefix": "Animate* Animate::clone() const",
			"body": [
				"Animate* Animate:clone() "
			],
			"description": "Animate* Animate::clone() const"
		},
		 "void SIOClient::emit(const std::string& eventname, const std::string& args)": {
			"prefix": "void SIOClient::emit(const std::string& eventname, const std::string& args)",
			"body": [
				"SIOClient:emit(${1:std:string& eventname},${2:std:string& args})"
			],
			"description": "void SIOClient::emit(const std::string& eventname, const std::string& args)"
		},
		 "ActionInterval* TransitionFadeDown::actionWithSize(const Size& size)": {
			"prefix": "ActionInterval* TransitionFadeDown::actionWithSize(const Size& size)",
			"body": [
				"TransitionFadeDown:actionWithSize(${1:Size& size})"
			],
			"description": "ActionInterval* TransitionFadeDown::actionWithSize(const Size& size)"
		},
		 "void PrimitiveCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, Primitive* primitive, const Mat4& mv, uint32_t flags)": {
			"prefix": "void PrimitiveCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, Primitive* primitive, const Mat4& mv, uint32_t flags)",
			"body": [
				"PrimitiveCommand:init(${1:float globalOrder},${2:GLuint textureID},${3:GLProgramState* glProgramState},${4:BlendFunc blendType},${5:Primitive* primitive},${6:Mat4& mv},${7:uint32_t flags})"
			],
			"description": "void PrimitiveCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, Primitive* primitive, const Mat4& mv, uint32_t flags)"
		},
		 "const std::string& Application::getResourceRootPath(void)": {
			"prefix": "const std::string& Application::getResourceRootPath(void)",
			"body": [
				"std:string& Application:getResourceRootPath(${1:void})"
			],
			"description": "const std::string& Application::getResourceRootPath(void)"
		},
		 "void TextField::setMaxLength(int length)": {
			"prefix": "void TextField::setMaxLength(int length)",
			"body": [
				"TextField:setMaxLength(${1:int length})"
			],
			"description": "void TextField::setMaxLength(int length)"
		},
		 "cocos2d::Node*  SkeletonNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)": {
			"prefix": "cocos2d::Node*  SkeletonNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)",
			"body": [
				"SkeletonNodeReader:createNodeWithFlatBuffers(${1:flatbuffers:Table *nodeOptions})"
			],
			"description": "cocos2d::Node*  SkeletonNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)"
		},
		 "bool ParticleSpiral::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleSpiral::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSpiral:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleSpiral::initWithTotalParticles(int numberOfParticles)"
		},
		 "bool PhysicsShapeBox::init(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset /*= Vec2(0, 0)*/)": {
			"prefix": "bool PhysicsShapeBox::init(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset /*= Vec2(0, 0)*/)",
			"body": [
				"PhysicsShapeBox:init(${1:Size& size},${2:PhysicsMaterial& material/* = MaterialDefault*/},${3:Vec2& offset /*= Vec2(0},${4:0})"
			],
			"description": "bool PhysicsShapeBox::init(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset /*= Vec2(0, 0)*/)"
		},
		 "Camera* Camera::getDefaultCamera()": {
			"prefix": "Camera* Camera::getDefaultCamera()",
			"body": [
				"Camera* Camera:getDefaultCamera()"
			],
			"description": "Camera* Camera::getDefaultCamera()"
		},
		 "void Physics3DSliderConstraint::setSoftnessDirAng(float softnessDirAng)": {
			"prefix": "void Physics3DSliderConstraint::setSoftnessDirAng(float softnessDirAng)",
			"body": [
				"Physics3DSliderConstraint:setSoftnessDirAng(${1:float softnessDirAng})"
			],
			"description": "void Physics3DSliderConstraint::setSoftnessDirAng(float softnessDirAng)"
		},
		 "void SimpleAudioEngine::playBackgroundMusic(const char* pszFilePath, bool bLoop)": {
			"prefix": "void SimpleAudioEngine::playBackgroundMusic(const char* pszFilePath, bool bLoop)",
			"body": [
				"SimpleAudioEngine:playBackgroundMusic(${1:char* pszFilePath},${2:bool bLoop})"
			],
			"description": "void SimpleAudioEngine::playBackgroundMusic(const char* pszFilePath, bool bLoop)"
		},
		 "SIOClient* SocketIO::connect(const std::string& uri, SocketIO::SIODelegate& delegate)": {
			"prefix": "SIOClient* SocketIO::connect(const std::string& uri, SocketIO::SIODelegate& delegate)",
			"body": [
				"SocketIO:connect(${1:std:string& uri},${2:SocketIO:SIODelegate& delegate})"
			],
			"description": "SIOClient* SocketIO::connect(const std::string& uri, SocketIO::SIODelegate& delegate)"
		},
		 "bool GLProgram::updateUniformLocation(GLint location, const GLvoid* data, unsigned int bytes)": {
			"prefix": "bool GLProgram::updateUniformLocation(GLint location, const GLvoid* data, unsigned int bytes)",
			"body": [
				"GLProgram:updateUniformLocation(${1:GLint location},${2:GLvoid* data},${3:unsigned int bytes})"
			],
			"description": "bool GLProgram::updateUniformLocation(GLint location, const GLvoid* data, unsigned int bytes)"
		},
		 "bool LabelBMFont::initWithString(const std::string& str, const std::string& fntFile, float width /* = 0 */, TextHAlignment alignment /* = TextHAlignment::LEFT */,const Vec2& imageOffset /* = Vec2::ZERO */)": {
			"prefix": "bool LabelBMFont::initWithString(const std::string& str, const std::string& fntFile, float width /* = 0 */, TextHAlignment alignment /* = TextHAlignment::LEFT */,const Vec2& imageOffset /* = Vec2::ZERO */)",
			"body": [
				"LabelBMFont:initWithString(${1:std:string& str},${2:std:string& fntFile},${3:float width /* = 0 */},${4:TextHAlignment alignment /* = TextHAlignment:LEFT */},${5:Vec2& imageOffset /* = Vec2:ZERO */})"
			],
			"description": "bool LabelBMFont::initWithString(const std::string& str, const std::string& fntFile, float width /* = 0 */, TextHAlignment alignment /* = TextHAlignment::LEFT */,const Vec2& imageOffset /* = Vec2::ZERO */)"
		},
		 "void Label::onDrawShadow(GLProgram* glProgram)": {
			"prefix": "void Label::onDrawShadow(GLProgram* glProgram)",
			"body": [
				"Label:onDrawShadow(${1:GLProgram* glProgram})"
			],
			"description": "void Label::onDrawShadow(GLProgram* glProgram)"
		},
		 "void WebSocket::onSubThreadEnded()": {
			"prefix": "void WebSocket::onSubThreadEnded()",
			"body": [
				"void WebSocket:onSubThreadEnded()"
			],
			"description": "void WebSocket::onSubThreadEnded()"
		},
		 "bool Image::initWithJpgData(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithJpgData(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithJpgData(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithJpgData(const unsigned char * data, ssize_t dataLen)"
		},
		 "Properties* getPropertiesFromNamespacePath(Properties* properties, const std::vector<std::string>& namespacePath)": {
			"prefix": "Properties* getPropertiesFromNamespacePath(Properties* properties, const std::vector<std::string>& namespacePath)",
			"body": [
				"getPropertiesFromNamespacePath(${1:Properties* properties},${2:std:vector<std:string>& namespacePath})"
			],
			"description": "Properties* getPropertiesFromNamespacePath(Properties* properties, const std::vector<std::string>& namespacePath)"
		},
		 "void EventDispatcher::removeAllEventListeners()": {
			"prefix": "void EventDispatcher::removeAllEventListeners()",
			"body": [
				"void EventDispatcher:removeAllEventListeners()"
			],
			"description": "void EventDispatcher::removeAllEventListeners()"
		},
		 "Rect LabelBMFont::getBoundingBox() const": {
			"prefix": "Rect LabelBMFont::getBoundingBox() const",
			"body": [
				"Rect LabelBMFont:getBoundingBox() "
			],
			"description": "Rect LabelBMFont::getBoundingBox() const"
		},
		 "void Console::commandSceneGraph(int fd, const std::string &args)": {
			"prefix": "void Console::commandSceneGraph(int fd, const std::string &args)",
			"body": [
				"Console:commandSceneGraph(${1:int fd},${2:std:string &args})"
			],
			"description": "void Console::commandSceneGraph(int fd, const std::string &args)"
		},
		 "ValueMap FileUtils::getValueMapFromFile(const std::string& filename)": {
			"prefix": "ValueMap FileUtils::getValueMapFromFile(const std::string& filename)",
			"body": [
				"FileUtils:getValueMapFromFile(${1:std:string& filename})"
			],
			"description": "ValueMap FileUtils::getValueMapFromFile(const std::string& filename)"
		},
		 "Touch::DispatchMode Layer::getTouchMode() const": {
			"prefix": "Touch::DispatchMode Layer::getTouchMode() const",
			"body": [
				"Touch:DispatchMode Layer:getTouchMode() "
			],
			"description": "Touch::DispatchMode Layer::getTouchMode() const"
		},
		 "unsigned char* FontFreeType::getGlyphBitmap(unsigned short theChar, long &outWidth, long &outHeight, Rect &outRect,int &xAdvance)": {
			"prefix": "unsigned char* FontFreeType::getGlyphBitmap(unsigned short theChar, long &outWidth, long &outHeight, Rect &outRect,int &xAdvance)",
			"body": [
				"char* FontFreeType:getGlyphBitmap(${1:unsigned short theChar},${2:long &outWidth},${3:long &outHeight},${4:Rect &outRect},${5:int &xAdvance})"
			],
			"description": "unsigned char* FontFreeType::getGlyphBitmap(unsigned short theChar, long &outWidth, long &outHeight, Rect &outRect,int &xAdvance)"
		},
		 "void Physics3DWorld::setDebugDrawEnable(bool enableDebugDraw)": {
			"prefix": "void Physics3DWorld::setDebugDrawEnable(bool enableDebugDraw)",
			"body": [
				"Physics3DWorld:setDebugDrawEnable(${1:bool enableDebugDraw})"
			],
			"description": "void Physics3DWorld::setDebugDrawEnable(bool enableDebugDraw)"
		},
		 "ActionEase * EaseExponentialIn::reverse() const": {
			"prefix": "ActionEase * EaseExponentialIn::reverse() const",
			"body": [
				"ActionEase * EaseExponentialIn:reverse() "
			],
			"description": "ActionEase * EaseExponentialIn::reverse() const"
		},
		 "void RenderState::StateBlock::bindNoRestore()": {
			"prefix": "void RenderState::StateBlock::bindNoRestore()",
			"body": [
				"void RenderState:StateBlock:bindNoRestore()"
			],
			"description": "void RenderState::StateBlock::bindNoRestore()"
		},
		 "Grid3D* Grid3D::create(const Size& gridSize, const Rect& rect)": {
			"prefix": "Grid3D* Grid3D::create(const Size& gridSize, const Rect& rect)",
			"body": [
				"Grid3D:create(${1:Size& gridSize},${2:Rect& rect})"
			],
			"description": "Grid3D* Grid3D::create(const Size& gridSize, const Rect& rect)"
		},
		 "void OpenALFile::clear()": {
			"prefix": "void OpenALFile::clear()",
			"body": [
				"void OpenALFile:clear()"
			],
			"description": "void OpenALFile::clear()"
		},
		 "bool AtlasNode::initWithTileFile(const std::string& tile, int tileWidth, int tileHeight, int itemsToRender)": {
			"prefix": "bool AtlasNode::initWithTileFile(const std::string& tile, int tileWidth, int tileHeight, int itemsToRender)",
			"body": [
				"AtlasNode:initWithTileFile(${1:std:string& tile},${2:int tileWidth},${3:int tileHeight},${4:int itemsToRender})"
			],
			"description": "bool AtlasNode::initWithTileFile(const std::string& tile, int tileWidth, int tileHeight, int itemsToRender)"
		},
		 "bool AudioEngine::setMaxAudioInstance(int maxInstances)": {
			"prefix": "bool AudioEngine::setMaxAudioInstance(int maxInstances)",
			"body": [
				"AudioEngine:setMaxAudioInstance(${1:int maxInstances})"
			],
			"description": "bool AudioEngine::setMaxAudioInstance(int maxInstances)"
		},
		 "bool Sprite::isFrameDisplayed(SpriteFrame *frame) const": {
			"prefix": "bool Sprite::isFrameDisplayed(SpriteFrame *frame) const",
			"body": [
				"Sprite:isFrameDisplayed(${1:SpriteFrame *frame})"
			],
			"description": "bool Sprite::isFrameDisplayed(SpriteFrame *frame) const"
		},
		 "bool  Bundle3D::loadMeshDatasBinary(MeshDatas& meshdatas)": {
			"prefix": "bool  Bundle3D::loadMeshDatasBinary(MeshDatas& meshdatas)",
			"body": [
				"Bundle3D:loadMeshDatasBinary(${1:MeshDatas& meshdatas})"
			],
			"description": "bool  Bundle3D::loadMeshDatasBinary(MeshDatas& meshdatas)"
		},
		 "void Animate3D::setWeight(float weight)": {
			"prefix": "void Animate3D::setWeight(float weight)",
			"body": [
				"Animate3D:setWeight(${1:float weight})"
			],
			"description": "void Animate3D::setWeight(float weight)"
		},
		 "CCBAnimationManagerDelegate* CCBAnimationManager::getDelegate()": {
			"prefix": "CCBAnimationManagerDelegate* CCBAnimationManager::getDelegate()",
			"body": [
				"CCBAnimationManagerDelegate* CCBAnimationManager:getDelegate()"
			],
			"description": "CCBAnimationManagerDelegate* CCBAnimationManager::getDelegate()"
		},
		 "PolygonInfo AutoPolygon::generatePolygon(const std::string& filename, const Rect& rect, const float epsilon, const float threshold)": {
			"prefix": "PolygonInfo AutoPolygon::generatePolygon(const std::string& filename, const Rect& rect, const float epsilon, const float threshold)",
			"body": [
				"AutoPolygon:generatePolygon(${1:std:string& filename},${2:Rect& rect},${3:float epsilon},${4:float threshold})"
			],
			"description": "PolygonInfo AutoPolygon::generatePolygon(const std::string& filename, const Rect& rect, const float epsilon, const float threshold)"
		},
		 "void SpotLight::setInnerAngle(float angle)": {
			"prefix": "void SpotLight::setInnerAngle(float angle)",
			"body": [
				"SpotLight:setInnerAngle(${1:float angle})"
			],
			"description": "void SpotLight::setInnerAngle(float angle)"
		},
		 "MoveBy* MoveBy::clone() const": {
			"prefix": "MoveBy* MoveBy::clone() const",
			"body": [
				"MoveBy* MoveBy:clone() "
			],
			"description": "MoveBy* MoveBy::clone() const"
		},
		 "std::string RichText::getDescription() const": {
			"prefix": "std::string RichText::getDescription() const",
			"body": [
				"std:string RichText:getDescription() "
			],
			"description": "std::string RichText::getDescription() const"
		},
		 "bool ComController::init()": {
			"prefix": "bool ComController::init()",
			"body": [
				"bool ComController:init()"
			],
			"description": "bool ComController::init()"
		},
		 "void ParallaxNode::removeChild(Node* child, bool cleanup)": {
			"prefix": "void ParallaxNode::removeChild(Node* child, bool cleanup)",
			"body": [
				"ParallaxNode:removeChild(${1:Node* child},${2:bool cleanup})"
			],
			"description": "void ParallaxNode::removeChild(Node* child, bool cleanup)"
		},
		 "void Physics3DComponent::postSimulate()": {
			"prefix": "void Physics3DComponent::postSimulate()",
			"body": [
				"void Physics3DComponent:postSimulate()"
			],
			"description": "void Physics3DComponent::postSimulate()"
		},
		 "bool Bone::init(const std::string& name)": {
			"prefix": "bool Bone::init(const std::string& name)",
			"body": [
				"Bone:init(${1:std:string& name})"
			],
			"description": "bool Bone::init(const std::string& name)"
		},
		 "RotateBy* RotateBy::create(float duration, const Vec3& deltaAngle3D)": {
			"prefix": "RotateBy* RotateBy::create(float duration, const Vec3& deltaAngle3D)",
			"body": [
				"RotateBy:create(${1:float duration},${2:Vec3& deltaAngle3D})"
			],
			"description": "RotateBy* RotateBy::create(float duration, const Vec3& deltaAngle3D)"
		},
		 "bool CSLoader::isCustomWidget(const std::string &type)": {
			"prefix": "bool CSLoader::isCustomWidget(const std::string &type)",
			"body": [
				"CSLoader:isCustomWidget(${1:std:string &type})"
			],
			"description": "bool CSLoader::isCustomWidget(const std::string &type)"
		},
		 "GLenum Mesh::getPrimitiveType() const": {
			"prefix": "GLenum Mesh::getPrimitiveType() const",
			"body": [
				"GLenum Mesh:getPrimitiveType() "
			],
			"description": "GLenum Mesh::getPrimitiveType() const"
		},
		 "void PhysicsShapePolygon::updateScale()": {
			"prefix": "void PhysicsShapePolygon::updateScale()",
			"body": [
				"void PhysicsShapePolygon:updateScale()"
			],
			"description": "void PhysicsShapePolygon::updateScale()"
		},
		 "ObjectFactory::TInfo::TInfo(const TInfo &t)": {
			"prefix": "ObjectFactory::TInfo::TInfo(const TInfo &t)",
			"body": [
				"&t})"
			],
			"description": "ObjectFactory::TInfo::TInfo(const TInfo &t)"
		},
		 "const std::string& Component::getName() const": {
			"prefix": "const std::string& Component::getName() const",
			"body": [
				" std:string& Component:getName() "
			],
			"description": "const std::string& Component::getName() const"
		},
		 "MoveTo* MoveTo::clone() const": {
			"prefix": "MoveTo* MoveTo::clone() const",
			"body": [
				"MoveTo* MoveTo:clone() "
			],
			"description": "MoveTo* MoveTo::clone() const"
		},
		 "bool FileUtils::writeDataToFile(Data retData, const std::string& fullPath)": {
			"prefix": "bool FileUtils::writeDataToFile(Data retData, const std::string& fullPath)",
			"body": [
				"FileUtils:writeDataToFile(${1:Data retData},${2:std:string& fullPath})"
			],
			"description": "bool FileUtils::writeDataToFile(Data retData, const std::string& fullPath)"
		},
		 "void __Set::removeObject(Ref *pObject)": {
			"prefix": "void __Set::removeObject(Ref *pObject)",
			"body": [
				"__Set:removeObject(${1:Ref *pObject})"
			],
			"description": "void __Set::removeObject(Ref *pObject)"
		},
		 "float Physics3DSliderConstraint::getLowerLinLimit() const": {
			"prefix": "float Physics3DSliderConstraint::getLowerLinLimit() const",
			"body": [
				"float Physics3DSliderConstraint:getLowerLinLimit() "
			],
			"description": "float Physics3DSliderConstraint::getLowerLinLimit() const"
		},
		 "void NodeLoader::onHandlePropTypeScaleLock(Node * pNode, Node * pParent, const char* pPropertyName, float * pScaleLock, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeScaleLock(Node * pNode, Node * pParent, const char* pPropertyName, float * pScaleLock, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeScaleLock(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:float * pScaleLock},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeScaleLock(Node * pNode, Node * pParent, const char* pPropertyName, float * pScaleLock, CCBReader * ccbReader)"
		},
		 "ArmatureData *ArmatureDataManager::getArmatureData(const std::string& id)": {
			"prefix": "ArmatureData *ArmatureDataManager::getArmatureData(const std::string& id)",
			"body": [
				"*ArmatureDataManager:getArmatureData(${1:std:string& id})"
			],
			"description": "ArmatureData *ArmatureDataManager::getArmatureData(const std::string& id)"
		},
		 "void EventDispatcher::EventListenerVector::clearFixedListeners()": {
			"prefix": "void EventDispatcher::EventListenerVector::clearFixedListeners()",
			"body": [
				"void EventDispatcher:EventListenerVector:clearFixedListeners()"
			],
			"description": "void EventDispatcher::EventListenerVector::clearFixedListeners()"
		},
		 "void Quaternion::createFromAxisAngle(const Vec3& axis, float angle, Quaternion* dst)": {
			"prefix": "void Quaternion::createFromAxisAngle(const Vec3& axis, float angle, Quaternion* dst)",
			"body": [
				"Quaternion:createFromAxisAngle(${1:Vec3& axis},${2:float angle},${3:Quaternion* dst})"
			],
			"description": "void Quaternion::createFromAxisAngle(const Vec3& axis, float angle, Quaternion* dst)"
		},
		 "void CCBAnimationManager::runAction(Node *pNode, CCBSequenceProperty *pSeqProp, float fTweenDuration)": {
			"prefix": "void CCBAnimationManager::runAction(Node *pNode, CCBSequenceProperty *pSeqProp, float fTweenDuration)",
			"body": [
				"CCBAnimationManager:runAction(${1:Node *pNode},${2:CCBSequenceProperty *pSeqProp},${3:float fTweenDuration})"
			],
			"description": "void CCBAnimationManager::runAction(Node *pNode, CCBSequenceProperty *pSeqProp, float fTweenDuration)"
		},
		 "void Node::addChildHelper(Node* child, int localZOrder, int tag, const std::string &name, bool setTag)": {
			"prefix": "void Node::addChildHelper(Node* child, int localZOrder, int tag, const std::string &name, bool setTag)",
			"body": [
				"Node:addChildHelper(${1:Node* child},${2:int localZOrder},${3:int tag},${4:std:string &name},${5:bool setTag})"
			],
			"description": "void Node::addChildHelper(Node* child, int localZOrder, int tag, const std::string &name, bool setTag)"
		},
		 "void ScrollView::moveChildren(float offsetX, float offsetY)": {
			"prefix": "void ScrollView::moveChildren(float offsetX, float offsetY)",
			"body": [
				"ScrollView:moveChildren(${1:float offsetX},${2:float offsetY})"
			],
			"description": "void ScrollView::moveChildren(float offsetX, float offsetY)"
		},
		 "bool FileUtilsWin32::renameFile(const std::string &path, const std::string &oldname, const std::string &name)": {
			"prefix": "bool FileUtilsWin32::renameFile(const std::string &path, const std::string &oldname, const std::string &name)",
			"body": [
				"FileUtilsWin32:renameFile(${1:std:string &path},${2:std:string &oldname},${3:std:string &name})"
			],
			"description": "bool FileUtilsWin32::renameFile(const std::string &path, const std::string &oldname, const std::string &name)"
		},
		 "void JniHelper::setJavaVM(JavaVM *javaVM)": {
			"prefix": "void JniHelper::setJavaVM(JavaVM *javaVM)",
			"body": [
				"JniHelper:setJavaVM(${1:JavaVM *javaVM})"
			],
			"description": "void JniHelper::setJavaVM(JavaVM *javaVM)"
		},
		 "bool ColliderDetector::init()": {
			"prefix": "bool ColliderDetector::init()",
			"body": [
				"bool ColliderDetector:init()"
			],
			"description": "bool ColliderDetector::init()"
		},
		 "Vec2 PointFromString(const std::string& str)": {
			"prefix": "Vec2 PointFromString(const std::string& str)",
			"body": [
				"PointFromString(${1:std:string& str})"
			],
			"description": "Vec2 PointFromString(const std::string& str)"
		},
		 "Vec3 MotionStreak::getPosition3D() const": {
			"prefix": "Vec3 MotionStreak::getPosition3D() const",
			"body": [
				"Vec3 MotionStreak:getPosition3D() "
			],
			"description": "Vec3 MotionStreak::getPosition3D() const"
		},
		 "void GLViewImpl::end()": {
			"prefix": "void GLViewImpl::end()",
			"body": [
				"void GLViewImpl:end()"
			],
			"description": "void GLViewImpl::end()"
		},
		 "void ComAudio::setBackgroundMusicVolume(float volume)": {
			"prefix": "void ComAudio::setBackgroundMusicVolume(float volume)",
			"body": [
				"ComAudio:setBackgroundMusicVolume(${1:float volume})"
			],
			"description": "void ComAudio::setBackgroundMusicVolume(float volume)"
		},
		 "RepeatForever *RepeatForever::create(ActionInterval *action)": {
			"prefix": "RepeatForever *RepeatForever::create(ActionInterval *action)",
			"body": [
				"*RepeatForever:create(${1:ActionInterval *action})"
			],
			"description": "RepeatForever *RepeatForever::create(ActionInterval *action)"
		},
		 "bool Texture2D::initWithString(const char *text, const FontDefinition& textDefinition)": {
			"prefix": "bool Texture2D::initWithString(const char *text, const FontDefinition& textDefinition)",
			"body": [
				"Texture2D:initWithString(${1:char *text},${2:FontDefinition& textDefinition})"
			],
			"description": "bool Texture2D::initWithString(const char *text, const FontDefinition& textDefinition)"
		},
		 "Terrain::Triangle::Triangle(Vec3 p1, Vec3 p2, Vec3 p3)": {
			"prefix": "Terrain::Triangle::Triangle(Vec3 p1, Vec3 p2, Vec3 p3)",
			"body": [
				"p1},${2:Vec3 p2},${3:Vec3 p3})"
			],
			"description": "Terrain::Triangle::Triangle(Vec3 p1, Vec3 p2, Vec3 p3)"
		},
		 "SkeletonAnimation* SkeletonAnimation::createWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)": {
			"prefix": "SkeletonAnimation* SkeletonAnimation::createWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)",
			"body": [
				"SkeletonAnimation:createWithFile (${1:std:string& skeletonDataFile},${2:spAtlas* atlas},${3:float scale})"
			],
			"description": "SkeletonAnimation* SkeletonAnimation::createWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)"
		},
		 "EaseBounceInOut* EaseBounceInOut::reverse() const": {
			"prefix": "EaseBounceInOut* EaseBounceInOut::reverse() const",
			"body": [
				"EaseBounceInOut* EaseBounceInOut:reverse() "
			],
			"description": "EaseBounceInOut* EaseBounceInOut::reverse() const"
		},
		 "bool NavMesh::isDebugDrawEnabled() const": {
			"prefix": "bool NavMesh::isDebugDrawEnabled() const",
			"body": [
				"bool NavMesh:isDebugDrawEnabled() "
			],
			"description": "bool NavMesh::isDebugDrawEnabled() const"
		},
		 "Shaky3D* Shaky3D::clone() const": {
			"prefix": "Shaky3D* Shaky3D::clone() const",
			"body": [
				"Shaky3D* Shaky3D:clone() "
			],
			"description": "Shaky3D* Shaky3D::clone() const"
		},
		 "bool Material::parseShader(Pass* pass, Properties* shaderProperties)": {
			"prefix": "bool Material::parseShader(Pass* pass, Properties* shaderProperties)",
			"body": [
				"Material:parseShader(${1:Pass* pass},${2:Properties* shaderProperties})"
			],
			"description": "bool Material::parseShader(Pass* pass, Properties* shaderProperties)"
		},
		 "Timeline* Timeline::create()": {
			"prefix": "Timeline* Timeline::create()",
			"body": [
				"Timeline* Timeline:create()"
			],
			"description": "Timeline* Timeline::create()"
		},
		 "Bone *Skin::getBone() const": {
			"prefix": "Bone *Skin::getBone() const",
			"body": [
				"Bone *Skin:getBone() "
			],
			"description": "Bone *Skin::getBone() const"
		},
		 "Sprite * TMXLayer::insertTileForGID(uint32_t gid, const Vec2& pos)": {
			"prefix": "Sprite * TMXLayer::insertTileForGID(uint32_t gid, const Vec2& pos)",
			"body": [
				"* TMXLayer:insertTileForGID(${1:uint32_t gid},${2:Vec2& pos})"
			],
			"description": "Sprite * TMXLayer::insertTileForGID(uint32_t gid, const Vec2& pos)"
		},
		 "bool FileUtilsWin32::isAbsolutePath(const std::string& strPath) const": {
			"prefix": "bool FileUtilsWin32::isAbsolutePath(const std::string& strPath) const",
			"body": [
				"FileUtilsWin32:isAbsolutePath(${1:std:string& strPath})"
			],
			"description": "bool FileUtilsWin32::isAbsolutePath(const std::string& strPath) const"
		},
		 "Slider* Slider::create()": {
			"prefix": "Slider* Slider::create()",
			"body": [
				"Slider* Slider:create()"
			],
			"description": "Slider* Slider::create()"
		},
		 "void PointArray::addControlPoint(Vec2 controlPoint)": {
			"prefix": "void PointArray::addControlPoint(Vec2 controlPoint)",
			"body": [
				"PointArray:addControlPoint(${1:Vec2 controlPoint})"
			],
			"description": "void PointArray::addControlPoint(Vec2 controlPoint)"
		},
		 "void Text::enableGlow(const Color4B& glowColor)": {
			"prefix": "void Text::enableGlow(const Color4B& glowColor)",
			"body": [
				"Text:enableGlow(${1:Color4B& glowColor})"
			],
			"description": "void Text::enableGlow(const Color4B& glowColor)"
		},
		 "TransitionFade* TransitionFade::create(float duration,Scene* scene)": {
			"prefix": "TransitionFade* TransitionFade::create(float duration,Scene* scene)",
			"body": [
				"TransitionFade:create(${1:float duration},${2:Scene* scene})"
			],
			"description": "TransitionFade* TransitionFade::create(float duration,Scene* scene)"
		},
		 "Armature *Bone::getArmature() const": {
			"prefix": "Armature *Bone::getArmature() const",
			"body": [
				"Armature *Bone:getArmature() "
			],
			"description": "Armature *Bone::getArmature() const"
		},
		 "cocos2d::Vector<CCBKeyframe*>& CCBSequenceProperty::getKeyframes()": {
			"prefix": "cocos2d::Vector<CCBKeyframe*>& CCBSequenceProperty::getKeyframes()",
			"body": [
				"cocos2d:Vector<CCBKeyframe*>& CCBSequenceProperty:getKeyframes()"
			],
			"description": "cocos2d::Vector<CCBKeyframe*>& CCBSequenceProperty::getKeyframes()"
		},
		 "void Mat4::set(const float* mat)": {
			"prefix": "void Mat4::set(const float* mat)",
			"body": [
				"Mat4:set(${1:float* mat})"
			],
			"description": "void Mat4::set(const float* mat)"
		},
		 "bool FontAtlas::getLetterDefinitionForChar(char16_t utf16Char, FontLetterDefinition &letterDefinition)": {
			"prefix": "bool FontAtlas::getLetterDefinitionForChar(char16_t utf16Char, FontLetterDefinition &letterDefinition)",
			"body": [
				"FontAtlas:getLetterDefinitionForChar(${1:char16_t utf16Char},${2:FontLetterDefinition &letterDefinition})"
			],
			"description": "bool FontAtlas::getLetterDefinitionForChar(char16_t utf16Char, FontLetterDefinition &letterDefinition)"
		},
		 "void Texture2D::convertI8ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertI8ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertI8ToAI88(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertI8ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void AABB::getCorners(Vec3 *dst) const": {
			"prefix": "void AABB::getCorners(Vec3 *dst) const",
			"body": [
				"AABB:getCorners(${1:Vec3 *dst})"
			],
			"description": "void AABB::getCorners(Vec3 *dst) const"
		},
		 "GLProgramState* Widget::getGrayGLProgramState()const": {
			"prefix": "GLProgramState* Widget::getGrayGLProgramState()const",
			"body": [
				"GLProgramState* Widget:getGrayGLProgramState()"
			],
			"description": "GLProgramState* Widget::getGrayGLProgramState()const"
		},
		 "MotionStreak* MotionStreak::create(float fade, float minSeg, float stroke, const Color3B& color, const std::string& path)": {
			"prefix": "MotionStreak* MotionStreak::create(float fade, float minSeg, float stroke, const Color3B& color, const std::string& path)",
			"body": [
				"MotionStreak:create(${1:float fade},${2:float minSeg},${3:float stroke},${4:Color3B& color},${5:std:string& path})"
			],
			"description": "MotionStreak* MotionStreak::create(float fade, float minSeg, float stroke, const Color3B& color, const std::string& path)"
		},
		 "void ListView::doLayout()": {
			"prefix": "void ListView::doLayout()",
			"body": [
				"void ListView:doLayout()"
			],
			"description": "void ListView::doLayout()"
		},
		 "void SpriteFrame::setTexture(Texture2D * texture)": {
			"prefix": "void SpriteFrame::setTexture(Texture2D * texture)",
			"body": [
				"SpriteFrame:setTexture(${1:Texture2D * texture})"
			],
			"description": "void SpriteFrame::setTexture(Texture2D * texture)"
		},
		 "bool Quaternion::inverse()": {
			"prefix": "bool Quaternion::inverse()",
			"body": [
				"bool Quaternion:inverse()"
			],
			"description": "bool Quaternion::inverse()"
		},
		 "Vec2 TMXLayer::calculateLayerOffset(const Vec2& pos)": {
			"prefix": "Vec2 TMXLayer::calculateLayerOffset(const Vec2& pos)",
			"body": [
				"TMXLayer:calculateLayerOffset(${1:Vec2& pos})"
			],
			"description": "Vec2 TMXLayer::calculateLayerOffset(const Vec2& pos)"
		},
		 "bool SkewBy::initWithDuration(float t, float deltaSkewX, float deltaSkewY)": {
			"prefix": "bool SkewBy::initWithDuration(float t, float deltaSkewX, float deltaSkewY)",
			"body": [
				"SkewBy:initWithDuration(${1:float t},${2:float deltaSkewX},${3:float deltaSkewY})"
			],
			"description": "bool SkewBy::initWithDuration(float t, float deltaSkewX, float deltaSkewY)"
		},
		 "Animation* Animation::create(const Vector<AnimationFrame*>& arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops /* = 1 */)": {
			"prefix": "Animation* Animation::create(const Vector<AnimationFrame*>& arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops /* = 1 */)",
			"body": [
				"Animation:create(${1:Vector<AnimationFrame*>& arrayOfAnimationFrameNames},${2:float delayPerUnit},${3:unsigned int loops /* = 1 */})"
			],
			"description": "Animation* Animation::create(const Vector<AnimationFrame*>& arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops /* = 1 */)"
		},
		 "void BMFontConfiguration::parseCharacterDefinition(const char* line, BMFontDef *characterDefinition)": {
			"prefix": "void BMFontConfiguration::parseCharacterDefinition(const char* line, BMFontDef *characterDefinition)",
			"body": [
				"BMFontConfiguration:parseCharacterDefinition(${1:char* line},${2:BMFontDef *characterDefinition})"
			],
			"description": "void BMFontConfiguration::parseCharacterDefinition(const char* line, BMFontDef *characterDefinition)"
		},
		 "void GLView::setScissorInPoints(float x , float y , float w , float h)": {
			"prefix": "void GLView::setScissorInPoints(float x , float y , float w , float h)",
			"body": [
				"GLView:setScissorInPoints(${1:float x},${2:float y},${3:float w},${4:float h})"
			],
			"description": "void GLView::setScissorInPoints(float x , float y , float w , float h)"
		},
		 "Vector<CCBSequence*>& CCBAnimationManager::getSequences()": {
			"prefix": "Vector<CCBSequence*>& CCBAnimationManager::getSequences()",
			"body": [
				"Vector<CCBSequence*>& CCBAnimationManager:getSequences()"
			],
			"description": "Vector<CCBSequence*>& CCBAnimationManager::getSequences()"
		},
		 "PhysicsJointGroove* PhysicsJointGroove::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& grooveA, const Vec2& grooveB, const Vec2& anchr2)": {
			"prefix": "PhysicsJointGroove* PhysicsJointGroove::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& grooveA, const Vec2& grooveB, const Vec2& anchr2)",
			"body": [
				"PhysicsJointGroove:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:Vec2& grooveA},${4:Vec2& grooveB},${5:Vec2& anchr2})"
			],
			"description": "PhysicsJointGroove* PhysicsJointGroove::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& grooveA, const Vec2& grooveB, const Vec2& anchr2)"
		},
		 "string UserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)": {
			"prefix": "string UserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)",
			"body": [
				"UserDefault:getStringForKey(${1:char* pKey},${2:std:string & defaultValue})"
			],
			"description": "string UserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)"
		},
		 "Node* CCBReader::readNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner, const Size &parentSize)": {
			"prefix": "Node* CCBReader::readNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner, const Size &parentSize)",
			"body": [
				"CCBReader:readNodeGraphFromFile(${1:char *pCCBFileName},${2:Ref *pOwner},${3:Size &parentSize})"
			],
			"description": "Node* CCBReader::readNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner, const Size &parentSize)"
		},
		 "void CallFuncN::execute()": {
			"prefix": "void CallFuncN::execute()",
			"body": [
				"void CallFuncN:execute()"
			],
			"description": "void CallFuncN::execute()"
		},
		 "void Console::commandTextures(int fd, const std::string& args)": {
			"prefix": "void Console::commandTextures(int fd, const std::string& args)",
			"body": [
				"Console:commandTextures(${1:int fd},${2:std:string& args})"
			],
			"description": "void Console::commandTextures(int fd, const std::string& args)"
		},
		 "void Bone::changeDisplayByIndex(int index, bool force)": {
			"prefix": "void Bone::changeDisplayByIndex(int index, bool force)",
			"body": [
				"Bone:changeDisplayByIndex(${1:int index},${2:bool force})"
			],
			"description": "void Bone::changeDisplayByIndex(int index, bool force)"
		},
		 "EaseCubicActionIn* EaseCubicActionIn::clone() const": {
			"prefix": "EaseCubicActionIn* EaseCubicActionIn::clone() const",
			"body": [
				"EaseCubicActionIn* EaseCubicActionIn:clone() "
			],
			"description": "EaseCubicActionIn* EaseCubicActionIn::clone() const"
		},
		 "void NodeLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPoint, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPoint, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypePoint(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:Vec2 pPoint},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPoint, CCBReader * ccbReader)"
		},
		 "void Button::disabledTextureScaleChangedWithSize()": {
			"prefix": "void Button::disabledTextureScaleChangedWithSize()",
			"body": [
				"void Button:disabledTextureScaleChangedWithSize()"
			],
			"description": "void Button::disabledTextureScaleChangedWithSize()"
		},
		 "void FontAtlas::purgeTexturesAtlas()": {
			"prefix": "void FontAtlas::purgeTexturesAtlas()",
			"body": [
				"void FontAtlas:purgeTexturesAtlas()"
			],
			"description": "void FontAtlas::purgeTexturesAtlas()"
		},
		 "void ScrollView::setDirection(Direction dir)": {
			"prefix": "void ScrollView::setDirection(Direction dir)",
			"body": [
				"ScrollView:setDirection(${1:Direction dir})"
			],
			"description": "void ScrollView::setDirection(Direction dir)"
		},
		 "void NodeLoader::onHandlePropTypeTexture(Node * pNode, Node * pParent, const char* pPropertyName, Texture2D * pTexture2D, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeTexture(Node * pNode, Node * pParent, const char* pPropertyName, Texture2D * pTexture2D, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeTexture(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:Texture2D * pTexture2D},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeTexture(Node * pNode, Node * pParent, const char* pPropertyName, Texture2D * pTexture2D, CCBReader * ccbReader)"
		},
		 "Animation * NodeLoader::parsePropTypeAnimation(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "Animation * NodeLoader::parsePropTypeAnimation(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"* NodeLoader:parsePropTypeAnimation(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "Animation * NodeLoader::parsePropTypeAnimation(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "bool Console::listenOnFileDescriptor(int fd)": {
			"prefix": "bool Console::listenOnFileDescriptor(int fd)",
			"body": [
				"Console:listenOnFileDescriptor(${1:int fd})"
			],
			"description": "bool Console::listenOnFileDescriptor(int fd)"
		},
		 "bool Margin::equals(const Margin &target) const": {
			"prefix": "bool Margin::equals(const Margin &target) const",
			"body": [
				"Margin:equals(${1:Margin &target})"
			],
			"description": "bool Margin::equals(const Margin &target) const"
		},
		 "ssize_t Skeleton3D::getBoneCount() const": {
			"prefix": "ssize_t Skeleton3D::getBoneCount() const",
			"body": [
				"ssize_t Skeleton3D:getBoneCount() "
			],
			"description": "ssize_t Skeleton3D::getBoneCount() const"
		},
		 "bool ActionTimelineData::init(int actionTag)": {
			"prefix": "bool ActionTimelineData::init(int actionTag)",
			"body": [
				"ActionTimelineData:init(${1:int actionTag})"
			],
			"description": "bool ActionTimelineData::init(int actionTag)"
		},
		 "DisplayType DisplayManager::getDisplayRenderNodeType() const": {
			"prefix": "DisplayType DisplayManager::getDisplayRenderNodeType() const",
			"body": [
				"DisplayType DisplayManager:getDisplayRenderNodeType() "
			],
			"description": "DisplayType DisplayManager::getDisplayRenderNodeType() const"
		},
		 "void EaseBackIn::update(float time)": {
			"prefix": "void EaseBackIn::update(float time)",
			"body": [
				"EaseBackIn:update(${1:float time})"
			],
			"description": "void EaseBackIn::update(float time)"
		},
		 "ActionInterval* TransitionPageTurn:: actionWithSize(const Size& vector)": {
			"prefix": "ActionInterval* TransitionPageTurn:: actionWithSize(const Size& vector)",
			"body": [
				"TransitionPageTurn: actionWithSize(${1:Size& vector})"
			],
			"description": "ActionInterval* TransitionPageTurn:: actionWithSize(const Size& vector)"
		},
		 "Offset<flatbuffers::IntFrame> FlatBuffersSerialize::createIntFrame(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<flatbuffers::IntFrame> FlatBuffersSerialize::createIntFrame(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createIntFrame(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<flatbuffers::IntFrame> FlatBuffersSerialize::createIntFrame(const tinyxml2::XMLElement *objectData)"
		},
		 "Material* Mesh::getMaterial() const": {
			"prefix": "Material* Mesh::getMaterial() const",
			"body": [
				"Material* Mesh:getMaterial() "
			],
			"description": "Material* Mesh::getMaterial() const"
		},
		 "void NotificationObserver::setHandler(int var)": {
			"prefix": "void NotificationObserver::setHandler(int var)",
			"body": [
				"NotificationObserver:setHandler(${1:int var})"
			],
			"description": "void NotificationObserver::setHandler(int var)"
		},
		 "bool MenuItem::initWithTarget(cocos2d::Ref *target, SEL_MenuHandler selector )": {
			"prefix": "bool MenuItem::initWithTarget(cocos2d::Ref *target, SEL_MenuHandler selector )",
			"body": [
				"MenuItem:initWithTarget(${1:cocos2d:Ref *target},${2:SEL_MenuHandler selector})"
			],
			"description": "bool MenuItem::initWithTarget(cocos2d::Ref *target, SEL_MenuHandler selector )"
		},
		 "std::vector<float> Terrain::getHeightData() const": {
			"prefix": "std::vector<float> Terrain::getHeightData() const",
			"body": [
				"std:vector<float> Terrain:getHeightData() "
			],
			"description": "std::vector<float> Terrain::getHeightData() const"
		},
		 "void ScrollView::processAutoScrolling(float deltaTime)": {
			"prefix": "void ScrollView::processAutoScrolling(float deltaTime)",
			"body": [
				"ScrollView:processAutoScrolling(${1:float deltaTime})"
			],
			"description": "void ScrollView::processAutoScrolling(float deltaTime)"
		},
		 "void Layout::onExit()": {
			"prefix": "void Layout::onExit()",
			"body": [
				"void Layout:onExit()"
			],
			"description": "void Layout::onExit()"
		},
		 "TransitionScene * TransitionScene::create(float t, Scene *scene)": {
			"prefix": "TransitionScene * TransitionScene::create(float t, Scene *scene)",
			"body": [
				"* TransitionScene:create(${1:float t},${2:Scene *scene})"
			],
			"description": "TransitionScene * TransitionScene::create(float t, Scene *scene)"
		},
		 "void Text::setTextAreaSize(const Size &size)": {
			"prefix": "void Text::setTextAreaSize(const Size &size)",
			"body": [
				"Text:setTextAreaSize(${1:Size &size})"
			],
			"description": "void Text::setTextAreaSize(const Size &size)"
		},
		 "AccelDeccelAmplitude* AccelDeccelAmplitude::reverse() const": {
			"prefix": "AccelDeccelAmplitude* AccelDeccelAmplitude::reverse() const",
			"body": [
				"AccelDeccelAmplitude* AccelDeccelAmplitude:reverse() "
			],
			"description": "AccelDeccelAmplitude* AccelDeccelAmplitude::reverse() const"
		},
		 "Node* TextBMFont::getVirtualRenderer()": {
			"prefix": "Node* TextBMFont::getVirtualRenderer()",
			"body": [
				"Node* TextBMFont:getVirtualRenderer()"
			],
			"description": "Node* TextBMFont::getVirtualRenderer()"
		},
		 "EaseOut* EaseOut::create(ActionInterval *action, float rate)": {
			"prefix": "EaseOut* EaseOut::create(ActionInterval *action, float rate)",
			"body": [
				"EaseOut:create(${1:ActionInterval *action},${2:float rate})"
			],
			"description": "EaseOut* EaseOut::create(ActionInterval *action, float rate)"
		},
		 "std::string RadioButtonGroup::getDescription() const": {
			"prefix": "std::string RadioButtonGroup::getDescription() const",
			"body": [
				"std:string RadioButtonGroup:getDescription() "
			],
			"description": "std::string RadioButtonGroup::getDescription() const"
		},
		 "void Node::addChild(Node *child, int localZOrder, int tag)": {
			"prefix": "void Node::addChild(Node *child, int localZOrder, int tag)",
			"body": [
				"Node:addChild(${1:Node *child},${2:int localZOrder},${3:int tag})"
			],
			"description": "void Node::addChild(Node *child, int localZOrder, int tag)"
		},
		 "void TriggerObj::serialize(cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)": {
			"prefix": "void TriggerObj::serialize(cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)",
			"body": [
				"TriggerObj:serialize(${1:cocostudio:CocoLoader *pCocoLoader},${2:cocostudio:stExpCocoNode *pCocoNode})"
			],
			"description": "void TriggerObj::serialize(cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)"
		},
		 "void Slider::loadSlidBallTextureNormal(const std::string& normal,TextureResType texType)": {
			"prefix": "void Slider::loadSlidBallTextureNormal(const std::string& normal,TextureResType texType)",
			"body": [
				"Slider:loadSlidBallTextureNormal(${1:std:string& normal},${2:TextureResType texType})"
			],
			"description": "void Slider::loadSlidBallTextureNormal(const std::string& normal,TextureResType texType)"
		},
		 "float Physics3DCollider::getHitFraction() const": {
			"prefix": "float Physics3DCollider::getHitFraction() const",
			"body": [
				"float Physics3DCollider:getHitFraction() "
			],
			"description": "float Physics3DCollider::getHitFraction() const"
		},
		 "void TriggerObj::setEnabled(bool enabled)": {
			"prefix": "void TriggerObj::setEnabled(bool enabled)",
			"body": [
				"TriggerObj:setEnabled(${1:bool enabled})"
			],
			"description": "void TriggerObj::setEnabled(bool enabled)"
		},
		 "float Physics3DCollider::getRestitution() const": {
			"prefix": "float Physics3DCollider::getRestitution() const",
			"body": [
				"float Physics3DCollider:getRestitution() "
			],
			"description": "float Physics3DCollider::getRestitution() const"
		},
		 "Vec2 Node::convertToWorldSpaceAR(const Vec2& nodePoint) const": {
			"prefix": "Vec2 Node::convertToWorldSpaceAR(const Vec2& nodePoint) const",
			"body": [
				"Node:convertToWorldSpaceAR(${1:Vec2& nodePoint})"
			],
			"description": "Vec2 Node::convertToWorldSpaceAR(const Vec2& nodePoint) const"
		},
		 "void AllocatorDiagnostics::untrackAllocator(AllocatorBase* allocator)": {
			"prefix": "void AllocatorDiagnostics::untrackAllocator(AllocatorBase* allocator)",
			"body": [
				"AllocatorDiagnostics:untrackAllocator(${1:AllocatorBase* allocator})"
			],
			"description": "void AllocatorDiagnostics::untrackAllocator(AllocatorBase* allocator)"
		},
		 "bool Bundle3D::loadAnimationData(const std::string& id, Animation3DData* animationdata)": {
			"prefix": "bool Bundle3D::loadAnimationData(const std::string& id, Animation3DData* animationdata)",
			"body": [
				"Bundle3D:loadAnimationData(${1:std:string& id},${2:Animation3DData* animationdata})"
			],
			"description": "bool Bundle3D::loadAnimationData(const std::string& id, Animation3DData* animationdata)"
		},
		 "bool ActionTimelineNode::init(Node* root, ActionTimeline* action)": {
			"prefix": "bool ActionTimelineNode::init(Node* root, ActionTimeline* action)",
			"body": [
				"ActionTimelineNode:init(${1:Node* root},${2:ActionTimeline* action})"
			],
			"description": "bool ActionTimelineNode::init(Node* root, ActionTimeline* action)"
		},
		 "void MenuItemToggle::unselected()": {
			"prefix": "void MenuItemToggle::unselected()",
			"body": [
				"void MenuItemToggle:unselected()"
			],
			"description": "void MenuItemToggle::unselected()"
		},
		 "void GridBase::setGridRect(const cocos2d::Rect &rect)": {
			"prefix": "void GridBase::setGridRect(const cocos2d::Rect &rect)",
			"body": [
				"GridBase:setGridRect(${1:cocos2d:Rect &rect})"
			],
			"description": "void GridBase::setGridRect(const cocos2d::Rect &rect)"
		},
		 "void EditBoxImplAndroid::setNativePlaceHolder(const char* pText)": {
			"prefix": "void EditBoxImplAndroid::setNativePlaceHolder(const char* pText)",
			"body": [
				"EditBoxImplAndroid:setNativePlaceHolder(${1:char* pText})"
			],
			"description": "void EditBoxImplAndroid::setNativePlaceHolder(const char* pText)"
		},
		 "bool Widget::init()": {
			"prefix": "bool Widget::init()",
			"body": [
				"bool Widget:init()"
			],
			"description": "bool Widget::init()"
		},
		 "void Bone::updateDisplayedOpacity(GLubyte parentOpacity)": {
			"prefix": "void Bone::updateDisplayedOpacity(GLubyte parentOpacity)",
			"body": [
				"Bone:updateDisplayedOpacity(${1:GLubyte parentOpacity})"
			],
			"description": "void Bone::updateDisplayedOpacity(GLubyte parentOpacity)"
		},
		 "void RenderState::StateBlock::setDepthFunction(DepthFunction func)": {
			"prefix": "void RenderState::StateBlock::setDepthFunction(DepthFunction func)",
			"body": [
				"RenderState:StateBlock:setDepthFunction(${1:DepthFunction func})"
			],
			"description": "void RenderState::StateBlock::setDepthFunction(DepthFunction func)"
		},
		 "void SkewTo::startWithTarget(Node *target)": {
			"prefix": "void SkewTo::startWithTarget(Node *target)",
			"body": [
				"SkewTo:startWithTarget(${1:Node *target})"
			],
			"description": "void SkewTo::startWithTarget(Node *target)"
		},
		 "int Configuration::getMaxSupportDirLightInShader() const": {
			"prefix": "int Configuration::getMaxSupportDirLightInShader() const",
			"body": [
				"int Configuration:getMaxSupportDirLightInShader() "
			],
			"description": "int Configuration::getMaxSupportDirLightInShader() const"
		},
		 "void SpotLight::setOuterAngle(float angle)": {
			"prefix": "void SpotLight::setOuterAngle(float angle)",
			"body": [
				"SpotLight:setOuterAngle(${1:float angle})"
			],
			"description": "void SpotLight::setOuterAngle(float angle)"
		},
		 "EaseBounceIn* EaseBounceIn::clone() const": {
			"prefix": "EaseBounceIn* EaseBounceIn::clone() const",
			"body": [
				"EaseBounceIn* EaseBounceIn:clone() "
			],
			"description": "EaseBounceIn* EaseBounceIn::clone() const"
		},
		 "void ListView::forceDoLayout()": {
			"prefix": "void ListView::forceDoLayout()",
			"body": [
				"void ListView:forceDoLayout()"
			],
			"description": "void ListView::forceDoLayout()"
		},
		 "void SpriteBatchNode::appendChild(Sprite* sprite)": {
			"prefix": "void SpriteBatchNode::appendChild(Sprite* sprite)",
			"body": [
				"SpriteBatchNode:appendChild(${1:Sprite* sprite})"
			],
			"description": "void SpriteBatchNode::appendChild(Sprite* sprite)"
		},
		 "void Layout::stencilClippingVisit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)": {
			"prefix": "void Layout::stencilClippingVisit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)",
			"body": [
				"Layout:stencilClippingVisit(${1:Renderer *renderer},${2:Mat4& parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void Layout::stencilClippingVisit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)"
		},
		 "unsigned int cc_utf8_find_last_not_char(const std::vector<unsigned short>& str, unsigned short c)": {
			"prefix": "unsigned int cc_utf8_find_last_not_char(const std::vector<unsigned short>& str, unsigned short c)",
			"body": [
				"int cc_utf8_find_last_not_char(${1:std:vector<unsigned short>& str},${2:unsigned short c})"
			],
			"description": "unsigned int cc_utf8_find_last_not_char(const std::vector<unsigned short>& str, unsigned short c)"
		},
		 "bool Properties::parseVec4(const char* str, Vec4* out)": {
			"prefix": "bool Properties::parseVec4(const char* str, Vec4* out)",
			"body": [
				"Properties:parseVec4(${1:char* str},${2:Vec4* out})"
			],
			"description": "bool Properties::parseVec4(const char* str, Vec4* out)"
		},
		 "void Console::commandResolution(int fd, const std::string& args)": {
			"prefix": "void Console::commandResolution(int fd, const std::string& args)",
			"body": [
				"Console:commandResolution(${1:int fd},${2:std:string& args})"
			],
			"description": "void Console::commandResolution(int fd, const std::string& args)"
		},
		 "void AlphaFrame::onApply(float percent)": {
			"prefix": "void AlphaFrame::onApply(float percent)",
			"body": [
				"AlphaFrame:onApply(${1:float percent})"
			],
			"description": "void AlphaFrame::onApply(float percent)"
		},
		 "void AccelDeccelAmplitude::startWithTarget(Node *target)": {
			"prefix": "void AccelDeccelAmplitude::startWithTarget(Node *target)",
			"body": [
				"AccelDeccelAmplitude:startWithTarget(${1:Node *target})"
			],
			"description": "void AccelDeccelAmplitude::startWithTarget(Node *target)"
		},
		 "void GLProgramState::setUniformCallback(const std::string& uniformName, const std::function<void(GLProgram*, Uniform*)> &callback)": {
			"prefix": "void GLProgramState::setUniformCallback(const std::string& uniformName, const std::function<void(GLProgram*, Uniform*)> &callback)",
			"body": [
				"GLProgramState:setUniformCallback(${1:std:string& uniformName},${2:std:function<void(GLProgram*},${3:Uniform*})"
			],
			"description": "void GLProgramState::setUniformCallback(const std::string& uniformName, const std::function<void(GLProgram*, Uniform*)> &callback)"
		},
		 "bool EventListenerPhysicsContactWithGroup::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)": {
			"prefix": "bool EventListenerPhysicsContactWithGroup::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)",
			"body": [
				"EventListenerPhysicsContactWithGroup:hitTest(${1:PhysicsShape* shapeA},${2:PhysicsShape* shapeB})"
			],
			"description": "bool EventListenerPhysicsContactWithGroup::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)"
		},
		 "float Vec2::distance(const Vec2& v) const": {
			"prefix": "float Vec2::distance(const Vec2& v) const",
			"body": [
				"Vec2:distance(${1:Vec2& v})"
			],
			"description": "float Vec2::distance(const Vec2& v) const"
		},
		 "void TransitionFadeTR::onEnter()": {
			"prefix": "void TransitionFadeTR::onEnter()",
			"body": [
				"void TransitionFadeTR:onEnter()"
			],
			"description": "void TransitionFadeTR::onEnter()"
		},
		 "void WebViewImpl::goBack()": {
			"prefix": "void WebViewImpl::goBack()",
			"body": [
				"void WebViewImpl:goBack()"
			],
			"description": "void WebViewImpl::goBack()"
		},
		 "void TextField::textfieldRendererScaleChangedWithSize()": {
			"prefix": "void TextField::textfieldRendererScaleChangedWithSize()",
			"body": [
				"void TextField:textfieldRendererScaleChangedWithSize()"
			],
			"description": "void TextField::textfieldRendererScaleChangedWithSize()"
		},
		 "void AndroidJavaEngine::pauseAllEffects()": {
			"prefix": "void AndroidJavaEngine::pauseAllEffects()",
			"body": [
				"void AndroidJavaEngine:pauseAllEffects()"
			],
			"description": "void AndroidJavaEngine::pauseAllEffects()"
		},
		 "void TransitionSlideInT::sceneOrder()": {
			"prefix": "void TransitionSlideInT::sceneOrder()",
			"body": [
				"void TransitionSlideInT:sceneOrder()"
			],
			"description": "void TransitionSlideInT::sceneOrder()"
		},
		 "std::string NodeLoader::parsePropTypeString(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "std::string NodeLoader::parsePropTypeString(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeString(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "std::string NodeLoader::parsePropTypeString(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void Timeline::gotoFrame(int frameIndex)": {
			"prefix": "void Timeline::gotoFrame(int frameIndex)",
			"body": [
				"Timeline:gotoFrame(${1:int frameIndex})"
			],
			"description": "void Timeline::gotoFrame(int frameIndex)"
		},
		 "void Node::getPosition(float* x, float* y) const": {
			"prefix": "void Node::getPosition(float* x, float* y) const",
			"body": [
				"Node:getPosition(${1:float* x},${2:float* y})"
			],
			"description": "void Node::getPosition(float* x, float* y) const"
		},
		 "cocos2d::Node*  BoneNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)": {
			"prefix": "cocos2d::Node*  BoneNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)",
			"body": [
				"BoneNodeReader:createNodeWithFlatBuffers(${1:flatbuffers:Table *nodeOptions})"
			],
			"description": "cocos2d::Node*  BoneNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)"
		},
		 "bool PageView::onTouchBegan(Touch *touch, Event *unusedEvent)": {
			"prefix": "bool PageView::onTouchBegan(Touch *touch, Event *unusedEvent)",
			"body": [
				"PageView:onTouchBegan(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "bool PageView::onTouchBegan(Touch *touch, Event *unusedEvent)"
		},
		 "ssize_t MeshSkin::getBoneCount() const": {
			"prefix": "ssize_t MeshSkin::getBoneCount() const",
			"body": [
				"ssize_t MeshSkin:getBoneCount() "
			],
			"description": "ssize_t MeshSkin::getBoneCount() const"
		},
		 "void WebSocket::send(const unsigned char* binaryMsg, unsigned int len)": {
			"prefix": "void WebSocket::send(const unsigned char* binaryMsg, unsigned int len)",
			"body": [
				"WebSocket:send(${1:unsigned char* binaryMsg},${2:unsigned int len})"
			],
			"description": "void WebSocket::send(const unsigned char* binaryMsg, unsigned int len)"
		},
		 "Vector<CCBAnimationManager*>& CCBReader::getAnimationManagersForNodes()": {
			"prefix": "Vector<CCBAnimationManager*>& CCBReader::getAnimationManagersForNodes()",
			"body": [
				"Vector<CCBAnimationManager*>& CCBReader:getAnimationManagersForNodes()"
			],
			"description": "Vector<CCBAnimationManager*>& CCBReader::getAnimationManagersForNodes()"
		},
		 "Vec2 Camera::project(const Vec3& src) const": {
			"prefix": "Vec2 Camera::project(const Vec3& src) const",
			"body": [
				"Camera:project(${1:Vec3& src})"
			],
			"description": "Vec2 Camera::project(const Vec3& src) const"
		},
		 "void Mat4::createRotationX(float angle, Mat4* dst)": {
			"prefix": "void Mat4::createRotationX(float angle, Mat4* dst)",
			"body": [
				"Mat4:createRotationX(${1:float angle},${2:Mat4* dst})"
			],
			"description": "void Mat4::createRotationX(float angle, Mat4* dst)"
		},
		 "void Mat4::createRotation(const Vec3& axis, float angle, Mat4* dst)": {
			"prefix": "void Mat4::createRotation(const Vec3& axis, float angle, Mat4* dst)",
			"body": [
				"Mat4:createRotation(${1:Vec3& axis},${2:float angle},${3:Mat4* dst})"
			],
			"description": "void Mat4::createRotation(const Vec3& axis, float angle, Mat4* dst)"
		},
		 "void TextureAtlas::moveQuadsFromIndex(ssize_t oldIndex, ssize_t amount, ssize_t newIndex)": {
			"prefix": "void TextureAtlas::moveQuadsFromIndex(ssize_t oldIndex, ssize_t amount, ssize_t newIndex)",
			"body": [
				"TextureAtlas:moveQuadsFromIndex(${1:ssize_t oldIndex},${2:ssize_t amount},${3:ssize_t newIndex})"
			],
			"description": "void TextureAtlas::moveQuadsFromIndex(ssize_t oldIndex, ssize_t amount, ssize_t newIndex)"
		},
		 "Node* CSLoader::loadNodeWithFile(const std::string& fileName)": {
			"prefix": "Node* CSLoader::loadNodeWithFile(const std::string& fileName)",
			"body": [
				"CSLoader:loadNodeWithFile(${1:std:string& fileName})"
			],
			"description": "Node* CSLoader::loadNodeWithFile(const std::string& fileName)"
		},
		 "void EaseQuinticActionOut::update(float time)": {
			"prefix": "void EaseQuinticActionOut::update(float time)",
			"body": [
				"EaseQuinticActionOut:update(${1:float time})"
			],
			"description": "void EaseQuinticActionOut::update(float time)"
		},
		 "const Rect& ImageView::getCapInsets()const": {
			"prefix": "const Rect& ImageView::getCapInsets()const",
			"body": [
				" Rect& ImageView:getCapInsets()"
			],
			"description": "const Rect& ImageView::getCapInsets()const"
		},
		 "void Mat4::rotateX(float angle)": {
			"prefix": "void Mat4::rotateX(float angle)",
			"body": [
				"Mat4:rotateX(${1:float angle})"
			],
			"description": "void Mat4::rotateX(float angle)"
		},
		 "LayoutParameter* RelativeLayoutParameter::createCloneInstance()": {
			"prefix": "LayoutParameter* RelativeLayoutParameter::createCloneInstance()",
			"body": [
				"LayoutParameter* RelativeLayoutParameter:createCloneInstance()"
			],
			"description": "LayoutParameter* RelativeLayoutParameter::createCloneInstance()"
		},
		 "bool Rect::containsPoint(const Vec2& point) const": {
			"prefix": "bool Rect::containsPoint(const Vec2& point) const",
			"body": [
				"Rect:containsPoint(${1:Vec2& point})"
			],
			"description": "bool Rect::containsPoint(const Vec2& point) const"
		},
		 "Lens3D* Lens3D::clone() const": {
			"prefix": "Lens3D* Lens3D::clone() const",
			"body": [
				"Lens3D* Lens3D:clone() "
			],
			"description": "Lens3D* Lens3D::clone() const"
		},
		 "void PhysicsDebugDraw::end()": {
			"prefix": "void PhysicsDebugDraw::end()",
			"body": [
				"void PhysicsDebugDraw:end()"
			],
			"description": "void PhysicsDebugDraw::end()"
		},
		 "void Layer::onTouchesEnded(const std::vector<Touch*>& touches, Event *event)": {
			"prefix": "void Layer::onTouchesEnded(const std::vector<Touch*>& touches, Event *event)",
			"body": [
				"Layer:onTouchesEnded(${1:std:vector<Touch*>& touches},${2:Event *event})"
			],
			"description": "void Layer::onTouchesEnded(const std::vector<Touch*>& touches, Event *event)"
		},
		 "unsigned char* getImageData(Image* img, Texture2D::PixelFormat&  ePixFmt)": {
			"prefix": "unsigned char* getImageData(Image* img, Texture2D::PixelFormat&  ePixFmt)",
			"body": [
				"char* getImageData(${1:Image* img},${2:Texture2D:PixelFormat&  ePixFmt})"
			],
			"description": "unsigned char* getImageData(Image* img, Texture2D::PixelFormat&  ePixFmt)"
		},
		 "float PhysicsJointDistance::getDistance() const": {
			"prefix": "float PhysicsJointDistance::getDistance() const",
			"body": [
				"float PhysicsJointDistance:getDistance() "
			],
			"description": "float PhysicsJointDistance::getDistance() const"
		},
		 "void ColliderDetector::setBody(cpBody *pBody)": {
			"prefix": "void ColliderDetector::setBody(cpBody *pBody)",
			"body": [
				"ColliderDetector:setBody(${1:cpBody *pBody})"
			],
			"description": "void ColliderDetector::setBody(cpBody *pBody)"
		},
		 "CameraBackgroundSkyBoxBrush* CameraBackgroundSkyBoxBrush::create()": {
			"prefix": "CameraBackgroundSkyBoxBrush* CameraBackgroundSkyBoxBrush::create()",
			"body": [
				"CameraBackgroundSkyBoxBrush* CameraBackgroundSkyBoxBrush:create()"
			],
			"description": "CameraBackgroundSkyBoxBrush* CameraBackgroundSkyBoxBrush::create()"
		},
		 "void ParticleSystem::resetSystem()": {
			"prefix": "void ParticleSystem::resetSystem()",
			"body": [
				"void ParticleSystem:resetSystem()"
			],
			"description": "void ParticleSystem::resetSystem()"
		},
		 "void Director::pushMatrix(MATRIX_STACK_TYPE type)": {
			"prefix": "void Director::pushMatrix(MATRIX_STACK_TYPE type)",
			"body": [
				"Director:pushMatrix(${1:MATRIX_STACK_TYPE type})"
			],
			"description": "void Director::pushMatrix(MATRIX_STACK_TYPE type)"
		},
		 "Label* Label::create()": {
			"prefix": "Label* Label::create()",
			"body": [
				"Label* Label:create()"
			],
			"description": "Label* Label::create()"
		},
		 "void GridBase::calculateVertexPoints(void)": {
			"prefix": "void GridBase::calculateVertexPoints(void)",
			"body": [
				"GridBase:calculateVertexPoints(${1:void})"
			],
			"description": "void GridBase::calculateVertexPoints(void)"
		},
		 "bool Primitive::init(VertexData* verts, IndexBuffer* indices, int type)": {
			"prefix": "bool Primitive::init(VertexData* verts, IndexBuffer* indices, int type)",
			"body": [
				"Primitive:init(${1:VertexData* verts},${2:IndexBuffer* indices},${3:int type})"
			],
			"description": "bool Primitive::init(VertexData* verts, IndexBuffer* indices, int type)"
		},
		 "Vector<PhysicsShape*> PhysicsWorld::getShapes(const Vec2& point) const": {
			"prefix": "Vector<PhysicsShape*> PhysicsWorld::getShapes(const Vec2& point) const",
			"body": [
				"PhysicsWorld:getShapes(${1:Vec2& point})"
			],
			"description": "Vector<PhysicsShape*> PhysicsWorld::getShapes(const Vec2& point) const"
		},
		 "void BMFontConfiguration::purgeKerningDictionary()": {
			"prefix": "void BMFontConfiguration::purgeKerningDictionary()",
			"body": [
				"void BMFontConfiguration:purgeKerningDictionary()"
			],
			"description": "void BMFontConfiguration::purgeKerningDictionary()"
		},
		 "void SkeletonNode::updateOrderedAllbones()": {
			"prefix": "void SkeletonNode::updateOrderedAllbones()",
			"body": [
				"void SkeletonNode:updateOrderedAllbones()"
			],
			"description": "void SkeletonNode::updateOrderedAllbones()"
		},
		 "std::string FileUtils::getSuitableFOpen(const std::string& filenameUtf8) const": {
			"prefix": "std::string FileUtils::getSuitableFOpen(const std::string& filenameUtf8) const",
			"body": [
				"FileUtils:getSuitableFOpen(${1:std:string& filenameUtf8})"
			],
			"description": "std::string FileUtils::getSuitableFOpen(const std::string& filenameUtf8) const"
		},
		 "Blink* Blink::create(float duration, int blinks)": {
			"prefix": "Blink* Blink::create(float duration, int blinks)",
			"body": [
				"Blink:create(${1:float duration},${2:int blinks})"
			],
			"description": "Blink* Blink::create(float duration, int blinks)"
		},
		 "ValueMapIntKey& Value::asIntKeyMap()": {
			"prefix": "ValueMapIntKey& Value::asIntKeyMap()",
			"body": [
				"ValueMapIntKey& Value:asIntKeyMap()"
			],
			"description": "ValueMapIntKey& Value::asIntKeyMap()"
		},
		 "void ScaleTo::startWithTarget(Node *target)": {
			"prefix": "void ScaleTo::startWithTarget(Node *target)",
			"body": [
				"ScaleTo:startWithTarget(${1:Node *target})"
			],
			"description": "void ScaleTo::startWithTarget(Node *target)"
		},
		 "void Sprite3D::setGLProgramState(GLProgramState* glProgramState)": {
			"prefix": "void Sprite3D::setGLProgramState(GLProgramState* glProgramState)",
			"body": [
				"Sprite3D:setGLProgramState(${1:GLProgramState* glProgramState})"
			],
			"description": "void Sprite3D::setGLProgramState(GLProgramState* glProgramState)"
		},
		 "void Physics3DRigidBody::applyTorque( const cocos2d::Vec3& torque )": {
			"prefix": "void Physics3DRigidBody::applyTorque( const cocos2d::Vec3& torque )",
			"body": [
				"Physics3DRigidBody:applyTorque(${1:cocos2d:Vec3& torque})"
			],
			"description": "void Physics3DRigidBody::applyTorque( const cocos2d::Vec3& torque )"
		},
		 "void Camera::setScene(Scene* scene)": {
			"prefix": "void Camera::setScene(Scene* scene)",
			"body": [
				"Camera:setScene(${1:Scene* scene})"
			],
			"description": "void Camera::setScene(Scene* scene)"
		},
		 "cocos2d::Vec3 Physics3DRigidBody::getAngularFactor() const": {
			"prefix": "cocos2d::Vec3 Physics3DRigidBody::getAngularFactor() const",
			"body": [
				"cocos2d:Vec3 Physics3DRigidBody:getAngularFactor() "
			],
			"description": "cocos2d::Vec3 Physics3DRigidBody::getAngularFactor() const"
		},
		 "void NavMesh::removeNavMeshObstacle(NavMeshObstacle *obstacle)": {
			"prefix": "void NavMesh::removeNavMeshObstacle(NavMeshObstacle *obstacle)",
			"body": [
				"NavMesh:removeNavMeshObstacle(${1:NavMeshObstacle *obstacle})"
			],
			"description": "void NavMesh::removeNavMeshObstacle(NavMeshObstacle *obstacle)"
		},
		 "void NodeGrid::setTarget(Node* target)": {
			"prefix": "void NodeGrid::setTarget(Node* target)",
			"body": [
				"NodeGrid:setTarget(${1:Node* target})"
			],
			"description": "void NodeGrid::setTarget(Node* target)"
		},
		 "bool ComAudio::init()": {
			"prefix": "bool ComAudio::init()",
			"body": [
				"bool ComAudio:init()"
			],
			"description": "bool ComAudio::init()"
		},
		 "void CCBAnimationManager::addDocumentCallbackNode(Node *node)": {
			"prefix": "void CCBAnimationManager::addDocumentCallbackNode(Node *node)",
			"body": [
				"CCBAnimationManager:addDocumentCallbackNode(${1:Node *node})"
			],
			"description": "void CCBAnimationManager::addDocumentCallbackNode(Node *node)"
		},
		 "bool Vec2::isSegmentIntersect(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D)": {
			"prefix": "bool Vec2::isSegmentIntersect(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D)",
			"body": [
				"Vec2:isSegmentIntersect(${1:Vec2& A},${2:Vec2& B},${3:Vec2& C},${4:Vec2& D})"
			],
			"description": "bool Vec2::isSegmentIntersect(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D)"
		},
		 "void LinearLayoutParameter::copyProperties(LayoutParameter *model)": {
			"prefix": "void LinearLayoutParameter::copyProperties(LayoutParameter *model)",
			"body": [
				"LinearLayoutParameter:copyProperties(${1:LayoutParameter *model})"
			],
			"description": "void LinearLayoutParameter::copyProperties(LayoutParameter *model)"
		},
		 "MoveTo* MoveTo::create(float duration, const Vec2& position)": {
			"prefix": "MoveTo* MoveTo::create(float duration, const Vec2& position)",
			"body": [
				"MoveTo:create(${1:float duration},${2:Vec2& position})"
			],
			"description": "MoveTo* MoveTo::create(float duration, const Vec2& position)"
		},
		 "void SkeletonRenderer::setBlendFunc (const BlendFunc &blendFunc)": {
			"prefix": "void SkeletonRenderer::setBlendFunc (const BlendFunc &blendFunc)",
			"body": [
				"SkeletonRenderer:setBlendFunc (${1:BlendFunc &blendFunc})"
			],
			"description": "void SkeletonRenderer::setBlendFunc (const BlendFunc &blendFunc)"
		},
		 "void EaseCubicActionIn::update(float time)": {
			"prefix": "void EaseCubicActionIn::update(float time)",
			"body": [
				"EaseCubicActionIn:update(${1:float time})"
			],
			"description": "void EaseCubicActionIn::update(float time)"
		},
		 "float UserDefault::getFloatForKey(const char* pKey, float defaultValue)": {
			"prefix": "float UserDefault::getFloatForKey(const char* pKey, float defaultValue)",
			"body": [
				"UserDefault:getFloatForKey(${1:char* pKey},${2:float defaultValue})"
			],
			"description": "float UserDefault::getFloatForKey(const char* pKey, float defaultValue)"
		},
		 "bool Sprite3D::initFrom(const NodeDatas& nodeDatas, const MeshDatas& meshdatas, const MaterialDatas& materialdatas)": {
			"prefix": "bool Sprite3D::initFrom(const NodeDatas& nodeDatas, const MeshDatas& meshdatas, const MaterialDatas& materialdatas)",
			"body": [
				"Sprite3D:initFrom(${1:NodeDatas& nodeDatas},${2:MeshDatas& meshdatas},${3:MaterialDatas& materialdatas})"
			],
			"description": "bool Sprite3D::initFrom(const NodeDatas& nodeDatas, const MeshDatas& meshdatas, const MaterialDatas& materialdatas)"
		},
		 "void Mat4::add(const Mat4& mat)": {
			"prefix": "void Mat4::add(const Mat4& mat)",
			"body": [
				"Mat4:add(${1:Mat4& mat})"
			],
			"description": "void Mat4::add(const Mat4& mat)"
		},
		 "bool Image::decodeWithWIC(const unsigned char *data, ssize_t dataLen)": {
			"prefix": "bool Image::decodeWithWIC(const unsigned char *data, ssize_t dataLen)",
			"body": [
				"Image:decodeWithWIC(${1:unsigned char *data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::decodeWithWIC(const unsigned char *data, ssize_t dataLen)"
		},
		 "void ScrollView::processScrollingEvent()": {
			"prefix": "void ScrollView::processScrollingEvent()",
			"body": [
				"void ScrollView:processScrollingEvent()"
			],
			"description": "void ScrollView::processScrollingEvent()"
		},
		 "void ParticleSystem::setStartRadiusVar(float startRadiusVar)": {
			"prefix": "void ParticleSystem::setStartRadiusVar(float startRadiusVar)",
			"body": [
				"ParticleSystem:setStartRadiusVar(${1:float startRadiusVar})"
			],
			"description": "void ParticleSystem::setStartRadiusVar(float startRadiusVar)"
		},
		 "void UICCTextField::setPasswordStyleText(const std::string& styleText)": {
			"prefix": "void UICCTextField::setPasswordStyleText(const std::string& styleText)",
			"body": [
				"UICCTextField:setPasswordStyleText(${1:std:string& styleText})"
			],
			"description": "void UICCTextField::setPasswordStyleText(const std::string& styleText)"
		},
		 "void InnerActionFrame::setAnimationName(const std::string& animationName)": {
			"prefix": "void InnerActionFrame::setAnimationName(const std::string& animationName)",
			"body": [
				"InnerActionFrame:setAnimationName(${1:std:string& animationName})"
			],
			"description": "void InnerActionFrame::setAnimationName(const std::string& animationName)"
		},
		 "void Widget::FocusNavigationController::removeKeyboardEventListener()": {
			"prefix": "void Widget::FocusNavigationController::removeKeyboardEventListener()",
			"body": [
				"void Widget:FocusNavigationController:removeKeyboardEventListener()"
			],
			"description": "void Widget::FocusNavigationController::removeKeyboardEventListener()"
		},
		 "void	Physics3D6DofConstraint::setAngularUpperLimit(const cocos2d::Vec3& angularUpper)": {
			"prefix": "void	Physics3D6DofConstraint::setAngularUpperLimit(const cocos2d::Vec3& angularUpper)",
			"body": [
				"angularUpper})"
			],
			"description": "void	Physics3D6DofConstraint::setAngularUpperLimit(const cocos2d::Vec3& angularUpper)"
		},
		 "void Button::setTitleAlignment(TextHAlignment hAlignment)": {
			"prefix": "void Button::setTitleAlignment(TextHAlignment hAlignment)",
			"body": [
				"Button:setTitleAlignment(${1:TextHAlignment hAlignment})"
			],
			"description": "void Button::setTitleAlignment(TextHAlignment hAlignment)"
		},
		 "bool BoneNode::init()": {
			"prefix": "bool BoneNode::init()",
			"body": [
				"bool BoneNode:init()"
			],
			"description": "bool BoneNode::init()"
		},
		 "EventListenerMouse* EventListenerMouse::create()": {
			"prefix": "EventListenerMouse* EventListenerMouse::create()",
			"body": [
				"EventListenerMouse* EventListenerMouse:create()"
			],
			"description": "EventListenerMouse* EventListenerMouse::create()"
		},
		 "void Ray::set(const Vec3& origin, const Vec3& direction)": {
			"prefix": "void Ray::set(const Vec3& origin, const Vec3& direction)",
			"body": [
				"Ray:set(${1:Vec3& origin},${2:Vec3& direction})"
			],
			"description": "void Ray::set(const Vec3& origin, const Vec3& direction)"
		},
		 "bool CCBReader::readSoundKeyframesForSeq(CCBSequence* seq)": {
			"prefix": "bool CCBReader::readSoundKeyframesForSeq(CCBSequence* seq)",
			"body": [
				"CCBReader:readSoundKeyframesForSeq(${1:CCBSequence* seq})"
			],
			"description": "bool CCBReader::readSoundKeyframesForSeq(CCBSequence* seq)"
		},
		 "Skin *Skin::create()": {
			"prefix": "Skin *Skin::create()",
			"body": [
				"Skin *Skin:create()"
			],
			"description": "Skin *Skin::create()"
		},
		 "LayoutComponent* Widget::getOrCreateLayoutComponent()": {
			"prefix": "LayoutComponent* Widget::getOrCreateLayoutComponent()",
			"body": [
				"LayoutComponent* Widget:getOrCreateLayoutComponent()"
			],
			"description": "LayoutComponent* Widget::getOrCreateLayoutComponent()"
		},
		 "void Armature::setColliderFilter(ColliderFilter *filter)": {
			"prefix": "void Armature::setColliderFilter(ColliderFilter *filter)",
			"body": [
				"Armature:setColliderFilter(${1:ColliderFilter *filter})"
			],
			"description": "void Armature::setColliderFilter(ColliderFilter *filter)"
		},
		 "void WebSocket::close()": {
			"prefix": "void WebSocket::close()",
			"body": [
				"void WebSocket:close()"
			],
			"description": "void WebSocket::close()"
		},
		 "int ActionFrame::getFrameType()": {
			"prefix": "int ActionFrame::getFrameType()",
			"body": [
				"int ActionFrame:getFrameType()"
			],
			"description": "int ActionFrame::getFrameType()"
		},
		 "bool RelativeBox::initWithSize(const Size& size)": {
			"prefix": "bool RelativeBox::initWithSize(const Size& size)",
			"body": [
				"RelativeBox:initWithSize(${1:Size& size})"
			],
			"description": "bool RelativeBox::initWithSize(const Size& size)"
		},
		 "UniformValue* GLProgramState::getUniformValue(GLint uniformLocation)": {
			"prefix": "UniformValue* GLProgramState::getUniformValue(GLint uniformLocation)",
			"body": [
				"GLProgramState:getUniformValue(${1:GLint uniformLocation})"
			],
			"description": "UniformValue* GLProgramState::getUniformValue(GLint uniformLocation)"
		},
		 "void Button::onSizeChanged()": {
			"prefix": "void Button::onSizeChanged()",
			"body": [
				"void Button:onSizeChanged()"
			],
			"description": "void Button::onSizeChanged()"
		},
		 "__Array* __Array::clone() const": {
			"prefix": "__Array* __Array::clone() const",
			"body": [
				"__Array* __Array:clone() "
			],
			"description": "__Array* __Array::clone() const"
		},
		 "bool Animation::init()": {
			"prefix": "bool Animation::init()",
			"body": [
				"bool Animation:init()"
			],
			"description": "bool Animation::init()"
		},
		 "void LoadingBar::copySpecialProperties(Widget *widget)": {
			"prefix": "void LoadingBar::copySpecialProperties(Widget *widget)",
			"body": [
				"LoadingBar:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void LoadingBar::copySpecialProperties(Widget *widget)"
		},
		 "float Physics3DConeTwistConstraint::getFixThresh() const": {
			"prefix": "float Physics3DConeTwistConstraint::getFixThresh() const",
			"body": [
				"float Physics3DConeTwistConstraint:getFixThresh() "
			],
			"description": "float Physics3DConeTwistConstraint::getFixThresh() const"
		},
		 "void Node::setPosition(float x, float y)": {
			"prefix": "void Node::setPosition(float x, float y)",
			"body": [
				"Node:setPosition(${1:float x},${2:float y})"
			],
			"description": "void Node::setPosition(float x, float y)"
		},
		 "void Label::setSystemFontName(const std::string& systemFont)": {
			"prefix": "void Label::setSystemFontName(const std::string& systemFont)",
			"body": [
				"Label:setSystemFontName(${1:std:string& systemFont})"
			],
			"description": "void Label::setSystemFontName(const std::string& systemFont)"
		},
		 "std::istream &inStream)": {
			"prefix": "std::istream &inStream)",
			"body": [
				"std:istream &inStream)"
			],
			"description": "std::istream &inStream)"
		},
		 "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName)": {
			"prefix": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName)",
			"body": [
				"Animation3D:create(${1:std:string& fileName},${2:std:string& animationName})"
			],
			"description": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName)"
		},
		 "void CardinalSplineTo::updatePosition(cocos2d::Vec2 &newPos)": {
			"prefix": "void CardinalSplineTo::updatePosition(cocos2d::Vec2 &newPos)",
			"body": [
				"CardinalSplineTo:updatePosition(${1:cocos2d:Vec2 &newPos})"
			],
			"description": "void CardinalSplineTo::updatePosition(cocos2d::Vec2 &newPos)"
		},
		 "void ColliderDetector::setActive(bool active)": {
			"prefix": "void ColliderDetector::setActive(bool active)",
			"body": [
				"ColliderDetector:setActive(${1:bool active})"
			],
			"description": "void ColliderDetector::setActive(bool active)"
		},
		 "void RenderTexture::setVirtualViewport(const Vec2& rtBegin, const Rect& fullRect, const Rect& fullViewport)": {
			"prefix": "void RenderTexture::setVirtualViewport(const Vec2& rtBegin, const Rect& fullRect, const Rect& fullViewport)",
			"body": [
				"RenderTexture:setVirtualViewport(${1:Vec2& rtBegin},${2:Rect& fullRect},${3:Rect& fullViewport})"
			],
			"description": "void RenderTexture::setVirtualViewport(const Vec2& rtBegin, const Rect& fullRect, const Rect& fullViewport)"
		},
		 "bool ParticleRain::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleRain::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleRain:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleRain::initWithTotalParticles(int numberOfParticles)"
		},
		 "EaseInOut* EaseInOut::create(ActionInterval *action, float rate)": {
			"prefix": "EaseInOut* EaseInOut::create(ActionInterval *action, float rate)",
			"body": [
				"EaseInOut:create(${1:ActionInterval *action},${2:float rate})"
			],
			"description": "EaseInOut* EaseInOut::create(ActionInterval *action, float rate)"
		},
		 "Action* ActionManager::getActionByTag(int tag, const Node *target) const": {
			"prefix": "Action* ActionManager::getActionByTag(int tag, const Node *target) const",
			"body": [
				"ActionManager:getActionByTag(${1:int tag},${2:Node *target})"
			],
			"description": "Action* ActionManager::getActionByTag(int tag, const Node *target) const"
		},
		 "void UICCTextField::setDetachWithIME(bool detach)": {
			"prefix": "void UICCTextField::setDetachWithIME(bool detach)",
			"body": [
				"UICCTextField:setDetachWithIME(${1:bool detach})"
			],
			"description": "void UICCTextField::setDetachWithIME(bool detach)"
		},
		 "bool RepeatForever::initWithAction(ActionInterval *action)": {
			"prefix": "bool RepeatForever::initWithAction(ActionInterval *action)",
			"body": [
				"RepeatForever:initWithAction(${1:ActionInterval *action})"
			],
			"description": "bool RepeatForever::initWithAction(ActionInterval *action)"
		},
		 "Sprite3DMaterialCache* Sprite3DMaterialCache::getInstance()": {
			"prefix": "Sprite3DMaterialCache* Sprite3DMaterialCache::getInstance()",
			"body": [
				"Sprite3DMaterialCache* Sprite3DMaterialCache:getInstance()"
			],
			"description": "Sprite3DMaterialCache* Sprite3DMaterialCache::getInstance()"
		},
		 "void QuadCommand::generateMaterialID()": {
			"prefix": "void QuadCommand::generateMaterialID()",
			"body": [
				"void QuadCommand:generateMaterialID()"
			],
			"description": "void QuadCommand::generateMaterialID()"
		},
		 "void MeshCommand::batchDraw()": {
			"prefix": "void MeshCommand::batchDraw()",
			"body": [
				"void MeshCommand:batchDraw()"
			],
			"description": "void MeshCommand::batchDraw()"
		},
		 "TargetedAction* TargetedAction::reverse() const": {
			"prefix": "TargetedAction* TargetedAction::reverse() const",
			"body": [
				"TargetedAction* TargetedAction:reverse() "
			],
			"description": "TargetedAction* TargetedAction::reverse() const"
		},
		 "std::string CCBAnimationManager::getLastCompletedSequenceName()": {
			"prefix": "std::string CCBAnimationManager::getLastCompletedSequenceName()",
			"body": [
				"std:string CCBAnimationManager:getLastCompletedSequenceName()"
			],
			"description": "std::string CCBAnimationManager::getLastCompletedSequenceName()"
		},
		 "cocos2d::Node*  ArmatureNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)": {
			"prefix": "cocos2d::Node*  ArmatureNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)",
			"body": [
				"ArmatureNodeReader:createNodeWithFlatBuffers(${1:flatbuffers:Table *nodeOptions})"
			],
			"description": "cocos2d::Node*  ArmatureNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)"
		},
		 "void AudioEngine::pauseAll()": {
			"prefix": "void AudioEngine::pauseAll()",
			"body": [
				"void AudioEngine:pauseAll()"
			],
			"description": "void AudioEngine::pauseAll()"
		},
		 "void TextureData::addContourData(ContourData *contourData)": {
			"prefix": "void TextureData::addContourData(ContourData *contourData)",
			"body": [
				"TextureData:addContourData(${1:ContourData *contourData})"
			],
			"description": "void TextureData::addContourData(ContourData *contourData)"
		},
		 "const std::vector<std::string>& FileUtils::getSearchResolutionsOrder() const": {
			"prefix": "const std::vector<std::string>& FileUtils::getSearchResolutionsOrder() const",
			"body": [
				" std:vector<std:string>& FileUtils:getSearchResolutionsOrder() "
			],
			"description": "const std::vector<std::string>& FileUtils::getSearchResolutionsOrder() const"
		},
		 "TransitionZoomFlipX* TransitionZoomFlipX::create(float t, Scene* s)": {
			"prefix": "TransitionZoomFlipX* TransitionZoomFlipX::create(float t, Scene* s)",
			"body": [
				"TransitionZoomFlipX:create(${1:float t},${2:Scene* s})"
			],
			"description": "TransitionZoomFlipX* TransitionZoomFlipX::create(float t, Scene* s)"
		},
		 "Hide * Hide::clone() const": {
			"prefix": "Hide * Hide::clone() const",
			"body": [
				"Hide * Hide:clone() "
			],
			"description": "Hide * Hide::clone() const"
		},
		 "int PhysicsWorld::collisionPreSolveCallback(PhysicsContact& contact)": {
			"prefix": "int PhysicsWorld::collisionPreSolveCallback(PhysicsContact& contact)",
			"body": [
				"PhysicsWorld:collisionPreSolveCallback(${1:PhysicsContact& contact})"
			],
			"description": "int PhysicsWorld::collisionPreSolveCallback(PhysicsContact& contact)"
		},
		 "stExpCocoAttribDesc* stExpCocoObjectDesc::GetAttribDescArray(CocoLoader* pCoco)": {
			"prefix": "stExpCocoAttribDesc* stExpCocoObjectDesc::GetAttribDescArray(CocoLoader* pCoco)",
			"body": [
				"stExpCocoObjectDesc:GetAttribDescArray(${1:CocoLoader* pCoco})"
			],
			"description": "stExpCocoAttribDesc* stExpCocoObjectDesc::GetAttribDescArray(CocoLoader* pCoco)"
		},
		 "void PhysicsWorld::addJoint(PhysicsJoint* joint)": {
			"prefix": "void PhysicsWorld::addJoint(PhysicsJoint* joint)",
			"body": [
				"PhysicsWorld:addJoint(${1:PhysicsJoint* joint})"
			],
			"description": "void PhysicsWorld::addJoint(PhysicsJoint* joint)"
		},
		 "void BoneNode::setDebugDrawEnabled(bool isDebugDraw)": {
			"prefix": "void BoneNode::setDebugDrawEnabled(bool isDebugDraw)",
			"body": [
				"BoneNode:setDebugDrawEnabled(${1:bool isDebugDraw})"
			],
			"description": "void BoneNode::setDebugDrawEnabled(bool isDebugDraw)"
		},
		 "bool IMEDispatcher::attachDelegateWithIME(IMEDelegate * delegate)": {
			"prefix": "bool IMEDispatcher::attachDelegateWithIME(IMEDelegate * delegate)",
			"body": [
				"IMEDispatcher:attachDelegateWithIME(${1:IMEDelegate * delegate})"
			],
			"description": "bool IMEDispatcher::attachDelegateWithIME(IMEDelegate * delegate)"
		},
		 "void TransitionMoveInR::initScenes()": {
			"prefix": "void TransitionMoveInR::initScenes()",
			"body": [
				"void TransitionMoveInR:initScenes()"
			],
			"description": "void TransitionMoveInR::initScenes()"
		},
		 "void ListView::removeChild(cocos2d::Node *child, bool cleaup)": {
			"prefix": "void ListView::removeChild(cocos2d::Node *child, bool cleaup)",
			"body": [
				"ListView:removeChild(${1:cocos2d:Node *child},${2:bool cleaup})"
			],
			"description": "void ListView::removeChild(cocos2d::Node *child, bool cleaup)"
		},
		 "void Scheduler::schedule(const ccSchedulerFunc& callback, void *target, float interval, bool paused, const std::string& key)": {
			"prefix": "void Scheduler::schedule(const ccSchedulerFunc& callback, void *target, float interval, bool paused, const std::string& key)",
			"body": [
				"Scheduler:schedule(${1:ccSchedulerFunc& callback},${2:void *target},${3:float interval},${4:bool paused},${5:std:string& key})"
			],
			"description": "void Scheduler::schedule(const ccSchedulerFunc& callback, void *target, float interval, bool paused, const std::string& key)"
		},
		 "Size TextAtlas::getVirtualRendererSize() const": {
			"prefix": "Size TextAtlas::getVirtualRendererSize() const",
			"body": [
				"Size TextAtlas:getVirtualRendererSize() "
			],
			"description": "Size TextAtlas::getVirtualRendererSize() const"
		},
		 "bool CCBRotateXTo::initWithDuration(float fDuration, float fAngle)": {
			"prefix": "bool CCBRotateXTo::initWithDuration(float fDuration, float fAngle)",
			"body": [
				"CCBRotateXTo:initWithDuration(${1:float fDuration},${2:float fAngle})"
			],
			"description": "bool CCBRotateXTo::initWithDuration(float fDuration, float fAngle)"
		},
		 "std::string TextBMFont::getDescription() const": {
			"prefix": "std::string TextBMFont::getDescription() const",
			"body": [
				"std:string TextBMFont:getDescription() "
			],
			"description": "std::string TextBMFont::getDescription() const"
		},
		 "void GLProgramState::setUniformTexture(const std::string& uniformName, GLuint textureId)": {
			"prefix": "void GLProgramState::setUniformTexture(const std::string& uniformName, GLuint textureId)",
			"body": [
				"GLProgramState:setUniformTexture(${1:std:string& uniformName},${2:GLuint textureId})"
			],
			"description": "void GLProgramState::setUniformTexture(const std::string& uniformName, GLuint textureId)"
		},
		 "float ActionInterval::getAmplitudeRate()": {
			"prefix": "float ActionInterval::getAmplitudeRate()",
			"body": [
				"float ActionInterval:getAmplitudeRate()"
			],
			"description": "float ActionInterval::getAmplitudeRate()"
		},
		 "void MotionStreak::setPositionX(float x)": {
			"prefix": "void MotionStreak::setPositionX(float x)",
			"body": [
				"MotionStreak:setPositionX(${1:float x})"
			],
			"description": "void MotionStreak::setPositionX(float x)"
		},
		 "Size ShuffleTiles::getDelta(const Size& pos) const": {
			"prefix": "Size ShuffleTiles::getDelta(const Size& pos) const",
			"body": [
				"ShuffleTiles:getDelta(${1:Size& pos})"
			],
			"description": "Size ShuffleTiles::getDelta(const Size& pos) const"
		},
		 "void BatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void BatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"BatchNode:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void BatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "AudioEngine::AudioState AudioEngine::getState(int audioID)": {
			"prefix": "AudioEngine::AudioState AudioEngine::getState(int audioID)",
			"body": [
				"AudioEngine:getState(${1:int audioID})"
			],
			"description": "AudioEngine::AudioState AudioEngine::getState(int audioID)"
		},
		 "cocos2d::Vec3 Physics3DRigidBody::getTotalTorque() const": {
			"prefix": "cocos2d::Vec3 Physics3DRigidBody::getTotalTorque() const",
			"body": [
				"cocos2d:Vec3 Physics3DRigidBody:getTotalTorque() "
			],
			"description": "cocos2d::Vec3 Physics3DRigidBody::getTotalTorque() const"
		},
		 "bool TouchScriptHandlerEntry::init(bool isMultiTouches, int priority, bool swallowsTouches)": {
			"prefix": "bool TouchScriptHandlerEntry::init(bool isMultiTouches, int priority, bool swallowsTouches)",
			"body": [
				"TouchScriptHandlerEntry:init(${1:bool isMultiTouches},${2:int priority},${3:bool swallowsTouches})"
			],
			"description": "bool TouchScriptHandlerEntry::init(bool isMultiTouches, int priority, bool swallowsTouches)"
		},
		 "bool TextField::getInsertText()const": {
			"prefix": "bool TextField::getInsertText()const",
			"body": [
				"bool TextField:getInsertText()"
			],
			"description": "bool TextField::getInsertText()const"
		},
		 "void MciPlayer::Stop()": {
			"prefix": "void MciPlayer::Stop()",
			"body": [
				"void MciPlayer:Stop()"
			],
			"description": "void MciPlayer::Stop()"
		},
		 "void EditBoxImplWin::setFontColor(const Color4B& color)": {
			"prefix": "void EditBoxImplWin::setFontColor(const Color4B& color)",
			"body": [
				"EditBoxImplWin:setFontColor(${1:Color4B& color})"
			],
			"description": "void EditBoxImplWin::setFontColor(const Color4B& color)"
		},
		 "const char*  EditBoxImplWin::getText(void)": {
			"prefix": "const char*  EditBoxImplWin::getText(void)",
			"body": [
				"char*  EditBoxImplWin:getText(${1:void})"
			],
			"description": "const char*  EditBoxImplWin::getText(void)"
		},
		 "void ScrollView::removeScrollBar()": {
			"prefix": "void ScrollView::removeScrollBar()",
			"body": [
				"void ScrollView:removeScrollBar()"
			],
			"description": "void ScrollView::removeScrollBar()"
		},
		 "bool XmlSaxHander::VisitExit( const tinyxml2::XMLElement& element )": {
			"prefix": "bool XmlSaxHander::VisitExit( const tinyxml2::XMLElement& element )",
			"body": [
				"XmlSaxHander:VisitExit(${1:tinyxml2:XMLElement& element})"
			],
			"description": "bool XmlSaxHander::VisitExit( const tinyxml2::XMLElement& element )"
		},
		 "void Physics3DDebugDrawer::drawLine( const btVector3& from,const btVector3& to,const btVector3& color )": {
			"prefix": "void Physics3DDebugDrawer::drawLine( const btVector3& from,const btVector3& to,const btVector3& color )",
			"body": [
				"Physics3DDebugDrawer:drawLine(${1:btVector3& from},${2:btVector3& to},${3:btVector3& color})"
			],
			"description": "void Physics3DDebugDrawer::drawLine( const btVector3& from,const btVector3& to,const btVector3& color )"
		},
		 "void TransitionSlideInL::sceneOrder()": {
			"prefix": "void TransitionSlideInL::sceneOrder()",
			"body": [
				"void TransitionSlideInL:sceneOrder()"
			],
			"description": "void TransitionSlideInL::sceneOrder()"
		},
		 "void LoadingBar::setPercent(float percent)": {
			"prefix": "void LoadingBar::setPercent(float percent)",
			"body": [
				"LoadingBar:setPercent(${1:float percent})"
			],
			"description": "void LoadingBar::setPercent(float percent)"
		},
		 "const char* Properties::getId() const": {
			"prefix": "const char* Properties::getId() const",
			"body": [
				" char* Properties:getId() "
			],
			"description": "const char* Properties::getId() const"
		},
		 "void EditBoxImplAndroid::createNativeControl(const Rect& frame)": {
			"prefix": "void EditBoxImplAndroid::createNativeControl(const Rect& frame)",
			"body": [
				"EditBoxImplAndroid:createNativeControl(${1:Rect& frame})"
			],
			"description": "void EditBoxImplAndroid::createNativeControl(const Rect& frame)"
		},
		 "Animate3D* Animate3D::reverse() const": {
			"prefix": "Animate3D* Animate3D::reverse() const",
			"body": [
				"Animate3D* Animate3D:reverse() "
			],
			"description": "Animate3D* Animate3D::reverse() const"
		},
		 "void Node::updateRotationQuat()": {
			"prefix": "void Node::updateRotationQuat()",
			"body": [
				"void Node:updateRotationQuat()"
			],
			"description": "void Node::updateRotationQuat()"
		},
		 "void Downloader::batchDownloadSync(const DownloadUnits& units, const std::string& batchId/* = ""*/)": {
			"prefix": "void Downloader::batchDownloadSync(const DownloadUnits& units, const std::string& batchId/* = ""*/)",
			"body": [
				"Downloader:batchDownloadSync(${1:DownloadUnits& units},${2:std:string& batchId/* = ""*/})"
			],
			"description": "void Downloader::batchDownloadSync(const DownloadUnits& units, const std::string& batchId/* = ""*/)"
		},
		 "void AnimationCache::destroyInstance()": {
			"prefix": "void AnimationCache::destroyInstance()",
			"body": [
				"void AnimationCache:destroyInstance()"
			],
			"description": "void AnimationCache::destroyInstance()"
		},
		 "void PrettyPrinter::setIndentLevel(int indentLevel)": {
			"prefix": "void PrettyPrinter::setIndentLevel(int indentLevel)",
			"body": [
				"PrettyPrinter:setIndentLevel(${1:int indentLevel})"
			],
			"description": "void PrettyPrinter::setIndentLevel(int indentLevel)"
		},
		 "ArmatureNodeReader* ArmatureNodeReader::getInstance()": {
			"prefix": "ArmatureNodeReader* ArmatureNodeReader::getInstance()",
			"body": [
				"ArmatureNodeReader* ArmatureNodeReader:getInstance()"
			],
			"description": "ArmatureNodeReader* ArmatureNodeReader::getInstance()"
		},
		 "Terrain::Chunk * cocos2d::Terrain::getChunkByIndex(int x, int y) const": {
			"prefix": "Terrain::Chunk * cocos2d::Terrain::getChunkByIndex(int x, int y) const",
			"body": [
				"* cocos2d:Terrain:getChunkByIndex(${1:int x},${2:int y})"
			],
			"description": "Terrain::Chunk * cocos2d::Terrain::getChunkByIndex(int x, int y) const"
		},
		 "void cocos2d::NavMeshAgent::addTo(dtCrowd *crowed)": {
			"prefix": "void cocos2d::NavMeshAgent::addTo(dtCrowd *crowed)",
			"body": [
				"cocos2d:NavMeshAgent:addTo(${1:dtCrowd *crowed})"
			],
			"description": "void cocos2d::NavMeshAgent::addTo(dtCrowd *crowed)"
		},
		 "void VideoPlayer::stop()": {
			"prefix": "void VideoPlayer::stop()",
			"body": [
				"void VideoPlayer:stop()"
			],
			"description": "void VideoPlayer::stop()"
		},
		 "void AbstractCheckButton::backGroundTextureScaleChangedWithSize()": {
			"prefix": "void AbstractCheckButton::backGroundTextureScaleChangedWithSize()",
			"body": [
				"void AbstractCheckButton:backGroundTextureScaleChangedWithSize()"
			],
			"description": "void AbstractCheckButton::backGroundTextureScaleChangedWithSize()"
		},
		 "int MenuItemFont::getFontSizeObj() const": {
			"prefix": "int MenuItemFont::getFontSizeObj() const",
			"body": [
				"int MenuItemFont:getFontSizeObj() "
			],
			"description": "int MenuItemFont::getFontSizeObj() const"
		},
		 "const Size& LabelTTF::getContentSize() const": {
			"prefix": "const Size& LabelTTF::getContentSize() const",
			"body": [
				" Size& LabelTTF:getContentSize() "
			],
			"description": "const Size& LabelTTF::getContentSize() const"
		},
		 "bool UICCTextField::isPasswordEnabled()const": {
			"prefix": "bool UICCTextField::isPasswordEnabled()const",
			"body": [
				"bool UICCTextField:isPasswordEnabled()"
			],
			"description": "bool UICCTextField::isPasswordEnabled()const"
		},
		 "GLint GLProgram::getUniformLocationForName(const char* name) const": {
			"prefix": "GLint GLProgram::getUniformLocationForName(const char* name) const",
			"body": [
				"GLProgram:getUniformLocationForName(${1:char* name})"
			],
			"description": "GLint GLProgram::getUniformLocationForName(const char* name) const"
		},
		 "EaseCubicActionInOut* EaseCubicActionInOut::clone() const": {
			"prefix": "EaseCubicActionInOut* EaseCubicActionInOut::clone() const",
			"body": [
				"EaseCubicActionInOut* EaseCubicActionInOut:clone() "
			],
			"description": "EaseCubicActionInOut* EaseCubicActionInOut::clone() const"
		},
		 "void SocketIO::addSocket(const std::string& uri, SIOClientImpl* socket)": {
			"prefix": "void SocketIO::addSocket(const std::string& uri, SIOClientImpl* socket)",
			"body": [
				"SocketIO:addSocket(${1:std:string& uri},${2:SIOClientImpl* socket})"
			],
			"description": "void SocketIO::addSocket(const std::string& uri, SIOClientImpl* socket)"
		},
		 "void SimpleAudioEngine::end()": {
			"prefix": "void SimpleAudioEngine::end()",
			"body": [
				"void SimpleAudioEngine:end()"
			],
			"description": "void SimpleAudioEngine::end()"
		},
		 "void Physics3DRigidBody::applyCentralForce( const cocos2d::Vec3& force )": {
			"prefix": "void Physics3DRigidBody::applyCentralForce( const cocos2d::Vec3& force )",
			"body": [
				"Physics3DRigidBody:applyCentralForce(${1:cocos2d:Vec3& force})"
			],
			"description": "void Physics3DRigidBody::applyCentralForce( const cocos2d::Vec3& force )"
		},
		 "void SpriteLoader::onHandlePropTypeFlip(Node * pNode, Node * pParent, const char * pPropertyName, bool * pFlip, CCBReader * ccbReader)": {
			"prefix": "void SpriteLoader::onHandlePropTypeFlip(Node * pNode, Node * pParent, const char * pPropertyName, bool * pFlip, CCBReader * ccbReader)",
			"body": [
				"SpriteLoader:onHandlePropTypeFlip(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:bool * pFlip},${5:CCBReader * ccbReader})"
			],
			"description": "void SpriteLoader::onHandlePropTypeFlip(Node * pNode, Node * pParent, const char * pPropertyName, bool * pFlip, CCBReader * ccbReader)"
		},
		 "void FileUtils::setPopupNotify(bool notify)": {
			"prefix": "void FileUtils::setPopupNotify(bool notify)",
			"body": [
				"FileUtils:setPopupNotify(${1:bool notify})"
			],
			"description": "void FileUtils::setPopupNotify(bool notify)"
		},
		 "float Label::getAdditionalKerning() const": {
			"prefix": "float Label::getAdditionalKerning() const",
			"body": [
				"float Label:getAdditionalKerning() "
			],
			"description": "float Label::getAdditionalKerning() const"
		},
		 "void Skybox::draw(Renderer* renderer, const Mat4& transform, uint32_t flags)": {
			"prefix": "void Skybox::draw(Renderer* renderer, const Mat4& transform, uint32_t flags)",
			"body": [
				"Skybox:draw(${1:Renderer* renderer},${2:Mat4& transform},${3:uint32_t flags})"
			],
			"description": "void Skybox::draw(Renderer* renderer, const Mat4& transform, uint32_t flags)"
		},
		 "void VolatileTextureMgr::setTexParameters(Texture2D *t, const Texture2D::TexParams &texParams)": {
			"prefix": "void VolatileTextureMgr::setTexParameters(Texture2D *t, const Texture2D::TexParams &texParams)",
			"body": [
				"VolatileTextureMgr:setTexParameters(${1:Texture2D *t},${2:Texture2D:TexParams &texParams})"
			],
			"description": "void VolatileTextureMgr::setTexParameters(Texture2D *t, const Texture2D::TexParams &texParams)"
		},
		 "bool Physics3DRigidBody::init(Physics3DRigidBodyDes* info)": {
			"prefix": "bool Physics3DRigidBody::init(Physics3DRigidBodyDes* info)",
			"body": [
				"Physics3DRigidBody:init(${1:Physics3DRigidBodyDes* info})"
			],
			"description": "bool Physics3DRigidBody::init(Physics3DRigidBodyDes* info)"
		},
		 "void CSLoader::init()": {
			"prefix": "void CSLoader::init()",
			"body": [
				"void CSLoader:init()"
			],
			"description": "void CSLoader::init()"
		},
		 "ActionInterval* TransitionFadeTR:: easeActionWithAction(ActionInterval* action)": {
			"prefix": "ActionInterval* TransitionFadeTR:: easeActionWithAction(ActionInterval* action)",
			"body": [
				"TransitionFadeTR: easeActionWithAction(${1:ActionInterval* action})"
			],
			"description": "ActionInterval* TransitionFadeTR:: easeActionWithAction(ActionInterval* action)"
		},
		 "void NinePatchImageParser::setSpriteFrameInfo(Image* image, const cocos2d::Rect& frameRect, bool rotated )": {
			"prefix": "void NinePatchImageParser::setSpriteFrameInfo(Image* image, const cocos2d::Rect& frameRect, bool rotated )",
			"body": [
				"NinePatchImageParser:setSpriteFrameInfo(${1:Image* image},${2:cocos2d:Rect& frameRect},${3:bool rotated})"
			],
			"description": "void NinePatchImageParser::setSpriteFrameInfo(Image* image, const cocos2d::Rect& frameRect, bool rotated )"
		},
		 "void GLProgramState::setUniformMat4(GLint uniformLocation, const Mat4& value)": {
			"prefix": "void GLProgramState::setUniformMat4(GLint uniformLocation, const Mat4& value)",
			"body": [
				"GLProgramState:setUniformMat4(${1:GLint uniformLocation},${2:Mat4& value})"
			],
			"description": "void GLProgramState::setUniformMat4(GLint uniformLocation, const Mat4& value)"
		},
		 "void EditBoxImplCommon::onEndEditing(const std::string& text)": {
			"prefix": "void EditBoxImplCommon::onEndEditing(const std::string& text)",
			"body": [
				"EditBoxImplCommon:onEndEditing(${1:std:string& text})"
			],
			"description": "void EditBoxImplCommon::onEndEditing(const std::string& text)"
		},
		 "void Tween::setBetween(FrameData *from, FrameData *to, bool limit)": {
			"prefix": "void Tween::setBetween(FrameData *from, FrameData *to, bool limit)",
			"body": [
				"Tween:setBetween(${1:FrameData *from},${2:FrameData *to},${3:bool limit})"
			],
			"description": "void Tween::setBetween(FrameData *from, FrameData *to, bool limit)"
		},
		 "void InnerActionFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void InnerActionFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"InnerActionFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void InnerActionFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void ArmatureAnimation::stop()": {
			"prefix": "void ArmatureAnimation::stop()",
			"body": [
				"void ArmatureAnimation:stop()"
			],
			"description": "void ArmatureAnimation::stop()"
		},
		 "void ParticleSystemQuadLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)": {
			"prefix": "void ParticleSystemQuadLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)",
			"body": [
				"ParticleSystemQuadLoader:onHandlePropTypePoint(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Vec2 pPoint},${5:CCBReader * ccbReader})"
			],
			"description": "void ParticleSystemQuadLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)"
		},
		 "std::vector<Vec2> AutoPolygon::trace(const Rect& rect, const float& threshold)": {
			"prefix": "std::vector<Vec2> AutoPolygon::trace(const Rect& rect, const float& threshold)",
			"body": [
				"AutoPolygon:trace(${1:Rect& rect},${2:float& threshold})"
			],
			"description": "std::vector<Vec2> AutoPolygon::trace(const Rect& rect, const float& threshold)"
		},
		 "GLuint Mesh::getIndexBuffer() const": {
			"prefix": "GLuint Mesh::getIndexBuffer() const",
			"body": [
				"GLuint Mesh:getIndexBuffer() "
			],
			"description": "GLuint Mesh::getIndexBuffer() const"
		},
		 "int HttpClient::getTimeoutForConnect()": {
			"prefix": "int HttpClient::getTimeoutForConnect()",
			"body": [
				"int HttpClient:getTimeoutForConnect()"
			],
			"description": "int HttpClient::getTimeoutForConnect()"
		},
		 "void NavMeshDebugDraw::begin(duDebugDrawPrimitives prim, float size /*= 1.0f*/)": {
			"prefix": "void NavMeshDebugDraw::begin(duDebugDrawPrimitives prim, float size /*= 1.0f*/)",
			"body": [
				"NavMeshDebugDraw:begin(${1:duDebugDrawPrimitives prim},${2:float size /*= 1.0f*/})"
			],
			"description": "void NavMeshDebugDraw::begin(duDebugDrawPrimitives prim, float size /*= 1.0f*/)"
		},
		 "void Node::setCameraMask(unsigned short mask, bool applyChildren)": {
			"prefix": "void Node::setCameraMask(unsigned short mask, bool applyChildren)",
			"body": [
				"Node:setCameraMask(${1:unsigned short mask},${2:bool applyChildren})"
			],
			"description": "void Node::setCameraMask(unsigned short mask, bool applyChildren)"
		},
		 "void Image::setPVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)": {
			"prefix": "void Image::setPVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)",
			"body": [
				"Image:setPVRImagesHavePremultipliedAlpha(${1:bool haveAlphaPremultiplied})"
			],
			"description": "void Image::setPVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)"
		},
		 "AnimationData *DataReaderHelper::decodeAnimation(tinyxml2::XMLElement *animationXML, DataInfo *dataInfo)": {
			"prefix": "AnimationData *DataReaderHelper::decodeAnimation(tinyxml2::XMLElement *animationXML, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeAnimation(${1:tinyxml2:XMLElement *animationXML},${2:DataInfo *dataInfo})"
			],
			"description": "AnimationData *DataReaderHelper::decodeAnimation(tinyxml2::XMLElement *animationXML, DataInfo *dataInfo)"
		},
		 "void QuadCommand::useMaterial() const": {
			"prefix": "void QuadCommand::useMaterial() const",
			"body": [
				"void QuadCommand:useMaterial() "
			],
			"description": "void QuadCommand::useMaterial() const"
		},
		 "void DownloaderImpl::setConnectionTimeout(int connectionTimeout)": {
			"prefix": "void DownloaderImpl::setConnectionTimeout(int connectionTimeout)",
			"body": [
				"DownloaderImpl:setConnectionTimeout(${1:int connectionTimeout})"
			],
			"description": "void DownloaderImpl::setConnectionTimeout(int connectionTimeout)"
		},
		 "float Layout::calculateFarthestDistance(cocos2d::ui::Widget *baseWidget)": {
			"prefix": "float Layout::calculateFarthestDistance(cocos2d::ui::Widget *baseWidget)",
			"body": [
				"Layout:calculateFarthestDistance(${1:cocos2d:ui:Widget *baseWidget})"
			],
			"description": "float Layout::calculateFarthestDistance(cocos2d::ui::Widget *baseWidget)"
		},
		 "int FastLZCompressor::maxCompressedSize(const int bufferSize)": {
			"prefix": "int FastLZCompressor::maxCompressedSize(const int bufferSize)",
			"body": [
				"FastLZCompressor:maxCompressedSize(${1:int bufferSize})"
			],
			"description": "int FastLZCompressor::maxCompressedSize(const int bufferSize)"
		},
		 "void Physics3DRigidBody::setKinematic(bool kinematic)": {
			"prefix": "void Physics3DRigidBody::setKinematic(bool kinematic)",
			"body": [
				"Physics3DRigidBody:setKinematic(${1:bool kinematic})"
			],
			"description": "void Physics3DRigidBody::setKinematic(bool kinematic)"
		},
		 "void EditBoxImplAndroid::updateNativeFrame(const Rect& rect)": {
			"prefix": "void EditBoxImplAndroid::updateNativeFrame(const Rect& rect)",
			"body": [
				"EditBoxImplAndroid:updateNativeFrame(${1:Rect& rect})"
			],
			"description": "void EditBoxImplAndroid::updateNativeFrame(const Rect& rect)"
		},
		 "VertexBuffer* VertexData::getStreamBuffer(int semantic) const": {
			"prefix": "VertexBuffer* VertexData::getStreamBuffer(int semantic) const",
			"body": [
				"VertexData:getStreamBuffer(${1:int semantic})"
			],
			"description": "VertexBuffer* VertexData::getStreamBuffer(int semantic) const"
		},
		 "void ParticleSystemQuad::updateQuadWithParticle(tParticle* particle, const Vec2& newPosition)": {
			"prefix": "void ParticleSystemQuad::updateQuadWithParticle(tParticle* particle, const Vec2& newPosition)",
			"body": [
				"ParticleSystemQuad:updateQuadWithParticle(${1:tParticle* particle},${2:Vec2& newPosition})"
			],
			"description": "void ParticleSystemQuad::updateQuadWithParticle(tParticle* particle, const Vec2& newPosition)"
		},
		 "__CCCallFuncO * __CCCallFuncO::create(Ref* selectorTarget, SEL_CallFuncO selector, Ref* object)": {
			"prefix": "__CCCallFuncO * __CCCallFuncO::create(Ref* selectorTarget, SEL_CallFuncO selector, Ref* object)",
			"body": [
				"* __CCCallFuncO:create(${1:Ref* selectorTarget},${2:SEL_CallFuncO selector},${3:Ref* object})"
			],
			"description": "__CCCallFuncO * __CCCallFuncO::create(Ref* selectorTarget, SEL_CallFuncO selector, Ref* object)"
		},
		 "void TextField::setTextHorizontalAlignment(TextHAlignment alignment)": {
			"prefix": "void TextField::setTextHorizontalAlignment(TextHAlignment alignment)",
			"body": [
				"TextField:setTextHorizontalAlignment(${1:TextHAlignment alignment})"
			],
			"description": "void TextField::setTextHorizontalAlignment(TextHAlignment alignment)"
		},
		 "Data FileUtils::getDataFromFile(const std::string& filename)": {
			"prefix": "Data FileUtils::getDataFromFile(const std::string& filename)",
			"body": [
				"FileUtils:getDataFromFile(${1:std:string& filename})"
			],
			"description": "Data FileUtils::getDataFromFile(const std::string& filename)"
		},
		 "int Layer::executeScriptTouchesHandler(EventTouch::EventCode eventType, const std::vector<Touch*>& touches, Event* event)": {
			"prefix": "int Layer::executeScriptTouchesHandler(EventTouch::EventCode eventType, const std::vector<Touch*>& touches, Event* event)",
			"body": [
				"Layer:executeScriptTouchesHandler(${1:EventTouch:EventCode eventType},${2:std:vector<Touch*>& touches},${3:Event* event})"
			],
			"description": "int Layer::executeScriptTouchesHandler(EventTouch::EventCode eventType, const std::vector<Touch*>& touches, Event* event)"
		},
		 "void RenderState::StateBlock::bind()": {
			"prefix": "void RenderState::StateBlock::bind()",
			"body": [
				"void RenderState:StateBlock:bind()"
			],
			"description": "void RenderState::StateBlock::bind()"
		},
		 "bool Skin::initWithFile(const std::string& filename)": {
			"prefix": "bool Skin::initWithFile(const std::string& filename)",
			"body": [
				"Skin:initWithFile(${1:std:string& filename})"
			],
			"description": "bool Skin::initWithFile(const std::string& filename)"
		},
		 "std::string classType)": {
			"prefix": "std::string classType)",
			"body": [
				"std:string classType)"
			],
			"description": "std::string classType)"
		},
		 "ParticleFireworks* ParticleFireworks::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleFireworks* ParticleFireworks::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleFireworks:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleFireworks* ParticleFireworks::createWithTotalParticles(int numberOfParticles)"
		},
		 "void GLProgramState::setUniformCallback(GLint uniformLocation, const std::function<void(GLProgram*, Uniform*)> &callback)": {
			"prefix": "void GLProgramState::setUniformCallback(GLint uniformLocation, const std::function<void(GLProgram*, Uniform*)> &callback)",
			"body": [
				"GLProgramState:setUniformCallback(${1:GLint uniformLocation},${2:std:function<void(GLProgram*},${3:Uniform*})"
			],
			"description": "void GLProgramState::setUniformCallback(GLint uniformLocation, const std::function<void(GLProgram*, Uniform*)> &callback)"
		},
		 "ssize_t Bone3D::getChildBoneCount() const": {
			"prefix": "ssize_t Bone3D::getChildBoneCount() const",
			"body": [
				"ssize_t Bone3D:getChildBoneCount() "
			],
			"description": "ssize_t Bone3D::getChildBoneCount() const"
		},
		 "void Grid3D::calculateVertexPoints(void)": {
			"prefix": "void Grid3D::calculateVertexPoints(void)",
			"body": [
				"Grid3D:calculateVertexPoints(${1:void})"
			],
			"description": "void Grid3D::calculateVertexPoints(void)"
		},
		 "void GLProgramState::setUniformFloat(const std::string& uniformName, float value)": {
			"prefix": "void GLProgramState::setUniformFloat(const std::string& uniformName, float value)",
			"body": [
				"GLProgramState:setUniformFloat(${1:std:string& uniformName},${2:float value})"
			],
			"description": "void GLProgramState::setUniformFloat(const std::string& uniformName, float value)"
		},
		 "TransitionProgressVertical* TransitionProgressVertical::create(float t, Scene* scene)": {
			"prefix": "TransitionProgressVertical* TransitionProgressVertical::create(float t, Scene* scene)",
			"body": [
				"TransitionProgressVertical:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionProgressVertical* TransitionProgressVertical::create(float t, Scene* scene)"
		},
		 "void Ref::retain()": {
			"prefix": "void Ref::retain()",
			"body": [
				"void Ref:retain()"
			],
			"description": "void Ref::retain()"
		},
		 "void TimerScriptHandler::trigger(float dt)": {
			"prefix": "void TimerScriptHandler::trigger(float dt)",
			"body": [
				"TimerScriptHandler:trigger(${1:float dt})"
			],
			"description": "void TimerScriptHandler::trigger(float dt)"
		},
		 "std::string ZipFile::getNextFilename()": {
			"prefix": "std::string ZipFile::getNextFilename()",
			"body": [
				"std:string ZipFile:getNextFilename()"
			],
			"description": "std::string ZipFile::getNextFilename()"
		},
		 "const Color3B& Layout::getBackGroundStartColor()const": {
			"prefix": "const Color3B& Layout::getBackGroundStartColor()const",
			"body": [
				" Color3B& Layout:getBackGroundStartColor()"
			],
			"description": "const Color3B& Layout::getBackGroundStartColor()const"
		},
		 "int Properties::getInt(const char* name) const": {
			"prefix": "int Properties::getInt(const char* name) const",
			"body": [
				"Properties:getInt(${1:char* name})"
			],
			"description": "int Properties::getInt(const char* name) const"
		},
		 "Scene* Scene::createWithSize(const Size& size)": {
			"prefix": "Scene* Scene::createWithSize(const Size& size)",
			"body": [
				"Scene:createWithSize(${1:Size& size})"
			],
			"description": "Scene* Scene::createWithSize(const Size& size)"
		},
		 "void ComAudio::stopBackgroundMusic(bool bReleaseData)": {
			"prefix": "void ComAudio::stopBackgroundMusic(bool bReleaseData)",
			"body": [
				"ComAudio:stopBackgroundMusic(${1:bool bReleaseData})"
			],
			"description": "void ComAudio::stopBackgroundMusic(bool bReleaseData)"
		},
		 "void LayerGradient::setStartColor(const Color3B& color)": {
			"prefix": "void LayerGradient::setStartColor(const Color3B& color)",
			"body": [
				"LayerGradient:setStartColor(${1:Color3B& color})"
			],
			"description": "void LayerGradient::setStartColor(const Color3B& color)"
		},
		 "void ProgressTimer::updateProgress(void)": {
			"prefix": "void ProgressTimer::updateProgress(void)",
			"body": [
				"ProgressTimer:updateProgress(${1:void})"
			],
			"description": "void ProgressTimer::updateProgress(void)"
		},
		 "Physics3D6DofConstraint* Physics3D6DofConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInA, const cocos2d::Mat4& frameInB, bool useLinearReferenceFrameA)": {
			"prefix": "Physics3D6DofConstraint* Physics3D6DofConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInA, const cocos2d::Mat4& frameInB, bool useLinearReferenceFrameA)",
			"body": [
				"Physics3D6DofConstraint:create(${1:Physics3DRigidBody* rbA},${2:Physics3DRigidBody* rbB},${3:cocos2d:Mat4& frameInA},${4:cocos2d:Mat4& frameInB},${5:bool useLinearReferenceFrameA})"
			],
			"description": "Physics3D6DofConstraint* Physics3D6DofConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInA, const cocos2d::Mat4& frameInB, bool useLinearReferenceFrameA)"
		},
		 "TransitionSlideInL* TransitionSlideInL::create(float t, Scene* scene)": {
			"prefix": "TransitionSlideInL* TransitionSlideInL::create(float t, Scene* scene)",
			"body": [
				"TransitionSlideInL:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionSlideInL* TransitionSlideInL::create(float t, Scene* scene)"
		},
		 "void Terrain::Chunk::generate(int imgWidth, int imageHei, int m, int n, const unsigned char * data)": {
			"prefix": "void Terrain::Chunk::generate(int imgWidth, int imageHei, int m, int n, const unsigned char * data)",
			"body": [
				"Terrain:Chunk:generate(${1:int imgWidth},${2:int imageHei},${3:int m},${4:int n},${5:unsigned char * data})"
			],
			"description": "void Terrain::Chunk::generate(int imgWidth, int imageHei, int m, int n, const unsigned char * data)"
		},
		 "CCBRotateTo* CCBRotateTo::clone() const": {
			"prefix": "CCBRotateTo* CCBRotateTo::clone() const",
			"body": [
				"CCBRotateTo* CCBRotateTo:clone() "
			],
			"description": "CCBRotateTo* CCBRotateTo::clone() const"
		},
		 "int GroupCommandManager::getGroupID()": {
			"prefix": "int GroupCommandManager::getGroupID()",
			"body": [
				"int GroupCommandManager:getGroupID()"
			],
			"description": "int GroupCommandManager::getGroupID()"
		},
		 "void Node::setScaleX(float scaleX)": {
			"prefix": "void Node::setScaleX(float scaleX)",
			"body": [
				"Node:setScaleX(${1:float scaleX})"
			],
			"description": "void Node::setScaleX(float scaleX)"
		},
		 "void ActionInterval::startWithTarget(Node *target)": {
			"prefix": "void ActionInterval::startWithTarget(Node *target)",
			"body": [
				"ActionInterval:startWithTarget(${1:Node *target})"
			],
			"description": "void ActionInterval::startWithTarget(Node *target)"
		},
		 "bool RepeatForever::isDone() const": {
			"prefix": "bool RepeatForever::isDone() const",
			"body": [
				"bool RepeatForever:isDone() "
			],
			"description": "bool RepeatForever::isDone() const"
		},
		 "void BezierTo::startWithTarget(Node *target)": {
			"prefix": "void BezierTo::startWithTarget(Node *target)",
			"body": [
				"BezierTo:startWithTarget(${1:Node *target})"
			],
			"description": "void BezierTo::startWithTarget(Node *target)"
		},
		 "void MotionStreak::tintWithColor(const Color3B& colors)": {
			"prefix": "void MotionStreak::tintWithColor(const Color3B& colors)",
			"body": [
				"MotionStreak:tintWithColor(${1:Color3B& colors})"
			],
			"description": "void MotionStreak::tintWithColor(const Color3B& colors)"
		},
		 "CCBRotateXTo* CCBRotateXTo::reverse() const": {
			"prefix": "CCBRotateXTo* CCBRotateXTo::reverse() const",
			"body": [
				"CCBRotateXTo* CCBRotateXTo:reverse() "
			],
			"description": "CCBRotateXTo* CCBRotateXTo::reverse() const"
		},
		 "void PhysicsJointGroove::setGrooveA(const Vec2& grooveA)": {
			"prefix": "void PhysicsJointGroove::setGrooveA(const Vec2& grooveA)",
			"body": [
				"PhysicsJointGroove:setGrooveA(${1:Vec2& grooveA})"
			],
			"description": "void PhysicsJointGroove::setGrooveA(const Vec2& grooveA)"
		},
		 "void* operator new(std::size_t size)": {
			"prefix": "void* operator new(std::size_t size)",
			"body": [
				"operator new(${1:std:size_t size})"
			],
			"description": "void* operator new(std::size_t size)"
		},
		 "void TextFieldTTF::deleteBackward()": {
			"prefix": "void TextFieldTTF::deleteBackward()",
			"body": [
				"void TextFieldTTF:deleteBackward()"
			],
			"description": "void TextFieldTTF::deleteBackward()"
		},
		 "void UICCTextField::setPasswordEnabled(bool enable)": {
			"prefix": "void UICCTextField::setPasswordEnabled(bool enable)",
			"body": [
				"UICCTextField:setPasswordEnabled(${1:bool enable})"
			],
			"description": "void UICCTextField::setPasswordEnabled(bool enable)"
		},
		 "void CCBAnimationManager::runAnimations(int nSeqId, float fTweenDuraiton)": {
			"prefix": "void CCBAnimationManager::runAnimations(int nSeqId, float fTweenDuraiton)",
			"body": [
				"CCBAnimationManager:runAnimations(${1:int nSeqId},${2:float fTweenDuraiton})"
			],
			"description": "void CCBAnimationManager::runAnimations(int nSeqId, float fTweenDuraiton)"
		},
		 "void PointArray::reverseInline()": {
			"prefix": "void PointArray::reverseInline()",
			"body": [
				"void PointArray:reverseInline()"
			],
			"description": "void PointArray::reverseInline()"
		},
		 "void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue)": {
			"prefix": "void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue)",
			"body": [
				"RenderTexture:beginWithClear(${1:float r},${2:float g},${3:float b},${4:float a},${5:float depthValue})"
			],
			"description": "void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue)"
		},
		 "bool __Array::init()": {
			"prefix": "bool __Array::init()",
			"body": [
				"bool __Array:init()"
			],
			"description": "bool __Array::init()"
		},
		 "void TimerScriptHandler::cancel()": {
			"prefix": "void TimerScriptHandler::cancel()",
			"body": [
				"void TimerScriptHandler:cancel()"
			],
			"description": "void TimerScriptHandler::cancel()"
		},
		 "EaseElasticOut* EaseElasticOut::create(ActionInterval *action)": {
			"prefix": "EaseElasticOut* EaseElasticOut::create(ActionInterval *action)",
			"body": [
				"EaseElasticOut:create(${1:ActionInterval *action})"
			],
			"description": "EaseElasticOut* EaseElasticOut::create(ActionInterval *action)"
		},
		 "void LayerLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)": {
			"prefix": "void LayerLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)",
			"body": [
				"LayerLoader:onHandlePropTypeCheck(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:bool pCheck},${5:CCBReader * ccbReader})"
			],
			"description": "void LayerLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)"
		},
		 "float Rect::getMinY() const": {
			"prefix": "float Rect::getMinY() const",
			"body": [
				"float Rect:getMinY() "
			],
			"description": "float Rect::getMinY() const"
		},
		 "EditBox* EditBox::create(const cocos2d::Size &size, cocos2d::ui::Scale9Sprite *normalSprite, ui::Scale9Sprite *pressedSprite, Scale9Sprite* disabledSprite)": {
			"prefix": "EditBox* EditBox::create(const cocos2d::Size &size, cocos2d::ui::Scale9Sprite *normalSprite, ui::Scale9Sprite *pressedSprite, Scale9Sprite* disabledSprite)",
			"body": [
				"EditBox:create(${1:cocos2d:Size &size},${2:cocos2d:ui:Scale9Sprite *normalSprite},${3:ui:Scale9Sprite *pressedSprite},${4:Scale9Sprite* disabledSprite})"
			],
			"description": "EditBox* EditBox::create(const cocos2d::Size &size, cocos2d::ui::Scale9Sprite *normalSprite, ui::Scale9Sprite *pressedSprite, Scale9Sprite* disabledSprite)"
		},
		 "void PhysicsShape::setSensor(bool sensor)": {
			"prefix": "void PhysicsShape::setSensor(bool sensor)",
			"body": [
				"PhysicsShape:setSensor(${1:bool sensor})"
			],
			"description": "void PhysicsShape::setSensor(bool sensor)"
		},
		 "void SkeletonAnimation::setMix (const std::string& fromAnimation, const std::string& toAnimation, float duration)": {
			"prefix": "void SkeletonAnimation::setMix (const std::string& fromAnimation, const std::string& toAnimation, float duration)",
			"body": [
				"SkeletonAnimation:setMix (${1:std:string& fromAnimation},${2:std:string& toAnimation},${3:float duration})"
			],
			"description": "void SkeletonAnimation::setMix (const std::string& fromAnimation, const std::string& toAnimation, float duration)"
		},
		 "BoneData *DataReaderHelper::decodeBone(tinyxml2::XMLElement *boneXML, tinyxml2::XMLElement *parentXml, DataInfo *dataInfo)": {
			"prefix": "BoneData *DataReaderHelper::decodeBone(tinyxml2::XMLElement *boneXML, tinyxml2::XMLElement *parentXml, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeBone(${1:tinyxml2:XMLElement *boneXML},${2:tinyxml2:XMLElement *parentXml},${3:DataInfo *dataInfo})"
			],
			"description": "BoneData *DataReaderHelper::decodeBone(tinyxml2::XMLElement *boneXML, tinyxml2::XMLElement *parentXml, DataInfo *dataInfo)"
		},
		 "LayerMultiplex* LayerMultiplex::createWithArray(const Vector<Layer*>& arrayOfLayers)": {
			"prefix": "LayerMultiplex* LayerMultiplex::createWithArray(const Vector<Layer*>& arrayOfLayers)",
			"body": [
				"LayerMultiplex:createWithArray(${1:Vector<Layer*>& arrayOfLayers})"
			],
			"description": "LayerMultiplex* LayerMultiplex::createWithArray(const Vector<Layer*>& arrayOfLayers)"
		},
		 "void Slider::setCapInsetProgressBarRebderer(const Rect &capInsets)": {
			"prefix": "void Slider::setCapInsetProgressBarRebderer(const Rect &capInsets)",
			"body": [
				"Slider:setCapInsetProgressBarRebderer(${1:Rect &capInsets})"
			],
			"description": "void Slider::setCapInsetProgressBarRebderer(const Rect &capInsets)"
		},
		 "void Console::commandExit(int fd, const std::string &args)": {
			"prefix": "void Console::commandExit(int fd, const std::string &args)",
			"body": [
				"Console:commandExit(${1:int fd},${2:std:string &args})"
			],
			"description": "void Console::commandExit(int fd, const std::string &args)"
		},
		 "void OBB::reset()": {
			"prefix": "void OBB::reset()",
			"body": [
				"void OBB:reset()"
			],
			"description": "void OBB::reset()"
		},
		 "void TextField::setTouchAreaEnabled(bool enable)": {
			"prefix": "void TextField::setTouchAreaEnabled(bool enable)",
			"body": [
				"TextField:setTouchAreaEnabled(${1:bool enable})"
			],
			"description": "void TextField::setTouchAreaEnabled(bool enable)"
		},
		 "bool ActionTimelineNode::init()": {
			"prefix": "bool ActionTimelineNode::init()",
			"body": [
				"bool ActionTimelineNode:init()"
			],
			"description": "bool ActionTimelineNode::init()"
		},
		 "void Configuration::purgeConfiguration()": {
			"prefix": "void Configuration::purgeConfiguration()",
			"body": [
				"void Configuration:purgeConfiguration()"
			],
			"description": "void Configuration::purgeConfiguration()"
		},
		 "void ActionMoveFrame::setPosition(Vec2 pos)": {
			"prefix": "void ActionMoveFrame::setPosition(Vec2 pos)",
			"body": [
				"ActionMoveFrame:setPosition(${1:Vec2 pos})"
			],
			"description": "void ActionMoveFrame::setPosition(Vec2 pos)"
		},
		 "EaseElasticOut* EaseElasticOut::clone() const": {
			"prefix": "EaseElasticOut* EaseElasticOut::clone() const",
			"body": [
				"EaseElasticOut* EaseElasticOut:clone() "
			],
			"description": "EaseElasticOut* EaseElasticOut::clone() const"
		},
		 "NavMesh* NavMesh::create(const std::string &navFilePath, const std::string &geomFilePath)": {
			"prefix": "NavMesh* NavMesh::create(const std::string &navFilePath, const std::string &geomFilePath)",
			"body": [
				"NavMesh:create(${1:std:string &navFilePath},${2:std:string &geomFilePath})"
			],
			"description": "NavMesh* NavMesh::create(const std::string &navFilePath, const std::string &geomFilePath)"
		},
		 "void Texture2D::convertI8ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertI8ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertI8ToRGBA8888(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertI8ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "Offset<flatbuffers::PointFrame> FlatBuffersSerialize::createPointFrame(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<flatbuffers::PointFrame> FlatBuffersSerialize::createPointFrame(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createPointFrame(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<flatbuffers::PointFrame> FlatBuffersSerialize::createPointFrame(const tinyxml2::XMLElement *objectData)"
		},
		 "std::string Layer::getDescription() const": {
			"prefix": "std::string Layer::getDescription() const",
			"body": [
				"std:string Layer:getDescription() "
			],
			"description": "std::string Layer::getDescription() const"
		},
		 "void TransitionSlideInL::onEnter()": {
			"prefix": "void TransitionSlideInL::onEnter()",
			"body": [
				"void TransitionSlideInL:onEnter()"
			],
			"description": "void TransitionSlideInL::onEnter()"
		},
		 "void Mat4::subtract(const Mat4& mat)": {
			"prefix": "void Mat4::subtract(const Mat4& mat)",
			"body": [
				"Mat4:subtract(${1:Mat4& mat})"
			],
			"description": "void Mat4::subtract(const Mat4& mat)"
		},
		 "AccelAmplitude* AccelAmplitude::clone() const": {
			"prefix": "AccelAmplitude* AccelAmplitude::clone() const",
			"body": [
				"AccelAmplitude* AccelAmplitude:clone() "
			],
			"description": "AccelAmplitude* AccelAmplitude::clone() const"
		},
		 "Layout* Layout::create()": {
			"prefix": "Layout* Layout::create()",
			"body": [
				"Layout* Layout:create()"
			],
			"description": "Layout* Layout::create()"
		},
		 "ZipFile *ZipFile::createWithBuffer(const void* buffer, uLong size)": {
			"prefix": "ZipFile *ZipFile::createWithBuffer(const void* buffer, uLong size)",
			"body": [
				"*ZipFile:createWithBuffer(${1:void* buffer},${2:uLong size})"
			],
			"description": "ZipFile *ZipFile::createWithBuffer(const void* buffer, uLong size)"
		},
		 "void Layout::updateBackGroundImageRGBA()": {
			"prefix": "void Layout::updateBackGroundImageRGBA()",
			"body": [
				"void Layout:updateBackGroundImageRGBA()"
			],
			"description": "void Layout::updateBackGroundImageRGBA()"
		},
		 "void TriggerMng::dispatchEvent(cocos2d::EventCustom* tEvent)": {
			"prefix": "void TriggerMng::dispatchEvent(cocos2d::EventCustom* tEvent)",
			"body": [
				"TriggerMng:dispatchEvent(${1:cocos2d:EventCustom* tEvent})"
			],
			"description": "void TriggerMng::dispatchEvent(cocos2d::EventCustom* tEvent)"
		},
		 "float PhysicsJointGear::getPhase() const": {
			"prefix": "float PhysicsJointGear::getPhase() const",
			"body": [
				"float PhysicsJointGear:getPhase() "
			],
			"description": "float PhysicsJointGear::getPhase() const"
		},
		 "void Director::end()": {
			"prefix": "void Director::end()",
			"body": [
				"void Director:end()"
			],
			"description": "void Director::end()"
		},
		 "void PhysicsContactPreSolve::setSurfaceVelocity(const Vect& velocity)": {
			"prefix": "void PhysicsContactPreSolve::setSurfaceVelocity(const Vect& velocity)",
			"body": [
				"PhysicsContactPreSolve:setSurfaceVelocity(${1:Vect& velocity})"
			],
			"description": "void PhysicsContactPreSolve::setSurfaceVelocity(const Vect& velocity)"
		},
		 "void ListView::remedyLayoutParameter(Widget *item)": {
			"prefix": "void ListView::remedyLayoutParameter(Widget *item)",
			"body": [
				"ListView:remedyLayoutParameter(${1:Widget *item})"
			],
			"description": "void ListView::remedyLayoutParameter(Widget *item)"
		},
		 "std::string Technique::getName() const": {
			"prefix": "std::string Technique::getName() const",
			"body": [
				"std:string Technique:getName() "
			],
			"description": "std::string Technique::getName() const"
		},
		 "void RenderState::StateBlock::setFrontFace(FrontFace winding)": {
			"prefix": "void RenderState::StateBlock::setFrontFace(FrontFace winding)",
			"body": [
				"RenderState:StateBlock:setFrontFace(${1:FrontFace winding})"
			],
			"description": "void RenderState::StateBlock::setFrontFace(FrontFace winding)"
		},
		 "Data FileUtilsAndroid::getData(const std::string& filename, bool forString)": {
			"prefix": "Data FileUtilsAndroid::getData(const std::string& filename, bool forString)",
			"body": [
				"FileUtilsAndroid:getData(${1:std:string& filename},${2:bool forString})"
			],
			"description": "Data FileUtilsAndroid::getData(const std::string& filename, bool forString)"
		},
		 "SocketIOPacket * SocketIOPacket::createPacketWithType(std::string type, SocketIOPacket::SocketIOVersion version)": {
			"prefix": "SocketIOPacket * SocketIOPacket::createPacketWithType(std::string type, SocketIOPacket::SocketIOVersion version)",
			"body": [
				"* SocketIOPacket:createPacketWithType(${1:std:string type},${2:SocketIOPacket:SocketIOVersion version})"
			],
			"description": "SocketIOPacket * SocketIOPacket::createPacketWithType(std::string type, SocketIOPacket::SocketIOVersion version)"
		},
		 "void Renderer::drawBatchedTriangles()": {
			"prefix": "void Renderer::drawBatchedTriangles()",
			"body": [
				"void Renderer:drawBatchedTriangles()"
			],
			"description": "void Renderer::drawBatchedTriangles()"
		},
		 "void Button::loadTextureNormal(SpriteFrame* normalSpriteFrame)": {
			"prefix": "void Button::loadTextureNormal(SpriteFrame* normalSpriteFrame)",
			"body": [
				"Button:loadTextureNormal(${1:SpriteFrame* normalSpriteFrame})"
			],
			"description": "void Button::loadTextureNormal(SpriteFrame* normalSpriteFrame)"
		},
		 "Widget* Button::createCloneInstance()": {
			"prefix": "Widget* Button::createCloneInstance()",
			"body": [
				"Widget* Button:createCloneInstance()"
			],
			"description": "Widget* Button::createCloneInstance()"
		},
		 "void FileUtils::setFilenameLookupDictionary(const ValueMap& filenameLookupDict)": {
			"prefix": "void FileUtils::setFilenameLookupDictionary(const ValueMap& filenameLookupDict)",
			"body": [
				"FileUtils:setFilenameLookupDictionary(${1:ValueMap& filenameLookupDict})"
			],
			"description": "void FileUtils::setFilenameLookupDictionary(const ValueMap& filenameLookupDict)"
		},
		 "float Mat4::determinant() const": {
			"prefix": "float Mat4::determinant() const",
			"body": [
				"float Mat4:determinant() "
			],
			"description": "float Mat4::determinant() const"
		},
		 "bool AudioPlayer::init(SLEngineItf engineEngine, SLObjectItf outputMixObject,const std::string& fileFullPath, float volume, bool loop)": {
			"prefix": "bool AudioPlayer::init(SLEngineItf engineEngine, SLObjectItf outputMixObject,const std::string& fileFullPath, float volume, bool loop)",
			"body": [
				"AudioPlayer:init(${1:SLEngineItf engineEngine},${2:SLObjectItf outputMixObject},${3:std:string& fileFullPath},${4:float volume},${5:bool loop})"
			],
			"description": "bool AudioPlayer::init(SLEngineItf engineEngine, SLObjectItf outputMixObject,const std::string& fileFullPath, float volume, bool loop)"
		},
		 "void TextBMFont::initRenderer()": {
			"prefix": "void TextBMFont::initRenderer()",
			"body": [
				"void TextBMFont:initRenderer()"
			],
			"description": "void TextBMFont::initRenderer()"
		},
		 "void Scale9SpriteLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)": {
			"prefix": "void Scale9SpriteLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)",
			"body": [
				"Scale9SpriteLoader:onHandlePropTypeByte(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:unsigned char pByte},${5:CCBReader * ccbReader})"
			],
			"description": "void Scale9SpriteLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)"
		},
		 "void PhysicsJointLimit::setMax(float max)": {
			"prefix": "void PhysicsJointLimit::setMax(float max)",
			"body": [
				"PhysicsJointLimit:setMax(${1:float max})"
			],
			"description": "void PhysicsJointLimit::setMax(float max)"
		},
		 "void ArmatureAnimation::update(float dt)": {
			"prefix": "void ArmatureAnimation::update(float dt)",
			"body": [
				"ArmatureAnimation:update(${1:float dt})"
			],
			"description": "void ArmatureAnimation::update(float dt)"
		},
		 "ValueVector& CCBAnimationManager::getDocumentOutletNames()": {
			"prefix": "ValueVector& CCBAnimationManager::getDocumentOutletNames()",
			"body": [
				"ValueVector& CCBAnimationManager:getDocumentOutletNames()"
			],
			"description": "ValueVector& CCBAnimationManager::getDocumentOutletNames()"
		},
		 "void NodeLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char* pPropertyName, unsigned char pByte, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char* pPropertyName, unsigned char pByte, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeByte(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:unsigned char pByte},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char* pPropertyName, unsigned char pByte, CCBReader * ccbReader)"
		},
		 "Vec2 TMXLayer::getPositionForIsoAt(const Vec2& pos)": {
			"prefix": "Vec2 TMXLayer::getPositionForIsoAt(const Vec2& pos)",
			"body": [
				"TMXLayer:getPositionForIsoAt(${1:Vec2& pos})"
			],
			"description": "Vec2 TMXLayer::getPositionForIsoAt(const Vec2& pos)"
		},
		 "RenderTarget* RenderTarget::create(unsigned int width, unsigned int height, Texture2D::PixelFormat format/* = Texture2D::PixelFormat::RGBA8888*/)": {
			"prefix": "RenderTarget* RenderTarget::create(unsigned int width, unsigned int height, Texture2D::PixelFormat format/* = Texture2D::PixelFormat::RGBA8888*/)",
			"body": [
				"RenderTarget:create(${1:unsigned int width},${2:unsigned int height},${3:Texture2D:PixelFormat format/* = Texture2D:PixelFormat:RGBA8888*/})"
			],
			"description": "RenderTarget* RenderTarget::create(unsigned int width, unsigned int height, Texture2D::PixelFormat format/* = Texture2D::PixelFormat::RGBA8888*/)"
		},
		 "void ActionTimelineNode::setRoot(cocos2d::Node* root)": {
			"prefix": "void ActionTimelineNode::setRoot(cocos2d::Node* root)",
			"body": [
				"ActionTimelineNode:setRoot(${1:cocos2d:Node* root})"
			],
			"description": "void ActionTimelineNode::setRoot(cocos2d::Node* root)"
		},
		 "void TMXMapInfo::endElement(void *ctx, const char *name)": {
			"prefix": "void TMXMapInfo::endElement(void *ctx, const char *name)",
			"body": [
				"TMXMapInfo:endElement(${1:void *ctx},${2:char *name})"
			],
			"description": "void TMXMapInfo::endElement(void *ctx, const char *name)"
		},
		 "void BoneNode::setLocalZOrder(int localZOrder)": {
			"prefix": "void BoneNode::setLocalZOrder(int localZOrder)",
			"body": [
				"BoneNode:setLocalZOrder(${1:int localZOrder})"
			],
			"description": "void BoneNode::setLocalZOrder(int localZOrder)"
		},
		 "void SpriteFrameCacheHelper::addSpriteFrameFromFile(const std::string& plistPath, const std::string& imagePath)": {
			"prefix": "void SpriteFrameCacheHelper::addSpriteFrameFromFile(const std::string& plistPath, const std::string& imagePath)",
			"body": [
				"SpriteFrameCacheHelper:addSpriteFrameFromFile(${1:std:string& plistPath},${2:std:string& imagePath})"
			],
			"description": "void SpriteFrameCacheHelper::addSpriteFrameFromFile(const std::string& plistPath, const std::string& imagePath)"
		},
		 "void Physics3DCollider::setCcdSweptSphereRadius(float radius)": {
			"prefix": "void Physics3DCollider::setCcdSweptSphereRadius(float radius)",
			"body": [
				"Physics3DCollider:setCcdSweptSphereRadius(${1:float radius})"
			],
			"description": "void Physics3DCollider::setCcdSweptSphereRadius(float radius)"
		},
		 "Sprite3D* Sprite3D::createSprite3DNode(NodeData* nodedata,ModelData* modeldata,const MaterialDatas& materialdatas)": {
			"prefix": "Sprite3D* Sprite3D::createSprite3DNode(NodeData* nodedata,ModelData* modeldata,const MaterialDatas& materialdatas)",
			"body": [
				"Sprite3D:createSprite3DNode(${1:NodeData* nodedata},${2:ModelData* modeldata},${3:MaterialDatas& materialdatas})"
			],
			"description": "Sprite3D* Sprite3D::createSprite3DNode(NodeData* nodedata,ModelData* modeldata,const MaterialDatas& materialdatas)"
		},
		 "bool Configuration::supportsDiscardFramebuffer() const": {
			"prefix": "bool Configuration::supportsDiscardFramebuffer() const",
			"body": [
				"bool Configuration:supportsDiscardFramebuffer() "
			],
			"description": "bool Configuration::supportsDiscardFramebuffer() const"
		},
		 "bool Properties::parseColor(const char* str, Vec4* out)": {
			"prefix": "bool Properties::parseColor(const char* str, Vec4* out)",
			"body": [
				"Properties:parseColor(${1:char* str},${2:Vec4* out})"
			],
			"description": "bool Properties::parseColor(const char* str, Vec4* out)"
		},
		 "void ScrollView::handleReleaseLogic(Touch *touch)": {
			"prefix": "void ScrollView::handleReleaseLogic(Touch *touch)",
			"body": [
				"ScrollView:handleReleaseLogic(${1:Touch *touch})"
			],
			"description": "void ScrollView::handleReleaseLogic(Touch *touch)"
		},
		 "bool NavMesh::loadGeomFile()": {
			"prefix": "bool NavMesh::loadGeomFile()",
			"body": [
				"bool NavMesh:loadGeomFile()"
			],
			"description": "bool NavMesh::loadGeomFile()"
		},
		 "std::vector<Vec2> AutoPolygon::reduce(const std::vector<Vec2>& points, const Rect& rect , const float& epsilon)": {
			"prefix": "std::vector<Vec2> AutoPolygon::reduce(const std::vector<Vec2>& points, const Rect& rect , const float& epsilon)",
			"body": [
				"AutoPolygon:reduce(${1:std:vector<Vec2>& points},${2:Rect& rect},${3:float& epsilon})"
			],
			"description": "std::vector<Vec2> AutoPolygon::reduce(const std::vector<Vec2>& points, const Rect& rect , const float& epsilon)"
		},
		 "ColliderFilter *ColliderDetector::getColliderFilter()": {
			"prefix": "ColliderFilter *ColliderDetector::getColliderFilter()",
			"body": [
				"ColliderFilter *ColliderDetector:getColliderFilter()"
			],
			"description": "ColliderFilter *ColliderDetector::getColliderFilter()"
		},
		 "void Director::reset()": {
			"prefix": "void Director::reset()",
			"body": [
				"void Director:reset()"
			],
			"description": "void Director::reset()"
		},
		 "bool Node::addComponent(Component *component)": {
			"prefix": "bool Node::addComponent(Component *component)",
			"body": [
				"Node:addComponent(${1:Component *component})"
			],
			"description": "bool Node::addComponent(Component *component)"
		},
		 "EventListenerTouchOneByOne* EventListenerTouchOneByOne::clone()": {
			"prefix": "EventListenerTouchOneByOne* EventListenerTouchOneByOne::clone()",
			"body": [
				"EventListenerTouchOneByOne* EventListenerTouchOneByOne:clone()"
			],
			"description": "EventListenerTouchOneByOne* EventListenerTouchOneByOne::clone()"
		},
		 "void ArmatureData::addBoneData(BoneData *boneData)": {
			"prefix": "void ArmatureData::addBoneData(BoneData *boneData)",
			"body": [
				"ArmatureData:addBoneData(${1:BoneData *boneData})"
			],
			"description": "void ArmatureData::addBoneData(BoneData *boneData)"
		},
		 "bool GLProgram::compileShader(GLuint* shader, GLenum type, const GLchar* source, const std::string& convertedDefines)": {
			"prefix": "bool GLProgram::compileShader(GLuint* shader, GLenum type, const GLchar* source, const std::string& convertedDefines)",
			"body": [
				"GLProgram:compileShader(${1:GLuint* shader},${2:GLenum type},${3:GLchar* source},${4:std:string& convertedDefines})"
			],
			"description": "bool GLProgram::compileShader(GLuint* shader, GLenum type, const GLchar* source, const std::string& convertedDefines)"
		},
		 "ValueMap& TMXLayerInfo::getProperties()": {
			"prefix": "ValueMap& TMXLayerInfo::getProperties()",
			"body": [
				"ValueMap& TMXLayerInfo:getProperties()"
			],
			"description": "ValueMap& TMXLayerInfo::getProperties()"
		},
		 "ssize_t SpriteBatchNode::highestAtlasIndexInChild(Sprite *sprite)": {
			"prefix": "ssize_t SpriteBatchNode::highestAtlasIndexInChild(Sprite *sprite)",
			"body": [
				"SpriteBatchNode:highestAtlasIndexInChild(${1:Sprite *sprite})"
			],
			"description": "ssize_t SpriteBatchNode::highestAtlasIndexInChild(Sprite *sprite)"
		},
		 "TextHAlignment Text::getTextHorizontalAlignment()const": {
			"prefix": "TextHAlignment Text::getTextHorizontalAlignment()const",
			"body": [
				"TextHAlignment Text:getTextHorizontalAlignment()"
			],
			"description": "TextHAlignment Text::getTextHorizontalAlignment()const"
		},
		 "void AutoreleasePool::addObject(Ref* object)": {
			"prefix": "void AutoreleasePool::addObject(Ref* object)",
			"body": [
				"AutoreleasePool:addObject(${1:Ref* object})"
			],
			"description": "void AutoreleasePool::addObject(Ref* object)"
		},
		 "void ActionFloat::update(float delta)": {
			"prefix": "void ActionFloat::update(float delta)",
			"body": [
				"ActionFloat:update(${1:float delta})"
			],
			"description": "void ActionFloat::update(float delta)"
		},
		 "void AnimationCache::addAnimationsWithDictionary(const ValueMap& dictionary,const std::string& plist)": {
			"prefix": "void AnimationCache::addAnimationsWithDictionary(const ValueMap& dictionary,const std::string& plist)",
			"body": [
				"AnimationCache:addAnimationsWithDictionary(${1:ValueMap& dictionary},${2:std:string& plist})"
			],
			"description": "void AnimationCache::addAnimationsWithDictionary(const ValueMap& dictionary,const std::string& plist)"
		},
		 "std::string Scene::getDescription() const": {
			"prefix": "std::string Scene::getDescription() const",
			"body": [
				"std:string Scene:getDescription() "
			],
			"description": "std::string Scene::getDescription() const"
		},
		 "bool LabelAtlas::initWithString(const std::string& string, Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "bool LabelAtlas::initWithString(const std::string& string, Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"LabelAtlas:initWithString(${1:std:string& string},${2:Texture2D* texture},${3:int itemWidth},${4:int itemHeight},${5:int startCharMap})"
			],
			"description": "bool LabelAtlas::initWithString(const std::string& string, Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "int Application::run()": {
			"prefix": "int Application::run()",
			"body": [
				"int Application:run()"
			],
			"description": "int Application::run()"
		},
		 "void TransitionScene::onEnter()": {
			"prefix": "void TransitionScene::onEnter()",
			"body": [
				"void TransitionScene:onEnter()"
			],
			"description": "void TransitionScene::onEnter()"
		},
		 "void RadioButtonGroup::setSelectedButton(int index)": {
			"prefix": "void RadioButtonGroup::setSelectedButton(int index)",
			"body": [
				"RadioButtonGroup:setSelectedButton(${1:int index})"
			],
			"description": "void RadioButtonGroup::setSelectedButton(int index)"
		},
		 "float Vec4::distance(const Vec4& v) const": {
			"prefix": "float Vec4::distance(const Vec4& v) const",
			"body": [
				"Vec4:distance(${1:Vec4& v})"
			],
			"description": "float Vec4::distance(const Vec4& v) const"
		},
		 "int ActionFadeFrame::getOpacity()": {
			"prefix": "int ActionFadeFrame::getOpacity()",
			"body": [
				"int ActionFadeFrame:getOpacity()"
			],
			"description": "int ActionFadeFrame::getOpacity()"
		},
		 "float Physics3DConeTwistConstraint::getSwingSpan1() const": {
			"prefix": "float Physics3DConeTwistConstraint::getSwingSpan1() const",
			"body": [
				"float Physics3DConeTwistConstraint:getSwingSpan1() "
			],
			"description": "float Physics3DConeTwistConstraint::getSwingSpan1() const"
		},
		 "void VideoPlayer::setKeepAspectRatioEnabled(bool enable)": {
			"prefix": "void VideoPlayer::setKeepAspectRatioEnabled(bool enable)",
			"body": [
				"VideoPlayer:setKeepAspectRatioEnabled(${1:bool enable})"
			],
			"description": "void VideoPlayer::setKeepAspectRatioEnabled(bool enable)"
		},
		 "void Properties::rewind()": {
			"prefix": "void Properties::rewind()",
			"body": [
				"void Properties:rewind()"
			],
			"description": "void Properties::rewind()"
		},
		 "PhysicsShapeEdgeChain* PhysicsShapeEdgeChain::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)": {
			"prefix": "PhysicsShapeEdgeChain* PhysicsShapeEdgeChain::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)",
			"body": [
				"PhysicsShapeEdgeChain:create(${1:Vec2* points},${2:int count},${3:PhysicsMaterial& material/* = MaterialDefault*/},${4:float border/* = 1*/})"
			],
			"description": "PhysicsShapeEdgeChain* PhysicsShapeEdgeChain::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)"
		},
		 "AABB::AABB(const AABB& box)": {
			"prefix": "AABB::AABB(const AABB& box)",
			"body": [
				"box})"
			],
			"description": "AABB::AABB(const AABB& box)"
		},
		 "Label* Label::createWithTTF(const std::string& text, const std::string& fontFile, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)": {
			"prefix": "Label* Label::createWithTTF(const std::string& text, const std::string& fontFile, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)",
			"body": [
				"Label:createWithTTF(${1:std:string& text},${2:std:string& fontFile},${3:float fontSize},${4:Size& dimensions /* = Size:ZERO */},${5:TextHAlignment hAlignment /* = TextHAlignment:LEFT */},${6:TextVAlignment vAlignment /* = TextVAlignment:TOP */})"
			],
			"description": "Label* Label::createWithTTF(const std::string& text, const std::string& fontFile, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)"
		},
		 "LinearLayoutParameter* LinearLayoutParameter::create()": {
			"prefix": "LinearLayoutParameter* LinearLayoutParameter::create()",
			"body": [
				"LinearLayoutParameter* LinearLayoutParameter:create()"
			],
			"description": "LinearLayoutParameter* LinearLayoutParameter::create()"
		},
		 "void Bone3D::removeAllChildBone()": {
			"prefix": "void Bone3D::removeAllChildBone()",
			"body": [
				"void Bone3D:removeAllChildBone()"
			],
			"description": "void Bone3D::removeAllChildBone()"
		},
		 "void JumpTiles3D::update(float time)": {
			"prefix": "void JumpTiles3D::update(float time)",
			"body": [
				"JumpTiles3D:update(${1:float time})"
			],
			"description": "void JumpTiles3D::update(float time)"
		},
		 "void Bone::removeFromParent(bool recursion)": {
			"prefix": "void Bone::removeFromParent(bool recursion)",
			"body": [
				"Bone:removeFromParent(${1:bool recursion})"
			],
			"description": "void Bone::removeFromParent(bool recursion)"
		},
		 "float Director::getZEye(void) const": {
			"prefix": "float Director::getZEye(void) const",
			"body": [
				"Director:getZEye(${1:void})"
			],
			"description": "float Director::getZEye(void) const"
		},
		 "float ParticleSystem::getEndRadiusVar() const": {
			"prefix": "float ParticleSystem::getEndRadiusVar() const",
			"body": [
				"float ParticleSystem:getEndRadiusVar() "
			],
			"description": "float ParticleSystem::getEndRadiusVar() const"
		},
		 "void Terrain::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)": {
			"prefix": "void Terrain::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)",
			"body": [
				"Terrain:draw(${1:cocos2d:Renderer *renderer},${2:cocos2d:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void Terrain::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)"
		},
		 "void cocos2d::NavMeshObstacle::postUpdate(float delta)": {
			"prefix": "void cocos2d::NavMeshObstacle::postUpdate(float delta)",
			"body": [
				"cocos2d:NavMeshObstacle:postUpdate(${1:float delta})"
			],
			"description": "void cocos2d::NavMeshObstacle::postUpdate(float delta)"
		},
		 "ssize_t Mesh::getMeshVertexAttribCount() const": {
			"prefix": "ssize_t Mesh::getMeshVertexAttribCount() const",
			"body": [
				"ssize_t Mesh:getMeshVertexAttribCount() "
			],
			"description": "ssize_t Mesh::getMeshVertexAttribCount() const"
		},
		 "void ProtectedNode::addProtectedChild(Node *child, int zOrder, int tag)": {
			"prefix": "void ProtectedNode::addProtectedChild(Node *child, int zOrder, int tag)",
			"body": [
				"ProtectedNode:addProtectedChild(${1:Node *child},${2:int zOrder},${3:int tag})"
			],
			"description": "void ProtectedNode::addProtectedChild(Node *child, int zOrder, int tag)"
		},
		 "void Slider::onSizeChanged()": {
			"prefix": "void Slider::onSizeChanged()",
			"body": [
				"void Slider:onSizeChanged()"
			],
			"description": "void Slider::onSizeChanged()"
		},
		 "void MeshCommand::preBatchDraw()": {
			"prefix": "void MeshCommand::preBatchDraw()",
			"body": [
				"void MeshCommand:preBatchDraw()"
			],
			"description": "void MeshCommand::preBatchDraw()"
		},
		 "void BoneNode::setRootSkeleton(BoneNode* bone, SkeletonNode* skeleton) const": {
			"prefix": "void BoneNode::setRootSkeleton(BoneNode* bone, SkeletonNode* skeleton) const",
			"body": [
				"BoneNode:setRootSkeleton(${1:BoneNode* bone},${2:SkeletonNode* skeleton})"
			],
			"description": "void BoneNode::setRootSkeleton(BoneNode* bone, SkeletonNode* skeleton) const"
		},
		 "void RenderState::StateBlock::invalidate(long stateBits)": {
			"prefix": "void RenderState::StateBlock::invalidate(long stateBits)",
			"body": [
				"RenderState:StateBlock:invalidate(${1:long stateBits})"
			],
			"description": "void RenderState::StateBlock::invalidate(long stateBits)"
		},
		 "CCBSelectorResolver * CCBReader::getCCBSelectorResolver()": {
			"prefix": "CCBSelectorResolver * CCBReader::getCCBSelectorResolver()",
			"body": [
				"CCBSelectorResolver * CCBReader:getCCBSelectorResolver()"
			],
			"description": "CCBSelectorResolver * CCBReader::getCCBSelectorResolver()"
		},
		 "void TextField::setFontSize(int size)": {
			"prefix": "void TextField::setFontSize(int size)",
			"body": [
				"TextField:setFontSize(${1:int size})"
			],
			"description": "void TextField::setFontSize(int size)"
		},
		 "void FlatBuffersSerialize::destroyInstance()": {
			"prefix": "void FlatBuffersSerialize::destroyInstance()",
			"body": [
				"void FlatBuffersSerialize:destroyInstance()"
			],
			"description": "void FlatBuffersSerialize::destroyInstance()"
		},
		 "Menu * Menu::variadicCreate(MenuItem* item, ...)": {
			"prefix": "Menu * Menu::variadicCreate(MenuItem* item, ...)",
			"body": [
				"* Menu:variadicCreate(${1:MenuItem* item},${2:...})"
			],
			"description": "Menu * Menu::variadicCreate(MenuItem* item, ...)"
		},
		 "void PhysicsJointRotaryLimit::setMax(float max)": {
			"prefix": "void PhysicsJointRotaryLimit::setMax(float max)",
			"body": [
				"PhysicsJointRotaryLimit:setMax(${1:float max})"
			],
			"description": "void PhysicsJointRotaryLimit::setMax(float max)"
		},
		 "void MotionStreak::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void MotionStreak::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"MotionStreak:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void MotionStreak::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "ObjectFactory::Instance ins)": {
			"prefix": "ObjectFactory::Instance ins)",
			"body": [
				"ObjectFactory:Instance ins)"
			],
			"description": "ObjectFactory::Instance ins)"
		},
		 "void EditBox::keyboardDidHide(IMEKeyboardNotificationInfo& info)": {
			"prefix": "void EditBox::keyboardDidHide(IMEKeyboardNotificationInfo& info)",
			"body": [
				"EditBox:keyboardDidHide(${1:IMEKeyboardNotificationInfo& info})"
			],
			"description": "void EditBox::keyboardDidHide(IMEKeyboardNotificationInfo& info)"
		},
		 "int CCBSequence::getChainedSequenceId()": {
			"prefix": "int CCBSequence::getChainedSequenceId()",
			"body": [
				"int CCBSequence:getChainedSequenceId()"
			],
			"description": "int CCBSequence::getChainedSequenceId()"
		},
		 "void ParticleBatchNode::increaseAtlasCapacityTo(ssize_t quantity)": {
			"prefix": "void ParticleBatchNode::increaseAtlasCapacityTo(ssize_t quantity)",
			"body": [
				"ParticleBatchNode:increaseAtlasCapacityTo(${1:ssize_t quantity})"
			],
			"description": "void ParticleBatchNode::increaseAtlasCapacityTo(ssize_t quantity)"
		},
		 "void ScrollView::doLayout()": {
			"prefix": "void ScrollView::doLayout()",
			"body": [
				"void ScrollView:doLayout()"
			],
			"description": "void ScrollView::doLayout()"
		},
		 "void AtlasNode::setQuadsToDraw(ssize_t quadsToDraw)": {
			"prefix": "void AtlasNode::setQuadsToDraw(ssize_t quadsToDraw)",
			"body": [
				"AtlasNode:setQuadsToDraw(${1:ssize_t quadsToDraw})"
			],
			"description": "void AtlasNode::setQuadsToDraw(ssize_t quadsToDraw)"
		},
		 "void Menu::alignItemsInColumnsWithArray(const ValueVector& rows)": {
			"prefix": "void Menu::alignItemsInColumnsWithArray(const ValueVector& rows)",
			"body": [
				"Menu:alignItemsInColumnsWithArray(${1:ValueVector& rows})"
			],
			"description": "void Menu::alignItemsInColumnsWithArray(const ValueVector& rows)"
		},
		 "void NodeLoader::onHandlePropTypeAnimation(Node * pNode, Node * pParent, const char* pPropertyName, Animation * pAnimation, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeAnimation(Node * pNode, Node * pParent, const char* pPropertyName, Animation * pAnimation, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeAnimation(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:Animation * pAnimation},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeAnimation(Node * pNode, Node * pParent, const char* pPropertyName, Animation * pAnimation, CCBReader * ccbReader)"
		},
		 "void ParticleBatchNode::setTexture(Texture2D* texture)": {
			"prefix": "void ParticleBatchNode::setTexture(Texture2D* texture)",
			"body": [
				"ParticleBatchNode:setTexture(${1:Texture2D* texture})"
			],
			"description": "void ParticleBatchNode::setTexture(Texture2D* texture)"
		},
		 "Vec3::Vec3(const Vec3& p1, const Vec3& p2)": {
			"prefix": "Vec3::Vec3(const Vec3& p1, const Vec3& p2)",
			"body": [
				"p1},${2:Vec3& p2})"
			],
			"description": "Vec3::Vec3(const Vec3& p1, const Vec3& p2)"
		},
		 "void ComAudio::unloadEffect(const char *pszFilePath)": {
			"prefix": "void ComAudio::unloadEffect(const char *pszFilePath)",
			"body": [
				"ComAudio:unloadEffect(${1:char *pszFilePath})"
			],
			"description": "void ComAudio::unloadEffect(const char *pszFilePath)"
		},
		 "void FontAtlas::conversionU16TOGB2312(const std::u16string& u16Text, std::unordered_map<unsigned short, unsigned short>& charCodeMap)": {
			"prefix": "void FontAtlas::conversionU16TOGB2312(const std::u16string& u16Text, std::unordered_map<unsigned short, unsigned short>& charCodeMap)",
			"body": [
				"FontAtlas:conversionU16TOGB2312(${1:std:u16string& u16Text},${2:std:unordered_map<unsigned short},${3:unsigned short>& charCodeMap})"
			],
			"description": "void FontAtlas::conversionU16TOGB2312(const std::u16string& u16Text, std::unordered_map<unsigned short, unsigned short>& charCodeMap)"
		},
		 "ActionInterval* TransitionSplitRows::action()": {
			"prefix": "ActionInterval* TransitionSplitRows::action()",
			"body": [
				"ActionInterval* TransitionSplitRows:action()"
			],
			"description": "ActionInterval* TransitionSplitRows::action()"
		},
		 "Widget* ImageView::createCloneInstance()": {
			"prefix": "Widget* ImageView::createCloneInstance()",
			"body": [
				"Widget* ImageView:createCloneInstance()"
			],
			"description": "Widget* ImageView::createCloneInstance()"
		},
		 "void RenderState::StateBlock::setBlendSrc(Blend blend)": {
			"prefix": "void RenderState::StateBlock::setBlendSrc(Blend blend)",
			"body": [
				"RenderState:StateBlock:setBlendSrc(${1:Blend blend})"
			],
			"description": "void RenderState::StateBlock::setBlendSrc(Blend blend)"
		},
		 "void BoneNode::updateDisplayedOpacity(GLubyte parentOpacity)": {
			"prefix": "void BoneNode::updateDisplayedOpacity(GLubyte parentOpacity)",
			"body": [
				"BoneNode:updateDisplayedOpacity(${1:GLubyte parentOpacity})"
			],
			"description": "void BoneNode::updateDisplayedOpacity(GLubyte parentOpacity)"
		},
		 "void Quaternion::createFromRotationMatrix(const Mat4& m, Quaternion* dst)": {
			"prefix": "void Quaternion::createFromRotationMatrix(const Mat4& m, Quaternion* dst)",
			"body": [
				"Quaternion:createFromRotationMatrix(${1:Mat4& m},${2:Quaternion* dst})"
			],
			"description": "void Quaternion::createFromRotationMatrix(const Mat4& m, Quaternion* dst)"
		},
		 "std::string Layout::getDescription() const": {
			"prefix": "std::string Layout::getDescription() const",
			"body": [
				"std:string Layout:getDescription() "
			],
			"description": "std::string Layout::getDescription() const"
		},
		 "bool EventListenerKeyboard::checkAvailable()": {
			"prefix": "bool EventListenerKeyboard::checkAvailable()",
			"body": [
				"bool EventListenerKeyboard:checkAvailable()"
			],
			"description": "bool EventListenerKeyboard::checkAvailable()"
		},
		 "void Widget::addClickEventListener(const ccWidgetClickCallback &callback)": {
			"prefix": "void Widget::addClickEventListener(const ccWidgetClickCallback &callback)",
			"body": [
				"Widget:addClickEventListener(${1:ccWidgetClickCallback &callback})"
			],
			"description": "void Widget::addClickEventListener(const ccWidgetClickCallback &callback)"
		},
		 "void DataReaderHelper::addDataFromFile(const std::string& filePath)": {
			"prefix": "void DataReaderHelper::addDataFromFile(const std::string& filePath)",
			"body": [
				"DataReaderHelper:addDataFromFile(${1:std:string& filePath})"
			],
			"description": "void DataReaderHelper::addDataFromFile(const std::string& filePath)"
		},
		 "ActionTimelineData* ActionTimelineData::create(int actionTag)": {
			"prefix": "ActionTimelineData* ActionTimelineData::create(int actionTag)",
			"body": [
				"ActionTimelineData:create(${1:int actionTag})"
			],
			"description": "ActionTimelineData* ActionTimelineData::create(int actionTag)"
		},
		 "void Place::update(float time)": {
			"prefix": "void Place::update(float time)",
			"body": [
				"Place:update(${1:float time})"
			],
			"description": "void Place::update(float time)"
		},
		 "inline void setAtlasName(const std::string& atlasName)": {
			"prefix": "inline void setAtlasName(const std::string& atlasName)",
			"body": [
				"void setAtlasName(${1:std:string& atlasName})"
			],
			"description": "inline void setAtlasName(const std::string& atlasName)"
		},
		 "void Node::stopActionsByFlags(unsigned int flags)": {
			"prefix": "void Node::stopActionsByFlags(unsigned int flags)",
			"body": [
				"Node:stopActionsByFlags(${1:unsigned int flags})"
			],
			"description": "void Node::stopActionsByFlags(unsigned int flags)"
		},
		 "bool Bundle3D::loadJson(const std::string& path)": {
			"prefix": "bool Bundle3D::loadJson(const std::string& path)",
			"body": [
				"Bundle3D:loadJson(${1:std:string& path})"
			],
			"description": "bool Bundle3D::loadJson(const std::string& path)"
		},
		 "float Ray::dist(const Plane& plane) const": {
			"prefix": "float Ray::dist(const Plane& plane) const",
			"body": [
				"Ray:dist(${1:Plane& plane})"
			],
			"description": "float Ray::dist(const Plane& plane) const"
		},
		 "void Button::setTitleFontName(const std::string& fontName)": {
			"prefix": "void Button::setTitleFontName(const std::string& fontName)",
			"body": [
				"Button:setTitleFontName(${1:std:string& fontName})"
			],
			"description": "void Button::setTitleFontName(const std::string& fontName)"
		},
		 "void Layout::updateBackGroundImageColor()": {
			"prefix": "void Layout::updateBackGroundImageColor()",
			"body": [
				"void Layout:updateBackGroundImageColor()"
			],
			"description": "void Layout::updateBackGroundImageColor()"
		},
		 "CatmullRomTo* CatmullRomTo::create(float dt, cocos2d::PointArray *points)": {
			"prefix": "CatmullRomTo* CatmullRomTo::create(float dt, cocos2d::PointArray *points)",
			"body": [
				"CatmullRomTo:create(${1:float dt},${2:cocos2d:PointArray *points})"
			],
			"description": "CatmullRomTo* CatmullRomTo::create(float dt, cocos2d::PointArray *points)"
		},
		 "void TMXLayer::setTileGID(uint32_t gid, const Vec2& pos)": {
			"prefix": "void TMXLayer::setTileGID(uint32_t gid, const Vec2& pos)",
			"body": [
				"TMXLayer:setTileGID(${1:uint32_t gid},${2:Vec2& pos})"
			],
			"description": "void TMXLayer::setTileGID(uint32_t gid, const Vec2& pos)"
		},
		 "void RotateTo::calculateAngles(float &startAngle, float &diffAngle, float dstAngle)": {
			"prefix": "void RotateTo::calculateAngles(float &startAngle, float &diffAngle, float dstAngle)",
			"body": [
				"RotateTo:calculateAngles(${1:float &startAngle},${2:float &diffAngle},${3:float dstAngle})"
			],
			"description": "void RotateTo::calculateAngles(float &startAngle, float &diffAngle, float dstAngle)"
		},
		 "void ImageView::loadTexture(SpriteFrame* spriteframe)": {
			"prefix": "void ImageView::loadTexture(SpriteFrame* spriteframe)",
			"body": [
				"ImageView:loadTexture(${1:SpriteFrame* spriteframe})"
			],
			"description": "void ImageView::loadTexture(SpriteFrame* spriteframe)"
		},
		 "AABB Sprite3D::getAABBRecursively()": {
			"prefix": "AABB Sprite3D::getAABBRecursively()",
			"body": [
				"AABB Sprite3D:getAABBRecursively()"
			],
			"description": "AABB Sprite3D::getAABBRecursively()"
		},
		 "void WebViewImpl::loadData(const Data &data, const std::string &MIMEType, const std::string &encoding, const std::string &baseURL)": {
			"prefix": "void WebViewImpl::loadData(const Data &data, const std::string &MIMEType, const std::string &encoding, const std::string &baseURL)",
			"body": [
				"WebViewImpl:loadData(${1:Data &data},${2:std:string &MIMEType},${3:std:string &encoding},${4:std:string &baseURL})"
			],
			"description": "void WebViewImpl::loadData(const Data &data, const std::string &MIMEType, const std::string &encoding, const std::string &baseURL)"
		},
		 "MenuItemToggle * MenuItemToggle::create()": {
			"prefix": "MenuItemToggle * MenuItemToggle::create()",
			"body": [
				"MenuItemToggle * MenuItemToggle:create()"
			],
			"description": "MenuItemToggle * MenuItemToggle::create()"
		},
		 "void ActionEase::startWithTarget(Node *target)": {
			"prefix": "void ActionEase::startWithTarget(Node *target)",
			"body": [
				"ActionEase:startWithTarget(${1:Node *target})"
			],
			"description": "void ActionEase::startWithTarget(Node *target)"
		},
		 "void Node::updateTransform()": {
			"prefix": "void Node::updateTransform()",
			"body": [
				"void Node:updateTransform()"
			],
			"description": "void Node::updateTransform()"
		},
		 "void SkeletonNode::addSkinGroup(std::string groupName, std::map<std::string, std::string> boneSkinNameMap)": {
			"prefix": "void SkeletonNode::addSkinGroup(std::string groupName, std::map<std::string, std::string> boneSkinNameMap)",
			"body": [
				"SkeletonNode:addSkinGroup(${1:std:string groupName},${2:std:map<std:string},${3:std:string> boneSkinNameMap})"
			],
			"description": "void SkeletonNode::addSkinGroup(std::string groupName, std::map<std::string, std::string> boneSkinNameMap)"
		},
		 "TMXLayer * TMXTiledMap::parseLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)": {
			"prefix": "TMXLayer * TMXTiledMap::parseLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)",
			"body": [
				"* TMXTiledMap:parseLayer(${1:TMXLayerInfo *layerInfo},${2:TMXMapInfo *mapInfo})"
			],
			"description": "TMXLayer * TMXTiledMap::parseLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)"
		},
		 "MenuItem* MenuItemToggle::getSelectedItem()": {
			"prefix": "MenuItem* MenuItemToggle::getSelectedItem()",
			"body": [
				"MenuItem* MenuItemToggle:getSelectedItem()"
			],
			"description": "MenuItem* MenuItemToggle::getSelectedItem()"
		},
		 "void EventDispatcher::removeEventListener(EventListener* listener)": {
			"prefix": "void EventDispatcher::removeEventListener(EventListener* listener)",
			"body": [
				"EventDispatcher:removeEventListener(${1:EventListener* listener})"
			],
			"description": "void EventDispatcher::removeEventListener(EventListener* listener)"
		},
		 "ProgressTimer* TransitionProgressVertical::progressTimerNodeWithRenderTexture(RenderTexture* texture)": {
			"prefix": "ProgressTimer* TransitionProgressVertical::progressTimerNodeWithRenderTexture(RenderTexture* texture)",
			"body": [
				"TransitionProgressVertical:progressTimerNodeWithRenderTexture(${1:RenderTexture* texture})"
			],
			"description": "ProgressTimer* TransitionProgressVertical::progressTimerNodeWithRenderTexture(RenderTexture* texture)"
		},
		 "void ActionNode::insertFrame(int index, ActionFrame* frame)": {
			"prefix": "void ActionNode::insertFrame(int index, ActionFrame* frame)",
			"body": [
				"ActionNode:insertFrame(${1:int index},${2:ActionFrame* frame})"
			],
			"description": "void ActionNode::insertFrame(int index, ActionFrame* frame)"
		},
		 "void ActionTimeline::setLastFrameCallFunc(std::function<void()> listener)": {
			"prefix": "void ActionTimeline::setLastFrameCallFunc(std::function<void()> listener)",
			"body": [
				"void ActionTimeline:setLastFrameCallFunc(std:function<void()> listener)"
			],
			"description": "void ActionTimeline::setLastFrameCallFunc(std::function<void()> listener)"
		},
		 "void LoadingBar::initRenderer()": {
			"prefix": "void LoadingBar::initRenderer()",
			"body": [
				"void LoadingBar:initRenderer()"
			],
			"description": "void LoadingBar::initRenderer()"
		},
		 "void Renderer::clean()": {
			"prefix": "void Renderer::clean()",
			"body": [
				"void Renderer:clean()"
			],
			"description": "void Renderer::clean()"
		},
		 "cocos2d::Vector<BoneNode*> BoneNode::getAllSubBones() const": {
			"prefix": "cocos2d::Vector<BoneNode*> BoneNode::getAllSubBones() const",
			"body": [
				"cocos2d:Vector<BoneNode*> BoneNode:getAllSubBones() "
			],
			"description": "cocos2d::Vector<BoneNode*> BoneNode::getAllSubBones() const"
		},
		 "size_t Downloader::bufferWriteFunc(void *ptr, size_t size, size_t nmemb, void *userdata)": {
			"prefix": "size_t Downloader::bufferWriteFunc(void *ptr, size_t size, size_t nmemb, void *userdata)",
			"body": [
				"Downloader:bufferWriteFunc(${1:void *ptr},${2:size_t size},${3:size_t nmemb},${4:void *userdata})"
			],
			"description": "size_t Downloader::bufferWriteFunc(void *ptr, size_t size, size_t nmemb, void *userdata)"
		},
		 "bool Bundle3D::loadBinary(const std::string& path)": {
			"prefix": "bool Bundle3D::loadBinary(const std::string& path)",
			"body": [
				"Bundle3D:loadBinary(${1:std:string& path})"
			],
			"description": "bool Bundle3D::loadBinary(const std::string& path)"
		},
		 "void cocos2d::NavMeshObstacle::onEnter()": {
			"prefix": "void cocos2d::NavMeshObstacle::onEnter()",
			"body": [
				"void cocos2d:NavMeshObstacle:onEnter()"
			],
			"description": "void cocos2d::NavMeshObstacle::onEnter()"
		},
		 "void Layout::onEnter()": {
			"prefix": "void Layout::onEnter()",
			"body": [
				"void Layout:onEnter()"
			],
			"description": "void Layout::onEnter()"
		},
		 "void Button::pressedTextureScaleChangedWithSize()": {
			"prefix": "void Button::pressedTextureScaleChangedWithSize()",
			"body": [
				"void Button:pressedTextureScaleChangedWithSize()"
			],
			"description": "void Button::pressedTextureScaleChangedWithSize()"
		},
		 "std::set<unsigned int>* BMFontConfiguration::parseBinaryConfigFile(unsigned char* pData, unsigned long size, const std::string& controlFile)": {
			"prefix": "std::set<unsigned int>* BMFontConfiguration::parseBinaryConfigFile(unsigned char* pData, unsigned long size, const std::string& controlFile)",
			"body": [
				"int>* BMFontConfiguration:parseBinaryConfigFile(${1:unsigned char* pData},${2:unsigned long size},${3:std:string& controlFile})"
			],
			"description": "std::set<unsigned int>* BMFontConfiguration::parseBinaryConfigFile(unsigned char* pData, unsigned long size, const std::string& controlFile)"
		},
		 "void BaseTriggerAction::serialize(cocostudio::CocoLoader *cocoLoader, cocostudio::stExpCocoNode *cocoNode)": {
			"prefix": "void BaseTriggerAction::serialize(cocostudio::CocoLoader *cocoLoader, cocostudio::stExpCocoNode *cocoNode)",
			"body": [
				"BaseTriggerAction:serialize(${1:cocostudio:CocoLoader *cocoLoader},${2:cocostudio:stExpCocoNode *cocoNode})"
			],
			"description": "void BaseTriggerAction::serialize(cocostudio::CocoLoader *cocoLoader, cocostudio::stExpCocoNode *cocoNode)"
		},
		 "ssize_t ZipUtils::inflateMemoryWithHint(unsigned char *in, ssize_t inLength, unsigned char **out, ssize_t outLengthHint)": {
			"prefix": "ssize_t ZipUtils::inflateMemoryWithHint(unsigned char *in, ssize_t inLength, unsigned char **out, ssize_t outLengthHint)",
			"body": [
				"ZipUtils:inflateMemoryWithHint(${1:unsigned char *in},${2:ssize_t inLength},${3:unsigned char **out},${4:ssize_t outLengthHint})"
			],
			"description": "ssize_t ZipUtils::inflateMemoryWithHint(unsigned char *in, ssize_t inLength, unsigned char **out, ssize_t outLengthHint)"
		},
		 "int EditBoxImplWin::getMaxLength()": {
			"prefix": "int EditBoxImplWin::getMaxLength()",
			"body": [
				"int EditBoxImplWin:getMaxLength()"
			],
			"description": "int EditBoxImplWin::getMaxLength()"
		},
		 "void ComponentContainer::visit(float delta)": {
			"prefix": "void ComponentContainer::visit(float delta)",
			"body": [
				"ComponentContainer:visit(${1:float delta})"
			],
			"description": "void ComponentContainer::visit(float delta)"
		},
		 "void AudioEngine::uncache(const std::string &filePath)": {
			"prefix": "void AudioEngine::uncache(const std::string &filePath)",
			"body": [
				"AudioEngine:uncache(${1:std:string &filePath})"
			],
			"description": "void AudioEngine::uncache(const std::string &filePath)"
		},
		 "void Widget::setContentSize(const cocos2d::Size &contentSize)": {
			"prefix": "void Widget::setContentSize(const cocos2d::Size &contentSize)",
			"body": [
				"Widget:setContentSize(${1:cocos2d:Size &contentSize})"
			],
			"description": "void Widget::setContentSize(const cocos2d::Size &contentSize)"
		},
		 "const Size& LabelTTF::getDimensions() const": {
			"prefix": "const Size& LabelTTF::getDimensions() const",
			"body": [
				" Size& LabelTTF:getDimensions() "
			],
			"description": "const Size& LabelTTF::getDimensions() const"
		},
		 "void ActionFrame::setFrameIndex(int index)": {
			"prefix": "void ActionFrame::setFrameIndex(int index)",
			"body": [
				"ActionFrame:setFrameIndex(${1:int index})"
			],
			"description": "void ActionFrame::setFrameIndex(int index)"
		},
		 "void LabelTTFLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char * pPropertyName, float pFloatScale, CCBReader * ccbReader)": {
			"prefix": "void LabelTTFLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char * pPropertyName, float pFloatScale, CCBReader * ccbReader)",
			"body": [
				"LabelTTFLoader:onHandlePropTypeFloatScale(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:float pFloatScale},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelTTFLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char * pPropertyName, float pFloatScale, CCBReader * ccbReader)"
		},
		 "bool ParticleBatchNode::initWithFile(const std::string& fileImage, int capacity)": {
			"prefix": "bool ParticleBatchNode::initWithFile(const std::string& fileImage, int capacity)",
			"body": [
				"ParticleBatchNode:initWithFile(${1:std:string& fileImage},${2:int capacity})"
			],
			"description": "bool ParticleBatchNode::initWithFile(const std::string& fileImage, int capacity)"
		},
		 "__NotificationCenter *__NotificationCenter::sharedNotificationCenter(void)": {
			"prefix": "__NotificationCenter *__NotificationCenter::sharedNotificationCenter(void)",
			"body": [
				"*__NotificationCenter:sharedNotificationCenter(${1:void})"
			],
			"description": "__NotificationCenter *__NotificationCenter::sharedNotificationCenter(void)"
		},
		 "bool Slider::isScale9Enabled()const": {
			"prefix": "bool Slider::isScale9Enabled()const",
			"body": [
				"bool Slider:isScale9Enabled()"
			],
			"description": "bool Slider::isScale9Enabled()const"
		},
		 "void ListView::selectedItemEvent(TouchEventType event)": {
			"prefix": "void ListView::selectedItemEvent(TouchEventType event)",
			"body": [
				"ListView:selectedItemEvent(${1:TouchEventType event})"
			],
			"description": "void ListView::selectedItemEvent(TouchEventType event)"
		},
		 "EaseQuinticActionIn* EaseQuinticActionIn::clone() const": {
			"prefix": "EaseQuinticActionIn* EaseQuinticActionIn::clone() const",
			"body": [
				"EaseQuinticActionIn* EaseQuinticActionIn:clone() "
			],
			"description": "EaseQuinticActionIn* EaseQuinticActionIn::clone() const"
		},
		 "const char* EditBox::getText(void)": {
			"prefix": "const char* EditBox::getText(void)",
			"body": [
				"char* EditBox:getText(${1:void})"
			],
			"description": "const char* EditBox::getText(void)"
		},
		 "cocos2d::Ref *root)": {
			"prefix": "cocos2d::Ref *root)",
			"body": [
				"cocos2d:Ref *root)"
			],
			"description": "cocos2d::Ref *root)"
		},
		 "void NavMesh::addNavMeshObstacle(NavMeshObstacle *obstacle)": {
			"prefix": "void NavMesh::addNavMeshObstacle(NavMeshObstacle *obstacle)",
			"body": [
				"NavMesh:addNavMeshObstacle(${1:NavMeshObstacle *obstacle})"
			],
			"description": "void NavMesh::addNavMeshObstacle(NavMeshObstacle *obstacle)"
		},
		 "Offset<flatbuffers::EventFrame> FlatBuffersSerialize::createEventFrame(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<flatbuffers::EventFrame> FlatBuffersSerialize::createEventFrame(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createEventFrame(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<flatbuffers::EventFrame> FlatBuffersSerialize::createEventFrame(const tinyxml2::XMLElement *objectData)"
		},
		 "bool SplitCols::initWithDuration(float duration, unsigned int cols)": {
			"prefix": "bool SplitCols::initWithDuration(float duration, unsigned int cols)",
			"body": [
				"SplitCols:initWithDuration(${1:float duration},${2:unsigned int cols})"
			],
			"description": "bool SplitCols::initWithDuration(float duration, unsigned int cols)"
		},
		 "std::string SocketIOPacketV10x::stringify()const": {
			"prefix": "std::string SocketIOPacketV10x::stringify()const",
			"body": [
				"std:string SocketIOPacketV10x:stringify()"
			],
			"description": "std::string SocketIOPacketV10x::stringify()const"
		},
		 "bool FileUtilsWin32::removeFile(const std::string &filepath)": {
			"prefix": "bool FileUtilsWin32::removeFile(const std::string &filepath)",
			"body": [
				"FileUtilsWin32:removeFile(${1:std:string &filepath})"
			],
			"description": "bool FileUtilsWin32::removeFile(const std::string &filepath)"
		},
		 "void Frame::cloneProperty(Frame* frame)": {
			"prefix": "void Frame::cloneProperty(Frame* frame)",
			"body": [
				"Frame:cloneProperty(${1:Frame* frame})"
			],
			"description": "void Frame::cloneProperty(Frame* frame)"
		},
		 "void LoadingBar::setDirection(cocos2d::ui::LoadingBar::Direction direction)": {
			"prefix": "void LoadingBar::setDirection(cocos2d::ui::LoadingBar::Direction direction)",
			"body": [
				"LoadingBar:setDirection(${1:cocos2d:ui:LoadingBar:Direction direction})"
			],
			"description": "void LoadingBar::setDirection(cocos2d::ui::LoadingBar::Direction direction)"
		},
		 "void RelativeLayoutParameter::copyProperties(LayoutParameter *model)": {
			"prefix": "void RelativeLayoutParameter::copyProperties(LayoutParameter *model)",
			"body": [
				"RelativeLayoutParameter:copyProperties(${1:LayoutParameter *model})"
			],
			"description": "void RelativeLayoutParameter::copyProperties(LayoutParameter *model)"
		},
		 "void IMEDispatcher::dispatchDeleteBackward()": {
			"prefix": "void IMEDispatcher::dispatchDeleteBackward()",
			"body": [
				"void IMEDispatcher:dispatchDeleteBackward()"
			],
			"description": "void IMEDispatcher::dispatchDeleteBackward()"
		},
		 "void Twirl::setPosition(const Vec2& position)": {
			"prefix": "void Twirl::setPosition(const Vec2& position)",
			"body": [
				"Twirl:setPosition(${1:Vec2& position})"
			],
			"description": "void Twirl::setPosition(const Vec2& position)"
		},
		 "const cocos2d::Vector<ColliderBody*>& ColliderDetector::getColliderBodyList()": {
			"prefix": "const cocos2d::Vector<ColliderBody*>& ColliderDetector::getColliderBodyList()",
			"body": [
				" cocos2d:Vector<ColliderBody*>& ColliderDetector:getColliderBodyList()"
			],
			"description": "const cocos2d::Vector<ColliderBody*>& ColliderDetector::getColliderBodyList()"
		},
		 "void  Sprite3D::addMesh(Mesh* mesh)": {
			"prefix": "void  Sprite3D::addMesh(Mesh* mesh)",
			"body": [
				"Sprite3D:addMesh(${1:Mesh* mesh})"
			],
			"description": "void  Sprite3D::addMesh(Mesh* mesh)"
		},
		 "void DisplayFactory::createParticleDisplay(Bone *bone, DecorativeDisplay *decoDisplay)": {
			"prefix": "void DisplayFactory::createParticleDisplay(Bone *bone, DecorativeDisplay *decoDisplay)",
			"body": [
				"DisplayFactory:createParticleDisplay(${1:Bone *bone},${2:DecorativeDisplay *decoDisplay})"
			],
			"description": "void DisplayFactory::createParticleDisplay(Bone *bone, DecorativeDisplay *decoDisplay)"
		},
		 "void Animate::update(float t)": {
			"prefix": "void Animate::update(float t)",
			"body": [
				"Animate:update(${1:float t})"
			],
			"description": "void Animate::update(float t)"
		},
		 "TransitionFlipAngular* TransitionFlipAngular::create(float t, Scene* s, Orientation o)": {
			"prefix": "TransitionFlipAngular* TransitionFlipAngular::create(float t, Scene* s, Orientation o)",
			"body": [
				"TransitionFlipAngular:create(${1:float t},${2:Scene* s},${3:Orientation o})"
			],
			"description": "TransitionFlipAngular* TransitionFlipAngular::create(float t, Scene* s, Orientation o)"
		},
		 "void PhysicsBody::resetForces()": {
			"prefix": "void PhysicsBody::resetForces()",
			"body": [
				"void PhysicsBody:resetForces()"
			],
			"description": "void PhysicsBody::resetForces()"
		},
		 "float PhysicsJointSpring::getStiffness() const": {
			"prefix": "float PhysicsJointSpring::getStiffness() const",
			"body": [
				"float PhysicsJointSpring:getStiffness() "
			],
			"description": "float PhysicsJointSpring::getStiffness() const"
		},
		 "bool CallFunc::initWithTarget(Ref* target)": {
			"prefix": "bool CallFunc::initWithTarget(Ref* target)",
			"body": [
				"CallFunc:initWithTarget(${1:Ref* target})"
			],
			"description": "bool CallFunc::initWithTarget(Ref* target)"
		},
		 "Widget* Layout::passFocusToChild(FocusDirection dir, cocos2d::ui::Widget *current)": {
			"prefix": "Widget* Layout::passFocusToChild(FocusDirection dir, cocos2d::ui::Widget *current)",
			"body": [
				"Layout:passFocusToChild(${1:FocusDirection dir},${2:cocos2d:ui:Widget *current})"
			],
			"description": "Widget* Layout::passFocusToChild(FocusDirection dir, cocos2d::ui::Widget *current)"
		},
		 "void Renderer::addCommand(RenderCommand* command, int renderQueue)": {
			"prefix": "void Renderer::addCommand(RenderCommand* command, int renderQueue)",
			"body": [
				"Renderer:addCommand(${1:RenderCommand* command},${2:int renderQueue})"
			],
			"description": "void Renderer::addCommand(RenderCommand* command, int renderQueue)"
		},
		 "void TrianglesCommand::generateMaterialID()": {
			"prefix": "void TrianglesCommand::generateMaterialID()",
			"body": [
				"void TrianglesCommand:generateMaterialID()"
			],
			"description": "void TrianglesCommand::generateMaterialID()"
		},
		 "void PhysicsContactPreSolve::ignore()": {
			"prefix": "void PhysicsContactPreSolve::ignore()",
			"body": [
				"void PhysicsContactPreSolve:ignore()"
			],
			"description": "void PhysicsContactPreSolve::ignore()"
		},
		 "void Layout::setPassFocusToChild(bool pass)": {
			"prefix": "void Layout::setPassFocusToChild(bool pass)",
			"body": [
				"Layout:setPassFocusToChild(${1:bool pass})"
			],
			"description": "void Layout::setPassFocusToChild(bool pass)"
		},
		 "static std::string logForOpenGLShader(GLuint shader)": {
			"prefix": "static std::string logForOpenGLShader(GLuint shader)",
			"body": [
				"std:string logForOpenGLShader(${1:GLuint shader})"
			],
			"description": "static std::string logForOpenGLShader(GLuint shader)"
		},
		 "void UserDefault::destroyInstance()": {
			"prefix": "void UserDefault::destroyInstance()",
			"body": [
				"void UserDefault:destroyInstance()"
			],
			"description": "void UserDefault::destroyInstance()"
		},
		 "void AndroidJavaEngine::setBackgroundMusicVolume(float volume)": {
			"prefix": "void AndroidJavaEngine::setBackgroundMusicVolume(float volume)",
			"body": [
				"AndroidJavaEngine:setBackgroundMusicVolume(${1:float volume})"
			],
			"description": "void AndroidJavaEngine::setBackgroundMusicVolume(float volume)"
		},
		 "void TextAtlas::initRenderer()": {
			"prefix": "void TextAtlas::initRenderer()",
			"body": [
				"void TextAtlas:initRenderer()"
			],
			"description": "void TextAtlas::initRenderer()"
		},
		 "bool AudioEngine::lazyInit()": {
			"prefix": "bool AudioEngine::lazyInit()",
			"body": [
				"bool AudioEngine:lazyInit()"
			],
			"description": "bool AudioEngine::lazyInit()"
		},
		 "Configuration* Configuration::getInstance()": {
			"prefix": "Configuration* Configuration::getInstance()",
			"body": [
				"Configuration* Configuration:getInstance()"
			],
			"description": "Configuration* Configuration::getInstance()"
		},
		 "void ComAudio::rewindBackgroundMusic()": {
			"prefix": "void ComAudio::rewindBackgroundMusic()",
			"body": [
				"void ComAudio:rewindBackgroundMusic()"
			],
			"description": "void ComAudio::rewindBackgroundMusic()"
		},
		 "void PhysicsJointSpring::setStiffness(float stiffness)": {
			"prefix": "void PhysicsJointSpring::setStiffness(float stiffness)",
			"body": [
				"PhysicsJointSpring:setStiffness(${1:float stiffness})"
			],
			"description": "void PhysicsJointSpring::setStiffness(float stiffness)"
		},
		 "bool ProgressFromTo::initWithDuration(float duration, float fromPercentage, float toPercentage)": {
			"prefix": "bool ProgressFromTo::initWithDuration(float duration, float fromPercentage, float toPercentage)",
			"body": [
				"ProgressFromTo:initWithDuration(${1:float duration},${2:float fromPercentage},${3:float toPercentage})"
			],
			"description": "bool ProgressFromTo::initWithDuration(float duration, float fromPercentage, float toPercentage)"
		},
		 "Bone *Armature::createBone(const std::string& boneName)": {
			"prefix": "Bone *Armature::createBone(const std::string& boneName)",
			"body": [
				"*Armature:createBone(${1:std:string& boneName})"
			],
			"description": "Bone *Armature::createBone(const std::string& boneName)"
		},
		 "GLProgram* GLProgramCache::getGLProgram(const std::string &key)": {
			"prefix": "GLProgram* GLProgramCache::getGLProgram(const std::string &key)",
			"body": [
				"GLProgramCache:getGLProgram(${1:std:string &key})"
			],
			"description": "GLProgram* GLProgramCache::getGLProgram(const std::string &key)"
		},
		 "Terrain::DetailMap::DetailMap(const char * detailMapPath, float size /*= 35*/)": {
			"prefix": "Terrain::DetailMap::DetailMap(const char * detailMapPath, float size /*= 35*/)",
			"body": [
				"* detailMapPath},${2:float size /*= 35*/})"
			],
			"description": "Terrain::DetailMap::DetailMap(const char * detailMapPath, float size /*= 35*/)"
		},
		 "bool Layout::init()": {
			"prefix": "bool Layout::init()",
			"body": [
				"bool Layout:init()"
			],
			"description": "bool Layout::init()"
		},
		 "void __Array::exchangeObjectAtIndex(ssize_t index1, ssize_t index2)": {
			"prefix": "void __Array::exchangeObjectAtIndex(ssize_t index1, ssize_t index2)",
			"body": [
				"__Array:exchangeObjectAtIndex(${1:ssize_t index1},${2:ssize_t index2})"
			],
			"description": "void __Array::exchangeObjectAtIndex(ssize_t index1, ssize_t index2)"
		},
		 "bool Widget::isIgnoreContentAdaptWithSize() const": {
			"prefix": "bool Widget::isIgnoreContentAdaptWithSize() const",
			"body": [
				"bool Widget:isIgnoreContentAdaptWithSize() "
			],
			"description": "bool Widget::isIgnoreContentAdaptWithSize() const"
		},
		 "bool __Array::initWithArray(__Array* otherArray)": {
			"prefix": "bool __Array::initWithArray(__Array* otherArray)",
			"body": [
				"__Array:initWithArray(${1:__Array* otherArray})"
			],
			"description": "bool __Array::initWithArray(__Array* otherArray)"
		},
		 "void cocos2d::NavMesh::findPath(const Vec3 &start, const Vec3 &end, std::vector<Vec3> &pathPoints)": {
			"prefix": "void cocos2d::NavMesh::findPath(const Vec3 &start, const Vec3 &end, std::vector<Vec3> &pathPoints)",
			"body": [
				"cocos2d:NavMesh:findPath(${1:Vec3 &start},${2:Vec3 &end},${3:std:vector<Vec3> &pathPoints})"
			],
			"description": "void cocos2d::NavMesh::findPath(const Vec3 &start, const Vec3 &end, std::vector<Vec3> &pathPoints)"
		},
		 "void Vec4::normalize()": {
			"prefix": "void Vec4::normalize()",
			"body": [
				"void Vec4:normalize()"
			],
			"description": "void Vec4::normalize()"
		},
		 "void SIOClientImpl::addClient(const std::string& endpoint, SIOClient* client)": {
			"prefix": "void SIOClientImpl::addClient(const std::string& endpoint, SIOClient* client)",
			"body": [
				"SIOClientImpl:addClient(${1:std:string& endpoint},${2:SIOClient* client})"
			],
			"description": "void SIOClientImpl::addClient(const std::string& endpoint, SIOClient* client)"
		},
		 "float ActionObject::getCurrentTime()": {
			"prefix": "float ActionObject::getCurrentTime()",
			"body": [
				"float ActionObject:getCurrentTime()"
			],
			"description": "float ActionObject::getCurrentTime()"
		},
		 "void CCBKeyframe::setValue(const Value& value)": {
			"prefix": "void CCBKeyframe::setValue(const Value& value)",
			"body": [
				"CCBKeyframe:setValue(${1:Value& value})"
			],
			"description": "void CCBKeyframe::setValue(const Value& value)"
		},
		 "int PhysicsWorldCallback::collisionBeginCallbackFunc(cpArbiter *arb, struct cpSpace *space, PhysicsWorld *world)": {
			"prefix": "int PhysicsWorldCallback::collisionBeginCallbackFunc(cpArbiter *arb, struct cpSpace *space, PhysicsWorld *world)",
			"body": [
				"PhysicsWorldCallback:collisionBeginCallbackFunc(${1:cpArbiter *arb},${2:struct cpSpace *space},${3:PhysicsWorld *world})"
			],
			"description": "int PhysicsWorldCallback::collisionBeginCallbackFunc(cpArbiter *arb, struct cpSpace *space, PhysicsWorld *world)"
		},
		 "EaseQuadraticActionInOut* EaseQuadraticActionInOut::create(ActionInterval* action)": {
			"prefix": "EaseQuadraticActionInOut* EaseQuadraticActionInOut::create(ActionInterval* action)",
			"body": [
				"EaseQuadraticActionInOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseQuadraticActionInOut* EaseQuadraticActionInOut::create(ActionInterval* action)"
		},
		 "TextBMFont* TextBMFont::create()": {
			"prefix": "TextBMFont* TextBMFont::create()",
			"body": [
				"TextBMFont* TextBMFont:create()"
			],
			"description": "TextBMFont* TextBMFont::create()"
		},
		 "std::vector<Node*> findChildren(const Node &node, const std::string &name)": {
			"prefix": "std::vector<Node*> findChildren(const Node &node, const std::string &name)",
			"body": [
				"findChildren(${1:Node &node},${2:std:string &name})"
			],
			"description": "std::vector<Node*> findChildren(const Node &node, const std::string &name)"
		},
		 "bool Node::removeComponent(Component *component)": {
			"prefix": "bool Node::removeComponent(Component *component)",
			"body": [
				"Node:removeComponent(${1:Component *component})"
			],
			"description": "bool Node::removeComponent(Component *component)"
		},
		 "PhysicsBody* PhysicsBody::create()": {
			"prefix": "PhysicsBody* PhysicsBody::create()",
			"body": [
				"PhysicsBody* PhysicsBody:create()"
			],
			"description": "PhysicsBody* PhysicsBody::create()"
		},
		 "void Renderer::flushQuads()": {
			"prefix": "void Renderer::flushQuads()",
			"body": [
				"void Renderer:flushQuads()"
			],
			"description": "void Renderer::flushQuads()"
		},
		 "Sprite* Sprite::create(const std::string& filename, const Rect& rect)": {
			"prefix": "Sprite* Sprite::create(const std::string& filename, const Rect& rect)",
			"body": [
				"Sprite:create(${1:std:string& filename},${2:Rect& rect})"
			],
			"description": "Sprite* Sprite::create(const std::string& filename, const Rect& rect)"
		},
		 "void StopGrid::startWithTarget(Node *target)": {
			"prefix": "void StopGrid::startWithTarget(Node *target)",
			"body": [
				"StopGrid:startWithTarget(${1:Node *target})"
			],
			"description": "void StopGrid::startWithTarget(Node *target)"
		},
		 "struct TextureCache::AsyncStruct": {
			"prefix": "struct TextureCache::AsyncStruct",
			"body": [
				"struct TextureCache:AsyncStruct"
			],
			"description": "struct TextureCache::AsyncStruct"
		},
		 "void OrbitCamera::update(float dt)": {
			"prefix": "void OrbitCamera::update(float dt)",
			"body": [
				"OrbitCamera:update(${1:float dt})"
			],
			"description": "void OrbitCamera::update(float dt)"
		},
		 "void AbstractCheckButton::loadTextureFrontCrossDisabled(const std::string& frontCrossDisabled,TextureResType texType)": {
			"prefix": "void AbstractCheckButton::loadTextureFrontCrossDisabled(const std::string& frontCrossDisabled,TextureResType texType)",
			"body": [
				"AbstractCheckButton:loadTextureFrontCrossDisabled(${1:std:string& frontCrossDisabled},${2:TextureResType texType})"
			],
			"description": "void AbstractCheckButton::loadTextureFrontCrossDisabled(const std::string& frontCrossDisabled,TextureResType texType)"
		},
		 "float ComAudio::getBackgroundMusicVolume()": {
			"prefix": "float ComAudio::getBackgroundMusicVolume()",
			"body": [
				"float ComAudio:getBackgroundMusicVolume()"
			],
			"description": "float ComAudio::getBackgroundMusicVolume()"
		},
		 "void Mat4::negate()": {
			"prefix": "void Mat4::negate()",
			"body": [
				"void Mat4:negate()"
			],
			"description": "void Mat4::negate()"
		},
		 "void DrawNode::drawPoly(const Vec2 *poli, unsigned int numberOfPoints, bool closePolygon, const Color4F &color)": {
			"prefix": "void DrawNode::drawPoly(const Vec2 *poli, unsigned int numberOfPoints, bool closePolygon, const Color4F &color)",
			"body": [
				"DrawNode:drawPoly(${1:Vec2 *poli},${2:unsigned int numberOfPoints},${3:bool closePolygon},${4:Color4F &color})"
			],
			"description": "void DrawNode::drawPoly(const Vec2 *poli, unsigned int numberOfPoints, bool closePolygon, const Color4F &color)"
		},
		 "void FlipY::update(float time)": {
			"prefix": "void FlipY::update(float time)",
			"body": [
				"FlipY:update(${1:float time})"
			],
			"description": "void FlipY::update(float time)"
		},
		 "std::string Value::getDescription() const": {
			"prefix": "std::string Value::getDescription() const",
			"body": [
				"std:string Value:getDescription() "
			],
			"description": "std::string Value::getDescription() const"
		},
		 "EventListenerController* EventListenerController::clone()": {
			"prefix": "EventListenerController* EventListenerController::clone()",
			"body": [
				"EventListenerController* EventListenerController:clone()"
			],
			"description": "EventListenerController* EventListenerController::clone()"
		},
		 "Widget* ListView::getItem(ssize_t index)const": {
			"prefix": "Widget* ListView::getItem(ssize_t index)const",
			"body": [
				"ListView:getItem(${1:ssize_t index})"
			],
			"description": "Widget* ListView::getItem(ssize_t index)const"
		},
		 "b2Body *ColliderDetector::getBody() const": {
			"prefix": "b2Body *ColliderDetector::getBody() const",
			"body": [
				"b2Body *ColliderDetector:getBody() "
			],
			"description": "b2Body *ColliderDetector::getBody() const"
		},
		 "bool EventDispatcher::EventListenerVector::empty() const": {
			"prefix": "bool EventDispatcher::EventListenerVector::empty() const",
			"body": [
				"bool EventDispatcher:EventListenerVector:empty() "
			],
			"description": "bool EventDispatcher::EventListenerVector::empty() const"
		},
		 "ActionManagerEx* ActionManagerEx::getInstance()": {
			"prefix": "ActionManagerEx* ActionManagerEx::getInstance()",
			"body": [
				"ActionManagerEx* ActionManagerEx:getInstance()"
			],
			"description": "ActionManagerEx* ActionManagerEx::getInstance()"
		},
		 "void PageTurn3D::update(float time)": {
			"prefix": "void PageTurn3D::update(float time)",
			"body": [
				"PageTurn3D:update(${1:float time})"
			],
			"description": "void PageTurn3D::update(float time)"
		},
		 "std::string FileUtils::getNewFilename(const std::string &filename) const": {
			"prefix": "std::string FileUtils::getNewFilename(const std::string &filename) const",
			"body": [
				"FileUtils:getNewFilename(${1:std:string &filename})"
			],
			"description": "std::string FileUtils::getNewFilename(const std::string &filename) const"
		},
		 "void Skin::setSkinData(const BaseData &var)": {
			"prefix": "void Skin::setSkinData(const BaseData &var)",
			"body": [
				"Skin:setSkinData(${1:BaseData &var})"
			],
			"description": "void Skin::setSkinData(const BaseData &var)"
		},
		 "void PhysicsWorld::doRemoveJoint(PhysicsJoint* joint)": {
			"prefix": "void PhysicsWorld::doRemoveJoint(PhysicsJoint* joint)",
			"body": [
				"PhysicsWorld:doRemoveJoint(${1:PhysicsJoint* joint})"
			],
			"description": "void PhysicsWorld::doRemoveJoint(PhysicsJoint* joint)"
		},
		 "void ColliderDetector::setBody(b2Body *pBody)": {
			"prefix": "void ColliderDetector::setBody(b2Body *pBody)",
			"body": [
				"ColliderDetector:setBody(${1:b2Body *pBody})"
			],
			"description": "void ColliderDetector::setBody(b2Body *pBody)"
		},
		 "const std::string& TextFieldTTF::getContentText()": {
			"prefix": "const std::string& TextFieldTTF::getContentText()",
			"body": [
				" std:string& TextFieldTTF:getContentText()"
			],
			"description": "const std::string& TextFieldTTF::getContentText()"
		},
		 "float * NodeLoader::parsePropTypeFloatXY(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "float * NodeLoader::parsePropTypeFloatXY(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"* NodeLoader:parsePropTypeFloatXY(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "float * NodeLoader::parsePropTypeFloatXY(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "PhysicsShapePolygon* PhysicsShapePolygon::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)": {
			"prefix": "PhysicsShapePolygon* PhysicsShapePolygon::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)",
			"body": [
				"PhysicsShapePolygon:create(${1:Vec2* points},${2:int count},${3:PhysicsMaterial& material/* = MaterialDefault*/},${4:Vec2& offset/* = Vec2(0},${5:0})"
			],
			"description": "PhysicsShapePolygon* PhysicsShapePolygon::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)"
		},
		 "void Profiler::releaseAllTimers()": {
			"prefix": "void Profiler::releaseAllTimers()",
			"body": [
				"void Profiler:releaseAllTimers()"
			],
			"description": "void Profiler::releaseAllTimers()"
		},
		 "void ActionNode::easingToFrame(float duration,float delayTime,ActionFrame* srcFrame,ActionFrame* destFrame)": {
			"prefix": "void ActionNode::easingToFrame(float duration,float delayTime,ActionFrame* srcFrame,ActionFrame* destFrame)",
			"body": [
				"ActionNode:easingToFrame(${1:float duration},${2:float delayTime},${3:ActionFrame* srcFrame},${4:ActionFrame* destFrame})"
			],
			"description": "void ActionNode::easingToFrame(float duration,float delayTime,ActionFrame* srcFrame,ActionFrame* destFrame)"
		},
		 "Profiler* Profiler::sharedProfiler(void)": {
			"prefix": "Profiler* Profiler::sharedProfiler(void)",
			"body": [
				"Profiler:sharedProfiler(${1:void})"
			],
			"description": "Profiler* Profiler::sharedProfiler(void)"
		},
		 "void CCBReader::setAnimationManager(CCBAnimationManager *pAnimationManager)": {
			"prefix": "void CCBReader::setAnimationManager(CCBAnimationManager *pAnimationManager)",
			"body": [
				"CCBReader:setAnimationManager(${1:CCBAnimationManager *pAnimationManager})"
			],
			"description": "void CCBReader::setAnimationManager(CCBAnimationManager *pAnimationManager)"
		},
		 "void __Array::removeObjectsInArray(__Array* otherArray)": {
			"prefix": "void __Array::removeObjectsInArray(__Array* otherArray)",
			"body": [
				"__Array:removeObjectsInArray(${1:__Array* otherArray})"
			],
			"description": "void __Array::removeObjectsInArray(__Array* otherArray)"
		},
		 "void WidgetPropertiesReader0250::setPropsForAllWidgetFromJsonDictionary(WidgetReaderProtocol *reader, Widget *widget, const rapidjson::Value &options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForAllWidgetFromJsonDictionary(WidgetReaderProtocol *reader, Widget *widget, const rapidjson::Value &options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForAllWidgetFromJsonDictionary(${1:WidgetReaderProtocol *reader},${2:Widget *widget},${3:rapidjson:Value &options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForAllWidgetFromJsonDictionary(WidgetReaderProtocol *reader, Widget *widget, const rapidjson::Value &options)"
		},
		 "Node* CSLoader::loadSimpleNode(const rapidjson::Value& json)": {
			"prefix": "Node* CSLoader::loadSimpleNode(const rapidjson::Value& json)",
			"body": [
				"CSLoader:loadSimpleNode(${1:rapidjson:Value& json})"
			],
			"description": "Node* CSLoader::loadSimpleNode(const rapidjson::Value& json)"
		},
		 "int TextField::getStringLength() const": {
			"prefix": "int TextField::getStringLength() const",
			"body": [
				"int TextField:getStringLength() "
			],
			"description": "int TextField::getStringLength() const"
		},
		 "Widget* Slider::createCloneInstance()": {
			"prefix": "Widget* Slider::createCloneInstance()",
			"body": [
				"Widget* Slider:createCloneInstance()"
			],
			"description": "Widget* Slider::createCloneInstance()"
		},
		 "void ActionTimeline::resume()": {
			"prefix": "void ActionTimeline::resume()",
			"body": [
				"void ActionTimeline:resume()"
			],
			"description": "void ActionTimeline::resume()"
		},
		 "void ListView::addEventListenerListView(Ref *target, SEL_ListViewEvent selector)": {
			"prefix": "void ListView::addEventListenerListView(Ref *target, SEL_ListViewEvent selector)",
			"body": [
				"ListView:addEventListenerListView(${1:Ref *target},${2:SEL_ListViewEvent selector})"
			],
			"description": "void ListView::addEventListenerListView(Ref *target, SEL_ListViewEvent selector)"
		},
		 "void __Array::exchangeObject(Ref* object1, Ref* object2)": {
			"prefix": "void __Array::exchangeObject(Ref* object1, Ref* object2)",
			"body": [
				"__Array:exchangeObject(${1:Ref* object1},${2:Ref* object2})"
			],
			"description": "void __Array::exchangeObject(Ref* object1, Ref* object2)"
		},
		 "Scene* Scene::createWithPhysics()": {
			"prefix": "Scene* Scene::createWithPhysics()",
			"body": [
				"Scene* Scene:createWithPhysics()"
			],
			"description": "Scene* Scene::createWithPhysics()"
		},
		 "void Scheduler::unscheduleUpdate(void *target)": {
			"prefix": "void Scheduler::unscheduleUpdate(void *target)",
			"body": [
				"Scheduler:unscheduleUpdate(${1:void *target})"
			],
			"description": "void Scheduler::unscheduleUpdate(void *target)"
		},
		 "void Value::clear()": {
			"prefix": "void Value::clear()",
			"body": [
				"void Value:clear()"
			],
			"description": "void Value::clear()"
		},
		 "void PhysicsShape::setGroup(int group)": {
			"prefix": "void PhysicsShape::setGroup(int group)",
			"body": [
				"PhysicsShape:setGroup(${1:int group})"
			],
			"description": "void PhysicsShape::setGroup(int group)"
		},
		 "void AsyncTaskPool::destoryInstance()": {
			"prefix": "void AsyncTaskPool::destoryInstance()",
			"body": [
				"void AsyncTaskPool:destoryInstance()"
			],
			"description": "void AsyncTaskPool::destoryInstance()"
		},
		 "void Renderer::render()": {
			"prefix": "void Renderer::render()",
			"body": [
				"void Renderer:render()"
			],
			"description": "void Renderer::render()"
		},
		 "ExtraAction* ExtraAction::reverse() const": {
			"prefix": "ExtraAction* ExtraAction::reverse() const",
			"body": [
				"ExtraAction* ExtraAction:reverse() "
			],
			"description": "ExtraAction* ExtraAction::reverse() const"
		},
		 "void LayerMultiplex::addLayer(Layer* layer)": {
			"prefix": "void LayerMultiplex::addLayer(Layer* layer)",
			"body": [
				"LayerMultiplex:addLayer(${1:Layer* layer})"
			],
			"description": "void LayerMultiplex::addLayer(Layer* layer)"
		},
		 "CCBSetSpriteFrame* CCBSetSpriteFrame::create(SpriteFrame *pSpriteFrame)": {
			"prefix": "CCBSetSpriteFrame* CCBSetSpriteFrame::create(SpriteFrame *pSpriteFrame)",
			"body": [
				"CCBSetSpriteFrame:create(${1:SpriteFrame *pSpriteFrame})"
			],
			"description": "CCBSetSpriteFrame* CCBSetSpriteFrame::create(SpriteFrame *pSpriteFrame)"
		},
		 "Skeleton3D* Skeleton3D::create(const std::vector<NodeData*>& skeletondata)": {
			"prefix": "Skeleton3D* Skeleton3D::create(const std::vector<NodeData*>& skeletondata)",
			"body": [
				"Skeleton3D:create(${1:std:vector<NodeData*>& skeletondata})"
			],
			"description": "Skeleton3D* Skeleton3D::create(const std::vector<NodeData*>& skeletondata)"
		},
		 "std::string FileUtilsAndroid::getNewFilename(const std::string &filename) const": {
			"prefix": "std::string FileUtilsAndroid::getNewFilename(const std::string &filename) const",
			"body": [
				"FileUtilsAndroid:getNewFilename(${1:std:string &filename})"
			],
			"description": "std::string FileUtilsAndroid::getNewFilename(const std::string &filename) const"
		},
		 "ActionTimeline* ActionTimelineCache::createActionWithFlatBuffersForSimulator(const std::string& fileName)": {
			"prefix": "ActionTimeline* ActionTimelineCache::createActionWithFlatBuffersForSimulator(const std::string& fileName)",
			"body": [
				"ActionTimelineCache:createActionWithFlatBuffersForSimulator(${1:std:string& fileName})"
			],
			"description": "ActionTimeline* ActionTimelineCache::createActionWithFlatBuffersForSimulator(const std::string& fileName)"
		},
		 "void Camera::lookAt(const Vec3& lookAtPos, const Vec3& up)": {
			"prefix": "void Camera::lookAt(const Vec3& lookAtPos, const Vec3& up)",
			"body": [
				"Camera:lookAt(${1:Vec3& lookAtPos},${2:Vec3& up})"
			],
			"description": "void Camera::lookAt(const Vec3& lookAtPos, const Vec3& up)"
		},
		 "void TriggerMng::removeAllArmatureMovementCallBack()": {
			"prefix": "void TriggerMng::removeAllArmatureMovementCallBack()",
			"body": [
				"void TriggerMng:removeAllArmatureMovementCallBack()"
			],
			"description": "void TriggerMng::removeAllArmatureMovementCallBack()"
		},
		 "bool VertexBuffer::init(int sizePerVertex, int vertexNumber, GLenum usage/* = GL_STATIC_DRAW*/)": {
			"prefix": "bool VertexBuffer::init(int sizePerVertex, int vertexNumber, GLenum usage/* = GL_STATIC_DRAW*/)",
			"body": [
				"VertexBuffer:init(${1:int sizePerVertex},${2:int vertexNumber},${3:GLenum usage/* = GL_STATIC_DRAW*/})"
			],
			"description": "bool VertexBuffer::init(int sizePerVertex, int vertexNumber, GLenum usage/* = GL_STATIC_DRAW*/)"
		},
		 "void RenderState::StateBlock::setDepthWrite(bool enabled)": {
			"prefix": "void RenderState::StateBlock::setDepthWrite(bool enabled)",
			"body": [
				"RenderState:StateBlock:setDepthWrite(${1:bool enabled})"
			],
			"description": "void RenderState::StateBlock::setDepthWrite(bool enabled)"
		},
		 "int Node::getOrderOfArrival() const": {
			"prefix": "int Node::getOrderOfArrival() const",
			"body": [
				"int Node:getOrderOfArrival() "
			],
			"description": "int Node::getOrderOfArrival() const"
		},
		 "void Camera::applyViewport()": {
			"prefix": "void Camera::applyViewport()",
			"body": [
				"void Camera:applyViewport()"
			],
			"description": "void Camera::applyViewport()"
		},
		 "static std::string getTabs(int depth)": {
			"prefix": "static std::string getTabs(int depth)",
			"body": [
				"std:string getTabs(${1:int depth})"
			],
			"description": "static std::string getTabs(int depth)"
		},
		 "bool ContourData::init()": {
			"prefix": "bool ContourData::init()",
			"body": [
				"bool ContourData:init()"
			],
			"description": "bool ContourData::init()"
		},
		 "void AbstractCheckButton::setZoomScale(float scale)": {
			"prefix": "void AbstractCheckButton::setZoomScale(float scale)",
			"body": [
				"AbstractCheckButton:setZoomScale(${1:float scale})"
			],
			"description": "void AbstractCheckButton::setZoomScale(float scale)"
		},
		 "void UserDefault::setStringForKey(const char* pKey, const std::string & value)": {
			"prefix": "void UserDefault::setStringForKey(const char* pKey, const std::string & value)",
			"body": [
				"UserDefault:setStringForKey(${1:char* pKey},${2:std:string & value})"
			],
			"description": "void UserDefault::setStringForKey(const char* pKey, const std::string & value)"
		},
		 "void Vec4::set(const Vec4& v)": {
			"prefix": "void Vec4::set(const Vec4& v)",
			"body": [
				"Vec4:set(${1:Vec4& v})"
			],
			"description": "void Vec4::set(const Vec4& v)"
		},
		 "void PageView::updateAllPagesPosition()": {
			"prefix": "void PageView::updateAllPagesPosition()",
			"body": [
				"void PageView:updateAllPagesPosition()"
			],
			"description": "void PageView::updateAllPagesPosition()"
		},
		 "void Director::setGLDefaultValues()": {
			"prefix": "void Director::setGLDefaultValues()",
			"body": [
				"void Director:setGLDefaultValues()"
			],
			"description": "void Director::setGLDefaultValues()"
		},
		 "void ParticleSystemQuad::setBatchNode(ParticleBatchNode * batchNode)": {
			"prefix": "void ParticleSystemQuad::setBatchNode(ParticleBatchNode * batchNode)",
			"body": [
				"ParticleSystemQuad:setBatchNode(${1:ParticleBatchNode * batchNode})"
			],
			"description": "void ParticleSystemQuad::setBatchNode(ParticleBatchNode * batchNode)"
		},
		 "bool Terrain::initHeightMap(const char * heightMap)": {
			"prefix": "bool Terrain::initHeightMap(const char * heightMap)",
			"body": [
				"Terrain:initHeightMap(${1:char * heightMap})"
			],
			"description": "bool Terrain::initHeightMap(const char * heightMap)"
		},
		 "EaseCircleActionInOut* EaseCircleActionInOut::create(ActionInterval* action)": {
			"prefix": "EaseCircleActionInOut* EaseCircleActionInOut::create(ActionInterval* action)",
			"body": [
				"EaseCircleActionInOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseCircleActionInOut* EaseCircleActionInOut::create(ActionInterval* action)"
		},
		 "const std::string& TextField::getPlaceHolder()const": {
			"prefix": "const std::string& TextField::getPlaceHolder()const",
			"body": [
				" std:string& TextField:getPlaceHolder()"
			],
			"description": "const std::string& TextField::getPlaceHolder()const"
		},
		 "void TextAtlas::adaptRenderers()": {
			"prefix": "void TextAtlas::adaptRenderers()",
			"body": [
				"void TextAtlas:adaptRenderers()"
			],
			"description": "void TextAtlas::adaptRenderers()"
		},
		 "float Node::getScaleY() const": {
			"prefix": "float Node::getScaleY() const",
			"body": [
				"float Node:getScaleY() "
			],
			"description": "float Node::getScaleY() const"
		},
		 "CCBAnimationManager* CCBReader::getAnimationManager()": {
			"prefix": "CCBAnimationManager* CCBReader::getAnimationManager()",
			"body": [
				"CCBAnimationManager* CCBReader:getAnimationManager()"
			],
			"description": "CCBAnimationManager* CCBReader::getAnimationManager()"
		},
		 "void PhysicsJoint::removeFormWorld()": {
			"prefix": "void PhysicsJoint::removeFormWorld()",
			"body": [
				"void PhysicsJoint:removeFormWorld()"
			],
			"description": "void PhysicsJoint::removeFormWorld()"
		},
		 "int Value::asInt() const": {
			"prefix": "int Value::asInt() const",
			"body": [
				"int Value:asInt() "
			],
			"description": "int Value::asInt() const"
		},
		 "AudioProfile* AudioEngine::getProfile(int audioID)": {
			"prefix": "AudioProfile* AudioEngine::getProfile(int audioID)",
			"body": [
				"AudioEngine:getProfile(${1:int audioID})"
			],
			"description": "AudioProfile* AudioEngine::getProfile(int audioID)"
		},
		 "void PhysicsContactPreSolve::setFriction(float friction)": {
			"prefix": "void PhysicsContactPreSolve::setFriction(float friction)",
			"body": [
				"PhysicsContactPreSolve:setFriction(${1:float friction})"
			],
			"description": "void PhysicsContactPreSolve::setFriction(float friction)"
		},
		 "void InputDelegate::setAccelerometerEnabled(bool enabled)": {
			"prefix": "void InputDelegate::setAccelerometerEnabled(bool enabled)",
			"body": [
				"InputDelegate:setAccelerometerEnabled(${1:bool enabled})"
			],
			"description": "void InputDelegate::setAccelerometerEnabled(bool enabled)"
		},
		 "static std::string visitVector(const ValueVector& v, int depth)": {
			"prefix": "static std::string visitVector(const ValueVector& v, int depth)",
			"body": [
				"std:string visitVector(${1:ValueVector& v},${2:int depth})"
			],
			"description": "static std::string visitVector(const ValueVector& v, int depth)"
		},
		 "float Physics3DSliderConstraint::getRestitutionOrthoLin() const": {
			"prefix": "float Physics3DSliderConstraint::getRestitutionOrthoLin() const",
			"body": [
				"float Physics3DSliderConstraint:getRestitutionOrthoLin() "
			],
			"description": "float Physics3DSliderConstraint::getRestitutionOrthoLin() const"
		},
		 "void ArmatureAnimation::updateHandler()": {
			"prefix": "void ArmatureAnimation::updateHandler()",
			"body": [
				"void ArmatureAnimation:updateHandler()"
			],
			"description": "void ArmatureAnimation::updateHandler()"
		},
		 "float Widget::getBottomBoundary() const": {
			"prefix": "float Widget::getBottomBoundary() const",
			"body": [
				"float Widget:getBottomBoundary() "
			],
			"description": "float Widget::getBottomBoundary() const"
		},
		 "bool CardinalSplineTo::initWithDuration(float duration, cocos2d::PointArray *points, float tension)": {
			"prefix": "bool CardinalSplineTo::initWithDuration(float duration, cocos2d::PointArray *points, float tension)",
			"body": [
				"CardinalSplineTo:initWithDuration(${1:float duration},${2:cocos2d:PointArray *points},${3:float tension})"
			],
			"description": "bool CardinalSplineTo::initWithDuration(float duration, cocos2d::PointArray *points, float tension)"
		},
		 "unsigned char* FileUtilsWin32::getFileData(const std::string& filename, const char* mode, ssize_t* size)": {
			"prefix": "unsigned char* FileUtilsWin32::getFileData(const std::string& filename, const char* mode, ssize_t* size)",
			"body": [
				"char* FileUtilsWin32:getFileData(${1:std:string& filename},${2:char* mode},${3:ssize_t* size})"
			],
			"description": "unsigned char* FileUtilsWin32::getFileData(const std::string& filename, const char* mode, ssize_t* size)"
		},
		 "void Sprite3D::setTexture(Texture2D* texture)": {
			"prefix": "void Sprite3D::setTexture(Texture2D* texture)",
			"body": [
				"Sprite3D:setTexture(${1:Texture2D* texture})"
			],
			"description": "void Sprite3D::setTexture(Texture2D* texture)"
		},
		 "ProgressFromTo* ProgressFromTo::create(float duration, float fromPercentage, float toPercentage)": {
			"prefix": "ProgressFromTo* ProgressFromTo::create(float duration, float fromPercentage, float toPercentage)",
			"body": [
				"ProgressFromTo:create(${1:float duration},${2:float fromPercentage},${3:float toPercentage})"
			],
			"description": "ProgressFromTo* ProgressFromTo::create(float duration, float fromPercentage, float toPercentage)"
		},
		 "void PhysicsJointRatchet::setRatchet(float ratchet)": {
			"prefix": "void PhysicsJointRatchet::setRatchet(float ratchet)",
			"body": [
				"PhysicsJointRatchet:setRatchet(${1:float ratchet})"
			],
			"description": "void PhysicsJointRatchet::setRatchet(float ratchet)"
		},
		 "void Layout::removeChild(Node *child, bool cleanup)": {
			"prefix": "void Layout::removeChild(Node *child, bool cleanup)",
			"body": [
				"Layout:removeChild(${1:Node *child},${2:bool cleanup})"
			],
			"description": "void Layout::removeChild(Node *child, bool cleanup)"
		},
		 "Vec2 NinePatchImageParser::parseVerticalMargin()const": {
			"prefix": "Vec2 NinePatchImageParser::parseVerticalMargin()const",
			"body": [
				"Vec2 NinePatchImageParser:parseVerticalMargin()"
			],
			"description": "Vec2 NinePatchImageParser::parseVerticalMargin()const"
		},
		 "EaseBounceIn* EaseBounceIn::create(ActionInterval* action)": {
			"prefix": "EaseBounceIn* EaseBounceIn::create(ActionInterval* action)",
			"body": [
				"EaseBounceIn:create(${1:ActionInterval* action})"
			],
			"description": "EaseBounceIn* EaseBounceIn::create(ActionInterval* action)"
		},
		 "double UserDefault::getDoubleForKey(const char* pKey, double defaultValue)": {
			"prefix": "double UserDefault::getDoubleForKey(const char* pKey, double defaultValue)",
			"body": [
				"UserDefault:getDoubleForKey(${1:char* pKey},${2:double defaultValue})"
			],
			"description": "double UserDefault::getDoubleForKey(const char* pKey, double defaultValue)"
		},
		 "void GLProgram::setUniformLocationWith4i(GLint location, GLint i1, GLint i2, GLint i3, GLint i4)": {
			"prefix": "void GLProgram::setUniformLocationWith4i(GLint location, GLint i1, GLint i2, GLint i3, GLint i4)",
			"body": [
				"GLProgram:setUniformLocationWith4i(${1:GLint location},${2:GLint i1},${3:GLint i2},${4:GLint i3},${5:GLint i4})"
			],
			"description": "void GLProgram::setUniformLocationWith4i(GLint location, GLint i1, GLint i2, GLint i3, GLint i4)"
		},
		 "void PhysicsJointSpring::setDamping(float damping)": {
			"prefix": "void PhysicsJointSpring::setDamping(float damping)",
			"body": [
				"PhysicsJointSpring:setDamping(${1:float damping})"
			],
			"description": "void PhysicsJointSpring::setDamping(float damping)"
		},
		 "void ProcessBase::resume()": {
			"prefix": "void ProcessBase::resume()",
			"body": [
				"void ProcessBase:resume()"
			],
			"description": "void ProcessBase::resume()"
		},
		 "void VideoPlayer::setFileName(const std::string& fileName)": {
			"prefix": "void VideoPlayer::setFileName(const std::string& fileName)",
			"body": [
				"VideoPlayer:setFileName(${1:std:string& fileName})"
			],
			"description": "void VideoPlayer::setFileName(const std::string& fileName)"
		},
		 "void Sprite3D::removeAllAttachNode()": {
			"prefix": "void Sprite3D::removeAllAttachNode()",
			"body": [
				"void Sprite3D:removeAllAttachNode()"
			],
			"description": "void Sprite3D::removeAllAttachNode()"
		},
		 "void ParticleSystem::initParticle(tParticle* particle)": {
			"prefix": "void ParticleSystem::initParticle(tParticle* particle)",
			"body": [
				"ParticleSystem:initParticle(${1:tParticle* particle})"
			],
			"description": "void ParticleSystem::initParticle(tParticle* particle)"
		},
		 "TextureCache * TextureCache::getInstance()": {
			"prefix": "TextureCache * TextureCache::getInstance()",
			"body": [
				"TextureCache * TextureCache:getInstance()"
			],
			"description": "TextureCache * TextureCache::getInstance()"
		},
		 "DictionaryHelper* DictionaryHelper::getInstance()": {
			"prefix": "DictionaryHelper* DictionaryHelper::getInstance()",
			"body": [
				"DictionaryHelper* DictionaryHelper:getInstance()"
			],
			"description": "DictionaryHelper* DictionaryHelper::getInstance()"
		},
		 "void NodeLoaderLibrary::purge(bool pReleaseNodeLoaders)": {
			"prefix": "void NodeLoaderLibrary::purge(bool pReleaseNodeLoaders)",
			"body": [
				"NodeLoaderLibrary:purge(${1:bool pReleaseNodeLoaders})"
			],
			"description": "void NodeLoaderLibrary::purge(bool pReleaseNodeLoaders)"
		},
		 "void PrettyPrinter::visit(const __Dictionary *p)": {
			"prefix": "void PrettyPrinter::visit(const __Dictionary *p)",
			"body": [
				"PrettyPrinter:visit(${1:__Dictionary *p})"
			],
			"description": "void PrettyPrinter::visit(const __Dictionary *p)"
		},
		 "Physics3DShape* Physics3DShape::createSphere(float radius)": {
			"prefix": "Physics3DShape* Physics3DShape::createSphere(float radius)",
			"body": [
				"Physics3DShape:createSphere(${1:float radius})"
			],
			"description": "Physics3DShape* Physics3DShape::createSphere(float radius)"
		},
		 "Margin::Margin(float l, float t, float r, float b) : left(l), top(t), right(r), bottom(b)": {
			"prefix": "Margin::Margin(float l, float t, float r, float b) : left(l), top(t), right(r), bottom(b)",
			"body": [
				"l},${2:float t},${3:float r},${4:float b})"
			],
			"description": "Margin::Margin(float l, float t, float r, float b) : left(l), top(t), right(r), bottom(b)"
		},
		 "void Physics3DSliderConstraint::setUpperAngLimit(float upperLimit)": {
			"prefix": "void Physics3DSliderConstraint::setUpperAngLimit(float upperLimit)",
			"body": [
				"Physics3DSliderConstraint:setUpperAngLimit(${1:float upperLimit})"
			],
			"description": "void Physics3DSliderConstraint::setUpperAngLimit(float upperLimit)"
		},
		 "IMEDispatcher* IMEDispatcher::sharedDispatcher()": {
			"prefix": "IMEDispatcher* IMEDispatcher::sharedDispatcher()",
			"body": [
				"IMEDispatcher* IMEDispatcher:sharedDispatcher()"
			],
			"description": "IMEDispatcher* IMEDispatcher::sharedDispatcher()"
		},
		 "Vec2 Node::convertToWorldSpace(const Vec2& nodePoint) const": {
			"prefix": "Vec2 Node::convertToWorldSpace(const Vec2& nodePoint) const",
			"body": [
				"Node:convertToWorldSpace(${1:Vec2& nodePoint})"
			],
			"description": "Vec2 Node::convertToWorldSpace(const Vec2& nodePoint) const"
		},
		 "void PageView::setDirection(cocos2d::ui::PageView::Direction direction)": {
			"prefix": "void PageView::setDirection(cocos2d::ui::PageView::Direction direction)",
			"body": [
				"PageView:setDirection(${1:cocos2d:ui:PageView:Direction direction})"
			],
			"description": "void PageView::setDirection(cocos2d::ui::PageView::Direction direction)"
		},
		 "void ProtectedNode::cleanup()": {
			"prefix": "void ProtectedNode::cleanup()",
			"body": [
				"void ProtectedNode:cleanup()"
			],
			"description": "void ProtectedNode::cleanup()"
		},
		 "void Mat4::set(const Mat4& mat)": {
			"prefix": "void Mat4::set(const Mat4& mat)",
			"body": [
				"Mat4:set(${1:Mat4& mat})"
			],
			"description": "void Mat4::set(const Mat4& mat)"
		},
		 "bool EaseRateAction::initWithAction(ActionInterval *action, float rate)": {
			"prefix": "bool EaseRateAction::initWithAction(ActionInterval *action, float rate)",
			"body": [
				"EaseRateAction:initWithAction(${1:ActionInterval *action},${2:float rate})"
			],
			"description": "bool EaseRateAction::initWithAction(ActionInterval *action, float rate)"
		},
		 "RotateTo* RotateTo::create(float duration, float dstAngleX, float dstAngleY)": {
			"prefix": "RotateTo* RotateTo::create(float duration, float dstAngleX, float dstAngleY)",
			"body": [
				"RotateTo:create(${1:float duration},${2:float dstAngleX},${3:float dstAngleY})"
			],
			"description": "RotateTo* RotateTo::create(float duration, float dstAngleX, float dstAngleY)"
		},
		 "std::string FileUtilsAndroid::getStringFromFile(const std::string& filename)": {
			"prefix": "std::string FileUtilsAndroid::getStringFromFile(const std::string& filename)",
			"body": [
				"FileUtilsAndroid:getStringFromFile(${1:std:string& filename})"
			],
			"description": "std::string FileUtilsAndroid::getStringFromFile(const std::string& filename)"
		},
		 "cocos2d::Node* CSLoader::createNode(const Data data)": {
			"prefix": "cocos2d::Node* CSLoader::createNode(const Data data)",
			"body": [
				"CSLoader:createNode(${1:Data data})"
			],
			"description": "cocos2d::Node* CSLoader::createNode(const Data data)"
		},
		 "void ComAudio::pauseBackgroundMusic()": {
			"prefix": "void ComAudio::pauseBackgroundMusic()",
			"body": [
				"void ComAudio:pauseBackgroundMusic()"
			],
			"description": "void ComAudio::pauseBackgroundMusic()"
		},
		 "uint32_t RenderState::StateBlock::getHash() const": {
			"prefix": "uint32_t RenderState::StateBlock::getHash() const",
			"body": [
				"uint32_t RenderState:StateBlock:getHash() "
			],
			"description": "uint32_t RenderState::StateBlock::getHash() const"
		},
		 "void GLProgramState::setUniformFloatv(GLint uniformLocation, ssize_t size, const float* pointer)": {
			"prefix": "void GLProgramState::setUniformFloatv(GLint uniformLocation, ssize_t size, const float* pointer)",
			"body": [
				"GLProgramState:setUniformFloatv(${1:GLint uniformLocation},${2:ssize_t size},${3:float* pointer})"
			],
			"description": "void GLProgramState::setUniformFloatv(GLint uniformLocation, ssize_t size, const float* pointer)"
		},
		 "void Director::setAlphaBlending(bool on)": {
			"prefix": "void Director::setAlphaBlending(bool on)",
			"body": [
				"Director:setAlphaBlending(${1:bool on})"
			],
			"description": "void Director::setAlphaBlending(bool on)"
		},
		 "void Timeline::removeFrame(Frame* frame)": {
			"prefix": "void Timeline::removeFrame(Frame* frame)",
			"body": [
				"Timeline:removeFrame(${1:Frame* frame})"
			],
			"description": "void Timeline::removeFrame(Frame* frame)"
		},
		 "bool ScrollView::isInertiaScrollEnabled() const": {
			"prefix": "bool ScrollView::isInertiaScrollEnabled() const",
			"body": [
				"bool ScrollView:isInertiaScrollEnabled() "
			],
			"description": "bool ScrollView::isInertiaScrollEnabled() const"
		},
		 "const char* DictionaryHelper::getStringValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, const char *def)": {
			"prefix": "const char* DictionaryHelper::getStringValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, const char *def)",
			"body": [
				"char* DictionaryHelper:getStringValueFromArray_json(${1:rapidjson:Value& root},${2:char* arrayKey},${3:int idx},${4:char *def})"
			],
			"description": "const char* DictionaryHelper::getStringValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, const char *def)"
		},
		 "bool FontAtlas::prepareLetterDefinitions(const std::u16string& utf16Text)": {
			"prefix": "bool FontAtlas::prepareLetterDefinitions(const std::u16string& utf16Text)",
			"body": [
				"FontAtlas:prepareLetterDefinitions(${1:std:u16string& utf16Text})"
			],
			"description": "bool FontAtlas::prepareLetterDefinitions(const std::u16string& utf16Text)"
		},
		 "const Color3B& LayerGradient::getEndColor() const": {
			"prefix": "const Color3B& LayerGradient::getEndColor() const",
			"body": [
				" Color3B& LayerGradient:getEndColor() "
			],
			"description": "const Color3B& LayerGradient::getEndColor() const"
		},
		 "void ProgressTimer::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void ProgressTimer::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"ProgressTimer:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void ProgressTimer::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "cocos2d::Vec3	Physics3D6DofConstraint::getAngularLowerLimit() const": {
			"prefix": "cocos2d::Vec3	Physics3D6DofConstraint::getAngularLowerLimit() const",
			"body": [
				"cocos2d:Vec3	Physics3D6DofConstraint:getAngularLowerLimit() "
			],
			"description": "cocos2d::Vec3	Physics3D6DofConstraint::getAngularLowerLimit() const"
		},
		 "__CCCallFuncND * __CCCallFuncND::clone() const": {
			"prefix": "__CCCallFuncND * __CCCallFuncND::clone() const",
			"body": [
				"__CCCallFuncND * __CCCallFuncND:clone() "
			],
			"description": "__CCCallFuncND * __CCCallFuncND::clone() const"
		},
		 "bool Properties::getBool(const char* name, bool defaultValue) const": {
			"prefix": "bool Properties::getBool(const char* name, bool defaultValue) const",
			"body": [
				"Properties:getBool(${1:char* name},${2:bool defaultValue})"
			],
			"description": "bool Properties::getBool(const char* name, bool defaultValue) const"
		},
		 "void NavMeshDebugDraw::clear()": {
			"prefix": "void NavMeshDebugDraw::clear()",
			"body": [
				"void NavMeshDebugDraw:clear()"
			],
			"description": "void NavMeshDebugDraw::clear()"
		},
		 "static tinyxml2::XMLElement* generateElementForDict(const ValueMap& dict, tinyxml2::XMLDocument *doc)": {
			"prefix": "static tinyxml2::XMLElement* generateElementForDict(const ValueMap& dict, tinyxml2::XMLDocument *doc)",
			"body": [
				"tinyxml2:XMLElement* generateElementForDict(${1:ValueMap& dict},${2:tinyxml2:XMLDocument *doc})"
			],
			"description": "static tinyxml2::XMLElement* generateElementForDict(const ValueMap& dict, tinyxml2::XMLDocument *doc)"
		},
		 "void TMXLayer::setTileGID(uint32_t gid, const Vec2& pos, TMXTileFlags flags)": {
			"prefix": "void TMXLayer::setTileGID(uint32_t gid, const Vec2& pos, TMXTileFlags flags)",
			"body": [
				"TMXLayer:setTileGID(${1:uint32_t gid},${2:Vec2& pos},${3:TMXTileFlags flags})"
			],
			"description": "void TMXLayer::setTileGID(uint32_t gid, const Vec2& pos, TMXTileFlags flags)"
		},
		 "bool Scheduler::isTargetPaused(void *target)": {
			"prefix": "bool Scheduler::isTargetPaused(void *target)",
			"body": [
				"Scheduler:isTargetPaused(${1:void *target})"
			],
			"description": "bool Scheduler::isTargetPaused(void *target)"
		},
		 "void Texture2D::releaseGLTexture()": {
			"prefix": "void Texture2D::releaseGLTexture()",
			"body": [
				"void Texture2D:releaseGLTexture()"
			],
			"description": "void Texture2D::releaseGLTexture()"
		},
		 "LinearVerticalLayoutManager* LinearVerticalLayoutManager::create()": {
			"prefix": "LinearVerticalLayoutManager* LinearVerticalLayoutManager::create()",
			"body": [
				"LinearVerticalLayoutManager* LinearVerticalLayoutManager:create()"
			],
			"description": "LinearVerticalLayoutManager* LinearVerticalLayoutManager::create()"
		},
		 "const BaseData &Skin::getSkinData() const": {
			"prefix": "const BaseData &Skin::getSkinData() const",
			"body": [
				" BaseData &Skin:getSkinData() "
			],
			"description": "const BaseData &Skin::getSkinData() const"
		},
		 "__Array* __Array::createWithCapacity(int capacity)": {
			"prefix": "__Array* __Array::createWithCapacity(int capacity)",
			"body": [
				"__Array:createWithCapacity(${1:int capacity})"
			],
			"description": "__Array* __Array::createWithCapacity(int capacity)"
		},
		 "void Mesh::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void Mesh::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"Mesh:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void Mesh::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "void GLProgramCache::addGLProgram(GLProgram* program, const std::string &key)": {
			"prefix": "void GLProgramCache::addGLProgram(GLProgram* program, const std::string &key)",
			"body": [
				"GLProgramCache:addGLProgram(${1:GLProgram* program},${2:std:string &key})"
			],
			"description": "void GLProgramCache::addGLProgram(GLProgram* program, const std::string &key)"
		},
		 "void ParticleSystem::updateQuadWithParticle(tParticle* particle, const Vec2& newPosition)": {
			"prefix": "void ParticleSystem::updateQuadWithParticle(tParticle* particle, const Vec2& newPosition)",
			"body": [
				"ParticleSystem:updateQuadWithParticle(${1:tParticle* particle},${2:Vec2& newPosition})"
			],
			"description": "void ParticleSystem::updateQuadWithParticle(tParticle* particle, const Vec2& newPosition)"
		},
		 "void Bone3D::updateJointMatrix(Vec4* matrixPalette)": {
			"prefix": "void Bone3D::updateJointMatrix(Vec4* matrixPalette)",
			"body": [
				"Bone3D:updateJointMatrix(${1:Vec4* matrixPalette})"
			],
			"description": "void Bone3D::updateJointMatrix(Vec4* matrixPalette)"
		},
		 "ActionEase* EaseBackIn::reverse() const": {
			"prefix": "ActionEase* EaseBackIn::reverse() const",
			"body": [
				"ActionEase* EaseBackIn:reverse() "
			],
			"description": "ActionEase* EaseBackIn::reverse() const"
		},
		 "void Node::setSkewY(float skewY)": {
			"prefix": "void Node::setSkewY(float skewY)",
			"body": [
				"Node:setSkewY(${1:float skewY})"
			],
			"description": "void Node::setSkewY(float skewY)"
		},
		 "void Camera::setFrameBufferObject(experimental::FrameBuffer *fbo)": {
			"prefix": "void Camera::setFrameBufferObject(experimental::FrameBuffer *fbo)",
			"body": [
				"Camera:setFrameBufferObject(${1:experimental:FrameBuffer *fbo})"
			],
			"description": "void Camera::setFrameBufferObject(experimental::FrameBuffer *fbo)"
		},
		 "Size::Size(float w, float h) : width(w), height(h)": {
			"prefix": "Size::Size(float w, float h) : width(w), height(h)",
			"body": [
				"w},${2:float h})"
			],
			"description": "Size::Size(float w, float h) : width(w), height(h)"
		},
		 "void TransitionPageTurn::sceneOrder()": {
			"prefix": "void TransitionPageTurn::sceneOrder()",
			"body": [
				"void TransitionPageTurn:sceneOrder()"
			],
			"description": "void TransitionPageTurn::sceneOrder()"
		},
		 "bool Scene::init()": {
			"prefix": "bool Scene::init()",
			"body": [
				"bool Scene:init()"
			],
			"description": "bool Scene::init()"
		},
		 "void ListView::addChild(Node* child, int zOrder, const std::string &name)": {
			"prefix": "void ListView::addChild(Node* child, int zOrder, const std::string &name)",
			"body": [
				"ListView:addChild(${1:Node* child},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void ListView::addChild(Node* child, int zOrder, const std::string &name)"
		},
		 "void ReuseGrid::startWithTarget(Node *target)": {
			"prefix": "void ReuseGrid::startWithTarget(Node *target)",
			"body": [
				"ReuseGrid:startWithTarget(${1:Node *target})"
			],
			"description": "void ReuseGrid::startWithTarget(Node *target)"
		},
		 "void ComponentContainer::removeAll()": {
			"prefix": "void ComponentContainer::removeAll()",
			"body": [
				"void ComponentContainer:removeAll()"
			],
			"description": "void ComponentContainer::removeAll()"
		},
		 "bool ScrollView::isScrollBarAutoHideEnabled() const": {
			"prefix": "bool ScrollView::isScrollBarAutoHideEnabled() const",
			"body": [
				"bool ScrollView:isScrollBarAutoHideEnabled() "
			],
			"description": "bool ScrollView::isScrollBarAutoHideEnabled() const"
		},
		 "void ActionTimeline::gotoFrameAndPause(int startIndex)": {
			"prefix": "void ActionTimeline::gotoFrameAndPause(int startIndex)",
			"body": [
				"ActionTimeline:gotoFrameAndPause(${1:int startIndex})"
			],
			"description": "void ActionTimeline::gotoFrameAndPause(int startIndex)"
		},
		 "bool SkeletonRenderer::isOpacityModifyRGB () const": {
			"prefix": "bool SkeletonRenderer::isOpacityModifyRGB () const",
			"body": [
				"bool SkeletonRenderer:isOpacityModifyRGB () "
			],
			"description": "bool SkeletonRenderer::isOpacityModifyRGB () const"
		},
		 "Quad3 TiledGrid3DAction::getTile(const Vec2& pos) const": {
			"prefix": "Quad3 TiledGrid3DAction::getTile(const Vec2& pos) const",
			"body": [
				"TiledGrid3DAction:getTile(${1:Vec2& pos})"
			],
			"description": "Quad3 TiledGrid3DAction::getTile(const Vec2& pos) const"
		},
		 "Texture2D* Mesh::getTexture() const": {
			"prefix": "Texture2D* Mesh::getTexture() const",
			"body": [
				"Texture2D* Mesh:getTexture() "
			],
			"description": "Texture2D* Mesh::getTexture() const"
		},
		 "Mat4 Node::getNodeToParentTransform(Node* ancestor) const": {
			"prefix": "Mat4 Node::getNodeToParentTransform(Node* ancestor) const",
			"body": [
				"Node:getNodeToParentTransform(${1:Node* ancestor})"
			],
			"description": "Mat4 Node::getNodeToParentTransform(Node* ancestor) const"
		},
		 "TextHAlignment TextField::getTextHorizontalAlignment() const": {
			"prefix": "TextHAlignment TextField::getTextHorizontalAlignment() const",
			"body": [
				"TextHAlignment TextField:getTextHorizontalAlignment() "
			],
			"description": "TextHAlignment TextField::getTextHorizontalAlignment() const"
		},
		 "__Set* __Set::mutableCopy(void)": {
			"prefix": "__Set* __Set::mutableCopy(void)",
			"body": [
				"__Set:mutableCopy(${1:void})"
			],
			"description": "__Set* __Set::mutableCopy(void)"
		},
		 "bool BundleReader::readMatrix(float* m)": {
			"prefix": "bool BundleReader::readMatrix(float* m)",
			"body": [
				"BundleReader:readMatrix(${1:float* m})"
			],
			"description": "bool BundleReader::readMatrix(float* m)"
		},
		 "void ParticleSystem::onEnter()": {
			"prefix": "void ParticleSystem::onEnter()",
			"body": [
				"void ParticleSystem:onEnter()"
			],
			"description": "void ParticleSystem::onEnter()"
		},
		 "void MenuItemLoader::onHandlePropTypeBlock(Node * pNode, Node * pParent, const char * pPropertyName, BlockData * pBlockData, CCBReader * ccbReader)": {
			"prefix": "void MenuItemLoader::onHandlePropTypeBlock(Node * pNode, Node * pParent, const char * pPropertyName, BlockData * pBlockData, CCBReader * ccbReader)",
			"body": [
				"MenuItemLoader:onHandlePropTypeBlock(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:BlockData * pBlockData},${5:CCBReader * ccbReader})"
			],
			"description": "void MenuItemLoader::onHandlePropTypeBlock(Node * pNode, Node * pParent, const char * pPropertyName, BlockData * pBlockData, CCBReader * ccbReader)"
		},
		 "bool SkeletonRenderer::setAttachment (const std::string& slotName, const std::string& attachmentName)": {
			"prefix": "bool SkeletonRenderer::setAttachment (const std::string& slotName, const std::string& attachmentName)",
			"body": [
				"SkeletonRenderer:setAttachment (${1:std:string& slotName},${2:std:string& attachmentName})"
			],
			"description": "bool SkeletonRenderer::setAttachment (const std::string& slotName, const std::string& attachmentName)"
		},
		 "bool WebViewImpl::shouldStartLoading(const int viewTag, const std::string &url)": {
			"prefix": "bool WebViewImpl::shouldStartLoading(const int viewTag, const std::string &url)",
			"body": [
				"WebViewImpl:shouldStartLoading(${1:int viewTag},${2:std:string &url})"
			],
			"description": "bool WebViewImpl::shouldStartLoading(const int viewTag, const std::string &url)"
		},
		 "void EditBox::setInputFlag(EditBox::InputFlag inputFlag)": {
			"prefix": "void EditBox::setInputFlag(EditBox::InputFlag inputFlag)",
			"body": [
				"EditBox:setInputFlag(${1:EditBox:InputFlag inputFlag})"
			],
			"description": "void EditBox::setInputFlag(EditBox::InputFlag inputFlag)"
		},
		 "void Widget::releaseUpEvent()": {
			"prefix": "void Widget::releaseUpEvent()",
			"body": [
				"void Widget:releaseUpEvent()"
			],
			"description": "void Widget::releaseUpEvent()"
		},
		 "ActionTimeline* ActionTimelineCache::loadAnimationWithDataBuffer(const cocos2d::Data data, const std::string fileName)": {
			"prefix": "ActionTimeline* ActionTimelineCache::loadAnimationWithDataBuffer(const cocos2d::Data data, const std::string fileName)",
			"body": [
				"ActionTimelineCache:loadAnimationWithDataBuffer(${1:cocos2d:Data data},${2:std:string fileName})"
			],
			"description": "ActionTimeline* ActionTimelineCache::loadAnimationWithDataBuffer(const cocos2d::Data data, const std::string fileName)"
		},
		 "const Color4B& Text::getTextColor() const": {
			"prefix": "const Color4B& Text::getTextColor() const",
			"body": [
				" Color4B& Text:getTextColor() "
			],
			"description": "const Color4B& Text::getTextColor() const"
		},
		 "DelayTime* DelayTime::reverse() const": {
			"prefix": "DelayTime* DelayTime::reverse() const",
			"body": [
				"DelayTime* DelayTime:reverse() "
			],
			"description": "DelayTime* DelayTime::reverse() const"
		},
		 "void Downloader::downloadToBuffer(const std::string& srcUrl, const std::string& customId, unsigned char* buffer, long size)": {
			"prefix": "void Downloader::downloadToBuffer(const std::string& srcUrl, const std::string& customId, unsigned char* buffer, long size)",
			"body": [
				"Downloader:downloadToBuffer(${1:std:string& srcUrl},${2:std:string& customId},${3:unsigned char* buffer},${4:long size})"
			],
			"description": "void Downloader::downloadToBuffer(const std::string& srcUrl, const std::string& customId, unsigned char* buffer, long size)"
		},
		 "void Renderer::setClearColor(const Color4F &clearColor)": {
			"prefix": "void Renderer::setClearColor(const Color4F &clearColor)",
			"body": [
				"Renderer:setClearColor(${1:Color4F &clearColor})"
			],
			"description": "void Renderer::setClearColor(const Color4F &clearColor)"
		},
		 "Application* Application::getInstance()": {
			"prefix": "Application* Application::getInstance()",
			"body": [
				"Application* Application:getInstance()"
			],
			"description": "Application* Application::getInstance()"
		},
		 "int Configuration::getMaxTextureSize() const": {
			"prefix": "int Configuration::getMaxTextureSize() const",
			"body": [
				"int Configuration:getMaxTextureSize() "
			],
			"description": "int Configuration::getMaxTextureSize() const"
		},
		 "std::vector<Touch*> GLView::getAllTouches() const": {
			"prefix": "std::vector<Touch*> GLView::getAllTouches() const",
			"body": [
				"std:vector<Touch*> GLView:getAllTouches() "
			],
			"description": "std::vector<Touch*> GLView::getAllTouches() const"
		},
		 "JumpBy* JumpBy::reverse() const": {
			"prefix": "JumpBy* JumpBy::reverse() const",
			"body": [
				"JumpBy* JumpBy:reverse() "
			],
			"description": "JumpBy* JumpBy::reverse() const"
		},
		 "Animate3D* Animate3D::clone() const": {
			"prefix": "Animate3D* Animate3D::clone() const",
			"body": [
				"Animate3D* Animate3D:clone() "
			],
			"description": "Animate3D* Animate3D::clone() const"
		},
		 "EventListenerAcceleration* EventListenerAcceleration::create(const std::function<void(Acceleration*, Event*)>& callback)": {
			"prefix": "EventListenerAcceleration* EventListenerAcceleration::create(const std::function<void(Acceleration*, Event*)>& callback)",
			"body": [
				"EventListenerAcceleration:create(${1:std:function<void(Acceleration*},${2:Event*})"
			],
			"description": "EventListenerAcceleration* EventListenerAcceleration::create(const std::function<void(Acceleration*, Event*)>& callback)"
		},
		 "MovementBoneData *DataReaderHelper::decodeMovementBone(tinyxml2::XMLElement *movBoneXml, tinyxml2::XMLElement *parentXml, BoneData *boneData, DataInfo *dataInfo)": {
			"prefix": "MovementBoneData *DataReaderHelper::decodeMovementBone(tinyxml2::XMLElement *movBoneXml, tinyxml2::XMLElement *parentXml, BoneData *boneData, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeMovementBone(${1:tinyxml2:XMLElement *movBoneXml},${2:tinyxml2:XMLElement *parentXml},${3:BoneData *boneData},${4:DataInfo *dataInfo})"
			],
			"description": "MovementBoneData *DataReaderHelper::decodeMovementBone(tinyxml2::XMLElement *movBoneXml, tinyxml2::XMLElement *parentXml, BoneData *boneData, DataInfo *dataInfo)"
		},
		 "bool FileUtils::writeStringToFile(std::string dataStr, const std::string& fullPath)": {
			"prefix": "bool FileUtils::writeStringToFile(std::string dataStr, const std::string& fullPath)",
			"body": [
				"FileUtils:writeStringToFile(${1:std:string dataStr},${2:std:string& fullPath})"
			],
			"description": "bool FileUtils::writeStringToFile(std::string dataStr, const std::string& fullPath)"
		},
		 "void GLProgram::setUniformLocationWithMatrix4fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)": {
			"prefix": "void GLProgram::setUniformLocationWithMatrix4fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)",
			"body": [
				"GLProgram:setUniformLocationWithMatrix4fv(${1:GLint location},${2:GLfloat* matrixArray},${3:unsigned int numberOfMatrices})"
			],
			"description": "void GLProgram::setUniformLocationWithMatrix4fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)"
		},
		 "FadeTo* FadeOut::reverse() const": {
			"prefix": "FadeTo* FadeOut::reverse() const",
			"body": [
				"FadeTo* FadeOut:reverse() "
			],
			"description": "FadeTo* FadeOut::reverse() const"
		},
		 "MoveBy* MoveBy::create(float duration, const Vec3 &deltaPosition)": {
			"prefix": "MoveBy* MoveBy::create(float duration, const Vec3 &deltaPosition)",
			"body": [
				"MoveBy:create(${1:float duration},${2:Vec3 &deltaPosition})"
			],
			"description": "MoveBy* MoveBy::create(float duration, const Vec3 &deltaPosition)"
		},
		 "PhysicsBody* PhysicsWorld::getBody(int tag) const": {
			"prefix": "PhysicsBody* PhysicsWorld::getBody(int tag) const",
			"body": [
				"PhysicsWorld:getBody(${1:int tag})"
			],
			"description": "PhysicsBody* PhysicsWorld::getBody(int tag) const"
		},
		 "EaseSineIn* EaseSineIn::clone() const": {
			"prefix": "EaseSineIn* EaseSineIn::clone() const",
			"body": [
				"EaseSineIn* EaseSineIn:clone() "
			],
			"description": "EaseSineIn* EaseSineIn::clone() const"
		},
		 "NodeGrid* NodeGrid::create(const cocos2d::Rect &rect)": {
			"prefix": "NodeGrid* NodeGrid::create(const cocos2d::Rect &rect)",
			"body": [
				"NodeGrid:create(${1:cocos2d:Rect &rect})"
			],
			"description": "NodeGrid* NodeGrid::create(const cocos2d::Rect &rect)"
		},
		 "void LayerGradientLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)": {
			"prefix": "void LayerGradientLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)",
			"body": [
				"LayerGradientLoader:onHandlePropTypeColor3(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Color3B pColor3B},${5:CCBReader * ccbReader})"
			],
			"description": "void LayerGradientLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)"
		},
		 "void GLBufferedNode::setGLBufferData(void *buf, GLuint bufSize, int slot)": {
			"prefix": "void GLBufferedNode::setGLBufferData(void *buf, GLuint bufSize, int slot)",
			"body": [
				"GLBufferedNode:setGLBufferData(${1:void *buf},${2:GLuint bufSize},${3:int slot})"
			],
			"description": "void GLBufferedNode::setGLBufferData(void *buf, GLuint bufSize, int slot)"
		},
		 "MenuItemLabel * MenuItemLabel::create(Node*label, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "MenuItemLabel * MenuItemLabel::create(Node*label, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"* MenuItemLabel:create(${1:Node*label},${2:Ref* target},${3:SEL_MenuHandler selector})"
			],
			"description": "MenuItemLabel * MenuItemLabel::create(Node*label, Ref* target, SEL_MenuHandler selector)"
		},
		 "Twirl* Twirl::create(float duration, const Size& gridSize, Vec2 position, unsigned int twirls, float amplitude)": {
			"prefix": "Twirl* Twirl::create(float duration, const Size& gridSize, Vec2 position, unsigned int twirls, float amplitude)",
			"body": [
				"Twirl:create(${1:float duration},${2:Size& gridSize},${3:Vec2 position},${4:unsigned int twirls},${5:float amplitude})"
			],
			"description": "Twirl* Twirl::create(float duration, const Size& gridSize, Vec2 position, unsigned int twirls, float amplitude)"
		},
		 "void WsThreadHelper::sendMessageToSubThread(WsMessage *msg)": {
			"prefix": "void WsThreadHelper::sendMessageToSubThread(WsMessage *msg)",
			"body": [
				"WsThreadHelper:sendMessageToSubThread(${1:WsMessage *msg})"
			],
			"description": "void WsThreadHelper::sendMessageToSubThread(WsMessage *msg)"
		},
		 "void Application::setStartupScriptFilename(const std::string& startupScriptFile)": {
			"prefix": "void Application::setStartupScriptFilename(const std::string& startupScriptFile)",
			"body": [
				"Application:setStartupScriptFilename(${1:std:string& startupScriptFile})"
			],
			"description": "void Application::setStartupScriptFilename(const std::string& startupScriptFile)"
		},
		 "void PhysicsWorld::setGravity(const Vect& gravity)": {
			"prefix": "void PhysicsWorld::setGravity(const Vect& gravity)",
			"body": [
				"PhysicsWorld:setGravity(${1:Vect& gravity})"
			],
			"description": "void PhysicsWorld::setGravity(const Vect& gravity)"
		},
		 "void AnchorPointFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void AnchorPointFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"AnchorPointFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void AnchorPointFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void ComAudio::onRemove()": {
			"prefix": "void ComAudio::onRemove()",
			"body": [
				"void ComAudio:onRemove()"
			],
			"description": "void ComAudio::onRemove()"
		},
		 "void CCBSetSpriteFrame::update(float time)": {
			"prefix": "void CCBSetSpriteFrame::update(float time)",
			"body": [
				"CCBSetSpriteFrame:update(${1:float time})"
			],
			"description": "void CCBSetSpriteFrame::update(float time)"
		},
		 "void AudioEngineImpl::setLoop(int audioID, bool loop)": {
			"prefix": "void AudioEngineImpl::setLoop(int audioID, bool loop)",
			"body": [
				"AudioEngineImpl:setLoop(${1:int audioID},${2:bool loop})"
			],
			"description": "void AudioEngineImpl::setLoop(int audioID, bool loop)"
		},
		 "float NavMeshAgent::getSeparationWeight() const": {
			"prefix": "float NavMeshAgent::getSeparationWeight() const",
			"body": [
				"float NavMeshAgent:getSeparationWeight() "
			],
			"description": "float NavMeshAgent::getSeparationWeight() const"
		},
		 "void NavMeshAgent::setMaxSpeed(float maxSpeed)": {
			"prefix": "void NavMeshAgent::setMaxSpeed(float maxSpeed)",
			"body": [
				"NavMeshAgent:setMaxSpeed(${1:float maxSpeed})"
			],
			"description": "void NavMeshAgent::setMaxSpeed(float maxSpeed)"
		},
		 "ValueVector& CCBAnimationManager::getDocumentCallbackNames()": {
			"prefix": "ValueVector& CCBAnimationManager::getDocumentCallbackNames()",
			"body": [
				"ValueVector& CCBAnimationManager:getDocumentCallbackNames()"
			],
			"description": "ValueVector& CCBAnimationManager::getDocumentCallbackNames()"
		},
		 "InnerActionFrame* InnerActionFrame::create()": {
			"prefix": "InnerActionFrame* InnerActionFrame::create()",
			"body": [
				"InnerActionFrame* InnerActionFrame:create()"
			],
			"description": "InnerActionFrame* InnerActionFrame::create()"
		},
		 "void LabelBMFont::setString(const std::string &newString)": {
			"prefix": "void LabelBMFont::setString(const std::string &newString)",
			"body": [
				"LabelBMFont:setString(${1:std:string &newString})"
			],
			"description": "void LabelBMFont::setString(const std::string &newString)"
		},
		 "float Physics3DSliderConstraint::getRestitutionDirLin() const": {
			"prefix": "float Physics3DSliderConstraint::getRestitutionDirLin() const",
			"body": [
				"float Physics3DSliderConstraint:getRestitutionDirLin() "
			],
			"description": "float Physics3DSliderConstraint::getRestitutionDirLin() const"
		},
		 "bool MenuItemToggle::initWithItem(MenuItem *item)": {
			"prefix": "bool MenuItemToggle::initWithItem(MenuItem *item)",
			"body": [
				"MenuItemToggle:initWithItem(${1:MenuItem *item})"
			],
			"description": "bool MenuItemToggle::initWithItem(MenuItem *item)"
		},
		 "void Texture2D::convertRGBA8888ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGBA8888ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGBA8888ToRGB5A1(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGBA8888ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "MeshSkin* Sprite3D::getSkin() const": {
			"prefix": "MeshSkin* Sprite3D::getSkin() const",
			"body": [
				"MeshSkin* Sprite3D:getSkin() "
			],
			"description": "MeshSkin* Sprite3D::getSkin() const"
		},
		 "void AbstractCheckButton::adaptRenderers()": {
			"prefix": "void AbstractCheckButton::adaptRenderers()",
			"body": [
				"void AbstractCheckButton:adaptRenderers()"
			],
			"description": "void AbstractCheckButton::adaptRenderers()"
		},
		 "ActionInterval* ActionScaleFrame::getAction(float fDuration)": {
			"prefix": "ActionInterval* ActionScaleFrame::getAction(float fDuration)",
			"body": [
				"ActionScaleFrame:getAction(${1:float fDuration})"
			],
			"description": "ActionInterval* ActionScaleFrame::getAction(float fDuration)"
		},
		 "void FontFreeType::renderCharAt(unsigned char *dest,int posX, int posY, unsigned char* bitmap,long bitmapWidth,long bitmapHeight)": {
			"prefix": "void FontFreeType::renderCharAt(unsigned char *dest,int posX, int posY, unsigned char* bitmap,long bitmapWidth,long bitmapHeight)",
			"body": [
				"FontFreeType:renderCharAt(${1:unsigned char *dest},${2:int posX},${3:int posY},${4:unsigned char* bitmap},${5:long bitmapWidth},${6:long bitmapHeight})"
			],
			"description": "void FontFreeType::renderCharAt(unsigned char *dest,int posX, int posY, unsigned char* bitmap,long bitmapWidth,long bitmapHeight)"
		},
		 "void CCBSequence::setSequenceId(int nSequenceId)": {
			"prefix": "void CCBSequence::setSequenceId(int nSequenceId)",
			"body": [
				"CCBSequence:setSequenceId(${1:int nSequenceId})"
			],
			"description": "void CCBSequence::setSequenceId(int nSequenceId)"
		},
		 "void Physics3DRigidBody::setCcdMotionThreshold( float ccdMotionThreshold )": {
			"prefix": "void Physics3DRigidBody::setCcdMotionThreshold( float ccdMotionThreshold )",
			"body": [
				"Physics3DRigidBody:setCcdMotionThreshold(${1:float ccdMotionThreshold})"
			],
			"description": "void Physics3DRigidBody::setCcdMotionThreshold( float ccdMotionThreshold )"
		},
		 "TextureCache * TextureCache::sharedTextureCache()": {
			"prefix": "TextureCache * TextureCache::sharedTextureCache()",
			"body": [
				"TextureCache * TextureCache:sharedTextureCache()"
			],
			"description": "TextureCache * TextureCache::sharedTextureCache()"
		},
		 "void TransitionSlideInT::initScenes()": {
			"prefix": "void TransitionSlideInT::initScenes()",
			"body": [
				"void TransitionSlideInT:initScenes()"
			],
			"description": "void TransitionSlideInT::initScenes()"
		},
		 "Vec2 NodeLoader::parsePropTypePoint(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "Vec2 NodeLoader::parsePropTypePoint(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypePoint(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "Vec2 NodeLoader::parsePropTypePoint(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "std::string FileUtils::getStringFromFile(const std::string& filename)": {
			"prefix": "std::string FileUtils::getStringFromFile(const std::string& filename)",
			"body": [
				"FileUtils:getStringFromFile(${1:std:string& filename})"
			],
			"description": "std::string FileUtils::getStringFromFile(const std::string& filename)"
		},
		 "void BoneNode::disableCascadeOpacity()": {
			"prefix": "void BoneNode::disableCascadeOpacity()",
			"body": [
				"void BoneNode:disableCascadeOpacity()"
			],
			"description": "void BoneNode::disableCascadeOpacity()"
		},
		 "void PhysicsWorldCallback::getShapesAtPointFunc(cpShape *shape, cpFloat distance, cpVect point, Vector<PhysicsShape*>* arr)": {
			"prefix": "void PhysicsWorldCallback::getShapesAtPointFunc(cpShape *shape, cpFloat distance, cpVect point, Vector<PhysicsShape*>* arr)",
			"body": [
				"PhysicsWorldCallback:getShapesAtPointFunc(${1:cpShape *shape},${2:cpFloat distance},${3:cpVect point},${4:Vector<PhysicsShape*>* arr})"
			],
			"description": "void PhysicsWorldCallback::getShapesAtPointFunc(cpShape *shape, cpFloat distance, cpVect point, Vector<PhysicsShape*>* arr)"
		},
		 "void ProtectedNode::removeProtectedChildByTag(int tag, bool cleanup)": {
			"prefix": "void ProtectedNode::removeProtectedChildByTag(int tag, bool cleanup)",
			"body": [
				"ProtectedNode:removeProtectedChildByTag(${1:int tag},${2:bool cleanup})"
			],
			"description": "void ProtectedNode::removeProtectedChildByTag(int tag, bool cleanup)"
		},
		 "const cocos2d::Vector<DecorativeDisplay*>& DisplayManager::getDecorativeDisplayList() const": {
			"prefix": "const cocos2d::Vector<DecorativeDisplay*>& DisplayManager::getDecorativeDisplayList() const",
			"body": [
				" cocos2d:Vector<DecorativeDisplay*>& DisplayManager:getDecorativeDisplayList() "
			],
			"description": "const cocos2d::Vector<DecorativeDisplay*>& DisplayManager::getDecorativeDisplayList() const"
		},
		 "void DrawNode::drawCubicBezier(const Vec2 &origin, const Vec2 &control1, const Vec2 &control2, const Vec2 &destination, unsigned int segments, const Color4F &color)": {
			"prefix": "void DrawNode::drawCubicBezier(const Vec2 &origin, const Vec2 &control1, const Vec2 &control2, const Vec2 &destination, unsigned int segments, const Color4F &color)",
			"body": [
				"DrawNode:drawCubicBezier(${1:Vec2 &origin},${2:Vec2 &control1},${3:Vec2 &control2},${4:Vec2 &destination},${5:unsigned int segments},${6:Color4F &color})"
			],
			"description": "void DrawNode::drawCubicBezier(const Vec2 &origin, const Vec2 &control1, const Vec2 &control2, const Vec2 &destination, unsigned int segments, const Color4F &color)"
		},
		 "bool LabelAtlas::initWithString(const std::string& string, const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "bool LabelAtlas::initWithString(const std::string& string, const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"LabelAtlas:initWithString(${1:std:string& string},${2:std:string& charMapFile},${3:int itemWidth},${4:int itemHeight},${5:int startCharMap})"
			],
			"description": "bool LabelAtlas::initWithString(const std::string& string, const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "Vector<Layout*>& PageView::getPages()": {
			"prefix": "Vector<Layout*>& PageView::getPages()",
			"body": [
				"Vector<Layout*>& PageView:getPages()"
			],
			"description": "Vector<Layout*>& PageView::getPages()"
		},
		 "std::vector<unsigned short> cc_utf16_vec_from_utf16_str(const unsigned short* str)": {
			"prefix": "std::vector<unsigned short> cc_utf16_vec_from_utf16_str(const unsigned short* str)",
			"body": [
				"short> cc_utf16_vec_from_utf16_str(${1:unsigned short* str})"
			],
			"description": "std::vector<unsigned short> cc_utf16_vec_from_utf16_str(const unsigned short* str)"
		},
		 "EventListenerPhysicsContact* EventListenerPhysicsContact::create()": {
			"prefix": "EventListenerPhysicsContact* EventListenerPhysicsContact::create()",
			"body": [
				"EventListenerPhysicsContact* EventListenerPhysicsContact:create()"
			],
			"description": "EventListenerPhysicsContact* EventListenerPhysicsContact::create()"
		},
		 "void Renderer::flushTriangles()": {
			"prefix": "void Renderer::flushTriangles()",
			"body": [
				"void Renderer:flushTriangles()"
			],
			"description": "void Renderer::flushTriangles()"
		},
		 "ActionFloat* ActionFloat::clone() const": {
			"prefix": "ActionFloat* ActionFloat::clone() const",
			"body": [
				"ActionFloat* ActionFloat:clone() "
			],
			"description": "ActionFloat* ActionFloat::clone() const"
		},
		 "void SpriteFrameCache::destroyInstance()": {
			"prefix": "void SpriteFrameCache::destroyInstance()",
			"body": [
				"void SpriteFrameCache:destroyInstance()"
			],
			"description": "void SpriteFrameCache::destroyInstance()"
		},
		 "void PrettyPrinter::visit(const __Set *p)": {
			"prefix": "void PrettyPrinter::visit(const __Set *p)",
			"body": [
				"PrettyPrinter:visit(${1:__Set *p})"
			],
			"description": "void PrettyPrinter::visit(const __Set *p)"
		},
		 "std::string Node::getDescription() const": {
			"prefix": "std::string Node::getDescription() const",
			"body": [
				"std:string Node:getDescription() "
			],
			"description": "std::string Node::getDescription() const"
		},
		 "void NodeLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char* pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char* pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeIntegerLabeled(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:int pIntegerLabeled},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char* pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)"
		},
		 "void Button::setScale9Enabled(bool able)": {
			"prefix": "void Button::setScale9Enabled(bool able)",
			"body": [
				"Button:setScale9Enabled(${1:bool able})"
			],
			"description": "void Button::setScale9Enabled(bool able)"
		},
		 "void NavMeshAgent::postUpdate(float delta)": {
			"prefix": "void NavMeshAgent::postUpdate(float delta)",
			"body": [
				"NavMeshAgent:postUpdate(${1:float delta})"
			],
			"description": "void NavMeshAgent::postUpdate(float delta)"
		},
		 "void TextureAtlas::setupVBO()": {
			"prefix": "void TextureAtlas::setupVBO()",
			"body": [
				"void TextureAtlas:setupVBO()"
			],
			"description": "void TextureAtlas::setupVBO()"
		},
		 "void TileMapAtlas::setTile(const Color3B& tile, const Vec2& position)": {
			"prefix": "void TileMapAtlas::setTile(const Color3B& tile, const Vec2& position)",
			"body": [
				"TileMapAtlas:setTile(${1:Color3B& tile},${2:Vec2& position})"
			],
			"description": "void TileMapAtlas::setTile(const Color3B& tile, const Vec2& position)"
		},
		 "void TextField::setPasswordEnabled(bool enable)": {
			"prefix": "void TextField::setPasswordEnabled(bool enable)",
			"body": [
				"TextField:setPasswordEnabled(${1:bool enable})"
			],
			"description": "void TextField::setPasswordEnabled(bool enable)"
		},
		 "MenuItemSprite * MenuItemSprite::create(Node *normalSprite, Node *selectedSprite, Node *disabledSprite, const ccMenuCallback& callback)": {
			"prefix": "MenuItemSprite * MenuItemSprite::create(Node *normalSprite, Node *selectedSprite, Node *disabledSprite, const ccMenuCallback& callback)",
			"body": [
				"* MenuItemSprite:create(${1:Node *normalSprite},${2:Node *selectedSprite},${3:Node *disabledSprite},${4:ccMenuCallback& callback})"
			],
			"description": "MenuItemSprite * MenuItemSprite::create(Node *normalSprite, Node *selectedSprite, Node *disabledSprite, const ccMenuCallback& callback)"
		},
		 "FadeTo* FadeTo::create(float duration, GLubyte opacity)": {
			"prefix": "FadeTo* FadeTo::create(float duration, GLubyte opacity)",
			"body": [
				"FadeTo:create(${1:float duration},${2:GLubyte opacity})"
			],
			"description": "FadeTo* FadeTo::create(float duration, GLubyte opacity)"
		},
		 "bool ParticleFire::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleFire::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleFire:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleFire::initWithTotalParticles(int numberOfParticles)"
		},
		 "int Skeleton3D::getBoneIndex(Bone3D* bone) const": {
			"prefix": "int Skeleton3D::getBoneIndex(Bone3D* bone) const",
			"body": [
				"Skeleton3D:getBoneIndex(${1:Bone3D* bone})"
			],
			"description": "int Skeleton3D::getBoneIndex(Bone3D* bone) const"
		},
		 "std::string Action::description() const": {
			"prefix": "std::string Action::description() const",
			"body": [
				"std:string Action:description() "
			],
			"description": "std::string Action::description() const"
		},
		 "void BMFontConfiguration::parseKerningEntry(const char* line)": {
			"prefix": "void BMFontConfiguration::parseKerningEntry(const char* line)",
			"body": [
				"BMFontConfiguration:parseKerningEntry(${1:char* line})"
			],
			"description": "void BMFontConfiguration::parseKerningEntry(const char* line)"
		},
		 "void ImageView::onSizeChanged()": {
			"prefix": "void ImageView::onSizeChanged()",
			"body": [
				"void ImageView:onSizeChanged()"
			],
			"description": "void ImageView::onSizeChanged()"
		},
		 "void Texture2D::convertAI88ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertAI88ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertAI88ToRGB888(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertAI88ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void DrawNode::drawTriangle(const Vec2 &p1, const Vec2 &p2, const Vec2 &p3, const Color4F &color)": {
			"prefix": "void DrawNode::drawTriangle(const Vec2 &p1, const Vec2 &p2, const Vec2 &p3, const Color4F &color)",
			"body": [
				"DrawNode:drawTriangle(${1:Vec2 &p1},${2:Vec2 &p2},${3:Vec2 &p3},${4:Color4F &color})"
			],
			"description": "void DrawNode::drawTriangle(const Vec2 &p1, const Vec2 &p2, const Vec2 &p3, const Color4F &color)"
		},
		 "void Skeleton3D::updateBoneMatrix()": {
			"prefix": "void Skeleton3D::updateBoneMatrix()",
			"body": [
				"void Skeleton3D:updateBoneMatrix()"
			],
			"description": "void Skeleton3D::updateBoneMatrix()"
		},
		 "void ClippingRectangleNode::onAfterVisitScissor()": {
			"prefix": "void ClippingRectangleNode::onAfterVisitScissor()",
			"body": [
				"void ClippingRectangleNode:onAfterVisitScissor()"
			],
			"description": "void ClippingRectangleNode::onAfterVisitScissor()"
		},
		 "static bool getStaticMethodInfo(cocos2d::JniMethodInfo &methodinfo, const char *className, const char *methodName, const char *paramCode)": {
			"prefix": "static bool getStaticMethodInfo(cocos2d::JniMethodInfo &methodinfo, const char *className, const char *methodName, const char *paramCode)",
			"body": [
				"bool getStaticMethodInfo(${1:cocos2d:JniMethodInfo &methodinfo},${2:char *className},${3:char *methodName},${4:char *paramCode})"
			],
			"description": "static bool getStaticMethodInfo(cocos2d::JniMethodInfo &methodinfo, const char *className, const char *methodName, const char *paramCode)"
		},
		 "void Camera::setAdditionalProjection(const Mat4& mat)": {
			"prefix": "void Camera::setAdditionalProjection(const Mat4& mat)",
			"body": [
				"Camera:setAdditionalProjection(${1:Mat4& mat})"
			],
			"description": "void Camera::setAdditionalProjection(const Mat4& mat)"
		},
		 "void NodeLoader::onHandlePropTypeFntFile(Node * pNode, Node * pParent, const char* pPropertyName, const char* pFntFile, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeFntFile(Node * pNode, Node * pParent, const char* pPropertyName, const char* pFntFile, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeFntFile(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:char* pFntFile},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeFntFile(Node * pNode, Node * pParent, const char* pPropertyName, const char* pFntFile, CCBReader * ccbReader)"
		},
		 "void SAXParser::startElement(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)": {
			"prefix": "void SAXParser::startElement(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)",
			"body": [
				"SAXParser:startElement(${1:void *ctx},${2:CC_XML_CHAR *name},${3:CC_XML_CHAR **atts})"
			],
			"description": "void SAXParser::startElement(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)"
		},
		 "void ImageView::initRenderer()": {
			"prefix": "void ImageView::initRenderer()",
			"body": [
				"void ImageView:initRenderer()"
			],
			"description": "void ImageView::initRenderer()"
		},
		 "void ColliderBody::setColliderFilter(ColliderFilter *filter)": {
			"prefix": "void ColliderBody::setColliderFilter(ColliderFilter *filter)",
			"body": [
				"ColliderBody:setColliderFilter(${1:ColliderFilter *filter})"
			],
			"description": "void ColliderBody::setColliderFilter(ColliderFilter *filter)"
		},
		 "void Layer::onTouchCancelled(Touch *touch, Event *event)": {
			"prefix": "void Layer::onTouchCancelled(Touch *touch, Event *event)",
			"body": [
				"Layer:onTouchCancelled(${1:Touch *touch},${2:Event *event})"
			],
			"description": "void Layer::onTouchCancelled(Touch *touch, Event *event)"
		},
		 "const Rect& Slider::getCapInsetsBarRenderer()const": {
			"prefix": "const Rect& Slider::getCapInsetsBarRenderer()const",
			"body": [
				" Rect& Slider:getCapInsetsBarRenderer()"
			],
			"description": "const Rect& Slider::getCapInsetsBarRenderer()const"
		},
		 "void EaseSineIn::update(float time)": {
			"prefix": "void EaseSineIn::update(float time)",
			"body": [
				"EaseSineIn:update(${1:float time})"
			],
			"description": "void EaseSineIn::update(float time)"
		},
		 "void GridBase::reuse(void)": {
			"prefix": "void GridBase::reuse(void)",
			"body": [
				"GridBase:reuse(${1:void})"
			],
			"description": "void GridBase::reuse(void)"
		},
		 "class AudioEngine::AudioEngineThreadPool": {
			"prefix": "class AudioEngine::AudioEngineThreadPool",
			"body": [
				"class AudioEngine:AudioEngineThreadPool"
			],
			"description": "class AudioEngine::AudioEngineThreadPool"
		},
		 "Bone *Bone::create(const std::string& name)": {
			"prefix": "Bone *Bone::create(const std::string& name)",
			"body": [
				"*Bone:create(${1:std:string& name})"
			],
			"description": "Bone *Bone::create(const std::string& name)"
		},
		 "GridBase* TiledGrid3DAction::getGrid(void)": {
			"prefix": "GridBase* TiledGrid3DAction::getGrid(void)",
			"body": [
				"TiledGrid3DAction:getGrid(${1:void})"
			],
			"description": "GridBase* TiledGrid3DAction::getGrid(void)"
		},
		 "bool MenuItemFont::initWithString(const std::string& value, const ccMenuCallback& callback)": {
			"prefix": "bool MenuItemFont::initWithString(const std::string& value, const ccMenuCallback& callback)",
			"body": [
				"MenuItemFont:initWithString(${1:std:string& value},${2:ccMenuCallback& callback})"
			],
			"description": "bool MenuItemFont::initWithString(const std::string& value, const ccMenuCallback& callback)"
		},
		 "void Button::setTitleAlignment(TextHAlignment hAlignment, TextVAlignment vAlignment)": {
			"prefix": "void Button::setTitleAlignment(TextHAlignment hAlignment, TextVAlignment vAlignment)",
			"body": [
				"Button:setTitleAlignment(${1:TextHAlignment hAlignment},${2:TextVAlignment vAlignment})"
			],
			"description": "void Button::setTitleAlignment(TextHAlignment hAlignment, TextVAlignment vAlignment)"
		},
		 "void Armature::changeBoneParent(Bone *bone, const std::string& parentName)": {
			"prefix": "void Armature::changeBoneParent(Bone *bone, const std::string& parentName)",
			"body": [
				"Armature:changeBoneParent(${1:Bone *bone},${2:std:string& parentName})"
			],
			"description": "void Armature::changeBoneParent(Bone *bone, const std::string& parentName)"
		},
		 "void ClippingRectangleNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void ClippingRectangleNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"ClippingRectangleNode:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void ClippingRectangleNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void SIOClientImpl::connect()": {
			"prefix": "void SIOClientImpl::connect()",
			"body": [
				"void SIOClientImpl:connect()"
			],
			"description": "void SIOClientImpl::connect()"
		},
		 "void EaseBounceOut::update(float time)": {
			"prefix": "void EaseBounceOut::update(float time)",
			"body": [
				"EaseBounceOut:update(${1:float time})"
			],
			"description": "void EaseBounceOut::update(float time)"
		},
		 "TransitionPageTurn * TransitionPageTurn::create(float t, Scene *scene, bool backwards)": {
			"prefix": "TransitionPageTurn * TransitionPageTurn::create(float t, Scene *scene, bool backwards)",
			"body": [
				"* TransitionPageTurn:create(${1:float t},${2:Scene *scene},${3:bool backwards})"
			],
			"description": "TransitionPageTurn * TransitionPageTurn::create(float t, Scene *scene, bool backwards)"
		},
		 "void GLProgramCache::reloadDefaultGLPrograms()": {
			"prefix": "void GLProgramCache::reloadDefaultGLPrograms()",
			"body": [
				"void GLProgramCache:reloadDefaultGLPrograms()"
			],
			"description": "void GLProgramCache::reloadDefaultGLPrograms()"
		},
		 "void Physics3DConstraint::setBreakingImpulse(float impulse)": {
			"prefix": "void Physics3DConstraint::setBreakingImpulse(float impulse)",
			"body": [
				"Physics3DConstraint:setBreakingImpulse(${1:float impulse})"
			],
			"description": "void Physics3DConstraint::setBreakingImpulse(float impulse)"
		},
		 "void GLProgramState::setUniformFloatv(const std::string& uniformName, ssize_t size, const float* pointer)": {
			"prefix": "void GLProgramState::setUniformFloatv(const std::string& uniformName, ssize_t size, const float* pointer)",
			"body": [
				"GLProgramState:setUniformFloatv(${1:std:string& uniformName},${2:ssize_t size},${3:float* pointer})"
			],
			"description": "void GLProgramState::setUniformFloatv(const std::string& uniformName, ssize_t size, const float* pointer)"
		},
		 "cocos2d::Vector<SkinNode*> BoneNode::getAllSubSkins() const": {
			"prefix": "cocos2d::Vector<SkinNode*> BoneNode::getAllSubSkins() const",
			"body": [
				"cocos2d:Vector<SkinNode*> BoneNode:getAllSubSkins() "
			],
			"description": "cocos2d::Vector<SkinNode*> BoneNode::getAllSubSkins() const"
		},
		 "Vector<Node*>& ScrollView::getChildren()": {
			"prefix": "Vector<Node*>& ScrollView::getChildren()",
			"body": [
				"Vector<Node*>& ScrollView:getChildren()"
			],
			"description": "Vector<Node*>& ScrollView::getChildren()"
		},
		 "const unsigned int PolygonInfo::getVertCount() const": {
			"prefix": "const unsigned int PolygonInfo::getVertCount() const",
			"body": [
				" unsigned int PolygonInfo:getVertCount() "
			],
			"description": "const unsigned int PolygonInfo::getVertCount() const"
		},
		 "void ListView::insertDefaultItem(ssize_t index)": {
			"prefix": "void ListView::insertDefaultItem(ssize_t index)",
			"body": [
				"ListView:insertDefaultItem(${1:ssize_t index})"
			],
			"description": "void ListView::insertDefaultItem(ssize_t index)"
		},
		 "float Physics3DSliderConstraint::getTargetAngMotorVelocity() const": {
			"prefix": "float Physics3DSliderConstraint::getTargetAngMotorVelocity() const",
			"body": [
				"float Physics3DSliderConstraint:getTargetAngMotorVelocity() "
			],
			"description": "float Physics3DSliderConstraint::getTargetAngMotorVelocity() const"
		},
		 "void ScrollView::jumpToBottomRight()": {
			"prefix": "void ScrollView::jumpToBottomRight()",
			"body": [
				"void ScrollView:jumpToBottomRight()"
			],
			"description": "void ScrollView::jumpToBottomRight()"
		},
		 "void Component::onExit()": {
			"prefix": "void Component::onExit()",
			"body": [
				"void Component:onExit()"
			],
			"description": "void Component::onExit()"
		},
		 "bool ArmatureAnimation::init(Armature *armature)": {
			"prefix": "bool ArmatureAnimation::init(Armature *armature)",
			"body": [
				"ArmatureAnimation:init(${1:Armature *armature})"
			],
			"description": "bool ArmatureAnimation::init(Armature *armature)"
		},
		 "Texture2D::PixelFormat Texture2D::convertDataToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat originFormat, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)": {
			"prefix": "Texture2D::PixelFormat Texture2D::convertDataToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat originFormat, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)",
			"body": [
				"Texture2D:convertDataToFormat(${1:unsigned char* data},${2:ssize_t dataLen},${3:PixelFormat originFormat},${4:PixelFormat format},${5:unsigned char** outData},${6:ssize_t* outDataLen})"
			],
			"description": "Texture2D::PixelFormat Texture2D::convertDataToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat originFormat, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)"
		},
		 "cocos2d::Vec3	Physics3D6DofConstraint::getLinearLowerLimit() const": {
			"prefix": "cocos2d::Vec3	Physics3D6DofConstraint::getLinearLowerLimit() const",
			"body": [
				"cocos2d:Vec3	Physics3D6DofConstraint:getLinearLowerLimit() "
			],
			"description": "cocos2d::Vec3	Physics3D6DofConstraint::getLinearLowerLimit() const"
		},
		 "bool FileUtils::isFileExist(const std::string& filename) const": {
			"prefix": "bool FileUtils::isFileExist(const std::string& filename) const",
			"body": [
				"FileUtils:isFileExist(${1:std:string& filename})"
			],
			"description": "bool FileUtils::isFileExist(const std::string& filename) const"
		},
		 "void EditBox::setFontColor(const Color3B& color)": {
			"prefix": "void EditBox::setFontColor(const Color3B& color)",
			"body": [
				"EditBox:setFontColor(${1:Color3B& color})"
			],
			"description": "void EditBox::setFontColor(const Color3B& color)"
		},
		 "void AndroidJavaEngine::setEffectsVolume(float volume)": {
			"prefix": "void AndroidJavaEngine::setEffectsVolume(float volume)",
			"body": [
				"AndroidJavaEngine:setEffectsVolume(${1:float volume})"
			],
			"description": "void AndroidJavaEngine::setEffectsVolume(float volume)"
		},
		 "void TransitionFadeTR::sceneOrder()": {
			"prefix": "void TransitionFadeTR::sceneOrder()",
			"body": [
				"void TransitionFadeTR:sceneOrder()"
			],
			"description": "void TransitionFadeTR::sceneOrder()"
		},
		 "void Mat4::multiply(const Mat4& m, float scalar, Mat4* dst)": {
			"prefix": "void Mat4::multiply(const Mat4& m, float scalar, Mat4* dst)",
			"body": [
				"Mat4:multiply(${1:Mat4& m},${2:float scalar},${3:Mat4* dst})"
			],
			"description": "void Mat4::multiply(const Mat4& m, float scalar, Mat4* dst)"
		},
		 "void ParticleSystem::setSpeed(float speed)": {
			"prefix": "void ParticleSystem::setSpeed(float speed)",
			"body": [
				"ParticleSystem:setSpeed(${1:float speed})"
			],
			"description": "void ParticleSystem::setSpeed(float speed)"
		},
		 "bool MenuItemImage::init(void)": {
			"prefix": "bool MenuItemImage::init(void)",
			"body": [
				"MenuItemImage:init(${1:void})"
			],
			"description": "bool MenuItemImage::init(void)"
		},
		 "bool TriggerMng::isEmpty(void) const": {
			"prefix": "bool TriggerMng::isEmpty(void) const",
			"body": [
				"TriggerMng:isEmpty(${1:void})"
			],
			"description": "bool TriggerMng::isEmpty(void) const"
		},
		 "__String* __String::create(const std::string& str)": {
			"prefix": "__String* __String::create(const std::string& str)",
			"body": [
				"__String:create(${1:std:string& str})"
			],
			"description": "__String* __String::create(const std::string& str)"
		},
		 "void Widget::onTouchMoved(Touch *touch, Event *unusedEvent)": {
			"prefix": "void Widget::onTouchMoved(Touch *touch, Event *unusedEvent)",
			"body": [
				"Widget:onTouchMoved(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void Widget::onTouchMoved(Touch *touch, Event *unusedEvent)"
		},
		 "void ScrollView::setInnerContainerPosition(const Vec2 &position)": {
			"prefix": "void ScrollView::setInnerContainerPosition(const Vec2 &position)",
			"body": [
				"ScrollView:setInnerContainerPosition(${1:Vec2 &position})"
			],
			"description": "void ScrollView::setInnerContainerPosition(const Vec2 &position)"
		},
		 "void SkeletonNode::sortOrderedAllBones()": {
			"prefix": "void SkeletonNode::sortOrderedAllBones()",
			"body": [
				"void SkeletonNode:sortOrderedAllBones()"
			],
			"description": "void SkeletonNode::sortOrderedAllBones()"
		},
		 "void Sprite3D::removeAttachNode(const std::string& boneName)": {
			"prefix": "void Sprite3D::removeAttachNode(const std::string& boneName)",
			"body": [
				"Sprite3D:removeAttachNode(${1:std:string& boneName})"
			],
			"description": "void Sprite3D::removeAttachNode(const std::string& boneName)"
		},
		 "bool AccelDeccelAmplitude::initWithAction(Action *action, float duration)": {
			"prefix": "bool AccelDeccelAmplitude::initWithAction(Action *action, float duration)",
			"body": [
				"AccelDeccelAmplitude:initWithAction(${1:Action *action},${2:float duration})"
			],
			"description": "bool AccelDeccelAmplitude::initWithAction(Action *action, float duration)"
		},
		 "bool PhysicsJointRatchet::createConstraints()": {
			"prefix": "bool PhysicsJointRatchet::createConstraints()",
			"body": [
				"bool PhysicsJointRatchet:createConstraints()"
			],
			"description": "bool PhysicsJointRatchet::createConstraints()"
		},
		 "EaseSineOut* EaseSineOut::clone() const": {
			"prefix": "EaseSineOut* EaseSineOut::clone() const",
			"body": [
				"EaseSineOut* EaseSineOut:clone() "
			],
			"description": "EaseSineOut* EaseSineOut::clone() const"
		},
		 "bool NavMeshObstacle::initWith(float radius, float height)": {
			"prefix": "bool NavMeshObstacle::initWith(float radius, float height)",
			"body": [
				"NavMeshObstacle:initWith(${1:float radius},${2:float height})"
			],
			"description": "bool NavMeshObstacle::initWith(float radius, float height)"
		},
		 "void DataVisitor::visit(const __Dictionary *value)": {
			"prefix": "void DataVisitor::visit(const __Dictionary *value)",
			"body": [
				"DataVisitor:visit(${1:__Dictionary *value})"
			],
			"description": "void DataVisitor::visit(const __Dictionary *value)"
		},
		 "Type stExpCocoNode::GetType(CocoLoader*	pCoco)": {
			"prefix": "Type stExpCocoNode::GetType(CocoLoader*	pCoco)",
			"body": [
				"stExpCocoNode:GetType(${1:CocoLoader*	pCoco})"
			],
			"description": "Type stExpCocoNode::GetType(CocoLoader*	pCoco)"
		},
		 "void CCBAnimationManager::addDocumentCallbackControlEvents(Control::EventType eventType)": {
			"prefix": "void CCBAnimationManager::addDocumentCallbackControlEvents(Control::EventType eventType)",
			"body": [
				"CCBAnimationManager:addDocumentCallbackControlEvents(${1:Control:EventType eventType})"
			],
			"description": "void CCBAnimationManager::addDocumentCallbackControlEvents(Control::EventType eventType)"
		},
		 "void ParticleSystemQuad::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void ParticleSystemQuad::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"ParticleSystemQuad:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void ParticleSystemQuad::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void GLViewImpl::setFrameZoomFactor(float zoomFactor)": {
			"prefix": "void GLViewImpl::setFrameZoomFactor(float zoomFactor)",
			"body": [
				"GLViewImpl:setFrameZoomFactor(${1:float zoomFactor})"
			],
			"description": "void GLViewImpl::setFrameZoomFactor(float zoomFactor)"
		},
		 "Rect::Rect(const Rect& other)": {
			"prefix": "Rect::Rect(const Rect& other)",
			"body": [
				"other})"
			],
			"description": "Rect::Rect(const Rect& other)"
		},
		 "TransitionZoomFlipX* TransitionZoomFlipX::create(float t, Scene* s, Orientation o)": {
			"prefix": "TransitionZoomFlipX* TransitionZoomFlipX::create(float t, Scene* s, Orientation o)",
			"body": [
				"TransitionZoomFlipX:create(${1:float t},${2:Scene* s},${3:Orientation o})"
			],
			"description": "TransitionZoomFlipX* TransitionZoomFlipX::create(float t, Scene* s, Orientation o)"
		},
		 "void CCBEaseInstant::update(float dt)": {
			"prefix": "void CCBEaseInstant::update(float dt)",
			"body": [
				"CCBEaseInstant:update(${1:float dt})"
			],
			"description": "void CCBEaseInstant::update(float dt)"
		},
		 "void RenderState::cloneInto(RenderState* renderState) const": {
			"prefix": "void RenderState::cloneInto(RenderState* renderState) const",
			"body": [
				"RenderState:cloneInto(${1:RenderState* renderState})"
			],
			"description": "void RenderState::cloneInto(RenderState* renderState) const"
		},
		 "bool ScrollView::onTouchBegan(Touch *touch, Event *unusedEvent)": {
			"prefix": "bool ScrollView::onTouchBegan(Touch *touch, Event *unusedEvent)",
			"body": [
				"ScrollView:onTouchBegan(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "bool ScrollView::onTouchBegan(Touch *touch, Event *unusedEvent)"
		},
		 "void AndroidJavaEngine::resumeAllEffects()": {
			"prefix": "void AndroidJavaEngine::resumeAllEffects()",
			"body": [
				"void AndroidJavaEngine:resumeAllEffects()"
			],
			"description": "void AndroidJavaEngine::resumeAllEffects()"
		},
		 "void Scheduler::performFunctionInCocosThread(const std::function<void ()> &function)": {
			"prefix": "void Scheduler::performFunctionInCocosThread(const std::function<void ()> &function)",
			"body": [
				"void Scheduler:performFunctionInCocosThread( std:function<void ()> &function)"
			],
			"description": "void Scheduler::performFunctionInCocosThread(const std::function<void ()> &function)"
		},
		 "float Physics3DSliderConstraint::getLinearPos() const": {
			"prefix": "float Physics3DSliderConstraint::getLinearPos() const",
			"body": [
				"float Physics3DSliderConstraint:getLinearPos() "
			],
			"description": "float Physics3DSliderConstraint::getLinearPos() const"
		},
		 "int UICCTextField::getCharCount()const": {
			"prefix": "int UICCTextField::getCharCount()const",
			"body": [
				"int UICCTextField:getCharCount()"
			],
			"description": "int UICCTextField::getCharCount()const"
		},
		 "void Node::reorderChild(Node *child, int zOrder)": {
			"prefix": "void Node::reorderChild(Node *child, int zOrder)",
			"body": [
				"Node:reorderChild(${1:Node *child},${2:int zOrder})"
			],
			"description": "void Node::reorderChild(Node *child, int zOrder)"
		},
		 "void LabelTTF::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void LabelTTF::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"LabelTTF:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void LabelTTF::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "void Texture2D::convertI8ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertI8ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertI8ToRGB565(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertI8ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "Frame* ActionTimelineCache::loadTextureFrameWithFlatBuffers(const flatbuffers::TextureFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadTextureFrameWithFlatBuffers(const flatbuffers::TextureFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadTextureFrameWithFlatBuffers(${1:flatbuffers:TextureFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadTextureFrameWithFlatBuffers(const flatbuffers::TextureFrame *flatbuffers)"
		},
		 "void ActionCamera::updateTransform()": {
			"prefix": "void ActionCamera::updateTransform()",
			"body": [
				"void ActionCamera:updateTransform()"
			],
			"description": "void ActionCamera::updateTransform()"
		},
		 "bool Bundle3D::loadNodesJson(NodeDatas& nodedatas)": {
			"prefix": "bool Bundle3D::loadNodesJson(NodeDatas& nodedatas)",
			"body": [
				"Bundle3D:loadNodesJson(${1:NodeDatas& nodedatas})"
			],
			"description": "bool Bundle3D::loadNodesJson(NodeDatas& nodedatas)"
		},
		 "void Downloader::notifyError(const std::string& msg, int curlm_code, const std::string& customId/* = ""*/)": {
			"prefix": "void Downloader::notifyError(const std::string& msg, int curlm_code, const std::string& customId/* = ""*/)",
			"body": [
				"Downloader:notifyError(${1:std:string& msg},${2:int curlm_code},${3:std:string& customId/* = ""*/})"
			],
			"description": "void Downloader::notifyError(const std::string& msg, int curlm_code, const std::string& customId/* = ""*/)"
		},
		 "bool Bundle3D::loadMaterials(MaterialDatas& materialdatas)": {
			"prefix": "bool Bundle3D::loadMaterials(MaterialDatas& materialdatas)",
			"body": [
				"Bundle3D:loadMaterials(${1:MaterialDatas& materialdatas})"
			],
			"description": "bool Bundle3D::loadMaterials(MaterialDatas& materialdatas)"
		},
		 "bool Camera::initDefault()": {
			"prefix": "bool Camera::initDefault()",
			"body": [
				"bool Camera:initDefault()"
			],
			"description": "bool Camera::initDefault()"
		},
		 "bool GridBase::initWithSize(const Size& gridSize)": {
			"prefix": "bool GridBase::initWithSize(const Size& gridSize)",
			"body": [
				"GridBase:initWithSize(${1:Size& gridSize})"
			],
			"description": "bool GridBase::initWithSize(const Size& gridSize)"
		},
		 "ActionEase* EaseSineIn::reverse() const": {
			"prefix": "ActionEase* EaseSineIn::reverse() const",
			"body": [
				"ActionEase* EaseSineIn:reverse() "
			],
			"description": "ActionEase* EaseSineIn::reverse() const"
		},
		 "void ParticleSystem::setTangentialAccelVar(float t)": {
			"prefix": "void ParticleSystem::setTangentialAccelVar(float t)",
			"body": [
				"ParticleSystem:setTangentialAccelVar(${1:float t})"
			],
			"description": "void ParticleSystem::setTangentialAccelVar(float t)"
		},
		 "void TextField::update(float dt)": {
			"prefix": "void TextField::update(float dt)",
			"body": [
				"TextField:update(${1:float dt})"
			],
			"description": "void TextField::update(float dt)"
		},
		 "ActionInterval* TransitionSlideInL::easeActionWithAction(ActionInterval* action)": {
			"prefix": "ActionInterval* TransitionSlideInL::easeActionWithAction(ActionInterval* action)",
			"body": [
				"TransitionSlideInL:easeActionWithAction(${1:ActionInterval* action})"
			],
			"description": "ActionInterval* TransitionSlideInL::easeActionWithAction(ActionInterval* action)"
		},
		 "void MotionStreak::setPosition(const Vec2& position)": {
			"prefix": "void MotionStreak::setPosition(const Vec2& position)",
			"body": [
				"MotionStreak:setPosition(${1:Vec2& position})"
			],
			"description": "void MotionStreak::setPosition(const Vec2& position)"
		},
		 "void CCBAnimationManager::setCallFunc(CallFunc* callFunc, const std::string &callbackNamed)": {
			"prefix": "void CCBAnimationManager::setCallFunc(CallFunc* callFunc, const std::string &callbackNamed)",
			"body": [
				"CCBAnimationManager:setCallFunc(${1:CallFunc* callFunc},${2:std:string &callbackNamed})"
			],
			"description": "void CCBAnimationManager::setCallFunc(CallFunc* callFunc, const std::string &callbackNamed)"
		},
		 "void TransformHelp::nodeSub(BaseData &target, BaseData &source)": {
			"prefix": "void TransformHelp::nodeSub(BaseData &target, BaseData &source)",
			"body": [
				"TransformHelp:nodeSub(${1:BaseData &target},${2:BaseData &source})"
			],
			"description": "void TransformHelp::nodeSub(BaseData &target, BaseData &source)"
		},
		 "Terrain::QuadTree::QuadTree(int x, int y, int w, int h, Terrain * terrain)": {
			"prefix": "Terrain::QuadTree::QuadTree(int x, int y, int w, int h, Terrain * terrain)",
			"body": [
				"x},${2:int y},${3:int w},${4:int h},${5:Terrain * terrain})"
			],
			"description": "Terrain::QuadTree::QuadTree(int x, int y, int w, int h, Terrain * terrain)"
		},
		 "CC_DLL Vec2 getAbsolutePosition(const Vec2 &pt, CCBReader::PositionType type, const Size &containerSize, const std::string& propName)": {
			"prefix": "CC_DLL Vec2 getAbsolutePosition(const Vec2 &pt, CCBReader::PositionType type, const Size &containerSize, const std::string& propName)",
			"body": [
				"Vec2 getAbsolutePosition(${1:Vec2 &pt},${2:CCBReader:PositionType type},${3:Size &containerSize},${4:std:string& propName})"
			],
			"description": "CC_DLL Vec2 getAbsolutePosition(const Vec2 &pt, CCBReader::PositionType type, const Size &containerSize, const std::string& propName)"
		},
		 "ValueMap& NodeLoader::getCustomProperties()": {
			"prefix": "ValueMap& NodeLoader::getCustomProperties()",
			"body": [
				"ValueMap& NodeLoader:getCustomProperties()"
			],
			"description": "ValueMap& NodeLoader::getCustomProperties()"
		},
		 "Frame* ActionTimelineCache::loadBlendFrameWithFlatBuffers(const flatbuffers::BlendFrame* flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadBlendFrameWithFlatBuffers(const flatbuffers::BlendFrame* flatbuffers)",
			"body": [
				"ActionTimelineCache:loadBlendFrameWithFlatBuffers(${1:flatbuffers:BlendFrame* flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadBlendFrameWithFlatBuffers(const flatbuffers::BlendFrame* flatbuffers)"
		},
		 "ValueVector& CCBAnimationManager::getKeyframeCallbacks()": {
			"prefix": "ValueVector& CCBAnimationManager::getKeyframeCallbacks()",
			"body": [
				"ValueVector& CCBAnimationManager:getKeyframeCallbacks()"
			],
			"description": "ValueVector& CCBAnimationManager::getKeyframeCallbacks()"
		},
		 "void ActionTimelineCache::purge()": {
			"prefix": "void ActionTimelineCache::purge()",
			"body": [
				"void ActionTimelineCache:purge()"
			],
			"description": "void ActionTimelineCache::purge()"
		},
		 "void ProtectedNode::disableCascadeOpacity()": {
			"prefix": "void ProtectedNode::disableCascadeOpacity()",
			"body": [
				"void ProtectedNode:disableCascadeOpacity()"
			],
			"description": "void ProtectedNode::disableCascadeOpacity()"
		},
		 "void Button::setCapInsetsPressedRenderer(const Rect &capInsets)": {
			"prefix": "void Button::setCapInsetsPressedRenderer(const Rect &capInsets)",
			"body": [
				"Button:setCapInsetsPressedRenderer(${1:Rect &capInsets})"
			],
			"description": "void Button::setCapInsetsPressedRenderer(const Rect &capInsets)"
		},
		 "void DataVisitor::visit(const __String *value)": {
			"prefix": "void DataVisitor::visit(const __String *value)",
			"body": [
				"DataVisitor:visit(${1:__String *value})"
			],
			"description": "void DataVisitor::visit(const __String *value)"
		},
		 "bool UICCTextField::isMaxLengthEnabled()const": {
			"prefix": "bool UICCTextField::isMaxLengthEnabled()const",
			"body": [
				"bool UICCTextField:isMaxLengthEnabled()"
			],
			"description": "bool UICCTextField::isMaxLengthEnabled()const"
		},
		 "void Quaternion::lerp(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)": {
			"prefix": "void Quaternion::lerp(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)",
			"body": [
				"Quaternion:lerp(${1:Quaternion& q1},${2:Quaternion& q2},${3:float t},${4:Quaternion* dst})"
			],
			"description": "void Quaternion::lerp(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)"
		},
		 "void TextureCache::unbindImageAsync(const std::string& filename)": {
			"prefix": "void TextureCache::unbindImageAsync(const std::string& filename)",
			"body": [
				"TextureCache:unbindImageAsync(${1:std:string& filename})"
			],
			"description": "void TextureCache::unbindImageAsync(const std::string& filename)"
		},
		 "void Quaternion::set(const Vec3& axis, float angle)": {
			"prefix": "void Quaternion::set(const Vec3& axis, float angle)",
			"body": [
				"Quaternion:set(${1:Vec3& axis},${2:float angle})"
			],
			"description": "void Quaternion::set(const Vec3& axis, float angle)"
		},
		 "float Physics3DSliderConstraint::getSoftnessLimLin() const": {
			"prefix": "float Physics3DSliderConstraint::getSoftnessLimLin() const",
			"body": [
				"float Physics3DSliderConstraint:getSoftnessLimLin() "
			],
			"description": "float Physics3DSliderConstraint::getSoftnessLimLin() const"
		},
		 "Widget* LoadingBar::createCloneInstance()": {
			"prefix": "Widget* LoadingBar::createCloneInstance()",
			"body": [
				"Widget* LoadingBar:createCloneInstance()"
			],
			"description": "Widget* LoadingBar::createCloneInstance()"
		},
		 "Size Widget::getVirtualRendererSize() const": {
			"prefix": "Size Widget::getVirtualRendererSize() const",
			"body": [
				"Size Widget:getVirtualRendererSize() "
			],
			"description": "Size Widget::getVirtualRendererSize() const"
		},
		 "bool Node::isRunning() const": {
			"prefix": "bool Node::isRunning() const",
			"body": [
				"bool Node:isRunning() "
			],
			"description": "bool Node::isRunning() const"
		},
		 "void UICCTextField::closeIME()": {
			"prefix": "void UICCTextField::closeIME()",
			"body": [
				"void UICCTextField:closeIME()"
			],
			"description": "void UICCTextField::closeIME()"
		},
		 "void ActionObject::simulationActionUpdate(float dt)": {
			"prefix": "void ActionObject::simulationActionUpdate(float dt)",
			"body": [
				"ActionObject:simulationActionUpdate(${1:float dt})"
			],
			"description": "void ActionObject::simulationActionUpdate(float dt)"
		},
		 "void SimpleAudioEngine::resumeEffect(unsigned int nSoundId)": {
			"prefix": "void SimpleAudioEngine::resumeEffect(unsigned int nSoundId)",
			"body": [
				"SimpleAudioEngine:resumeEffect(${1:unsigned int nSoundId})"
			],
			"description": "void SimpleAudioEngine::resumeEffect(unsigned int nSoundId)"
		},
		 "JavaVM* JniHelper::getJavaVM()": {
			"prefix": "JavaVM* JniHelper::getJavaVM()",
			"body": [
				"JavaVM* JniHelper:getJavaVM()"
			],
			"description": "JavaVM* JniHelper::getJavaVM()"
		},
		 "void TMXTiledMap::buildWithMapInfo(TMXMapInfo* mapInfo)": {
			"prefix": "void TMXTiledMap::buildWithMapInfo(TMXMapInfo* mapInfo)",
			"body": [
				"TMXTiledMap:buildWithMapInfo(${1:TMXMapInfo* mapInfo})"
			],
			"description": "void TMXTiledMap::buildWithMapInfo(TMXMapInfo* mapInfo)"
		},
		 "void Grid3D::beforeBlit()": {
			"prefix": "void Grid3D::beforeBlit()",
			"body": [
				"void Grid3D:beforeBlit()"
			],
			"description": "void Grid3D::beforeBlit()"
		},
		 "void RotationSkewFrame::onApply(float percent)": {
			"prefix": "void RotationSkewFrame::onApply(float percent)",
			"body": [
				"RotationSkewFrame:onApply(${1:float percent})"
			],
			"description": "void RotationSkewFrame::onApply(float percent)"
		},
		 "bool ParticleSystemQuad::allocMemory()": {
			"prefix": "bool ParticleSystemQuad::allocMemory()",
			"body": [
				"bool ParticleSystemQuad:allocMemory()"
			],
			"description": "bool ParticleSystemQuad::allocMemory()"
		},
		 "void PhysicsShape::setBody(PhysicsBody *body)": {
			"prefix": "void PhysicsShape::setBody(PhysicsBody *body)",
			"body": [
				"PhysicsShape:setBody(${1:PhysicsBody *body})"
			],
			"description": "void PhysicsShape::setBody(PhysicsBody *body)"
		},
		 "void RenderQueue::sort()": {
			"prefix": "void RenderQueue::sort()",
			"body": [
				"void RenderQueue:sort()"
			],
			"description": "void RenderQueue::sort()"
		},
		 "SIOClientImpl* SocketIO::getSocket(const std::string& uri)": {
			"prefix": "SIOClientImpl* SocketIO::getSocket(const std::string& uri)",
			"body": [
				"SocketIO:getSocket(${1:std:string& uri})"
			],
			"description": "SIOClientImpl* SocketIO::getSocket(const std::string& uri)"
		},
		 "void SkeletonRenderer::setSlotsToSetupPose ()": {
			"prefix": "void SkeletonRenderer::setSlotsToSetupPose ()",
			"body": [
				"void SkeletonRenderer:setSlotsToSetupPose ()"
			],
			"description": "void SkeletonRenderer::setSlotsToSetupPose ()"
		},
		 "bool Label::computeHorizontalKernings(const std::u16string& stringToRender)": {
			"prefix": "bool Label::computeHorizontalKernings(const std::u16string& stringToRender)",
			"body": [
				"Label:computeHorizontalKernings(${1:std:u16string& stringToRender})"
			],
			"description": "bool Label::computeHorizontalKernings(const std::u16string& stringToRender)"
		},
		 "void CCArmatureDataManager::addRelativeData(const std::string& configFilePath)": {
			"prefix": "void CCArmatureDataManager::addRelativeData(const std::string& configFilePath)",
			"body": [
				"CCArmatureDataManager:addRelativeData(${1:std:string& configFilePath})"
			],
			"description": "void CCArmatureDataManager::addRelativeData(const std::string& configFilePath)"
		},
		 "void SkeletonNode::updateColor()": {
			"prefix": "void SkeletonNode::updateColor()",
			"body": [
				"void SkeletonNode:updateColor()"
			],
			"description": "void SkeletonNode::updateColor()"
		},
		 "void Physics3DSliderConstraint::setRestitutionLimAng(float restitutionLimAng)": {
			"prefix": "void Physics3DSliderConstraint::setRestitutionLimAng(float restitutionLimAng)",
			"body": [
				"Physics3DSliderConstraint:setRestitutionLimAng(${1:float restitutionLimAng})"
			],
			"description": "void Physics3DSliderConstraint::setRestitutionLimAng(float restitutionLimAng)"
		},
		 "float NavMeshAgent::getMaxAcceleration() const": {
			"prefix": "float NavMeshAgent::getMaxAcceleration() const",
			"body": [
				"float NavMeshAgent:getMaxAcceleration() "
			],
			"description": "float NavMeshAgent::getMaxAcceleration() const"
		},
		 "void Bone3D::setInverseBindPose(const Mat4& m)": {
			"prefix": "void Bone3D::setInverseBindPose(const Mat4& m)",
			"body": [
				"Bone3D:setInverseBindPose(${1:Mat4& m})"
			],
			"description": "void Bone3D::setInverseBindPose(const Mat4& m)"
		},
		 "void __Array::fastRemoveObjectAtIndex(int index)": {
			"prefix": "void __Array::fastRemoveObjectAtIndex(int index)",
			"body": [
				"__Array:fastRemoveObjectAtIndex(${1:int index})"
			],
			"description": "void __Array::fastRemoveObjectAtIndex(int index)"
		},
		 "FadeIn* FadeIn::clone() const": {
			"prefix": "FadeIn* FadeIn::clone() const",
			"body": [
				"FadeIn* FadeIn:clone() "
			],
			"description": "FadeIn* FadeIn::clone() const"
		},
		 "void Physics3DDebugDrawer::drawContactPoint( const btVector3& PointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color )": {
			"prefix": "void Physics3DDebugDrawer::drawContactPoint( const btVector3& PointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color )",
			"body": [
				"Physics3DDebugDrawer:drawContactPoint(${1:btVector3& PointOnB},${2:btVector3& normalOnB},${3:btScalar distance},${4:int lifeTime},${5:btVector3& color})"
			],
			"description": "void Physics3DDebugDrawer::drawContactPoint( const btVector3& PointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color )"
		},
		 "void EventDispatcher::setDirty(const EventListener::ListenerID& listenerID, DirtyFlag flag)": {
			"prefix": "void EventDispatcher::setDirty(const EventListener::ListenerID& listenerID, DirtyFlag flag)",
			"body": [
				"EventDispatcher:setDirty(${1:EventListener:ListenerID& listenerID},${2:DirtyFlag flag})"
			],
			"description": "void EventDispatcher::setDirty(const EventListener::ListenerID& listenerID, DirtyFlag flag)"
		},
		 "FlipX3D* FlipX3D::create(float duration)": {
			"prefix": "FlipX3D* FlipX3D::create(float duration)",
			"body": [
				"FlipX3D:create(${1:float duration})"
			],
			"description": "FlipX3D* FlipX3D::create(float duration)"
		},
		 "void SimpleAudioEngine::rewindBackgroundMusic()": {
			"prefix": "void SimpleAudioEngine::rewindBackgroundMusic()",
			"body": [
				"void SimpleAudioEngine:rewindBackgroundMusic()"
			],
			"description": "void SimpleAudioEngine::rewindBackgroundMusic()"
		},
		 "unsigned int getIndexOfLastNotChar16(const std::vector<char16_t>& str, char16_t c)": {
			"prefix": "unsigned int getIndexOfLastNotChar16(const std::vector<char16_t>& str, char16_t c)",
			"body": [
				"int getIndexOfLastNotChar16(${1:std:vector<char16_t>& str},${2:char16_t c})"
			],
			"description": "unsigned int getIndexOfLastNotChar16(const std::vector<char16_t>& str, char16_t c)"
		},
		 "ProgressTimer* TransitionProgress::progressTimerNodeWithRenderTexture(RenderTexture* texture)": {
			"prefix": "ProgressTimer* TransitionProgress::progressTimerNodeWithRenderTexture(RenderTexture* texture)",
			"body": [
				"TransitionProgress:progressTimerNodeWithRenderTexture(${1:RenderTexture* texture})"
			],
			"description": "ProgressTimer* TransitionProgress::progressTimerNodeWithRenderTexture(RenderTexture* texture)"
		},
		 "void PhysicsShape::updateScale()": {
			"prefix": "void PhysicsShape::updateScale()",
			"body": [
				"void PhysicsShape:updateScale()"
			],
			"description": "void PhysicsShape::updateScale()"
		},
		 "void AudioEngine::stopAll()": {
			"prefix": "void AudioEngine::stopAll()",
			"body": [
				"void AudioEngine:stopAll()"
			],
			"description": "void AudioEngine::stopAll()"
		},
		 "bool Follow::initWithTarget(Node *followedNode, const Rect& rect/* = Rect::ZERO*/)": {
			"prefix": "bool Follow::initWithTarget(Node *followedNode, const Rect& rect/* = Rect::ZERO*/)",
			"body": [
				"Follow:initWithTarget(${1:Node *followedNode},${2:Rect& rect/* = Rect:ZERO*/})"
			],
			"description": "bool Follow::initWithTarget(Node *followedNode, const Rect& rect/* = Rect::ZERO*/)"
		},
		 "void TransitionFlipY::onEnter()": {
			"prefix": "void TransitionFlipY::onEnter()",
			"body": [
				"void TransitionFlipY:onEnter()"
			],
			"description": "void TransitionFlipY::onEnter()"
		},
		 "void VertexAttribValue::setPointer(GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)": {
			"prefix": "void VertexAttribValue::setPointer(GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)",
			"body": [
				"VertexAttribValue:setPointer(${1:GLint size},${2:GLenum type},${3:GLboolean normalized},${4:GLsizei stride},${5:GLvoid *pointer})"
			],
			"description": "void VertexAttribValue::setPointer(GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)"
		},
		 "AnimationData *DataReaderHelper::decodeAnimation(const rapidjson::Value& json, DataInfo *dataInfo)": {
			"prefix": "AnimationData *DataReaderHelper::decodeAnimation(const rapidjson::Value& json, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeAnimation(${1:rapidjson:Value& json},${2:DataInfo *dataInfo})"
			],
			"description": "AnimationData *DataReaderHelper::decodeAnimation(const rapidjson::Value& json, DataInfo *dataInfo)"
		},
		 "__Dictionary* __Dictionary::createWithContentsOfFile(const char *pFileName)": {
			"prefix": "__Dictionary* __Dictionary::createWithContentsOfFile(const char *pFileName)",
			"body": [
				"__Dictionary:createWithContentsOfFile(${1:char *pFileName})"
			],
			"description": "__Dictionary* __Dictionary::createWithContentsOfFile(const char *pFileName)"
		},
		 "bool __Dictionary::init()": {
			"prefix": "bool __Dictionary::init()",
			"body": [
				"bool __Dictionary:init()"
			],
			"description": "bool __Dictionary::init()"
		},
		 "GLenum NavMeshDebugDraw::getPrimitiveType(duDebugDrawPrimitives prim)": {
			"prefix": "GLenum NavMeshDebugDraw::getPrimitiveType(duDebugDrawPrimitives prim)",
			"body": [
				"NavMeshDebugDraw:getPrimitiveType(${1:duDebugDrawPrimitives prim})"
			],
			"description": "GLenum NavMeshDebugDraw::getPrimitiveType(duDebugDrawPrimitives prim)"
		},
		 "int TMXLayer::getTileGIDAt(const Vec2& tileCoordinate, TMXTileFlags* flags/* = nullptr*/)": {
			"prefix": "int TMXLayer::getTileGIDAt(const Vec2& tileCoordinate, TMXTileFlags* flags/* = nullptr*/)",
			"body": [
				"TMXLayer:getTileGIDAt(${1:Vec2& tileCoordinate},${2:TMXTileFlags* flags/* = nullptr*/})"
			],
			"description": "int TMXLayer::getTileGIDAt(const Vec2& tileCoordinate, TMXTileFlags* flags/* = nullptr*/)"
		},
		 "void TransitionTurnOffTiles::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void TransitionTurnOffTiles::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"TransitionTurnOffTiles:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void TransitionTurnOffTiles::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "int Label::getStringLength()": {
			"prefix": "int Label::getStringLength()",
			"body": [
				"int Label:getStringLength()"
			],
			"description": "int Label::getStringLength()"
		},
		 "void Texture2D::convertRGBA8888ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGBA8888ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGBA8888ToRGBA4444(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGBA8888ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void PageView::movePages(Vec2 offset)": {
			"prefix": "void PageView::movePages(Vec2 offset)",
			"body": [
				"PageView:movePages(${1:Vec2 offset})"
			],
			"description": "void PageView::movePages(Vec2 offset)"
		},
		 "void ArmatureDataManager::removeAnimationData(const std::string& id)": {
			"prefix": "void ArmatureDataManager::removeAnimationData(const std::string& id)",
			"body": [
				"ArmatureDataManager:removeAnimationData(${1:std:string& id})"
			],
			"description": "void ArmatureDataManager::removeAnimationData(const std::string& id)"
		},
		 "bool UICCTextField::getInsertText()const": {
			"prefix": "bool UICCTextField::getInsertText()const",
			"body": [
				"bool UICCTextField:getInsertText()"
			],
			"description": "bool UICCTextField::getInsertText()const"
		},
		 "void ControlLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)": {
			"prefix": "void ControlLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)",
			"body": [
				"ControlLoader:onHandlePropTypeCheck(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:bool pCheck},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)"
		},
		 "void TextField::setPlaceHolderColor(const cocos2d::Color4B &color)": {
			"prefix": "void TextField::setPlaceHolderColor(const cocos2d::Color4B &color)",
			"body": [
				"TextField:setPlaceHolderColor(${1:cocos2d:Color4B &color})"
			],
			"description": "void TextField::setPlaceHolderColor(const cocos2d::Color4B &color)"
		},
		 "float ActionObject::getTotalTime()": {
			"prefix": "float ActionObject::getTotalTime()",
			"body": [
				"float ActionObject:getTotalTime()"
			],
			"description": "float ActionObject::getTotalTime()"
		},
		 "void TextureFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void TextureFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"TextureFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void TextureFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void Console::commandUpload(int fd)": {
			"prefix": "void Console::commandUpload(int fd)",
			"body": [
				"Console:commandUpload(${1:int fd})"
			],
			"description": "void Console::commandUpload(int fd)"
		},
		 "void PhysicsJointSpring::setAnchr1(const Vec2& anchr)": {
			"prefix": "void PhysicsJointSpring::setAnchr1(const Vec2& anchr)",
			"body": [
				"PhysicsJointSpring:setAnchr1(${1:Vec2& anchr})"
			],
			"description": "void PhysicsJointSpring::setAnchr1(const Vec2& anchr)"
		},
		 "void ScrollView::setScrollBarEnabled(bool enabled)": {
			"prefix": "void ScrollView::setScrollBarEnabled(bool enabled)",
			"body": [
				"ScrollView:setScrollBarEnabled(${1:bool enabled})"
			],
			"description": "void ScrollView::setScrollBarEnabled(bool enabled)"
		},
		 "Terrain::ChunkIndices Terrain::insertIndicesLOD(int neighborLod[4], int selfLod, GLushort * indices,int size)": {
			"prefix": "Terrain::ChunkIndices Terrain::insertIndicesLOD(int neighborLod[4], int selfLod, GLushort * indices,int size)",
			"body": [
				"Terrain:insertIndicesLOD(${1:int neighborLod[4]},${2:int selfLod},${3:GLushort * indices},${4:int size})"
			],
			"description": "Terrain::ChunkIndices Terrain::insertIndicesLOD(int neighborLod[4], int selfLod, GLushort * indices,int size)"
		},
		 "void ActionTintFrame::setColor(Color3B ccolor)": {
			"prefix": "void ActionTintFrame::setColor(Color3B ccolor)",
			"body": [
				"ActionTintFrame:setColor(${1:Color3B ccolor})"
			],
			"description": "void ActionTintFrame::setColor(Color3B ccolor)"
		},
		 "void Lens3D::update(float time)": {
			"prefix": "void Lens3D::update(float time)",
			"body": [
				"Lens3D:update(${1:float time})"
			],
			"description": "void Lens3D::update(float time)"
		},
		 "EaseQuarticActionIn* EaseQuarticActionIn::reverse() const": {
			"prefix": "EaseQuarticActionIn* EaseQuarticActionIn::reverse() const",
			"body": [
				"EaseQuarticActionIn* EaseQuarticActionIn:reverse() "
			],
			"description": "EaseQuarticActionIn* EaseQuarticActionIn::reverse() const"
		},
		 "ssize_t SpriteBatchNode::lowestAtlasIndexInChild(Sprite *sprite)": {
			"prefix": "ssize_t SpriteBatchNode::lowestAtlasIndexInChild(Sprite *sprite)",
			"body": [
				"SpriteBatchNode:lowestAtlasIndexInChild(${1:Sprite *sprite})"
			],
			"description": "ssize_t SpriteBatchNode::lowestAtlasIndexInChild(Sprite *sprite)"
		},
		 "TMXObjectGroup * TMXTiledMap::getObjectGroup(const std::string& groupName) const": {
			"prefix": "TMXObjectGroup * TMXTiledMap::getObjectGroup(const std::string& groupName) const",
			"body": [
				"* TMXTiledMap:getObjectGroup(${1:std:string& groupName})"
			],
			"description": "TMXObjectGroup * TMXTiledMap::getObjectGroup(const std::string& groupName) const"
		},
		 "void Quaternion::set(float xx, float yy, float zz, float ww)": {
			"prefix": "void Quaternion::set(float xx, float yy, float zz, float ww)",
			"body": [
				"Quaternion:set(${1:float xx},${2:float yy},${3:float zz},${4:float ww})"
			],
			"description": "void Quaternion::set(float xx, float yy, float zz, float ww)"
		},
		 "void FontAtlas::relaseTextures()": {
			"prefix": "void FontAtlas::relaseTextures()",
			"body": [
				"void FontAtlas:relaseTextures()"
			],
			"description": "void FontAtlas::relaseTextures()"
		},
		 "void AbstractCheckButton::loadTextureBackGround(const std::string& backGround,TextureResType texType)": {
			"prefix": "void AbstractCheckButton::loadTextureBackGround(const std::string& backGround,TextureResType texType)",
			"body": [
				"AbstractCheckButton:loadTextureBackGround(${1:std:string& backGround},${2:TextureResType texType})"
			],
			"description": "void AbstractCheckButton::loadTextureBackGround(const std::string& backGround,TextureResType texType)"
		},
		 "float PhysicsShapePolygon::calculateArea(const Vec2* points, int count)": {
			"prefix": "float PhysicsShapePolygon::calculateArea(const Vec2* points, int count)",
			"body": [
				"PhysicsShapePolygon:calculateArea(${1:Vec2* points},${2:int count})"
			],
			"description": "float PhysicsShapePolygon::calculateArea(const Vec2* points, int count)"
		},
		 "void EaseBezierAction::update(float time)": {
			"prefix": "void EaseBezierAction::update(float time)",
			"body": [
				"EaseBezierAction:update(${1:float time})"
			],
			"description": "void EaseBezierAction::update(float time)"
		},
		 "void ScrollView::onEnter()": {
			"prefix": "void ScrollView::onEnter()",
			"body": [
				"void ScrollView:onEnter()"
			],
			"description": "void ScrollView::onEnter()"
		},
		 "float Physics3DSliderConstraint::getSoftnessOrthoLin() const": {
			"prefix": "float Physics3DSliderConstraint::getSoftnessOrthoLin() const",
			"body": [
				"float Physics3DSliderConstraint:getSoftnessOrthoLin() "
			],
			"description": "float Physics3DSliderConstraint::getSoftnessOrthoLin() const"
		},
		 "void Quaternion::setIdentity()": {
			"prefix": "void Quaternion::setIdentity()",
			"body": [
				"void Quaternion:setIdentity()"
			],
			"description": "void Quaternion::setIdentity()"
		},
		 "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode)": {
			"prefix": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode)",
			"body": [
				"BillBoard:createWithTexture(${1:Texture2D *texture},${2:Mode mode})"
			],
			"description": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode)"
		},
		 "bool TextureAtlas::initWithTexture(Texture2D *texture, ssize_t capacity)": {
			"prefix": "bool TextureAtlas::initWithTexture(Texture2D *texture, ssize_t capacity)",
			"body": [
				"TextureAtlas:initWithTexture(${1:Texture2D *texture},${2:ssize_t capacity})"
			],
			"description": "bool TextureAtlas::initWithTexture(Texture2D *texture, ssize_t capacity)"
		},
		 "void PhysicsBody::applyTorque(float torque)": {
			"prefix": "void PhysicsBody::applyTorque(float torque)",
			"body": [
				"PhysicsBody:applyTorque(${1:float torque})"
			],
			"description": "void PhysicsBody::applyTorque(float torque)"
		},
		 "void MotionStreak::setOpacityModifyRGB(bool bValue)": {
			"prefix": "void MotionStreak::setOpacityModifyRGB(bool bValue)",
			"body": [
				"MotionStreak:setOpacityModifyRGB(${1:bool bValue})"
			],
			"description": "void MotionStreak::setOpacityModifyRGB(bool bValue)"
		},
		 "bool DisplayManager::init(Bone *bone)": {
			"prefix": "bool DisplayManager::init(Bone *bone)",
			"body": [
				"DisplayManager:init(${1:Bone *bone})"
			],
			"description": "bool DisplayManager::init(Bone *bone)"
		},
		 "PhysicsJointRotarySpring* PhysicsJointRotarySpring::construct(PhysicsBody* a, PhysicsBody* b, float stiffness, float damping)": {
			"prefix": "PhysicsJointRotarySpring* PhysicsJointRotarySpring::construct(PhysicsBody* a, PhysicsBody* b, float stiffness, float damping)",
			"body": [
				"PhysicsJointRotarySpring:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:float stiffness},${4:float damping})"
			],
			"description": "PhysicsJointRotarySpring* PhysicsJointRotarySpring::construct(PhysicsBody* a, PhysicsBody* b, float stiffness, float damping)"
		},
		 "void Physics3DRigidBody::setLinearFactor( const cocos2d::Vec3& linearFactor )": {
			"prefix": "void Physics3DRigidBody::setLinearFactor( const cocos2d::Vec3& linearFactor )",
			"body": [
				"Physics3DRigidBody:setLinearFactor(${1:cocos2d:Vec3& linearFactor})"
			],
			"description": "void Physics3DRigidBody::setLinearFactor( const cocos2d::Vec3& linearFactor )"
		},
		 "ssize_t AtlasNode::getQuadsToDraw() const": {
			"prefix": "ssize_t AtlasNode::getQuadsToDraw() const",
			"body": [
				"ssize_t AtlasNode:getQuadsToDraw() "
			],
			"description": "ssize_t AtlasNode::getQuadsToDraw() const"
		},
		 "void LabelTTF::setDimensions(const Size &dim)": {
			"prefix": "void LabelTTF::setDimensions(const Size &dim)",
			"body": [
				"LabelTTF:setDimensions(${1:Size &dim})"
			],
			"description": "void LabelTTF::setDimensions(const Size &dim)"
		},
		 "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotInA, const cocos2d::Vec3& axisInA, bool useReferenceFrameA)": {
			"prefix": "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotInA, const cocos2d::Vec3& axisInA, bool useReferenceFrameA)",
			"body": [
				"Physics3DHingeConstraint:create(${1:Physics3DRigidBody* rbA},${2:cocos2d:Vec3& pivotInA},${3:cocos2d:Vec3& axisInA},${4:bool useReferenceFrameA})"
			],
			"description": "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotInA, const cocos2d::Vec3& axisInA, bool useReferenceFrameA)"
		},
		 "void UniformValue::setTexture(GLuint textureId, GLuint textureUnit)": {
			"prefix": "void UniformValue::setTexture(GLuint textureId, GLuint textureUnit)",
			"body": [
				"UniformValue:setTexture(${1:GLuint textureId},${2:GLuint textureUnit})"
			],
			"description": "void UniformValue::setTexture(GLuint textureId, GLuint textureUnit)"
		},
		 "__SetIterator __Set::begin(void)": {
			"prefix": "__SetIterator __Set::begin(void)",
			"body": [
				"__Set:begin(${1:void})"
			],
			"description": "__SetIterator __Set::begin(void)"
		},
		 "void Menu::alignItemsInRows(int rows, ...)": {
			"prefix": "void Menu::alignItemsInRows(int rows, ...)",
			"body": [
				"Menu:alignItemsInRows(${1:int rows},${2:...})"
			],
			"description": "void Menu::alignItemsInRows(int rows, ...)"
		},
		 "bool FileUtilsWin32::createDirectory(const std::string& dirPath)": {
			"prefix": "bool FileUtilsWin32::createDirectory(const std::string& dirPath)",
			"body": [
				"FileUtilsWin32:createDirectory(${1:std:string& dirPath})"
			],
			"description": "bool FileUtilsWin32::createDirectory(const std::string& dirPath)"
		},
		 "void Mat4::setZero()": {
			"prefix": "void Mat4::setZero()",
			"body": [
				"void Mat4:setZero()"
			],
			"description": "void Mat4::setZero()"
		},
		 "void Node::setCascadeColorEnabled(bool cascadeColorEnabled)": {
			"prefix": "void Node::setCascadeColorEnabled(bool cascadeColorEnabled)",
			"body": [
				"Node:setCascadeColorEnabled(${1:bool cascadeColorEnabled})"
			],
			"description": "void Node::setCascadeColorEnabled(bool cascadeColorEnabled)"
		},
		 "void EditBox::setText(const char* pText)": {
			"prefix": "void EditBox::setText(const char* pText)",
			"body": [
				"EditBox:setText(${1:char* pText})"
			],
			"description": "void EditBox::setText(const char* pText)"
		},
		 "Node* Node::getChildByTag(int tag) const": {
			"prefix": "Node* Node::getChildByTag(int tag) const",
			"body": [
				"Node:getChildByTag(${1:int tag})"
			],
			"description": "Node* Node::getChildByTag(int tag) const"
		},
		 "void NodeLoader::onHandlePropTypePointLock(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPointLock, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypePointLock(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPointLock, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypePointLock(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:Vec2 pPointLock},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypePointLock(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPointLock, CCBReader * ccbReader)"
		},
		 "std::string Label::getDescription() const": {
			"prefix": "std::string Label::getDescription() const",
			"body": [
				"std:string Label:getDescription() "
			],
			"description": "std::string Label::getDescription() const"
		},
		 "void ActionNode::stopAction()": {
			"prefix": "void ActionNode::stopAction()",
			"body": [
				"void ActionNode:stopAction()"
			],
			"description": "void ActionNode::stopAction()"
		},
		 "ActionInterval* ActionRotationFrame::getAction(float fDuration)": {
			"prefix": "ActionInterval* ActionRotationFrame::getAction(float fDuration)",
			"body": [
				"ActionRotationFrame:getAction(${1:float fDuration})"
			],
			"description": "ActionInterval* ActionRotationFrame::getAction(float fDuration)"
		},
		 "void Action::stop()": {
			"prefix": "void Action::stop()",
			"body": [
				"void Action:stop()"
			],
			"description": "void Action::stop()"
		},
		 "static RenderState::DepthFunction parseDepthFunc(const std::string& value)": {
			"prefix": "static RenderState::DepthFunction parseDepthFunc(const std::string& value)",
			"body": [
				"RenderState:DepthFunction parseDepthFunc(${1:std:string& value})"
			],
			"description": "static RenderState::DepthFunction parseDepthFunc(const std::string& value)"
		},
		 "void Button::setCapInsetsDisabledRenderer(const Rect &capInsets)": {
			"prefix": "void Button::setCapInsetsDisabledRenderer(const Rect &capInsets)",
			"body": [
				"Button:setCapInsetsDisabledRenderer(${1:Rect &capInsets})"
			],
			"description": "void Button::setCapInsetsDisabledRenderer(const Rect &capInsets)"
		},
		 "bool AtlasNode::isOpacityModifyRGB() const": {
			"prefix": "bool AtlasNode::isOpacityModifyRGB() const",
			"body": [
				"bool AtlasNode:isOpacityModifyRGB() "
			],
			"description": "bool AtlasNode::isOpacityModifyRGB() const"
		},
		 "ssize_t Console::readBytes(int fd, char* buffer, size_t maxlen, bool* more)": {
			"prefix": "ssize_t Console::readBytes(int fd, char* buffer, size_t maxlen, bool* more)",
			"body": [
				"Console:readBytes(${1:int fd},${2:char* buffer},${3:size_t maxlen},${4:bool* more})"
			],
			"description": "ssize_t Console::readBytes(int fd, char* buffer, size_t maxlen, bool* more)"
		},
		 "bool Slider::init()": {
			"prefix": "bool Slider::init()",
			"body": [
				"bool Slider:init()"
			],
			"description": "bool Slider::init()"
		},
		 "float Node::getScaleZ() const": {
			"prefix": "float Node::getScaleZ() const",
			"body": [
				"float Node:getScaleZ() "
			],
			"description": "float Node::getScaleZ() const"
		},
		 "bool Image::saveImageToJPG(const std::string& filePath)": {
			"prefix": "bool Image::saveImageToJPG(const std::string& filePath)",
			"body": [
				"Image:saveImageToJPG(${1:std:string& filePath})"
			],
			"description": "bool Image::saveImageToJPG(const std::string& filePath)"
		},
		 "float ActionObject::valueToFloat(const std::string& value)": {
			"prefix": "float ActionObject::valueToFloat(const std::string& value)",
			"body": [
				"ActionObject:valueToFloat(${1:std:string& value})"
			],
			"description": "float ActionObject::valueToFloat(const std::string& value)"
		},
		 "void Skeleton3D::removeAllBones()": {
			"prefix": "void Skeleton3D::removeAllBones()",
			"body": [
				"void Skeleton3D:removeAllBones()"
			],
			"description": "void Skeleton3D::removeAllBones()"
		},
		 "EaseQuadraticActionIn* EaseQuadraticActionIn::clone() const": {
			"prefix": "EaseQuadraticActionIn* EaseQuadraticActionIn::clone() const",
			"body": [
				"EaseQuadraticActionIn* EaseQuadraticActionIn:clone() "
			],
			"description": "EaseQuadraticActionIn* EaseQuadraticActionIn::clone() const"
		},
		 "AnchorPointFrame* AnchorPointFrame::create()": {
			"prefix": "AnchorPointFrame* AnchorPointFrame::create()",
			"body": [
				"AnchorPointFrame* AnchorPointFrame:create()"
			],
			"description": "AnchorPointFrame* AnchorPointFrame::create()"
		},
		 "Configuration* Configuration::sharedConfiguration()": {
			"prefix": "Configuration* Configuration::sharedConfiguration()",
			"body": [
				"Configuration* Configuration:sharedConfiguration()"
			],
			"description": "Configuration* Configuration::sharedConfiguration()"
		},
		 "void ProcessBase::play(int durationTo, int durationTween,  int loop, int tweenEasing)": {
			"prefix": "void ProcessBase::play(int durationTo, int durationTween,  int loop, int tweenEasing)",
			"body": [
				"ProcessBase:play(${1:int durationTo},${2:int durationTween},${3:int loop},${4:int tweenEasing})"
			],
			"description": "void ProcessBase::play(int durationTo, int durationTween,  int loop, int tweenEasing)"
		},
		 "const Color3B& Node::getDisplayedColor() const": {
			"prefix": "const Color3B& Node::getDisplayedColor() const",
			"body": [
				" Color3B& Node:getDisplayedColor() "
			],
			"description": "const Color3B& Node::getDisplayedColor() const"
		},
		 "void SpriteFrameCache::removeSpriteFramesFromFile(const std::string& plist)": {
			"prefix": "void SpriteFrameCache::removeSpriteFramesFromFile(const std::string& plist)",
			"body": [
				"SpriteFrameCache:removeSpriteFramesFromFile(${1:std:string& plist})"
			],
			"description": "void SpriteFrameCache::removeSpriteFramesFromFile(const std::string& plist)"
		},
		 "float NavMeshAgent::getHeight() const": {
			"prefix": "float NavMeshAgent::getHeight() const",
			"body": [
				"float NavMeshAgent:getHeight() "
			],
			"description": "float NavMeshAgent::getHeight() const"
		},
		 "bool Text::init(const std::string &textContent, const std::string &fontName, float fontSize)": {
			"prefix": "bool Text::init(const std::string &textContent, const std::string &fontName, float fontSize)",
			"body": [
				"Text:init(${1:std:string &textContent},${2:std:string &fontName},${3:float fontSize})"
			],
			"description": "bool Text::init(const std::string &textContent, const std::string &fontName, float fontSize)"
		},
		 "BezierBy* BezierBy::create(float t, const ccBezierConfig& c)": {
			"prefix": "BezierBy* BezierBy::create(float t, const ccBezierConfig& c)",
			"body": [
				"BezierBy:create(${1:float t},${2:ccBezierConfig& c})"
			],
			"description": "BezierBy* BezierBy::create(float t, const ccBezierConfig& c)"
		},
		 "const std::string &flatbuffersFileName)": {
			"prefix": "const std::string &flatbuffersFileName)",
			"body": [
				" std:string &flatbuffersFileName)"
			],
			"description": "const std::string &flatbuffersFileName)"
		},
		 "bool MotionStreak::initWithFade(float fade, float minSeg, float stroke, const Color3B& color, const std::string& path)": {
			"prefix": "bool MotionStreak::initWithFade(float fade, float minSeg, float stroke, const Color3B& color, const std::string& path)",
			"body": [
				"MotionStreak:initWithFade(${1:float fade},${2:float minSeg},${3:float stroke},${4:Color3B& color},${5:std:string& path})"
			],
			"description": "bool MotionStreak::initWithFade(float fade, float minSeg, float stroke, const Color3B& color, const std::string& path)"
		},
		 "void Node::setActionManager(ActionManager* actionManager)": {
			"prefix": "void Node::setActionManager(ActionManager* actionManager)",
			"body": [
				"Node:setActionManager(${1:ActionManager* actionManager})"
			],
			"description": "void Node::setActionManager(ActionManager* actionManager)"
		},
		 "bool Node::isCascadeOpacityEnabled(void) const": {
			"prefix": "bool Node::isCascadeOpacityEnabled(void) const",
			"body": [
				"Node:isCascadeOpacityEnabled(${1:void})"
			],
			"description": "bool Node::isCascadeOpacityEnabled(void) const"
		},
		 "void Armature::draw(cocos2d::Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void Armature::draw(cocos2d::Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"Armature:draw(${1:cocos2d:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void Armature::draw(cocos2d::Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "Texture2D* TextureCache::getTextureForKey(const std::string &textureKeyName) const": {
			"prefix": "Texture2D* TextureCache::getTextureForKey(const std::string &textureKeyName) const",
			"body": [
				"TextureCache:getTextureForKey(${1:std:string &textureKeyName})"
			],
			"description": "Texture2D* TextureCache::getTextureForKey(const std::string &textureKeyName) const"
		},
		 "CC_DLL void setRelativeScale(Node *pNode, float scaleX, float scaleY, CCBReader::ScaleType type, const std::string& propName)": {
			"prefix": "CC_DLL void setRelativeScale(Node *pNode, float scaleX, float scaleY, CCBReader::ScaleType type, const std::string& propName)",
			"body": [
				"void setRelativeScale(${1:Node *pNode},${2:float scaleX},${3:float scaleY},${4:CCBReader:ScaleType type},${5:std:string& propName})"
			],
			"description": "CC_DLL void setRelativeScale(Node *pNode, float scaleX, float scaleY, CCBReader::ScaleType type, const std::string& propName)"
		},
		 "PhysicsJointLimit* PhysicsJointLimit::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)": {
			"prefix": "PhysicsJointLimit* PhysicsJointLimit::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)",
			"body": [
				"PhysicsJointLimit:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:Vec2& anchr1},${4:Vec2& anchr2})"
			],
			"description": "PhysicsJointLimit* PhysicsJointLimit::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)"
		},
		 "Node* CSLoader::nodeWithFlatBuffers(const flatbuffers::NodeTree *nodetree, const ccNodeLoadCallback &callback)": {
			"prefix": "Node* CSLoader::nodeWithFlatBuffers(const flatbuffers::NodeTree *nodetree, const ccNodeLoadCallback &callback)",
			"body": [
				"CSLoader:nodeWithFlatBuffers(${1:flatbuffers:NodeTree *nodetree},${2:ccNodeLoadCallback &callback})"
			],
			"description": "Node* CSLoader::nodeWithFlatBuffers(const flatbuffers::NodeTree *nodetree, const ccNodeLoadCallback &callback)"
		},
		 "signed char Properties::readChar()": {
			"prefix": "signed char Properties::readChar()",
			"body": [
				"signed char Properties:readChar()"
			],
			"description": "signed char Properties::readChar()"
		},
		 "Terrain::QuadTree * Terrain::getQuadTree()": {
			"prefix": "Terrain::QuadTree * Terrain::getQuadTree()",
			"body": [
				"Terrain:QuadTree * Terrain:getQuadTree()"
			],
			"description": "Terrain::QuadTree * Terrain::getQuadTree()"
		},
		 "bool ActionEase::initWithAction(ActionInterval *action)": {
			"prefix": "bool ActionEase::initWithAction(ActionInterval *action)",
			"body": [
				"ActionEase:initWithAction(${1:ActionInterval *action})"
			],
			"description": "bool ActionEase::initWithAction(ActionInterval *action)"
		},
		 "void FadeOutUpTiles::transformTile(const Vec2& pos, float distance)": {
			"prefix": "void FadeOutUpTiles::transformTile(const Vec2& pos, float distance)",
			"body": [
				"FadeOutUpTiles:transformTile(${1:Vec2& pos},${2:float distance})"
			],
			"description": "void FadeOutUpTiles::transformTile(const Vec2& pos, float distance)"
		},
		 "void BatchCommand::init(float globalOrder, GLProgram* shader, BlendFunc blendType, TextureAtlas *textureAtlas, const Mat4& modelViewTransform, uint32_t flags)": {
			"prefix": "void BatchCommand::init(float globalOrder, GLProgram* shader, BlendFunc blendType, TextureAtlas *textureAtlas, const Mat4& modelViewTransform, uint32_t flags)",
			"body": [
				"BatchCommand:init(${1:float globalOrder},${2:GLProgram* shader},${3:BlendFunc blendType},${4:TextureAtlas *textureAtlas},${5:Mat4& modelViewTransform},${6:uint32_t flags})"
			],
			"description": "void BatchCommand::init(float globalOrder, GLProgram* shader, BlendFunc blendType, TextureAtlas *textureAtlas, const Mat4& modelViewTransform, uint32_t flags)"
		},
		 "Terrain * Terrain::create(TerrainData &parameter, CrackFixedType fixedType)": {
			"prefix": "Terrain * Terrain::create(TerrainData &parameter, CrackFixedType fixedType)",
			"body": [
				"* Terrain:create(${1:TerrainData &parameter},${2:CrackFixedType fixedType})"
			],
			"description": "Terrain * Terrain::create(TerrainData &parameter, CrackFixedType fixedType)"
		},
		 "bool Animate3D::init(Animation3D* animation)": {
			"prefix": "bool Animate3D::init(Animation3D* animation)",
			"body": [
				"Animate3D:init(${1:Animation3D* animation})"
			],
			"description": "bool Animate3D::init(Animation3D* animation)"
		},
		 "bool MovementBoneData::init()": {
			"prefix": "bool MovementBoneData::init()",
			"body": [
				"bool MovementBoneData:init()"
			],
			"description": "bool MovementBoneData::init()"
		},
		 "void PhysicsWorld::removeShape(PhysicsShape* shape)": {
			"prefix": "void PhysicsWorld::removeShape(PhysicsShape* shape)",
			"body": [
				"PhysicsWorld:removeShape(${1:PhysicsShape* shape})"
			],
			"description": "void PhysicsWorld::removeShape(PhysicsShape* shape)"
		},
		 "Texture2D::PixelFormat Texture2D::getDefaultAlphaPixelFormat()": {
			"prefix": "Texture2D::PixelFormat Texture2D::getDefaultAlphaPixelFormat()",
			"body": [
				"Texture2D:PixelFormat Texture2D:getDefaultAlphaPixelFormat()"
			],
			"description": "Texture2D::PixelFormat Texture2D::getDefaultAlphaPixelFormat()"
		},
		 "PhysicsJointFixed* PhysicsJointFixed::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr)": {
			"prefix": "PhysicsJointFixed* PhysicsJointFixed::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr)",
			"body": [
				"PhysicsJointFixed:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:Vec2& anchr})"
			],
			"description": "PhysicsJointFixed* PhysicsJointFixed::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr)"
		},
		 "size_t EventDispatcher::EventListenerVector::size() const": {
			"prefix": "size_t EventDispatcher::EventListenerVector::size() const",
			"body": [
				"size_t EventDispatcher:EventListenerVector:size() "
			],
			"description": "size_t EventDispatcher::EventListenerVector::size() const"
		},
		 "void WidgetPropertiesReader0250::setPropsForLabelFromJsonDictionary(Widget*widget,const rapidjson::Value& options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForLabelFromJsonDictionary(Widget*widget,const rapidjson::Value& options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForLabelFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value& options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForLabelFromJsonDictionary(Widget*widget,const rapidjson::Value& options)"
		},
		 "Physics3DObject* PhysicsSprite3D::getPhysicsObj() const": {
			"prefix": "Physics3DObject* PhysicsSprite3D::getPhysicsObj() const",
			"body": [
				"Physics3DObject* PhysicsSprite3D:getPhysicsObj() "
			],
			"description": "Physics3DObject* PhysicsSprite3D::getPhysicsObj() const"
		},
		 "void SpriteBatchNode::updateBlendFunc()": {
			"prefix": "void SpriteBatchNode::updateBlendFunc()",
			"body": [
				"void SpriteBatchNode:updateBlendFunc()"
			],
			"description": "void SpriteBatchNode::updateBlendFunc()"
		},
		 "int ParticleBatchNode::searchNewPositionInChildrenForZ(int z)": {
			"prefix": "int ParticleBatchNode::searchNewPositionInChildrenForZ(int z)",
			"body": [
				"ParticleBatchNode:searchNewPositionInChildrenForZ(${1:int z})"
			],
			"description": "int ParticleBatchNode::searchNewPositionInChildrenForZ(int z)"
		},
		 "void Button::ignoreContentAdaptWithSize(bool ignore)": {
			"prefix": "void Button::ignoreContentAdaptWithSize(bool ignore)",
			"body": [
				"Button:ignoreContentAdaptWithSize(${1:bool ignore})"
			],
			"description": "void Button::ignoreContentAdaptWithSize(bool ignore)"
		},
		 "unsigned char *ZipFile::getFileData(const std::string &fileName, ssize_t *size)": {
			"prefix": "unsigned char *ZipFile::getFileData(const std::string &fileName, ssize_t *size)",
			"body": [
				"char *ZipFile:getFileData(${1:std:string &fileName},${2:ssize_t *size})"
			],
			"description": "unsigned char *ZipFile::getFileData(const std::string &fileName, ssize_t *size)"
		},
		 "void RenderTexture::clearStencil(int stencilValue)": {
			"prefix": "void RenderTexture::clearStencil(int stencilValue)",
			"body": [
				"RenderTexture:clearStencil(${1:int stencilValue})"
			],
			"description": "void RenderTexture::clearStencil(int stencilValue)"
		},
		 "bool Layer::isKeyboardEnabled() const": {
			"prefix": "bool Layer::isKeyboardEnabled() const",
			"body": [
				"bool Layer:isKeyboardEnabled() "
			],
			"description": "bool Layer::isKeyboardEnabled() const"
		},
		 "Bone3D* Skeleton3D::createBone3D(const NodeData& nodedata)": {
			"prefix": "Bone3D* Skeleton3D::createBone3D(const NodeData& nodedata)",
			"body": [
				"Skeleton3D:createBone3D(${1:NodeData& nodedata})"
			],
			"description": "Bone3D* Skeleton3D::createBone3D(const NodeData& nodedata)"
		},
		 "float PhysicsShapePolygon::calculateArea()": {
			"prefix": "float PhysicsShapePolygon::calculateArea()",
			"body": [
				"float PhysicsShapePolygon:calculateArea()"
			],
			"description": "float PhysicsShapePolygon::calculateArea()"
		},
		 "float Tween::updateFrameData(float currentPercent)": {
			"prefix": "float Tween::updateFrameData(float currentPercent)",
			"body": [
				"Tween:updateFrameData(${1:float currentPercent})"
			],
			"description": "float Tween::updateFrameData(float currentPercent)"
		},
		 "void GLProgram::setUniformLocationWith4iv(GLint location, GLint* ints, unsigned int numberOfArrays)": {
			"prefix": "void GLProgram::setUniformLocationWith4iv(GLint location, GLint* ints, unsigned int numberOfArrays)",
			"body": [
				"GLProgram:setUniformLocationWith4iv(${1:GLint location},${2:GLint* ints},${3:unsigned int numberOfArrays})"
			],
			"description": "void GLProgram::setUniformLocationWith4iv(GLint location, GLint* ints, unsigned int numberOfArrays)"
		},
		 "BoneData *ArmatureData::getBoneData(const std::string& boneName)": {
			"prefix": "BoneData *ArmatureData::getBoneData(const std::string& boneName)",
			"body": [
				"*ArmatureData:getBoneData(${1:std:string& boneName})"
			],
			"description": "BoneData *ArmatureData::getBoneData(const std::string& boneName)"
		},
		 "void Skybox::onDraw(const Mat4& transform, uint32_t flags)": {
			"prefix": "void Skybox::onDraw(const Mat4& transform, uint32_t flags)",
			"body": [
				"Skybox:onDraw(${1:Mat4& transform},${2:uint32_t flags})"
			],
			"description": "void Skybox::onDraw(const Mat4& transform, uint32_t flags)"
		},
		 "void GLProgramState::applyAttributes(bool applyAttribFlags)": {
			"prefix": "void GLProgramState::applyAttributes(bool applyAttribFlags)",
			"body": [
				"GLProgramState:applyAttributes(${1:bool applyAttribFlags})"
			],
			"description": "void GLProgramState::applyAttributes(bool applyAttribFlags)"
		},
		 "Node * NodeLoader::loadNode(Node * pParent, CCBReader * ccbReader)": {
			"prefix": "Node * NodeLoader::loadNode(Node * pParent, CCBReader * ccbReader)",
			"body": [
				"* NodeLoader:loadNode(${1:Node * pParent},${2:CCBReader * ccbReader})"
			],
			"description": "Node * NodeLoader::loadNode(Node * pParent, CCBReader * ccbReader)"
		},
		 "Texture2D* Sprite::getTexture() const": {
			"prefix": "Texture2D* Sprite::getTexture() const",
			"body": [
				"Texture2D* Sprite:getTexture() "
			],
			"description": "Texture2D* Sprite::getTexture() const"
		},
		 "void ProfilingTimer::reset()": {
			"prefix": "void ProfilingTimer::reset()",
			"body": [
				"void ProfilingTimer:reset()"
			],
			"description": "void ProfilingTimer::reset()"
		},
		 "std::string SpriteBatchNode::getDescription() const": {
			"prefix": "std::string SpriteBatchNode::getDescription() const",
			"body": [
				"std:string SpriteBatchNode:getDescription() "
			],
			"description": "std::string SpriteBatchNode::getDescription() const"
		},
		 "void Animation3DCache::removeAllAnimations()": {
			"prefix": "void Animation3DCache::removeAllAnimations()",
			"body": [
				"void Animation3DCache:removeAllAnimations()"
			],
			"description": "void Animation3DCache::removeAllAnimations()"
		},
		 "void Slider::loadSlidBallTexturePressed(const std::string& pressed,TextureResType texType)": {
			"prefix": "void Slider::loadSlidBallTexturePressed(const std::string& pressed,TextureResType texType)",
			"body": [
				"Slider:loadSlidBallTexturePressed(${1:std:string& pressed},${2:TextureResType texType})"
			],
			"description": "void Slider::loadSlidBallTexturePressed(const std::string& pressed,TextureResType texType)"
		},
		 "bool RotateBy::initWithDuration(float duration, const Vec3& deltaAngle3D)": {
			"prefix": "bool RotateBy::initWithDuration(float duration, const Vec3& deltaAngle3D)",
			"body": [
				"RotateBy:initWithDuration(${1:float duration},${2:Vec3& deltaAngle3D})"
			],
			"description": "bool RotateBy::initWithDuration(float duration, const Vec3& deltaAngle3D)"
		},
		 "void WidgetPropertiesReader0250::setPropsForCheckBoxFromJsonDictionary(Widget*widget,const rapidjson::Value& options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForCheckBoxFromJsonDictionary(Widget*widget,const rapidjson::Value& options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForCheckBoxFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value& options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForCheckBoxFromJsonDictionary(Widget*widget,const rapidjson::Value& options)"
		},
		 "void PageView::addPage(Layout* page)": {
			"prefix": "void PageView::addPage(Layout* page)",
			"body": [
				"PageView:addPage(${1:Layout* page})"
			],
			"description": "void PageView::addPage(Layout* page)"
		},
		 "void Node::removeFromParent()": {
			"prefix": "void Node::removeFromParent()",
			"body": [
				"void Node:removeFromParent()"
			],
			"description": "void Node::removeFromParent()"
		},
		 "void __Array::acceptVisitor(DataVisitor &visitor)": {
			"prefix": "void __Array::acceptVisitor(DataVisitor &visitor)",
			"body": [
				"__Array:acceptVisitor(${1:DataVisitor &visitor})"
			],
			"description": "void __Array::acceptVisitor(DataVisitor &visitor)"
		},
		 "unsigned char CCBReader::readByte()": {
			"prefix": "unsigned char CCBReader::readByte()",
			"body": [
				"unsigned char CCBReader:readByte()"
			],
			"description": "unsigned char CCBReader::readByte()"
		},
		 "void AutoPolygon::calculateUV(const Rect& rect, V3F_C4B_T2F* verts, const ssize_t& count)": {
			"prefix": "void AutoPolygon::calculateUV(const Rect& rect, V3F_C4B_T2F* verts, const ssize_t& count)",
			"body": [
				"AutoPolygon:calculateUV(${1:Rect& rect},${2:V3F_C4B_T2F* verts},${3:ssize_t& count})"
			],
			"description": "void AutoPolygon::calculateUV(const Rect& rect, V3F_C4B_T2F* verts, const ssize_t& count)"
		},
		 "void Physics3DWorld::stepSimulate(float dt)": {
			"prefix": "void Physics3DWorld::stepSimulate(float dt)",
			"body": [
				"Physics3DWorld:stepSimulate(${1:float dt})"
			],
			"description": "void Physics3DWorld::stepSimulate(float dt)"
		},
		 "void GLProgram::setUniformLocationWith4fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)": {
			"prefix": "void GLProgram::setUniformLocationWith4fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)",
			"body": [
				"GLProgram:setUniformLocationWith4fv(${1:GLint location},${2:GLfloat* floats},${3:unsigned int numberOfArrays})"
			],
			"description": "void GLProgram::setUniformLocationWith4fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)"
		},
		 "btQuaternion convertQuatTobtQuat( const cocos2d::Quaternion &quat )": {
			"prefix": "btQuaternion convertQuatTobtQuat( const cocos2d::Quaternion &quat )",
			"body": [
				"convertQuatTobtQuat(${1:cocos2d:Quaternion &quat})"
			],
			"description": "btQuaternion convertQuatTobtQuat( const cocos2d::Quaternion &quat )"
		},
		 "void Slider::adaptRenderers()": {
			"prefix": "void Slider::adaptRenderers()",
			"body": [
				"void Slider:adaptRenderers()"
			],
			"description": "void Slider::adaptRenderers()"
		},
		 "void PhysicsBody::removeShape(PhysicsShape* shape, bool reduceMassAndMoment/* = true*/)": {
			"prefix": "void PhysicsBody::removeShape(PhysicsShape* shape, bool reduceMassAndMoment/* = true*/)",
			"body": [
				"PhysicsBody:removeShape(${1:PhysicsShape* shape},${2:bool reduceMassAndMoment/* = true*/})"
			],
			"description": "void PhysicsBody::removeShape(PhysicsShape* shape, bool reduceMassAndMoment/* = true*/)"
		},
		 "void Slider::percentChangedEvent(EventType event)": {
			"prefix": "void Slider::percentChangedEvent(EventType event)",
			"body": [
				"Slider:percentChangedEvent(${1:EventType event})"
			],
			"description": "void Slider::percentChangedEvent(EventType event)"
		},
		 "void ScriptEngineManager::sendNodeEventToLua(Node* node, int action)": {
			"prefix": "void ScriptEngineManager::sendNodeEventToLua(Node* node, int action)",
			"body": [
				"ScriptEngineManager:sendNodeEventToLua(${1:Node* node},${2:int action})"
			],
			"description": "void ScriptEngineManager::sendNodeEventToLua(Node* node, int action)"
		},
		 "void ArmatureDataManager::addAnimationData(const std::string& id, AnimationData *animationData, const std::string& configFilePath)": {
			"prefix": "void ArmatureDataManager::addAnimationData(const std::string& id, AnimationData *animationData, const std::string& configFilePath)",
			"body": [
				"ArmatureDataManager:addAnimationData(${1:std:string& id},${2:AnimationData *animationData},${3:std:string& configFilePath})"
			],
			"description": "void ArmatureDataManager::addAnimationData(const std::string& id, AnimationData *animationData, const std::string& configFilePath)"
		},
		 "float Animation::getDuration(void) const": {
			"prefix": "float Animation::getDuration(void) const",
			"body": [
				"Animation:getDuration(${1:void})"
			],
			"description": "float Animation::getDuration(void) const"
		},
		 "std::vector<char16_t> getChar16VectorFromUTF16String(const std::u16string& utf16)": {
			"prefix": "std::vector<char16_t> getChar16VectorFromUTF16String(const std::u16string& utf16)",
			"body": [
				"getChar16VectorFromUTF16String(${1:std:u16string& utf16})"
			],
			"description": "std::vector<char16_t> getChar16VectorFromUTF16String(const std::u16string& utf16)"
		},
		 "bool Mesh::isVisible() const": {
			"prefix": "bool Mesh::isVisible() const",
			"body": [
				"bool Mesh:isVisible() "
			],
			"description": "bool Mesh::isVisible() const"
		},
		 "bool Physics3DHingeConstraint::getEnableAngularMotor() const": {
			"prefix": "bool Physics3DHingeConstraint::getEnableAngularMotor() const",
			"body": [
				"bool Physics3DHingeConstraint:getEnableAngularMotor() "
			],
			"description": "bool Physics3DHingeConstraint::getEnableAngularMotor() const"
		},
		 "void PrettyPrinter::visit(const __Array *p)": {
			"prefix": "void PrettyPrinter::visit(const __Array *p)",
			"body": [
				"PrettyPrinter:visit(${1:__Array *p})"
			],
			"description": "void PrettyPrinter::visit(const __Array *p)"
		},
		 "void RelativeLayoutParameter::setRelativeToWidgetName(const std::string& name)": {
			"prefix": "void RelativeLayoutParameter::setRelativeToWidgetName(const std::string& name)",
			"body": [
				"RelativeLayoutParameter:setRelativeToWidgetName(${1:std:string& name})"
			],
			"description": "void RelativeLayoutParameter::setRelativeToWidgetName(const std::string& name)"
		},
		 "const Vec2& Node::getAnchorPointInPoints() const": {
			"prefix": "const Vec2& Node::getAnchorPointInPoints() const",
			"body": [
				" Vec2& Node:getAnchorPointInPoints() "
			],
			"description": "const Vec2& Node::getAnchorPointInPoints() const"
		},
		 "void ClippingNode::onExitTransitionDidStart()": {
			"prefix": "void ClippingNode::onExitTransitionDidStart()",
			"body": [
				"void ClippingNode:onExitTransitionDidStart()"
			],
			"description": "void ClippingNode::onExitTransitionDidStart()"
		},
		 "void Physics3DComponent::setTransformInPhysics(const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)": {
			"prefix": "void Physics3DComponent::setTransformInPhysics(const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)",
			"body": [
				"Physics3DComponent:setTransformInPhysics(${1:cocos2d:Vec3& translateInPhysics},${2:cocos2d:Quaternion& rotInPhsyics})"
			],
			"description": "void Physics3DComponent::setTransformInPhysics(const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)"
		},
		 "bool SkeletonRenderer::getDebugBonesEnabled () const": {
			"prefix": "bool SkeletonRenderer::getDebugBonesEnabled () const",
			"body": [
				"bool SkeletonRenderer:getDebugBonesEnabled () "
			],
			"description": "bool SkeletonRenderer::getDebugBonesEnabled () const"
		},
		 "float Vec2::dot(const Vec2& v1, const Vec2& v2)": {
			"prefix": "float Vec2::dot(const Vec2& v1, const Vec2& v2)",
			"body": [
				"Vec2:dot(${1:Vec2& v1},${2:Vec2& v2})"
			],
			"description": "float Vec2::dot(const Vec2& v1, const Vec2& v2)"
		},
		 "bool SpriteFrameCache::init()": {
			"prefix": "bool SpriteFrameCache::init()",
			"body": [
				"bool SpriteFrameCache:init()"
			],
			"description": "bool SpriteFrameCache::init()"
		},
		 "float Node::getPositionY() const": {
			"prefix": "float Node::getPositionY() const",
			"body": [
				"float Node:getPositionY() "
			],
			"description": "float Node::getPositionY() const"
		},
		 "bool Button::init()": {
			"prefix": "bool Button::init()",
			"body": [
				"bool Button:init()"
			],
			"description": "bool Button::init()"
		},
		 "ssize_t MeshSkin::getMatrixPaletteSize() const": {
			"prefix": "ssize_t MeshSkin::getMatrixPaletteSize() const",
			"body": [
				"ssize_t MeshSkin:getMatrixPaletteSize() "
			],
			"description": "ssize_t MeshSkin::getMatrixPaletteSize() const"
		},
		 "bool VideoPlayer::isFullScreenEnabled()const": {
			"prefix": "bool VideoPlayer::isFullScreenEnabled()const",
			"body": [
				"bool VideoPlayer:isFullScreenEnabled()"
			],
			"description": "bool VideoPlayer::isFullScreenEnabled()const"
		},
		 "MovementBoneData *MovementData::getMovementBoneData(const std::string& boneName)": {
			"prefix": "MovementBoneData *MovementData::getMovementBoneData(const std::string& boneName)",
			"body": [
				"*MovementData:getMovementBoneData(${1:std:string& boneName})"
			],
			"description": "MovementBoneData *MovementData::getMovementBoneData(const std::string& boneName)"
		},
		 "bool WsThreadHelper::createThread(const WebSocket& ws)": {
			"prefix": "bool WsThreadHelper::createThread(const WebSocket& ws)",
			"body": [
				"WsThreadHelper:createThread(${1:WebSocket& ws})"
			],
			"description": "bool WsThreadHelper::createThread(const WebSocket& ws)"
		},
		 "Menu* Menu::createWithItems(MenuItem* item, va_list args)": {
			"prefix": "Menu* Menu::createWithItems(MenuItem* item, va_list args)",
			"body": [
				"Menu:createWithItems(${1:MenuItem* item},${2:va_list args})"
			],
			"description": "Menu* Menu::createWithItems(MenuItem* item, va_list args)"
		},
		 "void VertexData::use()": {
			"prefix": "void VertexData::use()",
			"body": [
				"void VertexData:use()"
			],
			"description": "void VertexData::use()"
		},
		 "bool Sprite3D::init()": {
			"prefix": "bool Sprite3D::init()",
			"body": [
				"bool Sprite3D:init()"
			],
			"description": "bool Sprite3D::init()"
		},
		 "const BlendFunc& MotionStreak::getBlendFunc(void) const": {
			"prefix": "const BlendFunc& MotionStreak::getBlendFunc(void) const",
			"body": [
				"BlendFunc& MotionStreak:getBlendFunc(${1:void})"
			],
			"description": "const BlendFunc& MotionStreak::getBlendFunc(void) const"
		},
		 "Blink* Blink::reverse() const": {
			"prefix": "Blink* Blink::reverse() const",
			"body": [
				"Blink* Blink:reverse() "
			],
			"description": "Blink* Blink::reverse() const"
		},
		 "void ParticleSystemQuad::setupVBOandVAO()": {
			"prefix": "void ParticleSystemQuad::setupVBOandVAO()",
			"body": [
				"void ParticleSystemQuad:setupVBOandVAO()"
			],
			"description": "void ParticleSystemQuad::setupVBOandVAO()"
		},
		 "void LayerGradient::setEndColor(const Color3B& color)": {
			"prefix": "void LayerGradient::setEndColor(const Color3B& color)",
			"body": [
				"LayerGradient:setEndColor(${1:Color3B& color})"
			],
			"description": "void LayerGradient::setEndColor(const Color3B& color)"
		},
		 "void RadioButtonGroup::removeRadioButton(RadioButton* radioButton)": {
			"prefix": "void RadioButtonGroup::removeRadioButton(RadioButton* radioButton)",
			"body": [
				"RadioButtonGroup:removeRadioButton(${1:RadioButton* radioButton})"
			],
			"description": "void RadioButtonGroup::removeRadioButton(RadioButton* radioButton)"
		},
		 "BlendFunc NodeLoader::parsePropTypeBlendFunc(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "BlendFunc NodeLoader::parsePropTypeBlendFunc(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeBlendFunc(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "BlendFunc NodeLoader::parsePropTypeBlendFunc(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "float PhysicsJointRotaryLimit::getMin() const": {
			"prefix": "float PhysicsJointRotaryLimit::getMin() const",
			"body": [
				"float PhysicsJointRotaryLimit:getMin() "
			],
			"description": "float PhysicsJointRotaryLimit::getMin() const"
		},
		 "void Vec4::clamp(const Vec4& v, const Vec4& min, const Vec4& max, Vec4* dst)": {
			"prefix": "void Vec4::clamp(const Vec4& v, const Vec4& min, const Vec4& max, Vec4* dst)",
			"body": [
				"Vec4:clamp(${1:Vec4& v},${2:Vec4& min},${3:Vec4& max},${4:Vec4* dst})"
			],
			"description": "void Vec4::clamp(const Vec4& v, const Vec4& min, const Vec4& max, Vec4* dst)"
		},
		 "void ProgressTimer::setReverseProgress(bool reverse)": {
			"prefix": "void ProgressTimer::setReverseProgress(bool reverse)",
			"body": [
				"ProgressTimer:setReverseProgress(${1:bool reverse})"
			],
			"description": "void ProgressTimer::setReverseProgress(bool reverse)"
		},
		 "unsigned char * FontFreeType::getGlyphBitmapWithOutline(unsigned short theChar, FT_BBox &bbox)": {
			"prefix": "unsigned char * FontFreeType::getGlyphBitmapWithOutline(unsigned short theChar, FT_BBox &bbox)",
			"body": [
				"char * FontFreeType:getGlyphBitmapWithOutline(${1:unsigned short theChar},${2:FT_BBox &bbox})"
			],
			"description": "unsigned char * FontFreeType::getGlyphBitmapWithOutline(unsigned short theChar, FT_BBox &bbox)"
		},
		 "RenderTexture * RenderTexture::create(int w ,int h, Texture2D::PixelFormat eFormat, GLuint uDepthStencilFormat)": {
			"prefix": "RenderTexture * RenderTexture::create(int w ,int h, Texture2D::PixelFormat eFormat, GLuint uDepthStencilFormat)",
			"body": [
				"* RenderTexture:create(${1:int w},${2:int h},${3:Texture2D:PixelFormat eFormat},${4:GLuint uDepthStencilFormat})"
			],
			"description": "RenderTexture * RenderTexture::create(int w ,int h, Texture2D::PixelFormat eFormat, GLuint uDepthStencilFormat)"
		},
		 "bool	CocoLoader::ReadCocoBinBuff(char* pBinBuff)": {
			"prefix": "bool	CocoLoader::ReadCocoBinBuff(char* pBinBuff)",
			"body": [
				"pBinBuff})"
			],
			"description": "bool	CocoLoader::ReadCocoBinBuff(char* pBinBuff)"
		},
		 "int ZipFile::getCurrentFileInfo(std::string *filename, unz_file_info *info)": {
			"prefix": "int ZipFile::getCurrentFileInfo(std::string *filename, unz_file_info *info)",
			"body": [
				"ZipFile:getCurrentFileInfo(${1:std:string *filename},${2:unz_file_info *info})"
			],
			"description": "int ZipFile::getCurrentFileInfo(std::string *filename, unz_file_info *info)"
		},
		 "void Slider::loadBarTexture(SpriteFrame* spriteframe)": {
			"prefix": "void Slider::loadBarTexture(SpriteFrame* spriteframe)",
			"body": [
				"Slider:loadBarTexture(${1:SpriteFrame* spriteframe})"
			],
			"description": "void Slider::loadBarTexture(SpriteFrame* spriteframe)"
		},
		 "PointSide Plane::getSide(const Vec3& point) const": {
			"prefix": "PointSide Plane::getSide(const Vec3& point) const",
			"body": [
				"Plane:getSide(${1:Vec3& point})"
			],
			"description": "PointSide Plane::getSide(const Vec3& point) const"
		},
		 "bool Bundle3D::loadSkinData(const std::string& id, SkinData* skindata)": {
			"prefix": "bool Bundle3D::loadSkinData(const std::string& id, SkinData* skindata)",
			"body": [
				"Bundle3D:loadSkinData(${1:std:string& id},${2:SkinData* skindata})"
			],
			"description": "bool Bundle3D::loadSkinData(const std::string& id, SkinData* skindata)"
		},
		 "void EventDispatcher::removeEventListenersForType(EventListener::Type listenerType)": {
			"prefix": "void EventDispatcher::removeEventListenersForType(EventListener::Type listenerType)",
			"body": [
				"EventDispatcher:removeEventListenersForType(${1:EventListener:Type listenerType})"
			],
			"description": "void EventDispatcher::removeEventListenersForType(EventListener::Type listenerType)"
		},
		 "LayerMultiplex* LayerMultiplex::create()": {
			"prefix": "LayerMultiplex* LayerMultiplex::create()",
			"body": [
				"LayerMultiplex* LayerMultiplex:create()"
			],
			"description": "LayerMultiplex* LayerMultiplex::create()"
		},
		 "Properties* Properties::createNonRefCounted(const std::string& url)": {
			"prefix": "Properties* Properties::createNonRefCounted(const std::string& url)",
			"body": [
				"Properties:createNonRefCounted(${1:std:string& url})"
			],
			"description": "Properties* Properties::createNonRefCounted(const std::string& url)"
		},
		 "void Layout::supplyTheLayoutParameterLackToChild(Widget *child)": {
			"prefix": "void Layout::supplyTheLayoutParameterLackToChild(Widget *child)",
			"body": [
				"Layout:supplyTheLayoutParameterLackToChild(${1:Widget *child})"
			],
			"description": "void Layout::supplyTheLayoutParameterLackToChild(Widget *child)"
		},
		 "bool UserDefault::getBoolForKey(const char* pKey, bool defaultValue)": {
			"prefix": "bool UserDefault::getBoolForKey(const char* pKey, bool defaultValue)",
			"body": [
				"UserDefault:getBoolForKey(${1:char* pKey},${2:bool defaultValue})"
			],
			"description": "bool UserDefault::getBoolForKey(const char* pKey, bool defaultValue)"
		},
		 "int Physics3DDebugDrawer::getDebugMode() const": {
			"prefix": "int Physics3DDebugDrawer::getDebugMode() const",
			"body": [
				"int Physics3DDebugDrawer:getDebugMode() "
			],
			"description": "int Physics3DDebugDrawer::getDebugMode() const"
		},
		 "void Vec2::subtract(const Vec2& v1, const Vec2& v2, Vec2* dst)": {
			"prefix": "void Vec2::subtract(const Vec2& v1, const Vec2& v2, Vec2* dst)",
			"body": [
				"Vec2:subtract(${1:Vec2& v1},${2:Vec2& v2},${3:Vec2* dst})"
			],
			"description": "void Vec2::subtract(const Vec2& v1, const Vec2& v2, Vec2* dst)"
		},
		 "const std::vector<CookiesInfo>* HttpCookie::getCookies() const": {
			"prefix": "const std::vector<CookiesInfo>* HttpCookie::getCookies() const",
			"body": [
				" std:vector<CookiesInfo>* HttpCookie:getCookies() "
			],
			"description": "const std::vector<CookiesInfo>* HttpCookie::getCookies() const"
		},
		 "void Properties::readProperties()": {
			"prefix": "void Properties::readProperties()",
			"body": [
				"void Properties:readProperties()"
			],
			"description": "void Properties::readProperties()"
		},
		 "UserDefault* UserDefault::getInstance()": {
			"prefix": "UserDefault* UserDefault::getInstance()",
			"body": [
				"UserDefault* UserDefault:getInstance()"
			],
			"description": "UserDefault* UserDefault::getInstance()"
		},
		 "bool CCBSequenceProperty::init()": {
			"prefix": "bool CCBSequenceProperty::init()",
			"body": [
				"bool CCBSequenceProperty:init()"
			],
			"description": "bool CCBSequenceProperty::init()"
		},
		 "void Sprite::updateTransform(void)": {
			"prefix": "void Sprite::updateTransform(void)",
			"body": [
				"Sprite:updateTransform(${1:void})"
			],
			"description": "void Sprite::updateTransform(void)"
		},
		 "ValueVector& CCBAnimationManager::getDocumentCallbackControlEvents()": {
			"prefix": "ValueVector& CCBAnimationManager::getDocumentCallbackControlEvents()",
			"body": [
				"ValueVector& CCBAnimationManager:getDocumentCallbackControlEvents()"
			],
			"description": "ValueVector& CCBAnimationManager::getDocumentCallbackControlEvents()"
		},
		 "ActionTimeline* ActionTimelineCache::loadAnimationActionWithContent(const std::string&fileName, const std::string& content)": {
			"prefix": "ActionTimeline* ActionTimelineCache::loadAnimationActionWithContent(const std::string&fileName, const std::string& content)",
			"body": [
				"ActionTimelineCache:loadAnimationActionWithContent(${1:std:string&fileName},${2:std:string& content})"
			],
			"description": "ActionTimeline* ActionTimelineCache::loadAnimationActionWithContent(const std::string&fileName, const std::string& content)"
		},
		 "void VolatileTextureMgr::reloadAllTextures()": {
			"prefix": "void VolatileTextureMgr::reloadAllTextures()",
			"body": [
				"void VolatileTextureMgr:reloadAllTextures()"
			],
			"description": "void VolatileTextureMgr::reloadAllTextures()"
		},
		 "LayoutParameter* LinearLayoutParameter::createCloneInstance()": {
			"prefix": "LayoutParameter* LinearLayoutParameter::createCloneInstance()",
			"body": [
				"LayoutParameter* LinearLayoutParameter:createCloneInstance()"
			],
			"description": "LayoutParameter* LinearLayoutParameter::createCloneInstance()"
		},
		 "Timeline* ActionTimelineCache::loadTimelineWithFlatBuffers(const flatbuffers::TimeLine *flatbuffers)": {
			"prefix": "Timeline* ActionTimelineCache::loadTimelineWithFlatBuffers(const flatbuffers::TimeLine *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadTimelineWithFlatBuffers(${1:flatbuffers:TimeLine *flatbuffers})"
			],
			"description": "Timeline* ActionTimelineCache::loadTimelineWithFlatBuffers(const flatbuffers::TimeLine *flatbuffers)"
		},
		 "void Physics3DRigidBody::applyTorqueImpulse( const cocos2d::Vec3& torque )": {
			"prefix": "void Physics3DRigidBody::applyTorqueImpulse( const cocos2d::Vec3& torque )",
			"body": [
				"Physics3DRigidBody:applyTorqueImpulse(${1:cocos2d:Vec3& torque})"
			],
			"description": "void Physics3DRigidBody::applyTorqueImpulse( const cocos2d::Vec3& torque )"
		},
		 "void DrawNode::drawCircle(const Vec2& center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY, const Color4F &color)": {
			"prefix": "void DrawNode::drawCircle(const Vec2& center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY, const Color4F &color)",
			"body": [
				"DrawNode:drawCircle(${1:Vec2& center},${2:float radius},${3:float angle},${4:unsigned int segments},${5:bool drawLineToCenter},${6:float scaleX},${7:float scaleY},${8:Color4F &color})"
			],
			"description": "void DrawNode::drawCircle(const Vec2& center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY, const Color4F &color)"
		},
		 "void Sequence::update(float t)": {
			"prefix": "void Sequence::update(float t)",
			"body": [
				"Sequence:update(${1:float t})"
			],
			"description": "void Sequence::update(float t)"
		},
		 "void ActionManager::pauseTarget(Node *target)": {
			"prefix": "void ActionManager::pauseTarget(Node *target)",
			"body": [
				"ActionManager:pauseTarget(${1:Node *target})"
			],
			"description": "void ActionManager::pauseTarget(Node *target)"
		},
		 "ActionObject* ActionManagerEx::stopActionByName(const char* jsonName,const char* actionName)": {
			"prefix": "ActionObject* ActionManagerEx::stopActionByName(const char* jsonName,const char* actionName)",
			"body": [
				"ActionManagerEx:stopActionByName(${1:char* jsonName},${2:char* actionName})"
			],
			"description": "ActionObject* ActionManagerEx::stopActionByName(const char* jsonName,const char* actionName)"
		},
		 "void BaseTriggerAction::done()": {
			"prefix": "void BaseTriggerAction::done()",
			"body": [
				"void BaseTriggerAction:done()"
			],
			"description": "void BaseTriggerAction::done()"
		},
		 "void TextureAtlas::setupIndices()": {
			"prefix": "void TextureAtlas::setupIndices()",
			"body": [
				"void TextureAtlas:setupIndices()"
			],
			"description": "void TextureAtlas::setupIndices()"
		},
		 "EaseQuadraticActionInOut* EaseQuadraticActionInOut::reverse() const": {
			"prefix": "EaseQuadraticActionInOut* EaseQuadraticActionInOut::reverse() const",
			"body": [
				"EaseQuadraticActionInOut* EaseQuadraticActionInOut:reverse() "
			],
			"description": "EaseQuadraticActionInOut* EaseQuadraticActionInOut::reverse() const"
		},
		 "void Configuration::loadConfigFile(const std::string& filename)": {
			"prefix": "void Configuration::loadConfigFile(const std::string& filename)",
			"body": [
				"Configuration:loadConfigFile(${1:std:string& filename})"
			],
			"description": "void Configuration::loadConfigFile(const std::string& filename)"
		},
		 "void Layout::setLayoutType(Type type)": {
			"prefix": "void Layout::setLayoutType(Type type)",
			"body": [
				"Layout:setLayoutType(${1:Type type})"
			],
			"description": "void Layout::setLayoutType(Type type)"
		},
		 "bool Widget::isBright() const": {
			"prefix": "bool Widget::isBright() const",
			"body": [
				"bool Widget:isBright() "
			],
			"description": "bool Widget::isBright() const"
		},
		 "void Node::setGlobalZOrder(float globalZOrder)": {
			"prefix": "void Node::setGlobalZOrder(float globalZOrder)",
			"body": [
				"Node:setGlobalZOrder(${1:float globalZOrder})"
			],
			"description": "void Node::setGlobalZOrder(float globalZOrder)"
		},
		 "void CCBKeyframe::setTime(float fTime)": {
			"prefix": "void CCBKeyframe::setTime(float fTime)",
			"body": [
				"CCBKeyframe:setTime(${1:float fTime})"
			],
			"description": "void CCBKeyframe::setTime(float fTime)"
		},
		 "Vec3 Node::getRotation3D() const": {
			"prefix": "Vec3 Node::getRotation3D() const",
			"body": [
				"Vec3 Node:getRotation3D() "
			],
			"description": "Vec3 Node::getRotation3D() const"
		},
		 "SkeletonNodeReader* SkeletonNodeReader::getInstance()": {
			"prefix": "SkeletonNodeReader* SkeletonNodeReader::getInstance()",
			"body": [
				"SkeletonNodeReader* SkeletonNodeReader:getInstance()"
			],
			"description": "SkeletonNodeReader* SkeletonNodeReader::getInstance()"
		},
		 "EaseElasticInOut* EaseElasticInOut::reverse() const": {
			"prefix": "EaseElasticInOut* EaseElasticInOut::reverse() const",
			"body": [
				"EaseElasticInOut* EaseElasticInOut:reverse() "
			],
			"description": "EaseElasticInOut* EaseElasticInOut::reverse() const"
		},
		 "void PhysicsJointGroove::setAnchr2(const Vec2& anchr2)": {
			"prefix": "void PhysicsJointGroove::setAnchr2(const Vec2& anchr2)",
			"body": [
				"PhysicsJointGroove:setAnchr2(${1:Vec2& anchr2})"
			],
			"description": "void PhysicsJointGroove::setAnchr2(const Vec2& anchr2)"
		},
		 "Layout::Type Layout::getLayoutType() const": {
			"prefix": "Layout::Type Layout::getLayoutType() const",
			"body": [
				"Layout:Type Layout:getLayoutType() "
			],
			"description": "Layout::Type Layout::getLayoutType() const"
		},
		 "Physics3DSliderConstraint* Physics3DSliderConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInA, const cocos2d::Mat4& frameInB ,bool useLinearReferenceFrameA)": {
			"prefix": "Physics3DSliderConstraint* Physics3DSliderConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInA, const cocos2d::Mat4& frameInB ,bool useLinearReferenceFrameA)",
			"body": [
				"Physics3DSliderConstraint:create(${1:Physics3DRigidBody* rbA},${2:Physics3DRigidBody* rbB},${3:cocos2d:Mat4& frameInA},${4:cocos2d:Mat4& frameInB},${5:bool useLinearReferenceFrameA})"
			],
			"description": "Physics3DSliderConstraint* Physics3DSliderConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInA, const cocos2d::Mat4& frameInB ,bool useLinearReferenceFrameA)"
		},
		 "Vec2 PhysicsJointLimit::getAnchr2() const": {
			"prefix": "Vec2 PhysicsJointLimit::getAnchr2() const",
			"body": [
				"Vec2 PhysicsJointLimit:getAnchr2() "
			],
			"description": "Vec2 PhysicsJointLimit::getAnchr2() const"
		},
		 "void SkeletonAnimation::onAnimationStateEvent (int trackIndex, spEventType type, spEvent* event, int loopCount)": {
			"prefix": "void SkeletonAnimation::onAnimationStateEvent (int trackIndex, spEventType type, spEvent* event, int loopCount)",
			"body": [
				"SkeletonAnimation:onAnimationStateEvent (${1:int trackIndex},${2:spEventType type},${3:spEvent* event},${4:int loopCount})"
			],
			"description": "void SkeletonAnimation::onAnimationStateEvent (int trackIndex, spEventType type, spEvent* event, int loopCount)"
		},
		 "bool Layer::init()": {
			"prefix": "bool Layer::init()",
			"body": [
				"bool Layer:init()"
			],
			"description": "bool Layer::init()"
		},
		 "void SIOClient::fireEvent(const std::string& eventName, const std::string& data)": {
			"prefix": "void SIOClient::fireEvent(const std::string& eventName, const std::string& data)",
			"body": [
				"SIOClient:fireEvent(${1:std:string& eventName},${2:std:string& data})"
			],
			"description": "void SIOClient::fireEvent(const std::string& eventName, const std::string& data)"
		},
		 "void TextField::setInsertText(bool insertText)": {
			"prefix": "void TextField::setInsertText(bool insertText)",
			"body": [
				"TextField:setInsertText(${1:bool insertText})"
			],
			"description": "void TextField::setInsertText(bool insertText)"
		},
		 "bool SAXParser::parse(const std::string& filename)": {
			"prefix": "bool SAXParser::parse(const std::string& filename)",
			"body": [
				"SAXParser:parse(${1:std:string& filename})"
			],
			"description": "bool SAXParser::parse(const std::string& filename)"
		},
		 "std::string BMFontConfiguration::description(void) const": {
			"prefix": "std::string BMFontConfiguration::description(void) const",
			"body": [
				"BMFontConfiguration:description(${1:void})"
			],
			"description": "std::string BMFontConfiguration::description(void) const"
		},
		 "Vector<Widget*>& ListView::getItems()": {
			"prefix": "Vector<Widget*>& ListView::getItems()",
			"body": [
				"Vector<Widget*>& ListView:getItems()"
			],
			"description": "Vector<Widget*>& ListView::getItems()"
		},
		 "float Vec3::distanceSquared(const Vec3& v) const": {
			"prefix": "float Vec3::distanceSquared(const Vec3& v) const",
			"body": [
				"Vec3:distanceSquared(${1:Vec3& v})"
			],
			"description": "float Vec3::distanceSquared(const Vec3& v) const"
		},
		 "ParticleBatchNode* ParticleSystem::getBatchNode(void) const": {
			"prefix": "ParticleBatchNode* ParticleSystem::getBatchNode(void) const",
			"body": [
				"ParticleSystem:getBatchNode(${1:void})"
			],
			"description": "ParticleBatchNode* ParticleSystem::getBatchNode(void) const"
		},
		 "Size::Size(const Vec2& point) : width(point.x), height(point.y)": {
			"prefix": "Size::Size(const Vec2& point) : width(point.x), height(point.y)",
			"body": [
				"point})"
			],
			"description": "Size::Size(const Vec2& point) : width(point.x), height(point.y)"
		},
		 "void ArmatureAnimation::playWithNames(const std::vector<std::string>& movementNames, int durationTo, bool loop)": {
			"prefix": "void ArmatureAnimation::playWithNames(const std::vector<std::string>& movementNames, int durationTo, bool loop)",
			"body": [
				"ArmatureAnimation:playWithNames(${1:std:vector<std:string>& movementNames},${2:int durationTo},${3:bool loop})"
			],
			"description": "void ArmatureAnimation::playWithNames(const std::vector<std::string>& movementNames, int durationTo, bool loop)"
		},
		 "bool UTF16ToUTF8(const std::u16string& utf16, std::string& outUtf8)": {
			"prefix": "bool UTF16ToUTF8(const std::u16string& utf16, std::string& outUtf8)",
			"body": [
				"UTF16ToUTF8(${1:std:u16string& utf16},${2:std:string& outUtf8})"
			],
			"description": "bool UTF16ToUTF8(const std::u16string& utf16, std::string& outUtf8)"
		},
		 "BezierTo* BezierTo::clone() const": {
			"prefix": "BezierTo* BezierTo::clone() const",
			"body": [
				"BezierTo* BezierTo:clone() "
			],
			"description": "BezierTo* BezierTo::clone() const"
		},
		 "ActionTimeline* ActionTimelineCache::loadAnimationActionWithFlatBuffersFile(const std::string &fileName)": {
			"prefix": "ActionTimeline* ActionTimelineCache::loadAnimationActionWithFlatBuffersFile(const std::string &fileName)",
			"body": [
				"ActionTimelineCache:loadAnimationActionWithFlatBuffersFile(${1:std:string &fileName})"
			],
			"description": "ActionTimeline* ActionTimelineCache::loadAnimationActionWithFlatBuffersFile(const std::string &fileName)"
		},
		 "void Speed::step(float dt)": {
			"prefix": "void Speed::step(float dt)",
			"body": [
				"Speed:step(${1:float dt})"
			],
			"description": "void Speed::step(float dt)"
		},
		 "GLProgramState* GLProgramState::clone() const": {
			"prefix": "GLProgramState* GLProgramState::clone() const",
			"body": [
				"GLProgramState* GLProgramState:clone() "
			],
			"description": "GLProgramState* GLProgramState::clone() const"
		},
		 "void GLProgram::setUniformsForBuiltins(const Mat4 &matrixMV)": {
			"prefix": "void GLProgram::setUniformsForBuiltins(const Mat4 &matrixMV)",
			"body": [
				"GLProgram:setUniformsForBuiltins(${1:Mat4 &matrixMV})"
			],
			"description": "void GLProgram::setUniformsForBuiltins(const Mat4 &matrixMV)"
		},
		 "void Bone::setBlendFunc(const BlendFunc& blendFunc)": {
			"prefix": "void Bone::setBlendFunc(const BlendFunc& blendFunc)",
			"body": [
				"Bone:setBlendFunc(${1:BlendFunc& blendFunc})"
			],
			"description": "void Bone::setBlendFunc(const BlendFunc& blendFunc)"
		},
		 "void PolygonBatch::flush ()": {
			"prefix": "void PolygonBatch::flush ()",
			"body": [
				"void PolygonBatch:flush ()"
			],
			"description": "void PolygonBatch::flush ()"
		},
		 "bool UICCTextField::onTextFieldDeleteBackward(TextFieldTTF *pSender, const char *delText, size_t nLen)": {
			"prefix": "bool UICCTextField::onTextFieldDeleteBackward(TextFieldTTF *pSender, const char *delText, size_t nLen)",
			"body": [
				"UICCTextField:onTextFieldDeleteBackward(${1:TextFieldTTF *pSender},${2:char *delText},${3:size_t nLen})"
			],
			"description": "bool UICCTextField::onTextFieldDeleteBackward(TextFieldTTF *pSender, const char *delText, size_t nLen)"
		},
		 "ProgressTimer* TransitionProgressRadialCW::progressTimerNodeWithRenderTexture(RenderTexture* texture)": {
			"prefix": "ProgressTimer* TransitionProgressRadialCW::progressTimerNodeWithRenderTexture(RenderTexture* texture)",
			"body": [
				"TransitionProgressRadialCW:progressTimerNodeWithRenderTexture(${1:RenderTexture* texture})"
			],
			"description": "ProgressTimer* TransitionProgressRadialCW::progressTimerNodeWithRenderTexture(RenderTexture* texture)"
		},
		 "void ActionNode::setActionTag(int tag)": {
			"prefix": "void ActionNode::setActionTag(int tag)",
			"body": [
				"ActionNode:setActionTag(${1:int tag})"
			],
			"description": "void ActionNode::setActionTag(int tag)"
		},
		 "std::string TextureCache::getDescription() const": {
			"prefix": "std::string TextureCache::getDescription() const",
			"body": [
				"std:string TextureCache:getDescription() "
			],
			"description": "std::string TextureCache::getDescription() const"
		},
		 "void EditBoxImplWin::setPlaceholderFontColor(const Color4B& color)": {
			"prefix": "void EditBoxImplWin::setPlaceholderFontColor(const Color4B& color)",
			"body": [
				"EditBoxImplWin:setPlaceholderFontColor(${1:Color4B& color})"
			],
			"description": "void EditBoxImplWin::setPlaceholderFontColor(const Color4B& color)"
		},
		 "void ParticleBatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void ParticleBatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"ParticleBatchNode:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void ParticleBatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "TintTo* TintTo::create(float duration, GLubyte red, GLubyte green, GLubyte blue)": {
			"prefix": "TintTo* TintTo::create(float duration, GLubyte red, GLubyte green, GLubyte blue)",
			"body": [
				"TintTo:create(${1:float duration},${2:GLubyte red},${3:GLubyte green},${4:GLubyte blue})"
			],
			"description": "TintTo* TintTo::create(float duration, GLubyte red, GLubyte green, GLubyte blue)"
		},
		 "void MathUtil::crossVec3(const float* v1, const float* v2, float* dst)": {
			"prefix": "void MathUtil::crossVec3(const float* v1, const float* v2, float* dst)",
			"body": [
				"MathUtil:crossVec3(${1:float* v1},${2:float* v2},${3:float* dst})"
			],
			"description": "void MathUtil::crossVec3(const float* v1, const float* v2, float* dst)"
		},
		 "bool ActionInterval::isDone() const": {
			"prefix": "bool ActionInterval::isDone() const",
			"body": [
				"bool ActionInterval:isDone() "
			],
			"description": "bool ActionInterval::isDone() const"
		},
		 "ProgressTimer* TransitionProgressOutIn::progressTimerNodeWithRenderTexture(RenderTexture* texture)": {
			"prefix": "ProgressTimer* TransitionProgressOutIn::progressTimerNodeWithRenderTexture(RenderTexture* texture)",
			"body": [
				"TransitionProgressOutIn:progressTimerNodeWithRenderTexture(${1:RenderTexture* texture})"
			],
			"description": "ProgressTimer* TransitionProgressOutIn::progressTimerNodeWithRenderTexture(RenderTexture* texture)"
		},
		 "Vec2 PhysicsShapeEdgePolygon::getCenter()": {
			"prefix": "Vec2 PhysicsShapeEdgePolygon::getCenter()",
			"body": [
				"Vec2 PhysicsShapeEdgePolygon:getCenter()"
			],
			"description": "Vec2 PhysicsShapeEdgePolygon::getCenter()"
		},
		 "CardinalSplineBy* CardinalSplineBy::reverse() const": {
			"prefix": "CardinalSplineBy* CardinalSplineBy::reverse() const",
			"body": [
				"CardinalSplineBy* CardinalSplineBy:reverse() "
			],
			"description": "CardinalSplineBy* CardinalSplineBy::reverse() const"
		},
		 "LayoutParameter::Type LayoutParameter::getLayoutType() const": {
			"prefix": "LayoutParameter::Type LayoutParameter::getLayoutType() const",
			"body": [
				"LayoutParameter:Type LayoutParameter:getLayoutType() "
			],
			"description": "LayoutParameter::Type LayoutParameter::getLayoutType() const"
		},
		 "void EditBoxImplCommon::closeKeyboard()": {
			"prefix": "void EditBoxImplCommon::closeKeyboard()",
			"body": [
				"void EditBoxImplCommon:closeKeyboard()"
			],
			"description": "void EditBoxImplCommon::closeKeyboard()"
		},
		 "void DisplayLinkDirector::mainLoop()": {
			"prefix": "void DisplayLinkDirector::mainLoop()",
			"body": [
				"void DisplayLinkDirector:mainLoop()"
			],
			"description": "void DisplayLinkDirector::mainLoop()"
		},
		 "float PhysicsJointLimit::getMin() const": {
			"prefix": "float PhysicsJointLimit::getMin() const",
			"body": [
				"float PhysicsJointLimit:getMin() "
			],
			"description": "float PhysicsJointLimit::getMin() const"
		},
		 "void VertexAttribValue::setCallback(const std::function<void(VertexAttrib*)> &callback)": {
			"prefix": "void VertexAttribValue::setCallback(const std::function<void(VertexAttrib*)> &callback)",
			"body": [
				"VertexAttribValue:setCallback(${1:std:function<void(VertexAttrib*})"
			],
			"description": "void VertexAttribValue::setCallback(const std::function<void(VertexAttrib*)> &callback)"
		},
		 "GLint GLProgram::getUniformLocation(const std::string &attributeName) const": {
			"prefix": "GLint GLProgram::getUniformLocation(const std::string &attributeName) const",
			"body": [
				"GLProgram:getUniformLocation(${1:std:string &attributeName})"
			],
			"description": "GLint GLProgram::getUniformLocation(const std::string &attributeName) const"
		},
		 "void ActionObject::updateToFrameByTime(float fTime)": {
			"prefix": "void ActionObject::updateToFrameByTime(float fTime)",
			"body": [
				"ActionObject:updateToFrameByTime(${1:float fTime})"
			],
			"description": "void ActionObject::updateToFrameByTime(float fTime)"
		},
		 "void __CCCallFuncND::execute()": {
			"prefix": "void __CCCallFuncND::execute()",
			"body": [
				"void __CCCallFuncND:execute()"
			],
			"description": "void __CCCallFuncND::execute()"
		},
		 "void PhysicsWorldCallback::queryPointFunc(cpShape *shape, cpFloat distance, cpVect point, PointQueryCallbackInfo *info)": {
			"prefix": "void PhysicsWorldCallback::queryPointFunc(cpShape *shape, cpFloat distance, cpVect point, PointQueryCallbackInfo *info)",
			"body": [
				"PhysicsWorldCallback:queryPointFunc(${1:cpShape *shape},${2:cpFloat distance},${3:cpVect point},${4:PointQueryCallbackInfo *info})"
			],
			"description": "void PhysicsWorldCallback::queryPointFunc(cpShape *shape, cpFloat distance, cpVect point, PointQueryCallbackInfo *info)"
		},
		 "float SimpleAudioEngine::getEffectsVolume()": {
			"prefix": "float SimpleAudioEngine::getEffectsVolume()",
			"body": [
				"float SimpleAudioEngine:getEffectsVolume()"
			],
			"description": "float SimpleAudioEngine::getEffectsVolume()"
		},
		 "void DisplayFactory::updateParticleDisplay(Bone *bone, Node *display, float dt)": {
			"prefix": "void DisplayFactory::updateParticleDisplay(Bone *bone, Node *display, float dt)",
			"body": [
				"DisplayFactory:updateParticleDisplay(${1:Bone *bone},${2:Node *display},${3:float dt})"
			],
			"description": "void DisplayFactory::updateParticleDisplay(Bone *bone, Node *display, float dt)"
		},
		 "bool GLViewImpl::initWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)": {
			"prefix": "bool GLViewImpl::initWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)",
			"body": [
				"GLViewImpl:initWithRect(${1:std:string& viewName},${2:Rect rect},${3:float frameZoomFactor})"
			],
			"description": "bool GLViewImpl::initWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)"
		},
		 "SEL_CallFuncO NotificationObserver::getSelector() const": {
			"prefix": "SEL_CallFuncO NotificationObserver::getSelector() const",
			"body": [
				"SEL_CallFuncO NotificationObserver:getSelector() "
			],
			"description": "SEL_CallFuncO NotificationObserver::getSelector() const"
		},
		 "const BlendFunc &LabelBMFont::getBlendFunc() const": {
			"prefix": "const BlendFunc &LabelBMFont::getBlendFunc() const",
			"body": [
				" BlendFunc &LabelBMFont:getBlendFunc() "
			],
			"description": "const BlendFunc &LabelBMFont::getBlendFunc() const"
		},
		 "void ComAudio::resumeEffect(unsigned int nSoundId)": {
			"prefix": "void ComAudio::resumeEffect(unsigned int nSoundId)",
			"body": [
				"ComAudio:resumeEffect(${1:unsigned int nSoundId})"
			],
			"description": "void ComAudio::resumeEffect(unsigned int nSoundId)"
		},
		 "void ActionManager::removeAllActionsFromTarget(Node *target)": {
			"prefix": "void ActionManager::removeAllActionsFromTarget(Node *target)",
			"body": [
				"ActionManager:removeAllActionsFromTarget(${1:Node *target})"
			],
			"description": "void ActionManager::removeAllActionsFromTarget(Node *target)"
		},
		 "void Text::enableShadow(const Color4B& shadowColor,const Size &offset, int blurRadius)": {
			"prefix": "void Text::enableShadow(const Color4B& shadowColor,const Size &offset, int blurRadius)",
			"body": [
				"Text:enableShadow(${1:Color4B& shadowColor},${2:Size &offset},${3:int blurRadius})"
			],
			"description": "void Text::enableShadow(const Color4B& shadowColor,const Size &offset, int blurRadius)"
		},
		 "bool Image::initWithPVRData(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithPVRData(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithPVRData(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithPVRData(const unsigned char * data, ssize_t dataLen)"
		},
		 "void DisplayLinkDirector::startAnimation()": {
			"prefix": "void DisplayLinkDirector::startAnimation()",
			"body": [
				"void DisplayLinkDirector:startAnimation()"
			],
			"description": "void DisplayLinkDirector::startAnimation()"
		},
		 "void BillBoard::setMode( Mode mode )": {
			"prefix": "void BillBoard::setMode( Mode mode )",
			"body": [
				"BillBoard:setMode(${1:Mode mode})"
			],
			"description": "void BillBoard::setMode( Mode mode )"
		},
		 "void AbstractCheckButton::onPressStateChangedToDisabled()": {
			"prefix": "void AbstractCheckButton::onPressStateChangedToDisabled()",
			"body": [
				"void AbstractCheckButton:onPressStateChangedToDisabled()"
			],
			"description": "void AbstractCheckButton::onPressStateChangedToDisabled()"
		},
		 "bool ClippingNode::init()": {
			"prefix": "bool ClippingNode::init()",
			"body": [
				"bool ClippingNode:init()"
			],
			"description": "bool ClippingNode::init()"
		},
		 "AccelDeccelAmplitude* AccelDeccelAmplitude::create(Action *action, float duration)": {
			"prefix": "AccelDeccelAmplitude* AccelDeccelAmplitude::create(Action *action, float duration)",
			"body": [
				"AccelDeccelAmplitude:create(${1:Action *action},${2:float duration})"
			],
			"description": "AccelDeccelAmplitude* AccelDeccelAmplitude::create(Action *action, float duration)"
		},
		 "void VideoPlayer::pause()": {
			"prefix": "void VideoPlayer::pause()",
			"body": [
				"void VideoPlayer:pause()"
			],
			"description": "void VideoPlayer::pause()"
		},
		 "const cocos2d::Map<std::string, Bone*>& Armature::getBoneDic() const": {
			"prefix": "const cocos2d::Map<std::string, Bone*>& Armature::getBoneDic() const",
			"body": [
				" cocos2d:Map<std:string, Bone*>& Armature:getBoneDic() "
			],
			"description": "const cocos2d::Map<std::string, Bone*>& Armature::getBoneDic() const"
		},
		 "void TextureCache::addImageAsyncCallBack(float dt)": {
			"prefix": "void TextureCache::addImageAsyncCallBack(float dt)",
			"body": [
				"TextureCache:addImageAsyncCallBack(${1:float dt})"
			],
			"description": "void TextureCache::addImageAsyncCallBack(float dt)"
		},
		 "int MeshSkin::getBoneIndex(Bone3D* bone) const": {
			"prefix": "int MeshSkin::getBoneIndex(Bone3D* bone) const",
			"body": [
				"MeshSkin:getBoneIndex(${1:Bone3D* bone})"
			],
			"description": "int MeshSkin::getBoneIndex(Bone3D* bone) const"
		},
		 "Frame* VisibleFrame::clone()": {
			"prefix": "Frame* VisibleFrame::clone()",
			"body": [
				"Frame* VisibleFrame:clone()"
			],
			"description": "Frame* VisibleFrame::clone()"
		},
		 "void BoneNode::addSkin(SkinNode* skin, bool isDisplay, bool hideOthers)": {
			"prefix": "void BoneNode::addSkin(SkinNode* skin, bool isDisplay, bool hideOthers)",
			"body": [
				"BoneNode:addSkin(${1:SkinNode* skin},${2:bool isDisplay},${3:bool hideOthers})"
			],
			"description": "void BoneNode::addSkin(SkinNode* skin, bool isDisplay, bool hideOthers)"
		},
		 "cocos2d::Rect BoneNode::getBoundingBox() const": {
			"prefix": "cocos2d::Rect BoneNode::getBoundingBox() const",
			"body": [
				"cocos2d:Rect BoneNode:getBoundingBox() "
			],
			"description": "cocos2d::Rect BoneNode::getBoundingBox() const"
		},
		 "void ActionManagerEx::initWithDictionary(const char* jsonName,const rapidjson::Value &dic, Ref* root)": {
			"prefix": "void ActionManagerEx::initWithDictionary(const char* jsonName,const rapidjson::Value &dic, Ref* root)",
			"body": [
				"ActionManagerEx:initWithDictionary(${1:char* jsonName},${2:rapidjson:Value &dic},${3:Ref* root})"
			],
			"description": "void ActionManagerEx::initWithDictionary(const char* jsonName,const rapidjson::Value &dic, Ref* root)"
		},
		 "static std::string getFixedBaseUrl(const std::string& baseUrl)": {
			"prefix": "static std::string getFixedBaseUrl(const std::string& baseUrl)",
			"body": [
				"std:string getFixedBaseUrl(${1:std:string& baseUrl})"
			],
			"description": "static std::string getFixedBaseUrl(const std::string& baseUrl)"
		},
		 "Offset<flatbuffers::TextureFrame> FlatBuffersSerialize::createTextureFrame(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<flatbuffers::TextureFrame> FlatBuffersSerialize::createTextureFrame(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createTextureFrame(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<flatbuffers::TextureFrame> FlatBuffersSerialize::createTextureFrame(const tinyxml2::XMLElement *objectData)"
		},
		 "void	Physics3DHingeConstraint::setLimit(float low, float high, float softness, float biasFactor, float relaxationFactor)": {
			"prefix": "void	Physics3DHingeConstraint::setLimit(float low, float high, float softness, float biasFactor, float relaxationFactor)",
			"body": [
				"low},${2:float high},${3:float softness},${4:float biasFactor},${5:float relaxationFactor})"
			],
			"description": "void	Physics3DHingeConstraint::setLimit(float low, float high, float softness, float biasFactor, float relaxationFactor)"
		},
		 "void Widget::addTouchEventListener(const ccWidgetTouchCallback& callback)": {
			"prefix": "void Widget::addTouchEventListener(const ccWidgetTouchCallback& callback)",
			"body": [
				"Widget:addTouchEventListener(${1:ccWidgetTouchCallback& callback})"
			],
			"description": "void Widget::addTouchEventListener(const ccWidgetTouchCallback& callback)"
		},
		 "bool Console::parseCommand(int fd)": {
			"prefix": "bool Console::parseCommand(int fd)",
			"body": [
				"Console:parseCommand(${1:int fd})"
			],
			"description": "bool Console::parseCommand(int fd)"
		},
		 "bool Physics3DSliderConstraint::getUseFrameOffset() const": {
			"prefix": "bool Physics3DSliderConstraint::getUseFrameOffset() const",
			"body": [
				"bool Physics3DSliderConstraint:getUseFrameOffset() "
			],
			"description": "bool Physics3DSliderConstraint::getUseFrameOffset() const"
		},
		 "void ComAudio::resumeAllEffects()": {
			"prefix": "void ComAudio::resumeAllEffects()",
			"body": [
				"void ComAudio:resumeAllEffects()"
			],
			"description": "void ComAudio::resumeAllEffects()"
		},
		 "bool Sprite::initWithSpriteFrameName(const std::string& spriteFrameName)": {
			"prefix": "bool Sprite::initWithSpriteFrameName(const std::string& spriteFrameName)",
			"body": [
				"Sprite:initWithSpriteFrameName(${1:std:string& spriteFrameName})"
			],
			"description": "bool Sprite::initWithSpriteFrameName(const std::string& spriteFrameName)"
		},
		 "void ComAudio::playBackgroundMusic(const char* pszFilePath, bool loop)": {
			"prefix": "void ComAudio::playBackgroundMusic(const char* pszFilePath, bool loop)",
			"body": [
				"ComAudio:playBackgroundMusic(${1:char* pszFilePath},${2:bool loop})"
			],
			"description": "void ComAudio::playBackgroundMusic(const char* pszFilePath, bool loop)"
		},
		 "void Renderer::flush2D()": {
			"prefix": "void Renderer::flush2D()",
			"body": [
				"void Renderer:flush2D()"
			],
			"description": "void Renderer::flush2D()"
		},
		 "EaseSineInOut* EaseSineInOut::create(ActionInterval* action)": {
			"prefix": "EaseSineInOut* EaseSineInOut::create(ActionInterval* action)",
			"body": [
				"EaseSineInOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseSineInOut* EaseSineInOut::create(ActionInterval* action)"
		},
		 "void SIOClient::disconnect()": {
			"prefix": "void SIOClient::disconnect()",
			"body": [
				"void SIOClient:disconnect()"
			],
			"description": "void SIOClient::disconnect()"
		},
		 "bool Physics3DConstraint::isEnabled() const": {
			"prefix": "bool Physics3DConstraint::isEnabled() const",
			"body": [
				"bool Physics3DConstraint:isEnabled() "
			],
			"description": "bool Physics3DConstraint::isEnabled() const"
		},
		 "void EventDispatcher::EventListenerVector::clearSceneGraphListeners()": {
			"prefix": "void EventDispatcher::EventListenerVector::clearSceneGraphListeners()",
			"body": [
				"void EventDispatcher:EventListenerVector:clearSceneGraphListeners()"
			],
			"description": "void EventDispatcher::EventListenerVector::clearSceneGraphListeners()"
		},
		 "Scene* Scene::create()": {
			"prefix": "Scene* Scene::create()",
			"body": [
				"Scene* Scene:create()"
			],
			"description": "Scene* Scene::create()"
		},
		 "Value TMXTiledMap::getProperty(const std::string& propertyName) const": {
			"prefix": "Value TMXTiledMap::getProperty(const std::string& propertyName) const",
			"body": [
				"TMXTiledMap:getProperty(${1:std:string& propertyName})"
			],
			"description": "Value TMXTiledMap::getProperty(const std::string& propertyName) const"
		},
		 "void ScrollView::handleMoveLogic(Touch *touch)": {
			"prefix": "void ScrollView::handleMoveLogic(Touch *touch)",
			"body": [
				"ScrollView:handleMoveLogic(${1:Touch *touch})"
			],
			"description": "void ScrollView::handleMoveLogic(Touch *touch)"
		},
		 "LayerColor * LayerColor::create(const Color4B& color)": {
			"prefix": "LayerColor * LayerColor::create(const Color4B& color)",
			"body": [
				"* LayerColor:create(${1:Color4B& color})"
			],
			"description": "LayerColor * LayerColor::create(const Color4B& color)"
		},
		 "void VertexAttribBinding::setVertexAttribPointer(const std::string &name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid* pointer)": {
			"prefix": "void VertexAttribBinding::setVertexAttribPointer(const std::string &name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid* pointer)",
			"body": [
				"VertexAttribBinding:setVertexAttribPointer(${1:std:string &name},${2:GLint size},${3:GLenum type},${4:GLboolean normalized},${5:GLsizei stride},${6:GLvoid* pointer})"
			],
			"description": "void VertexAttribBinding::setVertexAttribPointer(const std::string &name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid* pointer)"
		},
		 "Camera* Camera::createOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)": {
			"prefix": "Camera* Camera::createOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)",
			"body": [
				"Camera:createOrthographic(${1:float zoomX},${2:float zoomY},${3:float nearPlane},${4:float farPlane})"
			],
			"description": "Camera* Camera::createOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)"
		},
		 "void UniformValue::setVec3v(ssize_t size, const Vec3* pointer)": {
			"prefix": "void UniformValue::setVec3v(ssize_t size, const Vec3* pointer)",
			"body": [
				"UniformValue:setVec3v(${1:ssize_t size},${2:Vec3* pointer})"
			],
			"description": "void UniformValue::setVec3v(ssize_t size, const Vec3* pointer)"
		},
		 "void Armature::setParentBone(Bone *parentBone)": {
			"prefix": "void Armature::setParentBone(Bone *parentBone)",
			"body": [
				"Armature:setParentBone(${1:Bone *parentBone})"
			],
			"description": "void Armature::setParentBone(Bone *parentBone)"
		},
		 "void EditBoxImplAndroid::nativeCloseKeyboard()": {
			"prefix": "void EditBoxImplAndroid::nativeCloseKeyboard()",
			"body": [
				"void EditBoxImplAndroid:nativeCloseKeyboard()"
			],
			"description": "void EditBoxImplAndroid::nativeCloseKeyboard()"
		},
		 "void Quaternion::squad(const Quaternion& q1, const Quaternion& q2, const Quaternion& s1, const Quaternion& s2, float t, Quaternion* dst)": {
			"prefix": "void Quaternion::squad(const Quaternion& q1, const Quaternion& q2, const Quaternion& s1, const Quaternion& s2, float t, Quaternion* dst)",
			"body": [
				"Quaternion:squad(${1:Quaternion& q1},${2:Quaternion& q2},${3:Quaternion& s1},${4:Quaternion& s2},${5:float t},${6:Quaternion* dst})"
			],
			"description": "void Quaternion::squad(const Quaternion& q1, const Quaternion& q2, const Quaternion& s1, const Quaternion& s2, float t, Quaternion* dst)"
		},
		 "const std::string& TextFieldTTF::getPlaceHolder() const": {
			"prefix": "const std::string& TextFieldTTF::getPlaceHolder() const",
			"body": [
				" std:string& TextFieldTTF:getPlaceHolder() "
			],
			"description": "const std::string& TextFieldTTF::getPlaceHolder() const"
		},
		 "int Downloader::batchDownloadProgressFunc(void *userdata, double totalToDownload, double nowDownloaded)": {
			"prefix": "int Downloader::batchDownloadProgressFunc(void *userdata, double totalToDownload, double nowDownloaded)",
			"body": [
				"Downloader:batchDownloadProgressFunc(${1:void *userdata},${2:double totalToDownload},${3:double nowDownloaded})"
			],
			"description": "int Downloader::batchDownloadProgressFunc(void *userdata, double totalToDownload, double nowDownloaded)"
		},
		 "ActionInterval* TransitionTurnOffTiles:: easeActionWithAction(ActionInterval* action)": {
			"prefix": "ActionInterval* TransitionTurnOffTiles:: easeActionWithAction(ActionInterval* action)",
			"body": [
				"TransitionTurnOffTiles: easeActionWithAction(${1:ActionInterval* action})"
			],
			"description": "ActionInterval* TransitionTurnOffTiles:: easeActionWithAction(ActionInterval* action)"
		},
		 "Size AbstractCheckButton::getVirtualRendererSize() const": {
			"prefix": "Size AbstractCheckButton::getVirtualRendererSize() const",
			"body": [
				"Size AbstractCheckButton:getVirtualRendererSize() "
			],
			"description": "Size AbstractCheckButton::getVirtualRendererSize() const"
		},
		 "void Bone3D::setAnimationValue(float* trans, float* rot, float* scale, void* tag, float weight)": {
			"prefix": "void Bone3D::setAnimationValue(float* trans, float* rot, float* scale, void* tag, float weight)",
			"body": [
				"Bone3D:setAnimationValue(${1:float* trans},${2:float* rot},${3:float* scale},${4:void* tag},${5:float weight})"
			],
			"description": "void Bone3D::setAnimationValue(float* trans, float* rot, float* scale, void* tag, float weight)"
		},
		 "FlipY* FlipY::reverse() const": {
			"prefix": "FlipY* FlipY::reverse() const",
			"body": [
				"FlipY* FlipY:reverse() "
			],
			"description": "FlipY* FlipY::reverse() const"
		},
		 "void WebViewImpl::setJavascriptInterfaceScheme(const std::string &scheme)": {
			"prefix": "void WebViewImpl::setJavascriptInterfaceScheme(const std::string &scheme)",
			"body": [
				"WebViewImpl:setJavascriptInterfaceScheme(${1:std:string &scheme})"
			],
			"description": "void WebViewImpl::setJavascriptInterfaceScheme(const std::string &scheme)"
		},
		 "void AtlasNode::setTextureAtlas(TextureAtlas* textureAtlas)": {
			"prefix": "void AtlasNode::setTextureAtlas(TextureAtlas* textureAtlas)",
			"body": [
				"AtlasNode:setTextureAtlas(${1:TextureAtlas* textureAtlas})"
			],
			"description": "void AtlasNode::setTextureAtlas(TextureAtlas* textureAtlas)"
		},
		 "void ClippingRectangleNode::setClippingRegion(const Rect &clippingRegion)": {
			"prefix": "void ClippingRectangleNode::setClippingRegion(const Rect &clippingRegion)",
			"body": [
				"ClippingRectangleNode:setClippingRegion(${1:Rect &clippingRegion})"
			],
			"description": "void ClippingRectangleNode::setClippingRegion(const Rect &clippingRegion)"
		},
		 "void Layout::drawFullScreenQuadClearStencil()": {
			"prefix": "void Layout::drawFullScreenQuadClearStencil()",
			"body": [
				"void Layout:drawFullScreenQuadClearStencil()"
			],
			"description": "void Layout::drawFullScreenQuadClearStencil()"
		},
		 "PhysicsShapeEdgeSegment* PhysicsShapeEdgeSegment::create(const Vec2& a, const Vec2& b, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)": {
			"prefix": "PhysicsShapeEdgeSegment* PhysicsShapeEdgeSegment::create(const Vec2& a, const Vec2& b, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)",
			"body": [
				"PhysicsShapeEdgeSegment:create(${1:Vec2& a},${2:Vec2& b},${3:PhysicsMaterial& material/* = MaterialDefault*/},${4:float border/* = 1*/})"
			],
			"description": "PhysicsShapeEdgeSegment* PhysicsShapeEdgeSegment::create(const Vec2& a, const Vec2& b, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)"
		},
		 "void SkeletonRenderer::setDebugSlotsEnabled (bool enabled)": {
			"prefix": "void SkeletonRenderer::setDebugSlotsEnabled (bool enabled)",
			"body": [
				"SkeletonRenderer:setDebugSlotsEnabled (${1:bool enabled})"
			],
			"description": "void SkeletonRenderer::setDebugSlotsEnabled (bool enabled)"
		},
		 "void Director::setClearColor(const Color4F& clearColor)": {
			"prefix": "void Director::setClearColor(const Color4F& clearColor)",
			"body": [
				"Director:setClearColor(${1:Color4F& clearColor})"
			],
			"description": "void Director::setClearColor(const Color4F& clearColor)"
		},
		 "std::string getPackageNameJNI()": {
			"prefix": "std::string getPackageNameJNI()",
			"body": [
				"std:string getPackageNameJNI()"
			],
			"description": "std::string getPackageNameJNI()"
		},
		 "ScaleTo* ScaleTo::create(float duration, float s)": {
			"prefix": "ScaleTo* ScaleTo::create(float duration, float s)",
			"body": [
				"ScaleTo:create(${1:float duration},${2:float s})"
			],
			"description": "ScaleTo* ScaleTo::create(float duration, float s)"
		},
		 "void FileUtils::destroyInstance()": {
			"prefix": "void FileUtils::destroyInstance()",
			"body": [
				"void FileUtils:destroyInstance()"
			],
			"description": "void FileUtils::destroyInstance()"
		},
		 "EaseExponentialIn* EaseExponentialIn::create(ActionInterval* action)": {
			"prefix": "EaseExponentialIn* EaseExponentialIn::create(ActionInterval* action)",
			"body": [
				"EaseExponentialIn:create(${1:ActionInterval* action})"
			],
			"description": "EaseExponentialIn* EaseExponentialIn::create(ActionInterval* action)"
		},
		 "void AudioEngine::pause(int audioID)": {
			"prefix": "void AudioEngine::pause(int audioID)",
			"body": [
				"AudioEngine:pause(${1:int audioID})"
			],
			"description": "void AudioEngine::pause(int audioID)"
		},
		 "PointArray* PointArray::reverse() const": {
			"prefix": "PointArray* PointArray::reverse() const",
			"body": [
				"PointArray* PointArray:reverse() "
			],
			"description": "PointArray* PointArray::reverse() const"
		},
		 "void Scheduler::update(float dt)": {
			"prefix": "void Scheduler::update(float dt)",
			"body": [
				"Scheduler:update(${1:float dt})"
			],
			"description": "void Scheduler::update(float dt)"
		},
		 "void Mat4::add(float scalar, Mat4* dst)": {
			"prefix": "void Mat4::add(float scalar, Mat4* dst)",
			"body": [
				"Mat4:add(${1:float scalar},${2:Mat4* dst})"
			],
			"description": "void Mat4::add(float scalar, Mat4* dst)"
		},
		 "float Terrain::getImageHeight(int pixel_x,int pixel_y) const": {
			"prefix": "float Terrain::getImageHeight(int pixel_x,int pixel_y) const",
			"body": [
				"Terrain:getImageHeight(${1:int pixel_x},${2:int pixel_y})"
			],
			"description": "float Terrain::getImageHeight(int pixel_x,int pixel_y) const"
		},
		 "void TriggerMng::removeArmatureAllMovementCallBack(Armature *pAr)": {
			"prefix": "void TriggerMng::removeArmatureAllMovementCallBack(Armature *pAr)",
			"body": [
				"TriggerMng:removeArmatureAllMovementCallBack(${1:Armature *pAr})"
			],
			"description": "void TriggerMng::removeArmatureAllMovementCallBack(Armature *pAr)"
		},
		 "bool InputDelegate::onTouchBegan(Touch *pTouch, Event *pEvent)": {
			"prefix": "bool InputDelegate::onTouchBegan(Touch *pTouch, Event *pEvent)",
			"body": [
				"InputDelegate:onTouchBegan(${1:Touch *pTouch},${2:Event *pEvent})"
			],
			"description": "bool InputDelegate::onTouchBegan(Touch *pTouch, Event *pEvent)"
		},
		 "void Sprite::setTexture(const std::string &filename)": {
			"prefix": "void Sprite::setTexture(const std::string &filename)",
			"body": [
				"Sprite:setTexture(${1:std:string &filename})"
			],
			"description": "void Sprite::setTexture(const std::string &filename)"
		},
		 "void EventDispatcher::updateDirtyFlagForSceneGraph()": {
			"prefix": "void EventDispatcher::updateDirtyFlagForSceneGraph()",
			"body": [
				"void EventDispatcher:updateDirtyFlagForSceneGraph()"
			],
			"description": "void EventDispatcher::updateDirtyFlagForSceneGraph()"
		},
		 "void ColliderFilter::updateShape(cpShape *shape)": {
			"prefix": "void ColliderFilter::updateShape(cpShape *shape)",
			"body": [
				"ColliderFilter:updateShape(${1:cpShape *shape})"
			],
			"description": "void ColliderFilter::updateShape(cpShape *shape)"
		},
		 "void DisplayFactory::createSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay)": {
			"prefix": "void DisplayFactory::createSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay)",
			"body": [
				"DisplayFactory:createSpriteDisplay(${1:Bone *bone},${2:DecorativeDisplay *decoDisplay})"
			],
			"description": "void DisplayFactory::createSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay)"
		},
		 "bool Configuration::supportsBGRA8888() const": {
			"prefix": "bool Configuration::supportsBGRA8888() const",
			"body": [
				"bool Configuration:supportsBGRA8888() "
			],
			"description": "bool Configuration::supportsBGRA8888() const"
		},
		 "void GLView::setGLContextAttrs(GLContextAttrs& glContextAttrs)": {
			"prefix": "void GLView::setGLContextAttrs(GLContextAttrs& glContextAttrs)",
			"body": [
				"GLView:setGLContextAttrs(${1:GLContextAttrs& glContextAttrs})"
			],
			"description": "void GLView::setGLContextAttrs(GLContextAttrs& glContextAttrs)"
		},
		 "void ZOrderFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void ZOrderFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"ZOrderFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void ZOrderFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "const Margin& LayoutParameter::getMargin() const": {
			"prefix": "const Margin& LayoutParameter::getMargin() const",
			"body": [
				" Margin& LayoutParameter:getMargin() "
			],
			"description": "const Margin& LayoutParameter::getMargin() const"
		},
		 "void NodeLoaderLibrary::destroyInstance()": {
			"prefix": "void NodeLoaderLibrary::destroyInstance()",
			"body": [
				"void NodeLoaderLibrary:destroyInstance()"
			],
			"description": "void NodeLoaderLibrary::destroyInstance()"
		},
		 "float GLView::getScaleY() const": {
			"prefix": "float GLView::getScaleY() const",
			"body": [
				"float GLView:getScaleY() "
			],
			"description": "float GLView::getScaleY() const"
		},
		 "void Renderer::fillVerticesAndIndices(const TrianglesCommand* cmd)": {
			"prefix": "void Renderer::fillVerticesAndIndices(const TrianglesCommand* cmd)",
			"body": [
				"Renderer:fillVerticesAndIndices(${1:TrianglesCommand* cmd})"
			],
			"description": "void Renderer::fillVerticesAndIndices(const TrianglesCommand* cmd)"
		},
		 "FrameBuffer* FrameBuffer::create(uint8_t fid, unsigned int width, unsigned int height)": {
			"prefix": "FrameBuffer* FrameBuffer::create(uint8_t fid, unsigned int width, unsigned int height)",
			"body": [
				"FrameBuffer:create(${1:uint8_t fid},${2:unsigned int width},${3:unsigned int height})"
			],
			"description": "FrameBuffer* FrameBuffer::create(uint8_t fid, unsigned int width, unsigned int height)"
		},
		 "bool EventListenerTouchAllAtOnce::checkAvailable()": {
			"prefix": "bool EventListenerTouchAllAtOnce::checkAvailable()",
			"body": [
				"bool EventListenerTouchAllAtOnce:checkAvailable()"
			],
			"description": "bool EventListenerTouchAllAtOnce::checkAvailable()"
		},
		 "int ActionObject::valueToInt(const std::string& value)": {
			"prefix": "int ActionObject::valueToInt(const std::string& value)",
			"body": [
				"ActionObject:valueToInt(${1:std:string& value})"
			],
			"description": "int ActionObject::valueToInt(const std::string& value)"
		},
		 "bool EventListenerAcceleration::init(const std::function<void(Acceleration*, Event* event)>& callback)": {
			"prefix": "bool EventListenerAcceleration::init(const std::function<void(Acceleration*, Event* event)>& callback)",
			"body": [
				"EventListenerAcceleration:init(${1:std:function<void(Acceleration*},${2:Event* event})"
			],
			"description": "bool EventListenerAcceleration::init(const std::function<void(Acceleration*, Event* event)>& callback)"
		},
		 "void FadeIn::startWithTarget(cocos2d::Node *target)": {
			"prefix": "void FadeIn::startWithTarget(cocos2d::Node *target)",
			"body": [
				"FadeIn:startWithTarget(${1:cocos2d:Node *target})"
			],
			"description": "void FadeIn::startWithTarget(cocos2d::Node *target)"
		},
		 "void PhysicsBody::setAngularVelocityLimit(float limit)": {
			"prefix": "void PhysicsBody::setAngularVelocityLimit(float limit)",
			"body": [
				"PhysicsBody:setAngularVelocityLimit(${1:float limit})"
			],
			"description": "void PhysicsBody::setAngularVelocityLimit(float limit)"
		},
		 "void FadeIn::setReverseAction(cocos2d::FadeTo *ac)": {
			"prefix": "void FadeIn::setReverseAction(cocos2d::FadeTo *ac)",
			"body": [
				"FadeIn:setReverseAction(${1:cocos2d:FadeTo *ac})"
			],
			"description": "void FadeIn::setReverseAction(cocos2d::FadeTo *ac)"
		},
		 "Node* CSLoader::loadNodeWithContent(const std::string& content)": {
			"prefix": "Node* CSLoader::loadNodeWithContent(const std::string& content)",
			"body": [
				"CSLoader:loadNodeWithContent(${1:std:string& content})"
			],
			"description": "Node* CSLoader::loadNodeWithContent(const std::string& content)"
		},
		 "Technique* Technique::create(Material* material)": {
			"prefix": "Technique* Technique::create(Material* material)",
			"body": [
				"Technique:create(${1:Material* material})"
			],
			"description": "Technique* Technique::create(Material* material)"
		},
		 "Physics3DShape::ShapeType Physics3DShape::getShapeType() const": {
			"prefix": "Physics3DShape::ShapeType Physics3DShape::getShapeType() const",
			"body": [
				"Physics3DShape:ShapeType Physics3DShape:getShapeType() "
			],
			"description": "Physics3DShape::ShapeType Physics3DShape::getShapeType() const"
		},
		 "Rect GLViewImpl::getScissorRect() const": {
			"prefix": "Rect GLViewImpl::getScissorRect() const",
			"body": [
				"Rect GLViewImpl:getScissorRect() "
			],
			"description": "Rect GLViewImpl::getScissorRect() const"
		},
		 "void ScrollView::setScrollBarOpacity(GLubyte opacity)": {
			"prefix": "void ScrollView::setScrollBarOpacity(GLubyte opacity)",
			"body": [
				"ScrollView:setScrollBarOpacity(${1:GLubyte opacity})"
			],
			"description": "void ScrollView::setScrollBarOpacity(GLubyte opacity)"
		},
		 "void UICCTextField::setPasswordText(const std::string& text)": {
			"prefix": "void UICCTextField::setPasswordText(const std::string& text)",
			"body": [
				"UICCTextField:setPasswordText(${1:std:string& text})"
			],
			"description": "void UICCTextField::setPasswordText(const std::string& text)"
		},
		 "void RenderTexture::listenToForeground(EventCustom *event)": {
			"prefix": "void RenderTexture::listenToForeground(EventCustom *event)",
			"body": [
				"RenderTexture:listenToForeground(${1:EventCustom *event})"
			],
			"description": "void RenderTexture::listenToForeground(EventCustom *event)"
		},
		 "void LabelTTF::enableShadow(const Size &shadowOffset, float shadowOpacity, float shadowBlur, bool updateTexture)": {
			"prefix": "void LabelTTF::enableShadow(const Size &shadowOffset, float shadowOpacity, float shadowBlur, bool updateTexture)",
			"body": [
				"LabelTTF:enableShadow(${1:Size &shadowOffset},${2:float shadowOpacity},${3:float shadowBlur},${4:bool updateTexture})"
			],
			"description": "void LabelTTF::enableShadow(const Size &shadowOffset, float shadowOpacity, float shadowBlur, bool updateTexture)"
		},
		 "bool Sprite::isFlippedX(void) const": {
			"prefix": "bool Sprite::isFlippedX(void) const",
			"body": [
				"Sprite:isFlippedX(${1:void})"
			],
			"description": "bool Sprite::isFlippedX(void) const"
		},
		 "void Node::setScheduler(Scheduler* scheduler)": {
			"prefix": "void Node::setScheduler(Scheduler* scheduler)",
			"body": [
				"Node:setScheduler(${1:Scheduler* scheduler})"
			],
			"description": "void Node::setScheduler(Scheduler* scheduler)"
		},
		 "void  FontAtlas::setLineHeight(float newHeight)": {
			"prefix": "void  FontAtlas::setLineHeight(float newHeight)",
			"body": [
				"FontAtlas:setLineHeight(${1:float newHeight})"
			],
			"description": "void  FontAtlas::setLineHeight(float newHeight)"
		},
		 "void Physics3DCollider::setHitFraction(float hitFraction)": {
			"prefix": "void Physics3DCollider::setHitFraction(float hitFraction)",
			"body": [
				"Physics3DCollider:setHitFraction(${1:float hitFraction})"
			],
			"description": "void Physics3DCollider::setHitFraction(float hitFraction)"
		},
		 "void Sprite3D::createNode(NodeData* nodedata, Node* root, const MaterialDatas& materialdatas, bool singleSprite)": {
			"prefix": "void Sprite3D::createNode(NodeData* nodedata, Node* root, const MaterialDatas& materialdatas, bool singleSprite)",
			"body": [
				"Sprite3D:createNode(${1:NodeData* nodedata},${2:Node* root},${3:MaterialDatas& materialdatas},${4:bool singleSprite})"
			],
			"description": "void Sprite3D::createNode(NodeData* nodedata, Node* root, const MaterialDatas& materialdatas, bool singleSprite)"
		},
		 "void ListView::remedyVerticalLayoutParameter(LinearLayoutParameter* layoutParameter, ssize_t itemIndex)": {
			"prefix": "void ListView::remedyVerticalLayoutParameter(LinearLayoutParameter* layoutParameter, ssize_t itemIndex)",
			"body": [
				"ListView:remedyVerticalLayoutParameter(${1:LinearLayoutParameter* layoutParameter},${2:ssize_t itemIndex})"
			],
			"description": "void ListView::remedyVerticalLayoutParameter(LinearLayoutParameter* layoutParameter, ssize_t itemIndex)"
		},
		 "void InputDelegate::onTouchCancelled(Touch *pTouch, Event *pEvent)": {
			"prefix": "void InputDelegate::onTouchCancelled(Touch *pTouch, Event *pEvent)",
			"body": [
				"InputDelegate:onTouchCancelled(${1:Touch *pTouch},${2:Event *pEvent})"
			],
			"description": "void InputDelegate::onTouchCancelled(Touch *pTouch, Event *pEvent)"
		},
		 "const BlendFunc& SkeletonRenderer::getBlendFunc () const": {
			"prefix": "const BlendFunc& SkeletonRenderer::getBlendFunc () const",
			"body": [
				" BlendFunc& SkeletonRenderer:getBlendFunc () "
			],
			"description": "const BlendFunc& SkeletonRenderer::getBlendFunc () const"
		},
		 "void SkeletonRenderer::setTimeScale (float scale)": {
			"prefix": "void SkeletonRenderer::setTimeScale (float scale)",
			"body": [
				"SkeletonRenderer:setTimeScale (${1:float scale})"
			],
			"description": "void SkeletonRenderer::setTimeScale (float scale)"
		},
		 "const ValueMap* Animate3D::getKeyFrameUserInfo(int keyFrame) const": {
			"prefix": "const ValueMap* Animate3D::getKeyFrameUserInfo(int keyFrame) const",
			"body": [
				"ValueMap* Animate3D:getKeyFrameUserInfo(${1:int keyFrame})"
			],
			"description": "const ValueMap* Animate3D::getKeyFrameUserInfo(int keyFrame) const"
		},
		 "void CCBKeyframe::setEasingType(CCBKeyframe::EasingType easingType)": {
			"prefix": "void CCBKeyframe::setEasingType(CCBKeyframe::EasingType easingType)",
			"body": [
				"CCBKeyframe:setEasingType(${1:CCBKeyframe:EasingType easingType})"
			],
			"description": "void CCBKeyframe::setEasingType(CCBKeyframe::EasingType easingType)"
		},
		 "void Layout::addChild(Node * child, int localZOrder)": {
			"prefix": "void Layout::addChild(Node * child, int localZOrder)",
			"body": [
				"Layout:addChild(${1:Node * child},${2:int localZOrder})"
			],
			"description": "void Layout::addChild(Node * child, int localZOrder)"
		},
		 "void AudioEngineImpl::pause(int audioID)": {
			"prefix": "void AudioEngineImpl::pause(int audioID)",
			"body": [
				"AudioEngineImpl:pause(${1:int audioID})"
			],
			"description": "void AudioEngineImpl::pause(int audioID)"
		},
		 "void UniformValue::setFloatv(ssize_t size, const float* pointer)": {
			"prefix": "void UniformValue::setFloatv(ssize_t size, const float* pointer)",
			"body": [
				"UniformValue:setFloatv(${1:ssize_t size},${2:float* pointer})"
			],
			"description": "void UniformValue::setFloatv(ssize_t size, const float* pointer)"
		},
		 "const Texture2D::PixelFormatInfoMap& Texture2D::getPixelFormatInfoMap()": {
			"prefix": "const Texture2D::PixelFormatInfoMap& Texture2D::getPixelFormatInfoMap()",
			"body": [
				" Texture2D:PixelFormatInfoMap& Texture2D:getPixelFormatInfoMap()"
			],
			"description": "const Texture2D::PixelFormatInfoMap& Texture2D::getPixelFormatInfoMap()"
		},
		 "void FadeOutTRTiles::transformTile(const Vec2& pos, float distance)": {
			"prefix": "void FadeOutTRTiles::transformTile(const Vec2& pos, float distance)",
			"body": [
				"FadeOutTRTiles:transformTile(${1:Vec2& pos},${2:float distance})"
			],
			"description": "void FadeOutTRTiles::transformTile(const Vec2& pos, float distance)"
		},
		 "Widget* PageView::createCloneInstance()": {
			"prefix": "Widget* PageView::createCloneInstance()",
			"body": [
				"Widget* PageView:createCloneInstance()"
			],
			"description": "Widget* PageView::createCloneInstance()"
		},
		 "double Value::asDouble() const": {
			"prefix": "double Value::asDouble() const",
			"body": [
				"double Value:asDouble() "
			],
			"description": "double Value::asDouble() const"
		},
		 "RotateBy* RotateBy::create(float duration, float deltaAngleX, float deltaAngleY)": {
			"prefix": "RotateBy* RotateBy::create(float duration, float deltaAngleX, float deltaAngleY)",
			"body": [
				"RotateBy:create(${1:float duration},${2:float deltaAngleX},${3:float deltaAngleY})"
			],
			"description": "RotateBy* RotateBy::create(float duration, float deltaAngleX, float deltaAngleY)"
		},
		 "void RadioButtonGroup::copySpecialProperties(Widget *widget)": {
			"prefix": "void RadioButtonGroup::copySpecialProperties(Widget *widget)",
			"body": [
				"RadioButtonGroup:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void RadioButtonGroup::copySpecialProperties(Widget *widget)"
		},
		 "void EventDispatcher::dispatchEventToListeners(EventListenerVector* listeners, const std::function<bool(EventListener*)>& onEvent)": {
			"prefix": "void EventDispatcher::dispatchEventToListeners(EventListenerVector* listeners, const std::function<bool(EventListener*)>& onEvent)",
			"body": [
				"EventDispatcher:dispatchEventToListeners(${1:EventListenerVector* listeners},${2:std:function<bool(EventListener*})"
			],
			"description": "void EventDispatcher::dispatchEventToListeners(EventListenerVector* listeners, const std::function<bool(EventListener*)>& onEvent)"
		},
		 "void RadioButtonGroup::setSelectedButton(RadioButton* radioButton)": {
			"prefix": "void RadioButtonGroup::setSelectedButton(RadioButton* radioButton)",
			"body": [
				"RadioButtonGroup:setSelectedButton(${1:RadioButton* radioButton})"
			],
			"description": "void RadioButtonGroup::setSelectedButton(RadioButton* radioButton)"
		},
		 "bool HBox::init()": {
			"prefix": "bool HBox::init()",
			"body": [
				"bool HBox:init()"
			],
			"description": "bool HBox::init()"
		},
		 "static std::string UTF8StringToMultiByte(const std::string& strUtf8)": {
			"prefix": "static std::string UTF8StringToMultiByte(const std::string& strUtf8)",
			"body": [
				"std:string UTF8StringToMultiByte(${1:std:string& strUtf8})"
			],
			"description": "static std::string UTF8StringToMultiByte(const std::string& strUtf8)"
		},
		 "bool Physics3DRigidBody::isKinematic() const": {
			"prefix": "bool Physics3DRigidBody::isKinematic() const",
			"body": [
				"bool Physics3DRigidBody:isKinematic() "
			],
			"description": "bool Physics3DRigidBody::isKinematic() const"
		},
		 "Scene* Node::getScene() const": {
			"prefix": "Scene* Node::getScene() const",
			"body": [
				"Scene* Node:getScene() "
			],
			"description": "Scene* Node::getScene() const"
		},
		 "void RichText::formarRenderers()": {
			"prefix": "void RichText::formarRenderers()",
			"body": [
				"void RichText:formarRenderers()"
			],
			"description": "void RichText::formarRenderers()"
		},
		 "void WidgetPropertiesReader::setAnchorPointForWidget(cocos2d::ui::Widget *widget, const rapidjson::Value &options)": {
			"prefix": "void WidgetPropertiesReader::setAnchorPointForWidget(cocos2d::ui::Widget *widget, const rapidjson::Value &options)",
			"body": [
				"WidgetPropertiesReader:setAnchorPointForWidget(${1:cocos2d:ui:Widget *widget},${2:rapidjson:Value &options})"
			],
			"description": "void WidgetPropertiesReader::setAnchorPointForWidget(cocos2d::ui::Widget *widget, const rapidjson::Value &options)"
		},
		 "int Layer::executeScriptTouchHandler(EventTouch::EventCode eventType, Touch* touch, Event* event)": {
			"prefix": "int Layer::executeScriptTouchHandler(EventTouch::EventCode eventType, Touch* touch, Event* event)",
			"body": [
				"Layer:executeScriptTouchHandler(${1:EventTouch:EventCode eventType},${2:Touch* touch},${3:Event* event})"
			],
			"description": "int Layer::executeScriptTouchHandler(EventTouch::EventCode eventType, Touch* touch, Event* event)"
		},
		 "bool __NotificationCenter::observerExisted(Ref *target, const std::string& name, Ref *sender)": {
			"prefix": "bool __NotificationCenter::observerExisted(Ref *target, const std::string& name, Ref *sender)",
			"body": [
				"__NotificationCenter:observerExisted(${1:Ref *target},${2:std:string& name},${3:Ref *sender})"
			],
			"description": "bool __NotificationCenter::observerExisted(Ref *target, const std::string& name, Ref *sender)"
		},
		 "void Grabber::beforeRender(Texture2D *texture)": {
			"prefix": "void Grabber::beforeRender(Texture2D *texture)",
			"body": [
				"Grabber:beforeRender(${1:Texture2D *texture})"
			],
			"description": "void Grabber::beforeRender(Texture2D *texture)"
		},
		 "Vec2 PhysicsJointLimit::getAnchr1() const": {
			"prefix": "Vec2 PhysicsJointLimit::getAnchr1() const",
			"body": [
				"Vec2 PhysicsJointLimit:getAnchr1() "
			],
			"description": "Vec2 PhysicsJointLimit::getAnchr1() const"
		},
		 "Image* createImage(const std::string& path)": {
			"prefix": "Image* createImage(const std::string& path)",
			"body": [
				"createImage(${1:std:string& path})"
			],
			"description": "Image* createImage(const std::string& path)"
		},
		 "void Animate3D::setKeyFrameUserInfo(int keyFrame, const ValueMap &userInfo)": {
			"prefix": "void Animate3D::setKeyFrameUserInfo(int keyFrame, const ValueMap &userInfo)",
			"body": [
				"Animate3D:setKeyFrameUserInfo(${1:int keyFrame},${2:ValueMap &userInfo})"
			],
			"description": "void Animate3D::setKeyFrameUserInfo(int keyFrame, const ValueMap &userInfo)"
		},
		 "bool Properties::parseAxisAngle(const char* str, Quaternion* out)": {
			"prefix": "bool Properties::parseAxisAngle(const char* str, Quaternion* out)",
			"body": [
				"Properties:parseAxisAngle(${1:char* str},${2:Quaternion* out})"
			],
			"description": "bool Properties::parseAxisAngle(const char* str, Quaternion* out)"
		},
		 "bool VertexBuffer::updateVertices(const void* verts, int count, int begin)": {
			"prefix": "bool VertexBuffer::updateVertices(const void* verts, int count, int begin)",
			"body": [
				"VertexBuffer:updateVertices(${1:void* verts},${2:int count},${3:int begin})"
			],
			"description": "bool VertexBuffer::updateVertices(const void* verts, int count, int begin)"
		},
		 "void ArmatureAnimation::playByIndex(int animationIndex, int durationTo, int loop)": {
			"prefix": "void ArmatureAnimation::playByIndex(int animationIndex, int durationTo, int loop)",
			"body": [
				"ArmatureAnimation:playByIndex(${1:int animationIndex},${2:int durationTo},${3:int loop})"
			],
			"description": "void ArmatureAnimation::playByIndex(int animationIndex, int durationTo, int loop)"
		},
		 "void NavMeshDebugDraw::vertex(const float* pos, unsigned int color, const float* uv)": {
			"prefix": "void NavMeshDebugDraw::vertex(const float* pos, unsigned int color, const float* uv)",
			"body": [
				"NavMeshDebugDraw:vertex(${1:float* pos},${2:unsigned int color},${3:float* uv})"
			],
			"description": "void NavMeshDebugDraw::vertex(const float* pos, unsigned int color, const float* uv)"
		},
		 "bool EditBox::initWithSizeAndBackgroundSprite(const cocos2d::Size &size, cocos2d::ui::Scale9Sprite *pNormal9SpriteBg)": {
			"prefix": "bool EditBox::initWithSizeAndBackgroundSprite(const cocos2d::Size &size, cocos2d::ui::Scale9Sprite *pNormal9SpriteBg)",
			"body": [
				"EditBox:initWithSizeAndBackgroundSprite(${1:cocos2d:Size &size},${2:cocos2d:ui:Scale9Sprite *pNormal9SpriteBg})"
			],
			"description": "bool EditBox::initWithSizeAndBackgroundSprite(const cocos2d::Size &size, cocos2d::ui::Scale9Sprite *pNormal9SpriteBg)"
		},
		 "void EditBox::onEnter(void)": {
			"prefix": "void EditBox::onEnter(void)",
			"body": [
				"EditBox:onEnter(${1:void})"
			],
			"description": "void EditBox::onEnter(void)"
		},
		 "Frame* ActionTimelineCache::loadZOrderFrameWithFlatBuffers(const flatbuffers::IntFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadZOrderFrameWithFlatBuffers(const flatbuffers::IntFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadZOrderFrameWithFlatBuffers(${1:flatbuffers:IntFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadZOrderFrameWithFlatBuffers(const flatbuffers::IntFrame *flatbuffers)"
		},
		 "Node* CCBAnimationManager::getRootNode()": {
			"prefix": "Node* CCBAnimationManager::getRootNode()",
			"body": [
				"Node* CCBAnimationManager:getRootNode()"
			],
			"description": "Node* CCBAnimationManager::getRootNode()"
		},
		 "UINT MciPlayer::GetSoundID()": {
			"prefix": "UINT MciPlayer::GetSoundID()",
			"body": [
				"UINT MciPlayer:GetSoundID()"
			],
			"description": "UINT MciPlayer::GetSoundID()"
		},
		 "void Node::unscheduleUpdate()": {
			"prefix": "void Node::unscheduleUpdate()",
			"body": [
				"void Node:unscheduleUpdate()"
			],
			"description": "void Node::unscheduleUpdate()"
		},
		 "bool Technique::init(Material* parent)": {
			"prefix": "bool Technique::init(Material* parent)",
			"body": [
				"Technique:init(${1:Material* parent})"
			],
			"description": "bool Technique::init(Material* parent)"
		},
		 "Vec2 PhysicsShapeEdgeSegment::getCenter()": {
			"prefix": "Vec2 PhysicsShapeEdgeSegment::getCenter()",
			"body": [
				"Vec2 PhysicsShapeEdgeSegment:getCenter()"
			],
			"description": "Vec2 PhysicsShapeEdgeSegment::getCenter()"
		},
		 "void Shaky3D::update(float time)": {
			"prefix": "void Shaky3D::update(float time)",
			"body": [
				"Shaky3D:update(${1:float time})"
			],
			"description": "void Shaky3D::update(float time)"
		},
		 "ActionInstant* Show::reverse() const": {
			"prefix": "ActionInstant* Show::reverse() const",
			"body": [
				"ActionInstant* Show:reverse() "
			],
			"description": "ActionInstant* Show::reverse() const"
		},
		 "bool UICCTextField::getDeleteBackward()const": {
			"prefix": "bool UICCTextField::getDeleteBackward()const",
			"body": [
				"bool UICCTextField:getDeleteBackward()"
			],
			"description": "bool UICCTextField::getDeleteBackward()const"
		},
		 "void NavMesh::dtDraw()": {
			"prefix": "void NavMesh::dtDraw()",
			"body": [
				"void NavMesh:dtDraw()"
			],
			"description": "void NavMesh::dtDraw()"
		},
		 "SkewBy * SkewBy::clone() const": {
			"prefix": "SkewBy * SkewBy::clone() const",
			"body": [
				"SkewBy * SkewBy:clone() "
			],
			"description": "SkewBy * SkewBy::clone() const"
		},
		 "void Widget::setPositionType(PositionType type)": {
			"prefix": "void Widget::setPositionType(PositionType type)",
			"body": [
				"Widget:setPositionType(${1:PositionType type})"
			],
			"description": "void Widget::setPositionType(PositionType type)"
		},
		 "void WebViewImpl::loadFile(const std::string &fileName)": {
			"prefix": "void WebViewImpl::loadFile(const std::string &fileName)",
			"body": [
				"WebViewImpl:loadFile(${1:std:string &fileName})"
			],
			"description": "void WebViewImpl::loadFile(const std::string &fileName)"
		},
		 "const Mat4& AttachNode::getNodeToParentTransform() const": {
			"prefix": "const Mat4& AttachNode::getNodeToParentTransform() const",
			"body": [
				" Mat4& AttachNode:getNodeToParentTransform() "
			],
			"description": "const Mat4& AttachNode::getNodeToParentTransform() const"
		},
		 "PageView::Direction PageView::getDirection()const": {
			"prefix": "PageView::Direction PageView::getDirection()const",
			"body": [
				"PageView:Direction PageView:getDirection()"
			],
			"description": "PageView::Direction PageView::getDirection()const"
		},
		 "void Repeat::update(float dt)": {
			"prefix": "void Repeat::update(float dt)",
			"body": [
				"Repeat:update(${1:float dt})"
			],
			"description": "void Repeat::update(float dt)"
		},
		 "TransitionFlipX* TransitionFlipX::create(float t, Scene* s, Orientation o)": {
			"prefix": "TransitionFlipX* TransitionFlipX::create(float t, Scene* s, Orientation o)",
			"body": [
				"TransitionFlipX:create(${1:float t},${2:Scene* s},${3:Orientation o})"
			],
			"description": "TransitionFlipX* TransitionFlipX::create(float t, Scene* s, Orientation o)"
		},
		 "void BatchNode::addChild(cocos2d::Node *child, int zOrder, const std::string &name)": {
			"prefix": "void BatchNode::addChild(cocos2d::Node *child, int zOrder, const std::string &name)",
			"body": [
				"BatchNode:addChild(${1:cocos2d:Node *child},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void BatchNode::addChild(cocos2d::Node *child, int zOrder, const std::string &name)"
		},
		 "void ParticleSystemQuad::setDisplayFrame(SpriteFrame *spriteFrame)": {
			"prefix": "void ParticleSystemQuad::setDisplayFrame(SpriteFrame *spriteFrame)",
			"body": [
				"ParticleSystemQuad:setDisplayFrame(${1:SpriteFrame *spriteFrame})"
			],
			"description": "void ParticleSystemQuad::setDisplayFrame(SpriteFrame *spriteFrame)"
		},
		 "bool Sequence::initWithTwoActions(FiniteTimeAction *actionOne, FiniteTimeAction *actionTwo)": {
			"prefix": "bool Sequence::initWithTwoActions(FiniteTimeAction *actionOne, FiniteTimeAction *actionTwo)",
			"body": [
				"Sequence:initWithTwoActions(${1:FiniteTimeAction *actionOne},${2:FiniteTimeAction *actionTwo})"
			],
			"description": "bool Sequence::initWithTwoActions(FiniteTimeAction *actionOne, FiniteTimeAction *actionTwo)"
		},
		 "bool Node::doEnumerate(std::string name, std::function<bool (Node *)> callback) const": {
			"prefix": "bool Node::doEnumerate(std::string name, std::function<bool (Node *)> callback) const",
			"body": [
				"Node:doEnumerate(${1:std:string name},${2:std:function<bool (Node *})"
			],
			"description": "bool Node::doEnumerate(std::string name, std::function<bool (Node *)> callback) const"
		},
		 "void Animate3D::startWithTarget(Node *target)": {
			"prefix": "void Animate3D::startWithTarget(Node *target)",
			"body": [
				"Animate3D:startWithTarget(${1:Node *target})"
			],
			"description": "void Animate3D::startWithTarget(Node *target)"
		},
		 "GLubyte Layout::getBackGroundImageOpacity()const": {
			"prefix": "GLubyte Layout::getBackGroundImageOpacity()const",
			"body": [
				"GLubyte Layout:getBackGroundImageOpacity()"
			],
			"description": "GLubyte Layout::getBackGroundImageOpacity()const"
		},
		 "void PageView::doLayout()": {
			"prefix": "void PageView::doLayout()",
			"body": [
				"void PageView:doLayout()"
			],
			"description": "void PageView::doLayout()"
		},
		 "void Texture2D::convertAI88ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertAI88ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertAI88ToRGBA4444(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertAI88ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void GLProgramState::setUniformVec4(GLint uniformLocation, const Vec4& value)": {
			"prefix": "void GLProgramState::setUniformVec4(GLint uniformLocation, const Vec4& value)",
			"body": [
				"GLProgramState:setUniformVec4(${1:GLint uniformLocation},${2:Vec4& value})"
			],
			"description": "void GLProgramState::setUniformVec4(GLint uniformLocation, const Vec4& value)"
		},
		 "void ParticleSystemQuadLoader::onHandlePropTypeTexture(Node * pNode, Node * pParent, const char * pPropertyName, Texture2D * pTexture2D, CCBReader * ccbReader)": {
			"prefix": "void ParticleSystemQuadLoader::onHandlePropTypeTexture(Node * pNode, Node * pParent, const char * pPropertyName, Texture2D * pTexture2D, CCBReader * ccbReader)",
			"body": [
				"ParticleSystemQuadLoader:onHandlePropTypeTexture(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Texture2D * pTexture2D},${5:CCBReader * ccbReader})"
			],
			"description": "void ParticleSystemQuadLoader::onHandlePropTypeTexture(Node * pNode, Node * pParent, const char * pPropertyName, Texture2D * pTexture2D, CCBReader * ccbReader)"
		},
		 "GLProgram* GLProgram::createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)": {
			"prefix": "GLProgram* GLProgram::createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)",
			"body": [
				"GLProgram:createWithByteArrays(${1:GLchar* vShaderByteArray},${2:GLchar* fShaderByteArray},${3:std:string& compileTimeDefines})"
			],
			"description": "GLProgram* GLProgram::createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)"
		},
		 "void EditBoxImplAndroid::setNativePlaceholderFont(const char* pFontName, int fontSize)": {
			"prefix": "void EditBoxImplAndroid::setNativePlaceholderFont(const char* pFontName, int fontSize)",
			"body": [
				"EditBoxImplAndroid:setNativePlaceholderFont(${1:char* pFontName},${2:int fontSize})"
			],
			"description": "void EditBoxImplAndroid::setNativePlaceholderFont(const char* pFontName, int fontSize)"
		},
		 "void Renderer::initGLView()": {
			"prefix": "void Renderer::initGLView()",
			"body": [
				"void Renderer:initGLView()"
			],
			"description": "void Renderer::initGLView()"
		},
		 "void ParticleSystem::setTexture(Texture2D* var)": {
			"prefix": "void ParticleSystem::setTexture(Texture2D* var)",
			"body": [
				"ParticleSystem:setTexture(${1:Texture2D* var})"
			],
			"description": "void ParticleSystem::setTexture(Texture2D* var)"
		},
		 "void PositionFrame::onApply(float percent)": {
			"prefix": "void PositionFrame::onApply(float percent)",
			"body": [
				"PositionFrame:onApply(${1:float percent})"
			],
			"description": "void PositionFrame::onApply(float percent)"
		},
		 "bool * NodeLoader::parsePropTypeFlip(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "bool * NodeLoader::parsePropTypeFlip(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"* NodeLoader:parsePropTypeFlip(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "bool * NodeLoader::parsePropTypeFlip(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "ParticleSun* ParticleSun::create()": {
			"prefix": "ParticleSun* ParticleSun::create()",
			"body": [
				"ParticleSun* ParticleSun:create()"
			],
			"description": "ParticleSun* ParticleSun::create()"
		},
		 "int VertexBuffer::getSize() const": {
			"prefix": "int VertexBuffer::getSize() const",
			"body": [
				"int VertexBuffer:getSize() "
			],
			"description": "int VertexBuffer::getSize() const"
		},
		 "void ClippingNode::onAfterDrawStencil()": {
			"prefix": "void ClippingNode::onAfterDrawStencil()",
			"body": [
				"void ClippingNode:onAfterDrawStencil()"
			],
			"description": "void ClippingNode::onAfterDrawStencil()"
		},
		 "void NavMeshAgent::setRadius(float radius)": {
			"prefix": "void NavMeshAgent::setRadius(float radius)",
			"body": [
				"NavMeshAgent:setRadius(${1:float radius})"
			],
			"description": "void NavMeshAgent::setRadius(float radius)"
		},
		 "bool PhysicsJointRotaryLimit::createConstraints()": {
			"prefix": "bool PhysicsJointRotaryLimit::createConstraints()",
			"body": [
				"bool PhysicsJointRotaryLimit:createConstraints()"
			],
			"description": "bool PhysicsJointRotaryLimit::createConstraints()"
		},
		 "void Node::visit()": {
			"prefix": "void Node::visit()",
			"body": [
				"void Node:visit()"
			],
			"description": "void Node::visit()"
		},
		 "Offset<ProjectNodeOptions> FlatBuffersSerialize::createProjectNodeOptionsForSimulator(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<ProjectNodeOptions> FlatBuffersSerialize::createProjectNodeOptionsForSimulator(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createProjectNodeOptionsForSimulator(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<ProjectNodeOptions> FlatBuffersSerialize::createProjectNodeOptionsForSimulator(const tinyxml2::XMLElement *objectData)"
		},
		 "void Properties::setDirectoryPath(const std::string* path)": {
			"prefix": "void Properties::setDirectoryPath(const std::string* path)",
			"body": [
				"Properties:setDirectoryPath(${1:std:string* path})"
			],
			"description": "void Properties::setDirectoryPath(const std::string* path)"
		},
		 "void Waves::update(float time)": {
			"prefix": "void Waves::update(float time)",
			"body": [
				"Waves:update(${1:float time})"
			],
			"description": "void Waves::update(float time)"
		},
		 "bool ComAudio::serialize(void* r)": {
			"prefix": "bool ComAudio::serialize(void* r)",
			"body": [
				"ComAudio:serialize(${1:void* r})"
			],
			"description": "bool ComAudio::serialize(void* r)"
		},
		 "void ComponentContainer::onExit()": {
			"prefix": "void ComponentContainer::onExit()",
			"body": [
				"void ComponentContainer:onExit()"
			],
			"description": "void ComponentContainer::onExit()"
		},
		 "void ComAttribute::setString(const std::string& key, const std::string& value)": {
			"prefix": "void ComAttribute::setString(const std::string& key, const std::string& value)",
			"body": [
				"ComAttribute:setString(${1:std:string& key},${2:std:string& value})"
			],
			"description": "void ComAttribute::setString(const std::string& key, const std::string& value)"
		},
		 "void BMFontConfiguration::parseImageFileName(const char* line, const std::string& fntFile)": {
			"prefix": "void BMFontConfiguration::parseImageFileName(const char* line, const std::string& fntFile)",
			"body": [
				"BMFontConfiguration:parseImageFileName(${1:char* line},${2:std:string& fntFile})"
			],
			"description": "void BMFontConfiguration::parseImageFileName(const char* line, const std::string& fntFile)"
		},
		 "void Physics3DWorld::setGhostPairCallback()": {
			"prefix": "void Physics3DWorld::setGhostPairCallback()",
			"body": [
				"void Physics3DWorld:setGhostPairCallback()"
			],
			"description": "void Physics3DWorld::setGhostPairCallback()"
		},
		 "ScaleTo* ScaleTo::reverse() const": {
			"prefix": "ScaleTo* ScaleTo::reverse() const",
			"body": [
				"ScaleTo* ScaleTo:reverse() "
			],
			"description": "ScaleTo* ScaleTo::reverse() const"
		},
		 "void PhysicsWorldCallback::collisionPostSolveCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)": {
			"prefix": "void PhysicsWorldCallback::collisionPostSolveCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)",
			"body": [
				"PhysicsWorldCallback:collisionPostSolveCallbackFunc(${1:cpArbiter *arb},${2:cpSpace *space},${3:PhysicsWorld *world})"
			],
			"description": "void PhysicsWorldCallback::collisionPostSolveCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)"
		},
		 "void ParallaxNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void ParallaxNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"ParallaxNode:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void ParallaxNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void FileUtils::addSearchPath(const std::string &searchpath,const bool front)": {
			"prefix": "void FileUtils::addSearchPath(const std::string &searchpath,const bool front)",
			"body": [
				"FileUtils:addSearchPath(${1:std:string &searchpath},${2:bool front})"
			],
			"description": "void FileUtils::addSearchPath(const std::string &searchpath,const bool front)"
		},
		 "const cocos2d::Map<std::string, BoneNode*>& SkeletonNode::getAllSubBonesMap() const": {
			"prefix": "const cocos2d::Map<std::string, BoneNode*>& SkeletonNode::getAllSubBonesMap() const",
			"body": [
				" cocos2d:Map<std:string, BoneNode*>& SkeletonNode:getAllSubBonesMap() "
			],
			"description": "const cocos2d::Map<std::string, BoneNode*>& SkeletonNode::getAllSubBonesMap() const"
		},
		 "void Scene::onProjectionChanged(EventCustom* event)": {
			"prefix": "void Scene::onProjectionChanged(EventCustom* event)",
			"body": [
				"Scene:onProjectionChanged(${1:EventCustom* event})"
			],
			"description": "void Scene::onProjectionChanged(EventCustom* event)"
		},
		 "Animate3DQuality Animate3D::getQuality() const": {
			"prefix": "Animate3DQuality Animate3D::getQuality() const",
			"body": [
				"Animate3DQuality Animate3D:getQuality() "
			],
			"description": "Animate3DQuality Animate3D::getQuality() const"
		},
		 "bool Armature::getArmatureTransformDirty() const": {
			"prefix": "bool Armature::getArmatureTransformDirty() const",
			"body": [
				"bool Armature:getArmatureTransformDirty() "
			],
			"description": "bool Armature::getArmatureTransformDirty() const"
		},
		 "Sprite * TMXLayer::getTileAt(const Vec2& pos)": {
			"prefix": "Sprite * TMXLayer::getTileAt(const Vec2& pos)",
			"body": [
				"* TMXLayer:getTileAt(${1:Vec2& pos})"
			],
			"description": "Sprite * TMXLayer::getTileAt(const Vec2& pos)"
		},
		 "const Vec2& Widget::getTouchBeganPosition()const": {
			"prefix": "const Vec2& Widget::getTouchBeganPosition()const",
			"body": [
				" Vec2& Widget:getTouchBeganPosition()"
			],
			"description": "const Vec2& Widget::getTouchBeganPosition()const"
		},
		 "std::string FileUtils::getFullPathForDirectoryAndFilename(const std::string& directory, const std::string& filename) const": {
			"prefix": "std::string FileUtils::getFullPathForDirectoryAndFilename(const std::string& directory, const std::string& filename) const",
			"body": [
				"FileUtils:getFullPathForDirectoryAndFilename(${1:std:string& directory},${2:std:string& filename})"
			],
			"description": "std::string FileUtils::getFullPathForDirectoryAndFilename(const std::string& directory, const std::string& filename) const"
		},
		 "Node* CSLoader::createNodeFromJson(const std::string& filename)": {
			"prefix": "Node* CSLoader::createNodeFromJson(const std::string& filename)",
			"body": [
				"CSLoader:createNodeFromJson(${1:std:string& filename})"
			],
			"description": "Node* CSLoader::createNodeFromJson(const std::string& filename)"
		},
		 "void ActionTimelineNode::setActionTimeline(ActionTimeline* action)": {
			"prefix": "void ActionTimelineNode::setActionTimeline(ActionTimeline* action)",
			"body": [
				"ActionTimelineNode:setActionTimeline(${1:ActionTimeline* action})"
			],
			"description": "void ActionTimelineNode::setActionTimeline(ActionTimeline* action)"
		},
		 "void Label::disableEffect(LabelEffect effect)": {
			"prefix": "void Label::disableEffect(LabelEffect effect)",
			"body": [
				"Label:disableEffect(${1:LabelEffect effect})"
			],
			"description": "void Label::disableEffect(LabelEffect effect)"
		},
		 "void BaseTriggerCondition::removeAll()": {
			"prefix": "void BaseTriggerCondition::removeAll()",
			"body": [
				"void BaseTriggerCondition:removeAll()"
			],
			"description": "void BaseTriggerCondition::removeAll()"
		},
		 "RepeatForever *RepeatForever::clone() const": {
			"prefix": "RepeatForever *RepeatForever::clone() const",
			"body": [
				"RepeatForever *RepeatForever:clone() "
			],
			"description": "RepeatForever *RepeatForever::clone() const"
		},
		 "ColorFrame* ColorFrame::create()": {
			"prefix": "ColorFrame* ColorFrame::create()",
			"body": [
				"ColorFrame* ColorFrame:create()"
			],
			"description": "ColorFrame* ColorFrame::create()"
		},
		 "ActionInterval* TransitionSlideInL::action()": {
			"prefix": "ActionInterval* TransitionSlideInL::action()",
			"body": [
				"ActionInterval* TransitionSlideInL:action()"
			],
			"description": "ActionInterval* TransitionSlideInL::action()"
		},
		 "void PhysicsBody::update(float delta)": {
			"prefix": "void PhysicsBody::update(float delta)",
			"body": [
				"PhysicsBody:update(${1:float delta})"
			],
			"description": "void PhysicsBody::update(float delta)"
		},
		 "void NavMeshAgent::setAutoTraverseOffMeshLink(bool isAuto)": {
			"prefix": "void NavMeshAgent::setAutoTraverseOffMeshLink(bool isAuto)",
			"body": [
				"NavMeshAgent:setAutoTraverseOffMeshLink(${1:bool isAuto})"
			],
			"description": "void NavMeshAgent::setAutoTraverseOffMeshLink(bool isAuto)"
		},
		 "void GUIReader::destroyInstance()": {
			"prefix": "void GUIReader::destroyInstance()",
			"body": [
				"void GUIReader:destroyInstance()"
			],
			"description": "void GUIReader::destroyInstance()"
		},
		 "Timeline* ActionTimelineCache::loadTimeline(const rapidjson::Value& json)": {
			"prefix": "Timeline* ActionTimelineCache::loadTimeline(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadTimeline(${1:rapidjson:Value& json})"
			],
			"description": "Timeline* ActionTimelineCache::loadTimeline(const rapidjson::Value& json)"
		},
		 "std::string FileUtilsWin32::getFullPathForDirectoryAndFilename(const std::string& strDirectory, const std::string& strFilename) const": {
			"prefix": "std::string FileUtilsWin32::getFullPathForDirectoryAndFilename(const std::string& strDirectory, const std::string& strFilename) const",
			"body": [
				"FileUtilsWin32:getFullPathForDirectoryAndFilename(${1:std:string& strDirectory},${2:std:string& strFilename})"
			],
			"description": "std::string FileUtilsWin32::getFullPathForDirectoryAndFilename(const std::string& strDirectory, const std::string& strFilename) const"
		},
		 "void Pass::bind(const Mat4& modelView)": {
			"prefix": "void Pass::bind(const Mat4& modelView)",
			"body": [
				"Pass:bind(${1:Mat4& modelView})"
			],
			"description": "void Pass::bind(const Mat4& modelView)"
		},
		 "bool IMEDelegate::detachWithIME()": {
			"prefix": "bool IMEDelegate::detachWithIME()",
			"body": [
				"bool IMEDelegate:detachWithIME()"
			],
			"description": "bool IMEDelegate::detachWithIME()"
		},
		 "void CCBSoundEffect::update(float time)": {
			"prefix": "void CCBSoundEffect::update(float time)",
			"body": [
				"CCBSoundEffect:update(${1:float time})"
			],
			"description": "void CCBSoundEffect::update(float time)"
		},
		 "SpriteFrame * NodeLoader::parsePropTypeSpriteFrame(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)": {
			"prefix": "SpriteFrame * NodeLoader::parsePropTypeSpriteFrame(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)",
			"body": [
				"* NodeLoader:parsePropTypeSpriteFrame(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader},${4:char *pPropertyName})"
			],
			"description": "SpriteFrame * NodeLoader::parsePropTypeSpriteFrame(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)"
		},
		 "Vec2 ScrollView::getScrollBarPositionFromCornerForVertical() const": {
			"prefix": "Vec2 ScrollView::getScrollBarPositionFromCornerForVertical() const",
			"body": [
				"Vec2 ScrollView:getScrollBarPositionFromCornerForVertical() "
			],
			"description": "Vec2 ScrollView::getScrollBarPositionFromCornerForVertical() const"
		},
		 "void DeccelAmplitude::startWithTarget(Node *target)": {
			"prefix": "void DeccelAmplitude::startWithTarget(Node *target)",
			"body": [
				"DeccelAmplitude:startWithTarget(${1:Node *target})"
			],
			"description": "void DeccelAmplitude::startWithTarget(Node *target)"
		},
		 "void AutoreleasePool::clear()": {
			"prefix": "void AutoreleasePool::clear()",
			"body": [
				"void AutoreleasePool:clear()"
			],
			"description": "void AutoreleasePool::clear()"
		},
		 "FontCharMap * FontCharMap::create(const std::string& plistFile)": {
			"prefix": "FontCharMap * FontCharMap::create(const std::string& plistFile)",
			"body": [
				"* FontCharMap:create(${1:std:string& plistFile})"
			],
			"description": "FontCharMap * FontCharMap::create(const std::string& plistFile)"
		},
		 "EaseCubicActionInOut* EaseCubicActionInOut::create(ActionInterval* action)": {
			"prefix": "EaseCubicActionInOut* EaseCubicActionInOut::create(ActionInterval* action)",
			"body": [
				"EaseCubicActionInOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseCubicActionInOut* EaseCubicActionInOut::create(ActionInterval* action)"
		},
		 "void PageView::onEnter()": {
			"prefix": "void PageView::onEnter()",
			"body": [
				"void PageView:onEnter()"
			],
			"description": "void PageView::onEnter()"
		},
		 "void cocos2d::NavMeshAgent::onExit()": {
			"prefix": "void cocos2d::NavMeshAgent::onExit()",
			"body": [
				"void cocos2d:NavMeshAgent:onExit()"
			],
			"description": "void cocos2d::NavMeshAgent::onExit()"
		},
		 "void SpriteBatchNode::setTexture(Texture2D *texture)": {
			"prefix": "void SpriteBatchNode::setTexture(Texture2D *texture)",
			"body": [
				"SpriteBatchNode:setTexture(${1:Texture2D *texture})"
			],
			"description": "void SpriteBatchNode::setTexture(Texture2D *texture)"
		},
		 "TMXTiledMap * TMXTiledMap::create(const std::string& tmxFile)": {
			"prefix": "TMXTiledMap * TMXTiledMap::create(const std::string& tmxFile)",
			"body": [
				"* TMXTiledMap:create(${1:std:string& tmxFile})"
			],
			"description": "TMXTiledMap * TMXTiledMap::create(const std::string& tmxFile)"
		},
		 "ZOrderFrame* ZOrderFrame::create()": {
			"prefix": "ZOrderFrame* ZOrderFrame::create()",
			"body": [
				"ZOrderFrame* ZOrderFrame:create()"
			],
			"description": "ZOrderFrame* ZOrderFrame::create()"
		},
		 "void ScrollView::jumpToDestination(const Vec2 &des)": {
			"prefix": "void ScrollView::jumpToDestination(const Vec2 &des)",
			"body": [
				"ScrollView:jumpToDestination(${1:Vec2 &des})"
			],
			"description": "void ScrollView::jumpToDestination(const Vec2 &des)"
		},
		 "bool GLViewImpl::initWithFullScreen(const std::string& viewName)": {
			"prefix": "bool GLViewImpl::initWithFullScreen(const std::string& viewName)",
			"body": [
				"GLViewImpl:initWithFullScreen(${1:std:string& viewName})"
			],
			"description": "bool GLViewImpl::initWithFullScreen(const std::string& viewName)"
		},
		 "float Physics3DRigidBody::getAngularDamping() const": {
			"prefix": "float Physics3DRigidBody::getAngularDamping() const",
			"body": [
				"float Physics3DRigidBody:getAngularDamping() "
			],
			"description": "float Physics3DRigidBody::getAngularDamping() const"
		},
		 "void TransitionFlipAngular::onEnter()": {
			"prefix": "void TransitionFlipAngular::onEnter()",
			"body": [
				"void TransitionFlipAngular:onEnter()"
			],
			"description": "void TransitionFlipAngular::onEnter()"
		},
		 "int UICCTextField::getMaxLength()const": {
			"prefix": "int UICCTextField::getMaxLength()const",
			"body": [
				"int UICCTextField:getMaxLength()"
			],
			"description": "int UICCTextField::getMaxLength()const"
		},
		 "SpriteFrame* Sprite::getSpriteFrame() const": {
			"prefix": "SpriteFrame* Sprite::getSpriteFrame() const",
			"body": [
				"SpriteFrame* Sprite:getSpriteFrame() "
			],
			"description": "SpriteFrame* Sprite::getSpriteFrame() const"
		},
		 "Texture2D* SkeletonRenderer::getTexture (spMeshAttachment* attachment) const": {
			"prefix": "Texture2D* SkeletonRenderer::getTexture (spMeshAttachment* attachment) const",
			"body": [
				"SkeletonRenderer:getTexture (${1:spMeshAttachment* attachment})"
			],
			"description": "Texture2D* SkeletonRenderer::getTexture (spMeshAttachment* attachment) const"
		},
		 "void ScriptEngineManager::destroyInstance()": {
			"prefix": "void ScriptEngineManager::destroyInstance()",
			"body": [
				"void ScriptEngineManager:destroyInstance()"
			],
			"description": "void ScriptEngineManager::destroyInstance()"
		},
		 "GLubyte LayerGradient::getStartOpacity() const": {
			"prefix": "GLubyte LayerGradient::getStartOpacity() const",
			"body": [
				"GLubyte LayerGradient:getStartOpacity() "
			],
			"description": "GLubyte LayerGradient::getStartOpacity() const"
		},
		 "bool RotateTo::initWithDuration(float duration, float dstAngleX, float dstAngleY)": {
			"prefix": "bool RotateTo::initWithDuration(float duration, float dstAngleX, float dstAngleY)",
			"body": [
				"RotateTo:initWithDuration(${1:float duration},${2:float dstAngleX},${3:float dstAngleY})"
			],
			"description": "bool RotateTo::initWithDuration(float duration, float dstAngleX, float dstAngleY)"
		},
		 "void RotationFrame::onApply(float percent)": {
			"prefix": "void RotationFrame::onApply(float percent)",
			"body": [
				"RotationFrame:onApply(${1:float percent})"
			],
			"description": "void RotationFrame::onApply(float percent)"
		},
		 "void CCBReader::setAnimationManagers(CCBAnimationManagerMapPtr x)": {
			"prefix": "void CCBReader::setAnimationManagers(CCBAnimationManagerMapPtr x)",
			"body": [
				"CCBReader:setAnimationManagers(${1:CCBAnimationManagerMapPtr x})"
			],
			"description": "void CCBReader::setAnimationManagers(CCBAnimationManagerMapPtr x)"
		},
		 "void Label::setOpacityModifyRGB(bool isOpacityModifyRGB)": {
			"prefix": "void Label::setOpacityModifyRGB(bool isOpacityModifyRGB)",
			"body": [
				"Label:setOpacityModifyRGB(${1:bool isOpacityModifyRGB})"
			],
			"description": "void Label::setOpacityModifyRGB(bool isOpacityModifyRGB)"
		},
		 "CardinalSplineTo* CardinalSplineTo::clone() const": {
			"prefix": "CardinalSplineTo* CardinalSplineTo::clone() const",
			"body": [
				"CardinalSplineTo* CardinalSplineTo:clone() "
			],
			"description": "CardinalSplineTo* CardinalSplineTo::clone() const"
		},
		 "void AudioCache::readDataTask()": {
			"prefix": "void AudioCache::readDataTask()",
			"body": [
				"void AudioCache:readDataTask()"
			],
			"description": "void AudioCache::readDataTask()"
		},
		 "__Array* __Array::createWithArray(__Array* otherArray)": {
			"prefix": "__Array* __Array::createWithArray(__Array* otherArray)",
			"body": [
				"__Array:createWithArray(${1:__Array* otherArray})"
			],
			"description": "__Array* __Array::createWithArray(__Array* otherArray)"
		},
		 "CardinalSplineTo* CardinalSplineTo::reverse() const": {
			"prefix": "CardinalSplineTo* CardinalSplineTo::reverse() const",
			"body": [
				"CardinalSplineTo* CardinalSplineTo:reverse() "
			],
			"description": "CardinalSplineTo* CardinalSplineTo::reverse() const"
		},
		 "LayoutParameter* LayoutParameter::createCloneInstance()": {
			"prefix": "LayoutParameter* LayoutParameter::createCloneInstance()",
			"body": [
				"LayoutParameter* LayoutParameter:createCloneInstance()"
			],
			"description": "LayoutParameter* LayoutParameter::createCloneInstance()"
		},
		 "void Blink::startWithTarget(Node *target)": {
			"prefix": "void Blink::startWithTarget(Node *target)",
			"body": [
				"Blink:startWithTarget(${1:Node *target})"
			],
			"description": "void Blink::startWithTarget(Node *target)"
		},
		 "void SkeletonAnimation::update (float deltaTime)": {
			"prefix": "void SkeletonAnimation::update (float deltaTime)",
			"body": [
				"SkeletonAnimation:update (${1:float deltaTime})"
			],
			"description": "void SkeletonAnimation::update (float deltaTime)"
		},
		 "void HttpClient::dispatchResponseCallbacks()": {
			"prefix": "void HttpClient::dispatchResponseCallbacks()",
			"body": [
				"void HttpClient:dispatchResponseCallbacks()"
			],
			"description": "void HttpClient::dispatchResponseCallbacks()"
		},
		 "void MoveTo::startWithTarget(Node *target)": {
			"prefix": "void MoveTo::startWithTarget(Node *target)",
			"body": [
				"MoveTo:startWithTarget(${1:Node *target})"
			],
			"description": "void MoveTo::startWithTarget(Node *target)"
		},
		 "void Speed::setInnerAction(ActionInterval *action)": {
			"prefix": "void Speed::setInnerAction(ActionInterval *action)",
			"body": [
				"Speed:setInnerAction(${1:ActionInterval *action})"
			],
			"description": "void Speed::setInnerAction(ActionInterval *action)"
		},
		 "Node *DisplayManager::getDisplayRenderNode() const": {
			"prefix": "Node *DisplayManager::getDisplayRenderNode() const",
			"body": [
				"Node *DisplayManager:getDisplayRenderNode() "
			],
			"description": "Node *DisplayManager::getDisplayRenderNode() const"
		},
		 "void GLViewImpl::onGLFWMouseCallBack(GLFWwindow* window, int button, int action, int modify)": {
			"prefix": "void GLViewImpl::onGLFWMouseCallBack(GLFWwindow* window, int button, int action, int modify)",
			"body": [
				"GLViewImpl:onGLFWMouseCallBack(${1:GLFWwindow* window},${2:int button},${3:int action},${4:int modify})"
			],
			"description": "void GLViewImpl::onGLFWMouseCallBack(GLFWwindow* window, int button, int action, int modify)"
		},
		 "void EventDispatcher::setPriority(EventListener* listener, int fixedPriority)": {
			"prefix": "void EventDispatcher::setPriority(EventListener* listener, int fixedPriority)",
			"body": [
				"EventDispatcher:setPriority(${1:EventListener* listener},${2:int fixedPriority})"
			],
			"description": "void EventDispatcher::setPriority(EventListener* listener, int fixedPriority)"
		},
		 "void RadioButtonGroup::onChangedRadioButtonSelect(RadioButton* radioButton)": {
			"prefix": "void RadioButtonGroup::onChangedRadioButtonSelect(RadioButton* radioButton)",
			"body": [
				"RadioButtonGroup:onChangedRadioButtonSelect(${1:RadioButton* radioButton})"
			],
			"description": "void RadioButtonGroup::onChangedRadioButtonSelect(RadioButton* radioButton)"
		},
		 "float Vec4::dot(const Vec4& v1, const Vec4& v2)": {
			"prefix": "float Vec4::dot(const Vec4& v1, const Vec4& v2)",
			"body": [
				"Vec4:dot(${1:Vec4& v1},${2:Vec4& v2})"
			],
			"description": "float Vec4::dot(const Vec4& v1, const Vec4& v2)"
		},
		 "void Slider::setScale9Enabled(bool able)": {
			"prefix": "void Slider::setScale9Enabled(bool able)",
			"body": [
				"Slider:setScale9Enabled(${1:bool able})"
			],
			"description": "void Slider::setScale9Enabled(bool able)"
		},
		 "ActionTimeline* ActionTimelineNode::getActionTimeline()": {
			"prefix": "ActionTimeline* ActionTimelineNode::getActionTimeline()",
			"body": [
				"ActionTimeline* ActionTimelineNode:getActionTimeline()"
			],
			"description": "ActionTimeline* ActionTimelineNode::getActionTimeline()"
		},
		 "void Physics3DCollider::setRestitution(float rest)": {
			"prefix": "void Physics3DCollider::setRestitution(float rest)",
			"body": [
				"Physics3DCollider:setRestitution(${1:float rest})"
			],
			"description": "void Physics3DCollider::setRestitution(float rest)"
		},
		 "void Mat4::multiply(const Mat4& m1, const Mat4& m2, Mat4* dst)": {
			"prefix": "void Mat4::multiply(const Mat4& m1, const Mat4& m2, Mat4* dst)",
			"body": [
				"Mat4:multiply(${1:Mat4& m1},${2:Mat4& m2},${3:Mat4* dst})"
			],
			"description": "void Mat4::multiply(const Mat4& m1, const Mat4& m2, Mat4* dst)"
		},
		 "void Layout::updateBackGroundImageOpacity()": {
			"prefix": "void Layout::updateBackGroundImageOpacity()",
			"body": [
				"void Layout:updateBackGroundImageOpacity()"
			],
			"description": "void Layout::updateBackGroundImageOpacity()"
		},
		 "void BaseData::subtract(BaseData *from, BaseData *to, bool limit)": {
			"prefix": "void BaseData::subtract(BaseData *from, BaseData *to, bool limit)",
			"body": [
				"BaseData:subtract(${1:BaseData *from},${2:BaseData *to},${3:bool limit})"
			],
			"description": "void BaseData::subtract(BaseData *from, BaseData *to, bool limit)"
		},
		 "Sequence* Sequence::clone() const": {
			"prefix": "Sequence* Sequence::clone() const",
			"body": [
				"Sequence* Sequence:clone() "
			],
			"description": "Sequence* Sequence::clone() const"
		},
		 "Vec2 PhysicsBody::getVelocityAtWorldPoint(const Vec2& point)": {
			"prefix": "Vec2 PhysicsBody::getVelocityAtWorldPoint(const Vec2& point)",
			"body": [
				"PhysicsBody:getVelocityAtWorldPoint(${1:Vec2& point})"
			],
			"description": "Vec2 PhysicsBody::getVelocityAtWorldPoint(const Vec2& point)"
		},
		 "bool __Array::initWithCapacity(int capacity)": {
			"prefix": "bool __Array::initWithCapacity(int capacity)",
			"body": [
				"__Array:initWithCapacity(${1:int capacity})"
			],
			"description": "bool __Array::initWithCapacity(int capacity)"
		},
		 "Vec2 PhysicsJointGroove::getGrooveB() const": {
			"prefix": "Vec2 PhysicsJointGroove::getGrooveB() const",
			"body": [
				"Vec2 PhysicsJointGroove:getGrooveB() "
			],
			"description": "Vec2 PhysicsJointGroove::getGrooveB() const"
		},
		 "void AccelAmplitude::startWithTarget(Node *target)": {
			"prefix": "void AccelAmplitude::startWithTarget(Node *target)",
			"body": [
				"AccelAmplitude:startWithTarget(${1:Node *target})"
			],
			"description": "void AccelAmplitude::startWithTarget(Node *target)"
		},
		 "ssize_t RadioButtonGroup::getNumberOfRadioButtons() const": {
			"prefix": "ssize_t RadioButtonGroup::getNumberOfRadioButtons() const",
			"body": [
				"ssize_t RadioButtonGroup:getNumberOfRadioButtons() "
			],
			"description": "ssize_t RadioButtonGroup::getNumberOfRadioButtons() const"
		},
		 "bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root,const char* key)": {
			"prefix": "bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root,const char* key)",
			"body": [
				"DictionaryHelper:checkObjectExist_json(${1:rapidjson:Value &root},${2:char* key})"
			],
			"description": "bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root,const char* key)"
		},
		 "EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce::clone()": {
			"prefix": "EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce::clone()",
			"body": [
				"EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce:clone()"
			],
			"description": "EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce::clone()"
		},
		 "bool Image::isWebp(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::isWebp(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:isWebp(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::isWebp(const unsigned char * data, ssize_t dataLen)"
		},
		 "void PhysicsShapeCircle::updateScale()": {
			"prefix": "void PhysicsShapeCircle::updateScale()",
			"body": [
				"void PhysicsShapeCircle:updateScale()"
			],
			"description": "void PhysicsShapeCircle::updateScale()"
		},
		 "void MciPlayer::Rewind()": {
			"prefix": "void MciPlayer::Rewind()",
			"body": [
				"void MciPlayer:Rewind()"
			],
			"description": "void MciPlayer::Rewind()"
		},
		 "void GLProgram::setUniformLocationWith2iv(GLint location, GLint* ints, unsigned int numberOfArrays)": {
			"prefix": "void GLProgram::setUniformLocationWith2iv(GLint location, GLint* ints, unsigned int numberOfArrays)",
			"body": [
				"GLProgram:setUniformLocationWith2iv(${1:GLint location},${2:GLint* ints},${3:unsigned int numberOfArrays})"
			],
			"description": "void GLProgram::setUniformLocationWith2iv(GLint location, GLint* ints, unsigned int numberOfArrays)"
		},
		 "void PhysicsBody::setAngularVelocity(float velocity)": {
			"prefix": "void PhysicsBody::setAngularVelocity(float velocity)",
			"body": [
				"PhysicsBody:setAngularVelocity(${1:float velocity})"
			],
			"description": "void PhysicsBody::setAngularVelocity(float velocity)"
		},
		 "void Widget::setPositionPercent(const Vec2 &percent)": {
			"prefix": "void Widget::setPositionPercent(const Vec2 &percent)",
			"body": [
				"Widget:setPositionPercent(${1:Vec2 &percent})"
			],
			"description": "void Widget::setPositionPercent(const Vec2 &percent)"
		},
		 "const std::string& TextField::getString()const": {
			"prefix": "const std::string& TextField::getString()const",
			"body": [
				" std:string& TextField:getString()"
			],
			"description": "const std::string& TextField::getString()const"
		},
		 "void PhysicsShapePolygon::getPoints(Vec2* outPoints) const": {
			"prefix": "void PhysicsShapePolygon::getPoints(Vec2* outPoints) const",
			"body": [
				"PhysicsShapePolygon:getPoints(${1:Vec2* outPoints})"
			],
			"description": "void PhysicsShapePolygon::getPoints(Vec2* outPoints) const"
		},
		 "bool LayerGradient::initWithColor(const Color4B& start, const Color4B& end, const Vec2& v)": {
			"prefix": "bool LayerGradient::initWithColor(const Color4B& start, const Color4B& end, const Vec2& v)",
			"body": [
				"LayerGradient:initWithColor(${1:Color4B& start},${2:Color4B& end},${3:Vec2& v})"
			],
			"description": "bool LayerGradient::initWithColor(const Color4B& start, const Color4B& end, const Vec2& v)"
		},
		 "Vec2 PhysicsShapeEdgeSegment::getPointA() const": {
			"prefix": "Vec2 PhysicsShapeEdgeSegment::getPointA() const",
			"body": [
				"Vec2 PhysicsShapeEdgeSegment:getPointA() "
			],
			"description": "Vec2 PhysicsShapeEdgeSegment::getPointA() const"
		},
		 "Mesh* Mesh::create(const std::string& name, MeshIndexData* indexData, MeshSkin* skin)": {
			"prefix": "Mesh* Mesh::create(const std::string& name, MeshIndexData* indexData, MeshSkin* skin)",
			"body": [
				"Mesh:create(${1:std:string& name},${2:MeshIndexData* indexData},${3:MeshSkin* skin})"
			],
			"description": "Mesh* Mesh::create(const std::string& name, MeshIndexData* indexData, MeshSkin* skin)"
		},
		 "static int getFirstWordLen(const std::u16string& utf16Text, int startIndex, int textLen)": {
			"prefix": "static int getFirstWordLen(const std::u16string& utf16Text, int startIndex, int textLen)",
			"body": [
				"int getFirstWordLen(${1:std:u16string& utf16Text},${2:int startIndex},${3:int textLen})"
			],
			"description": "static int getFirstWordLen(const std::u16string& utf16Text, int startIndex, int textLen)"
		},
		 "std::string LabelAtlas::getDescription() const": {
			"prefix": "std::string LabelAtlas::getDescription() const",
			"body": [
				"std:string LabelAtlas:getDescription() "
			],
			"description": "std::string LabelAtlas::getDescription() const"
		},
		 "JumpBy* JumpBy::clone() const": {
			"prefix": "JumpBy* JumpBy::clone() const",
			"body": [
				"JumpBy* JumpBy:clone() "
			],
			"description": "JumpBy* JumpBy::clone() const"
		},
		 "void LoadingBar::setupTexture()": {
			"prefix": "void LoadingBar::setupTexture()",
			"body": [
				"void LoadingBar:setupTexture()"
			],
			"description": "void LoadingBar::setupTexture()"
		},
		 "Sprite3D* Sprite3D::create(const std::string& modelPath, const std::string& texturePath)": {
			"prefix": "Sprite3D* Sprite3D::create(const std::string& modelPath, const std::string& texturePath)",
			"body": [
				"Sprite3D:create(${1:std:string& modelPath},${2:std:string& texturePath})"
			],
			"description": "Sprite3D* Sprite3D::create(const std::string& modelPath, const std::string& texturePath)"
		},
		 "Sprite3DCache* Sprite3DCache::getInstance()": {
			"prefix": "Sprite3DCache* Sprite3DCache::getInstance()",
			"body": [
				"Sprite3DCache* Sprite3DCache:getInstance()"
			],
			"description": "Sprite3DCache* Sprite3DCache::getInstance()"
		},
		 "bool Sprite::initWithFile(const std::string& filename)": {
			"prefix": "bool Sprite::initWithFile(const std::string& filename)",
			"body": [
				"Sprite:initWithFile(${1:std:string& filename})"
			],
			"description": "bool Sprite::initWithFile(const std::string& filename)"
		},
		 "LanguageType Application::getCurrentLanguage()": {
			"prefix": "LanguageType Application::getCurrentLanguage()",
			"body": [
				"LanguageType Application:getCurrentLanguage()"
			],
			"description": "LanguageType Application::getCurrentLanguage()"
		},
		 "void ParticleSystem::updateWithNoTime(void)": {
			"prefix": "void ParticleSystem::updateWithNoTime(void)",
			"body": [
				"ParticleSystem:updateWithNoTime(${1:void})"
			],
			"description": "void ParticleSystem::updateWithNoTime(void)"
		},
		 "bool FileUtils::init()": {
			"prefix": "bool FileUtils::init()",
			"body": [
				"bool FileUtils:init()"
			],
			"description": "bool FileUtils::init()"
		},
		 "void GLViewImpl::onGLFWCharCallback(GLFWwindow *window, unsigned int character)": {
			"prefix": "void GLViewImpl::onGLFWCharCallback(GLFWwindow *window, unsigned int character)",
			"body": [
				"GLViewImpl:onGLFWCharCallback(${1:GLFWwindow *window},${2:unsigned int character})"
			],
			"description": "void GLViewImpl::onGLFWCharCallback(GLFWwindow *window, unsigned int character)"
		},
		 "GLProgramCache* GLProgramCache::getInstance()": {
			"prefix": "GLProgramCache* GLProgramCache::getInstance()",
			"body": [
				"GLProgramCache* GLProgramCache:getInstance()"
			],
			"description": "GLProgramCache* GLProgramCache::getInstance()"
		},
		 "void DisplayManager::changeDisplayWithName(const std::string& name, bool force)": {
			"prefix": "void DisplayManager::changeDisplayWithName(const std::string& name, bool force)",
			"body": [
				"DisplayManager:changeDisplayWithName(${1:std:string& name},${2:bool force})"
			],
			"description": "void DisplayManager::changeDisplayWithName(const std::string& name, bool force)"
		},
		 "LayerMultiplex * LayerMultiplex::createVariadic(Layer * layer, ...)": {
			"prefix": "LayerMultiplex * LayerMultiplex::createVariadic(Layer * layer, ...)",
			"body": [
				"* LayerMultiplex:createVariadic(${1:Layer * layer},${2:...})"
			],
			"description": "LayerMultiplex * LayerMultiplex::createVariadic(Layer * layer, ...)"
		},
		 "Node* ProtectedNode::getProtectedChildByTag(int tag)": {
			"prefix": "Node* ProtectedNode::getProtectedChildByTag(int tag)",
			"body": [
				"ProtectedNode:getProtectedChildByTag(${1:int tag})"
			],
			"description": "Node* ProtectedNode::getProtectedChildByTag(int tag)"
		},
		 "FadeOut* FadeOut::clone() const": {
			"prefix": "FadeOut* FadeOut::clone() const",
			"body": [
				"FadeOut* FadeOut:clone() "
			],
			"description": "FadeOut* FadeOut::clone() const"
		},
		 "void ScrollView::scrollToRight(float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToRight(float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToRight(${1:float second},${2:bool attenuated})"
			],
			"description": "void ScrollView::scrollToRight(float second, bool attenuated)"
		},
		 "float Physics3DSliderConstraint::getRestitutionDirAng() const": {
			"prefix": "float Physics3DSliderConstraint::getRestitutionDirAng() const",
			"body": [
				"float Physics3DSliderConstraint:getRestitutionDirAng() "
			],
			"description": "float Physics3DSliderConstraint::getRestitutionDirAng() const"
		},
		 "void Scheduler::unscheduleAllForTarget(void *target)": {
			"prefix": "void Scheduler::unscheduleAllForTarget(void *target)",
			"body": [
				"Scheduler:unscheduleAllForTarget(${1:void *target})"
			],
			"description": "void Scheduler::unscheduleAllForTarget(void *target)"
		},
		 "RichElementCustomNode* RichElementCustomNode::create(int tag, const Color3B &color, GLubyte opacity, cocos2d::Node *customNode)": {
			"prefix": "RichElementCustomNode* RichElementCustomNode::create(int tag, const Color3B &color, GLubyte opacity, cocos2d::Node *customNode)",
			"body": [
				"RichElementCustomNode:create(${1:int tag},${2:Color3B &color},${3:GLubyte opacity},${4:cocos2d:Node *customNode})"
			],
			"description": "RichElementCustomNode* RichElementCustomNode::create(int tag, const Color3B &color, GLubyte opacity, cocos2d::Node *customNode)"
		},
		 "FadeTo* FadeTo::clone() const": {
			"prefix": "FadeTo* FadeTo::clone() const",
			"body": [
				"FadeTo* FadeTo:clone() "
			],
			"description": "FadeTo* FadeTo::clone() const"
		},
		 "const Color4B& TextField::getPlaceHolderColor()const": {
			"prefix": "const Color4B& TextField::getPlaceHolderColor()const",
			"body": [
				" Color4B& TextField:getPlaceHolderColor()"
			],
			"description": "const Color4B& TextField::getPlaceHolderColor()const"
		},
		 "void SpriteBatchNode::increaseAtlasCapacity()": {
			"prefix": "void SpriteBatchNode::increaseAtlasCapacity()",
			"body": [
				"void SpriteBatchNode:increaseAtlasCapacity()"
			],
			"description": "void SpriteBatchNode::increaseAtlasCapacity()"
		},
		 "bool GLProgram::initWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)": {
			"prefix": "bool GLProgram::initWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)",
			"body": [
				"GLProgram:initWithByteArrays(${1:GLchar* vShaderByteArray},${2:GLchar* fShaderByteArray})"
			],
			"description": "bool GLProgram::initWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)"
		},
		 "void RenderState::StateBlock::setCullFace(bool enabled)": {
			"prefix": "void RenderState::StateBlock::setCullFace(bool enabled)",
			"body": [
				"RenderState:StateBlock:setCullFace(${1:bool enabled})"
			],
			"description": "void RenderState::StateBlock::setCullFace(bool enabled)"
		},
		 "Node* CSLoader::loadWidget(const rapidjson::Value& json)": {
			"prefix": "Node* CSLoader::loadWidget(const rapidjson::Value& json)",
			"body": [
				"CSLoader:loadWidget(${1:rapidjson:Value& json})"
			],
			"description": "Node* CSLoader::loadWidget(const rapidjson::Value& json)"
		},
		 "PageView* PageView::create()": {
			"prefix": "PageView* PageView::create()",
			"body": [
				"PageView* PageView:create()"
			],
			"description": "PageView* PageView::create()"
		},
		 "void Primitive::draw()": {
			"prefix": "void Primitive::draw()",
			"body": [
				"void Primitive:draw()"
			],
			"description": "void Primitive::draw()"
		},
		 "Node* Pass::getTarget() const": {
			"prefix": "Node* Pass::getTarget() const",
			"body": [
				"Node* Pass:getTarget() "
			],
			"description": "Node* Pass::getTarget() const"
		},
		 "void Button::initRenderer()": {
			"prefix": "void Button::initRenderer()",
			"body": [
				"void Button:initRenderer()"
			],
			"description": "void Button::initRenderer()"
		},
		 "void SpriteFrameCache::removeUnusedSpriteFrames()": {
			"prefix": "void SpriteFrameCache::removeUnusedSpriteFrames()",
			"body": [
				"void SpriteFrameCache:removeUnusedSpriteFrames()"
			],
			"description": "void SpriteFrameCache::removeUnusedSpriteFrames()"
		},
		 "void PhysicsBody::setGroup(int group)": {
			"prefix": "void PhysicsBody::setGroup(int group)",
			"body": [
				"PhysicsBody:setGroup(${1:int group})"
			],
			"description": "void PhysicsBody::setGroup(int group)"
		},
		 "void Menu::removeChild(Node* child, bool cleanup)": {
			"prefix": "void Menu::removeChild(Node* child, bool cleanup)",
			"body": [
				"Menu:removeChild(${1:Node* child},${2:bool cleanup})"
			],
			"description": "void Menu::removeChild(Node* child, bool cleanup)"
		},
		 "static std::vector<std::string> split(const std::string &s, char delim)": {
			"prefix": "static std::vector<std::string> split(const std::string &s, char delim)",
			"body": [
				"std:vector<std:string> split(${1:std:string &s},${2:char delim})"
			],
			"description": "static std::vector<std::string> split(const std::string &s, char delim)"
		},
		 "Data UserDefault::getDataForKey(const char* pKey)": {
			"prefix": "Data UserDefault::getDataForKey(const char* pKey)",
			"body": [
				"UserDefault:getDataForKey(${1:char* pKey})"
			],
			"description": "Data UserDefault::getDataForKey(const char* pKey)"
		},
		 "void PageView::copySpecialProperties(Widget *widget)": {
			"prefix": "void PageView::copySpecialProperties(Widget *widget)",
			"body": [
				"PageView:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void PageView::copySpecialProperties(Widget *widget)"
		},
		 "void PhysicsJointRotaryLimit::setMin(float min)": {
			"prefix": "void PhysicsJointRotaryLimit::setMin(float min)",
			"body": [
				"PhysicsJointRotaryLimit:setMin(${1:float min})"
			],
			"description": "void PhysicsJointRotaryLimit::setMin(float min)"
		},
		 "void Frustum::createPlane(const Camera* camera)": {
			"prefix": "void Frustum::createPlane(const Camera* camera)",
			"body": [
				"Frustum:createPlane(${1:Camera* camera})"
			],
			"description": "void Frustum::createPlane(const Camera* camera)"
		},
		 "Mat4 AttachNode::getWorldToNodeTransform() const": {
			"prefix": "Mat4 AttachNode::getWorldToNodeTransform() const",
			"body": [
				"Mat4 AttachNode:getWorldToNodeTransform() "
			],
			"description": "Mat4 AttachNode::getWorldToNodeTransform() const"
		},
		 "void __Dictionary::setObject(Ref* pObject, intptr_t key)": {
			"prefix": "void __Dictionary::setObject(Ref* pObject, intptr_t key)",
			"body": [
				"__Dictionary:setObject(${1:Ref* pObject},${2:intptr_t key})"
			],
			"description": "void __Dictionary::setObject(Ref* pObject, intptr_t key)"
		},
		 "bool ComRender::readJson(const std::string &fileName, rapidjson::Document &doc)": {
			"prefix": "bool ComRender::readJson(const std::string &fileName, rapidjson::Document &doc)",
			"body": [
				"ComRender:readJson(${1:std:string &fileName},${2:rapidjson:Document &doc})"
			],
			"description": "bool ComRender::readJson(const std::string &fileName, rapidjson::Document &doc)"
		},
		 "ReverseTime::ReverseTime() : _other(nullptr)": {
			"prefix": "ReverseTime::ReverseTime() : _other(nullptr)",
			"body": [
				"ReverseTime:ReverseTime() : _other(nullptr)"
			],
			"description": "ReverseTime::ReverseTime() : _other(nullptr)"
		},
		 "PhysicsContact* PhysicsContact::construct(PhysicsShape* a, PhysicsShape* b)": {
			"prefix": "PhysicsContact* PhysicsContact::construct(PhysicsShape* a, PhysicsShape* b)",
			"body": [
				"PhysicsContact:ruct(${1:PhysicsShape* a},${2:PhysicsShape* b})"
			],
			"description": "PhysicsContact* PhysicsContact::construct(PhysicsShape* a, PhysicsShape* b)"
		},
		 "void UniformValue::apply()": {
			"prefix": "void UniformValue::apply()",
			"body": [
				"void UniformValue:apply()"
			],
			"description": "void UniformValue::apply()"
		},
		 "void LayerGradientLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)": {
			"prefix": "void LayerGradientLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)",
			"body": [
				"LayerGradientLoader:onHandlePropTypeBlendFunc(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:BlendFunc pBlendFunc},${5:CCBReader * ccbReader})"
			],
			"description": "void LayerGradientLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)"
		},
		 "void Downloader::reportProgressInProgress(double totalToDownload, double nowDownloaded, const DownloadUnit* unit)": {
			"prefix": "void Downloader::reportProgressInProgress(double totalToDownload, double nowDownloaded, const DownloadUnit* unit)",
			"body": [
				"Downloader:reportProgressInProgress(${1:double totalToDownload},${2:double nowDownloaded},${3:DownloadUnit* unit})"
			],
			"description": "void Downloader::reportProgressInProgress(double totalToDownload, double nowDownloaded, const DownloadUnit* unit)"
		},
		 "ParticleFireworks* ParticleFireworks::create()": {
			"prefix": "ParticleFireworks* ParticleFireworks::create()",
			"body": [
				"ParticleFireworks* ParticleFireworks:create()"
			],
			"description": "ParticleFireworks* ParticleFireworks::create()"
		},
		 "int  FontFNT::getHorizontalKerningForChars(unsigned short firstChar, unsigned short secondChar) const": {
			"prefix": "int  FontFNT::getHorizontalKerningForChars(unsigned short firstChar, unsigned short secondChar) const",
			"body": [
				"FontFNT:getHorizontalKerningForChars(${1:unsigned short firstChar},${2:unsigned short secondChar})"
			],
			"description": "int  FontFNT::getHorizontalKerningForChars(unsigned short firstChar, unsigned short secondChar) const"
		},
		 "void GLProgramState::setUniformVec3v(const std::string& uniformName, ssize_t size, const Vec3* pointer)": {
			"prefix": "void GLProgramState::setUniformVec3v(const std::string& uniformName, ssize_t size, const Vec3* pointer)",
			"body": [
				"GLProgramState:setUniformVec3v(${1:std:string& uniformName},${2:ssize_t size},${3:Vec3* pointer})"
			],
			"description": "void GLProgramState::setUniformVec3v(const std::string& uniformName, ssize_t size, const Vec3* pointer)"
		},
		 "void __Array::reduceMemoryFootprint()": {
			"prefix": "void __Array::reduceMemoryFootprint()",
			"body": [
				"void __Array:reduceMemoryFootprint()"
			],
			"description": "void __Array::reduceMemoryFootprint()"
		},
		 "void __Dictionary::removeObjectForElememt(DictElement* pElement)": {
			"prefix": "void __Dictionary::removeObjectForElememt(DictElement* pElement)",
			"body": [
				"__Dictionary:removeObjectForElememt(${1:DictElement* pElement})"
			],
			"description": "void __Dictionary::removeObjectForElememt(DictElement* pElement)"
		},
		 "void TrianglesCommand::useMaterial() const": {
			"prefix": "void TrianglesCommand::useMaterial() const",
			"body": [
				"void TrianglesCommand:useMaterial() "
			],
			"description": "void TrianglesCommand::useMaterial() const"
		},
		 "void AudioEngine::setVolume(int audioID, float volume)": {
			"prefix": "void AudioEngine::setVolume(int audioID, float volume)",
			"body": [
				"AudioEngine:setVolume(${1:int audioID},${2:float volume})"
			],
			"description": "void AudioEngine::setVolume(int audioID, float volume)"
		},
		 "void Director::popScene(void)": {
			"prefix": "void Director::popScene(void)",
			"body": [
				"Director:popScene(${1:void})"
			],
			"description": "void Director::popScene(void)"
		},
		 "void Sprite::reorderChild(Node *child, int zOrder)": {
			"prefix": "void Sprite::reorderChild(Node *child, int zOrder)",
			"body": [
				"Sprite:reorderChild(${1:Node *child},${2:int zOrder})"
			],
			"description": "void Sprite::reorderChild(Node *child, int zOrder)"
		},
		 "void CameraBackgroundSkyBoxBrush::setTexture(TextureCube*  texture)": {
			"prefix": "void CameraBackgroundSkyBoxBrush::setTexture(TextureCube*  texture)",
			"body": [
				"CameraBackgroundSkyBoxBrush:setTexture(${1:TextureCube*  texture})"
			],
			"description": "void CameraBackgroundSkyBoxBrush::setTexture(TextureCube*  texture)"
		},
		 "void LayerColorLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)": {
			"prefix": "void LayerColorLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)",
			"body": [
				"LayerColorLoader:onHandlePropTypeByte(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:unsigned char pByte},${5:CCBReader * ccbReader})"
			],
			"description": "void LayerColorLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)"
		},
		 "void EventDispatcher::dispatchEvent(Event* event)": {
			"prefix": "void EventDispatcher::dispatchEvent(Event* event)",
			"body": [
				"EventDispatcher:dispatchEvent(${1:Event* event})"
			],
			"description": "void EventDispatcher::dispatchEvent(Event* event)"
		},
		 "Ripple3D* Ripple3D::create(float duration, const Size& gridSize, const Vec2& position, float radius, unsigned int waves, float amplitude)": {
			"prefix": "Ripple3D* Ripple3D::create(float duration, const Size& gridSize, const Vec2& position, float radius, unsigned int waves, float amplitude)",
			"body": [
				"Ripple3D:create(${1:float duration},${2:Size& gridSize},${3:Vec2& position},${4:float radius},${5:unsigned int waves},${6:float amplitude})"
			],
			"description": "Ripple3D* Ripple3D::create(float duration, const Size& gridSize, const Vec2& position, float radius, unsigned int waves, float amplitude)"
		},
		 "Vec2 TMXLayer::getPositionForOrthoAt(const Vec2& pos)": {
			"prefix": "Vec2 TMXLayer::getPositionForOrthoAt(const Vec2& pos)",
			"body": [
				"TMXLayer:getPositionForOrthoAt(${1:Vec2& pos})"
			],
			"description": "Vec2 TMXLayer::getPositionForOrthoAt(const Vec2& pos)"
		},
		 "bool VertexAttribBinding::init(MeshIndexData* meshIndexData, GLProgramState* glProgramState)": {
			"prefix": "bool VertexAttribBinding::init(MeshIndexData* meshIndexData, GLProgramState* glProgramState)",
			"body": [
				"VertexAttribBinding:init(${1:MeshIndexData* meshIndexData},${2:GLProgramState* glProgramState})"
			],
			"description": "bool VertexAttribBinding::init(MeshIndexData* meshIndexData, GLProgramState* glProgramState)"
		},
		 "void Physics3DSliderConstraint::setSoftnessDirLin(float softnessDirLin)": {
			"prefix": "void Physics3DSliderConstraint::setSoftnessDirLin(float softnessDirLin)",
			"body": [
				"Physics3DSliderConstraint:setSoftnessDirLin(${1:float softnessDirLin})"
			],
			"description": "void Physics3DSliderConstraint::setSoftnessDirLin(float softnessDirLin)"
		},
		 "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotInA,const cocos2d::Vec3& pivotInB, cocos2d::Vec3& axisInA, cocos2d::Vec3& axisInB, bool useReferenceFrameA)": {
			"prefix": "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotInA,const cocos2d::Vec3& pivotInB, cocos2d::Vec3& axisInA, cocos2d::Vec3& axisInB, bool useReferenceFrameA)",
			"body": [
				"Physics3DHingeConstraint:create(${1:Physics3DRigidBody* rbA},${2:Physics3DRigidBody* rbB},${3:cocos2d:Vec3& pivotInA},${4:cocos2d:Vec3& pivotInB},${5:cocos2d:Vec3& axisInA},${6:cocos2d:Vec3& axisInB},${7:bool useReferenceFrameA})"
			],
			"description": "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotInA,const cocos2d::Vec3& pivotInB, cocos2d::Vec3& axisInA, cocos2d::Vec3& axisInB, bool useReferenceFrameA)"
		},
		 "bool RotateTo::initWithDuration(float duration, const Vec3& dstAngle3D)": {
			"prefix": "bool RotateTo::initWithDuration(float duration, const Vec3& dstAngle3D)",
			"body": [
				"RotateTo:initWithDuration(${1:float duration},${2:Vec3& dstAngle3D})"
			],
			"description": "bool RotateTo::initWithDuration(float duration, const Vec3& dstAngle3D)"
		},
		 "void NotificationObserver::performSelector(Ref *sender)": {
			"prefix": "void NotificationObserver::performSelector(Ref *sender)",
			"body": [
				"NotificationObserver:performSelector(${1:Ref *sender})"
			],
			"description": "void NotificationObserver::performSelector(Ref *sender)"
		},
		 "void Physics3DHingeConstraint::setUseFrameOffset(bool frameOffsetOnOff)": {
			"prefix": "void Physics3DHingeConstraint::setUseFrameOffset(bool frameOffsetOnOff)",
			"body": [
				"Physics3DHingeConstraint:setUseFrameOffset(${1:bool frameOffsetOnOff})"
			],
			"description": "void Physics3DHingeConstraint::setUseFrameOffset(bool frameOffsetOnOff)"
		},
		 "void LinearAllocator::resize(const int cap)": {
			"prefix": "void LinearAllocator::resize(const int cap)",
			"body": [
				"LinearAllocator:resize(${1:int cap})"
			],
			"description": "void LinearAllocator::resize(const int cap)"
		},
		 "bool Node::init()": {
			"prefix": "bool Node::init()",
			"body": [
				"bool Node:init()"
			],
			"description": "bool Node::init()"
		},
		 "void Waves3D::update(float time)": {
			"prefix": "void Waves3D::update(float time)",
			"body": [
				"Waves3D:update(${1:float time})"
			],
			"description": "void Waves3D::update(float time)"
		},
		 "bool JumpTiles3D::initWithDuration(float duration, const Size& gridSize, unsigned int numberOfJumps, float amplitude)": {
			"prefix": "bool JumpTiles3D::initWithDuration(float duration, const Size& gridSize, unsigned int numberOfJumps, float amplitude)",
			"body": [
				"JumpTiles3D:initWithDuration(${1:float duration},${2:Size& gridSize},${3:unsigned int numberOfJumps},${4:float amplitude})"
			],
			"description": "bool JumpTiles3D::initWithDuration(float duration, const Size& gridSize, unsigned int numberOfJumps, float amplitude)"
		},
		 "bool TransitionFade::initWithDuration(float duration, Scene *scene, const Color3B& color)": {
			"prefix": "bool TransitionFade::initWithDuration(float duration, Scene *scene, const Color3B& color)",
			"body": [
				"TransitionFade:initWithDuration(${1:float duration},${2:Scene *scene},${3:Color3B& color})"
			],
			"description": "bool TransitionFade::initWithDuration(float duration, Scene *scene, const Color3B& color)"
		},
		 "void ParticleBatchNode::removeChildAtIndex(int index, bool doCleanup)": {
			"prefix": "void ParticleBatchNode::removeChildAtIndex(int index, bool doCleanup)",
			"body": [
				"ParticleBatchNode:removeChildAtIndex(${1:int index},${2:bool doCleanup})"
			],
			"description": "void ParticleBatchNode::removeChildAtIndex(int index, bool doCleanup)"
		},
		 "void Texture2D::convertAI88ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertAI88ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertAI88ToI8(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertAI88ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "ssize_t ScrollView::getChildrenCount() const": {
			"prefix": "ssize_t ScrollView::getChildrenCount() const",
			"body": [
				"ssize_t ScrollView:getChildrenCount() "
			],
			"description": "ssize_t ScrollView::getChildrenCount() const"
		},
		 "bool Menu::onTouchBegan(Touch* touch, Event* event)": {
			"prefix": "bool Menu::onTouchBegan(Touch* touch, Event* event)",
			"body": [
				"Menu:onTouchBegan(${1:Touch* touch},${2:Event* event})"
			],
			"description": "bool Menu::onTouchBegan(Touch* touch, Event* event)"
		},
		 "void ProgressTimer::onDraw(const Mat4 &transform, uint32_t flags)": {
			"prefix": "void ProgressTimer::onDraw(const Mat4 &transform, uint32_t flags)",
			"body": [
				"ProgressTimer:onDraw(${1:Mat4 &transform},${2:uint32_t flags})"
			],
			"description": "void ProgressTimer::onDraw(const Mat4 &transform, uint32_t flags)"
		},
		 "std::string getGameRoot()": {
			"prefix": "std::string getGameRoot()",
			"body": [
				"std:string getGameRoot()"
			],
			"description": "std::string getGameRoot()"
		},
		 "void ParticleSystem::setAutoRemoveOnFinish(bool var)": {
			"prefix": "void ParticleSystem::setAutoRemoveOnFinish(bool var)",
			"body": [
				"ParticleSystem:setAutoRemoveOnFinish(${1:bool var})"
			],
			"description": "void ParticleSystem::setAutoRemoveOnFinish(bool var)"
		},
		 "bool ScaleTo::initWithDuration(float duration, float sx, float sy)": {
			"prefix": "bool ScaleTo::initWithDuration(float duration, float sx, float sy)",
			"body": [
				"ScaleTo:initWithDuration(${1:float duration},${2:float sx},${3:float sy})"
			],
			"description": "bool ScaleTo::initWithDuration(float duration, float sx, float sy)"
		},
		 "Bone3D* Skeleton3D::getRootBone(int index) const": {
			"prefix": "Bone3D* Skeleton3D::getRootBone(int index) const",
			"body": [
				"Skeleton3D:getRootBone(${1:int index})"
			],
			"description": "Bone3D* Skeleton3D::getRootBone(int index) const"
		},
		 "void cocos2d::NavMeshObstacle::preUpdate(float delta)": {
			"prefix": "void cocos2d::NavMeshObstacle::preUpdate(float delta)",
			"body": [
				"cocos2d:NavMeshObstacle:preUpdate(${1:float delta})"
			],
			"description": "void cocos2d::NavMeshObstacle::preUpdate(float delta)"
		},
		 "void ActionRotationFrame::setRotation(float rotation)": {
			"prefix": "void ActionRotationFrame::setRotation(float rotation)",
			"body": [
				"ActionRotationFrame:setRotation(${1:float rotation})"
			],
			"description": "void ActionRotationFrame::setRotation(float rotation)"
		},
		 "SpriteBatchNode* SpriteBatchNode::createWithTexture(Texture2D* tex, ssize_t capacity/* = DEFAULT_CAPACITY*/)": {
			"prefix": "SpriteBatchNode* SpriteBatchNode::createWithTexture(Texture2D* tex, ssize_t capacity/* = DEFAULT_CAPACITY*/)",
			"body": [
				"SpriteBatchNode:createWithTexture(${1:Texture2D* tex},${2:ssize_t capacity/* = DEFAULT_CAPACITY*/})"
			],
			"description": "SpriteBatchNode* SpriteBatchNode::createWithTexture(Texture2D* tex, ssize_t capacity/* = DEFAULT_CAPACITY*/)"
		},
		 "void TimerTargetSelector::trigger(float dt)": {
			"prefix": "void TimerTargetSelector::trigger(float dt)",
			"body": [
				"TimerTargetSelector:trigger(${1:float dt})"
			],
			"description": "void TimerTargetSelector::trigger(float dt)"
		},
		 "Frame* ActionTimelineCache::loadScaleFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadScaleFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadScaleFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadScaleFrame(const rapidjson::Value& json)"
		},
		 "Vec2 TMXLayer::getPositionForStaggeredAt(const Vec2 &pos)": {
			"prefix": "Vec2 TMXLayer::getPositionForStaggeredAt(const Vec2 &pos)",
			"body": [
				"TMXLayer:getPositionForStaggeredAt(${1:Vec2 &pos})"
			],
			"description": "Vec2 TMXLayer::getPositionForStaggeredAt(const Vec2 &pos)"
		},
		 "flatbuffers::Offset<flatbuffers::EasingData> FlatBuffersSerialize::createEasingData(const tinyxml2::XMLElement *objectData)": {
			"prefix": "flatbuffers::Offset<flatbuffers::EasingData> FlatBuffersSerialize::createEasingData(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createEasingData(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "flatbuffers::Offset<flatbuffers::EasingData> FlatBuffersSerialize::createEasingData(const tinyxml2::XMLElement *objectData)"
		},
		 "void Mat4::translate(float x, float y, float z, Mat4* dst) const": {
			"prefix": "void Mat4::translate(float x, float y, float z, Mat4* dst) const",
			"body": [
				"Mat4:translate(${1:float x},${2:float y},${3:float z},${4:Mat4* dst})"
			],
			"description": "void Mat4::translate(float x, float y, float z, Mat4* dst) const"
		},
		 "char* BundleReader::readLine(int num,char* line)": {
			"prefix": "char* BundleReader::readLine(int num,char* line)",
			"body": [
				"BundleReader:readLine(${1:int num},${2:char* line})"
			],
			"description": "char* BundleReader::readLine(int num,char* line)"
		},
		 "void FrameBuffer::applyFBO()": {
			"prefix": "void FrameBuffer::applyFBO()",
			"body": [
				"void FrameBuffer:applyFBO()"
			],
			"description": "void FrameBuffer::applyFBO()"
		},
		 "void ParticleSystem::setGravity(const Vec2& g)": {
			"prefix": "void ParticleSystem::setGravity(const Vec2& g)",
			"body": [
				"ParticleSystem:setGravity(${1:Vec2& g})"
			],
			"description": "void ParticleSystem::setGravity(const Vec2& g)"
		},
		 "void AudioEngine::resumeAll()": {
			"prefix": "void AudioEngine::resumeAll()",
			"body": [
				"void AudioEngine:resumeAll()"
			],
			"description": "void AudioEngine::resumeAll()"
		},
		 "void FadeTo::update(float time)": {
			"prefix": "void FadeTo::update(float time)",
			"body": [
				"FadeTo:update(${1:float time})"
			],
			"description": "void FadeTo::update(float time)"
		},
		 "ScaleBy* ScaleBy::create(float duration, float sx, float sy, float sz)": {
			"prefix": "ScaleBy* ScaleBy::create(float duration, float sx, float sy, float sz)",
			"body": [
				"ScaleBy:create(${1:float duration},${2:float sx},${3:float sy},${4:float sz})"
			],
			"description": "ScaleBy* ScaleBy::create(float duration, float sx, float sy, float sz)"
		},
		 "bool FileUtils::renameFile(const std::string &oldfullpath, const std::string& newfullpath)": {
			"prefix": "bool FileUtils::renameFile(const std::string &oldfullpath, const std::string& newfullpath)",
			"body": [
				"FileUtils:renameFile(${1:std:string &oldfullpath},${2:std:string& newfullpath})"
			],
			"description": "bool FileUtils::renameFile(const std::string &oldfullpath, const std::string& newfullpath)"
		},
		 "void MeshCommand::releaseVAO()": {
			"prefix": "void MeshCommand::releaseVAO()",
			"body": [
				"void MeshCommand:releaseVAO()"
			],
			"description": "void MeshCommand::releaseVAO()"
		},
		 "bool TMXMapInfo::parseXMLFile(const std::string& xmlFilename)": {
			"prefix": "bool TMXMapInfo::parseXMLFile(const std::string& xmlFilename)",
			"body": [
				"TMXMapInfo:parseXMLFile(${1:std:string& xmlFilename})"
			],
			"description": "bool TMXMapInfo::parseXMLFile(const std::string& xmlFilename)"
		},
		 "unsigned char AutoPolygon::getAlphaByPos(const Vec2& pos)": {
			"prefix": "unsigned char AutoPolygon::getAlphaByPos(const Vec2& pos)",
			"body": [
				"char AutoPolygon:getAlphaByPos(${1:Vec2& pos})"
			],
			"description": "unsigned char AutoPolygon::getAlphaByPos(const Vec2& pos)"
		},
		 "bool Image::isEtc(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::isEtc(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:isEtc(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::isEtc(const unsigned char * data, ssize_t dataLen)"
		},
		 "std::string CCBReader::lastPathComponent(const char* pPath)": {
			"prefix": "std::string CCBReader::lastPathComponent(const char* pPath)",
			"body": [
				"CCBReader:lastPathComponent(${1:char* pPath})"
			],
			"description": "std::string CCBReader::lastPathComponent(const char* pPath)"
		},
		 "void Node::stopAllActions()": {
			"prefix": "void Node::stopAllActions()",
			"body": [
				"void Node:stopAllActions()"
			],
			"description": "void Node::stopAllActions()"
		},
		 "PhysicsShapeCircle* PhysicsShapeCircle::create(float radius, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)": {
			"prefix": "PhysicsShapeCircle* PhysicsShapeCircle::create(float radius, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)",
			"body": [
				"PhysicsShapeCircle:create(${1:float radius},${2:PhysicsMaterial& material/* = MaterialDefault*/},${3:Vec2& offset/* = Vec2(0},${4:0})"
			],
			"description": "PhysicsShapeCircle* PhysicsShapeCircle::create(float radius, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)"
		},
		 "Node* CCBFile::getCCBFileNode()": {
			"prefix": "Node* CCBFile::getCCBFileNode()",
			"body": [
				"Node* CCBFile:getCCBFileNode()"
			],
			"description": "Node* CCBFile::getCCBFileNode()"
		},
		 "void SkewFrame::onApply(float percent)": {
			"prefix": "void SkewFrame::onApply(float percent)",
			"body": [
				"SkewFrame:onApply(${1:float percent})"
			],
			"description": "void SkewFrame::onApply(float percent)"
		},
		 "void Sprite::setRotation(float rotation)": {
			"prefix": "void Sprite::setRotation(float rotation)",
			"body": [
				"Sprite:setRotation(${1:float rotation})"
			],
			"description": "void Sprite::setRotation(float rotation)"
		},
		 "void AndroidJavaEngine::preloadBackgroundMusic(const char* filePath)": {
			"prefix": "void AndroidJavaEngine::preloadBackgroundMusic(const char* filePath)",
			"body": [
				"AndroidJavaEngine:preloadBackgroundMusic(${1:char* filePath})"
			],
			"description": "void AndroidJavaEngine::preloadBackgroundMusic(const char* filePath)"
		},
		 "void GLProgramStateCache::removeAllGLProgramState()": {
			"prefix": "void GLProgramStateCache::removeAllGLProgramState()",
			"body": [
				"void GLProgramStateCache:removeAllGLProgramState()"
			],
			"description": "void GLProgramStateCache::removeAllGLProgramState()"
		},
		 "void BoneNode::setDebugDrawColor(const cocos2d::Color4F &color)": {
			"prefix": "void BoneNode::setDebugDrawColor(const cocos2d::Color4F &color)",
			"body": [
				"BoneNode:setDebugDrawColor(${1:cocos2d:Color4F &color})"
			],
			"description": "void BoneNode::setDebugDrawColor(const cocos2d::Color4F &color)"
		},
		 "void EditBox::setVisible(bool visible)": {
			"prefix": "void EditBox::setVisible(bool visible)",
			"body": [
				"EditBox:setVisible(${1:bool visible})"
			],
			"description": "void EditBox::setVisible(bool visible)"
		},
		 "void Label::updateQuads()": {
			"prefix": "void Label::updateQuads()",
			"body": [
				"void Label:updateQuads()"
			],
			"description": "void Label::updateQuads()"
		},
		 "const Rect& Button::getCapInsetsDisabledRenderer()const": {
			"prefix": "const Rect& Button::getCapInsetsDisabledRenderer()const",
			"body": [
				" Rect& Button:getCapInsetsDisabledRenderer()"
			],
			"description": "const Rect& Button::getCapInsetsDisabledRenderer()const"
		},
		 "void EventDispatcher::resumeEventListenersForTarget(Node* target, bool recursive/* = false */)": {
			"prefix": "void EventDispatcher::resumeEventListenersForTarget(Node* target, bool recursive/* = false */)",
			"body": [
				"EventDispatcher:resumeEventListenersForTarget(${1:Node* target},${2:bool recursive/* = false */})"
			],
			"description": "void EventDispatcher::resumeEventListenersForTarget(Node* target, bool recursive/* = false */)"
		},
		 "float MotionStreak::getPositionX() const": {
			"prefix": "float MotionStreak::getPositionX() const",
			"body": [
				"float MotionStreak:getPositionX() "
			],
			"description": "float MotionStreak::getPositionX() const"
		},
		 "void ActionInstant::step(float dt)": {
			"prefix": "void ActionInstant::step(float dt)",
			"body": [
				"ActionInstant:step(${1:float dt})"
			],
			"description": "void ActionInstant::step(float dt)"
		},
		 "void EaseElasticOut::update(float time)": {
			"prefix": "void EaseElasticOut::update(float time)",
			"body": [
				"EaseElasticOut:update(${1:float time})"
			],
			"description": "void EaseElasticOut::update(float time)"
		},
		 "void CCBAnimationManager::addDocumentOutletNode(Node *node)": {
			"prefix": "void CCBAnimationManager::addDocumentOutletNode(Node *node)",
			"body": [
				"CCBAnimationManager:addDocumentOutletNode(${1:Node *node})"
			],
			"description": "void CCBAnimationManager::addDocumentOutletNode(Node *node)"
		},
		 "void Sprite::removeAllChildrenWithCleanup(bool cleanup)": {
			"prefix": "void Sprite::removeAllChildrenWithCleanup(bool cleanup)",
			"body": [
				"Sprite:removeAllChildrenWithCleanup(${1:bool cleanup})"
			],
			"description": "void Sprite::removeAllChildrenWithCleanup(bool cleanup)"
		},
		 "PolygonInfo Sprite::getPolygonInfo() const": {
			"prefix": "PolygonInfo Sprite::getPolygonInfo() const",
			"body": [
				"PolygonInfo Sprite:getPolygonInfo() "
			],
			"description": "PolygonInfo Sprite::getPolygonInfo() const"
		},
		 "void AbstractCheckButton::setSelected(bool selected)": {
			"prefix": "void AbstractCheckButton::setSelected(bool selected)",
			"body": [
				"AbstractCheckButton:setSelected(${1:bool selected})"
			],
			"description": "void AbstractCheckButton::setSelected(bool selected)"
		},
		 "Widget* TextBMFont::createCloneInstance()": {
			"prefix": "Widget* TextBMFont::createCloneInstance()",
			"body": [
				"Widget* TextBMFont:createCloneInstance()"
			],
			"description": "Widget* TextBMFont::createCloneInstance()"
		},
		 "bool BoneData::init()": {
			"prefix": "bool BoneData::init()",
			"body": [
				"bool BoneData:init()"
			],
			"description": "bool BoneData::init()"
		},
		 "RemoveSelf * RemoveSelf::create(bool isNeedCleanUp /*= true*/)": {
			"prefix": "RemoveSelf * RemoveSelf::create(bool isNeedCleanUp /*= true*/)",
			"body": [
				"* RemoveSelf:create(${1:bool isNeedCleanUp /*= true*/})"
			],
			"description": "RemoveSelf * RemoveSelf::create(bool isNeedCleanUp /*= true*/)"
		},
		 "void CCBAnimationManager::addDocumentCallbackName(std::string name)": {
			"prefix": "void CCBAnimationManager::addDocumentCallbackName(std::string name)",
			"body": [
				"CCBAnimationManager:addDocumentCallbackName(${1:std:string name})"
			],
			"description": "void CCBAnimationManager::addDocumentCallbackName(std::string name)"
		},
		 "Size Layout::getLayoutContentSize()const": {
			"prefix": "Size Layout::getLayoutContentSize()const",
			"body": [
				"Size Layout:getLayoutContentSize()"
			],
			"description": "Size Layout::getLayoutContentSize()const"
		},
		 "ssize_t ListView::getCurSelectedIndex() const": {
			"prefix": "ssize_t ListView::getCurSelectedIndex() const",
			"body": [
				"ssize_t ListView:getCurSelectedIndex() "
			],
			"description": "ssize_t ListView::getCurSelectedIndex() const"
		},
		 "void Scheduler::unschedule(SEL_SCHEDULE selector, Ref *target)": {
			"prefix": "void Scheduler::unschedule(SEL_SCHEDULE selector, Ref *target)",
			"body": [
				"Scheduler:unschedule(${1:SEL_SCHEDULE selector},${2:Ref *target})"
			],
			"description": "void Scheduler::unschedule(SEL_SCHEDULE selector, Ref *target)"
		},
		 "void ProtectedNode::updateDisplayedColor(const Color3B& parentColor)": {
			"prefix": "void ProtectedNode::updateDisplayedColor(const Color3B& parentColor)",
			"body": [
				"ProtectedNode:updateDisplayedColor(${1:Color3B& parentColor})"
			],
			"description": "void ProtectedNode::updateDisplayedColor(const Color3B& parentColor)"
		},
		 "bool Skin::initWithSpriteFrameName(const std::string& spriteFrameName)": {
			"prefix": "bool Skin::initWithSpriteFrameName(const std::string& spriteFrameName)",
			"body": [
				"Skin:initWithSpriteFrameName(${1:std:string& spriteFrameName})"
			],
			"description": "bool Skin::initWithSpriteFrameName(const std::string& spriteFrameName)"
		},
		 "void Armature::onEnter()": {
			"prefix": "void Armature::onEnter()",
			"body": [
				"void Armature:onEnter()"
			],
			"description": "void Armature::onEnter()"
		},
		 "Size::Size(const Size& other) : width(other.width), height(other.height)": {
			"prefix": "Size::Size(const Size& other) : width(other.width), height(other.height)",
			"body": [
				"other})"
			],
			"description": "Size::Size(const Size& other) : width(other.width), height(other.height)"
		},
		 "void EaseElasticInOut::update(float time)": {
			"prefix": "void EaseElasticInOut::update(float time)",
			"body": [
				"EaseElasticInOut:update(${1:float time})"
			],
			"description": "void EaseElasticInOut::update(float time)"
		},
		 "void UniformValue::setVec2(const Vec2& value)": {
			"prefix": "void UniformValue::setVec2(const Vec2& value)",
			"body": [
				"UniformValue:setVec2(${1:Vec2& value})"
			],
			"description": "void UniformValue::setVec2(const Vec2& value)"
		},
		 "std::string ZipFile::getFirstFilename()": {
			"prefix": "std::string ZipFile::getFirstFilename()",
			"body": [
				"std:string ZipFile:getFirstFilename()"
			],
			"description": "std::string ZipFile::getFirstFilename()"
		},
		 "bool DictionaryHelper::getBooleanValue_json(const rapidjson::Value& root,const char* key, bool def)": {
			"prefix": "bool DictionaryHelper::getBooleanValue_json(const rapidjson::Value& root,const char* key, bool def)",
			"body": [
				"DictionaryHelper:getBooleanValue_json(${1:rapidjson:Value& root},${2:char* key},${3:bool def})"
			],
			"description": "bool DictionaryHelper::getBooleanValue_json(const rapidjson::Value& root,const char* key, bool def)"
		},
		 "void Physics3DComponent::setEnabled(bool b)": {
			"prefix": "void Physics3DComponent::setEnabled(bool b)",
			"body": [
				"Physics3DComponent:setEnabled(${1:bool b})"
			],
			"description": "void Physics3DComponent::setEnabled(bool b)"
		},
		 "PhysicsJointSpring* PhysicsJointSpring::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2, float stiffness, float damping)": {
			"prefix": "PhysicsJointSpring* PhysicsJointSpring::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2, float stiffness, float damping)",
			"body": [
				"PhysicsJointSpring:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:Vec2& anchr1},${4:Vec2& anchr2},${5:float stiffness},${6:float damping})"
			],
			"description": "PhysicsJointSpring* PhysicsJointSpring::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2, float stiffness, float damping)"
		},
		 "bool Profiler::init()": {
			"prefix": "bool Profiler::init()",
			"body": [
				"bool Profiler:init()"
			],
			"description": "bool Profiler::init()"
		},
		 "SkeletonRenderer::~SkeletonRenderer ()": {
			"prefix": "SkeletonRenderer::~SkeletonRenderer ()",
			"body": [
				"SkeletonRenderer:~SkeletonRenderer ()"
			],
			"description": "SkeletonRenderer::~SkeletonRenderer ()"
		},
		 "void AudioEngineImpl::stopAll()": {
			"prefix": "void AudioEngineImpl::stopAll()",
			"body": [
				"void AudioEngineImpl:stopAll()"
			],
			"description": "void AudioEngineImpl::stopAll()"
		},
		 "Vec2 PhysicsShapePolygon::getCenter()": {
			"prefix": "Vec2 PhysicsShapePolygon::getCenter()",
			"body": [
				"Vec2 PhysicsShapePolygon:getCenter()"
			],
			"description": "Vec2 PhysicsShapePolygon::getCenter()"
		},
		 "bool Sprite::isFlippedY(void) const": {
			"prefix": "bool Sprite::isFlippedY(void) const",
			"body": [
				"Sprite:isFlippedY(${1:void})"
			],
			"description": "bool Sprite::isFlippedY(void) const"
		},
		 "void EventFrame::setNode(cocos2d::Node* node)": {
			"prefix": "void EventFrame::setNode(cocos2d::Node* node)",
			"body": [
				"EventFrame:setNode(${1:cocos2d:Node* node})"
			],
			"description": "void EventFrame::setNode(cocos2d::Node* node)"
		},
		 "void Layout::copySpecialProperties(Widget *widget)": {
			"prefix": "void Layout::copySpecialProperties(Widget *widget)",
			"body": [
				"Layout:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void Layout::copySpecialProperties(Widget *widget)"
		},
		 "void DrawNode::drawCatmullRom(PointArray *points, unsigned int segments, const Color4F &color)": {
			"prefix": "void DrawNode::drawCatmullRom(PointArray *points, unsigned int segments, const Color4F &color)",
			"body": [
				"DrawNode:drawCatmullRom(${1:PointArray *points},${2:unsigned int segments},${3:Color4F &color})"
			],
			"description": "void DrawNode::drawCatmullRom(PointArray *points, unsigned int segments, const Color4F &color)"
		},
		 "SkeletonRenderer* SkeletonRenderer::createWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)": {
			"prefix": "SkeletonRenderer* SkeletonRenderer::createWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)",
			"body": [
				"SkeletonRenderer:createWithData (${1:spSkeletonData* skeletonData},${2:bool ownsSkeletonData})"
			],
			"description": "SkeletonRenderer* SkeletonRenderer::createWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)"
		},
		 "void MciPlayer::Play(UINT uTimes /* = 1 */)": {
			"prefix": "void MciPlayer::Play(UINT uTimes /* = 1 */)",
			"body": [
				"MciPlayer:Play(${1:UINT uTimes /* = 1 */})"
			],
			"description": "void MciPlayer::Play(UINT uTimes /* = 1 */)"
		},
		 "void Physics3DWorld::setGravity(const Vec3& gravity)": {
			"prefix": "void Physics3DWorld::setGravity(const Vec3& gravity)",
			"body": [
				"Physics3DWorld:setGravity(${1:Vec3& gravity})"
			],
			"description": "void Physics3DWorld::setGravity(const Vec3& gravity)"
		},
		 "void Physics3DSliderConstraint::setDampingDirLin(float dampingDirLin)": {
			"prefix": "void Physics3DSliderConstraint::setDampingDirLin(float dampingDirLin)",
			"body": [
				"Physics3DSliderConstraint:setDampingDirLin(${1:float dampingDirLin})"
			],
			"description": "void Physics3DSliderConstraint::setDampingDirLin(float dampingDirLin)"
		},
		 "bool EventListenerController::checkAvailable()": {
			"prefix": "bool EventListenerController::checkAvailable()",
			"body": [
				"bool EventListenerController:checkAvailable()"
			],
			"description": "bool EventListenerController::checkAvailable()"
		},
		 "bool RenderTexture::saveToFile(const std::string& filename, bool isRGBA, std::function<void (RenderTexture*, const std::string&)> callback)": {
			"prefix": "bool RenderTexture::saveToFile(const std::string& filename, bool isRGBA, std::function<void (RenderTexture*, const std::string&)> callback)",
			"body": [
				"RenderTexture:saveToFile(${1:std:string& filename},${2:bool isRGBA},${3:std:function<void (RenderTexture*},${4:std:string&})"
			],
			"description": "bool RenderTexture::saveToFile(const std::string& filename, bool isRGBA, std::function<void (RenderTexture*, const std::string&)> callback)"
		},
		 "Sprite* Sprite::create()": {
			"prefix": "Sprite* Sprite::create()",
			"body": [
				"Sprite* Sprite:create()"
			],
			"description": "Sprite* Sprite::create()"
		},
		 "ActionObject* ActionManagerEx::playActionByName(const char* jsonName,const char* actionName, CallFunc* func)": {
			"prefix": "ActionObject* ActionManagerEx::playActionByName(const char* jsonName,const char* actionName, CallFunc* func)",
			"body": [
				"ActionManagerEx:playActionByName(${1:char* jsonName},${2:char* actionName},${3:CallFunc* func})"
			],
			"description": "ActionObject* ActionManagerEx::playActionByName(const char* jsonName,const char* actionName, CallFunc* func)"
		},
		 "ParticleFire* ParticleFire::create()": {
			"prefix": "ParticleFire* ParticleFire::create()",
			"body": [
				"ParticleFire* ParticleFire:create()"
			],
			"description": "ParticleFire* ParticleFire::create()"
		},
		 "void Device::setAccelerometerEnabled(bool isEnabled)": {
			"prefix": "void Device::setAccelerometerEnabled(bool isEnabled)",
			"body": [
				"Device:setAccelerometerEnabled(${1:bool isEnabled})"
			],
			"description": "void Device::setAccelerometerEnabled(bool isEnabled)"
		},
		 "void MotionStreak::onDraw(const Mat4 &transform, uint32_t flags)": {
			"prefix": "void MotionStreak::onDraw(const Mat4 &transform, uint32_t flags)",
			"body": [
				"MotionStreak:onDraw(${1:Mat4 &transform},${2:uint32_t flags})"
			],
			"description": "void MotionStreak::onDraw(const Mat4 &transform, uint32_t flags)"
		},
		 "FadeTo* FadeIn::reverse() const": {
			"prefix": "FadeTo* FadeIn::reverse() const",
			"body": [
				"FadeTo* FadeIn:reverse() "
			],
			"description": "FadeTo* FadeIn::reverse() const"
		},
		 "const char* __String::getCString() const": {
			"prefix": "const char* __String::getCString() const",
			"body": [
				" char* __String:getCString() "
			],
			"description": "const char* __String::getCString() const"
		},
		 "int TMXLayer::getVertexZForPos(const Vec2& pos)": {
			"prefix": "int TMXLayer::getVertexZForPos(const Vec2& pos)",
			"body": [
				"TMXLayer:getVertexZForPos(${1:Vec2& pos})"
			],
			"description": "int TMXLayer::getVertexZForPos(const Vec2& pos)"
		},
		 "void FlipX::update(float time)": {
			"prefix": "void FlipX::update(float time)",
			"body": [
				"FlipX:update(${1:float time})"
			],
			"description": "void FlipX::update(float time)"
		},
		 "const char* TextField::getPasswordStyleText()const": {
			"prefix": "const char* TextField::getPasswordStyleText()const",
			"body": [
				" char* TextField:getPasswordStyleText()"
			],
			"description": "const char* TextField::getPasswordStyleText()const"
		},
		 "DeccelAmplitude* DeccelAmplitude::create(Action *action, float duration)": {
			"prefix": "DeccelAmplitude* DeccelAmplitude::create(Action *action, float duration)",
			"body": [
				"DeccelAmplitude:create(${1:Action *action},${2:float duration})"
			],
			"description": "DeccelAmplitude* DeccelAmplitude::create(Action *action, float duration)"
		},
		 "void Node::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)": {
			"prefix": "void Node::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)",
			"body": [
				"Node:setCascadeOpacityEnabled(${1:bool cascadeOpacityEnabled})"
			],
			"description": "void Node::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)"
		},
		 "void Physics3DWorld::addPhysics3DObject(Physics3DObject* physicsObj)": {
			"prefix": "void Physics3DWorld::addPhysics3DObject(Physics3DObject* physicsObj)",
			"body": [
				"Physics3DWorld:addPhysics3DObject(${1:Physics3DObject* physicsObj})"
			],
			"description": "void Physics3DWorld::addPhysics3DObject(Physics3DObject* physicsObj)"
		},
		 "MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, const ccMenuCallback& callback)": {
			"prefix": "MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, const ccMenuCallback& callback)",
			"body": [
				"* MenuItemAtlasFont:create(${1:std:string& value},${2:std:string& charMapFile},${3:int itemWidth},${4:int itemHeight},${5:char startCharMap},${6:ccMenuCallback& callback})"
			],
			"description": "MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, const ccMenuCallback& callback)"
		},
		 "void Menu::alignItemsInRows(int rows, va_list args)": {
			"prefix": "void Menu::alignItemsInRows(int rows, va_list args)",
			"body": [
				"Menu:alignItemsInRows(${1:int rows},${2:va_list args})"
			],
			"description": "void Menu::alignItemsInRows(int rows, va_list args)"
		},
		 "void cocos2d::NavMeshAgent::removeFrom(dtCrowd *crowed)": {
			"prefix": "void cocos2d::NavMeshAgent::removeFrom(dtCrowd *crowed)",
			"body": [
				"cocos2d:NavMeshAgent:removeFrom(${1:dtCrowd *crowed})"
			],
			"description": "void cocos2d::NavMeshAgent::removeFrom(dtCrowd *crowed)"
		},
		 "bool BoneNode::isPointOnRack(const cocos2d::Vec2& bonePoint)": {
			"prefix": "bool BoneNode::isPointOnRack(const cocos2d::Vec2& bonePoint)",
			"body": [
				"BoneNode:isPointOnRack(${1:cocos2d:Vec2& bonePoint})"
			],
			"description": "bool BoneNode::isPointOnRack(const cocos2d::Vec2& bonePoint)"
		},
		 "void Sprite::setDirtyRecursively(bool bValue)": {
			"prefix": "void Sprite::setDirtyRecursively(bool bValue)",
			"body": [
				"Sprite:setDirtyRecursively(${1:bool bValue})"
			],
			"description": "void Sprite::setDirtyRecursively(bool bValue)"
		},
		 "void AnimationData::addMovement(MovementData *movData)": {
			"prefix": "void AnimationData::addMovement(MovementData *movData)",
			"body": [
				"AnimationData:addMovement(${1:MovementData *movData})"
			],
			"description": "void AnimationData::addMovement(MovementData *movData)"
		},
		 "void TargetedAction::stop()": {
			"prefix": "void TargetedAction::stop()",
			"body": [
				"void TargetedAction:stop()"
			],
			"description": "void TargetedAction::stop()"
		},
		 "void PhysicsShape::setMass(float mass)": {
			"prefix": "void PhysicsShape::setMass(float mass)",
			"body": [
				"PhysicsShape:setMass(${1:float mass})"
			],
			"description": "void PhysicsShape::setMass(float mass)"
		},
		 "void Layout::setBackGroundImage(const std::string& fileName,TextureResType texType)": {
			"prefix": "void Layout::setBackGroundImage(const std::string& fileName,TextureResType texType)",
			"body": [
				"Layout:setBackGroundImage(${1:std:string& fileName},${2:TextureResType texType})"
			],
			"description": "void Layout::setBackGroundImage(const std::string& fileName,TextureResType texType)"
		},
		 "void SimpleAudioEngine::preloadBackgroundMusic(const char* pszFilePath)": {
			"prefix": "void SimpleAudioEngine::preloadBackgroundMusic(const char* pszFilePath)",
			"body": [
				"SimpleAudioEngine:preloadBackgroundMusic(${1:char* pszFilePath})"
			],
			"description": "void SimpleAudioEngine::preloadBackgroundMusic(const char* pszFilePath)"
		},
		 "SkeletonNode* BoneNode::getRootSkeletonNode() const": {
			"prefix": "SkeletonNode* BoneNode::getRootSkeletonNode() const",
			"body": [
				"SkeletonNode* BoneNode:getRootSkeletonNode() "
			],
			"description": "SkeletonNode* BoneNode::getRootSkeletonNode() const"
		},
		 "void Physics3DConstraint::setEnabled(bool enabled)": {
			"prefix": "void Physics3DConstraint::setEnabled(bool enabled)",
			"body": [
				"Physics3DConstraint:setEnabled(${1:bool enabled})"
			],
			"description": "void Physics3DConstraint::setEnabled(bool enabled)"
		},
		 "const rapidjson::Value &DictionaryHelper::getDictionaryFromArray_json(const rapidjson::Value &root, const char* key,int idx)": {
			"prefix": "const rapidjson::Value &DictionaryHelper::getDictionaryFromArray_json(const rapidjson::Value &root, const char* key,int idx)",
			"body": [
				"rapidjson:Value &DictionaryHelper:getDictionaryFromArray_json(${1:rapidjson:Value &root},${2:char* key},${3:int idx})"
			],
			"description": "const rapidjson::Value &DictionaryHelper::getDictionaryFromArray_json(const rapidjson::Value &root, const char* key,int idx)"
		},
		 "void GLProgram::setUniformLocationWith1fv( GLint location, const GLfloat* floats, unsigned int numberOfArrays )": {
			"prefix": "void GLProgram::setUniformLocationWith1fv( GLint location, const GLfloat* floats, unsigned int numberOfArrays )",
			"body": [
				"GLProgram:setUniformLocationWith1fv(${1:GLint location},${2:GLfloat* floats},${3:unsigned int numberOfArrays})"
			],
			"description": "void GLProgram::setUniformLocationWith1fv( GLint location, const GLfloat* floats, unsigned int numberOfArrays )"
		},
		 "void EaseCubicActionInOut::update(float time)": {
			"prefix": "void EaseCubicActionInOut::update(float time)",
			"body": [
				"EaseCubicActionInOut:update(${1:float time})"
			],
			"description": "void EaseCubicActionInOut::update(float time)"
		},
		 "void PhysicsShapeEdgeChain::getPoints(Vec2* outPoints) const": {
			"prefix": "void PhysicsShapeEdgeChain::getPoints(Vec2* outPoints) const",
			"body": [
				"PhysicsShapeEdgeChain:getPoints(${1:Vec2* outPoints})"
			],
			"description": "void PhysicsShapeEdgeChain::getPoints(Vec2* outPoints) const"
		},
		 "void VideoPlayer::resume()": {
			"prefix": "void VideoPlayer::resume()",
			"body": [
				"void VideoPlayer:resume()"
			],
			"description": "void VideoPlayer::resume()"
		},
		 "void ActionEase::stop(void)": {
			"prefix": "void ActionEase::stop(void)",
			"body": [
				"ActionEase:stop(${1:void})"
			],
			"description": "void ActionEase::stop(void)"
		},
		 "void GLView::setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)": {
			"prefix": "void GLView::setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)",
			"body": [
				"GLView:setDesignResolutionSize(${1:float width},${2:float height},${3:ResolutionPolicy resolutionPolicy})"
			],
			"description": "void GLView::setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)"
		},
		 "std::string NodeLoader::parsePropTypeText(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "std::string NodeLoader::parsePropTypeText(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeText(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "std::string NodeLoader::parsePropTypeText(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void Animation3DCache::removeUnusedAnimation()": {
			"prefix": "void Animation3DCache::removeUnusedAnimation()",
			"body": [
				"void Animation3DCache:removeUnusedAnimation()"
			],
			"description": "void Animation3DCache::removeUnusedAnimation()"
		},
		 "void ActionObject::setUnitTime(float fTime)": {
			"prefix": "void ActionObject::setUnitTime(float fTime)",
			"body": [
				"ActionObject:setUnitTime(${1:float fTime})"
			],
			"description": "void ActionObject::setUnitTime(float fTime)"
		},
		 "ActionEase* EaseSineOut::reverse(void) const": {
			"prefix": "ActionEase* EaseSineOut::reverse(void) const",
			"body": [
				"EaseSineOut:reverse(${1:void})"
			],
			"description": "ActionEase* EaseSineOut::reverse(void) const"
		},
		 "void Widget::updateChildrenDisplayedRGBA()": {
			"prefix": "void Widget::updateChildrenDisplayedRGBA()",
			"body": [
				"void Widget:updateChildrenDisplayedRGBA()"
			],
			"description": "void Widget::updateChildrenDisplayedRGBA()"
		},
		 "bool TextFieldTTF::initWithPlaceHolder(const std::string& placeholder, const std::string& fontName, float fontSize)": {
			"prefix": "bool TextFieldTTF::initWithPlaceHolder(const std::string& placeholder, const std::string& fontName, float fontSize)",
			"body": [
				"TextFieldTTF:initWithPlaceHolder(${1:std:string& placeholder},${2:std:string& fontName},${3:float fontSize})"
			],
			"description": "bool TextFieldTTF::initWithPlaceHolder(const std::string& placeholder, const std::string& fontName, float fontSize)"
		},
		 "const Color4B& TextFieldTTF::getColorSpaceHolder()": {
			"prefix": "const Color4B& TextFieldTTF::getColorSpaceHolder()",
			"body": [
				" Color4B& TextFieldTTF:getColorSpaceHolder()"
			],
			"description": "const Color4B& TextFieldTTF::getColorSpaceHolder()"
		},
		 "void Vec3::clamp(const Vec3& v, const Vec3& min, const Vec3& max, Vec3* dst)": {
			"prefix": "void Vec3::clamp(const Vec3& v, const Vec3& min, const Vec3& max, Vec3* dst)",
			"body": [
				"Vec3:clamp(${1:Vec3& v},${2:Vec3& min},${3:Vec3& max},${4:Vec3* dst})"
			],
			"description": "void Vec3::clamp(const Vec3& v, const Vec3& min, const Vec3& max, Vec3* dst)"
		},
		 "void Director::popMatrix(MATRIX_STACK_TYPE type)": {
			"prefix": "void Director::popMatrix(MATRIX_STACK_TYPE type)",
			"body": [
				"Director:popMatrix(${1:MATRIX_STACK_TYPE type})"
			],
			"description": "void Director::popMatrix(MATRIX_STACK_TYPE type)"
		},
		 "bool Physics3DSliderConstraint::getPoweredAngMotor() const": {
			"prefix": "bool Physics3DSliderConstraint::getPoweredAngMotor() const",
			"body": [
				"bool Physics3DSliderConstraint:getPoweredAngMotor() "
			],
			"description": "bool Physics3DSliderConstraint::getPoweredAngMotor() const"
		},
		 "bool __Array::initWithObjects(Ref* object, ...)": {
			"prefix": "bool __Array::initWithObjects(Ref* object, ...)",
			"body": [
				"__Array:initWithObjects(${1:Ref* object},${2:...})"
			],
			"description": "bool __Array::initWithObjects(Ref* object, ...)"
		},
		 "Frame* ScaleFrame::clone()": {
			"prefix": "Frame* ScaleFrame::clone()",
			"body": [
				"Frame* ScaleFrame:clone()"
			],
			"description": "Frame* ScaleFrame::clone()"
		},
		 "bool TextField::init()": {
			"prefix": "bool TextField::init()",
			"body": [
				"bool TextField:init()"
			],
			"description": "bool TextField::init()"
		},
		 "void ExtraAction::step(float dt)": {
			"prefix": "void ExtraAction::step(float dt)",
			"body": [
				"ExtraAction:step(${1:float dt})"
			],
			"description": "void ExtraAction::step(float dt)"
		},
		 "Vec2 Touch::getLocationInView() const": {
			"prefix": "Vec2 Touch::getLocationInView() const",
			"body": [
				"Vec2 Touch:getLocationInView() "
			],
			"description": "Vec2 Touch::getLocationInView() const"
		},
		 "void ReverseTime::startWithTarget(Node *target)": {
			"prefix": "void ReverseTime::startWithTarget(Node *target)",
			"body": [
				"ReverseTime:startWithTarget(${1:Node *target})"
			],
			"description": "void ReverseTime::startWithTarget(Node *target)"
		},
		 "const std::string DisplayData::changeDisplayToTexture(const std::string& displayName)": {
			"prefix": "const std::string DisplayData::changeDisplayToTexture(const std::string& displayName)",
			"body": [
				"std:string DisplayData:changeDisplayToTexture(${1:std:string& displayName})"
			],
			"description": "const std::string DisplayData::changeDisplayToTexture(const std::string& displayName)"
		},
		 "void FadeTo::startWithTarget(Node *target)": {
			"prefix": "void FadeTo::startWithTarget(Node *target)",
			"body": [
				"FadeTo:startWithTarget(${1:Node *target})"
			],
			"description": "void FadeTo::startWithTarget(Node *target)"
		},
		 "void LayerColor::changeWidthAndHeight(GLfloat w ,GLfloat h)": {
			"prefix": "void LayerColor::changeWidthAndHeight(GLfloat w ,GLfloat h)",
			"body": [
				"LayerColor:changeWidthAndHeight(${1:GLfloat w},${2:GLfloat h})"
			],
			"description": "void LayerColor::changeWidthAndHeight(GLfloat w ,GLfloat h)"
		},
		 "void ListView::remedyHorizontalLayoutParameter(LinearLayoutParameter* layoutParameter, ssize_t itemIndex)": {
			"prefix": "void ListView::remedyHorizontalLayoutParameter(LinearLayoutParameter* layoutParameter, ssize_t itemIndex)",
			"body": [
				"ListView:remedyHorizontalLayoutParameter(${1:LinearLayoutParameter* layoutParameter},${2:ssize_t itemIndex})"
			],
			"description": "void ListView::remedyHorizontalLayoutParameter(LinearLayoutParameter* layoutParameter, ssize_t itemIndex)"
		},
		 "Mat4 Skin::getNodeToWorldTransformAR() const": {
			"prefix": "Mat4 Skin::getNodeToWorldTransformAR() const",
			"body": [
				"Mat4 Skin:getNodeToWorldTransformAR() "
			],
			"description": "Mat4 Skin::getNodeToWorldTransformAR() const"
		},
		 "bool RenderTexture::initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat format, GLuint depthStencilFormat)": {
			"prefix": "bool RenderTexture::initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat format, GLuint depthStencilFormat)",
			"body": [
				"RenderTexture:initWithWidthAndHeight(${1:int w},${2:int h},${3:Texture2D:PixelFormat format},${4:GLuint depthStencilFormat})"
			],
			"description": "bool RenderTexture::initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat format, GLuint depthStencilFormat)"
		},
		 "void Console::addCommand(const Command& cmd)": {
			"prefix": "void Console::addCommand(const Command& cmd)",
			"body": [
				"Console:addCommand(${1:Command& cmd})"
			],
			"description": "void Console::addCommand(const Command& cmd)"
		},
		 "bool UICCTextField::getDetachWithIME()const": {
			"prefix": "bool UICCTextField::getDetachWithIME()const",
			"body": [
				"bool UICCTextField:getDetachWithIME()"
			],
			"description": "bool UICCTextField::getDetachWithIME()const"
		},
		 "void OpenALDecoder::addDecoder(OpenALDecoder *decoder)": {
			"prefix": "void OpenALDecoder::addDecoder(OpenALDecoder *decoder)",
			"body": [
				"OpenALDecoder:addDecoder(${1:OpenALDecoder *decoder})"
			],
			"description": "void OpenALDecoder::addDecoder(OpenALDecoder *decoder)"
		},
		 "void Pass::setGLProgramState(GLProgramState* glProgramState)": {
			"prefix": "void Pass::setGLProgramState(GLProgramState* glProgramState)",
			"body": [
				"Pass:setGLProgramState(${1:GLProgramState* glProgramState})"
			],
			"description": "void Pass::setGLProgramState(GLProgramState* glProgramState)"
		},
		 "void EventDispatcher::removeEventListenersForListenerID(const EventListener::ListenerID& listenerID)": {
			"prefix": "void EventDispatcher::removeEventListenersForListenerID(const EventListener::ListenerID& listenerID)",
			"body": [
				"EventDispatcher:removeEventListenersForListenerID(${1:EventListener:ListenerID& listenerID})"
			],
			"description": "void EventDispatcher::removeEventListenersForListenerID(const EventListener::ListenerID& listenerID)"
		},
		 "void TextBMFont::onSizeChanged()": {
			"prefix": "void TextBMFont::onSizeChanged()",
			"body": [
				"void TextBMFont:onSizeChanged()"
			],
			"description": "void TextBMFont::onSizeChanged()"
		},
		 "std::string UserDefault::getStringForKey(const char* pKey)": {
			"prefix": "std::string UserDefault::getStringForKey(const char* pKey)",
			"body": [
				"UserDefault:getStringForKey(${1:char* pKey})"
			],
			"description": "std::string UserDefault::getStringForKey(const char* pKey)"
		},
		 "const std::string& IMEDispatcher::getContentText()": {
			"prefix": "const std::string& IMEDispatcher::getContentText()",
			"body": [
				" std:string& IMEDispatcher:getContentText()"
			],
			"description": "const std::string& IMEDispatcher::getContentText()"
		},
		 "void ComponentContainer::onEnter()": {
			"prefix": "void ComponentContainer::onEnter()",
			"body": [
				"void ComponentContainer:onEnter()"
			],
			"description": "void ComponentContainer::onEnter()"
		},
		 "Ray::Ray(const Ray& ray)": {
			"prefix": "Ray::Ray(const Ray& ray)",
			"body": [
				"ray})"
			],
			"description": "Ray::Ray(const Ray& ray)"
		},
		 "const std::string& LabelAtlas::getString(void) const": {
			"prefix": "const std::string& LabelAtlas::getString(void) const",
			"body": [
				"std:string& LabelAtlas:getString(${1:void})"
			],
			"description": "const std::string& LabelAtlas::getString(void) const"
		},
		 "void Material::setName(const std::string&name)": {
			"prefix": "void Material::setName(const std::string&name)",
			"body": [
				"Material:setName(${1:std:string&name})"
			],
			"description": "void Material::setName(const std::string&name)"
		},
		 "Frame* RotationSkewFrame::clone()": {
			"prefix": "Frame* RotationSkewFrame::clone()",
			"body": [
				"Frame* RotationSkewFrame:clone()"
			],
			"description": "Frame* RotationSkewFrame::clone()"
		},
		 "void ScaleFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void ScaleFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"ScaleFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void ScaleFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void CCBReader::addOwnerCallbackControlEvents(Control::EventType type)": {
			"prefix": "void CCBReader::addOwnerCallbackControlEvents(Control::EventType type)",
			"body": [
				"CCBReader:addOwnerCallbackControlEvents(${1:Control:EventType type})"
			],
			"description": "void CCBReader::addOwnerCallbackControlEvents(Control::EventType type)"
		},
		 "bool TriggerMng::removeTriggerObj(unsigned int id)": {
			"prefix": "bool TriggerMng::removeTriggerObj(unsigned int id)",
			"body": [
				"TriggerMng:removeTriggerObj(${1:unsigned int id})"
			],
			"description": "bool TriggerMng::removeTriggerObj(unsigned int id)"
		},
		 "__CCCallFuncND * __CCCallFuncND::create(Ref* selectorTarget, SEL_CallFuncND selector, void* d)": {
			"prefix": "__CCCallFuncND * __CCCallFuncND::create(Ref* selectorTarget, SEL_CallFuncND selector, void* d)",
			"body": [
				"* __CCCallFuncND:create(${1:Ref* selectorTarget},${2:SEL_CallFuncND selector},${3:void* d})"
			],
			"description": "__CCCallFuncND * __CCCallFuncND::create(Ref* selectorTarget, SEL_CallFuncND selector, void* d)"
		},
		 "void Director::setContentScaleFactor(float scaleFactor)": {
			"prefix": "void Director::setContentScaleFactor(float scaleFactor)",
			"body": [
				"Director:setContentScaleFactor(${1:float scaleFactor})"
			],
			"description": "void Director::setContentScaleFactor(float scaleFactor)"
		},
		 "TransitionFlipY* TransitionFlipY::create(float t, Scene* s)": {
			"prefix": "TransitionFlipY* TransitionFlipY::create(float t, Scene* s)",
			"body": [
				"TransitionFlipY:create(${1:float t},${2:Scene* s})"
			],
			"description": "TransitionFlipY* TransitionFlipY::create(float t, Scene* s)"
		},
		 "Vec3 Vec3::getNormalized() const": {
			"prefix": "Vec3 Vec3::getNormalized() const",
			"body": [
				"Vec3 Vec3:getNormalized() "
			],
			"description": "Vec3 Vec3::getNormalized() const"
		},
		 "void Mat4::rotate(const Vec3& axis, float angle, Mat4* dst) const": {
			"prefix": "void Mat4::rotate(const Vec3& axis, float angle, Mat4* dst) const",
			"body": [
				"Mat4:rotate(${1:Vec3& axis},${2:float angle},${3:Mat4* dst})"
			],
			"description": "void Mat4::rotate(const Vec3& axis, float angle, Mat4* dst) const"
		},
		 "ClippingNode* ClippingNode::create()": {
			"prefix": "ClippingNode* ClippingNode::create()",
			"body": [
				"ClippingNode* ClippingNode:create()"
			],
			"description": "ClippingNode* ClippingNode::create()"
		},
		 "void Scheduler::schedulePerFrame(const ccSchedulerFunc& callback, void *target, int priority, bool paused)": {
			"prefix": "void Scheduler::schedulePerFrame(const ccSchedulerFunc& callback, void *target, int priority, bool paused)",
			"body": [
				"Scheduler:schedulePerFrame(${1:ccSchedulerFunc& callback},${2:void *target},${3:int priority},${4:bool paused})"
			],
			"description": "void Scheduler::schedulePerFrame(const ccSchedulerFunc& callback, void *target, int priority, bool paused)"
		},
		 "void Camera::unprojectGL(const Size& viewport, const Vec3* src, Vec3* dst) const": {
			"prefix": "void Camera::unprojectGL(const Size& viewport, const Vec3* src, Vec3* dst) const",
			"body": [
				"Camera:unprojectGL(${1:Size& viewport},${2:Vec3* src},${3:Vec3* dst})"
			],
			"description": "void Camera::unprojectGL(const Size& viewport, const Vec3* src, Vec3* dst) const"
		},
		 "void Physics3DRigidBody::setHitFraction( float hitFraction )": {
			"prefix": "void Physics3DRigidBody::setHitFraction( float hitFraction )",
			"body": [
				"Physics3DRigidBody:setHitFraction(${1:float hitFraction})"
			],
			"description": "void Physics3DRigidBody::setHitFraction( float hitFraction )"
		},
		 "Vec2 Director::getVisibleOrigin() const": {
			"prefix": "Vec2 Director::getVisibleOrigin() const",
			"body": [
				"Vec2 Director:getVisibleOrigin() "
			],
			"description": "Vec2 Director::getVisibleOrigin() const"
		},
		 "Animate3DQuality Configuration::getAnimate3DQuality() const": {
			"prefix": "Animate3DQuality Configuration::getAnimate3DQuality() const",
			"body": [
				"Animate3DQuality Configuration:getAnimate3DQuality() "
			],
			"description": "Animate3DQuality Configuration::getAnimate3DQuality() const"
		},
		 "bool Widget::isSwallowTouches()const": {
			"prefix": "bool Widget::isSwallowTouches()const",
			"body": [
				"bool Widget:isSwallowTouches()"
			],
			"description": "bool Widget::isSwallowTouches()const"
		},
		 "void TMXLayer::setupTiles()": {
			"prefix": "void TMXLayer::setupTiles()",
			"body": [
				"void TMXLayer:setupTiles()"
			],
			"description": "void TMXLayer::setupTiles()"
		},
		 "void Node::setTag(int tag)": {
			"prefix": "void Node::setTag(int tag)",
			"body": [
				"Node:setTag(${1:int tag})"
			],
			"description": "void Node::setTag(int tag)"
		},
		 "int EnhanceAPI::fastLoading(int sec)": {
			"prefix": "int EnhanceAPI::fastLoading(int sec)",
			"body": [
				"EnhanceAPI:fastLoading(${1:int sec})"
			],
			"description": "int EnhanceAPI::fastLoading(int sec)"
		},
		 "void SkeletonNode::onDraw(const cocos2d::Mat4 &transform, uint32_t flags)": {
			"prefix": "void SkeletonNode::onDraw(const cocos2d::Mat4 &transform, uint32_t flags)",
			"body": [
				"SkeletonNode:onDraw(${1:cocos2d:Mat4 &transform},${2:uint32_t flags})"
			],
			"description": "void SkeletonNode::onDraw(const cocos2d::Mat4 &transform, uint32_t flags)"
		},
		 "inline ActionTimeline* ActionTimelineCache::createActionWithDataBuffer(const cocos2d::Data data)": {
			"prefix": "inline ActionTimeline* ActionTimelineCache::createActionWithDataBuffer(const cocos2d::Data data)",
			"body": [
				"ActionTimeline* ActionTimelineCache:createActionWithDataBuffer(${1:cocos2d:Data data})"
			],
			"description": "inline ActionTimeline* ActionTimelineCache::createActionWithDataBuffer(const cocos2d::Data data)"
		},
		 "float PhysicsJointLimit::getMax() const": {
			"prefix": "float PhysicsJointLimit::getMax() const",
			"body": [
				"float PhysicsJointLimit:getMax() "
			],
			"description": "float PhysicsJointLimit::getMax() const"
		},
		 "ToggleVisibility * ToggleVisibility::create()": {
			"prefix": "ToggleVisibility * ToggleVisibility::create()",
			"body": [
				"ToggleVisibility * ToggleVisibility:create()"
			],
			"description": "ToggleVisibility * ToggleVisibility::create()"
		},
		 "__SetIterator __Set::end(void)": {
			"prefix": "__SetIterator __Set::end(void)",
			"body": [
				"__Set:end(${1:void})"
			],
			"description": "__SetIterator __Set::end(void)"
		},
		 "void PhysicsWorldCallback::queryRectCallbackFunc(cpShape *shape, RectQueryCallbackInfo *info)": {
			"prefix": "void PhysicsWorldCallback::queryRectCallbackFunc(cpShape *shape, RectQueryCallbackInfo *info)",
			"body": [
				"PhysicsWorldCallback:queryRectCallbackFunc(${1:cpShape *shape},${2:RectQueryCallbackInfo *info})"
			],
			"description": "void PhysicsWorldCallback::queryRectCallbackFunc(cpShape *shape, RectQueryCallbackInfo *info)"
		},
		 "bool ListView::init()": {
			"prefix": "bool ListView::init()",
			"body": [
				"bool ListView:init()"
			],
			"description": "bool ListView::init()"
		},
		 "float ParticleSystem::getStartRadiusVar() const": {
			"prefix": "float ParticleSystem::getStartRadiusVar() const",
			"body": [
				"float ParticleSystem:getStartRadiusVar() "
			],
			"description": "float ParticleSystem::getStartRadiusVar() const"
		},
		 "void Liquid::update(float time)": {
			"prefix": "void Liquid::update(float time)",
			"body": [
				"Liquid:update(${1:float time})"
			],
			"description": "void Liquid::update(float time)"
		},
		 "void Slider::loadSlidBallTextureDisabled(const std::string& disabled,TextureResType texType)": {
			"prefix": "void Slider::loadSlidBallTextureDisabled(const std::string& disabled,TextureResType texType)",
			"body": [
				"Slider:loadSlidBallTextureDisabled(${1:std:string& disabled},${2:TextureResType texType})"
			],
			"description": "void Slider::loadSlidBallTextureDisabled(const std::string& disabled,TextureResType texType)"
		},
		 "void CCBRotateTo::startWithTarget(Node *pNode)": {
			"prefix": "void CCBRotateTo::startWithTarget(Node *pNode)",
			"body": [
				"CCBRotateTo:startWithTarget(${1:Node *pNode})"
			],
			"description": "void CCBRotateTo::startWithTarget(Node *pNode)"
		},
		 "float PhysicsContactPreSolve::getRestitution() const": {
			"prefix": "float PhysicsContactPreSolve::getRestitution() const",
			"body": [
				"float PhysicsContactPreSolve:getRestitution() "
			],
			"description": "float PhysicsContactPreSolve::getRestitution() const"
		},
		 "void DisplayFactory::initSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay, const char *displayName, Skin *skin)": {
			"prefix": "void DisplayFactory::initSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay, const char *displayName, Skin *skin)",
			"body": [
				"DisplayFactory:initSpriteDisplay(${1:Bone *bone},${2:DecorativeDisplay *decoDisplay},${3:char *displayName},${4:Skin *skin})"
			],
			"description": "void DisplayFactory::initSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay, const char *displayName, Skin *skin)"
		},
		 "bool ParticleGalaxy::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleGalaxy::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleGalaxy:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleGalaxy::initWithTotalParticles(int numberOfParticles)"
		},
		 "void MciPlayer::Pause()": {
			"prefix": "void MciPlayer::Pause()",
			"body": [
				"void MciPlayer:Pause()"
			],
			"description": "void MciPlayer::Pause()"
		},
		 "void Text::initRenderer()": {
			"prefix": "void Text::initRenderer()",
			"body": [
				"void Text:initRenderer()"
			],
			"description": "void Text::initRenderer()"
		},
		 "bool Frustum::isOutOfFrustum(const OBB& obb) const": {
			"prefix": "bool Frustum::isOutOfFrustum(const OBB& obb) const",
			"body": [
				"Frustum:isOutOfFrustum(${1:OBB& obb})"
			],
			"description": "bool Frustum::isOutOfFrustum(const OBB& obb) const"
		},
		 "bool EaseElastic::initWithAction(ActionInterval *action, float period/* = 0.3f*/)": {
			"prefix": "bool EaseElastic::initWithAction(ActionInterval *action, float period/* = 0.3f*/)",
			"body": [
				"EaseElastic:initWithAction(${1:ActionInterval *action},${2:float period/* = 0.3f*/})"
			],
			"description": "bool EaseElastic::initWithAction(ActionInterval *action, float period/* = 0.3f*/)"
		},
		 "float Node::getPositionX() const": {
			"prefix": "float Node::getPositionX() const",
			"body": [
				"float Node:getPositionX() "
			],
			"description": "float Node::getPositionX() const"
		},
		 "FrameData *DataReaderHelper::decodeFrame(tinyxml2::XMLElement *frameXML,  tinyxml2::XMLElement *parentFrameXml, BoneData *boneData, DataInfo *dataInfo)": {
			"prefix": "FrameData *DataReaderHelper::decodeFrame(tinyxml2::XMLElement *frameXML,  tinyxml2::XMLElement *parentFrameXml, BoneData *boneData, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeFrame(${1:tinyxml2:XMLElement *frameXML},${2:tinyxml2:XMLElement *parentFrameXml},${3:BoneData *boneData},${4:DataInfo *dataInfo})"
			],
			"description": "FrameData *DataReaderHelper::decodeFrame(tinyxml2::XMLElement *frameXML,  tinyxml2::XMLElement *parentFrameXml, BoneData *boneData, DataInfo *dataInfo)"
		},
		 "void DrawNode::drawQuadBezier(const Vec2 &origin, const Vec2 &control, const Vec2 &destination, unsigned int segments, const Color4F &color)": {
			"prefix": "void DrawNode::drawQuadBezier(const Vec2 &origin, const Vec2 &control, const Vec2 &destination, unsigned int segments, const Color4F &color)",
			"body": [
				"DrawNode:drawQuadBezier(${1:Vec2 &origin},${2:Vec2 &control},${3:Vec2 &destination},${4:unsigned int segments},${5:Color4F &color})"
			],
			"description": "void DrawNode::drawQuadBezier(const Vec2 &origin, const Vec2 &control, const Vec2 &destination, unsigned int segments, const Color4F &color)"
		},
		 "Quaternion::Quaternion(const Vec3& axis, float angle)": {
			"prefix": "Quaternion::Quaternion(const Vec3& axis, float angle)",
			"body": [
				"axis},${2:float angle})"
			],
			"description": "Quaternion::Quaternion(const Vec3& axis, float angle)"
		},
		 "void Node::updateTransformFromPhysics(const Mat4& parentTransform, uint32_t parentFlags)": {
			"prefix": "void Node::updateTransformFromPhysics(const Mat4& parentTransform, uint32_t parentFlags)",
			"body": [
				"Node:updateTransformFromPhysics(${1:Mat4& parentTransform},${2:uint32_t parentFlags})"
			],
			"description": "void Node::updateTransformFromPhysics(const Mat4& parentTransform, uint32_t parentFlags)"
		},
		 "EaseSineInOut* EaseSineInOut::clone() const": {
			"prefix": "EaseSineInOut* EaseSineInOut::clone() const",
			"body": [
				"EaseSineInOut* EaseSineInOut:clone() "
			],
			"description": "EaseSineInOut* EaseSineInOut::clone() const"
		},
		 "void RenderState::StateBlock::enableDepthWrite()": {
			"prefix": "void RenderState::StateBlock::enableDepthWrite()",
			"body": [
				"void RenderState:StateBlock:enableDepthWrite()"
			],
			"description": "void RenderState::StateBlock::enableDepthWrite()"
		},
		 "void FileUtils::setWritablePath(const std::string& writablePath)": {
			"prefix": "void FileUtils::setWritablePath(const std::string& writablePath)",
			"body": [
				"FileUtils:setWritablePath(${1:std:string& writablePath})"
			],
			"description": "void FileUtils::setWritablePath(const std::string& writablePath)"
		},
		 "void Texture2D::convertI8ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertI8ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertI8ToRGB888(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertI8ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void HttpClient::decreaseThreadCountAndMayDeleteThis()": {
			"prefix": "void HttpClient::decreaseThreadCountAndMayDeleteThis()",
			"body": [
				"void HttpClient:decreaseThreadCountAndMayDeleteThis()"
			],
			"description": "void HttpClient::decreaseThreadCountAndMayDeleteThis()"
		},
		 "void TransitionFadeTR::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void TransitionFadeTR::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"TransitionFadeTR:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void TransitionFadeTR::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "const BlendFunc& SpriteBatchNode::getBlendFunc() const": {
			"prefix": "const BlendFunc& SpriteBatchNode::getBlendFunc() const",
			"body": [
				" BlendFunc& SpriteBatchNode:getBlendFunc() "
			],
			"description": "const BlendFunc& SpriteBatchNode::getBlendFunc() const"
		},
		 "void DisplayManager::initDisplayList(BoneData *boneData)": {
			"prefix": "void DisplayManager::initDisplayList(BoneData *boneData)",
			"body": [
				"DisplayManager:initDisplayList(${1:BoneData *boneData})"
			],
			"description": "void DisplayManager::initDisplayList(BoneData *boneData)"
		},
		 "void ComController::onAdd()": {
			"prefix": "void ComController::onAdd()",
			"body": [
				"void ComController:onAdd()"
			],
			"description": "void ComController::onAdd()"
		},
		 "float CCBAnimationManager::getSequenceDuration(const char *pSequenceName)": {
			"prefix": "float CCBAnimationManager::getSequenceDuration(const char *pSequenceName)",
			"body": [
				"CCBAnimationManager:getSequenceDuration(${1:char *pSequenceName})"
			],
			"description": "float CCBAnimationManager::getSequenceDuration(const char *pSequenceName)"
		},
		 "Vec2 Node::convertToNodeSpaceAR(const Vec2& worldPoint) const": {
			"prefix": "Vec2 Node::convertToNodeSpaceAR(const Vec2& worldPoint) const",
			"body": [
				"Node:convertToNodeSpaceAR(${1:Vec2& worldPoint})"
			],
			"description": "Vec2 Node::convertToNodeSpaceAR(const Vec2& worldPoint) const"
		},
		 "float ParticleSystem::getRadialAccelVar() const": {
			"prefix": "float ParticleSystem::getRadialAccelVar() const",
			"body": [
				"float ParticleSystem:getRadialAccelVar() "
			],
			"description": "float ParticleSystem::getRadialAccelVar() const"
		},
		 "cocos2d::Mat4 Physics3DConeTwistConstraint::getFrameOffsetA() const": {
			"prefix": "cocos2d::Mat4 Physics3DConeTwistConstraint::getFrameOffsetA() const",
			"body": [
				"cocos2d:Mat4 Physics3DConeTwistConstraint:getFrameOffsetA() "
			],
			"description": "cocos2d::Mat4 Physics3DConeTwistConstraint::getFrameOffsetA() const"
		},
		 "void ProgressTimer::setAnchorPoint(const Vec2& anchorPoint)": {
			"prefix": "void ProgressTimer::setAnchorPoint(const Vec2& anchorPoint)",
			"body": [
				"ProgressTimer:setAnchorPoint(${1:Vec2& anchorPoint})"
			],
			"description": "void ProgressTimer::setAnchorPoint(const Vec2& anchorPoint)"
		},
		 "bool ComAudio::willPlayBackgroundMusic()": {
			"prefix": "bool ComAudio::willPlayBackgroundMusic()",
			"body": [
				"bool ComAudio:willPlayBackgroundMusic()"
			],
			"description": "bool ComAudio::willPlayBackgroundMusic()"
		},
		 "bool PhysicsShapeEdgeSegment::init(const Vec2& a, const Vec2& b, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)": {
			"prefix": "bool PhysicsShapeEdgeSegment::init(const Vec2& a, const Vec2& b, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)",
			"body": [
				"PhysicsShapeEdgeSegment:init(${1:Vec2& a},${2:Vec2& b},${3:PhysicsMaterial& material/* = MaterialDefault*/},${4:float border/* = 1*/})"
			],
			"description": "bool PhysicsShapeEdgeSegment::init(const Vec2& a, const Vec2& b, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)"
		},
		 "void Renderer::setupVBOAndVAO()": {
			"prefix": "void Renderer::setupVBOAndVAO()",
			"body": [
				"void Renderer:setupVBOAndVAO()"
			],
			"description": "void Renderer::setupVBOAndVAO()"
		},
		 "void Widget::setSwallowTouches(bool swallow)": {
			"prefix": "void Widget::setSwallowTouches(bool swallow)",
			"body": [
				"Widget:setSwallowTouches(${1:bool swallow})"
			],
			"description": "void Widget::setSwallowTouches(bool swallow)"
		},
		 "float Physics3DRigidBody::getFriction() const": {
			"prefix": "float Physics3DRigidBody::getFriction() const",
			"body": [
				"float Physics3DRigidBody:getFriction() "
			],
			"description": "float Physics3DRigidBody::getFriction() const"
		},
		 "void ProgressTimer::setPercentage(float percentage)": {
			"prefix": "void ProgressTimer::setPercentage(float percentage)",
			"body": [
				"ProgressTimer:setPercentage(${1:float percentage})"
			],
			"description": "void ProgressTimer::setPercentage(float percentage)"
		},
		 "RenderTexture * RenderTexture::create(int w, int h, Texture2D::PixelFormat eFormat)": {
			"prefix": "RenderTexture * RenderTexture::create(int w, int h, Texture2D::PixelFormat eFormat)",
			"body": [
				"* RenderTexture:create(${1:int w},${2:int h},${3:Texture2D:PixelFormat eFormat})"
			],
			"description": "RenderTexture * RenderTexture::create(int w, int h, Texture2D::PixelFormat eFormat)"
		},
		 "cocos2d::Node* SceneReader::createNodeWithSceneFile(const std::string &fileName, AttachComponentType attachComponent /*= AttachComponentType::EMPTY_NODE*/)": {
			"prefix": "cocos2d::Node* SceneReader::createNodeWithSceneFile(const std::string &fileName, AttachComponentType attachComponent /*= AttachComponentType::EMPTY_NODE*/)",
			"body": [
				"SceneReader:createNodeWithSceneFile(${1:std:string &fileName},${2:AttachComponentType attachComponent /*= AttachComponentType:EMPTY_NODE*/})"
			],
			"description": "cocos2d::Node* SceneReader::createNodeWithSceneFile(const std::string &fileName, AttachComponentType attachComponent /*= AttachComponentType::EMPTY_NODE*/)"
		},
		 "bool __CCCallFuncO::initWithTarget(Ref* selectorTarget, SEL_CallFuncO selector, Ref* object)": {
			"prefix": "bool __CCCallFuncO::initWithTarget(Ref* selectorTarget, SEL_CallFuncO selector, Ref* object)",
			"body": [
				"__CCCallFuncO:initWithTarget(${1:Ref* selectorTarget},${2:SEL_CallFuncO selector},${3:Ref* object})"
			],
			"description": "bool __CCCallFuncO::initWithTarget(Ref* selectorTarget, SEL_CallFuncO selector, Ref* object)"
		},
		 "void SkeletonAnimation::setTrackCompleteListener (spTrackEntry* entry, const CompleteListener& listener)": {
			"prefix": "void SkeletonAnimation::setTrackCompleteListener (spTrackEntry* entry, const CompleteListener& listener)",
			"body": [
				"SkeletonAnimation:setTrackCompleteListener (${1:spTrackEntry* entry},${2:CompleteListener& listener})"
			],
			"description": "void SkeletonAnimation::setTrackCompleteListener (spTrackEntry* entry, const CompleteListener& listener)"
		},
		 "void SkeletonAnimation::setTrackEventListener (spTrackEntry* entry, const EventListener& listener)": {
			"prefix": "void SkeletonAnimation::setTrackEventListener (spTrackEntry* entry, const EventListener& listener)",
			"body": [
				"SkeletonAnimation:setTrackEventListener (${1:spTrackEntry* entry},${2:EventListener& listener})"
			],
			"description": "void SkeletonAnimation::setTrackEventListener (spTrackEntry* entry, const EventListener& listener)"
		},
		 "CCBRotateXTo* CCBRotateXTo::clone() const": {
			"prefix": "CCBRotateXTo* CCBRotateXTo::clone() const",
			"body": [
				"CCBRotateXTo* CCBRotateXTo:clone() "
			],
			"description": "CCBRotateXTo* CCBRotateXTo::clone() const"
		},
		 "Size Director::getWinSizeInPixels() const": {
			"prefix": "Size Director::getWinSizeInPixels() const",
			"body": [
				"Size Director:getWinSizeInPixels() "
			],
			"description": "Size Director::getWinSizeInPixels() const"
		},
		 "Quaternion Quaternion::getInversed() const": {
			"prefix": "Quaternion Quaternion::getInversed() const",
			"body": [
				"Quaternion Quaternion:getInversed() "
			],
			"description": "Quaternion Quaternion::getInversed() const"
		},
		 "std::string TextAtlas::getDescription() const": {
			"prefix": "std::string TextAtlas::getDescription() const",
			"body": [
				"std:string TextAtlas:getDescription() "
			],
			"description": "std::string TextAtlas::getDescription() const"
		},
		 "void GLViewImpl::updateFrameSize()": {
			"prefix": "void GLViewImpl::updateFrameSize()",
			"body": [
				"void GLViewImpl:updateFrameSize()"
			],
			"description": "void GLViewImpl::updateFrameSize()"
		},
		 "void NodeLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char* pPropertyName, const char * pText, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char* pPropertyName, const char * pText, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeText(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:char * pText},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char* pPropertyName, const char * pText, CCBReader * ccbReader)"
		},
		 "Repeat* Repeat::clone(void) const": {
			"prefix": "Repeat* Repeat::clone(void) const",
			"body": [
				"Repeat:clone(${1:void})"
			],
			"description": "Repeat* Repeat::clone(void) const"
		},
		 "float PhysicsShapeCircle::calculateArea()": {
			"prefix": "float PhysicsShapeCircle::calculateArea()",
			"body": [
				"float PhysicsShapeCircle:calculateArea()"
			],
			"description": "float PhysicsShapeCircle::calculateArea()"
		},
		 "void ProcessBase::gotoFrame(int frameIndex)": {
			"prefix": "void ProcessBase::gotoFrame(int frameIndex)",
			"body": [
				"ProcessBase:gotoFrame(${1:int frameIndex})"
			],
			"description": "void ProcessBase::gotoFrame(int frameIndex)"
		},
		 "Node* CSLoader::createNodeWithFlatBuffersFile(const std::string &filename, const ccNodeLoadCallback &callback)": {
			"prefix": "Node* CSLoader::createNodeWithFlatBuffersFile(const std::string &filename, const ccNodeLoadCallback &callback)",
			"body": [
				"CSLoader:createNodeWithFlatBuffersFile(${1:std:string &filename},${2:ccNodeLoadCallback &callback})"
			],
			"description": "Node* CSLoader::createNodeWithFlatBuffersFile(const std::string &filename, const ccNodeLoadCallback &callback)"
		},
		 "static unsigned int parseUInt(const std::string& value)": {
			"prefix": "static unsigned int parseUInt(const std::string& value)",
			"body": [
				"unsigned int parseUInt(${1:std:string& value})"
			],
			"description": "static unsigned int parseUInt(const std::string& value)"
		},
		 "ssize_t PageView::getCurPageIndex() const": {
			"prefix": "ssize_t PageView::getCurPageIndex() const",
			"body": [
				"ssize_t PageView:getCurPageIndex() "
			],
			"description": "ssize_t PageView::getCurPageIndex() const"
		},
		 "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& rbAFrame, const cocos2d::Mat4& rbBFrame, bool useReferenceFrameA)": {
			"prefix": "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& rbAFrame, const cocos2d::Mat4& rbBFrame, bool useReferenceFrameA)",
			"body": [
				"Physics3DHingeConstraint:create(${1:Physics3DRigidBody* rbA},${2:Physics3DRigidBody* rbB},${3:cocos2d:Mat4& rbAFrame},${4:cocos2d:Mat4& rbBFrame},${5:bool useReferenceFrameA})"
			],
			"description": "Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& rbAFrame, const cocos2d::Mat4& rbBFrame, bool useReferenceFrameA)"
		},
		 "void DataReaderHelper::removeConfigFile(const std::string& configFile)": {
			"prefix": "void DataReaderHelper::removeConfigFile(const std::string& configFile)",
			"body": [
				"DataReaderHelper:removeConfigFile(${1:std:string& configFile})"
			],
			"description": "void DataReaderHelper::removeConfigFile(const std::string& configFile)"
		},
		 "void PhysicsBody::setDynamic(bool dynamic)": {
			"prefix": "void PhysicsBody::setDynamic(bool dynamic)",
			"body": [
				"PhysicsBody:setDynamic(${1:bool dynamic})"
			],
			"description": "void PhysicsBody::setDynamic(bool dynamic)"
		},
		 "cpShape *Armature::getShapeList()": {
			"prefix": "cpShape *Armature::getShapeList()",
			"body": [
				"cpShape *Armature:getShapeList()"
			],
			"description": "cpShape *Armature::getShapeList()"
		},
		 "bool  Layout::isLastWidgetInContainer(Widget* widget, FocusDirection direction)const": {
			"prefix": "bool  Layout::isLastWidgetInContainer(Widget* widget, FocusDirection direction)const",
			"body": [
				"Layout:isLastWidgetInContainer(${1:Widget* widget},${2:FocusDirection direction})"
			],
			"description": "bool  Layout::isLastWidgetInContainer(Widget* widget, FocusDirection direction)const"
		},
		 "const Vec2& Node::getPosition() const": {
			"prefix": "const Vec2& Node::getPosition() const",
			"body": [
				" Vec2& Node:getPosition() "
			],
			"description": "const Vec2& Node::getPosition() const"
		},
		 "RenderTexture * RenderTexture::create(int w, int h)": {
			"prefix": "RenderTexture * RenderTexture::create(int w, int h)",
			"body": [
				"* RenderTexture:create(${1:int w},${2:int h})"
			],
			"description": "RenderTexture * RenderTexture::create(int w, int h)"
		},
		 "void Text::copySpecialProperties(Widget *widget)": {
			"prefix": "void Text::copySpecialProperties(Widget *widget)",
			"body": [
				"Text:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void Text::copySpecialProperties(Widget *widget)"
		},
		 "void TextField::setPlaceHolderColor(const cocos2d::Color3B &color)": {
			"prefix": "void TextField::setPlaceHolderColor(const cocos2d::Color3B &color)",
			"body": [
				"TextField:setPlaceHolderColor(${1:cocos2d:Color3B &color})"
			],
			"description": "void TextField::setPlaceHolderColor(const cocos2d::Color3B &color)"
		},
		 "bool Physics3DWorld::isDebugDrawEnabled() const": {
			"prefix": "bool Physics3DWorld::isDebugDrawEnabled() const",
			"body": [
				"bool Physics3DWorld:isDebugDrawEnabled() "
			],
			"description": "bool Physics3DWorld::isDebugDrawEnabled() const"
		},
		 "void NodeLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char* pPropertyName, bool pCheck, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char* pPropertyName, bool pCheck, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeCheck(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:bool pCheck},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char* pPropertyName, bool pCheck, CCBReader * ccbReader)"
		},
		 "static bool isFloat( std::string myString )": {
			"prefix": "static bool isFloat( std::string myString )",
			"body": [
				"bool isFloat(${1:std:string myString})"
			],
			"description": "static bool isFloat( std::string myString )"
		},
		 "void Node::setAdditionalTransform(Mat4* additionalTransform)": {
			"prefix": "void Node::setAdditionalTransform(Mat4* additionalTransform)",
			"body": [
				"Node:setAdditionalTransform(${1:Mat4* additionalTransform})"
			],
			"description": "void Node::setAdditionalTransform(Mat4* additionalTransform)"
		},
		 "void NodeLoader::onHandlePropTypeInteger(Node * pNode, Node * pParent, const char* pPropertyName, int pInteger, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeInteger(Node * pNode, Node * pParent, const char* pPropertyName, int pInteger, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeInteger(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:int pInteger},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeInteger(Node * pNode, Node * pParent, const char* pPropertyName, int pInteger, CCBReader * ccbReader)"
		},
		 "GridBase* GridBase::create(const Size& gridSize)": {
			"prefix": "GridBase* GridBase::create(const Size& gridSize)",
			"body": [
				"GridBase:create(${1:Size& gridSize})"
			],
			"description": "GridBase* GridBase::create(const Size& gridSize)"
		},
		 "bool AutoreleasePool::contains(Ref* object) const": {
			"prefix": "bool AutoreleasePool::contains(Ref* object) const",
			"body": [
				"AutoreleasePool:contains(${1:Ref* object})"
			],
			"description": "bool AutoreleasePool::contains(Ref* object) const"
		},
		 "void SpriteFrameCache::removeSpriteFramesFromFileContent(const std::string& plist_content)": {
			"prefix": "void SpriteFrameCache::removeSpriteFramesFromFileContent(const std::string& plist_content)",
			"body": [
				"SpriteFrameCache:removeSpriteFramesFromFileContent(${1:std:string& plist_content})"
			],
			"description": "void SpriteFrameCache::removeSpriteFramesFromFileContent(const std::string& plist_content)"
		},
		 "void Widget::setLayoutParameter(LayoutParameter *parameter)": {
			"prefix": "void Widget::setLayoutParameter(LayoutParameter *parameter)",
			"body": [
				"Widget:setLayoutParameter(${1:LayoutParameter *parameter})"
			],
			"description": "void Widget::setLayoutParameter(LayoutParameter *parameter)"
		},
		 "void NavMeshAgent::preUpdate(float delta)": {
			"prefix": "void NavMeshAgent::preUpdate(float delta)",
			"body": [
				"NavMeshAgent:preUpdate(${1:float delta})"
			],
			"description": "void NavMeshAgent::preUpdate(float delta)"
		},
		 "int __NotificationCenter::getObserverHandlerByName(const std::string& name)": {
			"prefix": "int __NotificationCenter::getObserverHandlerByName(const std::string& name)",
			"body": [
				"__NotificationCenter:getObserverHandlerByName(${1:std:string& name})"
			],
			"description": "int __NotificationCenter::getObserverHandlerByName(const std::string& name)"
		},
		 "void MeshSkin::removeAllBones()": {
			"prefix": "void MeshSkin::removeAllBones()",
			"body": [
				"void MeshSkin:removeAllBones()"
			],
			"description": "void MeshSkin::removeAllBones()"
		},
		 "bool InputDelegate::isAccelerometerEnabled() const": {
			"prefix": "bool InputDelegate::isAccelerometerEnabled() const",
			"body": [
				"bool InputDelegate:isAccelerometerEnabled() "
			],
			"description": "bool InputDelegate::isAccelerometerEnabled() const"
		},
		 "void WidgetPropertiesReader0250::setPropsForTextFieldFromJsonDictionary(Widget*widget,const rapidjson::Value& options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForTextFieldFromJsonDictionary(Widget*widget,const rapidjson::Value& options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForTextFieldFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value& options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForTextFieldFromJsonDictionary(Widget*widget,const rapidjson::Value& options)"
		},
		 "void Node::addChild(Node *child, int zOrder)": {
			"prefix": "void Node::addChild(Node *child, int zOrder)",
			"body": [
				"Node:addChild(${1:Node *child},${2:int zOrder})"
			],
			"description": "void Node::addChild(Node *child, int zOrder)"
		},
		 "bool Label::setBMFontFilePath(const std::string& bmfontFilePath, const Vec2& imageOffset /* = Vec2::ZERO */)": {
			"prefix": "bool Label::setBMFontFilePath(const std::string& bmfontFilePath, const Vec2& imageOffset /* = Vec2::ZERO */)",
			"body": [
				"Label:setBMFontFilePath(${1:std:string& bmfontFilePath},${2:Vec2& imageOffset /* = Vec2:ZERO */})"
			],
			"description": "bool Label::setBMFontFilePath(const std::string& bmfontFilePath, const Vec2& imageOffset /* = Vec2::ZERO */)"
		},
		 "Ref*  ActionNode::getObject()": {
			"prefix": "Ref*  ActionNode::getObject()",
			"body": [
				"Ref*  ActionNode:getObject()"
			],
			"description": "Ref*  ActionNode::getObject()"
		},
		 "void LoadingBar::setCapInsets(const Rect &capInsets)": {
			"prefix": "void LoadingBar::setCapInsets(const Rect &capInsets)",
			"body": [
				"LoadingBar:setCapInsets(${1:Rect &capInsets})"
			],
			"description": "void LoadingBar::setCapInsets(const Rect &capInsets)"
		},
		 "spAnimationState* SkeletonAnimation::getState() const": {
			"prefix": "spAnimationState* SkeletonAnimation::getState() const",
			"body": [
				"spAnimationState* SkeletonAnimation:getState() "
			],
			"description": "spAnimationState* SkeletonAnimation::getState() const"
		},
		 "float Vec2::getAngle(const Vec2& other) const": {
			"prefix": "float Vec2::getAngle(const Vec2& other) const",
			"body": [
				"Vec2:getAngle(${1:Vec2& other})"
			],
			"description": "float Vec2::getAngle(const Vec2& other) const"
		},
		 "void Director::setScheduler(Scheduler* scheduler)": {
			"prefix": "void Director::setScheduler(Scheduler* scheduler)",
			"body": [
				"Director:setScheduler(${1:Scheduler* scheduler})"
			],
			"description": "void Director::setScheduler(Scheduler* scheduler)"
		},
		 "void WidgetPropertiesReader0250::setPropsForImageViewFromJsonDictionary(Widget*widget,const rapidjson::Value& options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForImageViewFromJsonDictionary(Widget*widget,const rapidjson::Value& options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForImageViewFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value& options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForImageViewFromJsonDictionary(Widget*widget,const rapidjson::Value& options)"
		},
		 "void Director::setViewport()": {
			"prefix": "void Director::setViewport()",
			"body": [
				"void Director:setViewport()"
			],
			"description": "void Director::setViewport()"
		},
		 "void TextureAtlas::insertQuads(V3F_C4B_T2F_Quad* quads, ssize_t index, ssize_t amount)": {
			"prefix": "void TextureAtlas::insertQuads(V3F_C4B_T2F_Quad* quads, ssize_t index, ssize_t amount)",
			"body": [
				"TextureAtlas:insertQuads(${1:V3F_C4B_T2F_Quad* quads},${2:ssize_t index},${3:ssize_t amount})"
			],
			"description": "void TextureAtlas::insertQuads(V3F_C4B_T2F_Quad* quads, ssize_t index, ssize_t amount)"
		},
		 "bool TextField::hitTest(const Vec2 &pt, const Camera* camera, Vec3 *p) const": {
			"prefix": "bool TextField::hitTest(const Vec2 &pt, const Camera* camera, Vec3 *p) const",
			"body": [
				"TextField:hitTest(${1:Vec2 &pt},${2:Camera* camera},${3:Vec3 *p})"
			],
			"description": "bool TextField::hitTest(const Vec2 &pt, const Camera* camera, Vec3 *p) const"
		},
		 "unsigned char* Data::getBytes() const": {
			"prefix": "unsigned char* Data::getBytes() const",
			"body": [
				"unsigned char* Data:getBytes() "
			],
			"description": "unsigned char* Data::getBytes() const"
		},
		 "TargetedAction* TargetedAction::clone() const": {
			"prefix": "TargetedAction* TargetedAction::clone() const",
			"body": [
				"TargetedAction* TargetedAction:clone() "
			],
			"description": "TargetedAction* TargetedAction::clone() const"
		},
		 "void DataVisitor::visit(const __Array *value)": {
			"prefix": "void DataVisitor::visit(const __Array *value)",
			"body": [
				"DataVisitor:visit(${1:__Array *value})"
			],
			"description": "void DataVisitor::visit(const __Array *value)"
		},
		 "bool ActionObject::valueToBool(const std::string& value)": {
			"prefix": "bool ActionObject::valueToBool(const std::string& value)",
			"body": [
				"ActionObject:valueToBool(${1:std:string& value})"
			],
			"description": "bool ActionObject::valueToBool(const std::string& value)"
		},
		 "bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root)": {
			"prefix": "bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root)",
			"body": [
				"DictionaryHelper:checkObjectExist_json(${1:rapidjson:Value &root})"
			],
			"description": "bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root)"
		},
		 "Size Size::operator/(float a) const": {
			"prefix": "Size Size::operator/(float a) const",
			"body": [
				"Size:operator/(${1:float a})"
			],
			"description": "Size Size::operator/(float a) const"
		},
		 "void GroupCommandManager::releaseGroupID(int groupID)": {
			"prefix": "void GroupCommandManager::releaseGroupID(int groupID)",
			"body": [
				"GroupCommandManager:releaseGroupID(${1:int groupID})"
			],
			"description": "void GroupCommandManager::releaseGroupID(int groupID)"
		},
		 "void Quaternion::set(const Quaternion& q)": {
			"prefix": "void Quaternion::set(const Quaternion& q)",
			"body": [
				"Quaternion:set(${1:Quaternion& q})"
			],
			"description": "void Quaternion::set(const Quaternion& q)"
		},
		 "MeshVertexData* MeshVertexData::create(const MeshData& meshdata)": {
			"prefix": "MeshVertexData* MeshVertexData::create(const MeshData& meshdata)",
			"body": [
				"MeshVertexData:create(${1:MeshData& meshdata})"
			],
			"description": "MeshVertexData* MeshVertexData::create(const MeshData& meshdata)"
		},
		 "void EventDispatcher::dispatchCustomEvent(const std::string &eventName, void *optionalUserData)": {
			"prefix": "void EventDispatcher::dispatchCustomEvent(const std::string &eventName, void *optionalUserData)",
			"body": [
				"EventDispatcher:dispatchCustomEvent(${1:std:string &eventName},${2:void *optionalUserData})"
			],
			"description": "void EventDispatcher::dispatchCustomEvent(const std::string &eventName, void *optionalUserData)"
		},
		 "void ImageView::copySpecialProperties(Widget *widget)": {
			"prefix": "void ImageView::copySpecialProperties(Widget *widget)",
			"body": [
				"ImageView:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void ImageView::copySpecialProperties(Widget *widget)"
		},
		 "void Texture2D::convertRGBA8888ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGBA8888ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGBA8888ToI8(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGBA8888ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "SplitRows* SplitRows::create(float duration, unsigned int nRows)": {
			"prefix": "SplitRows* SplitRows::create(float duration, unsigned int nRows)",
			"body": [
				"SplitRows:create(${1:float duration},${2:unsigned int nRows})"
			],
			"description": "SplitRows* SplitRows::create(float duration, unsigned int nRows)"
		},
		 "void Terrain::setLODDistance(float lod_1, float lod_2, float lod_3)": {
			"prefix": "void Terrain::setLODDistance(float lod_1, float lod_2, float lod_3)",
			"body": [
				"Terrain:setLODDistance(${1:float lod_1},${2:float lod_2},${3:float lod_3})"
			],
			"description": "void Terrain::setLODDistance(float lod_1, float lod_2, float lod_3)"
		},
		 "void DrawNode::setLineWidth(int lineWidth)": {
			"prefix": "void DrawNode::setLineWidth(int lineWidth)",
			"body": [
				"DrawNode:setLineWidth(${1:int lineWidth})"
			],
			"description": "void DrawNode::setLineWidth(int lineWidth)"
		},
		 "Size TextBMFont::getVirtualRendererSize() const": {
			"prefix": "Size TextBMFont::getVirtualRendererSize() const",
			"body": [
				"Size TextBMFont:getVirtualRendererSize() "
			],
			"description": "Size TextBMFont::getVirtualRendererSize() const"
		},
		 "Waves* Waves::clone() const": {
			"prefix": "Waves* Waves::clone() const",
			"body": [
				"Waves* Waves:clone() "
			],
			"description": "Waves* Waves::clone() const"
		},
		 "void ArmatureDataManager::destroyInstance()": {
			"prefix": "void ArmatureDataManager::destroyInstance()",
			"body": [
				"void ArmatureDataManager:destroyInstance()"
			],
			"description": "void ArmatureDataManager::destroyInstance()"
		},
		 "Widget* RadioButtonGroup::createCloneInstance()": {
			"prefix": "Widget* RadioButtonGroup::createCloneInstance()",
			"body": [
				"Widget* RadioButtonGroup:createCloneInstance()"
			],
			"description": "Widget* RadioButtonGroup::createCloneInstance()"
		},
		 "void Menu::addChild(Node * child, int zOrder, int tag)": {
			"prefix": "void Menu::addChild(Node * child, int zOrder, int tag)",
			"body": [
				"Menu:addChild(${1:Node * child},${2:int zOrder},${3:int tag})"
			],
			"description": "void Menu::addChild(Node * child, int zOrder, int tag)"
		},
		 "Rect Helper::restrictCapInsetRect(const cocos2d::Rect &capInsets, const Size& textureSize )": {
			"prefix": "Rect Helper::restrictCapInsetRect(const cocos2d::Rect &capInsets, const Size& textureSize )",
			"body": [
				"Helper:restrictCapInsetRect(${1:cocos2d:Rect &capInsets},${2:Size& textureSize})"
			],
			"description": "Rect Helper::restrictCapInsetRect(const cocos2d::Rect &capInsets, const Size& textureSize )"
		},
		 "static bool parseBoolean(const std::string& value)": {
			"prefix": "static bool parseBoolean(const std::string& value)",
			"body": [
				"bool parseBoolean(${1:std:string& value})"
			],
			"description": "static bool parseBoolean(const std::string& value)"
		},
		 "bool Material::parseSampler(GLProgramState* glProgramState, Properties* samplerProperties)": {
			"prefix": "bool Material::parseSampler(GLProgramState* glProgramState, Properties* samplerProperties)",
			"body": [
				"Material:parseSampler(${1:GLProgramState* glProgramState},${2:Properties* samplerProperties})"
			],
			"description": "bool Material::parseSampler(GLProgramState* glProgramState, Properties* samplerProperties)"
		},
		 "std::string getStringWithEllipsisJni(const char* text, float width, float fontSize)": {
			"prefix": "std::string getStringWithEllipsisJni(const char* text, float width, float fontSize)",
			"body": [
				"getStringWithEllipsisJni(${1:char* text},${2:float width},${3:float fontSize})"
			],
			"description": "std::string getStringWithEllipsisJni(const char* text, float width, float fontSize)"
		},
		 "void PolygonInfo::releaseVertsAndIndices()": {
			"prefix": "void PolygonInfo::releaseVertsAndIndices()",
			"body": [
				"void PolygonInfo:releaseVertsAndIndices()"
			],
			"description": "void PolygonInfo::releaseVertsAndIndices()"
		},
		 "bool ComRender::serialize(void* r)": {
			"prefix": "bool ComRender::serialize(void* r)",
			"body": [
				"ComRender:serialize(${1:void* r})"
			],
			"description": "bool ComRender::serialize(void* r)"
		},
		 "CSLoader* CSLoader::getInstance()": {
			"prefix": "CSLoader* CSLoader::getInstance()",
			"body": [
				"CSLoader* CSLoader:getInstance()"
			],
			"description": "CSLoader* CSLoader::getInstance()"
		},
		 "bool BaseTriggerCondition::detect()": {
			"prefix": "bool BaseTriggerCondition::detect()",
			"body": [
				"bool BaseTriggerCondition:detect()"
			],
			"description": "bool BaseTriggerCondition::detect()"
		},
		 "void Tween::updateHandler()": {
			"prefix": "void Tween::updateHandler()",
			"body": [
				"void Tween:updateHandler()"
			],
			"description": "void Tween::updateHandler()"
		},
		 "bool GLViewImpl::initGlew()": {
			"prefix": "bool GLViewImpl::initGlew()",
			"body": [
				"bool GLViewImpl:initGlew()"
			],
			"description": "bool GLViewImpl::initGlew()"
		},
		 "void ColliderFilter::updateShape(b2Fixture *fixture)": {
			"prefix": "void ColliderFilter::updateShape(b2Fixture *fixture)",
			"body": [
				"ColliderFilter:updateShape(${1:b2Fixture *fixture})"
			],
			"description": "void ColliderFilter::updateShape(b2Fixture *fixture)"
		},
		 "void RenderTexture::onClear()": {
			"prefix": "void RenderTexture::onClear()",
			"body": [
				"void RenderTexture:onClear()"
			],
			"description": "void RenderTexture::onClear()"
		},
		 "CCBEaseInstant* CCBEaseInstant::clone() const": {
			"prefix": "CCBEaseInstant* CCBEaseInstant::clone() const",
			"body": [
				"CCBEaseInstant* CCBEaseInstant:clone() "
			],
			"description": "CCBEaseInstant* CCBEaseInstant::clone() const"
		},
		 "bool Image::isATITC(const unsigned char *data, ssize_t dataLen)": {
			"prefix": "bool Image::isATITC(const unsigned char *data, ssize_t dataLen)",
			"body": [
				"Image:isATITC(${1:unsigned char *data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::isATITC(const unsigned char *data, ssize_t dataLen)"
		},
		 "bool LayerMultiplex::init()": {
			"prefix": "bool LayerMultiplex::init()",
			"body": [
				"bool LayerMultiplex:init()"
			],
			"description": "bool LayerMultiplex::init()"
		},
		 "Animation3D::Curve* Animation3D::getBoneCurveByName(const std::string& name) const": {
			"prefix": "Animation3D::Curve* Animation3D::getBoneCurveByName(const std::string& name) const",
			"body": [
				"Animation3D:getBoneCurveByName(${1:std:string& name})"
			],
			"description": "Animation3D::Curve* Animation3D::getBoneCurveByName(const std::string& name) const"
		},
		 "void GLView::handleTouchesMove(int num, intptr_t ids[], float xs[], float ys[])": {
			"prefix": "void GLView::handleTouchesMove(int num, intptr_t ids[], float xs[], float ys[])",
			"body": [
				"GLView:handleTouchesMove(${1:int num},${2:intptr_t ids[]},${3:float xs[]},${4:float ys[]})"
			],
			"description": "void GLView::handleTouchesMove(int num, intptr_t ids[], float xs[], float ys[])"
		},
		 "void CheckBox::copySpecialProperties(Widget *widget)": {
			"prefix": "void CheckBox::copySpecialProperties(Widget *widget)",
			"body": [
				"CheckBox:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void CheckBox::copySpecialProperties(Widget *widget)"
		},
		 "bool NavMesh::initWithFilePath(const std::string &navFilePath, const std::string &geomFilePath)": {
			"prefix": "bool NavMesh::initWithFilePath(const std::string &navFilePath, const std::string &geomFilePath)",
			"body": [
				"NavMesh:initWithFilePath(${1:std:string &navFilePath},${2:std:string &geomFilePath})"
			],
			"description": "bool NavMesh::initWithFilePath(const std::string &navFilePath, const std::string &geomFilePath)"
		},
		 "EaseQuadraticActionInOut* EaseQuadraticActionInOut::clone() const": {
			"prefix": "EaseQuadraticActionInOut* EaseQuadraticActionInOut::clone() const",
			"body": [
				"EaseQuadraticActionInOut* EaseQuadraticActionInOut:clone() "
			],
			"description": "EaseQuadraticActionInOut* EaseQuadraticActionInOut::clone() const"
		},
		 "GLubyte ScrollView::getScrollBarOpacity() const": {
			"prefix": "GLubyte ScrollView::getScrollBarOpacity() const",
			"body": [
				"GLubyte ScrollView:getScrollBarOpacity() "
			],
			"description": "GLubyte ScrollView::getScrollBarOpacity() const"
		},
		 "bool Properties::getPath(const char* name, std::string* path) const": {
			"prefix": "bool Properties::getPath(const char* name, std::string* path) const",
			"body": [
				"Properties:getPath(${1:char* name},${2:std:string* path})"
			],
			"description": "bool Properties::getPath(const char* name, std::string* path) const"
		},
		 "void Texture2D::convertAI88ToA8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertAI88ToA8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertAI88ToA8(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertAI88ToA8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void AudioEngine::setLoop(int audioID, bool loop)": {
			"prefix": "void AudioEngine::setLoop(int audioID, bool loop)",
			"body": [
				"AudioEngine:setLoop(${1:int audioID},${2:bool loop})"
			],
			"description": "void AudioEngine::setLoop(int audioID, bool loop)"
		},
		 "void MenuItemSprite::unselected()": {
			"prefix": "void MenuItemSprite::unselected()",
			"body": [
				"void MenuItemSprite:unselected()"
			],
			"description": "void MenuItemSprite::unselected()"
		},
		 "spTrackEntry* SkeletonAnimation::addAnimation (int trackIndex, const std::string& name, bool loop, float delay)": {
			"prefix": "spTrackEntry* SkeletonAnimation::addAnimation (int trackIndex, const std::string& name, bool loop, float delay)",
			"body": [
				"SkeletonAnimation:addAnimation (${1:int trackIndex},${2:std:string& name},${3:bool loop},${4:float delay})"
			],
			"description": "spTrackEntry* SkeletonAnimation::addAnimation (int trackIndex, const std::string& name, bool loop, float delay)"
		},
		 "__Array* __Array::createWithContentsOfFile(const std::string& fileName)": {
			"prefix": "__Array* __Array::createWithContentsOfFile(const std::string& fileName)",
			"body": [
				"__Array:createWithContentsOfFile(${1:std:string& fileName})"
			],
			"description": "__Array* __Array::createWithContentsOfFile(const std::string& fileName)"
		},
		 "std::string LayerMultiplex::getDescription() const": {
			"prefix": "std::string LayerMultiplex::getDescription() const",
			"body": [
				"std:string LayerMultiplex:getDescription() "
			],
			"description": "std::string LayerMultiplex::getDescription() const"
		},
		 "void GLViewImpl::onGLFWKeyCallback(GLFWwindow *window, int key, int scancode, int action, int mods)": {
			"prefix": "void GLViewImpl::onGLFWKeyCallback(GLFWwindow *window, int key, int scancode, int action, int mods)",
			"body": [
				"GLViewImpl:onGLFWKeyCallback(${1:GLFWwindow *window},${2:int key},${3:int scancode},${4:int action},${5:int mods})"
			],
			"description": "void GLViewImpl::onGLFWKeyCallback(GLFWwindow *window, int key, int scancode, int action, int mods)"
		},
		 "void Physics3DSliderConstraint::setUpperLinLimit(float upperLimit)": {
			"prefix": "void Physics3DSliderConstraint::setUpperLinLimit(float upperLimit)",
			"body": [
				"Physics3DSliderConstraint:setUpperLinLimit(${1:float upperLimit})"
			],
			"description": "void Physics3DSliderConstraint::setUpperLinLimit(float upperLimit)"
		},
		 "void Animation3DCache::destroyInstance()": {
			"prefix": "void Animation3DCache::destroyInstance()",
			"body": [
				"void Animation3DCache:destroyInstance()"
			],
			"description": "void Animation3DCache::destroyInstance()"
		},
		 "EaseExponentialInOut* EaseExponentialInOut::reverse() const": {
			"prefix": "EaseExponentialInOut* EaseExponentialInOut::reverse() const",
			"body": [
				"EaseExponentialInOut* EaseExponentialInOut:reverse() "
			],
			"description": "EaseExponentialInOut* EaseExponentialInOut::reverse() const"
		},
		 "PhysicsJointRotaryLimit* PhysicsJointRotaryLimit::construct(PhysicsBody* a, PhysicsBody* b)": {
			"prefix": "PhysicsJointRotaryLimit* PhysicsJointRotaryLimit::construct(PhysicsBody* a, PhysicsBody* b)",
			"body": [
				"PhysicsJointRotaryLimit:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b})"
			],
			"description": "PhysicsJointRotaryLimit* PhysicsJointRotaryLimit::construct(PhysicsBody* a, PhysicsBody* b)"
		},
		 "void DataVisitor::visit(const __Bool *value)": {
			"prefix": "void DataVisitor::visit(const __Bool *value)",
			"body": [
				"DataVisitor:visit(${1:__Bool *value})"
			],
			"description": "void DataVisitor::visit(const __Bool *value)"
		},
		 "void TextField::setMaxLengthEnabled(bool enable)": {
			"prefix": "void TextField::setMaxLengthEnabled(bool enable)",
			"body": [
				"TextField:setMaxLengthEnabled(${1:bool enable})"
			],
			"description": "void TextField::setMaxLengthEnabled(bool enable)"
		},
		 "void SIOClient::send(const std::string& s)": {
			"prefix": "void SIOClient::send(const std::string& s)",
			"body": [
				"SIOClient:send(${1:std:string& s})"
			],
			"description": "void SIOClient::send(const std::string& s)"
		},
		 "CCBRotateXTo* CCBRotateXTo::create(float fDuration, float fAngle)": {
			"prefix": "CCBRotateXTo* CCBRotateXTo::create(float fDuration, float fAngle)",
			"body": [
				"CCBRotateXTo:create(${1:float fDuration},${2:float fAngle})"
			],
			"description": "CCBRotateXTo* CCBRotateXTo::create(float fDuration, float fAngle)"
		},
		 "Size Text::getAutoRenderSize()": {
			"prefix": "Size Text::getAutoRenderSize()",
			"body": [
				"Size Text:getAutoRenderSize()"
			],
			"description": "Size Text::getAutoRenderSize()"
		},
		 "void CCBAnimationManager::setAutoPlaySequenceId(int autoPlaySequenceId)": {
			"prefix": "void CCBAnimationManager::setAutoPlaySequenceId(int autoPlaySequenceId)",
			"body": [
				"CCBAnimationManager:setAutoPlaySequenceId(${1:int autoPlaySequenceId})"
			],
			"description": "void CCBAnimationManager::setAutoPlaySequenceId(int autoPlaySequenceId)"
		},
		 "void cocos2d::NavMeshObstacle::setHeight(float height)": {
			"prefix": "void cocos2d::NavMeshObstacle::setHeight(float height)",
			"body": [
				"cocos2d:NavMeshObstacle:setHeight(${1:float height})"
			],
			"description": "void cocos2d::NavMeshObstacle::setHeight(float height)"
		},
		 "void ActionObject::removeActionNode(ActionNode* node)": {
			"prefix": "void ActionObject::removeActionNode(ActionNode* node)",
			"body": [
				"ActionObject:removeActionNode(${1:ActionNode* node})"
			],
			"description": "void ActionObject::removeActionNode(ActionNode* node)"
		},
		 "void Bone3D::updateWorldMat()": {
			"prefix": "void Bone3D::updateWorldMat()",
			"body": [
				"void Bone3D:updateWorldMat()"
			],
			"description": "void Bone3D::updateWorldMat()"
		},
		 "void EditBoxImplAndroid::setNativeFont(const char* pFontName, int fontSize)": {
			"prefix": "void EditBoxImplAndroid::setNativeFont(const char* pFontName, int fontSize)",
			"body": [
				"EditBoxImplAndroid:setNativeFont(${1:char* pFontName},${2:int fontSize})"
			],
			"description": "void EditBoxImplAndroid::setNativeFont(const char* pFontName, int fontSize)"
		},
		 "void ArmatureDataManager::addArmatureFileInfoAsync(const std::string& imagePath, const std::string& plistPath, const std::string& configFilePath, Ref *target, SEL_SCHEDULE selector)": {
			"prefix": "void ArmatureDataManager::addArmatureFileInfoAsync(const std::string& imagePath, const std::string& plistPath, const std::string& configFilePath, Ref *target, SEL_SCHEDULE selector)",
			"body": [
				"ArmatureDataManager:addArmatureFileInfoAsync(${1:std:string& imagePath},${2:std:string& plistPath},${3:std:string& configFilePath},${4:Ref *target},${5:SEL_SCHEDULE selector})"
			],
			"description": "void ArmatureDataManager::addArmatureFileInfoAsync(const std::string& imagePath, const std::string& plistPath, const std::string& configFilePath, Ref *target, SEL_SCHEDULE selector)"
		},
		 "void DisplayFactory::addDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)": {
			"prefix": "void DisplayFactory::addDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)",
			"body": [
				"DisplayFactory:addDisplay(${1:Bone *bone},${2:DecorativeDisplay *decoDisplay},${3:DisplayData *displayData})"
			],
			"description": "void DisplayFactory::addDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)"
		},
		 "void SimpleAudioEngine::stopBackgroundMusic(bool bReleaseData)": {
			"prefix": "void SimpleAudioEngine::stopBackgroundMusic(bool bReleaseData)",
			"body": [
				"SimpleAudioEngine:stopBackgroundMusic(${1:bool bReleaseData})"
			],
			"description": "void SimpleAudioEngine::stopBackgroundMusic(bool bReleaseData)"
		},
		 "void EditBox::setFontSize(int fontSize)": {
			"prefix": "void EditBox::setFontSize(int fontSize)",
			"body": [
				"EditBox:setFontSize(${1:int fontSize})"
			],
			"description": "void EditBox::setFontSize(int fontSize)"
		},
		 "SimpleAudioEngine* SimpleAudioEngine::getInstance()": {
			"prefix": "SimpleAudioEngine* SimpleAudioEngine::getInstance()",
			"body": [
				"SimpleAudioEngine* SimpleAudioEngine:getInstance()"
			],
			"description": "SimpleAudioEngine* SimpleAudioEngine::getInstance()"
		},
		 "void LayerColor::updateColor()": {
			"prefix": "void LayerColor::updateColor()",
			"body": [
				"void LayerColor:updateColor()"
			],
			"description": "void LayerColor::updateColor()"
		},
		 "void Console::commandHelp(int fd, const std::string &args)": {
			"prefix": "void Console::commandHelp(int fd, const std::string &args)",
			"body": [
				"Console:commandHelp(${1:int fd},${2:std:string &args})"
			],
			"description": "void Console::commandHelp(int fd, const std::string &args)"
		},
		 "void SkeletonRenderer::initWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)": {
			"prefix": "void SkeletonRenderer::initWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)",
			"body": [
				"SkeletonRenderer:initWithFile (${1:std:string& skeletonDataFile},${2:spAtlas* atlas},${3:float scale})"
			],
			"description": "void SkeletonRenderer::initWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)"
		},
		 "void Director::setOpenGLView(GLView *openGLView)": {
			"prefix": "void Director::setOpenGLView(GLView *openGLView)",
			"body": [
				"Director:setOpenGLView(${1:GLView *openGLView})"
			],
			"description": "void Director::setOpenGLView(GLView *openGLView)"
		},
		 "bool BaseTriggerAction::init()": {
			"prefix": "bool BaseTriggerAction::init()",
			"body": [
				"bool BaseTriggerAction:init()"
			],
			"description": "bool BaseTriggerAction::init()"
		},
		 "ParticleSystemQuad * ParticleSystemQuad::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleSystemQuad * ParticleSystemQuad::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"* ParticleSystemQuad:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleSystemQuad * ParticleSystemQuad::createWithTotalParticles(int numberOfParticles)"
		},
		 "int InputDelegate::getTouchPriority() const": {
			"prefix": "int InputDelegate::getTouchPriority() const",
			"body": [
				"int InputDelegate:getTouchPriority() "
			],
			"description": "int InputDelegate::getTouchPriority() const"
		},
		 "void InputDelegate::onTouchesMoved(const std::vector<Touch*>& pTouches, Event *pEvent)": {
			"prefix": "void InputDelegate::onTouchesMoved(const std::vector<Touch*>& pTouches, Event *pEvent)",
			"body": [
				"InputDelegate:onTouchesMoved(${1:std:vector<Touch*>& pTouches},${2:Event *pEvent})"
			],
			"description": "void InputDelegate::onTouchesMoved(const std::vector<Touch*>& pTouches, Event *pEvent)"
		},
		 "Mesh* Mesh::create(const std::vector<float>& vertices, int perVertexSizeInFloat, const IndexArray& indices, const std::vector<MeshVertexAttrib>& attribs)": {
			"prefix": "Mesh* Mesh::create(const std::vector<float>& vertices, int perVertexSizeInFloat, const IndexArray& indices, const std::vector<MeshVertexAttrib>& attribs)",
			"body": [
				"Mesh:create(${1:std:vector<float>& vertices},${2:int perVertexSizeInFloat},${3:IndexArray& indices},${4:std:vector<MeshVertexAttrib>& attribs})"
			],
			"description": "Mesh* Mesh::create(const std::vector<float>& vertices, int perVertexSizeInFloat, const IndexArray& indices, const std::vector<MeshVertexAttrib>& attribs)"
		},
		 "void LabelTTF::setFlippedY(bool flippedY)": {
			"prefix": "void LabelTTF::setFlippedY(bool flippedY)",
			"body": [
				"LabelTTF:setFlippedY(${1:bool flippedY})"
			],
			"description": "void LabelTTF::setFlippedY(bool flippedY)"
		},
		 "void __NotificationCenter::destroyInstance()": {
			"prefix": "void __NotificationCenter::destroyInstance()",
			"body": [
				"void __NotificationCenter:destroyInstance()"
			],
			"description": "void __NotificationCenter::destroyInstance()"
		},
		 "void Slider::copySpecialProperties(Widget *widget)": {
			"prefix": "void Slider::copySpecialProperties(Widget *widget)",
			"body": [
				"Slider:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void Slider::copySpecialProperties(Widget *widget)"
		},
		 "BezierTo* BezierTo::reverse() const": {
			"prefix": "BezierTo* BezierTo::reverse() const",
			"body": [
				"BezierTo* BezierTo:reverse() "
			],
			"description": "BezierTo* BezierTo::reverse() const"
		},
		 "void Node::setColor(const Color3B& color)": {
			"prefix": "void Node::setColor(const Color3B& color)",
			"body": [
				"Node:setColor(${1:Color3B& color})"
			],
			"description": "void Node::setColor(const Color3B& color)"
		},
		 "void Slider::setCapInsetsBarRenderer(const Rect &capInsets)": {
			"prefix": "void Slider::setCapInsetsBarRenderer(const Rect &capInsets)",
			"body": [
				"Slider:setCapInsetsBarRenderer(${1:Rect &capInsets})"
			],
			"description": "void Slider::setCapInsetsBarRenderer(const Rect &capInsets)"
		},
		 "void LabelTTFLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)": {
			"prefix": "void LabelTTFLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)",
			"body": [
				"LabelTTFLoader:onHandlePropTypeByte(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:unsigned char pByte},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelTTFLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)"
		},
		 "void Mat4::rotateY(float angle, Mat4* dst) const": {
			"prefix": "void Mat4::rotateY(float angle, Mat4* dst) const",
			"body": [
				"Mat4:rotateY(${1:float angle},${2:Mat4* dst})"
			],
			"description": "void Mat4::rotateY(float angle, Mat4* dst) const"
		},
		 "Texture2D * ParticleSystem::getTexture() const": {
			"prefix": "Texture2D * ParticleSystem::getTexture() const",
			"body": [
				"Texture2D * ParticleSystem:getTexture() "
			],
			"description": "Texture2D * ParticleSystem::getTexture() const"
		},
		 "bool Properties::getVec4(const char* name, Vec4* out) const": {
			"prefix": "bool Properties::getVec4(const char* name, Vec4* out) const",
			"body": [
				"Properties:getVec4(${1:char* name},${2:Vec4* out})"
			],
			"description": "bool Properties::getVec4(const char* name, Vec4* out) const"
		},
		 "Frame* ColorFrame::clone()": {
			"prefix": "Frame* ColorFrame::clone()",
			"body": [
				"Frame* ColorFrame:clone()"
			],
			"description": "Frame* ColorFrame::clone()"
		},
		 "AlphaFrame* AlphaFrame::create()": {
			"prefix": "AlphaFrame* AlphaFrame::create()",
			"body": [
				"AlphaFrame* AlphaFrame:create()"
			],
			"description": "AlphaFrame* AlphaFrame::create()"
		},
		 "void Director::loadIdentityMatrix(MATRIX_STACK_TYPE type)": {
			"prefix": "void Director::loadIdentityMatrix(MATRIX_STACK_TYPE type)",
			"body": [
				"Director:loadIdentityMatrix(${1:MATRIX_STACK_TYPE type})"
			],
			"description": "void Director::loadIdentityMatrix(MATRIX_STACK_TYPE type)"
		},
		 "GLViewImpl* GLViewImpl::createWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)": {
			"prefix": "GLViewImpl* GLViewImpl::createWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)",
			"body": [
				"GLViewImpl:createWithRect(${1:std:string& viewName},${2:Rect rect},${3:float frameZoomFactor})"
			],
			"description": "GLViewImpl* GLViewImpl::createWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)"
		},
		 "void RadioButtonGroup::deselect()": {
			"prefix": "void RadioButtonGroup::deselect()",
			"body": [
				"void RadioButtonGroup:deselect()"
			],
			"description": "void RadioButtonGroup::deselect()"
		},
		 "void Physics3DSliderConstraint::setLowerAngLimit(float lowerLimit)": {
			"prefix": "void Physics3DSliderConstraint::setLowerAngLimit(float lowerLimit)",
			"body": [
				"Physics3DSliderConstraint:setLowerAngLimit(${1:float lowerLimit})"
			],
			"description": "void Physics3DSliderConstraint::setLowerAngLimit(float lowerLimit)"
		},
		 "Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName)": {
			"prefix": "Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName)",
			"body": [
				"CCBReader:createSceneWithNodeGraphFromFile(${1:char *pCCBFileName})"
			],
			"description": "Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName)"
		},
		 "TransitionMoveInB* TransitionMoveInB::create(float t, Scene* scene)": {
			"prefix": "TransitionMoveInB* TransitionMoveInB::create(float t, Scene* scene)",
			"body": [
				"TransitionMoveInB:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionMoveInB* TransitionMoveInB::create(float t, Scene* scene)"
		},
		 "bool ProfilingTimer::initWithName(const char* timerName)": {
			"prefix": "bool ProfilingTimer::initWithName(const char* timerName)",
			"body": [
				"ProfilingTimer:initWithName(${1:char* timerName})"
			],
			"description": "bool ProfilingTimer::initWithName(const char* timerName)"
		},
		 "void EaseBounceIn::update(float time)": {
			"prefix": "void EaseBounceIn::update(float time)",
			"body": [
				"EaseBounceIn:update(${1:float time})"
			],
			"description": "void EaseBounceIn::update(float time)"
		},
		 "size_t Downloader::fileWriteFunc(void *ptr, size_t size, size_t nmemb, void *userdata)": {
			"prefix": "size_t Downloader::fileWriteFunc(void *ptr, size_t size, size_t nmemb, void *userdata)",
			"body": [
				"Downloader:fileWriteFunc(${1:void *ptr},${2:size_t size},${3:size_t nmemb},${4:void *userdata})"
			],
			"description": "size_t Downloader::fileWriteFunc(void *ptr, size_t size, size_t nmemb, void *userdata)"
		},
		 "void PhysicsJointGear::setRatio(float ratio)": {
			"prefix": "void PhysicsJointGear::setRatio(float ratio)",
			"body": [
				"PhysicsJointGear:setRatio(${1:float ratio})"
			],
			"description": "void PhysicsJointGear::setRatio(float ratio)"
		},
		 "void Layout::setBackGroundColor(const Color3B &startColor, const Color3B &endColor)": {
			"prefix": "void Layout::setBackGroundColor(const Color3B &startColor, const Color3B &endColor)",
			"body": [
				"Layout:setBackGroundColor(${1:Color3B &startColor},${2:Color3B &endColor})"
			],
			"description": "void Layout::setBackGroundColor(const Color3B &startColor, const Color3B &endColor)"
		},
		 "ActionInterval* CCBAnimationManager::getEaseAction(ActionInterval *pAction, CCBKeyframe::EasingType easingType, float fEasingOpt)": {
			"prefix": "ActionInterval* CCBAnimationManager::getEaseAction(ActionInterval *pAction, CCBKeyframe::EasingType easingType, float fEasingOpt)",
			"body": [
				"CCBAnimationManager:getEaseAction(${1:ActionInterval *pAction},${2:CCBKeyframe:EasingType easingType},${3:float fEasingOpt})"
			],
			"description": "ActionInterval* CCBAnimationManager::getEaseAction(ActionInterval *pAction, CCBKeyframe::EasingType easingType, float fEasingOpt)"
		},
		 "void GridAction::startWithTarget(Node *target)": {
			"prefix": "void GridAction::startWithTarget(Node *target)",
			"body": [
				"GridAction:startWithTarget(${1:Node *target})"
			],
			"description": "void GridAction::startWithTarget(Node *target)"
		},
		 "void cocos2d::NavMeshObstacle::setRadius(float radius)": {
			"prefix": "void cocos2d::NavMeshObstacle::setRadius(float radius)",
			"body": [
				"cocos2d:NavMeshObstacle:setRadius(${1:float radius})"
			],
			"description": "void cocos2d::NavMeshObstacle::setRadius(float radius)"
		},
		 "Texture2D* SpriteFrame::getTexture()": {
			"prefix": "Texture2D* SpriteFrame::getTexture()",
			"body": [
				"Texture2D* SpriteFrame:getTexture()"
			],
			"description": "Texture2D* SpriteFrame::getTexture()"
		},
		 "WavesTiles3D* WavesTiles3D::clone() const": {
			"prefix": "WavesTiles3D* WavesTiles3D::clone() const",
			"body": [
				"WavesTiles3D* WavesTiles3D:clone() "
			],
			"description": "WavesTiles3D* WavesTiles3D::clone() const"
		},
		 "void Console::stop()": {
			"prefix": "void Console::stop()",
			"body": [
				"void Console:stop()"
			],
			"description": "void Console::stop()"
		},
		 "static RenderState::StencilFunction parseStencilFunc(const std::string& value)": {
			"prefix": "static RenderState::StencilFunction parseStencilFunc(const std::string& value)",
			"body": [
				"RenderState:StencilFunction parseStencilFunc(${1:std:string& value})"
			],
			"description": "static RenderState::StencilFunction parseStencilFunc(const std::string& value)"
		},
		 "void ListView::removeItem(ssize_t index)": {
			"prefix": "void ListView::removeItem(ssize_t index)",
			"body": [
				"ListView:removeItem(${1:ssize_t index})"
			],
			"description": "void ListView::removeItem(ssize_t index)"
		},
		 "NodeLoaderLibrary * NodeLoaderLibrary::getInstance()": {
			"prefix": "NodeLoaderLibrary * NodeLoaderLibrary::getInstance()",
			"body": [
				"NodeLoaderLibrary * NodeLoaderLibrary:getInstance()"
			],
			"description": "NodeLoaderLibrary * NodeLoaderLibrary::getInstance()"
		},
		 "EaseElasticInOut* EaseElasticInOut::clone() const": {
			"prefix": "EaseElasticInOut* EaseElasticInOut::clone() const",
			"body": [
				"EaseElasticInOut* EaseElasticInOut:clone() "
			],
			"description": "EaseElasticInOut* EaseElasticInOut::clone() const"
		},
		 "void Physics3DSliderConstraint::setSoftnessOrthoAng(float softnessOrthoAng)": {
			"prefix": "void Physics3DSliderConstraint::setSoftnessOrthoAng(float softnessOrthoAng)",
			"body": [
				"Physics3DSliderConstraint:setSoftnessOrthoAng(${1:float softnessOrthoAng})"
			],
			"description": "void Physics3DSliderConstraint::setSoftnessOrthoAng(float softnessOrthoAng)"
		},
		 "void PhysicsSprite3D::syncPhysicsToNode()": {
			"prefix": "void PhysicsSprite3D::syncPhysicsToNode()",
			"body": [
				"void PhysicsSprite3D:syncPhysicsToNode()"
			],
			"description": "void PhysicsSprite3D::syncPhysicsToNode()"
		},
		 "void Director::popToSceneStackLevel(int level)": {
			"prefix": "void Director::popToSceneStackLevel(int level)",
			"body": [
				"Director:popToSceneStackLevel(${1:int level})"
			],
			"description": "void Director::popToSceneStackLevel(int level)"
		},
		 "void Texture2D::setAliasTexParameters()": {
			"prefix": "void Texture2D::setAliasTexParameters()",
			"body": [
				"void Texture2D:setAliasTexParameters()"
			],
			"description": "void Texture2D::setAliasTexParameters()"
		},
		 "TransitionFlipX* TransitionFlipX::create(float t, Scene* s)": {
			"prefix": "TransitionFlipX* TransitionFlipX::create(float t, Scene* s)",
			"body": [
				"TransitionFlipX:create(${1:float t},${2:Scene* s})"
			],
			"description": "TransitionFlipX* TransitionFlipX::create(float t, Scene* s)"
		},
		 "void Mesh::setTexture(Texture2D* tex)": {
			"prefix": "void Mesh::setTexture(Texture2D* tex)",
			"body": [
				"Mesh:setTexture(${1:Texture2D* tex})"
			],
			"description": "void Mesh::setTexture(Texture2D* tex)"
		},
		 "void SkeletonRenderer::drawSkeleton (const Mat4 &transform, uint32_t transformFlags)": {
			"prefix": "void SkeletonRenderer::drawSkeleton (const Mat4 &transform, uint32_t transformFlags)",
			"body": [
				"SkeletonRenderer:drawSkeleton (${1:Mat4 &transform},${2:uint32_t transformFlags})"
			],
			"description": "void SkeletonRenderer::drawSkeleton (const Mat4 &transform, uint32_t transformFlags)"
		},
		 "void Scene::render(Renderer* renderer)": {
			"prefix": "void Scene::render(Renderer* renderer)",
			"body": [
				"Scene:render(${1:Renderer* renderer})"
			],
			"description": "void Scene::render(Renderer* renderer)"
		},
		 "void TextureAtlas::drawQuads()": {
			"prefix": "void TextureAtlas::drawQuads()",
			"body": [
				"void TextureAtlas:drawQuads()"
			],
			"description": "void TextureAtlas::drawQuads()"
		},
		 "void EditBox::setMaxLength(int maxLength)": {
			"prefix": "void EditBox::setMaxLength(int maxLength)",
			"body": [
				"EditBox:setMaxLength(${1:int maxLength})"
			],
			"description": "void EditBox::setMaxLength(int maxLength)"
		},
		 "MenuItemToggle * MenuItemToggle::createWithTarget(Ref* target, SEL_MenuHandler selector, MenuItem* item, ...)": {
			"prefix": "MenuItemToggle * MenuItemToggle::createWithTarget(Ref* target, SEL_MenuHandler selector, MenuItem* item, ...)",
			"body": [
				"* MenuItemToggle:createWithTarget(${1:Ref* target},${2:SEL_MenuHandler selector},${3:MenuItem* item},${4:...})"
			],
			"description": "MenuItemToggle * MenuItemToggle::createWithTarget(Ref* target, SEL_MenuHandler selector, MenuItem* item, ...)"
		},
		 "bool Component::init()": {
			"prefix": "bool Component::init()",
			"body": [
				"bool Component:init()"
			],
			"description": "bool Component::init()"
		},
		 "void GLViewImpl::setViewPortInPoints(float x , float y , float w , float h)": {
			"prefix": "void GLViewImpl::setViewPortInPoints(float x , float y , float w , float h)",
			"body": [
				"GLViewImpl:setViewPortInPoints(${1:float x},${2:float y},${3:float w},${4:float h})"
			],
			"description": "void GLViewImpl::setViewPortInPoints(float x , float y , float w , float h)"
		},
		 "const BlendFunc& DrawNode::getBlendFunc() const": {
			"prefix": "const BlendFunc& DrawNode::getBlendFunc() const",
			"body": [
				" BlendFunc& DrawNode:getBlendFunc() "
			],
			"description": "const BlendFunc& DrawNode::getBlendFunc() const"
		},
		 "void Layout::setLoopFocus(bool loop)": {
			"prefix": "void Layout::setLoopFocus(bool loop)",
			"body": [
				"Layout:setLoopFocus(${1:bool loop})"
			],
			"description": "void Layout::setLoopFocus(bool loop)"
		},
		 "ActionTween *ActionTween::clone() const": {
			"prefix": "ActionTween *ActionTween::clone() const",
			"body": [
				"ActionTween *ActionTween:clone() "
			],
			"description": "ActionTween *ActionTween::clone() const"
		},
		 "void FadeOut::startWithTarget(cocos2d::Node *target)": {
			"prefix": "void FadeOut::startWithTarget(cocos2d::Node *target)",
			"body": [
				"FadeOut:startWithTarget(${1:cocos2d:Node *target})"
			],
			"description": "void FadeOut::startWithTarget(cocos2d::Node *target)"
		},
		 "void ActionFrame::setEasingParameter(std::vector<float>& parameter)": {
			"prefix": "void ActionFrame::setEasingParameter(std::vector<float>& parameter)",
			"body": [
				"ActionFrame:setEasingParameter(${1:std:vector<float>& parameter})"
			],
			"description": "void ActionFrame::setEasingParameter(std::vector<float>& parameter)"
		},
		 "Size Size::operator+(const Size& right) const": {
			"prefix": "Size Size::operator+(const Size& right) const",
			"body": [
				"Size:operator+(${1:Size& right})"
			],
			"description": "Size Size::operator+(const Size& right) const"
		},
		 "void ClippingNode::onAfterVisit()": {
			"prefix": "void ClippingNode::onAfterVisit()",
			"body": [
				"void ClippingNode:onAfterVisit()"
			],
			"description": "void ClippingNode::onAfterVisit()"
		},
		 "void Vec3::normalize()": {
			"prefix": "void Vec3::normalize()",
			"body": [
				"void Vec3:normalize()"
			],
			"description": "void Vec3::normalize()"
		},
		 "Layout* PageView::createPage()": {
			"prefix": "Layout* PageView::createPage()",
			"body": [
				"Layout* PageView:createPage()"
			],
			"description": "Layout* PageView::createPage()"
		},
		 "cocos2d::Vec3 Physics3DConeTwistConstraint::GetPointForAngle(float fAngleInRadians, float fLength) const": {
			"prefix": "cocos2d::Vec3 Physics3DConeTwistConstraint::GetPointForAngle(float fAngleInRadians, float fLength) const",
			"body": [
				"Physics3DConeTwistConstraint:GetPointForAngle(${1:float fAngleInRadians},${2:float fLength})"
			],
			"description": "cocos2d::Vec3 Physics3DConeTwistConstraint::GetPointForAngle(float fAngleInRadians, float fLength) const"
		},
		 "void Sprite3D::setGLProgram(GLProgram* glprogram)": {
			"prefix": "void Sprite3D::setGLProgram(GLProgram* glprogram)",
			"body": [
				"Sprite3D:setGLProgram(${1:GLProgram* glprogram})"
			],
			"description": "void Sprite3D::setGLProgram(GLProgram* glprogram)"
		},
		 "void Widget::setHighlighted(bool hilight)": {
			"prefix": "void Widget::setHighlighted(bool hilight)",
			"body": [
				"Widget:setHighlighted(${1:bool hilight})"
			],
			"description": "void Widget::setHighlighted(bool hilight)"
		},
		 "void Armature::setBody(cpBody *body)": {
			"prefix": "void Armature::setBody(cpBody *body)",
			"body": [
				"Armature:setBody(${1:cpBody *body})"
			],
			"description": "void Armature::setBody(cpBody *body)"
		},
		 "void RenderTexture::onBegin()": {
			"prefix": "void RenderTexture::onBegin()",
			"body": [
				"void RenderTexture:onBegin()"
			],
			"description": "void RenderTexture::onBegin()"
		},
		 "void LabelBMFontLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char * pPropertyName, const char* pText, CCBReader * ccbReader)": {
			"prefix": "void LabelBMFontLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char * pPropertyName, const char* pText, CCBReader * ccbReader)",
			"body": [
				"LabelBMFontLoader:onHandlePropTypeText(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:char* pText},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelBMFontLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char * pPropertyName, const char* pText, CCBReader * ccbReader)"
		},
		 "bool AABB::intersects(const AABB& aabb) const": {
			"prefix": "bool AABB::intersects(const AABB& aabb) const",
			"body": [
				"AABB:intersects(${1:AABB& aabb})"
			],
			"description": "bool AABB::intersects(const AABB& aabb) const"
		},
		 "Action* Sprite3D::runAction(Action *action)": {
			"prefix": "Action* Sprite3D::runAction(Action *action)",
			"body": [
				"Sprite3D:runAction(${1:Action *action})"
			],
			"description": "Action* Sprite3D::runAction(Action *action)"
		},
		 "void Controller::stopDiscoveryController()": {
			"prefix": "void Controller::stopDiscoveryController()",
			"body": [
				"void Controller:stopDiscoveryController()"
			],
			"description": "void Controller::stopDiscoveryController()"
		},
		 "void Layer::onKeyReleased(EventKeyboard::KeyCode keyCode, Event* unused_event)": {
			"prefix": "void Layer::onKeyReleased(EventKeyboard::KeyCode keyCode, Event* unused_event)",
			"body": [
				"Layer:onKeyReleased(${1:EventKeyboard:KeyCode keyCode},${2:Event* unused_event})"
			],
			"description": "void Layer::onKeyReleased(EventKeyboard::KeyCode keyCode, Event* unused_event)"
		},
		 "Widget* Text::createCloneInstance()": {
			"prefix": "Widget* Text::createCloneInstance()",
			"body": [
				"Widget* Text:createCloneInstance()"
			],
			"description": "Widget* Text::createCloneInstance()"
		},
		 "DecorativeDisplay *DisplayManager::getCurrentDecorativeDisplay() const": {
			"prefix": "DecorativeDisplay *DisplayManager::getCurrentDecorativeDisplay() const",
			"body": [
				"DecorativeDisplay *DisplayManager:getCurrentDecorativeDisplay() "
			],
			"description": "DecorativeDisplay *DisplayManager::getCurrentDecorativeDisplay() const"
		},
		 "void TransitionTurnOffTiles::onExit()": {
			"prefix": "void TransitionTurnOffTiles::onExit()",
			"body": [
				"void TransitionTurnOffTiles:onExit()"
			],
			"description": "void TransitionTurnOffTiles::onExit()"
		},
		 "Place * Place::reverse() const": {
			"prefix": "Place * Place::reverse() const",
			"body": [
				"Place * Place:reverse() "
			],
			"description": "Place * Place::reverse() const"
		},
		 "void Node::schedule(const std::function<void(float)> &callback, const std::string &key)": {
			"prefix": "void Node::schedule(const std::function<void(float)> &callback, const std::string &key)",
			"body": [
				"Node:schedule(${1:std:function<void(float})"
			],
			"description": "void Node::schedule(const std::function<void(float)> &callback, const std::string &key)"
		},
		 "void TransitionScene::sceneOrder()": {
			"prefix": "void TransitionScene::sceneOrder()",
			"body": [
				"void TransitionScene:sceneOrder()"
			],
			"description": "void TransitionScene::sceneOrder()"
		},
		 "void DrawNode::drawPoints(const Vec2 *position, unsigned int numberOfPoints, const float pointSize, const Color4F &color)": {
			"prefix": "void DrawNode::drawPoints(const Vec2 *position, unsigned int numberOfPoints, const float pointSize, const Color4F &color)",
			"body": [
				"DrawNode:drawPoints(${1:Vec2 *position},${2:unsigned int numberOfPoints},${3:float pointSize},${4:Color4F &color})"
			],
			"description": "void DrawNode::drawPoints(const Vec2 *position, unsigned int numberOfPoints, const float pointSize, const Color4F &color)"
		},
		 "void TextField::copySpecialProperties(Widget *widget)": {
			"prefix": "void TextField::copySpecialProperties(Widget *widget)",
			"body": [
				"TextField:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void TextField::copySpecialProperties(Widget *widget)"
		},
		 "void FontAtlas::addTexture(Texture2D *texture, int slot)": {
			"prefix": "void FontAtlas::addTexture(Texture2D *texture, int slot)",
			"body": [
				"FontAtlas:addTexture(${1:Texture2D *texture},${2:int slot})"
			],
			"description": "void FontAtlas::addTexture(Texture2D *texture, int slot)"
		},
		 "void SpriteFrame::setRect(const Rect& rect)": {
			"prefix": "void SpriteFrame::setRect(const Rect& rect)",
			"body": [
				"SpriteFrame:setRect(${1:Rect& rect})"
			],
			"description": "void SpriteFrame::setRect(const Rect& rect)"
		},
		 "float	Physics3DHingeConstraint::getLowerLimit() const": {
			"prefix": "float	Physics3DHingeConstraint::getLowerLimit() const",
			"body": [
				"float	Physics3DHingeConstraint:getLowerLimit() "
			],
			"description": "float	Physics3DHingeConstraint::getLowerLimit() const"
		},
		 "void LinearHorizontalLayoutManager::doLayout(LayoutProtocol* layout)": {
			"prefix": "void LinearHorizontalLayoutManager::doLayout(LayoutProtocol* layout)",
			"body": [
				"LinearHorizontalLayoutManager:doLayout(${1:LayoutProtocol* layout})"
			],
			"description": "void LinearHorizontalLayoutManager::doLayout(LayoutProtocol* layout)"
		},
		 "void ListView::removeLastItem()": {
			"prefix": "void ListView::removeLastItem()",
			"body": [
				"void ListView:removeLastItem()"
			],
			"description": "void ListView::removeLastItem()"
		},
		 "const BlendFunc &LayerColor::getBlendFunc() const": {
			"prefix": "const BlendFunc &LayerColor::getBlendFunc() const",
			"body": [
				" BlendFunc &LayerColor:getBlendFunc() "
			],
			"description": "const BlendFunc &LayerColor::getBlendFunc() const"
		},
		 "bool TextureData::init()": {
			"prefix": "bool TextureData::init()",
			"body": [
				"bool TextureData:init()"
			],
			"description": "bool TextureData::init()"
		},
		 "bool Widget::isPropagateTouchEvents()const": {
			"prefix": "bool Widget::isPropagateTouchEvents()const",
			"body": [
				"bool Widget:isPropagateTouchEvents()"
			],
			"description": "bool Widget::isPropagateTouchEvents()const"
		},
		 "void Button::normalTextureScaleChangedWithSize()": {
			"prefix": "void Button::normalTextureScaleChangedWithSize()",
			"body": [
				"void Button:normalTextureScaleChangedWithSize()"
			],
			"description": "void Button::normalTextureScaleChangedWithSize()"
		},
		 "void Node::schedule(const std::function<void(float)>& callback, float interval, unsigned int repeat, float delay, const std::string &key)": {
			"prefix": "void Node::schedule(const std::function<void(float)>& callback, float interval, unsigned int repeat, float delay, const std::string &key)",
			"body": [
				"Node:schedule(${1:std:function<void(float})"
			],
			"description": "void Node::schedule(const std::function<void(float)>& callback, float interval, unsigned int repeat, float delay, const std::string &key)"
		},
		 "void Node::onExitTransitionDidStart()": {
			"prefix": "void Node::onExitTransitionDidStart()",
			"body": [
				"void Node:onExitTransitionDidStart()"
			],
			"description": "void Node::onExitTransitionDidStart()"
		},
		 "bool NodeLoader::parsePropTypeCheck(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)": {
			"prefix": "bool NodeLoader::parsePropTypeCheck(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)",
			"body": [
				"NodeLoader:parsePropTypeCheck(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader},${4:char *pPropertyName})"
			],
			"description": "bool NodeLoader::parsePropTypeCheck(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)"
		},
		 "void Label::setDimensions(float width, float height)": {
			"prefix": "void Label::setDimensions(float width, float height)",
			"body": [
				"Label:setDimensions(${1:float width},${2:float height})"
			],
			"description": "void Label::setDimensions(float width, float height)"
		},
		 "const Mat4& Bone3D::getInverseBindPose()": {
			"prefix": "const Mat4& Bone3D::getInverseBindPose()",
			"body": [
				" Mat4& Bone3D:getInverseBindPose()"
			],
			"description": "const Mat4& Bone3D::getInverseBindPose()"
		},
		 "static RenderState::FrontFace parseFrontFace(const std::string& value)": {
			"prefix": "static RenderState::FrontFace parseFrontFace(const std::string& value)",
			"body": [
				"RenderState:FrontFace parseFrontFace(${1:std:string& value})"
			],
			"description": "static RenderState::FrontFace parseFrontFace(const std::string& value)"
		},
		 "void BoneNodeReader::destroyInstance()": {
			"prefix": "void BoneNodeReader::destroyInstance()",
			"body": [
				"void BoneNodeReader:destroyInstance()"
			],
			"description": "void BoneNodeReader::destroyInstance()"
		},
		 "void ComAudio::setFile(const char* pszFilePath)": {
			"prefix": "void ComAudio::setFile(const char* pszFilePath)",
			"body": [
				"ComAudio:setFile(${1:char* pszFilePath})"
			],
			"description": "void ComAudio::setFile(const char* pszFilePath)"
		},
		 "void PhysicsShape::setScale(float scaleX, float scaleY)": {
			"prefix": "void PhysicsShape::setScale(float scaleX, float scaleY)",
			"body": [
				"PhysicsShape:setScale(${1:float scaleX},${2:float scaleY})"
			],
			"description": "void PhysicsShape::setScale(float scaleX, float scaleY)"
		},
		 "NavMeshAgent* NavMeshAgent::create(const NavMeshAgentParam &param)": {
			"prefix": "NavMeshAgent* NavMeshAgent::create(const NavMeshAgentParam &param)",
			"body": [
				"NavMeshAgent:create(${1:NavMeshAgentParam &param})"
			],
			"description": "NavMeshAgent* NavMeshAgent::create(const NavMeshAgentParam &param)"
		},
		 "void TransitionShrinkGrow::onEnter()": {
			"prefix": "void TransitionShrinkGrow::onEnter()",
			"body": [
				"void TransitionShrinkGrow:onEnter()"
			],
			"description": "void TransitionShrinkGrow::onEnter()"
		},
		 "void Button::setPressedActionEnabled(bool enabled)": {
			"prefix": "void Button::setPressedActionEnabled(bool enabled)",
			"body": [
				"Button:setPressedActionEnabled(${1:bool enabled})"
			],
			"description": "void Button::setPressedActionEnabled(bool enabled)"
		},
		 "bool OBB::containPoint(const Vec3& point) const": {
			"prefix": "bool OBB::containPoint(const Vec3& point) const",
			"body": [
				"OBB:containPoint(${1:Vec3& point})"
			],
			"description": "bool OBB::containPoint(const Vec3& point) const"
		},
		 "void cocos2d::NavMeshAgent::convertTodtAgentParam(const NavMeshAgentParam &inParam, dtCrowdAgentParams &outParam)": {
			"prefix": "void cocos2d::NavMeshAgent::convertTodtAgentParam(const NavMeshAgentParam &inParam, dtCrowdAgentParams &outParam)",
			"body": [
				"cocos2d:NavMeshAgent:convertTodtAgentParam(${1:NavMeshAgentParam &inParam},${2:dtCrowdAgentParams &outParam})"
			],
			"description": "void cocos2d::NavMeshAgent::convertTodtAgentParam(const NavMeshAgentParam &inParam, dtCrowdAgentParams &outParam)"
		},
		 "Frame* ActionTimelineCache::loadAnchorPointFrame (const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadAnchorPointFrame (const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadAnchorPointFrame (${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadAnchorPointFrame (const rapidjson::Value& json)"
		},
		 "std::string PrettyPrinter::getResult()": {
			"prefix": "std::string PrettyPrinter::getResult()",
			"body": [
				"std:string PrettyPrinter:getResult()"
			],
			"description": "std::string PrettyPrinter::getResult()"
		},
		 "void PointArray::setControlPoints(vector<Vec2*> *controlPoints)": {
			"prefix": "void PointArray::setControlPoints(vector<Vec2*> *controlPoints)",
			"body": [
				"PointArray:setControlPoints(${1:vector<Vec2*> *controlPoints})"
			],
			"description": "void PointArray::setControlPoints(vector<Vec2*> *controlPoints)"
		},
		 "EaseSineOut* EaseSineOut::create(ActionInterval* action)": {
			"prefix": "EaseSineOut* EaseSineOut::create(ActionInterval* action)",
			"body": [
				"EaseSineOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseSineOut* EaseSineOut::create(ActionInterval* action)"
		},
		 "const VertexStreamAttribute* VertexData::getStreamAttribute(int semantic) const": {
			"prefix": "const VertexStreamAttribute* VertexData::getStreamAttribute(int semantic) const",
			"body": [
				"VertexStreamAttribute* VertexData:getStreamAttribute(${1:int semantic})"
			],
			"description": "const VertexStreamAttribute* VertexData::getStreamAttribute(int semantic) const"
		},
		 "bool TMXMapInfo::initWithXML(const std::string& tmxString, const std::string& resourcePath)": {
			"prefix": "bool TMXMapInfo::initWithXML(const std::string& tmxString, const std::string& resourcePath)",
			"body": [
				"TMXMapInfo:initWithXML(${1:std:string& tmxString},${2:std:string& resourcePath})"
			],
			"description": "bool TMXMapInfo::initWithXML(const std::string& tmxString, const std::string& resourcePath)"
		},
		 "GLViewImpl* GLViewImpl::createWithFullScreen(const std::string& viewName, const GLFWvidmode &videoMode, GLFWmonitor *monitor)": {
			"prefix": "GLViewImpl* GLViewImpl::createWithFullScreen(const std::string& viewName, const GLFWvidmode &videoMode, GLFWmonitor *monitor)",
			"body": [
				"GLViewImpl:createWithFullScreen(${1:std:string& viewName},${2:GLFWvidmode &videoMode},${3:GLFWmonitor *monitor})"
			],
			"description": "GLViewImpl* GLViewImpl::createWithFullScreen(const std::string& viewName, const GLFWvidmode &videoMode, GLFWmonitor *monitor)"
		},
		 "void Layout::addChild(Node* child)": {
			"prefix": "void Layout::addChild(Node* child)",
			"body": [
				"Layout:addChild(${1:Node* child})"
			],
			"description": "void Layout::addChild(Node* child)"
		},
		 "bool FadeTo::initWithDuration(float duration, GLubyte opacity)": {
			"prefix": "bool FadeTo::initWithDuration(float duration, GLubyte opacity)",
			"body": [
				"FadeTo:initWithDuration(${1:float duration},${2:GLubyte opacity})"
			],
			"description": "bool FadeTo::initWithDuration(float duration, GLubyte opacity)"
		},
		 "bool ComController::isEnabled() const": {
			"prefix": "bool ComController::isEnabled() const",
			"body": [
				"bool ComController:isEnabled() "
			],
			"description": "bool ComController::isEnabled() const"
		},
		 "void ParticleSystemQuad::listenRendererRecreated(EventCustom* event)": {
			"prefix": "void ParticleSystemQuad::listenRendererRecreated(EventCustom* event)",
			"body": [
				"ParticleSystemQuad:listenRendererRecreated(${1:EventCustom* event})"
			],
			"description": "void ParticleSystemQuad::listenRendererRecreated(EventCustom* event)"
		},
		 "const char* Texture2D::getStringForFormat() const": {
			"prefix": "const char* Texture2D::getStringForFormat() const",
			"body": [
				" char* Texture2D:getStringForFormat() "
			],
			"description": "const char* Texture2D::getStringForFormat() const"
		},
		 "ssize_t ListView::getIndex(Widget *item) const": {
			"prefix": "ssize_t ListView::getIndex(Widget *item) const",
			"body": [
				"ListView:getIndex(${1:Widget *item})"
			],
			"description": "ssize_t ListView::getIndex(Widget *item) const"
		},
		 "bool Texture2D::initWithImage(Image *image, PixelFormat format)": {
			"prefix": "bool Texture2D::initWithImage(Image *image, PixelFormat format)",
			"body": [
				"Texture2D:initWithImage(${1:Image *image},${2:PixelFormat format})"
			],
			"description": "bool Texture2D::initWithImage(Image *image, PixelFormat format)"
		},
		 "void BaseLight::onEnter()": {
			"prefix": "void BaseLight::onEnter()",
			"body": [
				"void BaseLight:onEnter()"
			],
			"description": "void BaseLight::onEnter()"
		},
		 "void ColorFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void ColorFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"ColorFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void ColorFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "ComAudio* ComAudio::create(void)": {
			"prefix": "ComAudio* ComAudio::create(void)",
			"body": [
				"ComAudio:create(${1:void})"
			],
			"description": "ComAudio* ComAudio::create(void)"
		},
		 "void Sprite::setPosition(const Vec2& pos)": {
			"prefix": "void Sprite::setPosition(const Vec2& pos)",
			"body": [
				"Sprite:setPosition(${1:Vec2& pos})"
			],
			"description": "void Sprite::setPosition(const Vec2& pos)"
		},
		 "std::string FontAtlasCache::generateFontName(const std::string& fontFileName, int size, bool useDistanceField)": {
			"prefix": "std::string FontAtlasCache::generateFontName(const std::string& fontFileName, int size, bool useDistanceField)",
			"body": [
				"FontAtlasCache:generateFontName(${1:std:string& fontFileName},${2:int size},${3:bool useDistanceField})"
			],
			"description": "std::string FontAtlasCache::generateFontName(const std::string& fontFileName, int size, bool useDistanceField)"
		},
		 "void BatchCommand::execute()": {
			"prefix": "void BatchCommand::execute()",
			"body": [
				"void BatchCommand:execute()"
			],
			"description": "void BatchCommand::execute()"
		},
		 "void MenuItemImage::setSelectedSpriteFrame(SpriteFrame * frame)": {
			"prefix": "void MenuItemImage::setSelectedSpriteFrame(SpriteFrame * frame)",
			"body": [
				"MenuItemImage:setSelectedSpriteFrame(${1:SpriteFrame * frame})"
			],
			"description": "void MenuItemImage::setSelectedSpriteFrame(SpriteFrame * frame)"
		},
		 "void Physics3DRigidBody::setCcdSweptSphereRadius( float radius )": {
			"prefix": "void Physics3DRigidBody::setCcdSweptSphereRadius( float radius )",
			"body": [
				"Physics3DRigidBody:setCcdSweptSphereRadius(${1:float radius})"
			],
			"description": "void Physics3DRigidBody::setCcdSweptSphereRadius( float radius )"
		},
		 "void Menu::onEnter()": {
			"prefix": "void Menu::onEnter()",
			"body": [
				"void Menu:onEnter()"
			],
			"description": "void Menu::onEnter()"
		},
		 "void CardinalSplineTo::update(float time)": {
			"prefix": "void CardinalSplineTo::update(float time)",
			"body": [
				"CardinalSplineTo:update(${1:float time})"
			],
			"description": "void CardinalSplineTo::update(float time)"
		},
		 "Node* ClippingNode::getStencil() const": {
			"prefix": "Node* ClippingNode::getStencil() const",
			"body": [
				"Node* ClippingNode:getStencil() "
			],
			"description": "Node* ClippingNode::getStencil() const"
		},
		 "void Mesh::setGLProgramState(GLProgramState* glProgramState)": {
			"prefix": "void Mesh::setGLProgramState(GLProgramState* glProgramState)",
			"body": [
				"Mesh:setGLProgramState(${1:GLProgramState* glProgramState})"
			],
			"description": "void Mesh::setGLProgramState(GLProgramState* glProgramState)"
		},
		 "void TextBMFont::labelBMFontScaleChangedWithSize()": {
			"prefix": "void TextBMFont::labelBMFontScaleChangedWithSize()",
			"body": [
				"void TextBMFont:labelBMFontScaleChangedWithSize()"
			],
			"description": "void TextBMFont::labelBMFontScaleChangedWithSize()"
		},
		 "bool MoveBy::initWithDuration(float duration, const Vec3& deltaPosition)": {
			"prefix": "bool MoveBy::initWithDuration(float duration, const Vec3& deltaPosition)",
			"body": [
				"MoveBy:initWithDuration(${1:float duration},${2:Vec3& deltaPosition})"
			],
			"description": "bool MoveBy::initWithDuration(float duration, const Vec3& deltaPosition)"
		},
		 "int Slider::getMaxPercent()const": {
			"prefix": "int Slider::getMaxPercent()const",
			"body": [
				"int Slider:getMaxPercent()"
			],
			"description": "int Slider::getMaxPercent()const"
		},
		 "bool OrbitCamera::initWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)": {
			"prefix": "bool OrbitCamera::initWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)",
			"body": [
				"OrbitCamera:initWithDuration(${1:float t},${2:float radius},${3:float deltaRadius},${4:float angleZ},${5:float deltaAngleZ},${6:float angleX},${7:float deltaAngleX})"
			],
			"description": "bool OrbitCamera::initWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)"
		},
		 "void LayerColor::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void LayerColor::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"LayerColor:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void LayerColor::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void Camera::onExit()": {
			"prefix": "void Camera::onExit()",
			"body": [
				"void Camera:onExit()"
			],
			"description": "void Camera::onExit()"
		},
		 "void FlipX3D::update(float time)": {
			"prefix": "void FlipX3D::update(float time)",
			"body": [
				"FlipX3D:update(${1:float time})"
			],
			"description": "void FlipX3D::update(float time)"
		},
		 "const char* Properties::getString(const char* name, const char* defaultValue) const": {
			"prefix": "const char* Properties::getString(const char* name, const char* defaultValue) const",
			"body": [
				"char* Properties:getString(${1:char* name},${2:char* defaultValue})"
			],
			"description": "const char* Properties::getString(const char* name, const char* defaultValue) const"
		},
		 "void ParticleSystem::setEndRadiusVar(float endRadiusVar)": {
			"prefix": "void ParticleSystem::setEndRadiusVar(float endRadiusVar)",
			"body": [
				"ParticleSystem:setEndRadiusVar(${1:float endRadiusVar})"
			],
			"description": "void ParticleSystem::setEndRadiusVar(float endRadiusVar)"
		},
		 "const std::string& LabelTTF::getString() const": {
			"prefix": "const std::string& LabelTTF::getString() const",
			"body": [
				" std:string& LabelTTF:getString() "
			],
			"description": "const std::string& LabelTTF::getString() const"
		},
		 "bool AudioEngine::setCurrentTime(int audioID, float time)": {
			"prefix": "bool AudioEngine::setCurrentTime(int audioID, float time)",
			"body": [
				"AudioEngine:setCurrentTime(${1:int audioID},${2:float time})"
			],
			"description": "bool AudioEngine::setCurrentTime(int audioID, float time)"
		},
		 "void InputDelegate::setTouchPriority(int priority)": {
			"prefix": "void InputDelegate::setTouchPriority(int priority)",
			"body": [
				"InputDelegate:setTouchPriority(${1:int priority})"
			],
			"description": "void InputDelegate::setTouchPriority(int priority)"
		},
		 "ListView* ListView::create()": {
			"prefix": "ListView* ListView::create()",
			"body": [
				"ListView* ListView:create()"
			],
			"description": "ListView* ListView::create()"
		},
		 "void WidgetPropertiesReader0250::setPropsForWidgetFromJsonDictionary(Widget*widget,const rapidjson::Value&options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForWidgetFromJsonDictionary(Widget*widget,const rapidjson::Value&options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForWidgetFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value&options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForWidgetFromJsonDictionary(Widget*widget,const rapidjson::Value&options)"
		},
		 "Color4B BaseData::getColor()": {
			"prefix": "Color4B BaseData::getColor()",
			"body": [
				"Color4B BaseData:getColor()"
			],
			"description": "Color4B BaseData::getColor()"
		},
		 "void Label::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void Label::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"Label:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void Label::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage)": {
			"prefix": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage)",
			"body": [
				"* MenuItemImage:create(${1:std:string& normalImage},${2:std:string& selectedImage},${3:std:string& disabledImage})"
			],
			"description": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage)"
		},
		 "std::string SocketIOPacket::stringify()const": {
			"prefix": "std::string SocketIOPacket::stringify()const",
			"body": [
				"std:string SocketIOPacket:stringify()"
			],
			"description": "std::string SocketIOPacket::stringify()const"
		},
		 "void Speed::startWithTarget(Node* target)": {
			"prefix": "void Speed::startWithTarget(Node* target)",
			"body": [
				"Speed:startWithTarget(${1:Node* target})"
			],
			"description": "void Speed::startWithTarget(Node* target)"
		},
		 "SplitCols* SplitCols::clone() const": {
			"prefix": "SplitCols* SplitCols::clone() const",
			"body": [
				"SplitCols* SplitCols:clone() "
			],
			"description": "SplitCols* SplitCols::clone() const"
		},
		 "void WidgetPropertiesReader0250::setPropsForLabelAtlasFromJsonDictionary(Widget*widget,const rapidjson::Value& options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForLabelAtlasFromJsonDictionary(Widget*widget,const rapidjson::Value& options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForLabelAtlasFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value& options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForLabelAtlasFromJsonDictionary(Widget*widget,const rapidjson::Value& options)"
		},
		 "FadeIn* FadeIn::create(float d)": {
			"prefix": "FadeIn* FadeIn::create(float d)",
			"body": [
				"FadeIn:create(${1:float d})"
			],
			"description": "FadeIn* FadeIn::create(float d)"
		},
		 "bool Action::isDone() const": {
			"prefix": "bool Action::isDone() const",
			"body": [
				"bool Action:isDone() "
			],
			"description": "bool Action::isDone() const"
		},
		 "bool TMXMapInfo::parseXMLString(const std::string& xmlString)": {
			"prefix": "bool TMXMapInfo::parseXMLString(const std::string& xmlString)",
			"body": [
				"TMXMapInfo:parseXMLString(${1:std:string& xmlString})"
			],
			"description": "bool TMXMapInfo::parseXMLString(const std::string& xmlString)"
		},
		 "bool Texture2D::isContain9PatchInfo()const": {
			"prefix": "bool Texture2D::isContain9PatchInfo()const",
			"body": [
				"bool Texture2D:isContain9PatchInfo()"
			],
			"description": "bool Texture2D::isContain9PatchInfo()const"
		},
		 "void SkeletonRenderer::initWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)": {
			"prefix": "void SkeletonRenderer::initWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)",
			"body": [
				"SkeletonRenderer:initWithFile (${1:std:string& skeletonDataFile},${2:std:string& atlasFile},${3:float scale})"
			],
			"description": "void SkeletonRenderer::initWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)"
		},
		 "void ArmatureAnimation::setFrameEventCallFunc(Ref *target, SEL_FrameEventCallFunc callFunc)": {
			"prefix": "void ArmatureAnimation::setFrameEventCallFunc(Ref *target, SEL_FrameEventCallFunc callFunc)",
			"body": [
				"ArmatureAnimation:setFrameEventCallFunc(${1:Ref *target},${2:SEL_FrameEventCallFunc callFunc})"
			],
			"description": "void ArmatureAnimation::setFrameEventCallFunc(Ref *target, SEL_FrameEventCallFunc callFunc)"
		},
		 "void Mesh::calculateAABB()": {
			"prefix": "void Mesh::calculateAABB()",
			"body": [
				"void Mesh:calculateAABB()"
			],
			"description": "void Mesh::calculateAABB()"
		},
		 "void Node::childrenAlloc()": {
			"prefix": "void Node::childrenAlloc()",
			"body": [
				"void Node:childrenAlloc()"
			],
			"description": "void Node::childrenAlloc()"
		},
		 "static std::string StringWideCharToUtf8(const std::wstring& strWideChar)": {
			"prefix": "static std::string StringWideCharToUtf8(const std::wstring& strWideChar)",
			"body": [
				"std:string StringWideCharToUtf8(${1:std:wstring& strWideChar})"
			],
			"description": "static std::string StringWideCharToUtf8(const std::wstring& strWideChar)"
		},
		 "bool Terrain::Triangle::getInsterctPoint(const Ray &ray, Vec3& interScetPoint)const": {
			"prefix": "bool Terrain::Triangle::getInsterctPoint(const Ray &ray, Vec3& interScetPoint)const",
			"body": [
				"Terrain:Triangle:getInsterctPoint(${1:Ray &ray},${2:Vec3& interScetPoint})"
			],
			"description": "bool Terrain::Triangle::getInsterctPoint(const Ray &ray, Vec3& interScetPoint)const"
		},
		 "void Terrain::Chunk::updateIndicesLOD()": {
			"prefix": "void Terrain::Chunk::updateIndicesLOD()",
			"body": [
				"void Terrain:Chunk:updateIndicesLOD()"
			],
			"description": "void Terrain::Chunk::updateIndicesLOD()"
		},
		 "void TransformHelp::nodeConcat(BaseData &target, BaseData &source)": {
			"prefix": "void TransformHelp::nodeConcat(BaseData &target, BaseData &source)",
			"body": [
				"TransformHelp:nodeConcat(${1:BaseData &target},${2:BaseData &source})"
			],
			"description": "void TransformHelp::nodeConcat(BaseData &target, BaseData &source)"
		},
		 "bool ActionTween::initWithDuration(float duration, const std::string& key, float from, float to)": {
			"prefix": "bool ActionTween::initWithDuration(float duration, const std::string& key, float from, float to)",
			"body": [
				"ActionTween:initWithDuration(${1:float duration},${2:std:string& key},${3:float from},${4:float to})"
			],
			"description": "bool ActionTween::initWithDuration(float duration, const std::string& key, float from, float to)"
		},
		 "Color3B Button::getTitleColor() const": {
			"prefix": "Color3B Button::getTitleColor() const",
			"body": [
				"Color3B Button:getTitleColor() "
			],
			"description": "Color3B Button::getTitleColor() const"
		},
		 "CallFuncN * CallFuncN::create(Ref* selectorTarget, SEL_CallFuncN selector)": {
			"prefix": "CallFuncN * CallFuncN::create(Ref* selectorTarget, SEL_CallFuncN selector)",
			"body": [
				"* CallFuncN:create(${1:Ref* selectorTarget},${2:SEL_CallFuncN selector})"
			],
			"description": "CallFuncN * CallFuncN::create(Ref* selectorTarget, SEL_CallFuncN selector)"
		},
		 "DeccelAmplitude* DeccelAmplitude::clone() const": {
			"prefix": "DeccelAmplitude* DeccelAmplitude::clone() const",
			"body": [
				"DeccelAmplitude* DeccelAmplitude:clone() "
			],
			"description": "DeccelAmplitude* DeccelAmplitude::clone() const"
		},
		 "ActionInterval*  TransitionFadeTR::actionWithSize(const Size& size)": {
			"prefix": "ActionInterval*  TransitionFadeTR::actionWithSize(const Size& size)",
			"body": [
				"TransitionFadeTR:actionWithSize(${1:Size& size})"
			],
			"description": "ActionInterval*  TransitionFadeTR::actionWithSize(const Size& size)"
		},
		 "Spawn* Spawn::create(FiniteTimeAction *action1, ...)": {
			"prefix": "Spawn* Spawn::create(FiniteTimeAction *action1, ...)",
			"body": [
				"Spawn:create(${1:FiniteTimeAction *action1},${2:...})"
			],
			"description": "Spawn* Spawn::create(FiniteTimeAction *action1, ...)"
		},
		 "void GLViewImpl::onGLFWWindowSizeFunCallback(GLFWwindow *window, int width, int height)": {
			"prefix": "void GLViewImpl::onGLFWWindowSizeFunCallback(GLFWwindow *window, int width, int height)",
			"body": [
				"GLViewImpl:onGLFWWindowSizeFunCallback(${1:GLFWwindow *window},${2:int width},${3:int height})"
			],
			"description": "void GLViewImpl::onGLFWWindowSizeFunCallback(GLFWwindow *window, int width, int height)"
		},
		 "bool FileUtils::isDirectoryExist(const std::string& dirPath) const": {
			"prefix": "bool FileUtils::isDirectoryExist(const std::string& dirPath) const",
			"body": [
				"FileUtils:isDirectoryExist(${1:std:string& dirPath})"
			],
			"description": "bool FileUtils::isDirectoryExist(const std::string& dirPath) const"
		},
		 "SkewFrame* SkewFrame::create()": {
			"prefix": "SkewFrame* SkewFrame::create()",
			"body": [
				"SkewFrame* SkewFrame:create()"
			],
			"description": "SkewFrame* SkewFrame::create()"
		},
		 "MenuItemSprite * MenuItemSprite::create(Node *normalSprite, Node *selectedSprite, Node *disabledSprite, Ref *target, SEL_MenuHandler selector)": {
			"prefix": "MenuItemSprite * MenuItemSprite::create(Node *normalSprite, Node *selectedSprite, Node *disabledSprite, Ref *target, SEL_MenuHandler selector)",
			"body": [
				"* MenuItemSprite:create(${1:Node *normalSprite},${2:Node *selectedSprite},${3:Node *disabledSprite},${4:Ref *target},${5:SEL_MenuHandler selector})"
			],
			"description": "MenuItemSprite * MenuItemSprite::create(Node *normalSprite, Node *selectedSprite, Node *disabledSprite, Ref *target, SEL_MenuHandler selector)"
		},
		 "Text::Type Text::getType() const": {
			"prefix": "Text::Type Text::getType() const",
			"body": [
				"Text:Type Text:getType() "
			],
			"description": "Text::Type Text::getType() const"
		},
		 "ScaleBy* ScaleBy::create(float duration, float sx, float sy)": {
			"prefix": "ScaleBy* ScaleBy::create(float duration, float sx, float sy)",
			"body": [
				"ScaleBy:create(${1:float duration},${2:float sx},${3:float sy})"
			],
			"description": "ScaleBy* ScaleBy::create(float duration, float sx, float sy)"
		},
		 "void ParticleBatchNode::addChild(Node * aChild, int zOrder, const std::string &name)": {
			"prefix": "void ParticleBatchNode::addChild(Node * aChild, int zOrder, const std::string &name)",
			"body": [
				"ParticleBatchNode:addChild(${1:Node * aChild},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void ParticleBatchNode::addChild(Node * aChild, int zOrder, const std::string &name)"
		},
		 "void Sprite::setScaleY(float scaleY)": {
			"prefix": "void Sprite::setScaleY(float scaleY)",
			"body": [
				"Sprite:setScaleY(${1:float scaleY})"
			],
			"description": "void Sprite::setScaleY(float scaleY)"
		},
		 "const std::string& MenuItemFont::getFontName()": {
			"prefix": "const std::string& MenuItemFont::getFontName()",
			"body": [
				" std:string& MenuItemFont:getFontName()"
			],
			"description": "const std::string& MenuItemFont::getFontName()"
		},
		 "void CCBReader::setCCBRootPath(const char* ccbRootPath)": {
			"prefix": "void CCBReader::setCCBRootPath(const char* ccbRootPath)",
			"body": [
				"CCBReader:setCCBRootPath(${1:char* ccbRootPath})"
			],
			"description": "void CCBReader::setCCBRootPath(const char* ccbRootPath)"
		},
		 "void MenuItemFont::setFontName(const std::string& name)": {
			"prefix": "void MenuItemFont::setFontName(const std::string& name)",
			"body": [
				"MenuItemFont:setFontName(${1:std:string& name})"
			],
			"description": "void MenuItemFont::setFontName(const std::string& name)"
		},
		 "Ray::Ray(const Vec3& origin, const Vec3& direction)": {
			"prefix": "Ray::Ray(const Vec3& origin, const Vec3& direction)",
			"body": [
				"origin},${2:Vec3& direction})"
			],
			"description": "Ray::Ray(const Vec3& origin, const Vec3& direction)"
		},
		 "ParticleSpiral* ParticleSpiral::create()": {
			"prefix": "ParticleSpiral* ParticleSpiral::create()",
			"body": [
				"ParticleSpiral* ParticleSpiral:create()"
			],
			"description": "ParticleSpiral* ParticleSpiral::create()"
		},
		 "void Mat4::createLookAt(const Vec3& eyePosition, const Vec3& targetPosition, const Vec3& up, Mat4* dst)": {
			"prefix": "void Mat4::createLookAt(const Vec3& eyePosition, const Vec3& targetPosition, const Vec3& up, Mat4* dst)",
			"body": [
				"Mat4:createLookAt(${1:Vec3& eyePosition},${2:Vec3& targetPosition},${3:Vec3& up},${4:Mat4* dst})"
			],
			"description": "void Mat4::createLookAt(const Vec3& eyePosition, const Vec3& targetPosition, const Vec3& up, Mat4* dst)"
		},
		 "Widget* Widget::findNextFocusedWidget(FocusDirection direction,  Widget* current)": {
			"prefix": "Widget* Widget::findNextFocusedWidget(FocusDirection direction,  Widget* current)",
			"body": [
				"Widget:findNextFocusedWidget(${1:FocusDirection direction},${2:Widget* current})"
			],
			"description": "Widget* Widget::findNextFocusedWidget(FocusDirection direction,  Widget* current)"
		},
		 "Place* Place::create(const Vec2& pos)": {
			"prefix": "Place* Place::create(const Vec2& pos)",
			"body": [
				"Place:create(${1:Vec2& pos})"
			],
			"description": "Place* Place::create(const Vec2& pos)"
		},
		 "bool ActionObject::getLoop()": {
			"prefix": "bool ActionObject::getLoop()",
			"body": [
				"bool ActionObject:getLoop()"
			],
			"description": "bool ActionObject::getLoop()"
		},
		 "VBox* VBox::create()": {
			"prefix": "VBox* VBox::create()",
			"body": [
				"VBox* VBox:create()"
			],
			"description": "VBox* VBox::create()"
		},
		 "bool Bundle3D::loadMeshDatasBinary_0_1(MeshDatas& meshdatas)": {
			"prefix": "bool Bundle3D::loadMeshDatasBinary_0_1(MeshDatas& meshdatas)",
			"body": [
				"Bundle3D:loadMeshDatasBinary_0_1(${1:MeshDatas& meshdatas})"
			],
			"description": "bool Bundle3D::loadMeshDatasBinary_0_1(MeshDatas& meshdatas)"
		},
		 "TransitionSlideInR* TransitionSlideInR::create(float t, Scene* scene)": {
			"prefix": "TransitionSlideInR* TransitionSlideInR::create(float t, Scene* scene)",
			"body": [
				"TransitionSlideInR:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionSlideInR* TransitionSlideInR::create(float t, Scene* scene)"
		},
		 "RenderState* RenderState::getTopmost(RenderState* below)": {
			"prefix": "RenderState* RenderState::getTopmost(RenderState* below)",
			"body": [
				"RenderState:getTopmost(${1:RenderState* below})"
			],
			"description": "RenderState* RenderState::getTopmost(RenderState* below)"
		},
		 "Physics3DShape* Physics3DShape::createMesh( const cocos2d::Vec3 *triangles, int numTriangles )": {
			"prefix": "Physics3DShape* Physics3DShape::createMesh( const cocos2d::Vec3 *triangles, int numTriangles )",
			"body": [
				"Physics3DShape:createMesh(${1:cocos2d:Vec3 *triangles},${2:int numTriangles})"
			],
			"description": "Physics3DShape* Physics3DShape::createMesh( const cocos2d::Vec3 *triangles, int numTriangles )"
		},
		 "void RenderState::setTexture(Texture2D* texture)": {
			"prefix": "void RenderState::setTexture(Texture2D* texture)",
			"body": [
				"RenderState:setTexture(${1:Texture2D* texture})"
			],
			"description": "void RenderState::setTexture(Texture2D* texture)"
		},
		 "void Node::onExit()": {
			"prefix": "void Node::onExit()",
			"body": [
				"void Node:onExit()"
			],
			"description": "void Node::onExit()"
		},
		 "void Slider::setZoomScale(float scale)": {
			"prefix": "void Slider::setZoomScale(float scale)",
			"body": [
				"Slider:setZoomScale(${1:float scale})"
			],
			"description": "void Slider::setZoomScale(float scale)"
		},
		 "Physics3DShape* Physics3DShape::createConvexHull( const cocos2d::Vec3 *points, int numPoints )": {
			"prefix": "Physics3DShape* Physics3DShape::createConvexHull( const cocos2d::Vec3 *points, int numPoints )",
			"body": [
				"Physics3DShape:createConvexHull(${1:cocos2d:Vec3 *points},${2:int numPoints})"
			],
			"description": "Physics3DShape* Physics3DShape::createConvexHull( const cocos2d::Vec3 *points, int numPoints )"
		},
		 "void cocos2d::NavMeshObstacle::onExit()": {
			"prefix": "void cocos2d::NavMeshObstacle::onExit()",
			"body": [
				"void cocos2d:NavMeshObstacle:onExit()"
			],
			"description": "void cocos2d::NavMeshObstacle::onExit()"
		},
		 "void ShuffleTiles::update(float time)": {
			"prefix": "void ShuffleTiles::update(float time)",
			"body": [
				"ShuffleTiles:update(${1:float time})"
			],
			"description": "void ShuffleTiles::update(float time)"
		},
		 "float PhysicsJointSpring::getDamping() const": {
			"prefix": "float PhysicsJointSpring::getDamping() const",
			"body": [
				"float PhysicsJointSpring:getDamping() "
			],
			"description": "float PhysicsJointSpring::getDamping() const"
		},
		 "cocos2d::Component* SceneReader::createComponent(const std::string classname)": {
			"prefix": "cocos2d::Component* SceneReader::createComponent(const std::string classname)",
			"body": [
				"SceneReader:createComponent(${1:std:string classname})"
			],
			"description": "cocos2d::Component* SceneReader::createComponent(const std::string classname)"
		},
		 "void MenuItem::unselected()": {
			"prefix": "void MenuItem::unselected()",
			"body": [
				"void MenuItem:unselected()"
			],
			"description": "void MenuItem::unselected()"
		},
		 "void Sprite3DCache::removeSprite3DData(const std::string& key)": {
			"prefix": "void Sprite3DCache::removeSprite3DData(const std::string& key)",
			"body": [
				"Sprite3DCache:removeSprite3DData(${1:std:string& key})"
			],
			"description": "void Sprite3DCache::removeSprite3DData(const std::string& key)"
		},
		 "CCBRotateYTo* CCBRotateYTo::reverse() const": {
			"prefix": "CCBRotateYTo* CCBRotateYTo::reverse() const",
			"body": [
				"CCBRotateYTo* CCBRotateYTo:reverse() "
			],
			"description": "CCBRotateYTo* CCBRotateYTo::reverse() const"
		},
		 "void NodeLoader::onHandlePropTypeFloatXY(Node * pNode, Node * pParent, const char* pPropertyName, float * pFloat, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeFloatXY(Node * pNode, Node * pParent, const char* pPropertyName, float * pFloat, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeFloatXY(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:float * pFloat},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeFloatXY(Node * pNode, Node * pParent, const char* pPropertyName, float * pFloat, CCBReader * ccbReader)"
		},
		 "void EditBox::setAnchorPoint(const Vec2& anchorPoint)": {
			"prefix": "void EditBox::setAnchorPoint(const Vec2& anchorPoint)",
			"body": [
				"EditBox:setAnchorPoint(${1:Vec2& anchorPoint})"
			],
			"description": "void EditBox::setAnchorPoint(const Vec2& anchorPoint)"
		},
		 "int RadioButtonGroup::getSelectedButtonIndex() const": {
			"prefix": "int RadioButtonGroup::getSelectedButtonIndex() const",
			"body": [
				"int RadioButtonGroup:getSelectedButtonIndex() "
			],
			"description": "int RadioButtonGroup::getSelectedButtonIndex() const"
		},
		 "void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)": {
			"prefix": "void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)",
			"body": [
				"RenderTexture:beginWithClear(${1:float r},${2:float g},${3:float b},${4:float a},${5:float depthValue},${6:int stencilValue})"
			],
			"description": "void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)"
		},
		 "EventListenerPhysicsContactWithBodies* EventListenerPhysicsContactWithBodies::create(PhysicsBody* bodyA, PhysicsBody* bodyB)": {
			"prefix": "EventListenerPhysicsContactWithBodies* EventListenerPhysicsContactWithBodies::create(PhysicsBody* bodyA, PhysicsBody* bodyB)",
			"body": [
				"EventListenerPhysicsContactWithBodies:create(${1:PhysicsBody* bodyA},${2:PhysicsBody* bodyB})"
			],
			"description": "EventListenerPhysicsContactWithBodies* EventListenerPhysicsContactWithBodies::create(PhysicsBody* bodyA, PhysicsBody* bodyB)"
		},
		 "ValueVector FileUtils::getValueVectorFromFile(const std::string& filename)": {
			"prefix": "ValueVector FileUtils::getValueVectorFromFile(const std::string& filename)",
			"body": [
				"FileUtils:getValueVectorFromFile(${1:std:string& filename})"
			],
			"description": "ValueVector FileUtils::getValueVectorFromFile(const std::string& filename)"
		},
		 "MeshSkin* MeshSkin::create(Skeleton3D* skeleton, const std::vector<std::string>& boneNames, const std::vector<Mat4>& invBindPose)": {
			"prefix": "MeshSkin* MeshSkin::create(Skeleton3D* skeleton, const std::vector<std::string>& boneNames, const std::vector<Mat4>& invBindPose)",
			"body": [
				"MeshSkin:create(${1:Skeleton3D* skeleton},${2:std:vector<std:string>& boneNames},${3:std:vector<Mat4>& invBindPose})"
			],
			"description": "MeshSkin* MeshSkin::create(Skeleton3D* skeleton, const std::vector<std::string>& boneNames, const std::vector<Mat4>& invBindPose)"
		},
		 "void Console::loop()": {
			"prefix": "void Console::loop()",
			"body": [
				"void Console:loop()"
			],
			"description": "void Console::loop()"
		},
		 "bool GLProgramState::init(GLProgram* glprogram)": {
			"prefix": "bool GLProgramState::init(GLProgram* glprogram)",
			"body": [
				"GLProgramState:init(${1:GLProgram* glprogram})"
			],
			"description": "bool GLProgramState::init(GLProgram* glprogram)"
		},
		 "void Physics3DSliderConstraint::setDampingOrthoLin(float dampingOrthoLin)": {
			"prefix": "void Physics3DSliderConstraint::setDampingOrthoLin(float dampingOrthoLin)",
			"body": [
				"Physics3DSliderConstraint:setDampingOrthoLin(${1:float dampingOrthoLin})"
			],
			"description": "void Physics3DSliderConstraint::setDampingOrthoLin(float dampingOrthoLin)"
		},
		 "WidgetReaderProtocol* WidgetPropertiesReader::createWidgetReaderProtocol(const std::string &classname)": {
			"prefix": "WidgetReaderProtocol* WidgetPropertiesReader::createWidgetReaderProtocol(const std::string &classname)",
			"body": [
				"WidgetPropertiesReader:createWidgetReaderProtocol(${1:std:string &classname})"
			],
			"description": "WidgetReaderProtocol* WidgetPropertiesReader::createWidgetReaderProtocol(const std::string &classname)"
		},
		 "void MenuItem::setTarget(Ref *target, SEL_MenuHandler selector)": {
			"prefix": "void MenuItem::setTarget(Ref *target, SEL_MenuHandler selector)",
			"body": [
				"MenuItem:setTarget(${1:Ref *target},${2:SEL_MenuHandler selector})"
			],
			"description": "void MenuItem::setTarget(Ref *target, SEL_MenuHandler selector)"
		},
		 "void ThreadHelper::releaseAutoreleasePool(void* autoreleasePool)": {
			"prefix": "void ThreadHelper::releaseAutoreleasePool(void* autoreleasePool)",
			"body": [
				"ThreadHelper:releaseAutoreleasePool(${1:void* autoreleasePool})"
			],
			"description": "void ThreadHelper::releaseAutoreleasePool(void* autoreleasePool)"
		},
		 "EaseQuinticActionInOut* EaseQuinticActionInOut::create(ActionInterval* action)": {
			"prefix": "EaseQuinticActionInOut* EaseQuinticActionInOut::create(ActionInterval* action)",
			"body": [
				"EaseQuinticActionInOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseQuinticActionInOut* EaseQuinticActionInOut::create(ActionInterval* action)"
		},
		 "void GridBase::blit(void)": {
			"prefix": "void GridBase::blit(void)",
			"body": [
				"GridBase:blit(${1:void})"
			],
			"description": "void GridBase::blit(void)"
		},
		 "static EventListener::ListenerID __getListenerID(Event* event)": {
			"prefix": "static EventListener::ListenerID __getListenerID(Event* event)",
			"body": [
				"EventListener:ListenerID __getListenerID(${1:Event* event})"
			],
			"description": "static EventListener::ListenerID __getListenerID(Event* event)"
		},
		 "Node* CCBReader::readNodeGraphFromFile(const char *pCCBFileName)": {
			"prefix": "Node* CCBReader::readNodeGraphFromFile(const char *pCCBFileName)",
			"body": [
				"CCBReader:readNodeGraphFromFile(${1:char *pCCBFileName})"
			],
			"description": "Node* CCBReader::readNodeGraphFromFile(const char *pCCBFileName)"
		},
		 "void AbstractCheckButton::onPressStateChangedToNormal()": {
			"prefix": "void AbstractCheckButton::onPressStateChangedToNormal()",
			"body": [
				"void AbstractCheckButton:onPressStateChangedToNormal()"
			],
			"description": "void AbstractCheckButton::onPressStateChangedToNormal()"
		},
		 "StopGrid* StopGrid::reverse() const": {
			"prefix": "StopGrid* StopGrid::reverse() const",
			"body": [
				"StopGrid* StopGrid:reverse() "
			],
			"description": "StopGrid* StopGrid::reverse() const"
		},
		 "int CCBSequence::getSequenceId()": {
			"prefix": "int CCBSequence::getSequenceId()",
			"body": [
				"int CCBSequence:getSequenceId()"
			],
			"description": "int CCBSequence::getSequenceId()"
		},
		 "bool ComAttribute::serialize(void* r)": {
			"prefix": "bool ComAttribute::serialize(void* r)",
			"body": [
				"ComAttribute:serialize(${1:void* r})"
			],
			"description": "bool ComAttribute::serialize(void* r)"
		},
		 "void MenuItem::activate()": {
			"prefix": "void MenuItem::activate()",
			"body": [
				"void MenuItem:activate()"
			],
			"description": "void MenuItem::activate()"
		},
		 "TiledGrid3D* TiledGrid3D::create(const Size& gridSize)": {
			"prefix": "TiledGrid3D* TiledGrid3D::create(const Size& gridSize)",
			"body": [
				"TiledGrid3D:create(${1:Size& gridSize})"
			],
			"description": "TiledGrid3D* TiledGrid3D::create(const Size& gridSize)"
		},
		 "void Console::commandTouch(int fd, const std::string& args)": {
			"prefix": "void Console::commandTouch(int fd, const std::string& args)",
			"body": [
				"Console:commandTouch(${1:int fd},${2:std:string& args})"
			],
			"description": "void Console::commandTouch(int fd, const std::string& args)"
		},
		 "void CCBAnimationManager::setRootNode(Node *pRootNode)": {
			"prefix": "void CCBAnimationManager::setRootNode(Node *pRootNode)",
			"body": [
				"CCBAnimationManager:setRootNode(${1:Node *pRootNode})"
			],
			"description": "void CCBAnimationManager::setRootNode(Node *pRootNode)"
		},
		 "void EditBox::setPlaceholderFontColor(const Color4B& color)": {
			"prefix": "void EditBox::setPlaceholderFontColor(const Color4B& color)",
			"body": [
				"EditBox:setPlaceholderFontColor(${1:Color4B& color})"
			],
			"description": "void EditBox::setPlaceholderFontColor(const Color4B& color)"
		},
		 "Frame* EventFrame::clone()": {
			"prefix": "Frame* EventFrame::clone()",
			"body": [
				"Frame* EventFrame:clone()"
			],
			"description": "Frame* EventFrame::clone()"
		},
		 "int * FontFNT::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const": {
			"prefix": "int * FontFNT::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const",
			"body": [
				"* FontFNT:getHorizontalKerningForTextUTF16(${1:std:u16string& text},${2:int &outNumLetters})"
			],
			"description": "int * FontFNT::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const"
		},
		 "void BoneNode::onDraw(const cocos2d::Mat4 &transform, uint32_t flags)": {
			"prefix": "void BoneNode::onDraw(const cocos2d::Mat4 &transform, uint32_t flags)",
			"body": [
				"BoneNode:onDraw(${1:cocos2d:Mat4 &transform},${2:uint32_t flags})"
			],
			"description": "void BoneNode::onDraw(const cocos2d::Mat4 &transform, uint32_t flags)"
		},
		 "void MathUtil::transposeMatrix(const float* m, float* dst)": {
			"prefix": "void MathUtil::transposeMatrix(const float* m, float* dst)",
			"body": [
				"MathUtil:transposeMatrix(${1:float* m},${2:float* dst})"
			],
			"description": "void MathUtil::transposeMatrix(const float* m, float* dst)"
		},
		 "void GLProgram::setUniformLocationWith1i(GLint location, GLint i1)": {
			"prefix": "void GLProgram::setUniformLocationWith1i(GLint location, GLint i1)",
			"body": [
				"GLProgram:setUniformLocationWith1i(${1:GLint location},${2:GLint i1})"
			],
			"description": "void GLProgram::setUniformLocationWith1i(GLint location, GLint i1)"
		},
		 "LayerGradient* LayerGradient::create(const Color4B& start, const Color4B& end)": {
			"prefix": "LayerGradient* LayerGradient::create(const Color4B& start, const Color4B& end)",
			"body": [
				"LayerGradient:create(${1:Color4B& start},${2:Color4B& end})"
			],
			"description": "LayerGradient* LayerGradient::create(const Color4B& start, const Color4B& end)"
		},
		 "void Menu::alignItemsHorizontally(void)": {
			"prefix": "void Menu::alignItemsHorizontally(void)",
			"body": [
				"Menu:alignItemsHorizontally(${1:void})"
			],
			"description": "void Menu::alignItemsHorizontally(void)"
		},
		 "EaseExponentialIn* EaseExponentialIn::clone() const": {
			"prefix": "EaseExponentialIn* EaseExponentialIn::clone() const",
			"body": [
				"EaseExponentialIn* EaseExponentialIn:clone() "
			],
			"description": "EaseExponentialIn* EaseExponentialIn::clone() const"
		},
		 "RelativeData *CCArmatureDataManager::getRelativeData(const std::string&  configFilePath)": {
			"prefix": "RelativeData *CCArmatureDataManager::getRelativeData(const std::string&  configFilePath)",
			"body": [
				"*CCArmatureDataManager:getRelativeData(${1:std:string&  configFilePath})"
			],
			"description": "RelativeData *CCArmatureDataManager::getRelativeData(const std::string&  configFilePath)"
		},
		 "ParticleGalaxy* ParticleGalaxy::create()": {
			"prefix": "ParticleGalaxy* ParticleGalaxy::create()",
			"body": [
				"ParticleGalaxy* ParticleGalaxy:create()"
			],
			"description": "ParticleGalaxy* ParticleGalaxy::create()"
		},
		 "void ArmatureAnimation::setFrameEventCallFunc(std::function<void(Bone *bone, const std::string& frameEventName, int originFrameIndex, int currentFrameIndex)> listener)": {
			"prefix": "void ArmatureAnimation::setFrameEventCallFunc(std::function<void(Bone *bone, const std::string& frameEventName, int originFrameIndex, int currentFrameIndex)> listener)",
			"body": [
				"ArmatureAnimation:setFrameEventCallFunc(${1:std:function<void(Bone *bone},${2:std:string& frameEventName},${3:int originFrameIndex},${4:int currentFrameIndex})"
			],
			"description": "void ArmatureAnimation::setFrameEventCallFunc(std::function<void(Bone *bone, const std::string& frameEventName, int originFrameIndex, int currentFrameIndex)> listener)"
		},
		 "void Layer::setTouchEnabled(bool enabled)": {
			"prefix": "void Layer::setTouchEnabled(bool enabled)",
			"body": [
				"Layer:setTouchEnabled(${1:bool enabled})"
			],
			"description": "void Layer::setTouchEnabled(bool enabled)"
		},
		 "IndexBuffer::IndexType IndexBuffer::getType() const": {
			"prefix": "IndexBuffer::IndexType IndexBuffer::getType() const",
			"body": [
				"IndexBuffer:IndexType IndexBuffer:getType() "
			],
			"description": "IndexBuffer::IndexType IndexBuffer::getType() const"
		},
		 "void BoneNode::addSkin(SkinNode* skin, bool display)": {
			"prefix": "void BoneNode::addSkin(SkinNode* skin, bool display)",
			"body": [
				"BoneNode:addSkin(${1:SkinNode* skin},${2:bool display})"
			],
			"description": "void BoneNode::addSkin(SkinNode* skin, bool display)"
		},
		 "bool FileUtils::removeDirectory(const std::string& path)": {
			"prefix": "bool FileUtils::removeDirectory(const std::string& path)",
			"body": [
				"FileUtils:removeDirectory(${1:std:string& path})"
			],
			"description": "bool FileUtils::removeDirectory(const std::string& path)"
		},
		 "cocos2d::Vec3 Physics3DPointToPointConstraint::getPivotPointInA() const": {
			"prefix": "cocos2d::Vec3 Physics3DPointToPointConstraint::getPivotPointInA() const",
			"body": [
				"cocos2d:Vec3 Physics3DPointToPointConstraint:getPivotPointInA() "
			],
			"description": "cocos2d::Vec3 Physics3DPointToPointConstraint::getPivotPointInA() const"
		},
		 "Vec3 Grid3DAction::getOriginalVertex(const Vec2& position) const": {
			"prefix": "Vec3 Grid3DAction::getOriginalVertex(const Vec2& position) const",
			"body": [
				"Grid3DAction:getOriginalVertex(${1:Vec2& position})"
			],
			"description": "Vec3 Grid3DAction::getOriginalVertex(const Vec2& position) const"
		},
		 "PageTurn3D* PageTurn3D::create(float duration, const Size& gridSize)": {
			"prefix": "PageTurn3D* PageTurn3D::create(float duration, const Size& gridSize)",
			"body": [
				"PageTurn3D:create(${1:float duration},${2:Size& gridSize})"
			],
			"description": "PageTurn3D* PageTurn3D::create(float duration, const Size& gridSize)"
		},
		 "float ParticleSystem::getTangentialAccel() const": {
			"prefix": "float ParticleSystem::getTangentialAccel() const",
			"body": [
				"float ParticleSystem:getTangentialAccel() "
			],
			"description": "float ParticleSystem::getTangentialAccel() const"
		},
		 "float Physics3DSliderConstraint::getDampingOrthoLin() const": {
			"prefix": "float Physics3DSliderConstraint::getDampingOrthoLin() const",
			"body": [
				"float Physics3DSliderConstraint:getDampingOrthoLin() "
			],
			"description": "float Physics3DSliderConstraint::getDampingOrthoLin() const"
		},
		 "void SpriteBatchNode::reorderChild(Node *child, int zOrder)": {
			"prefix": "void SpriteBatchNode::reorderChild(Node *child, int zOrder)",
			"body": [
				"SpriteBatchNode:reorderChild(${1:Node *child},${2:int zOrder})"
			],
			"description": "void SpriteBatchNode::reorderChild(Node *child, int zOrder)"
		},
		 "CCBFile* CCBFile::create()": {
			"prefix": "CCBFile* CCBFile::create()",
			"body": [
				"CCBFile* CCBFile:create()"
			],
			"description": "CCBFile* CCBFile::create()"
		},
		 "void MeshSkin::addSkinBone(Bone3D* bone)": {
			"prefix": "void MeshSkin::addSkinBone(Bone3D* bone)",
			"body": [
				"MeshSkin:addSkinBone(${1:Bone3D* bone})"
			],
			"description": "void MeshSkin::addSkinBone(Bone3D* bone)"
		},
		 "Component* CSLoader::loadComAudio(const rapidjson::Value &json)": {
			"prefix": "Component* CSLoader::loadComAudio(const rapidjson::Value &json)",
			"body": [
				"CSLoader:loadComAudio(${1:rapidjson:Value &json})"
			],
			"description": "Component* CSLoader::loadComAudio(const rapidjson::Value &json)"
		},
		 "void Scheduler::unscheduleScriptEntry(unsigned int scheduleScriptEntryID)": {
			"prefix": "void Scheduler::unscheduleScriptEntry(unsigned int scheduleScriptEntryID)",
			"body": [
				"Scheduler:unscheduleScriptEntry(${1:unsigned int scheduleScriptEntryID})"
			],
			"description": "void Scheduler::unscheduleScriptEntry(unsigned int scheduleScriptEntryID)"
		},
		 "void Physics3DSliderConstraint::setLowerLinLimit(float lowerLimit)": {
			"prefix": "void Physics3DSliderConstraint::setLowerLinLimit(float lowerLimit)",
			"body": [
				"Physics3DSliderConstraint:setLowerLinLimit(${1:float lowerLimit})"
			],
			"description": "void Physics3DSliderConstraint::setLowerLinLimit(float lowerLimit)"
		},
		 "RelativeLayoutManager* RelativeLayoutManager::create()": {
			"prefix": "RelativeLayoutManager* RelativeLayoutManager::create()",
			"body": [
				"RelativeLayoutManager* RelativeLayoutManager:create()"
			],
			"description": "RelativeLayoutManager* RelativeLayoutManager::create()"
		},
		 "void NodeLoaderLibrary::registerNodeLoader(const char * pClassName, NodeLoader * pNodeLoader)": {
			"prefix": "void NodeLoaderLibrary::registerNodeLoader(const char * pClassName, NodeLoader * pNodeLoader)",
			"body": [
				"NodeLoaderLibrary:registerNodeLoader(${1:char * pClassName},${2:NodeLoader * pNodeLoader})"
			],
			"description": "void NodeLoaderLibrary::registerNodeLoader(const char * pClassName, NodeLoader * pNodeLoader)"
		},
		 "void CCBReader::alignBits()": {
			"prefix": "void CCBReader::alignBits()",
			"body": [
				"void CCBReader:alignBits()"
			],
			"description": "void CCBReader::alignBits()"
		},
		 "bool Image::isCompressed()": {
			"prefix": "bool Image::isCompressed()",
			"body": [
				"bool Image:isCompressed()"
			],
			"description": "bool Image::isCompressed()"
		},
		 "Vec2 EventMouse::getDelta() const": {
			"prefix": "Vec2 EventMouse::getDelta() const",
			"body": [
				"Vec2 EventMouse:getDelta() "
			],
			"description": "Vec2 EventMouse::getDelta() const"
		},
		 "void AbstractCheckButton::loadTextureBackGroundDisabled(SpriteFrame* spriteframe)": {
			"prefix": "void AbstractCheckButton::loadTextureBackGroundDisabled(SpriteFrame* spriteframe)",
			"body": [
				"AbstractCheckButton:loadTextureBackGroundDisabled(${1:SpriteFrame* spriteframe})"
			],
			"description": "void AbstractCheckButton::loadTextureBackGroundDisabled(SpriteFrame* spriteframe)"
		},
		 "void Node::resumeSchedulerAndActions()": {
			"prefix": "void Node::resumeSchedulerAndActions()",
			"body": [
				"void Node:resumeSchedulerAndActions()"
			],
			"description": "void Node::resumeSchedulerAndActions()"
		},
		 "void ParticleSystem::setEndRadius(float endRadius)": {
			"prefix": "void ParticleSystem::setEndRadius(float endRadius)",
			"body": [
				"ParticleSystem:setEndRadius(${1:float endRadius})"
			],
			"description": "void ParticleSystem::setEndRadius(float endRadius)"
		},
		 "std::string SceneReader::getComponentClassName(const std::string &name)": {
			"prefix": "std::string SceneReader::getComponentClassName(const std::string &name)",
			"body": [
				"SceneReader:getComponentClassName(${1:std:string &name})"
			],
			"description": "std::string SceneReader::getComponentClassName(const std::string &name)"
		},
		 "void ActionManager::removeActionsByFlags(unsigned int flags, Node *target)": {
			"prefix": "void ActionManager::removeActionsByFlags(unsigned int flags, Node *target)",
			"body": [
				"ActionManager:removeActionsByFlags(${1:unsigned int flags},${2:Node *target})"
			],
			"description": "void ActionManager::removeActionsByFlags(unsigned int flags, Node *target)"
		},
		 "void Sprite::setScale(float scaleX, float scaleY)": {
			"prefix": "void Sprite::setScale(float scaleX, float scaleY)",
			"body": [
				"Sprite:setScale(${1:float scaleX},${2:float scaleY})"
			],
			"description": "void Sprite::setScale(float scaleX, float scaleY)"
		},
		 "void Properties::skipWhiteSpace()": {
			"prefix": "void Properties::skipWhiteSpace()",
			"body": [
				"void Properties:skipWhiteSpace()"
			],
			"description": "void Properties::skipWhiteSpace()"
		},
		 "void ClippingNode::drawFullScreenQuadClearStencil()": {
			"prefix": "void ClippingNode::drawFullScreenQuadClearStencil()",
			"body": [
				"void ClippingNode:drawFullScreenQuadClearStencil()"
			],
			"description": "void ClippingNode::drawFullScreenQuadClearStencil()"
		},
		 "TextureResType texType /*= TextureResType::LOCAL*/)": {
			"prefix": "TextureResType texType /*= TextureResType::LOCAL*/)",
			"body": [
				"TextureResType texType /*= TextureResType:LOCAL*/)"
			],
			"description": "TextureResType texType /*= TextureResType::LOCAL*/)"
		},
		 "Widget* Helper::seekWidgetByName(Widget* root, const std::string& name)": {
			"prefix": "Widget* Helper::seekWidgetByName(Widget* root, const std::string& name)",
			"body": [
				"Helper:seekWidgetByName(${1:Widget* root},${2:std:string& name})"
			],
			"description": "Widget* Helper::seekWidgetByName(Widget* root, const std::string& name)"
		},
		 "void IndexBuffer::recreateVBO() const": {
			"prefix": "void IndexBuffer::recreateVBO() const",
			"body": [
				"void IndexBuffer:recreateVBO() "
			],
			"description": "void IndexBuffer::recreateVBO() const"
		},
		 "bool RichElementText::init(int tag, const Color3B &color, GLubyte opacity, const std::string& text, const std::string& fontName, float fontSize)": {
			"prefix": "bool RichElementText::init(int tag, const Color3B &color, GLubyte opacity, const std::string& text, const std::string& fontName, float fontSize)",
			"body": [
				"RichElementText:init(${1:int tag},${2:Color3B &color},${3:GLubyte opacity},${4:std:string& text},${5:std:string& fontName},${6:float fontSize})"
			],
			"description": "bool RichElementText::init(int tag, const Color3B &color, GLubyte opacity, const std::string& text, const std::string& fontName, float fontSize)"
		},
		 "void Physics3DRigidBody::setLinearVelocity( const cocos2d::Vec3& lin_vel )": {
			"prefix": "void Physics3DRigidBody::setLinearVelocity( const cocos2d::Vec3& lin_vel )",
			"body": [
				"Physics3DRigidBody:setLinearVelocity(${1:cocos2d:Vec3& lin_vel})"
			],
			"description": "void Physics3DRigidBody::setLinearVelocity( const cocos2d::Vec3& lin_vel )"
		},
		 "std::string TextureCache::getCachedTextureInfo() const": {
			"prefix": "std::string TextureCache::getCachedTextureInfo() const",
			"body": [
				"std:string TextureCache:getCachedTextureInfo() "
			],
			"description": "std::string TextureCache::getCachedTextureInfo() const"
		},
		 "AffineTransform Node::getNodeToParentAffineTransform(Node* ancestor) const": {
			"prefix": "AffineTransform Node::getNodeToParentAffineTransform(Node* ancestor) const",
			"body": [
				"Node:getNodeToParentAffineTransform(${1:Node* ancestor})"
			],
			"description": "AffineTransform Node::getNodeToParentAffineTransform(Node* ancestor) const"
		},
		 "bool EventListenerPhysicsContact::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)": {
			"prefix": "bool EventListenerPhysicsContact::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)",
			"body": [
				"EventListenerPhysicsContact:hitTest(${1:PhysicsShape* shapeA},${2:PhysicsShape* shapeB})"
			],
			"description": "bool EventListenerPhysicsContact::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)"
		},
		 "void RepeatForever::startWithTarget(Node* target)": {
			"prefix": "void RepeatForever::startWithTarget(Node* target)",
			"body": [
				"RepeatForever:startWithTarget(${1:Node* target})"
			],
			"description": "void RepeatForever::startWithTarget(Node* target)"
		},
		 "void AndroidJavaEngine::stopEffect(unsigned int soundID)": {
			"prefix": "void AndroidJavaEngine::stopEffect(unsigned int soundID)",
			"body": [
				"AndroidJavaEngine:stopEffect(${1:unsigned int soundID})"
			],
			"description": "void AndroidJavaEngine::stopEffect(unsigned int soundID)"
		},
		 "EaseElasticIn* EaseElasticIn::clone() const": {
			"prefix": "EaseElasticIn* EaseElasticIn::clone() const",
			"body": [
				"EaseElasticIn* EaseElasticIn:clone() "
			],
			"description": "EaseElasticIn* EaseElasticIn::clone() const"
		},
		 "void Controller::receiveExternalKeyEvent(int externalKeyCode,bool receive)": {
			"prefix": "void Controller::receiveExternalKeyEvent(int externalKeyCode,bool receive)",
			"body": [
				"Controller:receiveExternalKeyEvent(${1:int externalKeyCode},${2:bool receive})"
			],
			"description": "void Controller::receiveExternalKeyEvent(int externalKeyCode,bool receive)"
		},
		 "float Director::getDeltaTime() const": {
			"prefix": "float Director::getDeltaTime() const",
			"body": [
				"float Director:getDeltaTime() "
			],
			"description": "float Director::getDeltaTime() const"
		},
		 "void ControlButtonLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)": {
			"prefix": "void ControlButtonLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)",
			"body": [
				"ControlButtonLoader:onHandlePropTypeCheck(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:bool pCheck},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlButtonLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)"
		},
		 "void Physics3DWorld::removePhysics3DObject(Physics3DObject* physicsObj)": {
			"prefix": "void Physics3DWorld::removePhysics3DObject(Physics3DObject* physicsObj)",
			"body": [
				"Physics3DWorld:removePhysics3DObject(${1:Physics3DObject* physicsObj})"
			],
			"description": "void Physics3DWorld::removePhysics3DObject(Physics3DObject* physicsObj)"
		},
		 "void Physics3DCollider::setRollingFriction(float frict)": {
			"prefix": "void Physics3DCollider::setRollingFriction(float frict)",
			"body": [
				"Physics3DCollider:setRollingFriction(${1:float frict})"
			],
			"description": "void Physics3DCollider::setRollingFriction(float frict)"
		},
		 "void FrameBuffer::clearAllFBOs()": {
			"prefix": "void FrameBuffer::clearAllFBOs()",
			"body": [
				"void FrameBuffer:clearAllFBOs()"
			],
			"description": "void FrameBuffer::clearAllFBOs()"
		},
		 "bool CallFunc::initWithFunction(const std::function<void()> &func)": {
			"prefix": "bool CallFunc::initWithFunction(const std::function<void()> &func)",
			"body": [
				"bool CallFunc:initWithFunction( std:function<void()> &func)"
			],
			"description": "bool CallFunc::initWithFunction(const std::function<void()> &func)"
		},
		 "void ComAudio::stopEffect(unsigned int nSoundId)": {
			"prefix": "void ComAudio::stopEffect(unsigned int nSoundId)",
			"body": [
				"ComAudio:stopEffect(${1:unsigned int nSoundId})"
			],
			"description": "void ComAudio::stopEffect(unsigned int nSoundId)"
		},
		 "bool ActionTimeline::IsAnimationInfoExists(const std::string& animationName)": {
			"prefix": "bool ActionTimeline::IsAnimationInfoExists(const std::string& animationName)",
			"body": [
				"ActionTimeline:IsAnimationInfoExists(${1:std:string& animationName})"
			],
			"description": "bool ActionTimeline::IsAnimationInfoExists(const std::string& animationName)"
		},
		 "static void trimUTF16VectorFromIndex(std::vector<char16_t>& str, int index)": {
			"prefix": "static void trimUTF16VectorFromIndex(std::vector<char16_t>& str, int index)",
			"body": [
				"void trimUTF16VectorFromIndex(${1:std:vector<char16_t>& str},${2:int index})"
			],
			"description": "static void trimUTF16VectorFromIndex(std::vector<char16_t>& str, int index)"
		},
		 "Vec2 Touch::getLocation() const": {
			"prefix": "Vec2 Touch::getLocation() const",
			"body": [
				"Vec2 Touch:getLocation() "
			],
			"description": "Vec2 Touch::getLocation() const"
		},
		 "void TextField::onSizeChanged()": {
			"prefix": "void TextField::onSizeChanged()",
			"body": [
				"void TextField:onSizeChanged()"
			],
			"description": "void TextField::onSizeChanged()"
		},
		 "void SceneReader::destroyInstance()": {
			"prefix": "void SceneReader::destroyInstance()",
			"body": [
				"void SceneReader:destroyInstance()"
			],
			"description": "void SceneReader::destroyInstance()"
		},
		 "void Vec4::add(const Vec4& v)": {
			"prefix": "void Vec4::add(const Vec4& v)",
			"body": [
				"Vec4:add(${1:Vec4& v})"
			],
			"description": "void Vec4::add(const Vec4& v)"
		},
		 "void FileUtilsAndroid::setassetmanager(AAssetManager* a)": {
			"prefix": "void FileUtilsAndroid::setassetmanager(AAssetManager* a)",
			"body": [
				"FileUtilsAndroid:setassetmanager(${1:AAssetManager* a})"
			],
			"description": "void FileUtilsAndroid::setassetmanager(AAssetManager* a)"
		},
		 "RadioButton* RadioButtonGroup::getRadioButtonByIndex(int index) const": {
			"prefix": "RadioButton* RadioButtonGroup::getRadioButtonByIndex(int index) const",
			"body": [
				"RadioButtonGroup:getRadioButtonByIndex(${1:int index})"
			],
			"description": "RadioButton* RadioButtonGroup::getRadioButtonByIndex(int index) const"
		},
		 "void	Physics3DHingeConstraint::setAxis(const cocos2d::Vec3& axisInA)": {
			"prefix": "void	Physics3DHingeConstraint::setAxis(const cocos2d::Vec3& axisInA)",
			"body": [
				"axisInA})"
			],
			"description": "void	Physics3DHingeConstraint::setAxis(const cocos2d::Vec3& axisInA)"
		},
		 "void EditBox::unregisterScriptEditBoxHandler(void)": {
			"prefix": "void EditBox::unregisterScriptEditBoxHandler(void)",
			"body": [
				"EditBox:unregisterScriptEditBoxHandler(${1:void})"
			],
			"description": "void EditBox::unregisterScriptEditBoxHandler(void)"
		},
		 "EaseElastic* EaseElasticOut::reverse() const": {
			"prefix": "EaseElastic* EaseElasticOut::reverse() const",
			"body": [
				"EaseElastic* EaseElasticOut:reverse() "
			],
			"description": "EaseElastic* EaseElasticOut::reverse() const"
		},
		 "void Scheduler::unschedule(const std::string &key, void *target)": {
			"prefix": "void Scheduler::unschedule(const std::string &key, void *target)",
			"body": [
				"Scheduler:unschedule(${1:std:string &key},${2:void *target})"
			],
			"description": "void Scheduler::unschedule(const std::string &key, void *target)"
		},
		 "Ref* __Dictionary::objectForKey(const std::string& key)": {
			"prefix": "Ref* __Dictionary::objectForKey(const std::string& key)",
			"body": [
				"__Dictionary:objectForKey(${1:std:string& key})"
			],
			"description": "Ref* __Dictionary::objectForKey(const std::string& key)"
		},
		 "void CardinalSplineBy::updatePosition(cocos2d::Vec2 &newPos)": {
			"prefix": "void CardinalSplineBy::updatePosition(cocos2d::Vec2 &newPos)",
			"body": [
				"CardinalSplineBy:updatePosition(${1:cocos2d:Vec2 &newPos})"
			],
			"description": "void CardinalSplineBy::updatePosition(cocos2d::Vec2 &newPos)"
		},
		 "const Size& GLView::getFrameSize() const": {
			"prefix": "const Size& GLView::getFrameSize() const",
			"body": [
				" Size& GLView:getFrameSize() "
			],
			"description": "const Size& GLView::getFrameSize() const"
		},
		 "TransitionSplitRows* TransitionSplitRows::create(float t, Scene* scene)": {
			"prefix": "TransitionSplitRows* TransitionSplitRows::create(float t, Scene* scene)",
			"body": [
				"TransitionSplitRows:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionSplitRows* TransitionSplitRows::create(float t, Scene* scene)"
		},
		 "EaseQuinticActionInOut* EaseQuinticActionInOut::clone() const": {
			"prefix": "EaseQuinticActionInOut* EaseQuinticActionInOut::clone() const",
			"body": [
				"EaseQuinticActionInOut* EaseQuinticActionInOut:clone() "
			],
			"description": "EaseQuinticActionInOut* EaseQuinticActionInOut::clone() const"
		},
		 "void Node::update(float fDelta)": {
			"prefix": "void Node::update(float fDelta)",
			"body": [
				"Node:update(${1:float fDelta})"
			],
			"description": "void Node::update(float fDelta)"
		},
		 "bool LayerGradient::isCompressedInterpolation() const": {
			"prefix": "bool LayerGradient::isCompressedInterpolation() const",
			"body": [
				"bool LayerGradient:isCompressedInterpolation() "
			],
			"description": "bool LayerGradient::isCompressedInterpolation() const"
		},
		 "bool ImageView::init(const std::string &imageFileName, TextureResType texType)": {
			"prefix": "bool ImageView::init(const std::string &imageFileName, TextureResType texType)",
			"body": [
				"ImageView:init(${1:std:string &imageFileName},${2:TextureResType texType})"
			],
			"description": "bool ImageView::init(const std::string &imageFileName, TextureResType texType)"
		},
		 "bool TMXTiledMap::initWithXML(const std::string& tmxString, const std::string& resourcePath)": {
			"prefix": "bool TMXTiledMap::initWithXML(const std::string& tmxString, const std::string& resourcePath)",
			"body": [
				"TMXTiledMap:initWithXML(${1:std:string& tmxString},${2:std:string& resourcePath})"
			],
			"description": "bool TMXTiledMap::initWithXML(const std::string& tmxString, const std::string& resourcePath)"
		},
		 "void editBoxEditingDidEnd(int index, const std::string& text)": {
			"prefix": "void editBoxEditingDidEnd(int index, const std::string& text)",
			"body": [
				"editBoxEditingDidEnd(${1:int index},${2:std:string& text})"
			],
			"description": "void editBoxEditingDidEnd(int index, const std::string& text)"
		},
		 "Mat4 Skin::getNodeToWorldTransform() const": {
			"prefix": "Mat4 Skin::getNodeToWorldTransform() const",
			"body": [
				"Mat4 Skin:getNodeToWorldTransform() "
			],
			"description": "Mat4 Skin::getNodeToWorldTransform() const"
		},
		 "void Button::loadTextureDisabled(const std::string& disabled,TextureResType texType)": {
			"prefix": "void Button::loadTextureDisabled(const std::string& disabled,TextureResType texType)",
			"body": [
				"Button:loadTextureDisabled(${1:std:string& disabled},${2:TextureResType texType})"
			],
			"description": "void Button::loadTextureDisabled(const std::string& disabled,TextureResType texType)"
		},
		 "void ActionTimeline::setFrameEventCallFunc(std::function<void(Frame *)> listener)": {
			"prefix": "void ActionTimeline::setFrameEventCallFunc(std::function<void(Frame *)> listener)",
			"body": [
				"ActionTimeline:setFrameEventCallFunc(${1:std:function<void(Frame *})"
			],
			"description": "void ActionTimeline::setFrameEventCallFunc(std::function<void(Frame *)> listener)"
		},
		 "Layout::ClippingType Layout::getClippingType()const": {
			"prefix": "Layout::ClippingType Layout::getClippingType()const",
			"body": [
				"Layout:ClippingType Layout:getClippingType()"
			],
			"description": "Layout::ClippingType Layout::getClippingType()const"
		},
		 "ColliderDetector* Bone::getColliderDetector() const": {
			"prefix": "ColliderDetector* Bone::getColliderDetector() const",
			"body": [
				"ColliderDetector* Bone:getColliderDetector() "
			],
			"description": "ColliderDetector* Bone::getColliderDetector() const"
		},
		 "void Animate3D::update(float t)": {
			"prefix": "void Animate3D::update(float t)",
			"body": [
				"Animate3D:update(${1:float t})"
			],
			"description": "void Animate3D::update(float t)"
		},
		 "void ParticleSystemQuad::setTextureWithRect(Texture2D *texture, const Rect& rect)": {
			"prefix": "void ParticleSystemQuad::setTextureWithRect(Texture2D *texture, const Rect& rect)",
			"body": [
				"ParticleSystemQuad:setTextureWithRect(${1:Texture2D *texture},${2:Rect& rect})"
			],
			"description": "void ParticleSystemQuad::setTextureWithRect(Texture2D *texture, const Rect& rect)"
		},
		 "float SimpleAudioEngine::getBackgroundMusicVolume()": {
			"prefix": "float SimpleAudioEngine::getBackgroundMusicVolume()",
			"body": [
				"float SimpleAudioEngine:getBackgroundMusicVolume()"
			],
			"description": "float SimpleAudioEngine::getBackgroundMusicVolume()"
		},
		 "void TransitionPageTurn::onExit()": {
			"prefix": "void TransitionPageTurn::onExit()",
			"body": [
				"void TransitionPageTurn:onExit()"
			],
			"description": "void TransitionPageTurn::onExit()"
		},
		 "void Armature::setAnchorPoint(const Vec2& point)": {
			"prefix": "void Armature::setAnchorPoint(const Vec2& point)",
			"body": [
				"Armature:setAnchorPoint(${1:Vec2& point})"
			],
			"description": "void Armature::setAnchorPoint(const Vec2& point)"
		},
		 "bool ArmatureDataManager::init()": {
			"prefix": "bool ArmatureDataManager::init()",
			"body": [
				"bool ArmatureDataManager:init()"
			],
			"description": "bool ArmatureDataManager::init()"
		},
		 "ScaleBy* ScaleBy::clone() const": {
			"prefix": "ScaleBy* ScaleBy::clone() const",
			"body": [
				"ScaleBy* ScaleBy:clone() "
			],
			"description": "ScaleBy* ScaleBy::clone() const"
		},
		 "void Properties::mergeWith(Properties* overrides)": {
			"prefix": "void Properties::mergeWith(Properties* overrides)",
			"body": [
				"Properties:mergeWith(${1:Properties* overrides})"
			],
			"description": "void Properties::mergeWith(Properties* overrides)"
		},
		 "void Director::purgeDirector()": {
			"prefix": "void Director::purgeDirector()",
			"body": [
				"void Director:purgeDirector()"
			],
			"description": "void Director::purgeDirector()"
		},
		 "Bone3D* MeshSkin::getBoneByName(const std::string& id) const": {
			"prefix": "Bone3D* MeshSkin::getBoneByName(const std::string& id) const",
			"body": [
				"MeshSkin:getBoneByName(${1:std:string& id})"
			],
			"description": "Bone3D* MeshSkin::getBoneByName(const std::string& id) const"
		},
		 "void Terrain::setDrawWire(bool bool_value)": {
			"prefix": "void Terrain::setDrawWire(bool bool_value)",
			"body": [
				"Terrain:setDrawWire(${1:bool bool_value})"
			],
			"description": "void Terrain::setDrawWire(bool bool_value)"
		},
		 "const Controller::KeyStatus& Controller::getKeyStatus(int keyCode)": {
			"prefix": "const Controller::KeyStatus& Controller::getKeyStatus(int keyCode)",
			"body": [
				"Controller:KeyStatus& Controller:getKeyStatus(${1:int keyCode})"
			],
			"description": "const Controller::KeyStatus& Controller::getKeyStatus(int keyCode)"
		},
		 "EaseBackOut* EaseBackOut::create(ActionInterval* action)": {
			"prefix": "EaseBackOut* EaseBackOut::create(ActionInterval* action)",
			"body": [
				"EaseBackOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseBackOut* EaseBackOut::create(ActionInterval* action)"
		},
		 "void Node::draw()": {
			"prefix": "void Node::draw()",
			"body": [
				"void Node:draw()"
			],
			"description": "void Node::draw()"
		},
		 "void VertexAttribBinding::bind()": {
			"prefix": "void VertexAttribBinding::bind()",
			"body": [
				"void VertexAttribBinding:bind()"
			],
			"description": "void VertexAttribBinding::bind()"
		},
		 "void Physics3DCollider::setTrigger(bool isTrigger)": {
			"prefix": "void Physics3DCollider::setTrigger(bool isTrigger)",
			"body": [
				"Physics3DCollider:setTrigger(${1:bool isTrigger})"
			],
			"description": "void Physics3DCollider::setTrigger(bool isTrigger)"
		},
		 "bool VideoPlayer::isPlaying() const": {
			"prefix": "bool VideoPlayer::isPlaying() const",
			"body": [
				"bool VideoPlayer:isPlaying() "
			],
			"description": "bool VideoPlayer::isPlaying() const"
		},
		 "Mat4 Mat4::getTransposed() const": {
			"prefix": "Mat4 Mat4::getTransposed() const",
			"body": [
				"Mat4 Mat4:getTransposed() "
			],
			"description": "Mat4 Mat4::getTransposed() const"
		},
		 "const std::string& RelativeLayoutParameter::getRelativeName() const": {
			"prefix": "const std::string& RelativeLayoutParameter::getRelativeName() const",
			"body": [
				" std:string& RelativeLayoutParameter:getRelativeName() "
			],
			"description": "const std::string& RelativeLayoutParameter::getRelativeName() const"
		},
		 "bool Quaternion::isZero() const": {
			"prefix": "bool Quaternion::isZero() const",
			"body": [
				"bool Quaternion:isZero() "
			],
			"description": "bool Quaternion::isZero() const"
		},
		 "TurnOffTiles* TurnOffTiles::create(float duration, const Size& gridSize, unsigned int seed)": {
			"prefix": "TurnOffTiles* TurnOffTiles::create(float duration, const Size& gridSize, unsigned int seed)",
			"body": [
				"TurnOffTiles:create(${1:float duration},${2:Size& gridSize},${3:unsigned int seed})"
			],
			"description": "TurnOffTiles* TurnOffTiles::create(float duration, const Size& gridSize, unsigned int seed)"
		},
		 "void SimpleAudioEngine::pauseAllEffects()": {
			"prefix": "void SimpleAudioEngine::pauseAllEffects()",
			"body": [
				"void SimpleAudioEngine:pauseAllEffects()"
			],
			"description": "void SimpleAudioEngine::pauseAllEffects()"
		},
		 "bool PhysicsJointLimit::createConstraints()": {
			"prefix": "bool PhysicsJointLimit::createConstraints()",
			"body": [
				"bool PhysicsJointLimit:createConstraints()"
			],
			"description": "bool PhysicsJointLimit::createConstraints()"
		},
		 "unsigned int Ref::getReferenceCount() const": {
			"prefix": "unsigned int Ref::getReferenceCount() const",
			"body": [
				"unsigned int Ref:getReferenceCount() "
			],
			"description": "unsigned int Ref::getReferenceCount() const"
		},
		 "Sequence*  CCBAnimationManager::actionForSoundChannel(CCBSequenceProperty* channel)": {
			"prefix": "Sequence*  CCBAnimationManager::actionForSoundChannel(CCBSequenceProperty* channel)",
			"body": [
				"CCBAnimationManager:actionForSoundChannel(${1:CCBSequenceProperty* channel})"
			],
			"description": "Sequence*  CCBAnimationManager::actionForSoundChannel(CCBSequenceProperty* channel)"
		},
		 "void MathUtil::smooth(float* x, float target, float elapsedTime, float responseTime)": {
			"prefix": "void MathUtil::smooth(float* x, float target, float elapsedTime, float responseTime)",
			"body": [
				"MathUtil:smooth(${1:float* x},${2:float target},${3:float elapsedTime},${4:float responseTime})"
			],
			"description": "void MathUtil::smooth(float* x, float target, float elapsedTime, float responseTime)"
		},
		 "Frame* ActionTimelineCache::loadColorFrameWithFlatBuffers(const flatbuffers::ColorFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadColorFrameWithFlatBuffers(const flatbuffers::ColorFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadColorFrameWithFlatBuffers(${1:flatbuffers:ColorFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadColorFrameWithFlatBuffers(const flatbuffers::ColorFrame *flatbuffers)"
		},
		 "void PhysicsJointSpring::setAnchr2(const Vec2& anchr)": {
			"prefix": "void PhysicsJointSpring::setAnchr2(const Vec2& anchr)",
			"body": [
				"PhysicsJointSpring:setAnchr2(${1:Vec2& anchr})"
			],
			"description": "void PhysicsJointSpring::setAnchr2(const Vec2& anchr)"
		},
		 "void DrawNode::ensureCapacityGLLine(int count)": {
			"prefix": "void DrawNode::ensureCapacityGLLine(int count)",
			"body": [
				"DrawNode:ensureCapacityGLLine(${1:int count})"
			],
			"description": "void DrawNode::ensureCapacityGLLine(int count)"
		},
		 "void AccelDeccelAmplitude::update(float time)": {
			"prefix": "void AccelDeccelAmplitude::update(float time)",
			"body": [
				"AccelDeccelAmplitude:update(${1:float time})"
			],
			"description": "void AccelDeccelAmplitude::update(float time)"
		},
		 "void TMXLayer::removeTileAt(const Vec2& pos)": {
			"prefix": "void TMXLayer::removeTileAt(const Vec2& pos)",
			"body": [
				"TMXLayer:removeTileAt(${1:Vec2& pos})"
			],
			"description": "void TMXLayer::removeTileAt(const Vec2& pos)"
		},
		 "EaseElasticIn* EaseElasticIn::create(ActionInterval *action)": {
			"prefix": "EaseElasticIn* EaseElasticIn::create(ActionInterval *action)",
			"body": [
				"EaseElasticIn:create(${1:ActionInterval *action})"
			],
			"description": "EaseElasticIn* EaseElasticIn::create(ActionInterval *action)"
		},
		 "Value TMXLayer::getProperty(const std::string& propertyName) const": {
			"prefix": "Value TMXLayer::getProperty(const std::string& propertyName) const",
			"body": [
				"TMXLayer:getProperty(${1:std:string& propertyName})"
			],
			"description": "Value TMXLayer::getProperty(const std::string& propertyName) const"
		},
		 "void BoneNode::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)": {
			"prefix": "void BoneNode::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)",
			"body": [
				"BoneNode:draw(${1:cocos2d:Renderer *renderer},${2:cocos2d:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void BoneNode::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)"
		},
		 "bool SIOClientImpl::init()": {
			"prefix": "bool SIOClientImpl::init()",
			"body": [
				"bool SIOClientImpl:init()"
			],
			"description": "bool SIOClientImpl::init()"
		},
		 "void LabelBMFont::setOpacityModifyRGB(bool var)": {
			"prefix": "void LabelBMFont::setOpacityModifyRGB(bool var)",
			"body": [
				"LabelBMFont:setOpacityModifyRGB(${1:bool var})"
			],
			"description": "void LabelBMFont::setOpacityModifyRGB(bool var)"
		},
		 "const BlendFunc &LabelTTF::getBlendFunc() const": {
			"prefix": "const BlendFunc &LabelTTF::getBlendFunc() const",
			"body": [
				" BlendFunc &LabelTTF:getBlendFunc() "
			],
			"description": "const BlendFunc &LabelTTF::getBlendFunc() const"
		},
		 "bool Texture2D::hasPremultipliedAlpha() const": {
			"prefix": "bool Texture2D::hasPremultipliedAlpha() const",
			"body": [
				"bool Texture2D:hasPremultipliedAlpha() "
			],
			"description": "bool Texture2D::hasPremultipliedAlpha() const"
		},
		 "void Mat4::rotateX(float angle, Mat4* dst) const": {
			"prefix": "void Mat4::rotateX(float angle, Mat4* dst) const",
			"body": [
				"Mat4:rotateX(${1:float angle},${2:Mat4* dst})"
			],
			"description": "void Mat4::rotateX(float angle, Mat4* dst) const"
		},
		 "cocos2d::Mat4 Physics3DHingeConstraint::getBFrame() const": {
			"prefix": "cocos2d::Mat4 Physics3DHingeConstraint::getBFrame() const",
			"body": [
				"cocos2d:Mat4 Physics3DHingeConstraint:getBFrame() "
			],
			"description": "cocos2d::Mat4 Physics3DHingeConstraint::getBFrame() const"
		},
		 "CCBSoundEffect* CCBSoundEffect::reverse() const": {
			"prefix": "CCBSoundEffect* CCBSoundEffect::reverse() const",
			"body": [
				"CCBSoundEffect* CCBSoundEffect:reverse() "
			],
			"description": "CCBSoundEffect* CCBSoundEffect::reverse() const"
		},
		 "TextureData *ArmatureDataManager::getTextureData(const std::string& id)": {
			"prefix": "TextureData *ArmatureDataManager::getTextureData(const std::string& id)",
			"body": [
				"*ArmatureDataManager:getTextureData(${1:std:string& id})"
			],
			"description": "TextureData *ArmatureDataManager::getTextureData(const std::string& id)"
		},
		 "void ActionManager::removeAction(Action *action)": {
			"prefix": "void ActionManager::removeAction(Action *action)",
			"body": [
				"ActionManager:removeAction(${1:Action *action})"
			],
			"description": "void ActionManager::removeAction(Action *action)"
		},
		 "void ScrollView::processInertiaScrolling(float dt)": {
			"prefix": "void ScrollView::processInertiaScrolling(float dt)",
			"body": [
				"ScrollView:processInertiaScrolling(${1:float dt})"
			],
			"description": "void ScrollView::processInertiaScrolling(float dt)"
		},
		 "void Sprite::sortAllChildren()": {
			"prefix": "void Sprite::sortAllChildren()",
			"body": [
				"void Sprite:sortAllChildren()"
			],
			"description": "void Sprite::sortAllChildren()"
		},
		 "void EditBox::touchDownAction(Ref *sender, TouchEventType controlEvent)": {
			"prefix": "void EditBox::touchDownAction(Ref *sender, TouchEventType controlEvent)",
			"body": [
				"EditBox:touchDownAction(${1:Ref *sender},${2:TouchEventType controlEvent})"
			],
			"description": "void EditBox::touchDownAction(Ref *sender, TouchEventType controlEvent)"
		},
		 "bool LayerGradient::init()": {
			"prefix": "bool LayerGradient::init()",
			"body": [
				"bool LayerGradient:init()"
			],
			"description": "bool LayerGradient::init()"
		},
		 "bool MotionStreak::isOpacityModifyRGB(void) const": {
			"prefix": "bool MotionStreak::isOpacityModifyRGB(void) const",
			"body": [
				"MotionStreak:isOpacityModifyRGB(${1:void})"
			],
			"description": "bool MotionStreak::isOpacityModifyRGB(void) const"
		},
		 "void EditBox::setContentSize(const Size& size)": {
			"prefix": "void EditBox::setContentSize(const Size& size)",
			"body": [
				"EditBox:setContentSize(${1:Size& size})"
			],
			"description": "void EditBox::setContentSize(const Size& size)"
		},
		 "void SkeletonAnimation::initialize ()": {
			"prefix": "void SkeletonAnimation::initialize ()",
			"body": [
				"void SkeletonAnimation:initialize ()"
			],
			"description": "void SkeletonAnimation::initialize ()"
		},
		 "void Director::purgeCachedData(void)": {
			"prefix": "void Director::purgeCachedData(void)",
			"body": [
				"Director:purgeCachedData(${1:void})"
			],
			"description": "void Director::purgeCachedData(void)"
		},
		 "Blink* Blink::clone(void) const": {
			"prefix": "Blink* Blink::clone(void) const",
			"body": [
				"Blink:clone(${1:void})"
			],
			"description": "Blink* Blink::clone(void) const"
		},
		 "void SpriteFrameCacheHelper::releaseSpriteFrames(const std::string &plistPath)": {
			"prefix": "void SpriteFrameCacheHelper::releaseSpriteFrames(const std::string &plistPath)",
			"body": [
				"SpriteFrameCacheHelper:releaseSpriteFrames(${1:std:string &plistPath})"
			],
			"description": "void SpriteFrameCacheHelper::releaseSpriteFrames(const std::string &plistPath)"
		},
		 "void ScaleBy::startWithTarget(Node *target)": {
			"prefix": "void ScaleBy::startWithTarget(Node *target)",
			"body": [
				"ScaleBy:startWithTarget(${1:Node *target})"
			],
			"description": "void ScaleBy::startWithTarget(Node *target)"
		},
		 "void Mat4::rotate(const Quaternion& q, Mat4* dst) const": {
			"prefix": "void Mat4::rotate(const Quaternion& q, Mat4* dst) const",
			"body": [
				"Mat4:rotate(${1:Quaternion& q},${2:Mat4* dst})"
			],
			"description": "void Mat4::rotate(const Quaternion& q, Mat4* dst) const"
		},
		 "int PhysicsBody::getContactTestBitmask() const": {
			"prefix": "int PhysicsBody::getContactTestBitmask() const",
			"body": [
				"int PhysicsBody:getContactTestBitmask() "
			],
			"description": "int PhysicsBody::getContactTestBitmask() const"
		},
		 "void ActionManager::addAction(Action *action, Node *target, bool paused)": {
			"prefix": "void ActionManager::addAction(Action *action, Node *target, bool paused)",
			"body": [
				"ActionManager:addAction(${1:Action *action},${2:Node *target},${3:bool paused})"
			],
			"description": "void ActionManager::addAction(Action *action, Node *target, bool paused)"
		},
		 "bool ScrollView::isOutOfBoundary(MoveDirection dir) const": {
			"prefix": "bool ScrollView::isOutOfBoundary(MoveDirection dir) const",
			"body": [
				"ScrollView:isOutOfBoundary(${1:MoveDirection dir})"
			],
			"description": "bool ScrollView::isOutOfBoundary(MoveDirection dir) const"
		},
		 "Rect DisplayManager::getBoundingBox() const": {
			"prefix": "Rect DisplayManager::getBoundingBox() const",
			"body": [
				"Rect DisplayManager:getBoundingBox() "
			],
			"description": "Rect DisplayManager::getBoundingBox() const"
		},
		 "void Physics3DWorld::debugDraw(Renderer* renderer)": {
			"prefix": "void Physics3DWorld::debugDraw(Renderer* renderer)",
			"body": [
				"Physics3DWorld:debugDraw(${1:Renderer* renderer})"
			],
			"description": "void Physics3DWorld::debugDraw(Renderer* renderer)"
		},
		 "void SpriteBatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void SpriteBatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"SpriteBatchNode:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void SpriteBatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "EaseBezierAction* EaseBezierAction::reverse() const": {
			"prefix": "EaseBezierAction* EaseBezierAction::reverse() const",
			"body": [
				"EaseBezierAction* EaseBezierAction:reverse() "
			],
			"description": "EaseBezierAction* EaseBezierAction::reverse() const"
		},
		 "float Physics3DSliderConstraint::getDampingOrthoAng() const": {
			"prefix": "float Physics3DSliderConstraint::getDampingOrthoAng() const",
			"body": [
				"float Physics3DSliderConstraint:getDampingOrthoAng() "
			],
			"description": "float Physics3DSliderConstraint::getDampingOrthoAng() const"
		},
		 "void Sprite3DMaterialCache::removeAllSprite3DMaterial()": {
			"prefix": "void Sprite3DMaterialCache::removeAllSprite3DMaterial()",
			"body": [
				"void Sprite3DMaterialCache:removeAllSprite3DMaterial()"
			],
			"description": "void Sprite3DMaterialCache::removeAllSprite3DMaterial()"
		},
		 "ActionInterval* ActionFrame::getAction(float fDuration,ActionFrame* srcFrame)": {
			"prefix": "ActionInterval* ActionFrame::getAction(float fDuration,ActionFrame* srcFrame)",
			"body": [
				"ActionFrame:getAction(${1:float fDuration},${2:ActionFrame* srcFrame})"
			],
			"description": "ActionInterval* ActionFrame::getAction(float fDuration,ActionFrame* srcFrame)"
		},
		 "bool ScriptEngineManager::sendNodeEventToJS(Node* node, int action)": {
			"prefix": "bool ScriptEngineManager::sendNodeEventToJS(Node* node, int action)",
			"body": [
				"ScriptEngineManager:sendNodeEventToJS(${1:Node* node},${2:int action})"
			],
			"description": "bool ScriptEngineManager::sendNodeEventToJS(Node* node, int action)"
		},
		 "float UserDefault::getFloatForKey(const char* pKey)": {
			"prefix": "float UserDefault::getFloatForKey(const char* pKey)",
			"body": [
				"UserDefault:getFloatForKey(${1:char* pKey})"
			],
			"description": "float UserDefault::getFloatForKey(const char* pKey)"
		},
		 "void ScrollView::copyClonedWidgetChildren(Widget* model)": {
			"prefix": "void ScrollView::copyClonedWidgetChildren(Widget* model)",
			"body": [
				"ScrollView:copyClonedWidgetChildren(${1:Widget* model})"
			],
			"description": "void ScrollView::copyClonedWidgetChildren(Widget* model)"
		},
		 "bool CCBSetSpriteFrame::initWithSpriteFrame(SpriteFrame *pSpriteFrame)": {
			"prefix": "bool CCBSetSpriteFrame::initWithSpriteFrame(SpriteFrame *pSpriteFrame)",
			"body": [
				"CCBSetSpriteFrame:initWithSpriteFrame(${1:SpriteFrame *pSpriteFrame})"
			],
			"description": "bool CCBSetSpriteFrame::initWithSpriteFrame(SpriteFrame *pSpriteFrame)"
		},
		 "bool UICCTextField::onTextFieldDetachWithIME(TextFieldTTF *pSender)": {
			"prefix": "bool UICCTextField::onTextFieldDetachWithIME(TextFieldTTF *pSender)",
			"body": [
				"UICCTextField:onTextFieldDetachWithIME(${1:TextFieldTTF *pSender})"
			],
			"description": "bool UICCTextField::onTextFieldDetachWithIME(TextFieldTTF *pSender)"
		},
		 "void Mat4::getDownVector(Vec3* dst) const": {
			"prefix": "void Mat4::getDownVector(Vec3* dst) const",
			"body": [
				"Mat4:getDownVector(${1:Vec3* dst})"
			],
			"description": "void Mat4::getDownVector(Vec3* dst) const"
		},
		 "void BoneNode::setAnchorPoint(const cocos2d::Vec2& anchorPoint)": {
			"prefix": "void BoneNode::setAnchorPoint(const cocos2d::Vec2& anchorPoint)",
			"body": [
				"BoneNode:setAnchorPoint(${1:cocos2d:Vec2& anchorPoint})"
			],
			"description": "void BoneNode::setAnchorPoint(const cocos2d::Vec2& anchorPoint)"
		},
		 "Vec2 TMXLayer::getPositionAt(const Vec2& pos)": {
			"prefix": "Vec2 TMXLayer::getPositionAt(const Vec2& pos)",
			"body": [
				"TMXLayer:getPositionAt(${1:Vec2& pos})"
			],
			"description": "Vec2 TMXLayer::getPositionAt(const Vec2& pos)"
		},
		 "ActionInterval* TransitionShrinkGrow:: easeActionWithAction(ActionInterval* action)": {
			"prefix": "ActionInterval* TransitionShrinkGrow:: easeActionWithAction(ActionInterval* action)",
			"body": [
				"TransitionShrinkGrow: easeActionWithAction(${1:ActionInterval* action})"
			],
			"description": "ActionInterval* TransitionShrinkGrow:: easeActionWithAction(ActionInterval* action)"
		},
		 "void AtlasNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void AtlasNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"AtlasNode:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void AtlasNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void NavMeshDebugDraw::end()": {
			"prefix": "void NavMeshDebugDraw::end()",
			"body": [
				"void NavMeshDebugDraw:end()"
			],
			"description": "void NavMeshDebugDraw::end()"
		},
		 "TextFieldTTF * TextFieldTTF::textFieldWithPlaceHolder(const std::string& placeholder, const std::string& fontName, float fontSize)": {
			"prefix": "TextFieldTTF * TextFieldTTF::textFieldWithPlaceHolder(const std::string& placeholder, const std::string& fontName, float fontSize)",
			"body": [
				"* TextFieldTTF:textFieldWithPlaceHolder(${1:std:string& placeholder},${2:std:string& fontName},${3:float fontSize})"
			],
			"description": "TextFieldTTF * TextFieldTTF::textFieldWithPlaceHolder(const std::string& placeholder, const std::string& fontName, float fontSize)"
		},
		 "bool FlipX::initWithFlipX(bool x)": {
			"prefix": "bool FlipX::initWithFlipX(bool x)",
			"body": [
				"FlipX:initWithFlipX(${1:bool x})"
			],
			"description": "bool FlipX::initWithFlipX(bool x)"
		},
		 "unsigned char NodeLoader::parsePropTypeByte(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)": {
			"prefix": "unsigned char NodeLoader::parsePropTypeByte(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)",
			"body": [
				"char NodeLoader:parsePropTypeByte(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader},${4:char *pPropertyName})"
			],
			"description": "unsigned char NodeLoader::parsePropTypeByte(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)"
		},
		 "void Sprite::setBatchNode(SpriteBatchNode *spriteBatchNode)": {
			"prefix": "void Sprite::setBatchNode(SpriteBatchNode *spriteBatchNode)",
			"body": [
				"Sprite:setBatchNode(${1:SpriteBatchNode *spriteBatchNode})"
			],
			"description": "void Sprite::setBatchNode(SpriteBatchNode *spriteBatchNode)"
		},
		 "static std::string logForOpenGLProgram(GLuint program)": {
			"prefix": "static std::string logForOpenGLProgram(GLuint program)",
			"body": [
				"std:string logForOpenGLProgram(${1:GLuint program})"
			],
			"description": "static std::string logForOpenGLProgram(GLuint program)"
		},
		 "void RenderCommand::printID()": {
			"prefix": "void RenderCommand::printID()",
			"body": [
				"void RenderCommand:printID()"
			],
			"description": "void RenderCommand::printID()"
		},
		 "void PrettyPrinter::visit(const __String *p)": {
			"prefix": "void PrettyPrinter::visit(const __String *p)",
			"body": [
				"PrettyPrinter:visit(${1:__String *p})"
			],
			"description": "void PrettyPrinter::visit(const __String *p)"
		},
		 "RenderCommand* RenderQueue::operator[](ssize_t index) const": {
			"prefix": "RenderCommand* RenderQueue::operator[](ssize_t index) const",
			"body": [
				"RenderQueue:operator[](${1:ssize_t index})"
			],
			"description": "RenderCommand* RenderQueue::operator[](ssize_t index) const"
		},
		 "void EventDispatcher::dispatchTouchEventToListeners(EventListenerVector* listeners, const std::function<bool(EventListener*)>& onEvent)": {
			"prefix": "void EventDispatcher::dispatchTouchEventToListeners(EventListenerVector* listeners, const std::function<bool(EventListener*)>& onEvent)",
			"body": [
				"EventDispatcher:dispatchTouchEventToListeners(${1:EventListenerVector* listeners},${2:std:function<bool(EventListener*})"
			],
			"description": "void EventDispatcher::dispatchTouchEventToListeners(EventListenerVector* listeners, const std::function<bool(EventListener*)>& onEvent)"
		},
		 "void FileUtils::setDelegate(FileUtils *delegate)": {
			"prefix": "void FileUtils::setDelegate(FileUtils *delegate)",
			"body": [
				"FileUtils:setDelegate(${1:FileUtils *delegate})"
			],
			"description": "void FileUtils::setDelegate(FileUtils *delegate)"
		},
		 "void Node::onEnterTransitionDidFinish()": {
			"prefix": "void Node::onEnterTransitionDidFinish()",
			"body": [
				"void Node:onEnterTransitionDidFinish()"
			],
			"description": "void Node::onEnterTransitionDidFinish()"
		},
		 "INT_PTR CWin32InputBox::InputBoxEx(WIN32INPUTBOX_PARAM *param)": {
			"prefix": "INT_PTR CWin32InputBox::InputBoxEx(WIN32INPUTBOX_PARAM *param)",
			"body": [
				"CWin32InputBox:InputBoxEx(${1:WIN32INPUTBOX_PARAM *param})"
			],
			"description": "INT_PTR CWin32InputBox::InputBoxEx(WIN32INPUTBOX_PARAM *param)"
		},
		 "MenuItemToggle * MenuItemToggle::createWithTarget(Ref* target, SEL_MenuHandler selector, const Vector<MenuItem*>& menuItems)": {
			"prefix": "MenuItemToggle * MenuItemToggle::createWithTarget(Ref* target, SEL_MenuHandler selector, const Vector<MenuItem*>& menuItems)",
			"body": [
				"* MenuItemToggle:createWithTarget(${1:Ref* target},${2:SEL_MenuHandler selector},${3:Vector<MenuItem*>& menuItems})"
			],
			"description": "MenuItemToggle * MenuItemToggle::createWithTarget(Ref* target, SEL_MenuHandler selector, const Vector<MenuItem*>& menuItems)"
		},
		 "Widget* GUIReader::widgetFromJsonFile(const char *fileName)": {
			"prefix": "Widget* GUIReader::widgetFromJsonFile(const char *fileName)",
			"body": [
				"GUIReader:widgetFromJsonFile(${1:char *fileName})"
			],
			"description": "Widget* GUIReader::widgetFromJsonFile(const char *fileName)"
		},
		 "bool HttpClient::lazyInitThreadSemphore()": {
			"prefix": "bool HttpClient::lazyInitThreadSemphore()",
			"body": [
				"bool HttpClient:lazyInitThreadSemphore()"
			],
			"description": "bool HttpClient::lazyInitThreadSemphore()"
		},
		 "void Mat4::getBackVector(Vec3* dst) const": {
			"prefix": "void Mat4::getBackVector(Vec3* dst) const",
			"body": [
				"Mat4:getBackVector(${1:Vec3* dst})"
			],
			"description": "void Mat4::getBackVector(Vec3* dst) const"
		},
		 "void LinearAllocator::reset()": {
			"prefix": "void LinearAllocator::reset()",
			"body": [
				"void LinearAllocator:reset()"
			],
			"description": "void LinearAllocator::reset()"
		},
		 "void Node::setUserObject(Ref* userObject)": {
			"prefix": "void Node::setUserObject(Ref* userObject)",
			"body": [
				"Node:setUserObject(${1:Ref* userObject})"
			],
			"description": "void Node::setUserObject(Ref* userObject)"
		},
		 "void ShuffleTiles::shuffle(unsigned int *array, unsigned int len)": {
			"prefix": "void ShuffleTiles::shuffle(unsigned int *array, unsigned int len)",
			"body": [
				"ShuffleTiles:shuffle(${1:unsigned int *array},${2:unsigned int len})"
			],
			"description": "void ShuffleTiles::shuffle(unsigned int *array, unsigned int len)"
		},
		 "EaseQuadraticActionIn* EaseQuadraticActionIn::reverse() const": {
			"prefix": "EaseQuadraticActionIn* EaseQuadraticActionIn::reverse() const",
			"body": [
				"EaseQuadraticActionIn* EaseQuadraticActionIn:reverse() "
			],
			"description": "EaseQuadraticActionIn* EaseQuadraticActionIn::reverse() const"
		},
		 "void Button::setTitleColor(const Color3B& color)": {
			"prefix": "void Button::setTitleColor(const Color3B& color)",
			"body": [
				"Button:setTitleColor(${1:Color3B& color})"
			],
			"description": "void Button::setTitleColor(const Color3B& color)"
		},
		 "float NavMeshAgent::getRadius() const": {
			"prefix": "float NavMeshAgent::getRadius() const",
			"body": [
				"float NavMeshAgent:getRadius() "
			],
			"description": "float NavMeshAgent::getRadius() const"
		},
		 "bool ClippingNode::isInverted() const": {
			"prefix": "bool ClippingNode::isInverted() const",
			"body": [
				"bool ClippingNode:isInverted() "
			],
			"description": "bool ClippingNode::isInverted() const"
		},
		 "void ScrollView::onTouchMoved(Touch *touch, Event *unusedEvent)": {
			"prefix": "void ScrollView::onTouchMoved(Touch *touch, Event *unusedEvent)",
			"body": [
				"ScrollView:onTouchMoved(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void ScrollView::onTouchMoved(Touch *touch, Event *unusedEvent)"
		},
		 "bool UserDefault::getBoolForKey(const char* pKey)": {
			"prefix": "bool UserDefault::getBoolForKey(const char* pKey)",
			"body": [
				"UserDefault:getBoolForKey(${1:char* pKey})"
			],
			"description": "bool UserDefault::getBoolForKey(const char* pKey)"
		},
		 "void SIOClientImpl::send(SocketIOPacket *packet)": {
			"prefix": "void SIOClientImpl::send(SocketIOPacket *packet)",
			"body": [
				"SIOClientImpl:send(${1:SocketIOPacket *packet})"
			],
			"description": "void SIOClientImpl::send(SocketIOPacket *packet)"
		},
		 "std::string ArmatureAnimation::getCurrentMovementID() const": {
			"prefix": "std::string ArmatureAnimation::getCurrentMovementID() const",
			"body": [
				"std:string ArmatureAnimation:getCurrentMovementID() "
			],
			"description": "std::string ArmatureAnimation::getCurrentMovementID() const"
		},
		 "void SIOClient::on(const std::string& eventName, SIOEvent e)": {
			"prefix": "void SIOClient::on(const std::string& eventName, SIOEvent e)",
			"body": [
				"SIOClient:on(${1:std:string& eventName},${2:SIOEvent e})"
			],
			"description": "void SIOClient::on(const std::string& eventName, SIOEvent e)"
		},
		 "float MotionStreak::getPositionY() const": {
			"prefix": "float MotionStreak::getPositionY() const",
			"body": [
				"float MotionStreak:getPositionY() "
			],
			"description": "float MotionStreak::getPositionY() const"
		},
		 "void TransitionFlipX::onEnter()": {
			"prefix": "void TransitionFlipX::onEnter()",
			"body": [
				"void TransitionFlipX:onEnter()"
			],
			"description": "void TransitionFlipX::onEnter()"
		},
		 "void BillBoard::visit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)": {
			"prefix": "void BillBoard::visit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)",
			"body": [
				"BillBoard:visit(${1:Renderer *renderer},${2:Mat4& parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void BillBoard::visit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)"
		},
		 "void ActionObject::play(CallFunc* func)": {
			"prefix": "void ActionObject::play(CallFunc* func)",
			"body": [
				"ActionObject:play(${1:CallFunc* func})"
			],
			"description": "void ActionObject::play(CallFunc* func)"
		},
		 "LabelAtlas* LabelAtlas::create(const std::string& string, const std::string& fntFile)": {
			"prefix": "LabelAtlas* LabelAtlas::create(const std::string& string, const std::string& fntFile)",
			"body": [
				"LabelAtlas:create(${1:std:string& string},${2:std:string& fntFile})"
			],
			"description": "LabelAtlas* LabelAtlas::create(const std::string& string, const std::string& fntFile)"
		},
		 "void EditBoxImplCommon::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void EditBoxImplCommon::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"EditBoxImplCommon:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void EditBoxImplCommon::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void EaseBackOut::update(float time)": {
			"prefix": "void EaseBackOut::update(float time)",
			"body": [
				"EaseBackOut:update(${1:float time})"
			],
			"description": "void EaseBackOut::update(float time)"
		},
		 "void CCBReader::addOwnerOutletName(std::string name)": {
			"prefix": "void CCBReader::addOwnerOutletName(std::string name)",
			"body": [
				"CCBReader:addOwnerOutletName(${1:std:string name})"
			],
			"description": "void CCBReader::addOwnerOutletName(std::string name)"
		},
		 "bool AnimationCache::init()": {
			"prefix": "bool AnimationCache::init()",
			"body": [
				"bool AnimationCache:init()"
			],
			"description": "bool AnimationCache::init()"
		},
		 "Physics3DWorld* Physics3DWorld::create(Physics3DWorldDes* info)": {
			"prefix": "Physics3DWorld* Physics3DWorld::create(Physics3DWorldDes* info)",
			"body": [
				"Physics3DWorld:create(${1:Physics3DWorldDes* info})"
			],
			"description": "Physics3DWorld* Physics3DWorld::create(Physics3DWorldDes* info)"
		},
		 "ArmatureData *DataReaderHelper::decodeArmature(tinyxml2::XMLElement *armatureXML, DataInfo *dataInfo)": {
			"prefix": "ArmatureData *DataReaderHelper::decodeArmature(tinyxml2::XMLElement *armatureXML, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeArmature(${1:tinyxml2:XMLElement *armatureXML},${2:DataInfo *dataInfo})"
			],
			"description": "ArmatureData *DataReaderHelper::decodeArmature(tinyxml2::XMLElement *armatureXML, DataInfo *dataInfo)"
		},
		 "void EditBox::setPlaceholderFont(const char* pFontName, int fontSize)": {
			"prefix": "void EditBox::setPlaceholderFont(const char* pFontName, int fontSize)",
			"body": [
				"EditBox:setPlaceholderFont(${1:char* pFontName},${2:int fontSize})"
			],
			"description": "void EditBox::setPlaceholderFont(const char* pFontName, int fontSize)"
		},
		 "float MathUtil::lerp(float from, float to, float alpha)": {
			"prefix": "float MathUtil::lerp(float from, float to, float alpha)",
			"body": [
				"MathUtil:lerp(${1:float from},${2:float to},${3:float alpha})"
			],
			"description": "float MathUtil::lerp(float from, float to, float alpha)"
		},
		 "void loadHTMLStringJNI(const int index, const std::string &string, const std::string &baseURL)": {
			"prefix": "void loadHTMLStringJNI(const int index, const std::string &string, const std::string &baseURL)",
			"body": [
				"loadHTMLStringJNI(${1:int index},${2:std:string &string},${3:std:string &baseURL})"
			],
			"description": "void loadHTMLStringJNI(const int index, const std::string &string, const std::string &baseURL)"
		},
		 "void Label::setFontAtlas(FontAtlas* atlas,bool distanceFieldEnabled /* = false */, bool useA8Shader /* = false */)": {
			"prefix": "void Label::setFontAtlas(FontAtlas* atlas,bool distanceFieldEnabled /* = false */, bool useA8Shader /* = false */)",
			"body": [
				"Label:setFontAtlas(${1:FontAtlas* atlas},${2:bool distanceFieldEnabled /* = false */},${3:bool useA8Shader /* = false */})"
			],
			"description": "void Label::setFontAtlas(FontAtlas* atlas,bool distanceFieldEnabled /* = false */, bool useA8Shader /* = false */)"
		},
		 "void Node::setPhysicsBody(PhysicsBody* body)": {
			"prefix": "void Node::setPhysicsBody(PhysicsBody* body)",
			"body": [
				"Node:setPhysicsBody(${1:PhysicsBody* body})"
			],
			"description": "void Node::setPhysicsBody(PhysicsBody* body)"
		},
		 "std::map<std::string, int> &matMap)": {
			"prefix": "std::map<std::string, int> &matMap)",
			"body": [
				"std:map<std:string, int> &matMap)"
			],
			"description": "std::map<std::string, int> &matMap)"
		},
		 "void AudioEngine::preload(const std::string& filePath, std::function<void(bool isSuccess)> callback)": {
			"prefix": "void AudioEngine::preload(const std::string& filePath, std::function<void(bool isSuccess)> callback)",
			"body": [
				"AudioEngine:preload(${1:std:string& filePath},${2:std:function<void(bool isSuccess})"
			],
			"description": "void AudioEngine::preload(const std::string& filePath, std::function<void(bool isSuccess)> callback)"
		},
		 "void TMXLayer::updateTiles(const Rect& culledRect)": {
			"prefix": "void TMXLayer::updateTiles(const Rect& culledRect)",
			"body": [
				"TMXLayer:updateTiles(${1:Rect& culledRect})"
			],
			"description": "void TMXLayer::updateTiles(const Rect& culledRect)"
		},
		 "Texture2D* FontAtlas::getTexture(int slot)": {
			"prefix": "Texture2D* FontAtlas::getTexture(int slot)",
			"body": [
				"FontAtlas:getTexture(${1:int slot})"
			],
			"description": "Texture2D* FontAtlas::getTexture(int slot)"
		},
		 "const Vec2& PhysicsBody::getPosition()": {
			"prefix": "const Vec2& PhysicsBody::getPosition()",
			"body": [
				" Vec2& PhysicsBody:getPosition()"
			],
			"description": "const Vec2& PhysicsBody::getPosition()"
		},
		 "void GLProgramState::applyAutoBinding(const std::string& uniformName, const std::string& autoBinding)": {
			"prefix": "void GLProgramState::applyAutoBinding(const std::string& uniformName, const std::string& autoBinding)",
			"body": [
				"GLProgramState:applyAutoBinding(${1:std:string& uniformName},${2:std:string& autoBinding})"
			],
			"description": "void GLProgramState::applyAutoBinding(const std::string& uniformName, const std::string& autoBinding)"
		},
		 "void Layer::onKeyPressed(EventKeyboard::KeyCode keyCode, Event* unused_event)": {
			"prefix": "void Layer::onKeyPressed(EventKeyboard::KeyCode keyCode, Event* unused_event)",
			"body": [
				"Layer:onKeyPressed(${1:EventKeyboard:KeyCode keyCode},${2:Event* unused_event})"
			],
			"description": "void Layer::onKeyPressed(EventKeyboard::KeyCode keyCode, Event* unused_event)"
		},
		 "SpriteBatchNode* SpriteBatchNode::create(const std::string& fileImage, ssize_t capacity/* = DEFAULT_CAPACITY*/)": {
			"prefix": "SpriteBatchNode* SpriteBatchNode::create(const std::string& fileImage, ssize_t capacity/* = DEFAULT_CAPACITY*/)",
			"body": [
				"SpriteBatchNode:create(${1:std:string& fileImage},${2:ssize_t capacity/* = DEFAULT_CAPACITY*/})"
			],
			"description": "SpriteBatchNode* SpriteBatchNode::create(const std::string& fileImage, ssize_t capacity/* = DEFAULT_CAPACITY*/)"
		},
		 "void SimpleAudioEngine::pauseEffect(unsigned int nSoundId)": {
			"prefix": "void SimpleAudioEngine::pauseEffect(unsigned int nSoundId)",
			"body": [
				"SimpleAudioEngine:pauseEffect(${1:unsigned int nSoundId})"
			],
			"description": "void SimpleAudioEngine::pauseEffect(unsigned int nSoundId)"
		},
		 "CallFunc * CallFunc::create(const std::function<void()> &func)": {
			"prefix": "CallFunc * CallFunc::create(const std::function<void()> &func)",
			"body": [
				"CallFunc * CallFunc:create( std:function<void()> &func)"
			],
			"description": "CallFunc * CallFunc::create(const std::function<void()> &func)"
		},
		 "void TimerTargetSelector::cancel()": {
			"prefix": "void TimerTargetSelector::cancel()",
			"body": [
				"void TimerTargetSelector:cancel()"
			],
			"description": "void TimerTargetSelector::cancel()"
		},
		 "bool Sprite3DMaterialCache::addSprite3DMaterial(const std::string& key, Texture2D* texture)": {
			"prefix": "bool Sprite3DMaterialCache::addSprite3DMaterial(const std::string& key, Texture2D* texture)",
			"body": [
				"Sprite3DMaterialCache:addSprite3DMaterial(${1:std:string& key},${2:Texture2D* texture})"
			],
			"description": "bool Sprite3DMaterialCache::addSprite3DMaterial(const std::string& key, Texture2D* texture)"
		},
		 "bool SkeletonRenderer::setSkin (const char* skinName)": {
			"prefix": "bool SkeletonRenderer::setSkin (const char* skinName)",
			"body": [
				"SkeletonRenderer:setSkin (${1:char* skinName})"
			],
			"description": "bool SkeletonRenderer::setSkin (const char* skinName)"
		},
		 "PointArray* PointArray::create(ssize_t capacity)": {
			"prefix": "PointArray* PointArray::create(ssize_t capacity)",
			"body": [
				"PointArray:create(${1:ssize_t capacity})"
			],
			"description": "PointArray* PointArray::create(ssize_t capacity)"
		},
		 "void Mat4::rotate(const Quaternion& q)": {
			"prefix": "void Mat4::rotate(const Quaternion& q)",
			"body": [
				"Mat4:rotate(${1:Quaternion& q})"
			],
			"description": "void Mat4::rotate(const Quaternion& q)"
		},
		 "void TextField::setTextColor(const cocos2d::Color4B &textColor)": {
			"prefix": "void TextField::setTextColor(const cocos2d::Color4B &textColor)",
			"body": [
				"TextField:setTextColor(${1:cocos2d:Color4B &textColor})"
			],
			"description": "void TextField::setTextColor(const cocos2d::Color4B &textColor)"
		},
		 "void ParticleSystemQuad::updateTexCoords()": {
			"prefix": "void ParticleSystemQuad::updateTexCoords()",
			"body": [
				"void ParticleSystemQuad:updateTexCoords()"
			],
			"description": "void ParticleSystemQuad::updateTexCoords()"
		},
		 "void GLProgramState::setVertexAttribCallback(const std::string& name, const std::function<void(VertexAttrib*)> &callback)": {
			"prefix": "void GLProgramState::setVertexAttribCallback(const std::string& name, const std::function<void(VertexAttrib*)> &callback)",
			"body": [
				"GLProgramState:setVertexAttribCallback(${1:std:string& name},${2:std:function<void(VertexAttrib*})"
			],
			"description": "void GLProgramState::setVertexAttribCallback(const std::string& name, const std::function<void(VertexAttrib*)> &callback)"
		},
		 "void Twirl::update(float time)": {
			"prefix": "void Twirl::update(float time)",
			"body": [
				"Twirl:update(${1:float time})"
			],
			"description": "void Twirl::update(float time)"
		},
		 "Technique* Material::getTechniqueByName(const std::string& name)": {
			"prefix": "Technique* Material::getTechniqueByName(const std::string& name)",
			"body": [
				"Material:getTechniqueByName(${1:std:string& name})"
			],
			"description": "Technique* Material::getTechniqueByName(const std::string& name)"
		},
		 "bool ParticleSystem::isFull()": {
			"prefix": "bool ParticleSystem::isFull()",
			"body": [
				"bool ParticleSystem:isFull()"
			],
			"description": "bool ParticleSystem::isFull()"
		},
		 "AudioProfile* AudioEngine::getDefaultProfile()": {
			"prefix": "AudioProfile* AudioEngine::getDefaultProfile()",
			"body": [
				"AudioProfile* AudioEngine:getDefaultProfile()"
			],
			"description": "AudioProfile* AudioEngine::getDefaultProfile()"
		},
		 "bool ZipUtils::isCCZBuffer(const unsigned char *buffer, ssize_t len)": {
			"prefix": "bool ZipUtils::isCCZBuffer(const unsigned char *buffer, ssize_t len)",
			"body": [
				"ZipUtils:isCCZBuffer(${1:unsigned char *buffer},${2:ssize_t len})"
			],
			"description": "bool ZipUtils::isCCZBuffer(const unsigned char *buffer, ssize_t len)"
		},
		 "const Color3B& ScrollView::getScrollBarColor() const": {
			"prefix": "const Color3B& ScrollView::getScrollBarColor() const",
			"body": [
				" Color3B& ScrollView:getScrollBarColor() "
			],
			"description": "const Color3B& ScrollView::getScrollBarColor() const"
		},
		 "void MathUtil::negateMatrix(const float* m, float* dst)": {
			"prefix": "void MathUtil::negateMatrix(const float* m, float* dst)",
			"body": [
				"MathUtil:negateMatrix(${1:float* m},${2:float* dst})"
			],
			"description": "void MathUtil::negateMatrix(const float* m, float* dst)"
		},
		 "void MenuItem::setCallback(const ccMenuCallback& callback)": {
			"prefix": "void MenuItem::setCallback(const ccMenuCallback& callback)",
			"body": [
				"MenuItem:setCallback(${1:ccMenuCallback& callback})"
			],
			"description": "void MenuItem::setCallback(const ccMenuCallback& callback)"
		},
		 "void Sequence::startWithTarget(Node *target)": {
			"prefix": "void Sequence::startWithTarget(Node *target)",
			"body": [
				"Sequence:startWithTarget(${1:Node *target})"
			],
			"description": "void Sequence::startWithTarget(Node *target)"
		},
		 "EventListenerPhysicsContactWithBodies* EventListenerPhysicsContactWithBodies::clone()": {
			"prefix": "EventListenerPhysicsContactWithBodies* EventListenerPhysicsContactWithBodies::clone()",
			"body": [
				"EventListenerPhysicsContactWithBodies* EventListenerPhysicsContactWithBodies:clone()"
			],
			"description": "EventListenerPhysicsContactWithBodies* EventListenerPhysicsContactWithBodies::clone()"
		},
		 "bool Animation::initWithAnimationFrames(const Vector<AnimationFrame*>& arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)": {
			"prefix": "bool Animation::initWithAnimationFrames(const Vector<AnimationFrame*>& arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)",
			"body": [
				"Animation:initWithAnimationFrames(${1:Vector<AnimationFrame*>& arrayOfAnimationFrames},${2:float delayPerUnit},${3:unsigned int loops})"
			],
			"description": "bool Animation::initWithAnimationFrames(const Vector<AnimationFrame*>& arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)"
		},
		 "void CardinalSplineTo::startWithTarget(cocos2d::Node *target)": {
			"prefix": "void CardinalSplineTo::startWithTarget(cocos2d::Node *target)",
			"body": [
				"CardinalSplineTo:startWithTarget(${1:cocos2d:Node *target})"
			],
			"description": "void CardinalSplineTo::startWithTarget(cocos2d::Node *target)"
		},
		 "unsigned char* FileUtils::getFileDataFromZip(const std::string& zipFilePath, const std::string& filename, ssize_t *size)": {
			"prefix": "unsigned char* FileUtils::getFileDataFromZip(const std::string& zipFilePath, const std::string& filename, ssize_t *size)",
			"body": [
				"char* FileUtils:getFileDataFromZip(${1:std:string& zipFilePath},${2:std:string& filename},${3:ssize_t *size})"
			],
			"description": "unsigned char* FileUtils::getFileDataFromZip(const std::string& zipFilePath, const std::string& filename, ssize_t *size)"
		},
		 "Pass* Pass::clone() const": {
			"prefix": "Pass* Pass::clone() const",
			"body": [
				"Pass* Pass:clone() "
			],
			"description": "Pass* Pass::clone() const"
		},
		 "void RenderTexture::beginWithClear(float r, float g, float b, float a)": {
			"prefix": "void RenderTexture::beginWithClear(float r, float g, float b, float a)",
			"body": [
				"RenderTexture:beginWithClear(${1:float r},${2:float g},${3:float b},${4:float a})"
			],
			"description": "void RenderTexture::beginWithClear(float r, float g, float b, float a)"
		},
		 "std::string LayerGradient::getDescription() const": {
			"prefix": "std::string LayerGradient::getDescription() const",
			"body": [
				"std:string LayerGradient:getDescription() "
			],
			"description": "std::string LayerGradient::getDescription() const"
		},
		 "void ScrollView::scrollToBottomLeft(float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToBottomLeft(float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToBottomLeft(${1:float second},${2:bool attenuated})"
			],
			"description": "void ScrollView::scrollToBottomLeft(float second, bool attenuated)"
		},
		 "void Tween::arriveKeyFrame(FrameData *keyFrameData)": {
			"prefix": "void Tween::arriveKeyFrame(FrameData *keyFrameData)",
			"body": [
				"Tween:arriveKeyFrame(${1:FrameData *keyFrameData})"
			],
			"description": "void Tween::arriveKeyFrame(FrameData *keyFrameData)"
		},
		 "void BoneNode::removeChild(Node* child, bool cleanup /* = true */)": {
			"prefix": "void BoneNode::removeChild(Node* child, bool cleanup /* = true */)",
			"body": [
				"BoneNode:removeChild(${1:Node* child},${2:bool cleanup /* = true */})"
			],
			"description": "void BoneNode::removeChild(Node* child, bool cleanup /* = true */)"
		},
		 "void GLViewImpl::setScissorInPoints(float x , float y , float w , float h)": {
			"prefix": "void GLViewImpl::setScissorInPoints(float x , float y , float w , float h)",
			"body": [
				"GLViewImpl:setScissorInPoints(${1:float x},${2:float y},${3:float w},${4:float h})"
			],
			"description": "void GLViewImpl::setScissorInPoints(float x , float y , float w , float h)"
		},
		 "void RenderTexture::clearDepth(float depthValue)": {
			"prefix": "void RenderTexture::clearDepth(float depthValue)",
			"body": [
				"RenderTexture:clearDepth(${1:float depthValue})"
			],
			"description": "void RenderTexture::clearDepth(float depthValue)"
		},
		 "void Physics3DRigidBody::setMassProps( float mass, const cocos2d::Vec3& inertia )": {
			"prefix": "void Physics3DRigidBody::setMassProps( float mass, const cocos2d::Vec3& inertia )",
			"body": [
				"Physics3DRigidBody:setMassProps(${1:float mass},${2:cocos2d:Vec3& inertia})"
			],
			"description": "void Physics3DRigidBody::setMassProps( float mass, const cocos2d::Vec3& inertia )"
		},
		 "void Renderer::flush3D()": {
			"prefix": "void Renderer::flush3D()",
			"body": [
				"void Renderer:flush3D()"
			],
			"description": "void Renderer::flush3D()"
		},
		 "void Director::initMatrixStack()": {
			"prefix": "void Director::initMatrixStack()",
			"body": [
				"void Director:initMatrixStack()"
			],
			"description": "void Director::initMatrixStack()"
		},
		 "void TileMapAtlas::updateAtlasValueAt(const Vec2& pos, const Color3B& value, int index)": {
			"prefix": "void TileMapAtlas::updateAtlasValueAt(const Vec2& pos, const Color3B& value, int index)",
			"body": [
				"TileMapAtlas:updateAtlasValueAt(${1:Vec2& pos},${2:Color3B& value},${3:int index})"
			],
			"description": "void TileMapAtlas::updateAtlasValueAt(const Vec2& pos, const Color3B& value, int index)"
		},
		 "void TextField::setPlaceHolder(const std::string& value)": {
			"prefix": "void TextField::setPlaceHolder(const std::string& value)",
			"body": [
				"TextField:setPlaceHolder(${1:std:string& value})"
			],
			"description": "void TextField::setPlaceHolder(const std::string& value)"
		},
		 "ImageView* ImageView::create()": {
			"prefix": "ImageView* ImageView::create()",
			"body": [
				"ImageView* ImageView:create()"
			],
			"description": "ImageView* ImageView::create()"
		},
		 "void Skin::setBone(Bone *bone)": {
			"prefix": "void Skin::setBone(Bone *bone)",
			"body": [
				"Skin:setBone(${1:Bone *bone})"
			],
			"description": "void Skin::setBone(Bone *bone)"
		},
		 "float Vec3::angle(const Vec3& v1, const Vec3& v2)": {
			"prefix": "float Vec3::angle(const Vec3& v1, const Vec3& v2)",
			"body": [
				"Vec3:angle(${1:Vec3& v1},${2:Vec3& v2})"
			],
			"description": "float Vec3::angle(const Vec3& v1, const Vec3& v2)"
		},
		 "void SpriteBatchNode::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void SpriteBatchNode::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"SpriteBatchNode:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void SpriteBatchNode::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "ParticleFlower* ParticleFlower::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleFlower* ParticleFlower::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleFlower:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleFlower* ParticleFlower::createWithTotalParticles(int numberOfParticles)"
		},
		 "Data Device::getTextureDataForText(const char * text, const FontDefinition& textDefinition, TextAlign align, int &width, int &height, bool& hasPremultipliedAlpha)": {
			"prefix": "Data Device::getTextureDataForText(const char * text, const FontDefinition& textDefinition, TextAlign align, int &width, int &height, bool& hasPremultipliedAlpha)",
			"body": [
				"Device:getTextureDataForText(${1:char * text},${2:FontDefinition& textDefinition},${3:TextAlign align},${4:int &width},${5:int &height},${6:bool& hasPremultipliedAlpha})"
			],
			"description": "Data Device::getTextureDataForText(const char * text, const FontDefinition& textDefinition, TextAlign align, int &width, int &height, bool& hasPremultipliedAlpha)"
		},
		 "MenuItem* MenuItem::create(Ref *target, SEL_MenuHandler selector)": {
			"prefix": "MenuItem* MenuItem::create(Ref *target, SEL_MenuHandler selector)",
			"body": [
				"MenuItem:create(${1:Ref *target},${2:SEL_MenuHandler selector})"
			],
			"description": "MenuItem* MenuItem::create(Ref *target, SEL_MenuHandler selector)"
		},
		 "void Repeat::startWithTarget(Node *target)": {
			"prefix": "void Repeat::startWithTarget(Node *target)",
			"body": [
				"Repeat:startWithTarget(${1:Node *target})"
			],
			"description": "void Repeat::startWithTarget(Node *target)"
		},
		 "void VideoPlayer::setURL(const std::string& videoUrl)": {
			"prefix": "void VideoPlayer::setURL(const std::string& videoUrl)",
			"body": [
				"VideoPlayer:setURL(${1:std:string& videoUrl})"
			],
			"description": "void VideoPlayer::setURL(const std::string& videoUrl)"
		},
		 "void NavMeshAgent::setHeight(float height)": {
			"prefix": "void NavMeshAgent::setHeight(float height)",
			"body": [
				"NavMeshAgent:setHeight(${1:float height})"
			],
			"description": "void NavMeshAgent::setHeight(float height)"
		},
		 "static std::string &trim(std::string &s)": {
			"prefix": "static std::string &trim(std::string &s)",
			"body": [
				"std:string &trim(${1:std:string &s})"
			],
			"description": "static std::string &trim(std::string &s)"
		},
		 "Terrain::TerrainData::TerrainData(const char * heightMapsrc, const char * alphamap, const DetailMap& detail1, const DetailMap& detail2, const DetailMap& detail3, const DetailMap& detail4, const Size & chunksize, float height, float scale)": {
			"prefix": "Terrain::TerrainData::TerrainData(const char * heightMapsrc, const char * alphamap, const DetailMap& detail1, const DetailMap& detail2, const DetailMap& detail3, const DetailMap& detail4, const Size & chunksize, float height, float scale)",
			"body": [
				"* heightMapsrc},${2:char * alphamap},${3:DetailMap& detail1},${4:DetailMap& detail2},${5:DetailMap& detail3},${6:DetailMap& detail4},${7:Size & chunksize},${8:float height},${9:float scale})"
			],
			"description": "Terrain::TerrainData::TerrainData(const char * heightMapsrc, const char * alphamap, const DetailMap& detail1, const DetailMap& detail2, const DetailMap& detail3, const DetailMap& detail4, const Size & chunksize, float height, float scale)"
		},
		 "void LabelTTF::setFlippedX(bool flippedX)": {
			"prefix": "void LabelTTF::setFlippedX(bool flippedX)",
			"body": [
				"LabelTTF:setFlippedX(${1:bool flippedX})"
			],
			"description": "void LabelTTF::setFlippedX(bool flippedX)"
		},
		 "void ScrollView::onTouchCancelled(Touch *touch, Event *unusedEvent)": {
			"prefix": "void ScrollView::onTouchCancelled(Touch *touch, Event *unusedEvent)",
			"body": [
				"ScrollView:onTouchCancelled(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void ScrollView::onTouchCancelled(Touch *touch, Event *unusedEvent)"
		},
		 "void Terrain::Chunk::updateIndicesLODSkirt()": {
			"prefix": "void Terrain::Chunk::updateIndicesLODSkirt()",
			"body": [
				"void Terrain:Chunk:updateIndicesLODSkirt()"
			],
			"description": "void Terrain::Chunk::updateIndicesLODSkirt()"
		},
		 "GLfloat Texture2D::getMaxS() const": {
			"prefix": "GLfloat Texture2D::getMaxS() const",
			"body": [
				"GLfloat Texture2D:getMaxS() "
			],
			"description": "GLfloat Texture2D::getMaxS() const"
		},
		 "void __Array::setObject(Ref* object, ssize_t index)": {
			"prefix": "void __Array::setObject(Ref* object, ssize_t index)",
			"body": [
				"__Array:setObject(${1:Ref* object},${2:ssize_t index})"
			],
			"description": "void __Array::setObject(Ref* object, ssize_t index)"
		},
		 "void Mesh::setSkin(MeshSkin* skin)": {
			"prefix": "void Mesh::setSkin(MeshSkin* skin)",
			"body": [
				"Mesh:setSkin(${1:MeshSkin* skin})"
			],
			"description": "void Mesh::setSkin(MeshSkin* skin)"
		},
		 "bool Node::isVisible() const": {
			"prefix": "bool Node::isVisible() const",
			"body": [
				"bool Node:isVisible() "
			],
			"description": "bool Node::isVisible() const"
		},
		 "Follow* Follow::clone() const": {
			"prefix": "Follow* Follow::clone() const",
			"body": [
				"Follow* Follow:clone() "
			],
			"description": "Follow* Follow::clone() const"
		},
		 "int NotificationObserver::getHandler() const": {
			"prefix": "int NotificationObserver::getHandler() const",
			"body": [
				"int NotificationObserver:getHandler() "
			],
			"description": "int NotificationObserver::getHandler() const"
		},
		 "void PhysicsWorld::addShape(PhysicsShape* physicsShape)": {
			"prefix": "void PhysicsWorld::addShape(PhysicsShape* physicsShape)",
			"body": [
				"PhysicsWorld:addShape(${1:PhysicsShape* physicsShape})"
			],
			"description": "void PhysicsWorld::addShape(PhysicsShape* physicsShape)"
		},
		 "void PhysicsBody::applyForce(const Vect& force)": {
			"prefix": "void PhysicsBody::applyForce(const Vect& force)",
			"body": [
				"PhysicsBody:applyForce(${1:Vect& force})"
			],
			"description": "void PhysicsBody::applyForce(const Vect& force)"
		},
		 "void __Dictionary::removeObjectForKey(intptr_t key)": {
			"prefix": "void __Dictionary::removeObjectForKey(intptr_t key)",
			"body": [
				"__Dictionary:removeObjectForKey(${1:intptr_t key})"
			],
			"description": "void __Dictionary::removeObjectForKey(intptr_t key)"
		},
		 "void TransitionCrossFade::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void TransitionCrossFade::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"TransitionCrossFade:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void TransitionCrossFade::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "static tinyxml2::XMLElement* getXMLNodeForKey(const char* pKey, tinyxml2::XMLDocument **doc)": {
			"prefix": "static tinyxml2::XMLElement* getXMLNodeForKey(const char* pKey, tinyxml2::XMLDocument **doc)",
			"body": [
				"tinyxml2:XMLElement* getXMLNodeForKey(${1:char* pKey},${2:tinyxml2:XMLDocument **doc})"
			],
			"description": "static tinyxml2::XMLElement* getXMLNodeForKey(const char* pKey, tinyxml2::XMLDocument **doc)"
		},
		 "bool Texture2D::updateWithData(const void *data,int offsetX,int offsetY,int width,int height)": {
			"prefix": "bool Texture2D::updateWithData(const void *data,int offsetX,int offsetY,int width,int height)",
			"body": [
				"Texture2D:updateWithData(${1:void *data},${2:int offsetX},${3:int offsetY},${4:int width},${5:int height})"
			],
			"description": "bool Texture2D::updateWithData(const void *data,int offsetX,int offsetY,int width,int height)"
		},
		 "void Physics3DComponent::addToPhysicsWorld(Physics3DWorld* world)": {
			"prefix": "void Physics3DComponent::addToPhysicsWorld(Physics3DWorld* world)",
			"body": [
				"Physics3DComponent:addToPhysicsWorld(${1:Physics3DWorld* world})"
			],
			"description": "void Physics3DComponent::addToPhysicsWorld(Physics3DWorld* world)"
		},
		 "void RotateBy::startWithTarget(Node *target)": {
			"prefix": "void RotateBy::startWithTarget(Node *target)",
			"body": [
				"RotateBy:startWithTarget(${1:Node *target})"
			],
			"description": "void RotateBy::startWithTarget(Node *target)"
		},
		 "void Terrain::Chunk::updateVerticesForLOD()": {
			"prefix": "void Terrain::Chunk::updateVerticesForLOD()",
			"body": [
				"void Terrain:Chunk:updateVerticesForLOD()"
			],
			"description": "void Terrain::Chunk::updateVerticesForLOD()"
		},
		 "std::string RenderState::getName() const": {
			"prefix": "std::string RenderState::getName() const",
			"body": [
				"std:string RenderState:getName() "
			],
			"description": "std::string RenderState::getName() const"
		},
		 "bool SpriteFrame::initWithTextureFilename(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)": {
			"prefix": "bool SpriteFrame::initWithTextureFilename(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)",
			"body": [
				"SpriteFrame:initWithTextureFilename(${1:std:string& filename},${2:Rect& rect},${3:bool rotated},${4:Vec2& offset},${5:Size& originalSize})"
			],
			"description": "bool SpriteFrame::initWithTextureFilename(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)"
		},
		 "void EditBoxImplWin::closeKeyboard()": {
			"prefix": "void EditBoxImplWin::closeKeyboard()",
			"body": [
				"void EditBoxImplWin:closeKeyboard()"
			],
			"description": "void EditBoxImplWin::closeKeyboard()"
		},
		 "void BatchNode::removeChild(Node* child, bool cleanup)": {
			"prefix": "void BatchNode::removeChild(Node* child, bool cleanup)",
			"body": [
				"BatchNode:removeChild(${1:Node* child},${2:bool cleanup})"
			],
			"description": "void BatchNode::removeChild(Node* child, bool cleanup)"
		},
		 "BillBoard* BillBoard::create(const std::string& filename, Mode mode)": {
			"prefix": "BillBoard* BillBoard::create(const std::string& filename, Mode mode)",
			"body": [
				"BillBoard:create(${1:std:string& filename},${2:Mode mode})"
			],
			"description": "BillBoard* BillBoard::create(const std::string& filename, Mode mode)"
		},
		 "ValueMap& Value::asValueMap()": {
			"prefix": "ValueMap& Value::asValueMap()",
			"body": [
				"ValueMap& Value:asValueMap()"
			],
			"description": "ValueMap& Value::asValueMap()"
		},
		 "__String* __String::createWithContentsOfFile(const std::string &filename)": {
			"prefix": "__String* __String::createWithContentsOfFile(const std::string &filename)",
			"body": [
				"__String:createWithContentsOfFile(${1:std:string &filename})"
			],
			"description": "__String* __String::createWithContentsOfFile(const std::string &filename)"
		},
		 "void BoneNode::setBlendFunc(const cocos2d::BlendFunc& blendFunc)": {
			"prefix": "void BoneNode::setBlendFunc(const cocos2d::BlendFunc& blendFunc)",
			"body": [
				"BoneNode:setBlendFunc(${1:cocos2d:BlendFunc& blendFunc})"
			],
			"description": "void BoneNode::setBlendFunc(const cocos2d::BlendFunc& blendFunc)"
		},
		 "void AccelAmplitude::update(float time)": {
			"prefix": "void AccelAmplitude::update(float time)",
			"body": [
				"AccelAmplitude:update(${1:float time})"
			],
			"description": "void AccelAmplitude::update(float time)"
		},
		 "void NodeLoaderLibrary::unregisterNodeLoader(const char * pClassName)": {
			"prefix": "void NodeLoaderLibrary::unregisterNodeLoader(const char * pClassName)",
			"body": [
				"NodeLoaderLibrary:unregisterNodeLoader(${1:char * pClassName})"
			],
			"description": "void NodeLoaderLibrary::unregisterNodeLoader(const char * pClassName)"
		},
		 "int ParticleSystem::getTotalParticles() const": {
			"prefix": "int ParticleSystem::getTotalParticles() const",
			"body": [
				"int ParticleSystem:getTotalParticles() "
			],
			"description": "int ParticleSystem::getTotalParticles() const"
		},
		 "void Node::addChild(Node* child, int localZOrder, const std::string &name)": {
			"prefix": "void Node::addChild(Node* child, int localZOrder, const std::string &name)",
			"body": [
				"Node:addChild(${1:Node* child},${2:int localZOrder},${3:std:string &name})"
			],
			"description": "void Node::addChild(Node* child, int localZOrder, const std::string &name)"
		},
		 "const BlendFunc& AtlasNode::getBlendFunc() const": {
			"prefix": "const BlendFunc& AtlasNode::getBlendFunc() const",
			"body": [
				" BlendFunc& AtlasNode:getBlendFunc() "
			],
			"description": "const BlendFunc& AtlasNode::getBlendFunc() const"
		},
		 "void TransitionPageTurn::onEnter()": {
			"prefix": "void TransitionPageTurn::onEnter()",
			"body": [
				"void TransitionPageTurn:onEnter()"
			],
			"description": "void TransitionPageTurn::onEnter()"
		},
		 "void SpriteBatchNode::insertQuadFromSprite(Sprite *sprite, ssize_t index)": {
			"prefix": "void SpriteBatchNode::insertQuadFromSprite(Sprite *sprite, ssize_t index)",
			"body": [
				"SpriteBatchNode:insertQuadFromSprite(${1:Sprite *sprite},${2:ssize_t index})"
			],
			"description": "void SpriteBatchNode::insertQuadFromSprite(Sprite *sprite, ssize_t index)"
		},
		 "void TransitionCrossFade::onEnter()": {
			"prefix": "void TransitionCrossFade::onEnter()",
			"body": [
				"void TransitionCrossFade:onEnter()"
			],
			"description": "void TransitionCrossFade::onEnter()"
		},
		 "void Mat4::scale(float value)": {
			"prefix": "void Mat4::scale(float value)",
			"body": [
				"Mat4:scale(${1:float value})"
			],
			"description": "void Mat4::scale(float value)"
		},
		 "void EditBoxImplCommon::setFontColor(const Color4B& color)": {
			"prefix": "void EditBoxImplCommon::setFontColor(const Color4B& color)",
			"body": [
				"EditBoxImplCommon:setFontColor(${1:Color4B& color})"
			],
			"description": "void EditBoxImplCommon::setFontColor(const Color4B& color)"
		},
		 "Reference* Bundle3D::seekToFirstType(unsigned int type, const std::string& id)": {
			"prefix": "Reference* Bundle3D::seekToFirstType(unsigned int type, const std::string& id)",
			"body": [
				"Bundle3D:seekToFirstType(${1:unsigned int type},${2:std:string& id})"
			],
			"description": "Reference* Bundle3D::seekToFirstType(unsigned int type, const std::string& id)"
		},
		 "MenuItemLabel * MenuItemLabel::create(Node*label, const ccMenuCallback& callback)": {
			"prefix": "MenuItemLabel * MenuItemLabel::create(Node*label, const ccMenuCallback& callback)",
			"body": [
				"* MenuItemLabel:create(${1:Node*label},${2:ccMenuCallback& callback})"
			],
			"description": "MenuItemLabel * MenuItemLabel::create(Node*label, const ccMenuCallback& callback)"
		},
		 "GLProgramState* GLProgramState::getOrCreateWithGLProgramName(const std::string& glProgramName )": {
			"prefix": "GLProgramState* GLProgramState::getOrCreateWithGLProgramName(const std::string& glProgramName )",
			"body": [
				"GLProgramState:getOrCreateWithGLProgramName(${1:std:string& glProgramName})"
			],
			"description": "GLProgramState* GLProgramState::getOrCreateWithGLProgramName(const std::string& glProgramName )"
		},
		 "void VideoPlayer::seekTo(float sec)": {
			"prefix": "void VideoPlayer::seekTo(float sec)",
			"body": [
				"VideoPlayer:seekTo(${1:float sec})"
			],
			"description": "void VideoPlayer::seekTo(float sec)"
		},
		 "void GLProgram::setUniformLocationWithMatrix2fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)": {
			"prefix": "void GLProgram::setUniformLocationWithMatrix2fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)",
			"body": [
				"GLProgram:setUniformLocationWithMatrix2fv(${1:GLint location},${2:GLfloat* matrixArray},${3:unsigned int numberOfMatrices})"
			],
			"description": "void GLProgram::setUniformLocationWithMatrix2fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)"
		},
		 "void SimpleAudioEngine::resumeAllEffects()": {
			"prefix": "void SimpleAudioEngine::resumeAllEffects()",
			"body": [
				"void SimpleAudioEngine:resumeAllEffects()"
			],
			"description": "void SimpleAudioEngine::resumeAllEffects()"
		},
		 "void NodeLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char* pPropertyName, Size pSize, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char* pPropertyName, Size pSize, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeSize(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:Size pSize},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char* pPropertyName, Size pSize, CCBReader * ccbReader)"
		},
		 "void Skin::updateArmatureTransform()": {
			"prefix": "void Skin::updateArmatureTransform()",
			"body": [
				"void Skin:updateArmatureTransform()"
			],
			"description": "void Skin::updateArmatureTransform()"
		},
		 "bool Armature::init()": {
			"prefix": "bool Armature::init()",
			"body": [
				"bool Armature:init()"
			],
			"description": "bool Armature::init()"
		},
		 "void RenderTexture::onClearDepth()": {
			"prefix": "void RenderTexture::onClearDepth()",
			"body": [
				"void RenderTexture:onClearDepth()"
			],
			"description": "void RenderTexture::onClearDepth()"
		},
		 "void ProgressTimer::setOpacity(GLubyte opacity)": {
			"prefix": "void ProgressTimer::setOpacity(GLubyte opacity)",
			"body": [
				"ProgressTimer:setOpacity(${1:GLubyte opacity})"
			],
			"description": "void ProgressTimer::setOpacity(GLubyte opacity)"
		},
		 "flatbuffers::Offset<flatbuffers::BlendFrame> FlatBuffersSerialize::createBlendFrame(const tinyxml2::XMLElement* objectData)": {
			"prefix": "flatbuffers::Offset<flatbuffers::BlendFrame> FlatBuffersSerialize::createBlendFrame(const tinyxml2::XMLElement* objectData)",
			"body": [
				"FlatBuffersSerialize:createBlendFrame(${1:tinyxml2:XMLElement* objectData})"
			],
			"description": "flatbuffers::Offset<flatbuffers::BlendFrame> FlatBuffersSerialize::createBlendFrame(const tinyxml2::XMLElement* objectData)"
		},
		 "void DataVisitor::visit(const __Float *value)": {
			"prefix": "void DataVisitor::visit(const __Float *value)",
			"body": [
				"DataVisitor:visit(${1:__Float *value})"
			],
			"description": "void DataVisitor::visit(const __Float *value)"
		},
		 "void ParticleBatchNode::updateBlendFunc()": {
			"prefix": "void ParticleBatchNode::updateBlendFunc()",
			"body": [
				"void ParticleBatchNode:updateBlendFunc()"
			],
			"description": "void ParticleBatchNode::updateBlendFunc()"
		},
		 "cocos2d::Node* ComRender::getNode()": {
			"prefix": "cocos2d::Node* ComRender::getNode()",
			"body": [
				"cocos2d:Node* ComRender:getNode()"
			],
			"description": "cocos2d::Node* ComRender::getNode()"
		},
		 "void AtlasNode::updateAtlasValues()": {
			"prefix": "void AtlasNode::updateAtlasValues()",
			"body": [
				"void AtlasNode:updateAtlasValues()"
			],
			"description": "void AtlasNode::updateAtlasValues()"
		},
		 "void EditBox::setPlaceholderFontName(const char* pFontName)": {
			"prefix": "void EditBox::setPlaceholderFontName(const char* pFontName)",
			"body": [
				"EditBox:setPlaceholderFontName(${1:char* pFontName})"
			],
			"description": "void EditBox::setPlaceholderFontName(const char* pFontName)"
		},
		 "void Slider::progressBarRendererScaleChangedWithSize()": {
			"prefix": "void Slider::progressBarRendererScaleChangedWithSize()",
			"body": [
				"void Slider:progressBarRendererScaleChangedWithSize()"
			],
			"description": "void Slider::progressBarRendererScaleChangedWithSize()"
		},
		 "std::string CSLoader::getGUIClassName(const std::string &name)": {
			"prefix": "std::string CSLoader::getGUIClassName(const std::string &name)",
			"body": [
				"CSLoader:getGUIClassName(${1:std:string &name})"
			],
			"description": "std::string CSLoader::getGUIClassName(const std::string &name)"
		},
		 "std::string MenuItem::getDescription() const": {
			"prefix": "std::string MenuItem::getDescription() const",
			"body": [
				"std:string MenuItem:getDescription() "
			],
			"description": "std::string MenuItem::getDescription() const"
		},
		 "Color3B NodeLoader::parsePropTypeColor3(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)": {
			"prefix": "Color3B NodeLoader::parsePropTypeColor3(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)",
			"body": [
				"NodeLoader:parsePropTypeColor3(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader},${4:char *pPropertyName})"
			],
			"description": "Color3B NodeLoader::parsePropTypeColor3(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)"
		},
		 "int Texture2D::getPixelsWide() const": {
			"prefix": "int Texture2D::getPixelsWide() const",
			"body": [
				"int Texture2D:getPixelsWide() "
			],
			"description": "int Texture2D::getPixelsWide() const"
		},
		 "void Vec3::smooth(const Vec3& target, float elapsedTime, float responseTime)": {
			"prefix": "void Vec3::smooth(const Vec3& target, float elapsedTime, float responseTime)",
			"body": [
				"Vec3:smooth(${1:Vec3& target},${2:float elapsedTime},${3:float responseTime})"
			],
			"description": "void Vec3::smooth(const Vec3& target, float elapsedTime, float responseTime)"
		},
		 "void Plane::initPlane(const Vec3& normal, const Vec3& point)": {
			"prefix": "void Plane::initPlane(const Vec3& normal, const Vec3& point)",
			"body": [
				"Plane:initPlane(${1:Vec3& normal},${2:Vec3& point})"
			],
			"description": "void Plane::initPlane(const Vec3& normal, const Vec3& point)"
		},
		 "ValueMap FileUtils::getValueMapFromData(const char* filedata, int filesize)": {
			"prefix": "ValueMap FileUtils::getValueMapFromData(const char* filedata, int filesize)",
			"body": [
				"FileUtils:getValueMapFromData(${1:char* filedata},${2:int filesize})"
			],
			"description": "ValueMap FileUtils::getValueMapFromData(const char* filedata, int filesize)"
		},
		 "float DataReaderHelper::getPositionReadScale()": {
			"prefix": "float DataReaderHelper::getPositionReadScale()",
			"body": [
				"float DataReaderHelper:getPositionReadScale()"
			],
			"description": "float DataReaderHelper::getPositionReadScale()"
		},
		 "void AudioEngine::uncacheAll()": {
			"prefix": "void AudioEngine::uncacheAll()",
			"body": [
				"void AudioEngine:uncacheAll()"
			],
			"description": "void AudioEngine::uncacheAll()"
		},
		 "Widget* Layout::findNextFocusedWidget(FocusDirection direction, Widget* current)": {
			"prefix": "Widget* Layout::findNextFocusedWidget(FocusDirection direction, Widget* current)",
			"body": [
				"Layout:findNextFocusedWidget(${1:FocusDirection direction},${2:Widget* current})"
			],
			"description": "Widget* Layout::findNextFocusedWidget(FocusDirection direction, Widget* current)"
		},
		 "unsigned int ComAudio::playEffect()": {
			"prefix": "unsigned int ComAudio::playEffect()",
			"body": [
				"unsigned int ComAudio:playEffect()"
			],
			"description": "unsigned int ComAudio::playEffect()"
		},
		 "Vec2 Touch::getStartLocation() const": {
			"prefix": "Vec2 Touch::getStartLocation() const",
			"body": [
				"Vec2 Touch:getStartLocation() "
			],
			"description": "Vec2 Touch::getStartLocation() const"
		},
		 "void ProtectedNode::removeAllProtectedChildrenWithCleanup(bool cleanup)": {
			"prefix": "void ProtectedNode::removeAllProtectedChildrenWithCleanup(bool cleanup)",
			"body": [
				"ProtectedNode:removeAllProtectedChildrenWithCleanup(${1:bool cleanup})"
			],
			"description": "void ProtectedNode::removeAllProtectedChildrenWithCleanup(bool cleanup)"
		},
		 "void ArmatureAnimation::playWithIndexes(const std::vector<int>& movementIndexes, int durationTo, bool loop)": {
			"prefix": "void ArmatureAnimation::playWithIndexes(const std::vector<int>& movementIndexes, int durationTo, bool loop)",
			"body": [
				"ArmatureAnimation:playWithIndexes(${1:std:vector<int>& movementIndexes},${2:int durationTo},${3:bool loop})"
			],
			"description": "void ArmatureAnimation::playWithIndexes(const std::vector<int>& movementIndexes, int durationTo, bool loop)"
		},
		 "void ScrollView::endRecordSlidAction()": {
			"prefix": "void ScrollView::endRecordSlidAction()",
			"body": [
				"void ScrollView:endRecordSlidAction()"
			],
			"description": "void ScrollView::endRecordSlidAction()"
		},
		 "void ParticleSystemQuadLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)": {
			"prefix": "void ParticleSystemQuadLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)",
			"body": [
				"ParticleSystemQuadLoader:onHandlePropTypeBlendFunc(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:BlendFunc pBlendFunc},${5:CCBReader * ccbReader})"
			],
			"description": "void ParticleSystemQuadLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)"
		},
		 "void ProtectedNode::onExitTransitionDidStart()": {
			"prefix": "void ProtectedNode::onExitTransitionDidStart()",
			"body": [
				"void ProtectedNode:onExitTransitionDidStart()"
			],
			"description": "void ProtectedNode::onExitTransitionDidStart()"
		},
		 "AnimationInfo ActionTimeline::getAnimationInfo(const std::string &animationName)": {
			"prefix": "AnimationInfo ActionTimeline::getAnimationInfo(const std::string &animationName)",
			"body": [
				"ActionTimeline:getAnimationInfo(${1:std:string &animationName})"
			],
			"description": "AnimationInfo ActionTimeline::getAnimationInfo(const std::string &animationName)"
		},
		 "CCBRotateTo* CCBRotateTo::reverse() const": {
			"prefix": "CCBRotateTo* CCBRotateTo::reverse() const",
			"body": [
				"CCBRotateTo* CCBRotateTo:reverse() "
			],
			"description": "CCBRotateTo* CCBRotateTo::reverse() const"
		},
		 "FontAtlas * FontFreeType::createFontAtlas()": {
			"prefix": "FontAtlas * FontFreeType::createFontAtlas()",
			"body": [
				"FontAtlas * FontFreeType:createFontAtlas()"
			],
			"description": "FontAtlas * FontFreeType::createFontAtlas()"
		},
		 "Sprite* Label::getLetter(int letterIndex)": {
			"prefix": "Sprite* Label::getLetter(int letterIndex)",
			"body": [
				"Label:getLetter(${1:int letterIndex})"
			],
			"description": "Sprite* Label::getLetter(int letterIndex)"
		},
		 "void AndroidJavaEngine::preloadEffect(const char* filePath)": {
			"prefix": "void AndroidJavaEngine::preloadEffect(const char* filePath)",
			"body": [
				"AndroidJavaEngine:preloadEffect(${1:char* filePath})"
			],
			"description": "void AndroidJavaEngine::preloadEffect(const char* filePath)"
		},
		 "void RepeatForever::step(float dt)": {
			"prefix": "void RepeatForever::step(float dt)",
			"body": [
				"RepeatForever:step(${1:float dt})"
			],
			"description": "void RepeatForever::step(float dt)"
		},
		 "int AudioEngine::play2d(const std::string& filePath, bool loop, float volume, const AudioProfile *profile)": {
			"prefix": "int AudioEngine::play2d(const std::string& filePath, bool loop, float volume, const AudioProfile *profile)",
			"body": [
				"AudioEngine:play2d(${1:std:string& filePath},${2:bool loop},${3:float volume},${4:AudioProfile *profile})"
			],
			"description": "int AudioEngine::play2d(const std::string& filePath, bool loop, float volume, const AudioProfile *profile)"
		},
		 "const Value& Configuration::getValue(const std::string& key, const Value& defaultValue) const": {
			"prefix": "const Value& Configuration::getValue(const std::string& key, const Value& defaultValue) const",
			"body": [
				"Value& Configuration:getValue(${1:std:string& key},${2:Value& defaultValue})"
			],
			"description": "const Value& Configuration::getValue(const std::string& key, const Value& defaultValue) const"
		},
		 "bool VBox::init()": {
			"prefix": "bool VBox::init()",
			"body": [
				"bool VBox:init()"
			],
			"description": "bool VBox::init()"
		},
		 "LayerMultiplex * LayerMultiplex::create(Layer * layer, ...)": {
			"prefix": "LayerMultiplex * LayerMultiplex::create(Layer * layer, ...)",
			"body": [
				"* LayerMultiplex:create(${1:Layer * layer},${2:...})"
			],
			"description": "LayerMultiplex * LayerMultiplex::create(Layer * layer, ...)"
		},
		 "bool Image::isJpg(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::isJpg(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:isJpg(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::isJpg(const unsigned char * data, ssize_t dataLen)"
		},
		 "float Plane::dist2Plane(const Vec3& p) const": {
			"prefix": "float Plane::dist2Plane(const Vec3& p) const",
			"body": [
				"Plane:dist2Plane(${1:Vec3& p})"
			],
			"description": "float Plane::dist2Plane(const Vec3& p) const"
		},
		 "Bone3D* Bone3D::getParentBone()": {
			"prefix": "Bone3D* Bone3D::getParentBone()",
			"body": [
				"Bone3D* Bone3D:getParentBone()"
			],
			"description": "Bone3D* Bone3D::getParentBone()"
		},
		 "Spawn* Spawn::create(const Vector<FiniteTimeAction*>& arrayOfActions)": {
			"prefix": "Spawn* Spawn::create(const Vector<FiniteTimeAction*>& arrayOfActions)",
			"body": [
				"Spawn:create(${1:Vector<FiniteTimeAction*>& arrayOfActions})"
			],
			"description": "Spawn* Spawn::create(const Vector<FiniteTimeAction*>& arrayOfActions)"
		},
		 "DisplayData *DataReaderHelper::decodeBoneDisplay(tinyxml2::XMLElement *displayXML, DataInfo *dataInfo)": {
			"prefix": "DisplayData *DataReaderHelper::decodeBoneDisplay(tinyxml2::XMLElement *displayXML, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeBoneDisplay(${1:tinyxml2:XMLElement *displayXML},${2:DataInfo *dataInfo})"
			],
			"description": "DisplayData *DataReaderHelper::decodeBoneDisplay(tinyxml2::XMLElement *displayXML, DataInfo *dataInfo)"
		},
		 "EaseCubicActionInOut* EaseCubicActionInOut::reverse() const": {
			"prefix": "EaseCubicActionInOut* EaseCubicActionInOut::reverse() const",
			"body": [
				"EaseCubicActionInOut* EaseCubicActionInOut:reverse() "
			],
			"description": "EaseCubicActionInOut* EaseCubicActionInOut::reverse() const"
		},
		 "void Texture2D::setDefaultAlphaPixelFormat(Texture2D::PixelFormat format)": {
			"prefix": "void Texture2D::setDefaultAlphaPixelFormat(Texture2D::PixelFormat format)",
			"body": [
				"Texture2D:setDefaultAlphaPixelFormat(${1:Texture2D:PixelFormat format})"
			],
			"description": "void Texture2D::setDefaultAlphaPixelFormat(Texture2D::PixelFormat format)"
		},
		 "void AtlasNode::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void AtlasNode::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"AtlasNode:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void AtlasNode::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "bool InputDelegate::isKeypadEnabled() const": {
			"prefix": "bool InputDelegate::isKeypadEnabled() const",
			"body": [
				"bool InputDelegate:isKeypadEnabled() "
			],
			"description": "bool InputDelegate::isKeypadEnabled() const"
		},
		 "void ParticleSystem::setRadialAccelVar(float t)": {
			"prefix": "void ParticleSystem::setRadialAccelVar(float t)",
			"body": [
				"ParticleSystem:setRadialAccelVar(${1:float t})"
			],
			"description": "void ParticleSystem::setRadialAccelVar(float t)"
		},
		 "GridAction* GridAction::reverse() const": {
			"prefix": "GridAction* GridAction::reverse() const",
			"body": [
				"GridAction* GridAction:reverse() "
			],
			"description": "GridAction* GridAction::reverse() const"
		},
		 "bool Sprite3D::initWithFile(const std::string& path)": {
			"prefix": "bool Sprite3D::initWithFile(const std::string& path)",
			"body": [
				"Sprite3D:initWithFile(${1:std:string& path})"
			],
			"description": "bool Sprite3D::initWithFile(const std::string& path)"
		},
		 "Vec4::Vec4(const Vec4& p1, const Vec4& p2)": {
			"prefix": "Vec4::Vec4(const Vec4& p1, const Vec4& p2)",
			"body": [
				"p1},${2:Vec4& p2})"
			],
			"description": "Vec4::Vec4(const Vec4& p1, const Vec4& p2)"
		},
		 "TransitionSplitCols* TransitionSplitCols::create(float t, Scene* scene)": {
			"prefix": "TransitionSplitCols* TransitionSplitCols::create(float t, Scene* scene)",
			"body": [
				"TransitionSplitCols:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionSplitCols* TransitionSplitCols::create(float t, Scene* scene)"
		},
		 "void WsThreadHelper::sendMessageToUIThread(WsMessage *msg)": {
			"prefix": "void WsThreadHelper::sendMessageToUIThread(WsMessage *msg)",
			"body": [
				"WsThreadHelper:sendMessageToUIThread(${1:WsMessage *msg})"
			],
			"description": "void WsThreadHelper::sendMessageToUIThread(WsMessage *msg)"
		},
		 "void AudioPlayer::rotateBufferThread(int offsetFrame)": {
			"prefix": "void AudioPlayer::rotateBufferThread(int offsetFrame)",
			"body": [
				"AudioPlayer:rotateBufferThread(${1:int offsetFrame})"
			],
			"description": "void AudioPlayer::rotateBufferThread(int offsetFrame)"
		},
		 "Mat4 Mat4::getInversed() const": {
			"prefix": "Mat4 Mat4::getInversed() const",
			"body": [
				"Mat4 Mat4:getInversed() "
			],
			"description": "Mat4 Mat4::getInversed() const"
		},
		 "ImageView* ImageView::create(const std::string &imageFileName, TextureResType texType)": {
			"prefix": "ImageView* ImageView::create(const std::string &imageFileName, TextureResType texType)",
			"body": [
				"ImageView:create(${1:std:string &imageFileName},${2:TextureResType texType})"
			],
			"description": "ImageView* ImageView::create(const std::string &imageFileName, TextureResType texType)"
		},
		 "void NavMeshAgent::stop()": {
			"prefix": "void NavMeshAgent::stop()",
			"body": [
				"void NavMeshAgent:stop()"
			],
			"description": "void NavMeshAgent::stop()"
		},
		 "void SpriteFrameCache::removeSpriteFramesFromDictionary(ValueMap& dictionary)": {
			"prefix": "void SpriteFrameCache::removeSpriteFramesFromDictionary(ValueMap& dictionary)",
			"body": [
				"SpriteFrameCache:removeSpriteFramesFromDictionary(${1:ValueMap& dictionary})"
			],
			"description": "void SpriteFrameCache::removeSpriteFramesFromDictionary(ValueMap& dictionary)"
		},
		 "AccelAmplitude* AccelAmplitude::reverse() const": {
			"prefix": "AccelAmplitude* AccelAmplitude::reverse() const",
			"body": [
				"AccelAmplitude* AccelAmplitude:reverse() "
			],
			"description": "AccelAmplitude* AccelAmplitude::reverse() const"
		},
		 "void PhysicsBody::setContactTestBitmask(int bitmask)": {
			"prefix": "void PhysicsBody::setContactTestBitmask(int bitmask)",
			"body": [
				"PhysicsBody:setContactTestBitmask(${1:int bitmask})"
			],
			"description": "void PhysicsBody::setContactTestBitmask(int bitmask)"
		},
		 "bool Size::equals(const Size& target) const": {
			"prefix": "bool Size::equals(const Size& target) const",
			"body": [
				"Size:equals(${1:Size& target})"
			],
			"description": "bool Size::equals(const Size& target) const"
		},
		 "bool Node::isIgnoreAnchorPointForPosition() const": {
			"prefix": "bool Node::isIgnoreAnchorPointForPosition() const",
			"body": [
				"bool Node:isIgnoreAnchorPointForPosition() "
			],
			"description": "bool Node::isIgnoreAnchorPointForPosition() const"
		},
		 "bool EventListenerTouchAllAtOnce::init()": {
			"prefix": "bool EventListenerTouchAllAtOnce::init()",
			"body": [
				"bool EventListenerTouchAllAtOnce:init()"
			],
			"description": "bool EventListenerTouchAllAtOnce::init()"
		},
		 "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, const ccMenuCallback& callback)": {
			"prefix": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, const ccMenuCallback& callback)",
			"body": [
				"* MenuItemImage:create(${1:std:string& normalImage},${2:std:string& selectedImage},${3:std:string& disabledImage},${4:ccMenuCallback& callback})"
			],
			"description": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, const ccMenuCallback& callback)"
		},
		 "void ScrollViewBar::processAutoHide(float deltaTime)": {
			"prefix": "void ScrollViewBar::processAutoHide(float deltaTime)",
			"body": [
				"ScrollViewBar:processAutoHide(${1:float deltaTime})"
			],
			"description": "void ScrollViewBar::processAutoHide(float deltaTime)"
		},
		 "void ScrollView::setInertiaScrollEnabled(bool enabled)": {
			"prefix": "void ScrollView::setInertiaScrollEnabled(bool enabled)",
			"body": [
				"ScrollView:setInertiaScrollEnabled(${1:bool enabled})"
			],
			"description": "void ScrollView::setInertiaScrollEnabled(bool enabled)"
		},
		 "EaseQuadraticActionIn* EaseQuadraticActionIn::create(ActionInterval* action)": {
			"prefix": "EaseQuadraticActionIn* EaseQuadraticActionIn::create(ActionInterval* action)",
			"body": [
				"EaseQuadraticActionIn:create(${1:ActionInterval* action})"
			],
			"description": "EaseQuadraticActionIn* EaseQuadraticActionIn::create(ActionInterval* action)"
		},
		 "bool Bundle3D::loadMaterialDataJson_0_1(MaterialDatas& materialdatas)": {
			"prefix": "bool Bundle3D::loadMaterialDataJson_0_1(MaterialDatas& materialdatas)",
			"body": [
				"Bundle3D:loadMaterialDataJson_0_1(${1:MaterialDatas& materialdatas})"
			],
			"description": "bool Bundle3D::loadMaterialDataJson_0_1(MaterialDatas& materialdatas)"
		},
		 "EaseCircleActionIn* EaseCircleActionIn::reverse() const": {
			"prefix": "EaseCircleActionIn* EaseCircleActionIn::reverse() const",
			"body": [
				"EaseCircleActionIn* EaseCircleActionIn:reverse() "
			],
			"description": "EaseCircleActionIn* EaseCircleActionIn::reverse() const"
		},
		 "EaseCircleActionInOut* EaseCircleActionInOut::reverse() const": {
			"prefix": "EaseCircleActionInOut* EaseCircleActionInOut::reverse() const",
			"body": [
				"EaseCircleActionInOut* EaseCircleActionInOut:reverse() "
			],
			"description": "EaseCircleActionInOut* EaseCircleActionInOut::reverse() const"
		},
		 "void AtlasNode::updateOpacityModifyRGB()": {
			"prefix": "void AtlasNode::updateOpacityModifyRGB()",
			"body": [
				"void AtlasNode:updateOpacityModifyRGB()"
			],
			"description": "void AtlasNode::updateOpacityModifyRGB()"
		},
		 "void DrawNode::drawPoints(const Vec2 *position, unsigned int numberOfPoints, const Color4F &color)": {
			"prefix": "void DrawNode::drawPoints(const Vec2 *position, unsigned int numberOfPoints, const Color4F &color)",
			"body": [
				"DrawNode:drawPoints(${1:Vec2 *position},${2:unsigned int numberOfPoints},${3:Color4F &color})"
			],
			"description": "void DrawNode::drawPoints(const Vec2 *position, unsigned int numberOfPoints, const Color4F &color)"
		},
		 "bool SpriteBatchNode::init()": {
			"prefix": "bool SpriteBatchNode::init()",
			"body": [
				"bool SpriteBatchNode:init()"
			],
			"description": "bool SpriteBatchNode::init()"
		},
		 "TransitionMoveInL* TransitionMoveInL::create(float t, Scene* scene)": {
			"prefix": "TransitionMoveInL* TransitionMoveInL::create(float t, Scene* scene)",
			"body": [
				"TransitionMoveInL:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionMoveInL* TransitionMoveInL::create(float t, Scene* scene)"
		},
		 "bool localStorageGetItem( const std::string& key, std::string *outItem )": {
			"prefix": "bool localStorageGetItem( const std::string& key, std::string *outItem )",
			"body": [
				"localStorageGetItem(${1:std:string& key},${2:std:string *outItem})"
			],
			"description": "bool localStorageGetItem( const std::string& key, std::string *outItem )"
		},
		 "void Widget::interceptTouchEvent(cocos2d::ui::Widget::TouchEventType event, cocos2d::ui::Widget *sender, Touch *touch)": {
			"prefix": "void Widget::interceptTouchEvent(cocos2d::ui::Widget::TouchEventType event, cocos2d::ui::Widget *sender, Touch *touch)",
			"body": [
				"Widget:interceptTouchEvent(${1:cocos2d:ui:Widget:TouchEventType event},${2:cocos2d:ui:Widget *sender},${3:Touch *touch})"
			],
			"description": "void Widget::interceptTouchEvent(cocos2d::ui::Widget::TouchEventType event, cocos2d::ui::Widget *sender, Touch *touch)"
		},
		 "void ParticleBatchNode::addChildByTagOrName(ParticleSystem* child, int zOrder, int tag, const std::string &name, bool setTag)": {
			"prefix": "void ParticleBatchNode::addChildByTagOrName(ParticleSystem* child, int zOrder, int tag, const std::string &name, bool setTag)",
			"body": [
				"ParticleBatchNode:addChildByTagOrName(${1:ParticleSystem* child},${2:int zOrder},${3:int tag},${4:std:string &name},${5:bool setTag})"
			],
			"description": "void ParticleBatchNode::addChildByTagOrName(ParticleSystem* child, int zOrder, int tag, const std::string &name, bool setTag)"
		},
		 "void RichText::ignoreContentAdaptWithSize(bool ignore)": {
			"prefix": "void RichText::ignoreContentAdaptWithSize(bool ignore)",
			"body": [
				"RichText:ignoreContentAdaptWithSize(${1:bool ignore})"
			],
			"description": "void RichText::ignoreContentAdaptWithSize(bool ignore)"
		},
		 "void Vec3::subtract(const Vec3& v1, const Vec3& v2, Vec3* dst)": {
			"prefix": "void Vec3::subtract(const Vec3& v1, const Vec3& v2, Vec3* dst)",
			"body": [
				"Vec3:subtract(${1:Vec3& v1},${2:Vec3& v2},${3:Vec3* dst})"
			],
			"description": "void Vec3::subtract(const Vec3& v1, const Vec3& v2, Vec3* dst)"
		},
		 "void ComController::onExit()": {
			"prefix": "void ComController::onExit()",
			"body": [
				"void ComController:onExit()"
			],
			"description": "void ComController::onExit()"
		},
		 "void PhysicsBody::removeShape(int tag, bool reduceMassAndMoment/* = true*/)": {
			"prefix": "void PhysicsBody::removeShape(int tag, bool reduceMassAndMoment/* = true*/)",
			"body": [
				"PhysicsBody:removeShape(${1:int tag},${2:bool reduceMassAndMoment/* = true*/})"
			],
			"description": "void PhysicsBody::removeShape(int tag, bool reduceMassAndMoment/* = true*/)"
		},
		 "bool PolygonBatch::initWithCapacity (ssize_t capacity)": {
			"prefix": "bool PolygonBatch::initWithCapacity (ssize_t capacity)",
			"body": [
				"PolygonBatch:initWithCapacity (${1:ssize_t capacity})"
			],
			"description": "bool PolygonBatch::initWithCapacity (ssize_t capacity)"
		},
		 "void Skin::updateTransform()": {
			"prefix": "void Skin::updateTransform()",
			"body": [
				"void Skin:updateTransform()"
			],
			"description": "void Skin::updateTransform()"
		},
		 "void PoolManager::push(AutoreleasePool *pool)": {
			"prefix": "void PoolManager::push(AutoreleasePool *pool)",
			"body": [
				"PoolManager:push(${1:AutoreleasePool *pool})"
			],
			"description": "void PoolManager::push(AutoreleasePool *pool)"
		},
		 "void ComController::onEnter()": {
			"prefix": "void ComController::onEnter()",
			"body": [
				"void ComController:onEnter()"
			],
			"description": "void ComController::onEnter()"
		},
		 "void Widget::setTouchEnabled(bool enable)": {
			"prefix": "void Widget::setTouchEnabled(bool enable)",
			"body": [
				"Widget:setTouchEnabled(${1:bool enable})"
			],
			"description": "void Widget::setTouchEnabled(bool enable)"
		},
		 "Speed *Speed::reverse() const": {
			"prefix": "Speed *Speed::reverse() const",
			"body": [
				"Speed *Speed:reverse() "
			],
			"description": "Speed *Speed::reverse() const"
		},
		 "float Physics3DSliderConstraint::getRestitutionLimAng() const": {
			"prefix": "float Physics3DSliderConstraint::getRestitutionLimAng() const",
			"body": [
				"float Physics3DSliderConstraint:getRestitutionLimAng() "
			],
			"description": "float Physics3DSliderConstraint::getRestitutionLimAng() const"
		},
		 "void Widget::enableDpadNavigation(bool enable)": {
			"prefix": "void Widget::enableDpadNavigation(bool enable)",
			"body": [
				"Widget:enableDpadNavigation(${1:bool enable})"
			],
			"description": "void Widget::enableDpadNavigation(bool enable)"
		},
		 "void CCBReader::addOwnerCallbackName(const std::string& name)": {
			"prefix": "void CCBReader::addOwnerCallbackName(const std::string& name)",
			"body": [
				"CCBReader:addOwnerCallbackName(${1:std:string& name})"
			],
			"description": "void CCBReader::addOwnerCallbackName(const std::string& name)"
		},
		 "bool ColliderDetector::init(Bone *bone)": {
			"prefix": "bool ColliderDetector::init(Bone *bone)",
			"body": [
				"ColliderDetector:init(${1:Bone *bone})"
			],
			"description": "bool ColliderDetector::init(Bone *bone)"
		},
		 "Vec2 NodeLoader::parsePropTypePointLock(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "Vec2 NodeLoader::parsePropTypePointLock(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypePointLock(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "Vec2 NodeLoader::parsePropTypePointLock(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void Label::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void Label::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"Label:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void Label::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "void Component::onAdd()": {
			"prefix": "void Component::onAdd()",
			"body": [
				"void Component:onAdd()"
			],
			"description": "void Component::onAdd()"
		},
		 "void* LinearAllocator::alloc(const int size)": {
			"prefix": "void* LinearAllocator::alloc(const int size)",
			"body": [
				"LinearAllocator:alloc(${1:int size})"
			],
			"description": "void* LinearAllocator::alloc(const int size)"
		},
		 "void ArmatureAnimation::movementEvent(Armature *armature, MovementEventType movementType, const std::string& movementID)": {
			"prefix": "void ArmatureAnimation::movementEvent(Armature *armature, MovementEventType movementType, const std::string& movementID)",
			"body": [
				"ArmatureAnimation:movementEvent(${1:Armature *armature},${2:MovementEventType movementType},${3:std:string& movementID})"
			],
			"description": "void ArmatureAnimation::movementEvent(Armature *armature, MovementEventType movementType, const std::string& movementID)"
		},
		 "void Downloader::prepareDownload(const DownloadUnit& downloadUnit)": {
			"prefix": "void Downloader::prepareDownload(const DownloadUnit& downloadUnit)",
			"body": [
				"Downloader:prepareDownload(${1:DownloadUnit& downloadUnit})"
			],
			"description": "void Downloader::prepareDownload(const DownloadUnit& downloadUnit)"
		},
		 "void __Array::insertObject(Ref* object, ssize_t index)": {
			"prefix": "void __Array::insertObject(Ref* object, ssize_t index)",
			"body": [
				"__Array:insertObject(${1:Ref* object},${2:ssize_t index})"
			],
			"description": "void __Array::insertObject(Ref* object, ssize_t index)"
		},
		 "Vector<Node*>& CCBReader::getNodesWithAnimationManagers()": {
			"prefix": "Vector<Node*>& CCBReader::getNodesWithAnimationManagers()",
			"body": [
				"Vector<Node*>& CCBReader:getNodesWithAnimationManagers()"
			],
			"description": "Vector<Node*>& CCBReader::getNodesWithAnimationManagers()"
		},
		 "void EditBoxImplCommon::setInputMode(EditBox::InputMode inputMode)": {
			"prefix": "void EditBoxImplCommon::setInputMode(EditBox::InputMode inputMode)",
			"body": [
				"EditBoxImplCommon:setInputMode(${1:EditBox:InputMode inputMode})"
			],
			"description": "void EditBoxImplCommon::setInputMode(EditBox::InputMode inputMode)"
		},
		 "void SpriteDisplayData::copy(DisplayData *displayData)": {
			"prefix": "void SpriteDisplayData::copy(DisplayData *displayData)",
			"body": [
				"SpriteDisplayData:copy(${1:DisplayData *displayData})"
			],
			"description": "void SpriteDisplayData::copy(DisplayData *displayData)"
		},
		 "bool AudioPlayer::setTime(float time)": {
			"prefix": "bool AudioPlayer::setTime(float time)",
			"body": [
				"AudioPlayer:setTime(${1:float time})"
			],
			"description": "bool AudioPlayer::setTime(float time)"
		},
		 "const Rect& Texture2D::getSpriteFrameCapInset( cocos2d::SpriteFrame *spriteFrame )const": {
			"prefix": "const Rect& Texture2D::getSpriteFrameCapInset( cocos2d::SpriteFrame *spriteFrame )const",
			"body": [
				"Rect& Texture2D:getSpriteFrameCapInset(${1:cocos2d:SpriteFrame *spriteFrame})"
			],
			"description": "const Rect& Texture2D::getSpriteFrameCapInset( cocos2d::SpriteFrame *spriteFrame )const"
		},
		 "void Texture2D::convertRGB888ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGB888ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGB888ToRGB565(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGB888ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void GLProgram::reset()": {
			"prefix": "void GLProgram::reset()",
			"body": [
				"void GLProgram:reset()"
			],
			"description": "void GLProgram::reset()"
		},
		 "void __NotificationCenter::registerScriptObserver(Ref *target, int handler,const std::string& name)": {
			"prefix": "void __NotificationCenter::registerScriptObserver(Ref *target, int handler,const std::string& name)",
			"body": [
				"__NotificationCenter:registerScriptObserver(${1:Ref *target},${2:int handler},${3:std:string& name})"
			],
			"description": "void __NotificationCenter::registerScriptObserver(Ref *target, int handler,const std::string& name)"
		},
		 "void Console::commandConfig(int fd, const std::string& args)": {
			"prefix": "void Console::commandConfig(int fd, const std::string& args)",
			"body": [
				"Console:commandConfig(${1:int fd},${2:std:string& args})"
			],
			"description": "void Console::commandConfig(int fd, const std::string& args)"
		},
		 "void CCBAnimationManager::addNode(Node *pNode, const std::unordered_map<int, Map<std::string, CCBSequenceProperty*>>& seq)": {
			"prefix": "void CCBAnimationManager::addNode(Node *pNode, const std::unordered_map<int, Map<std::string, CCBSequenceProperty*>>& seq)",
			"body": [
				"CCBAnimationManager:addNode(${1:Node *pNode},${2:std:unordered_map<int},${3:Map<std:string},${4:CCBSequenceProperty*>>& seq})"
			],
			"description": "void CCBAnimationManager::addNode(Node *pNode, const std::unordered_map<int, Map<std::string, CCBSequenceProperty*>>& seq)"
		},
		 "void EditBox::setPlaceHolder(const char* pText)": {
			"prefix": "void EditBox::setPlaceHolder(const char* pText)",
			"body": [
				"EditBox:setPlaceHolder(${1:char* pText})"
			],
			"description": "void EditBox::setPlaceHolder(const char* pText)"
		},
		 "void RichText::initRenderer()": {
			"prefix": "void RichText::initRenderer()",
			"body": [
				"void RichText:initRenderer()"
			],
			"description": "void RichText::initRenderer()"
		},
		 "Node* CSLoader::nodeWithFlatBuffersFile(const std::string &fileName, const ccNodeLoadCallback &callback)": {
			"prefix": "Node* CSLoader::nodeWithFlatBuffersFile(const std::string &fileName, const ccNodeLoadCallback &callback)",
			"body": [
				"CSLoader:nodeWithFlatBuffersFile(${1:std:string &fileName},${2:ccNodeLoadCallback &callback})"
			],
			"description": "Node* CSLoader::nodeWithFlatBuffersFile(const std::string &fileName, const ccNodeLoadCallback &callback)"
		},
		 "OrbitCamera* OrbitCamera::clone() const": {
			"prefix": "OrbitCamera* OrbitCamera::clone() const",
			"body": [
				"OrbitCamera* OrbitCamera:clone() "
			],
			"description": "OrbitCamera* OrbitCamera::clone() const"
		},
		 "float AudioEngineImpl::getDuration(int audioID)": {
			"prefix": "float AudioEngineImpl::getDuration(int audioID)",
			"body": [
				"AudioEngineImpl:getDuration(${1:int audioID})"
			],
			"description": "float AudioEngineImpl::getDuration(int audioID)"
		},
		 "void ParallaxNode::addChild(Node * child, int zOrder, const std::string &name)": {
			"prefix": "void ParallaxNode::addChild(Node * child, int zOrder, const std::string &name)",
			"body": [
				"ParallaxNode:addChild(${1:Node * child},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void ParallaxNode::addChild(Node * child, int zOrder, const std::string &name)"
		},
		 "const Vec2& Node::getAnchorPoint() const": {
			"prefix": "const Vec2& Node::getAnchorPoint() const",
			"body": [
				" Vec2& Node:getAnchorPoint() "
			],
			"description": "const Vec2& Node::getAnchorPoint() const"
		},
		 "Vec3 Camera::unproject(const Vec3& src) const": {
			"prefix": "Vec3 Camera::unproject(const Vec3& src) const",
			"body": [
				"Camera:unproject(${1:Vec3& src})"
			],
			"description": "Vec3 Camera::unproject(const Vec3& src) const"
		},
		 "void Terrain::onEnter()": {
			"prefix": "void Terrain::onEnter()",
			"body": [
				"void Terrain:onEnter()"
			],
			"description": "void Terrain::onEnter()"
		},
		 "bool HBox::initWithSize(const Size& size)": {
			"prefix": "bool HBox::initWithSize(const Size& size)",
			"body": [
				"HBox:initWithSize(${1:Size& size})"
			],
			"description": "bool HBox::initWithSize(const Size& size)"
		},
		 "void BMFontConfiguration::parseCommonArguments(const char* line)": {
			"prefix": "void BMFontConfiguration::parseCommonArguments(const char* line)",
			"body": [
				"BMFontConfiguration:parseCommonArguments(${1:char* line})"
			],
			"description": "void BMFontConfiguration::parseCommonArguments(const char* line)"
		},
		 "void TMXLayer::onDraw(Primitive *primitive)": {
			"prefix": "void TMXLayer::onDraw(Primitive *primitive)",
			"body": [
				"TMXLayer:onDraw(${1:Primitive *primitive})"
			],
			"description": "void TMXLayer::onDraw(Primitive *primitive)"
		},
		 "bool Bundle3D::load(const std::string& path)": {
			"prefix": "bool Bundle3D::load(const std::string& path)",
			"body": [
				"Bundle3D:load(${1:std:string& path})"
			],
			"description": "bool Bundle3D::load(const std::string& path)"
		},
		 "void TextAtlas::labelAtlasScaleChangedWithSize()": {
			"prefix": "void TextAtlas::labelAtlasScaleChangedWithSize()",
			"body": [
				"void TextAtlas:labelAtlasScaleChangedWithSize()"
			],
			"description": "void TextAtlas::labelAtlasScaleChangedWithSize()"
		},
		 "EaseQuinticActionInOut* EaseQuinticActionInOut::reverse() const": {
			"prefix": "EaseQuinticActionInOut* EaseQuinticActionInOut::reverse() const",
			"body": [
				"EaseQuinticActionInOut* EaseQuinticActionInOut:reverse() "
			],
			"description": "EaseQuinticActionInOut* EaseQuinticActionInOut::reverse() const"
		},
		 "void EventDispatcher::debugCheckNodeHasNoEventListenersOnDestruction(Node* node)": {
			"prefix": "void EventDispatcher::debugCheckNodeHasNoEventListenersOnDestruction(Node* node)",
			"body": [
				"EventDispatcher:debugCheckNodeHasNoEventListenersOnDestruction(${1:Node* node})"
			],
			"description": "void EventDispatcher::debugCheckNodeHasNoEventListenersOnDestruction(Node* node)"
		},
		 "void Physics3DComponent::setPhysics3DObject(Physics3DObject* physicsObj)": {
			"prefix": "void Physics3DComponent::setPhysics3DObject(Physics3DObject* physicsObj)",
			"body": [
				"Physics3DComponent:setPhysics3DObject(${1:Physics3DObject* physicsObj})"
			],
			"description": "void Physics3DComponent::setPhysics3DObject(Physics3DObject* physicsObj)"
		},
		 "void Sprite::setRotationSkewX(float fRotationX)": {
			"prefix": "void Sprite::setRotationSkewX(float fRotationX)",
			"body": [
				"Sprite:setRotationSkewX(${1:float fRotationX})"
			],
			"description": "void Sprite::setRotationSkewX(float fRotationX)"
		},
		 "FadeTo* FadeTo::reverse() const": {
			"prefix": "FadeTo* FadeTo::reverse() const",
			"body": [
				"FadeTo* FadeTo:reverse() "
			],
			"description": "FadeTo* FadeTo::reverse() const"
		},
		 "bool Menu::initWithArray(const Vector<MenuItem*>& arrayOfItems)": {
			"prefix": "bool Menu::initWithArray(const Vector<MenuItem*>& arrayOfItems)",
			"body": [
				"Menu:initWithArray(${1:Vector<MenuItem*>& arrayOfItems})"
			],
			"description": "bool Menu::initWithArray(const Vector<MenuItem*>& arrayOfItems)"
		},
		 "void LabelTTF::enableStroke(const Color3B &strokeColor, float strokeSize, bool updateTexture)": {
			"prefix": "void LabelTTF::enableStroke(const Color3B &strokeColor, float strokeSize, bool updateTexture)",
			"body": [
				"LabelTTF:enableStroke(${1:Color3B &strokeColor},${2:float strokeSize},${3:bool updateTexture})"
			],
			"description": "void LabelTTF::enableStroke(const Color3B &strokeColor, float strokeSize, bool updateTexture)"
		},
		 "EventListenerKeyboard* EventListenerKeyboard::clone()": {
			"prefix": "EventListenerKeyboard* EventListenerKeyboard::clone()",
			"body": [
				"EventListenerKeyboard* EventListenerKeyboard:clone()"
			],
			"description": "EventListenerKeyboard* EventListenerKeyboard::clone()"
		},
		 "FrameData *DataReaderHelper::decodeFrame(const rapidjson::Value& json, DataInfo *dataInfo)": {
			"prefix": "FrameData *DataReaderHelper::decodeFrame(const rapidjson::Value& json, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeFrame(${1:rapidjson:Value& json},${2:DataInfo *dataInfo})"
			],
			"description": "FrameData *DataReaderHelper::decodeFrame(const rapidjson::Value& json, DataInfo *dataInfo)"
		},
		 "EventFrame* EventFrame::create()": {
			"prefix": "EventFrame* EventFrame::create()",
			"body": [
				"EventFrame* EventFrame:create()"
			],
			"description": "EventFrame* EventFrame::create()"
		},
		 "ComController* ComController::create(void)": {
			"prefix": "ComController* ComController::create(void)",
			"body": [
				"ComController:create(${1:void})"
			],
			"description": "ComController* ComController::create(void)"
		},
		 "void TextureAtlas::insertQuadFromIndex(ssize_t oldIndex, ssize_t newIndex)": {
			"prefix": "void TextureAtlas::insertQuadFromIndex(ssize_t oldIndex, ssize_t newIndex)",
			"body": [
				"TextureAtlas:insertQuadFromIndex(${1:ssize_t oldIndex},${2:ssize_t newIndex})"
			],
			"description": "void TextureAtlas::insertQuadFromIndex(ssize_t oldIndex, ssize_t newIndex)"
		},
		 "EventListenerPhysicsContact* EventListenerPhysicsContact::clone()": {
			"prefix": "EventListenerPhysicsContact* EventListenerPhysicsContact::clone()",
			"body": [
				"EventListenerPhysicsContact* EventListenerPhysicsContact:clone()"
			],
			"description": "EventListenerPhysicsContact* EventListenerPhysicsContact::clone()"
		},
		 "void ActionNode::setObject(Ref* node)": {
			"prefix": "void ActionNode::setObject(Ref* node)",
			"body": [
				"ActionNode:setObject(${1:Ref* node})"
			],
			"description": "void ActionNode::setObject(Ref* node)"
		},
		 "void LoadingBar::loadTexture(SpriteFrame* spriteframe)": {
			"prefix": "void LoadingBar::loadTexture(SpriteFrame* spriteframe)",
			"body": [
				"LoadingBar:loadTexture(${1:SpriteFrame* spriteframe})"
			],
			"description": "void LoadingBar::loadTexture(SpriteFrame* spriteframe)"
		},
		 "void Physics3DConeTwistConstraint::setMotorTarget(const btQuaternion &q)": {
			"prefix": "void Physics3DConeTwistConstraint::setMotorTarget(const btQuaternion &q)",
			"body": [
				"Physics3DConeTwistConstraint:setMotorTarget(${1:btQuaternion &q})"
			],
			"description": "void Physics3DConeTwistConstraint::setMotorTarget(const btQuaternion &q)"
		},
		 "EaseOut* EaseOut::reverse() const": {
			"prefix": "EaseOut* EaseOut::reverse() const",
			"body": [
				"EaseOut* EaseOut:reverse() "
			],
			"description": "EaseOut* EaseOut::reverse() const"
		},
		 "void EditBoxImplWin::onEnter(void)": {
			"prefix": "void EditBoxImplWin::onEnter(void)",
			"body": [
				"EditBoxImplWin:onEnter(${1:void})"
			],
			"description": "void EditBoxImplWin::onEnter(void)"
		},
		 "void LabelTTFLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size size, CCBReader * ccbReader)": {
			"prefix": "void LabelTTFLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size size, CCBReader * ccbReader)",
			"body": [
				"LabelTTFLoader:onHandlePropTypeSize(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Size size},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelTTFLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size size, CCBReader * ccbReader)"
		},
		 "void SkeletonNode::checkSubBonesDirty()": {
			"prefix": "void SkeletonNode::checkSubBonesDirty()",
			"body": [
				"void SkeletonNode:checkSubBonesDirty()"
			],
			"description": "void SkeletonNode::checkSubBonesDirty()"
		},
		 "void ParallaxNode::removeAllChildrenWithCleanup(bool cleanup)": {
			"prefix": "void ParallaxNode::removeAllChildrenWithCleanup(bool cleanup)",
			"body": [
				"ParallaxNode:removeAllChildrenWithCleanup(${1:bool cleanup})"
			],
			"description": "void ParallaxNode::removeAllChildrenWithCleanup(bool cleanup)"
		},
		 "bool Image::initWithS3TCData(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithS3TCData(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithS3TCData(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithS3TCData(const unsigned char * data, ssize_t dataLen)"
		},
		 "void GLProgramState::setUniformVec2(const std::string& uniformName, const Vec2& value)": {
			"prefix": "void GLProgramState::setUniformVec2(const std::string& uniformName, const Vec2& value)",
			"body": [
				"GLProgramState:setUniformVec2(${1:std:string& uniformName},${2:Vec2& value})"
			],
			"description": "void GLProgramState::setUniformVec2(const std::string& uniformName, const Vec2& value)"
		},
		 "bool TextFieldTTF::initWithPlaceHolder(const std::string& placeholder, const Size& dimensions, TextHAlignment alignment, const std::string& fontName, float fontSize)": {
			"prefix": "bool TextFieldTTF::initWithPlaceHolder(const std::string& placeholder, const Size& dimensions, TextHAlignment alignment, const std::string& fontName, float fontSize)",
			"body": [
				"TextFieldTTF:initWithPlaceHolder(${1:std:string& placeholder},${2:Size& dimensions},${3:TextHAlignment alignment},${4:std:string& fontName},${5:float fontSize})"
			],
			"description": "bool TextFieldTTF::initWithPlaceHolder(const std::string& placeholder, const Size& dimensions, TextHAlignment alignment, const std::string& fontName, float fontSize)"
		},
		 "void Animate::stop()": {
			"prefix": "void Animate::stop()",
			"body": [
				"void Animate:stop()"
			],
			"description": "void Animate::stop()"
		},
		 "MenuItemToggle * MenuItemToggle::createWithCallback(const ccMenuCallback &callback, MenuItem* item, ...)": {
			"prefix": "MenuItemToggle * MenuItemToggle::createWithCallback(const ccMenuCallback &callback, MenuItem* item, ...)",
			"body": [
				"* MenuItemToggle:createWithCallback(${1:ccMenuCallback &callback},${2:MenuItem* item},${3:...})"
			],
			"description": "MenuItemToggle * MenuItemToggle::createWithCallback(const ccMenuCallback &callback, MenuItem* item, ...)"
		},
		 "AutoreleasePool* PoolManager::getCurrentPool() const": {
			"prefix": "AutoreleasePool* PoolManager::getCurrentPool() const",
			"body": [
				"AutoreleasePool* PoolManager:getCurrentPool() "
			],
			"description": "AutoreleasePool* PoolManager::getCurrentPool() const"
		},
		 "bool ScaleTo::initWithDuration(float duration, float s)": {
			"prefix": "bool ScaleTo::initWithDuration(float duration, float s)",
			"body": [
				"ScaleTo:initWithDuration(${1:float duration},${2:float s})"
			],
			"description": "bool ScaleTo::initWithDuration(float duration, float s)"
		},
		 "void ArmatureAnimation::gotoAndPause(int frameIndex)": {
			"prefix": "void ArmatureAnimation::gotoAndPause(int frameIndex)",
			"body": [
				"ArmatureAnimation:gotoAndPause(${1:int frameIndex})"
			],
			"description": "void ArmatureAnimation::gotoAndPause(int frameIndex)"
		},
		 "float GLView::getScaleX() const": {
			"prefix": "float GLView::getScaleX() const",
			"body": [
				"float GLView:getScaleX() "
			],
			"description": "float GLView::getScaleX() const"
		},
		 "Physics3DObject* Physics3DWorld::getPhysicsObject(const btCollisionObject* btObj)": {
			"prefix": "Physics3DObject* Physics3DWorld::getPhysicsObject(const btCollisionObject* btObj)",
			"body": [
				"Physics3DWorld:getPhysicsObject(${1:btCollisionObject* btObj})"
			],
			"description": "Physics3DObject* Physics3DWorld::getPhysicsObject(const btCollisionObject* btObj)"
		},
		 "void MenuItemToggle::activate()": {
			"prefix": "void MenuItemToggle::activate()",
			"body": [
				"void MenuItemToggle:activate()"
			],
			"description": "void MenuItemToggle::activate()"
		},
		 "void Profiler::displayTimers()": {
			"prefix": "void Profiler::displayTimers()",
			"body": [
				"void Profiler:displayTimers()"
			],
			"description": "void Profiler::displayTimers()"
		},
		 "void PhysicsWorld::collisionPostSolveCallback(PhysicsContact& contact)": {
			"prefix": "void PhysicsWorld::collisionPostSolveCallback(PhysicsContact& contact)",
			"body": [
				"PhysicsWorld:collisionPostSolveCallback(${1:PhysicsContact& contact})"
			],
			"description": "void PhysicsWorld::collisionPostSolveCallback(PhysicsContact& contact)"
		},
		 "ActionInterval* TransitionSlideInT::action()": {
			"prefix": "ActionInterval* TransitionSlideInT::action()",
			"body": [
				"ActionInterval* TransitionSlideInT:action()"
			],
			"description": "ActionInterval* TransitionSlideInT::action()"
		},
		 "bool ZipUtils::isGZipBuffer(const unsigned char *buffer, ssize_t len)": {
			"prefix": "bool ZipUtils::isGZipBuffer(const unsigned char *buffer, ssize_t len)",
			"body": [
				"ZipUtils:isGZipBuffer(${1:unsigned char *buffer},${2:ssize_t len})"
			],
			"description": "bool ZipUtils::isGZipBuffer(const unsigned char *buffer, ssize_t len)"
		},
		 "EaseBackIn* EaseBackIn::create(ActionInterval *action)": {
			"prefix": "EaseBackIn* EaseBackIn::create(ActionInterval *action)",
			"body": [
				"EaseBackIn:create(${1:ActionInterval *action})"
			],
			"description": "EaseBackIn* EaseBackIn::create(ActionInterval *action)"
		},
		 "void Terrain::Chunk::bindAndDraw()": {
			"prefix": "void Terrain::Chunk::bindAndDraw()",
			"body": [
				"void Terrain:Chunk:bindAndDraw()"
			],
			"description": "void Terrain::Chunk::bindAndDraw()"
		},
		 "bool TextFieldTTF::detachWithIME()": {
			"prefix": "bool TextFieldTTF::detachWithIME()",
			"body": [
				"bool TextFieldTTF:detachWithIME()"
			],
			"description": "bool TextFieldTTF::detachWithIME()"
		},
		 "void TextFieldTTF::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void TextFieldTTF::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"TextFieldTTF:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void TextFieldTTF::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void RichText::handleImageRenderer(const std::string& fileParh, const Color3B &color, GLubyte opacity)": {
			"prefix": "void RichText::handleImageRenderer(const std::string& fileParh, const Color3B &color, GLubyte opacity)",
			"body": [
				"RichText:handleImageRenderer(${1:std:string& fileParh},${2:Color3B &color},${3:GLubyte opacity})"
			],
			"description": "void RichText::handleImageRenderer(const std::string& fileParh, const Color3B &color, GLubyte opacity)"
		},
		 "void Button::setCapInsets(const Rect &capInsets)": {
			"prefix": "void Button::setCapInsets(const Rect &capInsets)",
			"body": [
				"Button:setCapInsets(${1:Rect &capInsets})"
			],
			"description": "void Button::setCapInsets(const Rect &capInsets)"
		},
		 "RichElementText* RichElementText::create(int tag, const Color3B &color, GLubyte opacity, const std::string& text, const std::string& fontName, float fontSize)": {
			"prefix": "RichElementText* RichElementText::create(int tag, const Color3B &color, GLubyte opacity, const std::string& text, const std::string& fontName, float fontSize)",
			"body": [
				"RichElementText:create(${1:int tag},${2:Color3B &color},${3:GLubyte opacity},${4:std:string& text},${5:std:string& fontName},${6:float fontSize})"
			],
			"description": "RichElementText* RichElementText::create(int tag, const Color3B &color, GLubyte opacity, const std::string& text, const std::string& fontName, float fontSize)"
		},
		 "LayoutManager* Layout::createLayoutManager()": {
			"prefix": "LayoutManager* Layout::createLayoutManager()",
			"body": [
				"LayoutManager* Layout:createLayoutManager()"
			],
			"description": "LayoutManager* Layout::createLayoutManager()"
		},
		 "LabelBMFont * LabelBMFont::create()": {
			"prefix": "LabelBMFont * LabelBMFont::create()",
			"body": [
				"LabelBMFont * LabelBMFont:create()"
			],
			"description": "LabelBMFont * LabelBMFont::create()"
		},
		 "void GUIReader::storeFileDesignSize(const char *fileName, const cocos2d::Size &size)": {
			"prefix": "void GUIReader::storeFileDesignSize(const char *fileName, const cocos2d::Size &size)",
			"body": [
				"GUIReader:storeFileDesignSize(${1:char *fileName},${2:cocos2d:Size &size})"
			],
			"description": "void GUIReader::storeFileDesignSize(const char *fileName, const cocos2d::Size &size)"
		},
		 "void Node::disableCascadeOpacity()": {
			"prefix": "void Node::disableCascadeOpacity()",
			"body": [
				"void Node:disableCascadeOpacity()"
			],
			"description": "void Node::disableCascadeOpacity()"
		},
		 "void __CCCallFuncO::execute()": {
			"prefix": "void __CCCallFuncO::execute()",
			"body": [
				"void __CCCallFuncO:execute()"
			],
			"description": "void __CCCallFuncO::execute()"
		},
		 "void Node::scheduleUpdate()": {
			"prefix": "void Node::scheduleUpdate()",
			"body": [
				"void Node:scheduleUpdate()"
			],
			"description": "void Node::scheduleUpdate()"
		},
		 "void MenuItemToggle::addSubItem(MenuItem *item)": {
			"prefix": "void MenuItemToggle::addSubItem(MenuItem *item)",
			"body": [
				"MenuItemToggle:addSubItem(${1:MenuItem *item})"
			],
			"description": "void MenuItemToggle::addSubItem(MenuItem *item)"
		},
		 "bool Image::initWithRawData(const unsigned char * data, ssize_t dataLen, int width, int height, int bitsPerComponent, bool preMulti)": {
			"prefix": "bool Image::initWithRawData(const unsigned char * data, ssize_t dataLen, int width, int height, int bitsPerComponent, bool preMulti)",
			"body": [
				"Image:initWithRawData(${1:unsigned char * data},${2:ssize_t dataLen},${3:int width},${4:int height},${5:int bitsPerComponent},${6:bool preMulti})"
			],
			"description": "bool Image::initWithRawData(const unsigned char * data, ssize_t dataLen, int width, int height, int bitsPerComponent, bool preMulti)"
		},
		 "TransitionRotoZoom* TransitionRotoZoom::create(float t, Scene* scene)": {
			"prefix": "TransitionRotoZoom* TransitionRotoZoom::create(float t, Scene* scene)",
			"body": [
				"TransitionRotoZoom:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionRotoZoom* TransitionRotoZoom::create(float t, Scene* scene)"
		},
		 "Frame* ActionTimelineCache::loadTextureFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadTextureFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadTextureFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadTextureFrame(const rapidjson::Value& json)"
		},
		 "std::string Material::getName() const": {
			"prefix": "std::string Material::getName() const",
			"body": [
				"std:string Material:getName() "
			],
			"description": "std::string Material::getName() const"
		},
		 "void Scale9SpriteLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)": {
			"prefix": "void Scale9SpriteLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)",
			"body": [
				"Scale9SpriteLoader:onHandlePropTypeBlendFunc(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:BlendFunc pBlendFunc},${5:CCBReader * ccbReader})"
			],
			"description": "void Scale9SpriteLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)"
		},
		 "TransitionProgressRadialCW* TransitionProgressRadialCW::create(float t, Scene* scene)": {
			"prefix": "TransitionProgressRadialCW* TransitionProgressRadialCW::create(float t, Scene* scene)",
			"body": [
				"TransitionProgressRadialCW:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionProgressRadialCW* TransitionProgressRadialCW::create(float t, Scene* scene)"
		},
		 "bool TextField::getDeleteBackward()const": {
			"prefix": "bool TextField::getDeleteBackward()const",
			"body": [
				"bool TextField:getDeleteBackward()"
			],
			"description": "bool TextField::getDeleteBackward()const"
		},
		 "bool __Array::initWithObject(Ref* object)": {
			"prefix": "bool __Array::initWithObject(Ref* object)",
			"body": [
				"__Array:initWithObject(${1:Ref* object})"
			],
			"description": "bool __Array::initWithObject(Ref* object)"
		},
		 "Menu* Menu::createWithArray(const Vector<MenuItem*>& arrayOfItems)": {
			"prefix": "Menu* Menu::createWithArray(const Vector<MenuItem*>& arrayOfItems)",
			"body": [
				"Menu:createWithArray(${1:Vector<MenuItem*>& arrayOfItems})"
			],
			"description": "Menu* Menu::createWithArray(const Vector<MenuItem*>& arrayOfItems)"
		},
		 "void EditBoxImplAndroid::setNativeVisible(bool visible)": {
			"prefix": "void EditBoxImplAndroid::setNativeVisible(bool visible)",
			"body": [
				"EditBoxImplAndroid:setNativeVisible(${1:bool visible})"
			],
			"description": "void EditBoxImplAndroid::setNativeVisible(bool visible)"
		},
		 "void FontAtlas::setAntiAliasTexParameters()": {
			"prefix": "void FontAtlas::setAntiAliasTexParameters()",
			"body": [
				"void FontAtlas:setAntiAliasTexParameters()"
			],
			"description": "void FontAtlas::setAntiAliasTexParameters()"
		},
		 "void ParticleSystem::updateBlendFunc()": {
			"prefix": "void ParticleSystem::updateBlendFunc()",
			"body": [
				"void ParticleSystem:updateBlendFunc()"
			],
			"description": "void ParticleSystem::updateBlendFunc()"
		},
		 "void Physics3DConeTwistConstraint::enableMotor(bool b)": {
			"prefix": "void Physics3DConeTwistConstraint::enableMotor(bool b)",
			"body": [
				"Physics3DConeTwistConstraint:enableMotor(${1:bool b})"
			],
			"description": "void Physics3DConeTwistConstraint::enableMotor(bool b)"
		},
		 "bool Properties::setString(const char* name, const char* value)": {
			"prefix": "bool Properties::setString(const char* name, const char* value)",
			"body": [
				"Properties:setString(${1:char* name},${2:char* value})"
			],
			"description": "bool Properties::setString(const char* name, const char* value)"
		},
		 "bool FileUtilsAndroid::isDirectoryExistInternal(const std::string& dirPath) const": {
			"prefix": "bool FileUtilsAndroid::isDirectoryExistInternal(const std::string& dirPath) const",
			"body": [
				"FileUtilsAndroid:isDirectoryExistInternal(${1:std:string& dirPath})"
			],
			"description": "bool FileUtilsAndroid::isDirectoryExistInternal(const std::string& dirPath) const"
		},
		 "bool Widget::isFocused()const": {
			"prefix": "bool Widget::isFocused()const",
			"body": [
				"bool Widget:isFocused()"
			],
			"description": "bool Widget::isFocused()const"
		},
		 "Node *Bone::getDisplayRenderNode()": {
			"prefix": "Node *Bone::getDisplayRenderNode()",
			"body": [
				"Node *Bone:getDisplayRenderNode()"
			],
			"description": "Node *Bone::getDisplayRenderNode()"
		},
		 "void Vec2::clamp(const Vec2& min, const Vec2& max)": {
			"prefix": "void Vec2::clamp(const Vec2& min, const Vec2& max)",
			"body": [
				"Vec2:clamp(${1:Vec2& min},${2:Vec2& max})"
			],
			"description": "void Vec2::clamp(const Vec2& min, const Vec2& max)"
		},
		 "PhysicsBody* PhysicsBody::create(float mass, float moment)": {
			"prefix": "PhysicsBody* PhysicsBody::create(float mass, float moment)",
			"body": [
				"PhysicsBody:create(${1:float mass},${2:float moment})"
			],
			"description": "PhysicsBody* PhysicsBody::create(float mass, float moment)"
		},
		 "void Physics3DSliderConstraint::setRestitutionDirLin(float restitutionDirLin)": {
			"prefix": "void Physics3DSliderConstraint::setRestitutionDirLin(float restitutionDirLin)",
			"body": [
				"Physics3DSliderConstraint:setRestitutionDirLin(${1:float restitutionDirLin})"
			],
			"description": "void Physics3DSliderConstraint::setRestitutionDirLin(float restitutionDirLin)"
		},
		 "FrameBuffer* FrameBuffer::getOrCreateDefaultFBO(GLView* view)": {
			"prefix": "FrameBuffer* FrameBuffer::getOrCreateDefaultFBO(GLView* view)",
			"body": [
				"FrameBuffer:getOrCreateDefaultFBO(${1:GLView* view})"
			],
			"description": "FrameBuffer* FrameBuffer::getOrCreateDefaultFBO(GLView* view)"
		},
		 "float Physics3DConstraint::getBreakingImpulse() const": {
			"prefix": "float Physics3DConstraint::getBreakingImpulse() const",
			"body": [
				"float Physics3DConstraint:getBreakingImpulse() "
			],
			"description": "float Physics3DConstraint::getBreakingImpulse() const"
		},
		 "void ToggleVisibility::update(float time)": {
			"prefix": "void ToggleVisibility::update(float time)",
			"body": [
				"ToggleVisibility:update(${1:float time})"
			],
			"description": "void ToggleVisibility::update(float time)"
		},
		 "void TintTo::update(float time)": {
			"prefix": "void TintTo::update(float time)",
			"body": [
				"TintTo:update(${1:float time})"
			],
			"description": "void TintTo::update(float time)"
		},
		 "bool BundleReader::rewind()": {
			"prefix": "bool BundleReader::rewind()",
			"body": [
				"bool BundleReader:rewind()"
			],
			"description": "bool BundleReader::rewind()"
		},
		 "void TiledGrid3DAction::setTile(const Vec2& pos, const Quad3& coords)": {
			"prefix": "void TiledGrid3DAction::setTile(const Vec2& pos, const Quad3& coords)",
			"body": [
				"TiledGrid3DAction:setTile(${1:Vec2& pos},${2:Quad3& coords})"
			],
			"description": "void TiledGrid3DAction::setTile(const Vec2& pos, const Quad3& coords)"
		},
		 "void __Array::addObject(Ref* object)": {
			"prefix": "void __Array::addObject(Ref* object)",
			"body": [
				"__Array:addObject(${1:Ref* object})"
			],
			"description": "void __Array::addObject(Ref* object)"
		},
		 "void Widget::FocusNavigationController::enableFocusNavigation(bool flag)": {
			"prefix": "void Widget::FocusNavigationController::enableFocusNavigation(bool flag)",
			"body": [
				"Widget:FocusNavigationController:enableFocusNavigation(${1:bool flag})"
			],
			"description": "void Widget::FocusNavigationController::enableFocusNavigation(bool flag)"
		},
		 "Widget* WidgetPropertiesReader0300::widgetFromJsonDictionary(const rapidjson::Value& data)": {
			"prefix": "Widget* WidgetPropertiesReader0300::widgetFromJsonDictionary(const rapidjson::Value& data)",
			"body": [
				"WidgetPropertiesReader0300:widgetFromJsonDictionary(${1:rapidjson:Value& data})"
			],
			"description": "Widget* WidgetPropertiesReader0300::widgetFromJsonDictionary(const rapidjson::Value& data)"
		},
		 "void PhysicsWorld::queryRect(PhysicsQueryRectCallbackFunc func, const Rect& rect, void* data)": {
			"prefix": "void PhysicsWorld::queryRect(PhysicsQueryRectCallbackFunc func, const Rect& rect, void* data)",
			"body": [
				"PhysicsWorld:queryRect(${1:PhysicsQueryRectCallbackFunc func},${2:Rect& rect},${3:void* data})"
			],
			"description": "void PhysicsWorld::queryRect(PhysicsQueryRectCallbackFunc func, const Rect& rect, void* data)"
		},
		 "void DrawNode::drawSegment(const Vec2 &from, const Vec2 &to, float radius, const Color4F &color)": {
			"prefix": "void DrawNode::drawSegment(const Vec2 &from, const Vec2 &to, float radius, const Color4F &color)",
			"body": [
				"DrawNode:drawSegment(${1:Vec2 &from},${2:Vec2 &to},${3:float radius},${4:Color4F &color})"
			],
			"description": "void DrawNode::drawSegment(const Vec2 &from, const Vec2 &to, float radius, const Color4F &color)"
		},
		 "void FileUtils::setSearchPaths(const std::vector<std::string>& searchPaths)": {
			"prefix": "void FileUtils::setSearchPaths(const std::vector<std::string>& searchPaths)",
			"body": [
				"FileUtils:setSearchPaths(${1:std:vector<std:string>& searchPaths})"
			],
			"description": "void FileUtils::setSearchPaths(const std::vector<std::string>& searchPaths)"
		},
		 "void ClippingNode::onEnterTransitionDidFinish()": {
			"prefix": "void ClippingNode::onEnterTransitionDidFinish()",
			"body": [
				"void ClippingNode:onEnterTransitionDidFinish()"
			],
			"description": "void ClippingNode::onEnterTransitionDidFinish()"
		},
		 "void SocketIOPacket::initWithType(const std::string& packetType)": {
			"prefix": "void SocketIOPacket::initWithType(const std::string& packetType)",
			"body": [
				"SocketIOPacket:initWithType(${1:std:string& packetType})"
			],
			"description": "void SocketIOPacket::initWithType(const std::string& packetType)"
		},
		 "void UICCTextField::insertText(const char*  text, size_t len)": {
			"prefix": "void UICCTextField::insertText(const char*  text, size_t len)",
			"body": [
				"UICCTextField:insertText(${1:char*  text},${2:size_t len})"
			],
			"description": "void UICCTextField::insertText(const char*  text, size_t len)"
		},
		 "AnimationFrame* AnimationFrame::create(SpriteFrame* spriteFrame, float delayUnits, const ValueMap& userInfo)": {
			"prefix": "AnimationFrame* AnimationFrame::create(SpriteFrame* spriteFrame, float delayUnits, const ValueMap& userInfo)",
			"body": [
				"AnimationFrame:create(${1:SpriteFrame* spriteFrame},${2:float delayUnits},${3:ValueMap& userInfo})"
			],
			"description": "AnimationFrame* AnimationFrame::create(SpriteFrame* spriteFrame, float delayUnits, const ValueMap& userInfo)"
		},
		 "void BezierBy::update(float time)": {
			"prefix": "void BezierBy::update(float time)",
			"body": [
				"BezierBy:update(${1:float time})"
			],
			"description": "void BezierBy::update(float time)"
		},
		 "bool Mat4::getRotation(Quaternion* rotation) const": {
			"prefix": "bool Mat4::getRotation(Quaternion* rotation) const",
			"body": [
				"Mat4:getRotation(${1:Quaternion* rotation})"
			],
			"description": "bool Mat4::getRotation(Quaternion* rotation) const"
		},
		 "void ScrollViewBar::onScrolled(const Vec2& outOfBoundary)": {
			"prefix": "void ScrollViewBar::onScrolled(const Vec2& outOfBoundary)",
			"body": [
				"ScrollViewBar:onScrolled(${1:Vec2& outOfBoundary})"
			],
			"description": "void ScrollViewBar::onScrolled(const Vec2& outOfBoundary)"
		},
		 "void MathUtil::transformVec4(const float* m, float x, float y, float z, float w, float* dst)": {
			"prefix": "void MathUtil::transformVec4(const float* m, float x, float y, float z, float w, float* dst)",
			"body": [
				"MathUtil:transformVec4(${1:float* m},${2:float x},${3:float y},${4:float z},${5:float w},${6:float* dst})"
			],
			"description": "void MathUtil::transformVec4(const float* m, float x, float y, float z, float w, float* dst)"
		},
		 "void Show::update(float time)": {
			"prefix": "void Show::update(float time)",
			"body": [
				"Show:update(${1:float time})"
			],
			"description": "void Show::update(float time)"
		},
		 "EaseCircleActionOut* EaseCircleActionOut::clone() const": {
			"prefix": "EaseCircleActionOut* EaseCircleActionOut::clone() const",
			"body": [
				"EaseCircleActionOut* EaseCircleActionOut:clone() "
			],
			"description": "EaseCircleActionOut* EaseCircleActionOut::clone() const"
		},
		 "void Director::setDepthTest(bool on)": {
			"prefix": "void Director::setDepthTest(bool on)",
			"body": [
				"Director:setDepthTest(${1:bool on})"
			],
			"description": "void Director::setDepthTest(bool on)"
		},
		 "Vec2 EventMouse::getStartLocationInView() const": {
			"prefix": "Vec2 EventMouse::getStartLocationInView() const",
			"body": [
				"Vec2 EventMouse:getStartLocationInView() "
			],
			"description": "Vec2 EventMouse::getStartLocationInView() const"
		},
		 "OffMeshLinkData NavMeshAgent::getCurrentOffMeshLinkData()": {
			"prefix": "OffMeshLinkData NavMeshAgent::getCurrentOffMeshLinkData()",
			"body": [
				"OffMeshLinkData NavMeshAgent:getCurrentOffMeshLinkData()"
			],
			"description": "OffMeshLinkData NavMeshAgent::getCurrentOffMeshLinkData()"
		},
		 "Sequence* Sequence::variadicCreate(FiniteTimeAction *action1, ...)": {
			"prefix": "Sequence* Sequence::variadicCreate(FiniteTimeAction *action1, ...)",
			"body": [
				"Sequence:variadicCreate(${1:FiniteTimeAction *action1},${2:...})"
			],
			"description": "Sequence* Sequence::variadicCreate(FiniteTimeAction *action1, ...)"
		},
		 "void BaseTriggerCondition::serialize(cocostudio::CocoLoader *cocoLoader, cocostudio::stExpCocoNode *cocoNode)": {
			"prefix": "void BaseTriggerCondition::serialize(cocostudio::CocoLoader *cocoLoader, cocostudio::stExpCocoNode *cocoNode)",
			"body": [
				"BaseTriggerCondition:serialize(${1:cocostudio:CocoLoader *cocoLoader},${2:cocostudio:stExpCocoNode *cocoNode})"
			],
			"description": "void BaseTriggerCondition::serialize(cocostudio::CocoLoader *cocoLoader, cocostudio::stExpCocoNode *cocoNode)"
		},
		 "void AudioPlayer::notifyExitThread()": {
			"prefix": "void AudioPlayer::notifyExitThread()",
			"body": [
				"void AudioPlayer:notifyExitThread()"
			],
			"description": "void AudioPlayer::notifyExitThread()"
		},
		 "const Vector<PhysicsBody*>& PhysicsWorld::getAllBodies() const": {
			"prefix": "const Vector<PhysicsBody*>& PhysicsWorld::getAllBodies() const",
			"body": [
				" Vector<PhysicsBody*>& PhysicsWorld:getAllBodies() "
			],
			"description": "const Vector<PhysicsBody*>& PhysicsWorld::getAllBodies() const"
		},
		 "JumpTo* JumpTo::reverse() const": {
			"prefix": "JumpTo* JumpTo::reverse() const",
			"body": [
				"JumpTo* JumpTo:reverse() "
			],
			"description": "JumpTo* JumpTo::reverse() const"
		},
		 "bool AABB::isEmpty() const": {
			"prefix": "bool AABB::isEmpty() const",
			"body": [
				"bool AABB:isEmpty() "
			],
			"description": "bool AABB::isEmpty() const"
		},
		 "void WebViewImpl::evaluateJS(const std::string &js)": {
			"prefix": "void WebViewImpl::evaluateJS(const std::string &js)",
			"body": [
				"WebViewImpl:evaluateJS(${1:std:string &js})"
			],
			"description": "void WebViewImpl::evaluateJS(const std::string &js)"
		},
		 "void Terrain::resetHeightMap(const char * heightMap)": {
			"prefix": "void Terrain::resetHeightMap(const char * heightMap)",
			"body": [
				"Terrain:resetHeightMap(${1:char * heightMap})"
			],
			"description": "void Terrain::resetHeightMap(const char * heightMap)"
		},
		 "EaseIn* EaseIn::reverse() const": {
			"prefix": "EaseIn* EaseIn::reverse() const",
			"body": [
				"EaseIn* EaseIn:reverse() "
			],
			"description": "EaseIn* EaseIn::reverse() const"
		},
		 "void AtlasNode::setOpacityModifyRGB(bool value)": {
			"prefix": "void AtlasNode::setOpacityModifyRGB(bool value)",
			"body": [
				"AtlasNode:setOpacityModifyRGB(${1:bool value})"
			],
			"description": "void AtlasNode::setOpacityModifyRGB(bool value)"
		},
		 "void SpriteBatchNode::updateAtlasIndex(Sprite* sprite, ssize_t* curIndex)": {
			"prefix": "void SpriteBatchNode::updateAtlasIndex(Sprite* sprite, ssize_t* curIndex)",
			"body": [
				"SpriteBatchNode:updateAtlasIndex(${1:Sprite* sprite},${2:ssize_t* curIndex})"
			],
			"description": "void SpriteBatchNode::updateAtlasIndex(Sprite* sprite, ssize_t* curIndex)"
		},
		 "EaseQuarticActionInOut* EaseQuarticActionInOut::clone() const": {
			"prefix": "EaseQuarticActionInOut* EaseQuarticActionInOut::clone() const",
			"body": [
				"EaseQuarticActionInOut* EaseQuarticActionInOut:clone() "
			],
			"description": "EaseQuarticActionInOut* EaseQuarticActionInOut::clone() const"
		},
		 "void TextField::setTouchSize(const Size &size)": {
			"prefix": "void TextField::setTouchSize(const Size &size)",
			"body": [
				"TextField:setTouchSize(${1:Size &size})"
			],
			"description": "void TextField::setTouchSize(const Size &size)"
		},
		 "void Node::draw(Renderer* renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void Node::draw(Renderer* renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"Node:draw(${1:Renderer* renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void Node::draw(Renderer* renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void HttpClient::sendImmediate(HttpRequest* request)": {
			"prefix": "void HttpClient::sendImmediate(HttpRequest* request)",
			"body": [
				"HttpClient:sendImmediate(${1:HttpRequest* request})"
			],
			"description": "void HttpClient::sendImmediate(HttpRequest* request)"
		},
		 "void Mat4::transformVector(float x, float y, float z, float w, Vec3* dst) const": {
			"prefix": "void Mat4::transformVector(float x, float y, float z, float w, Vec3* dst) const",
			"body": [
				"Mat4:transformVector(${1:float x},${2:float y},${3:float z},${4:float w},${5:Vec3* dst})"
			],
			"description": "void Mat4::transformVector(float x, float y, float z, float w, Vec3* dst) const"
		},
		 "void Pass::unbind()": {
			"prefix": "void Pass::unbind()",
			"body": [
				"void Pass:unbind()"
			],
			"description": "void Pass::unbind()"
		},
		 "void ParticleSystem::setBlendAdditive(bool additive)": {
			"prefix": "void ParticleSystem::setBlendAdditive(bool additive)",
			"body": [
				"ParticleSystem:setBlendAdditive(${1:bool additive})"
			],
			"description": "void ParticleSystem::setBlendAdditive(bool additive)"
		},
		 "void RenderState::initialize()": {
			"prefix": "void RenderState::initialize()",
			"body": [
				"void RenderState:initialize()"
			],
			"description": "void RenderState::initialize()"
		},
		 "void ShuffleTiles::startWithTarget(Node *target)": {
			"prefix": "void ShuffleTiles::startWithTarget(Node *target)",
			"body": [
				"ShuffleTiles:startWithTarget(${1:Node *target})"
			],
			"description": "void ShuffleTiles::startWithTarget(Node *target)"
		},
		 "Label* Label::createWithCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "Label* Label::createWithCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"Label:createWithCharMap(${1:std:string& charMapFile},${2:int itemWidth},${3:int itemHeight},${4:int startCharMap})"
			],
			"description": "Label* Label::createWithCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "const Vec2& Node::getNormalizedPosition() const": {
			"prefix": "const Vec2& Node::getNormalizedPosition() const",
			"body": [
				" Vec2& Node:getNormalizedPosition() "
			],
			"description": "const Vec2& Node::getNormalizedPosition() const"
		},
		 "AffineTransform Node::getParentToNodeAffineTransform() const": {
			"prefix": "AffineTransform Node::getParentToNodeAffineTransform() const",
			"body": [
				"AffineTransform Node:getParentToNodeAffineTransform() "
			],
			"description": "AffineTransform Node::getParentToNodeAffineTransform() const"
		},
		 "Vec3 Camera::unprojectGL(const Vec3& src) const": {
			"prefix": "Vec3 Camera::unprojectGL(const Vec3& src) const",
			"body": [
				"Camera:unprojectGL(${1:Vec3& src})"
			],
			"description": "Vec3 Camera::unprojectGL(const Vec3& src) const"
		},
		 "MenuItemLabel* MenuItemLabel::create(Node *label)": {
			"prefix": "MenuItemLabel* MenuItemLabel::create(Node *label)",
			"body": [
				"MenuItemLabel:create(${1:Node *label})"
			],
			"description": "MenuItemLabel* MenuItemLabel::create(Node *label)"
		},
		 "void ColliderDetector::removeAll()": {
			"prefix": "void ColliderDetector::removeAll()",
			"body": [
				"void ColliderDetector:removeAll()"
			],
			"description": "void ColliderDetector::removeAll()"
		},
		 "void Node::setGLProgramState(cocos2d::GLProgramState* glProgramState)": {
			"prefix": "void Node::setGLProgramState(cocos2d::GLProgramState* glProgramState)",
			"body": [
				"Node:setGLProgramState(${1:cocos2d:GLProgramState* glProgramState})"
			],
			"description": "void Node::setGLProgramState(cocos2d::GLProgramState* glProgramState)"
		},
		 "void CWin32InputBox::SetParam(WIN32INPUTBOX_PARAM *param)": {
			"prefix": "void CWin32InputBox::SetParam(WIN32INPUTBOX_PARAM *param)",
			"body": [
				"CWin32InputBox:SetParam(${1:WIN32INPUTBOX_PARAM *param})"
			],
			"description": "void CWin32InputBox::SetParam(WIN32INPUTBOX_PARAM *param)"
		},
		 "float Physics3DSliderConstraint::getUpperLinLimit() const": {
			"prefix": "float Physics3DSliderConstraint::getUpperLinLimit() const",
			"body": [
				"float Physics3DSliderConstraint:getUpperLinLimit() "
			],
			"description": "float Physics3DSliderConstraint::getUpperLinLimit() const"
		},
		 "void TextFieldTTF::setPlaceHolder(const std::string& text)": {
			"prefix": "void TextFieldTTF::setPlaceHolder(const std::string& text)",
			"body": [
				"TextFieldTTF:setPlaceHolder(${1:std:string& text})"
			],
			"description": "void TextFieldTTF::setPlaceHolder(const std::string& text)"
		},
		 "void FrameBuffer::applyDefaultFBO()": {
			"prefix": "void FrameBuffer::applyDefaultFBO()",
			"body": [
				"void FrameBuffer:applyDefaultFBO()"
			],
			"description": "void FrameBuffer::applyDefaultFBO()"
		},
		 "Ref* ObjectFactory::createObject(const std::string &name)": {
			"prefix": "Ref* ObjectFactory::createObject(const std::string &name)",
			"body": [
				"ObjectFactory:createObject(${1:std:string &name})"
			],
			"description": "Ref* ObjectFactory::createObject(const std::string &name)"
		},
		 "void ListView::onSizeChanged()": {
			"prefix": "void ListView::onSizeChanged()",
			"body": [
				"void ListView:onSizeChanged()"
			],
			"description": "void ListView::onSizeChanged()"
		},
		 "bool TMXTiledMap::initWithTMXFile(const std::string& tmxFile)": {
			"prefix": "bool TMXTiledMap::initWithTMXFile(const std::string& tmxFile)",
			"body": [
				"TMXTiledMap:initWithTMXFile(${1:std:string& tmxFile})"
			],
			"description": "bool TMXTiledMap::initWithTMXFile(const std::string& tmxFile)"
		},
		 "void PhysicsWorld::doAddBody(PhysicsBody* body)": {
			"prefix": "void PhysicsWorld::doAddBody(PhysicsBody* body)",
			"body": [
				"PhysicsWorld:doAddBody(${1:PhysicsBody* body})"
			],
			"description": "void PhysicsWorld::doAddBody(PhysicsBody* body)"
		},
		 "void HttpCookie::setCookieFileName(std::string filename)": {
			"prefix": "void HttpCookie::setCookieFileName(std::string filename)",
			"body": [
				"HttpCookie:setCookieFileName(${1:std:string filename})"
			],
			"description": "void HttpCookie::setCookieFileName(std::string filename)"
		},
		 "EventDispatcher::EventListenerVector* EventDispatcher::getListeners(const EventListener::ListenerID& listenerID)": {
			"prefix": "EventDispatcher::EventListenerVector* EventDispatcher::getListeners(const EventListener::ListenerID& listenerID)",
			"body": [
				"EventDispatcher:getListeners(${1:EventListener:ListenerID& listenerID})"
			],
			"description": "EventDispatcher::EventListenerVector* EventDispatcher::getListeners(const EventListener::ListenerID& listenerID)"
		},
		 "void Layout::onAfterVisitStencil()": {
			"prefix": "void Layout::onAfterVisitStencil()",
			"body": [
				"void Layout:onAfterVisitStencil()"
			],
			"description": "void Layout::onAfterVisitStencil()"
		},
		 "bool Waves3D::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)": {
			"prefix": "bool Waves3D::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)",
			"body": [
				"Waves3D:initWithDuration(${1:float duration},${2:Size& gridSize},${3:unsigned int waves},${4:float amplitude})"
			],
			"description": "bool Waves3D::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)"
		},
		 "CatmullRomTo* CatmullRomTo::clone() const": {
			"prefix": "CatmullRomTo* CatmullRomTo::clone() const",
			"body": [
				"CatmullRomTo* CatmullRomTo:clone() "
			],
			"description": "CatmullRomTo* CatmullRomTo::clone() const"
		},
		 "void MenuItemLabel::unselected()": {
			"prefix": "void MenuItemLabel::unselected()",
			"body": [
				"void MenuItemLabel:unselected()"
			],
			"description": "void MenuItemLabel::unselected()"
		},
		 "void Texture2D::removeSpriteFrameCapInset(SpriteFrame* spriteFrame)": {
			"prefix": "void Texture2D::removeSpriteFrameCapInset(SpriteFrame* spriteFrame)",
			"body": [
				"Texture2D:removeSpriteFrameCapInset(${1:SpriteFrame* spriteFrame})"
			],
			"description": "void Texture2D::removeSpriteFrameCapInset(SpriteFrame* spriteFrame)"
		},
		 "Technique* Technique::clone() const": {
			"prefix": "Technique* Technique::clone() const",
			"body": [
				"Technique* Technique:clone() "
			],
			"description": "Technique* Technique::clone() const"
		},
		 "bool ClippingNode::init(Node *stencil)": {
			"prefix": "bool ClippingNode::init(Node *stencil)",
			"body": [
				"ClippingNode:init(${1:Node *stencil})"
			],
			"description": "bool ClippingNode::init(Node *stencil)"
		},
		 "ReverseTime* ReverseTime::reverse() const": {
			"prefix": "ReverseTime* ReverseTime::reverse() const",
			"body": [
				"ReverseTime* ReverseTime:reverse() "
			],
			"description": "ReverseTime* ReverseTime::reverse() const"
		},
		 "std::string getStringForKeyJNI(const char* key, const char* defaultValue)": {
			"prefix": "std::string getStringForKeyJNI(const char* key, const char* defaultValue)",
			"body": [
				"getStringForKeyJNI(${1:char* key},${2:char* defaultValue})"
			],
			"description": "std::string getStringForKeyJNI(const char* key, const char* defaultValue)"
		},
		 "const Vec2& LayerGradient::getVector() const": {
			"prefix": "const Vec2& LayerGradient::getVector() const",
			"body": [
				" Vec2& LayerGradient:getVector() "
			],
			"description": "const Vec2& LayerGradient::getVector() const"
		},
		 "void SIOClientImpl::onMessage(WebSocket* ws, const WebSocket::Data& data)": {
			"prefix": "void SIOClientImpl::onMessage(WebSocket* ws, const WebSocket::Data& data)",
			"body": [
				"SIOClientImpl:onMessage(${1:WebSocket* ws},${2:WebSocket:Data& data})"
			],
			"description": "void SIOClientImpl::onMessage(WebSocket* ws, const WebSocket::Data& data)"
		},
		 "ssize_t ActionManager::getNumberOfRunningActionsInTarget(const Node *target) const": {
			"prefix": "ssize_t ActionManager::getNumberOfRunningActionsInTarget(const Node *target) const",
			"body": [
				"ActionManager:getNumberOfRunningActionsInTarget(${1:Node *target})"
			],
			"description": "ssize_t ActionManager::getNumberOfRunningActionsInTarget(const Node *target) const"
		},
		 "void Armature::addBone(Bone *bone, const std::string& parentName)": {
			"prefix": "void Armature::addBone(Bone *bone, const std::string& parentName)",
			"body": [
				"Armature:addBone(${1:Bone *bone},${2:std:string& parentName})"
			],
			"description": "void Armature::addBone(Bone *bone, const std::string& parentName)"
		},
		 "EaseQuarticActionIn* EaseQuarticActionIn::create(ActionInterval* action)": {
			"prefix": "EaseQuarticActionIn* EaseQuarticActionIn::create(ActionInterval* action)",
			"body": [
				"EaseQuarticActionIn:create(${1:ActionInterval* action})"
			],
			"description": "EaseQuarticActionIn* EaseQuarticActionIn::create(ActionInterval* action)"
		},
		 "void Quaternion::set(const Mat4& m)": {
			"prefix": "void Quaternion::set(const Mat4& m)",
			"body": [
				"Quaternion:set(${1:Mat4& m})"
			],
			"description": "void Quaternion::set(const Mat4& m)"
		},
		 "const std::vector<float>& Frame::getEasingParams() const": {
			"prefix": "const std::vector<float>& Frame::getEasingParams() const",
			"body": [
				" std:vector<float>& Frame:getEasingParams() "
			],
			"description": "const std::vector<float>& Frame::getEasingParams() const"
		},
		 "void ComAudio::end()": {
			"prefix": "void ComAudio::end()",
			"body": [
				"void ComAudio:end()"
			],
			"description": "void ComAudio::end()"
		},
		 "void ComAudio::pauseAllEffects()": {
			"prefix": "void ComAudio::pauseAllEffects()",
			"body": [
				"void ComAudio:pauseAllEffects()"
			],
			"description": "void ComAudio::pauseAllEffects()"
		},
		 "RotationFrame* RotationFrame::create()": {
			"prefix": "RotationFrame* RotationFrame::create()",
			"body": [
				"RotationFrame* RotationFrame:create()"
			],
			"description": "RotationFrame* RotationFrame::create()"
		},
		 "Vec3 Ray::intersects(const Plane& plane) const": {
			"prefix": "Vec3 Ray::intersects(const Plane& plane) const",
			"body": [
				"Ray:intersects(${1:Plane& plane})"
			],
			"description": "Vec3 Ray::intersects(const Plane& plane) const"
		},
		 "ActionInterval* TransitionSlideInR:: action()": {
			"prefix": "ActionInterval* TransitionSlideInR:: action()",
			"body": [
				"ActionInterval* TransitionSlideInR: action()"
			],
			"description": "ActionInterval* TransitionSlideInR:: action()"
		},
		 "void Label::updateDisplayedColor(const Color3B& parentColor)": {
			"prefix": "void Label::updateDisplayedColor(const Color3B& parentColor)",
			"body": [
				"Label:updateDisplayedColor(${1:Color3B& parentColor})"
			],
			"description": "void Label::updateDisplayedColor(const Color3B& parentColor)"
		},
		 "void SIOClientImpl::handshake()": {
			"prefix": "void SIOClientImpl::handshake()",
			"body": [
				"void SIOClientImpl:handshake()"
			],
			"description": "void SIOClientImpl::handshake()"
		},
		 "void TextureAtlas::updateQuad(V3F_C4B_T2F_Quad *quad, ssize_t index)": {
			"prefix": "void TextureAtlas::updateQuad(V3F_C4B_T2F_Quad *quad, ssize_t index)",
			"body": [
				"TextureAtlas:updateQuad(${1:V3F_C4B_T2F_Quad *quad},${2:ssize_t index})"
			],
			"description": "void TextureAtlas::updateQuad(V3F_C4B_T2F_Quad *quad, ssize_t index)"
		},
		 "void ParticleSystem::setScaleX(float newScaleX)": {
			"prefix": "void ParticleSystem::setScaleX(float newScaleX)",
			"body": [
				"ParticleSystem:setScaleX(${1:float newScaleX})"
			],
			"description": "void ParticleSystem::setScaleX(float newScaleX)"
		},
		 "Vec2 PhysicsShapeEdgeSegment::getPointB() const": {
			"prefix": "Vec2 PhysicsShapeEdgeSegment::getPointB() const",
			"body": [
				"Vec2 PhysicsShapeEdgeSegment:getPointB() "
			],
			"description": "Vec2 PhysicsShapeEdgeSegment::getPointB() const"
		},
		 "void HttpCookie::updateOrAddCookie(CookiesInfo* cookie)": {
			"prefix": "void HttpCookie::updateOrAddCookie(CookiesInfo* cookie)",
			"body": [
				"HttpCookie:updateOrAddCookie(${1:CookiesInfo* cookie})"
			],
			"description": "void HttpCookie::updateOrAddCookie(CookiesInfo* cookie)"
		},
		 "void Physics3DRigidBody::setRestitution( float rest )": {
			"prefix": "void Physics3DRigidBody::setRestitution( float rest )",
			"body": [
				"Physics3DRigidBody:setRestitution(${1:float rest})"
			],
			"description": "void Physics3DRigidBody::setRestitution( float rest )"
		},
		 "Vector<Node*>& CCBAnimationManager::getDocumentOutletNodes()": {
			"prefix": "Vector<Node*>& CCBAnimationManager::getDocumentOutletNodes()",
			"body": [
				"Vector<Node*>& CCBAnimationManager:getDocumentOutletNodes()"
			],
			"description": "Vector<Node*>& CCBAnimationManager::getDocumentOutletNodes()"
		},
		 "VertexAttribValue* GLProgramState::getVertexAttribValue(const std::string& name)": {
			"prefix": "VertexAttribValue* GLProgramState::getVertexAttribValue(const std::string& name)",
			"body": [
				"GLProgramState:getVertexAttribValue(${1:std:string& name})"
			],
			"description": "VertexAttribValue* GLProgramState::getVertexAttribValue(const std::string& name)"
		},
		 "void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist)": {
			"prefix": "void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist)",
			"body": [
				"SpriteFrameCache:addSpriteFramesWithFile(${1:std:string& plist})"
			],
			"description": "void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist)"
		},
		 "Vec2 ScrollView::getScrollBarPositionFromCornerForHorizontal() const": {
			"prefix": "Vec2 ScrollView::getScrollBarPositionFromCornerForHorizontal() const",
			"body": [
				"Vec2 ScrollView:getScrollBarPositionFromCornerForHorizontal() "
			],
			"description": "Vec2 ScrollView::getScrollBarPositionFromCornerForHorizontal() const"
		},
		 "void UniformValue::setInt(int value)": {
			"prefix": "void UniformValue::setInt(int value)",
			"body": [
				"UniformValue:setInt(${1:int value})"
			],
			"description": "void UniformValue::setInt(int value)"
		},
		 "void EventDispatcher::sortEventListenersOfSceneGraphPriority(const EventListener::ListenerID& listenerID, Node* rootNode)": {
			"prefix": "void EventDispatcher::sortEventListenersOfSceneGraphPriority(const EventListener::ListenerID& listenerID, Node* rootNode)",
			"body": [
				"EventDispatcher:sortEventListenersOfSceneGraphPriority(${1:EventListener:ListenerID& listenerID},${2:Node* rootNode})"
			],
			"description": "void EventDispatcher::sortEventListenersOfSceneGraphPriority(const EventListener::ListenerID& listenerID, Node* rootNode)"
		},
		 "RemoveSelf * RemoveSelf::clone() const": {
			"prefix": "RemoveSelf * RemoveSelf::clone() const",
			"body": [
				"RemoveSelf * RemoveSelf:clone() "
			],
			"description": "RemoveSelf * RemoveSelf::clone() const"
		},
		 "void Director::popToRootScene(void)": {
			"prefix": "void Director::popToRootScene(void)",
			"body": [
				"Director:popToRootScene(${1:void})"
			],
			"description": "void Director::popToRootScene(void)"
		},
		 "ParticleSystemQuad * ParticleSystemQuad::create(ValueMap &dictionary)": {
			"prefix": "ParticleSystemQuad * ParticleSystemQuad::create(ValueMap &dictionary)",
			"body": [
				"* ParticleSystemQuad:create(${1:ValueMap &dictionary})"
			],
			"description": "ParticleSystemQuad * ParticleSystemQuad::create(ValueMap &dictionary)"
		},
		 "bool PhysicsShapeCircle::init(float radius, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset /*= Vec2(0, 0)*/)": {
			"prefix": "bool PhysicsShapeCircle::init(float radius, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset /*= Vec2(0, 0)*/)",
			"body": [
				"PhysicsShapeCircle:init(${1:float radius},${2:PhysicsMaterial& material/* = MaterialDefault*/},${3:Vec2& offset /*= Vec2(0},${4:0})"
			],
			"description": "bool PhysicsShapeCircle::init(float radius, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset /*= Vec2(0, 0)*/)"
		},
		 "bool UserDefault::createXMLFile()": {
			"prefix": "bool UserDefault::createXMLFile()",
			"body": [
				"bool UserDefault:createXMLFile()"
			],
			"description": "bool UserDefault::createXMLFile()"
		},
		 "AudioProfile* AudioEngine::getProfile(const std::string &name)": {
			"prefix": "AudioProfile* AudioEngine::getProfile(const std::string &name)",
			"body": [
				"AudioEngine:getProfile(${1:std:string &name})"
			],
			"description": "AudioProfile* AudioEngine::getProfile(const std::string &name)"
		},
		 "void TextureCache::addImageAsync(const std::string &path, const std::function<void(Texture2D*)>& callback)": {
			"prefix": "void TextureCache::addImageAsync(const std::string &path, const std::function<void(Texture2D*)>& callback)",
			"body": [
				"TextureCache:addImageAsync(${1:std:string &path},${2:std:function<void(Texture2D*})"
			],
			"description": "void TextureCache::addImageAsync(const std::string &path, const std::function<void(Texture2D*)>& callback)"
		},
		 "bool GridBase::initWithSize(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)": {
			"prefix": "bool GridBase::initWithSize(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)",
			"body": [
				"GridBase:initWithSize(${1:Size& gridSize},${2:Texture2D *texture},${3:bool flipped},${4:Rect& rect})"
			],
			"description": "bool GridBase::initWithSize(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)"
		},
		 "void SkewTo::update(float t)": {
			"prefix": "void SkewTo::update(float t)",
			"body": [
				"SkewTo:update(${1:float t})"
			],
			"description": "void SkewTo::update(float t)"
		},
		 "float ScrollView::getScrollBarWidth() const": {
			"prefix": "float ScrollView::getScrollBarWidth() const",
			"body": [
				"float ScrollView:getScrollBarWidth() "
			],
			"description": "float ScrollView::getScrollBarWidth() const"
		},
		 "EaseCircleActionIn* EaseCircleActionIn::clone() const": {
			"prefix": "EaseCircleActionIn* EaseCircleActionIn::clone() const",
			"body": [
				"EaseCircleActionIn* EaseCircleActionIn:clone() "
			],
			"description": "EaseCircleActionIn* EaseCircleActionIn::clone() const"
		},
		 "Sprite3DCache::Sprite3DData* Sprite3DCache::getSpriteData(const std::string& key) const": {
			"prefix": "Sprite3DCache::Sprite3DData* Sprite3DCache::getSpriteData(const std::string& key) const",
			"body": [
				"Sprite3DCache:getSpriteData(${1:std:string& key})"
			],
			"description": "Sprite3DCache::Sprite3DData* Sprite3DCache::getSpriteData(const std::string& key) const"
		},
		 "TextBMFont* TextBMFont::create(const std::string &text, const std::string &filename)": {
			"prefix": "TextBMFont* TextBMFont::create(const std::string &text, const std::string &filename)",
			"body": [
				"TextBMFont:create(${1:std:string &text},${2:std:string &filename})"
			],
			"description": "TextBMFont* TextBMFont::create(const std::string &text, const std::string &filename)"
		},
		 "void BoneNode::updateVertices()": {
			"prefix": "void BoneNode::updateVertices()",
			"body": [
				"void BoneNode:updateVertices()"
			],
			"description": "void BoneNode::updateVertices()"
		},
		 "void ProtectedNode::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void ProtectedNode::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"ProtectedNode:visit(${1:Renderer* renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void ProtectedNode::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "bool FileUtils::writeToFile(ValueMap& dict, const std::string &fullPath)": {
			"prefix": "bool FileUtils::writeToFile(ValueMap& dict, const std::string &fullPath)",
			"body": [
				"FileUtils:writeToFile(${1:ValueMap& dict},${2:std:string &fullPath})"
			],
			"description": "bool FileUtils::writeToFile(ValueMap& dict, const std::string &fullPath)"
		},
		 "void Mat4::createOrthographic(float width, float height, float zNearPlane, float zFarPlane, Mat4* dst)": {
			"prefix": "void Mat4::createOrthographic(float width, float height, float zNearPlane, float zFarPlane, Mat4* dst)",
			"body": [
				"Mat4:createOrthographic(${1:float width},${2:float height},${3:float zNearPlane},${4:float zFarPlane},${5:Mat4* dst})"
			],
			"description": "void Mat4::createOrthographic(float width, float height, float zNearPlane, float zFarPlane, Mat4* dst)"
		},
		 "ssize_t ZipUtils::inflateMemory(unsigned char *in, ssize_t inLength, unsigned char **out)": {
			"prefix": "ssize_t ZipUtils::inflateMemory(unsigned char *in, ssize_t inLength, unsigned char **out)",
			"body": [
				"ZipUtils:inflateMemory(${1:unsigned char *in},${2:ssize_t inLength},${3:unsigned char **out})"
			],
			"description": "ssize_t ZipUtils::inflateMemory(unsigned char *in, ssize_t inLength, unsigned char **out)"
		},
		 "unsigned char* FileUtils::getFileData(const std::string& filename, const char* mode, ssize_t *size)": {
			"prefix": "unsigned char* FileUtils::getFileData(const std::string& filename, const char* mode, ssize_t *size)",
			"body": [
				"char* FileUtils:getFileData(${1:std:string& filename},${2:char* mode},${3:ssize_t *size})"
			],
			"description": "unsigned char* FileUtils::getFileData(const std::string& filename, const char* mode, ssize_t *size)"
		},
		 "Widget* Helper::seekActionWidgetByActionTag(Widget* root, int tag)": {
			"prefix": "Widget* Helper::seekActionWidgetByActionTag(Widget* root, int tag)",
			"body": [
				"Helper:seekActionWidgetByActionTag(${1:Widget* root},${2:int tag})"
			],
			"description": "Widget* Helper::seekActionWidgetByActionTag(Widget* root, int tag)"
		},
		 "void EditBoxImplCommon::setInactiveText(const char* pText)": {
			"prefix": "void EditBoxImplCommon::setInactiveText(const char* pText)",
			"body": [
				"EditBoxImplCommon:setInactiveText(${1:char* pText})"
			],
			"description": "void EditBoxImplCommon::setInactiveText(const char* pText)"
		},
		 "Vec2 DisplayManager::getAnchorPoint() const": {
			"prefix": "Vec2 DisplayManager::getAnchorPoint() const",
			"body": [
				"Vec2 DisplayManager:getAnchorPoint() "
			],
			"description": "Vec2 DisplayManager::getAnchorPoint() const"
		},
		 "void Slider::ignoreContentAdaptWithSize(bool ignore)": {
			"prefix": "void Slider::ignoreContentAdaptWithSize(bool ignore)",
			"body": [
				"Slider:ignoreContentAdaptWithSize(${1:bool ignore})"
			],
			"description": "void Slider::ignoreContentAdaptWithSize(bool ignore)"
		},
		 "void BaseTriggerCondition::serialize(const rapidjson::Value &val)": {
			"prefix": "void BaseTriggerCondition::serialize(const rapidjson::Value &val)",
			"body": [
				"BaseTriggerCondition:serialize(${1:rapidjson:Value &val})"
			],
			"description": "void BaseTriggerCondition::serialize(const rapidjson::Value &val)"
		},
		 "float Physics3DRigidBody::getRestitution() const": {
			"prefix": "float Physics3DRigidBody::getRestitution() const",
			"body": [
				"float Physics3DRigidBody:getRestitution() "
			],
			"description": "float Physics3DRigidBody::getRestitution() const"
		},
		 "Node* GLProgramState::getNodeBinding() const": {
			"prefix": "Node* GLProgramState::getNodeBinding() const",
			"body": [
				"Node* GLProgramState:getNodeBinding() "
			],
			"description": "Node* GLProgramState::getNodeBinding() const"
		},
		 "bool SkeletonNode::init()": {
			"prefix": "bool SkeletonNode::init()",
			"body": [
				"bool SkeletonNode:init()"
			],
			"description": "bool SkeletonNode::init()"
		},
		 "void Widget::cancelUpEvent()": {
			"prefix": "void Widget::cancelUpEvent()",
			"body": [
				"void Widget:cancelUpEvent()"
			],
			"description": "void Widget::cancelUpEvent()"
		},
		 "void Text::adaptRenderers()": {
			"prefix": "void Text::adaptRenderers()",
			"body": [
				"void Text:adaptRenderers()"
			],
			"description": "void Text::adaptRenderers()"
		},
		 "void AudioEngine::resume(int audioID)": {
			"prefix": "void AudioEngine::resume(int audioID)",
			"body": [
				"AudioEngine:resume(${1:int audioID})"
			],
			"description": "void AudioEngine::resume(int audioID)"
		},
		 "void FontFreeType::shutdownFreeType()": {
			"prefix": "void FontFreeType::shutdownFreeType()",
			"body": [
				"void FontFreeType:shutdownFreeType()"
			],
			"description": "void FontFreeType::shutdownFreeType()"
		},
		 "void TurnOffTiles::startWithTarget(Node *target)": {
			"prefix": "void TurnOffTiles::startWithTarget(Node *target)",
			"body": [
				"TurnOffTiles:startWithTarget(${1:Node *target})"
			],
			"description": "void TurnOffTiles::startWithTarget(Node *target)"
		},
		 "void PageView::pageTurningEvent()": {
			"prefix": "void PageView::pageTurningEvent()",
			"body": [
				"void PageView:pageTurningEvent()"
			],
			"description": "void PageView::pageTurningEvent()"
		},
		 "void TransitionScene::finish()": {
			"prefix": "void TransitionScene::finish()",
			"body": [
				"void TransitionScene:finish()"
			],
			"description": "void TransitionScene::finish()"
		},
		 "void AndroidJavaEngine::stopBackgroundMusic(bool releaseData)": {
			"prefix": "void AndroidJavaEngine::stopBackgroundMusic(bool releaseData)",
			"body": [
				"AndroidJavaEngine:stopBackgroundMusic(${1:bool releaseData})"
			],
			"description": "void AndroidJavaEngine::stopBackgroundMusic(bool releaseData)"
		},
		 "void Sprite::setFlippedX(bool flippedX)": {
			"prefix": "void Sprite::setFlippedX(bool flippedX)",
			"body": [
				"Sprite:setFlippedX(${1:bool flippedX})"
			],
			"description": "void Sprite::setFlippedX(bool flippedX)"
		},
		 "void LabelBMFont::setFntFile(const std::string& fntFile, const Vec2& imageOffset /* = Vec2::ZERO */)": {
			"prefix": "void LabelBMFont::setFntFile(const std::string& fntFile, const Vec2& imageOffset /* = Vec2::ZERO */)",
			"body": [
				"LabelBMFont:setFntFile(${1:std:string& fntFile},${2:Vec2& imageOffset /* = Vec2:ZERO */})"
			],
			"description": "void LabelBMFont::setFntFile(const std::string& fntFile, const Vec2& imageOffset /* = Vec2::ZERO */)"
		},
		 "void ListView::refreshView()": {
			"prefix": "void ListView::refreshView()",
			"body": [
				"void ListView:refreshView()"
			],
			"description": "void ListView::refreshView()"
		},
		 "Vec2 ScrollViewBar::getPositionFromCorner() const": {
			"prefix": "Vec2 ScrollViewBar::getPositionFromCorner() const",
			"body": [
				"Vec2 ScrollViewBar:getPositionFromCorner() "
			],
			"description": "Vec2 ScrollViewBar::getPositionFromCorner() const"
		},
		 "bool Scheduler::isScheduled(const std::string& key, void *target)": {
			"prefix": "bool Scheduler::isScheduled(const std::string& key, void *target)",
			"body": [
				"Scheduler:isScheduled(${1:std:string& key},${2:void *target})"
			],
			"description": "bool Scheduler::isScheduled(const std::string& key, void *target)"
		},
		 "bool Button::isScale9Enabled()const": {
			"prefix": "bool Button::isScale9Enabled()const",
			"body": [
				"bool Button:isScale9Enabled()"
			],
			"description": "bool Button::isScale9Enabled()const"
		},
		 "void SkeletonAnimation::setTrackEndListener (spTrackEntry* entry, const EndListener& listener)": {
			"prefix": "void SkeletonAnimation::setTrackEndListener (spTrackEntry* entry, const EndListener& listener)",
			"body": [
				"SkeletonAnimation:setTrackEndListener (${1:spTrackEntry* entry},${2:EndListener& listener})"
			],
			"description": "void SkeletonAnimation::setTrackEndListener (spTrackEntry* entry, const EndListener& listener)"
		},
		 "bool ScrollView::isOutOfBoundaryTopOrBottom() const": {
			"prefix": "bool ScrollView::isOutOfBoundaryTopOrBottom() const",
			"body": [
				"bool ScrollView:isOutOfBoundaryTopOrBottom() "
			],
			"description": "bool ScrollView::isOutOfBoundaryTopOrBottom() const"
		},
		 "const std::string& NavMeshAgent::getNavMeshAgentComponentName()": {
			"prefix": "const std::string& NavMeshAgent::getNavMeshAgentComponentName()",
			"body": [
				" std:string& NavMeshAgent:getNavMeshAgentComponentName()"
			],
			"description": "const std::string& NavMeshAgent::getNavMeshAgentComponentName()"
		},
		 "bool ParticleSystem::isActive() const": {
			"prefix": "bool ParticleSystem::isActive() const",
			"body": [
				"bool ParticleSystem:isActive() "
			],
			"description": "bool ParticleSystem::isActive() const"
		},
		 "bool FileUtils::removeFile(const std::string &path)": {
			"prefix": "bool FileUtils::removeFile(const std::string &path)",
			"body": [
				"FileUtils:removeFile(${1:std:string &path})"
			],
			"description": "bool FileUtils::removeFile(const std::string &path)"
		},
		 "Animation3DCache* Animation3DCache::getInstance()": {
			"prefix": "Animation3DCache* Animation3DCache::getInstance()",
			"body": [
				"Animation3DCache* Animation3DCache:getInstance()"
			],
			"description": "Animation3DCache* Animation3DCache::getInstance()"
		},
		 "const Color3B& Layout::getBackGroundColor()const": {
			"prefix": "const Color3B& Layout::getBackGroundColor()const",
			"body": [
				" Color3B& Layout:getBackGroundColor()"
			],
			"description": "const Color3B& Layout::getBackGroundColor()const"
		},
		 "bool OpenALFile::mapToMemory()": {
			"prefix": "bool OpenALFile::mapToMemory()",
			"body": [
				"bool OpenALFile:mapToMemory()"
			],
			"description": "bool OpenALFile::mapToMemory()"
		},
		 "void NodeLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char* pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char* pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeCCBFile(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:Node * pCCBFileNode},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char* pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)"
		},
		 "bool TextFieldTTF::attachWithIME()": {
			"prefix": "bool TextFieldTTF::attachWithIME()",
			"body": [
				"bool TextFieldTTF:attachWithIME()"
			],
			"description": "bool TextFieldTTF::attachWithIME()"
		},
		 "void Node::setRotation(float rotation)": {
			"prefix": "void Node::setRotation(float rotation)",
			"body": [
				"Node:setRotation(${1:float rotation})"
			],
			"description": "void Node::setRotation(float rotation)"
		},
		 "void NodeGrid::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void NodeGrid::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"NodeGrid:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void NodeGrid::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "Frame* ActionTimelineCache::loadPositionFrameWithFlatBuffers(const flatbuffers::PointFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadPositionFrameWithFlatBuffers(const flatbuffers::PointFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadPositionFrameWithFlatBuffers(${1:flatbuffers:PointFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadPositionFrameWithFlatBuffers(const flatbuffers::PointFrame *flatbuffers)"
		},
		 "void EventDispatcher::sortEventListeners(const EventListener::ListenerID& listenerID)": {
			"prefix": "void EventDispatcher::sortEventListeners(const EventListener::ListenerID& listenerID)",
			"body": [
				"EventDispatcher:sortEventListeners(${1:EventListener:ListenerID& listenerID})"
			],
			"description": "void EventDispatcher::sortEventListeners(const EventListener::ListenerID& listenerID)"
		},
		 "void ActionManager::removeAllActions()": {
			"prefix": "void ActionManager::removeAllActions()",
			"body": [
				"void ActionManager:removeAllActions()"
			],
			"description": "void ActionManager::removeAllActions()"
		},
		 "void SceneReader::setTarget(const std::function<void(cocos2d::Ref* obj, void* doc)>& selector)": {
			"prefix": "void SceneReader::setTarget(const std::function<void(cocos2d::Ref* obj, void* doc)>& selector)",
			"body": [
				"SceneReader:setTarget(${1:std:function<void(cocos2d:Ref* obj},${2:void* doc})"
			],
			"description": "void SceneReader::setTarget(const std::function<void(cocos2d::Ref* obj, void* doc)>& selector)"
		},
		 "void TMXLayer::draw(Renderer *renderer, const Mat4& transform, uint32_t flags)": {
			"prefix": "void TMXLayer::draw(Renderer *renderer, const Mat4& transform, uint32_t flags)",
			"body": [
				"TMXLayer:draw(${1:Renderer *renderer},${2:Mat4& transform},${3:uint32_t flags})"
			],
			"description": "void TMXLayer::draw(Renderer *renderer, const Mat4& transform, uint32_t flags)"
		},
		 "void ActionCamera::startWithTarget(Node *target)": {
			"prefix": "void ActionCamera::startWithTarget(Node *target)",
			"body": [
				"ActionCamera:startWithTarget(${1:Node *target})"
			],
			"description": "void ActionCamera::startWithTarget(Node *target)"
		},
		 "bool Mesh::hasVertexAttrib(int attrib) const": {
			"prefix": "bool Mesh::hasVertexAttrib(int attrib) const",
			"body": [
				"Mesh:hasVertexAttrib(${1:int attrib})"
			],
			"description": "bool Mesh::hasVertexAttrib(int attrib) const"
		},
		 "void CheckBox::addEventListener(const ccCheckBoxCallback& callback)": {
			"prefix": "void CheckBox::addEventListener(const ccCheckBoxCallback& callback)",
			"body": [
				"CheckBox:addEventListener(${1:ccCheckBoxCallback& callback})"
			],
			"description": "void CheckBox::addEventListener(const ccCheckBoxCallback& callback)"
		},
		 "void Animation::addSpriteFrameWithTexture(Texture2D *pobTexture, const Rect& rect)": {
			"prefix": "void Animation::addSpriteFrameWithTexture(Texture2D *pobTexture, const Rect& rect)",
			"body": [
				"Animation:addSpriteFrameWithTexture(${1:Texture2D *pobTexture},${2:Rect& rect})"
			],
			"description": "void Animation::addSpriteFrameWithTexture(Texture2D *pobTexture, const Rect& rect)"
		},
		 "bool Physics3DPointToPointConstraint::init(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotPointInA)": {
			"prefix": "bool Physics3DPointToPointConstraint::init(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotPointInA)",
			"body": [
				"Physics3DPointToPointConstraint:init(${1:Physics3DRigidBody* rbA},${2:cocos2d:Vec3& pivotPointInA})"
			],
			"description": "bool Physics3DPointToPointConstraint::init(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotPointInA)"
		},
		 "cocos2d::Mat4 Physics3DSliderConstraint::getFrameOffsetA() const": {
			"prefix": "cocos2d::Mat4 Physics3DSliderConstraint::getFrameOffsetA() const",
			"body": [
				"cocos2d:Mat4 Physics3DSliderConstraint:getFrameOffsetA() "
			],
			"description": "cocos2d::Mat4 Physics3DSliderConstraint::getFrameOffsetA() const"
		},
		 "void BoneNode::addChild(Node* child, int localZOrder, const std::string &name)": {
			"prefix": "void BoneNode::addChild(Node* child, int localZOrder, const std::string &name)",
			"body": [
				"BoneNode:addChild(${1:Node* child},${2:int localZOrder},${3:std:string &name})"
			],
			"description": "void BoneNode::addChild(Node* child, int localZOrder, const std::string &name)"
		},
		 "void TintBy::startWithTarget(Node *target)": {
			"prefix": "void TintBy::startWithTarget(Node *target)",
			"body": [
				"TintBy:startWithTarget(${1:Node *target})"
			],
			"description": "void TintBy::startWithTarget(Node *target)"
		},
		 "void TriggerObj::removeAll()": {
			"prefix": "void TriggerObj::removeAll()",
			"body": [
				"void TriggerObj:removeAll()"
			],
			"description": "void TriggerObj::removeAll()"
		},
		 "bool Properties::eof()": {
			"prefix": "bool Properties::eof()",
			"body": [
				"bool Properties:eof()"
			],
			"description": "bool Properties::eof()"
		},
		 "void ImageView::loadTexture(const std::string& fileName, TextureResType texType)": {
			"prefix": "void ImageView::loadTexture(const std::string& fileName, TextureResType texType)",
			"body": [
				"ImageView:loadTexture(${1:std:string& fileName},${2:TextureResType texType})"
			],
			"description": "void ImageView::loadTexture(const std::string& fileName, TextureResType texType)"
		},
		 "EaseCubicActionOut* EaseCubicActionOut::reverse() const": {
			"prefix": "EaseCubicActionOut* EaseCubicActionOut::reverse() const",
			"body": [
				"EaseCubicActionOut* EaseCubicActionOut:reverse() "
			],
			"description": "EaseCubicActionOut* EaseCubicActionOut::reverse() const"
		},
		 "void TimerTargetCallback::trigger(float dt)": {
			"prefix": "void TimerTargetCallback::trigger(float dt)",
			"body": [
				"TimerTargetCallback:trigger(${1:float dt})"
			],
			"description": "void TimerTargetCallback::trigger(float dt)"
		},
		 "bool Image::saveImageToPNG(const std::string& filePath, bool isToRGB)": {
			"prefix": "bool Image::saveImageToPNG(const std::string& filePath, bool isToRGB)",
			"body": [
				"Image:saveImageToPNG(${1:std:string& filePath},${2:bool isToRGB})"
			],
			"description": "bool Image::saveImageToPNG(const std::string& filePath, bool isToRGB)"
		},
		 "void Bundle3D::clear()": {
			"prefix": "void Bundle3D::clear()",
			"body": [
				"void Bundle3D:clear()"
			],
			"description": "void Bundle3D::clear()"
		},
		 "void HttpClient::setSSLVerification(const std::string& caFile)": {
			"prefix": "void HttpClient::setSSLVerification(const std::string& caFile)",
			"body": [
				"HttpClient:setSSLVerification(${1:std:string& caFile})"
			],
			"description": "void HttpClient::setSSLVerification(const std::string& caFile)"
		},
		 "MeshIndexData* MeshIndexData::create(const std::string& id, MeshVertexData* vertexData, IndexBuffer* indexbuffer, const AABB& aabb)": {
			"prefix": "MeshIndexData* MeshIndexData::create(const std::string& id, MeshVertexData* vertexData, IndexBuffer* indexbuffer, const AABB& aabb)",
			"body": [
				"MeshIndexData:create(${1:std:string& id},${2:MeshVertexData* vertexData},${3:IndexBuffer* indexbuffer},${4:AABB& aabb})"
			],
			"description": "MeshIndexData* MeshIndexData::create(const std::string& id, MeshVertexData* vertexData, IndexBuffer* indexbuffer, const AABB& aabb)"
		},
		 "void LinearLayoutParameter::setGravity(LinearGravity gravity)": {
			"prefix": "void LinearLayoutParameter::setGravity(LinearGravity gravity)",
			"body": [
				"LinearLayoutParameter:setGravity(${1:LinearGravity gravity})"
			],
			"description": "void LinearLayoutParameter::setGravity(LinearGravity gravity)"
		},
		 "void GLProgram::bindAttribLocation(const std::string &attributeName, GLuint index) const": {
			"prefix": "void GLProgram::bindAttribLocation(const std::string &attributeName, GLuint index) const",
			"body": [
				"GLProgram:bindAttribLocation(${1:std:string &attributeName},${2:GLuint index})"
			],
			"description": "void GLProgram::bindAttribLocation(const std::string &attributeName, GLuint index) const"
		},
		 "void AndroidJavaEngine::pauseBackgroundMusic()": {
			"prefix": "void AndroidJavaEngine::pauseBackgroundMusic()",
			"body": [
				"void AndroidJavaEngine:pauseBackgroundMusic()"
			],
			"description": "void AndroidJavaEngine::pauseBackgroundMusic()"
		},
		 "GLViewImpl* GLViewImpl::createWithFullScreen(const std::string& viewName)": {
			"prefix": "GLViewImpl* GLViewImpl::createWithFullScreen(const std::string& viewName)",
			"body": [
				"GLViewImpl:createWithFullScreen(${1:std:string& viewName})"
			],
			"description": "GLViewImpl* GLViewImpl::createWithFullScreen(const std::string& viewName)"
		},
		 "void ScrollView::handlePressLogic(Touch *touch)": {
			"prefix": "void ScrollView::handlePressLogic(Touch *touch)",
			"body": [
				"ScrollView:handlePressLogic(${1:Touch *touch})"
			],
			"description": "void ScrollView::handlePressLogic(Touch *touch)"
		},
		 "void PhysicsBody::setRotation(float rotation)": {
			"prefix": "void PhysicsBody::setRotation(float rotation)",
			"body": [
				"PhysicsBody:setRotation(${1:float rotation})"
			],
			"description": "void PhysicsBody::setRotation(float rotation)"
		},
		 "void Sprite::setTextureRect(const Rect& rect)": {
			"prefix": "void Sprite::setTextureRect(const Rect& rect)",
			"body": [
				"Sprite:setTextureRect(${1:Rect& rect})"
			],
			"description": "void Sprite::setTextureRect(const Rect& rect)"
		},
		 "Physics3DComponent* Physics3DComponent::create(Physics3DObject* physicsObj, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)": {
			"prefix": "Physics3DComponent* Physics3DComponent::create(Physics3DObject* physicsObj, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)",
			"body": [
				"Physics3DComponent:create(${1:Physics3DObject* physicsObj},${2:cocos2d:Vec3& translateInPhysics},${3:cocos2d:Quaternion& rotInPhsyics})"
			],
			"description": "Physics3DComponent* Physics3DComponent::create(Physics3DObject* physicsObj, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)"
		},
		 "void TextBMFont::adaptRenderers()": {
			"prefix": "void TextBMFont::adaptRenderers()",
			"body": [
				"void TextBMFont:adaptRenderers()"
			],
			"description": "void TextBMFont::adaptRenderers()"
		},
		 "void DisplayFactory::addSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)": {
			"prefix": "void DisplayFactory::addSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)",
			"body": [
				"DisplayFactory:addSpriteDisplay(${1:Bone *bone},${2:DecorativeDisplay *decoDisplay},${3:DisplayData *displayData})"
			],
			"description": "void DisplayFactory::addSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)"
		},
		 "std::string FileUtils::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath) const": {
			"prefix": "std::string FileUtils::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath) const",
			"body": [
				"FileUtils:getPathForFilename(${1:std:string& filename},${2:std:string& resolutionDirectory},${3:std:string& searchPath})"
			],
			"description": "std::string FileUtils::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath) const"
		},
		 "void AudioEngineImpl::uncache(const std::string &filePath)": {
			"prefix": "void AudioEngineImpl::uncache(const std::string &filePath)",
			"body": [
				"AudioEngineImpl:uncache(${1:std:string &filePath})"
			],
			"description": "void AudioEngineImpl::uncache(const std::string &filePath)"
		},
		 "bool Layout::isPassFocusToChild()const": {
			"prefix": "bool Layout::isPassFocusToChild()const",
			"body": [
				"bool Layout:isPassFocusToChild()"
			],
			"description": "bool Layout::isPassFocusToChild()const"
		},
		 "cocos2d::Mat4 Physics3DHingeConstraint::getAFrame() const": {
			"prefix": "cocos2d::Mat4 Physics3DHingeConstraint::getAFrame() const",
			"body": [
				"cocos2d:Mat4 Physics3DHingeConstraint:getAFrame() "
			],
			"description": "cocos2d::Mat4 Physics3DHingeConstraint::getAFrame() const"
		},
		 "Frame* ActionTimelineCache::loadEventFrameWithFlatBuffers(const flatbuffers::EventFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadEventFrameWithFlatBuffers(const flatbuffers::EventFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadEventFrameWithFlatBuffers(${1:flatbuffers:EventFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadEventFrameWithFlatBuffers(const flatbuffers::EventFrame *flatbuffers)"
		},
		 "void MenuItemFont::setFontSizeObj(int s)": {
			"prefix": "void MenuItemFont::setFontSizeObj(int s)",
			"body": [
				"MenuItemFont:setFontSizeObj(${1:int s})"
			],
			"description": "void MenuItemFont::setFontSizeObj(int s)"
		},
		 "SpriteFrame* SpriteFrameCache::getSpriteFrameByName(const std::string& name)": {
			"prefix": "SpriteFrame* SpriteFrameCache::getSpriteFrameByName(const std::string& name)",
			"body": [
				"SpriteFrameCache:getSpriteFrameByName(${1:std:string& name})"
			],
			"description": "SpriteFrame* SpriteFrameCache::getSpriteFrameByName(const std::string& name)"
		},
		 "FontAtlas* FontAtlasCache::getFontAtlasCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "FontAtlas* FontAtlasCache::getFontAtlasCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"FontAtlasCache:getFontAtlasCharMap(${1:std:string& charMapFile},${2:int itemWidth},${3:int itemHeight},${4:int startCharMap})"
			],
			"description": "FontAtlas* FontAtlasCache::getFontAtlasCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "const std::vector<OpenALDecoder *> &OpenALDecoder::getDecoders()": {
			"prefix": "const std::vector<OpenALDecoder *> &OpenALDecoder::getDecoders()",
			"body": [
				" std:vector<OpenALDecoder *> &OpenALDecoder:getDecoders()"
			],
			"description": "const std::vector<OpenALDecoder *> &OpenALDecoder::getDecoders()"
		},
		 "void cocos2d::NavMeshAgent::setNavMeshQuery(dtNavMeshQuery *query)": {
			"prefix": "void cocos2d::NavMeshAgent::setNavMeshQuery(dtNavMeshQuery *query)",
			"body": [
				"cocos2d:NavMeshAgent:setNavMeshQuery(${1:dtNavMeshQuery *query})"
			],
			"description": "void cocos2d::NavMeshAgent::setNavMeshQuery(dtNavMeshQuery *query)"
		},
		 "Physics3DShape* Physics3DShape::createBox(const cocos2d::Vec3& extent)": {
			"prefix": "Physics3DShape* Physics3DShape::createBox(const cocos2d::Vec3& extent)",
			"body": [
				"Physics3DShape:createBox(${1:cocos2d:Vec3& extent})"
			],
			"description": "Physics3DShape* Physics3DShape::createBox(const cocos2d::Vec3& extent)"
		},
		 "bool Image::initWithPVRv3Data(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithPVRv3Data(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithPVRv3Data(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithPVRv3Data(const unsigned char * data, ssize_t dataLen)"
		},
		 "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"* MenuItemImage:create(${1:std:string& normalImage},${2:std:string& selectedImage},${3:Ref* target},${4:SEL_MenuHandler selector})"
			],
			"description": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, Ref* target, SEL_MenuHandler selector)"
		},
		 "void ParticleSystemQuad::setTotalParticles(int tp)": {
			"prefix": "void ParticleSystemQuad::setTotalParticles(int tp)",
			"body": [
				"ParticleSystemQuad:setTotalParticles(${1:int tp})"
			],
			"description": "void ParticleSystemQuad::setTotalParticles(int tp)"
		},
		 "Offset<flatbuffers::ScaleFrame> FlatBuffersSerialize::createScaleFrame(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<flatbuffers::ScaleFrame> FlatBuffersSerialize::createScaleFrame(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createScaleFrame(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<flatbuffers::ScaleFrame> FlatBuffersSerialize::createScaleFrame(const tinyxml2::XMLElement *objectData)"
		},
		 "PhysicsShape* PhysicsWorld::getShape(const Vec2& point) const": {
			"prefix": "PhysicsShape* PhysicsWorld::getShape(const Vec2& point) const",
			"body": [
				"PhysicsWorld:getShape(${1:Vec2& point})"
			],
			"description": "PhysicsShape* PhysicsWorld::getShape(const Vec2& point) const"
		},
		 "void GLProgramState::setUniformVec3v(GLint uniformLocation, ssize_t size, const Vec3* pointer)": {
			"prefix": "void GLProgramState::setUniformVec3v(GLint uniformLocation, ssize_t size, const Vec3* pointer)",
			"body": [
				"GLProgramState:setUniformVec3v(${1:GLint uniformLocation},${2:ssize_t size},${3:Vec3* pointer})"
			],
			"description": "void GLProgramState::setUniformVec3v(GLint uniformLocation, ssize_t size, const Vec3* pointer)"
		},
		 "void DisplayManager::addDisplay(DisplayData *displayData, int index)": {
			"prefix": "void DisplayManager::addDisplay(DisplayData *displayData, int index)",
			"body": [
				"DisplayManager:addDisplay(${1:DisplayData *displayData},${2:int index})"
			],
			"description": "void DisplayManager::addDisplay(DisplayData *displayData, int index)"
		},
		 "bool ComAudio::isBackgroundMusicPlaying()": {
			"prefix": "bool ComAudio::isBackgroundMusicPlaying()",
			"body": [
				"bool ComAudio:isBackgroundMusicPlaying()"
			],
			"description": "bool ComAudio::isBackgroundMusicPlaying()"
		},
		 "ValueVector CCBReader::getOwnerOutletNames()": {
			"prefix": "ValueVector CCBReader::getOwnerOutletNames()",
			"body": [
				"ValueVector CCBReader:getOwnerOutletNames()"
			],
			"description": "ValueVector CCBReader::getOwnerOutletNames()"
		},
		 "const Size& Widget::getSize() const": {
			"prefix": "const Size& Widget::getSize() const",
			"body": [
				" Size& Widget:getSize() "
			],
			"description": "const Size& Widget::getSize() const"
		},
		 "void PhysicsJointLimit::setAnchr2(const Vec2& anchr)": {
			"prefix": "void PhysicsJointLimit::setAnchr2(const Vec2& anchr)",
			"body": [
				"PhysicsJointLimit:setAnchr2(${1:Vec2& anchr})"
			],
			"description": "void PhysicsJointLimit::setAnchr2(const Vec2& anchr)"
		},
		 "void Director::pushScene(Scene *scene)": {
			"prefix": "void Director::pushScene(Scene *scene)",
			"body": [
				"Director:pushScene(${1:Scene *scene})"
			],
			"description": "void Director::pushScene(Scene *scene)"
		},
		 "const Vec2& Widget::getTouchMovePosition()const": {
			"prefix": "const Vec2& Widget::getTouchMovePosition()const",
			"body": [
				" Vec2& Widget:getTouchMovePosition()"
			],
			"description": "const Vec2& Widget::getTouchMovePosition()const"
		},
		 "void Bone::changeDisplayByName(const std::string &name, bool force)": {
			"prefix": "void Bone::changeDisplayByName(const std::string &name, bool force)",
			"body": [
				"Bone:changeDisplayByName(${1:std:string &name},${2:bool force})"
			],
			"description": "void Bone::changeDisplayByName(const std::string &name, bool force)"
		},
		 "void ActionFrame::setFrameType(int frameType)": {
			"prefix": "void ActionFrame::setFrameType(int frameType)",
			"body": [
				"ActionFrame:setFrameType(${1:int frameType})"
			],
			"description": "void ActionFrame::setFrameType(int frameType)"
		},
		 "bool FlipY::initWithFlipY(bool y)": {
			"prefix": "bool FlipY::initWithFlipY(bool y)",
			"body": [
				"FlipY:initWithFlipY(${1:bool y})"
			],
			"description": "bool FlipY::initWithFlipY(bool y)"
		},
		 "void Director::loadMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)": {
			"prefix": "void Director::loadMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)",
			"body": [
				"Director:loadMatrix(${1:MATRIX_STACK_TYPE type},${2:Mat4& mat})"
			],
			"description": "void Director::loadMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)"
		},
		 "void Physics3DRigidBody::removeConstraint( unsigned int idx )": {
			"prefix": "void Physics3DRigidBody::removeConstraint( unsigned int idx )",
			"body": [
				"Physics3DRigidBody:removeConstraint(${1:unsigned int idx})"
			],
			"description": "void Physics3DRigidBody::removeConstraint( unsigned int idx )"
		},
		 "void Renderer::addCommand(RenderCommand* command)": {
			"prefix": "void Renderer::addCommand(RenderCommand* command)",
			"body": [
				"Renderer:addCommand(${1:RenderCommand* command})"
			],
			"description": "void Renderer::addCommand(RenderCommand* command)"
		},
		 "void Texture2D::convertRGBA8888ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGBA8888ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGBA8888ToAI88(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGBA8888ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "bool TransitionPageTurn::initWithDuration(float t, Scene *scene, bool backwards)": {
			"prefix": "bool TransitionPageTurn::initWithDuration(float t, Scene *scene, bool backwards)",
			"body": [
				"TransitionPageTurn:initWithDuration(${1:float t},${2:Scene *scene},${3:bool backwards})"
			],
			"description": "bool TransitionPageTurn::initWithDuration(float t, Scene *scene, bool backwards)"
		},
		 "float DictionaryHelper::getFloatValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, float def)": {
			"prefix": "float DictionaryHelper::getFloatValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, float def)",
			"body": [
				"DictionaryHelper:getFloatValueFromArray_json(${1:rapidjson:Value& root},${2:char* arrayKey},${3:int idx},${4:float def})"
			],
			"description": "float DictionaryHelper::getFloatValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, float def)"
		},
		 "bool GLProgram::compileShader(GLuint * shader, GLenum type, const GLchar* source)": {
			"prefix": "bool GLProgram::compileShader(GLuint * shader, GLenum type, const GLchar* source)",
			"body": [
				"GLProgram:compileShader(${1:GLuint * shader},${2:GLenum type},${3:GLchar* source})"
			],
			"description": "bool GLProgram::compileShader(GLuint * shader, GLenum type, const GLchar* source)"
		},
		 "bool Bundle3D::loadAnimationDataJson(const std::string& id, Animation3DData* animationdata)": {
			"prefix": "bool Bundle3D::loadAnimationDataJson(const std::string& id, Animation3DData* animationdata)",
			"body": [
				"Bundle3D:loadAnimationDataJson(${1:std:string& id},${2:Animation3DData* animationdata})"
			],
			"description": "bool Bundle3D::loadAnimationDataJson(const std::string& id, Animation3DData* animationdata)"
		},
		 "Physics3DCollider* Physics3DCollider::create(Physics3DColliderDes *info)": {
			"prefix": "Physics3DCollider* Physics3DCollider::create(Physics3DColliderDes *info)",
			"body": [
				"Physics3DCollider:create(${1:Physics3DColliderDes *info})"
			],
			"description": "Physics3DCollider* Physics3DCollider::create(Physics3DColliderDes *info)"
		},
		 "std::set<std::string>& CCBReader::getLoadedSpriteSheet()": {
			"prefix": "std::set<std::string>& CCBReader::getLoadedSpriteSheet()",
			"body": [
				"std:set<std:string>& CCBReader:getLoadedSpriteSheet()"
			],
			"description": "std::set<std::string>& CCBReader::getLoadedSpriteSheet()"
		},
		 "Rect LabelTTF::getBoundingBox() const": {
			"prefix": "Rect LabelTTF::getBoundingBox() const",
			"body": [
				"Rect LabelTTF:getBoundingBox() "
			],
			"description": "Rect LabelTTF::getBoundingBox() const"
		},
		 "Bone3D* Bone3D::getChildBoneByIndex(int index) const": {
			"prefix": "Bone3D* Bone3D::getChildBoneByIndex(int index) const",
			"body": [
				"Bone3D:getChildBoneByIndex(${1:int index})"
			],
			"description": "Bone3D* Bone3D::getChildBoneByIndex(int index) const"
		},
		 "LayerColor* LayerColor::create()": {
			"prefix": "LayerColor* LayerColor::create()",
			"body": [
				"LayerColor* LayerColor:create()"
			],
			"description": "LayerColor* LayerColor::create()"
		},
		 "bool Ray::intersects(const AABB& box, float* distance) const": {
			"prefix": "bool Ray::intersects(const AABB& box, float* distance) const",
			"body": [
				"Ray:intersects(${1:AABB& box},${2:float* distance})"
			],
			"description": "bool Ray::intersects(const AABB& box, float* distance) const"
		},
		 "void Physics3DConeTwistConstraint::setFixThresh(float fixThresh)": {
			"prefix": "void Physics3DConeTwistConstraint::setFixThresh(float fixThresh)",
			"body": [
				"Physics3DConeTwistConstraint:setFixThresh(${1:float fixThresh})"
			],
			"description": "void Physics3DConeTwistConstraint::setFixThresh(float fixThresh)"
		},
		 "void QuadCommand::init(float globalOrder, GLuint textureID, GLProgramState* shader, const BlendFunc& blendType, V3F_C4B_T2F_Quad* quads, ssize_t quadCount, const Mat4 &mv)": {
			"prefix": "void QuadCommand::init(float globalOrder, GLuint textureID, GLProgramState* shader, const BlendFunc& blendType, V3F_C4B_T2F_Quad* quads, ssize_t quadCount, const Mat4 &mv)",
			"body": [
				"QuadCommand:init(${1:float globalOrder},${2:GLuint textureID},${3:GLProgramState* shader},${4:BlendFunc& blendType},${5:V3F_C4B_T2F_Quad* quads},${6:ssize_t quadCount},${7:Mat4 &mv})"
			],
			"description": "void QuadCommand::init(float globalOrder, GLuint textureID, GLProgramState* shader, const BlendFunc& blendType, V3F_C4B_T2F_Quad* quads, ssize_t quadCount, const Mat4 &mv)"
		},
		 "bool EventListenerTouchOneByOne::checkAvailable()": {
			"prefix": "bool EventListenerTouchOneByOne::checkAvailable()",
			"body": [
				"bool EventListenerTouchOneByOne:checkAvailable()"
			],
			"description": "bool EventListenerTouchOneByOne::checkAvailable()"
		},
		 "void CameraBackgroundSkyBoxBrush::drawBackground(Camera* camera)": {
			"prefix": "void CameraBackgroundSkyBoxBrush::drawBackground(Camera* camera)",
			"body": [
				"CameraBackgroundSkyBoxBrush:drawBackground(${1:Camera* camera})"
			],
			"description": "void CameraBackgroundSkyBoxBrush::drawBackground(Camera* camera)"
		},
		 "OBB::OBB(const Vec3* verts, int num)": {
			"prefix": "OBB::OBB(const Vec3* verts, int num)",
			"body": [
				"verts},${2:int num})"
			],
			"description": "OBB::OBB(const Vec3* verts, int num)"
		},
		 "void SAXParser::endElement(void *ctx, const CC_XML_CHAR *name)": {
			"prefix": "void SAXParser::endElement(void *ctx, const CC_XML_CHAR *name)",
			"body": [
				"SAXParser:endElement(${1:void *ctx},${2:CC_XML_CHAR *name})"
			],
			"description": "void SAXParser::endElement(void *ctx, const CC_XML_CHAR *name)"
		},
		 "void NavMesh::removeNavMeshAgent(NavMeshAgent *agent)": {
			"prefix": "void NavMesh::removeNavMeshAgent(NavMeshAgent *agent)",
			"body": [
				"NavMesh:removeNavMeshAgent(${1:NavMeshAgent *agent})"
			],
			"description": "void NavMesh::removeNavMeshAgent(NavMeshAgent *agent)"
		},
		 "int Device::getDPI()": {
			"prefix": "int Device::getDPI()",
			"body": [
				"int Device:getDPI()"
			],
			"description": "int Device::getDPI()"
		},
		 "void DrawNode::clear()": {
			"prefix": "void DrawNode::clear()",
			"body": [
				"void DrawNode:clear()"
			],
			"description": "void DrawNode::clear()"
		},
		 "void SkeletonAnimation::setAnimationStateData (spAnimationStateData* stateData)": {
			"prefix": "void SkeletonAnimation::setAnimationStateData (spAnimationStateData* stateData)",
			"body": [
				"SkeletonAnimation:setAnimationStateData (${1:spAnimationStateData* stateData})"
			],
			"description": "void SkeletonAnimation::setAnimationStateData (spAnimationStateData* stateData)"
		},
		 "bool Speed::isDone() const": {
			"prefix": "bool Speed::isDone() const",
			"body": [
				"bool Speed:isDone() "
			],
			"description": "bool Speed::isDone() const"
		},
		 "float ActionFrameEasing::easeValue(float t)": {
			"prefix": "float ActionFrameEasing::easeValue(float t)",
			"body": [
				"ActionFrameEasing:easeValue(${1:float t})"
			],
			"description": "float ActionFrameEasing::easeValue(float t)"
		},
		 "void ScrollView::setScrollBarAutoHideEnabled(bool autoHideEnabled)": {
			"prefix": "void ScrollView::setScrollBarAutoHideEnabled(bool autoHideEnabled)",
			"body": [
				"ScrollView:setScrollBarAutoHideEnabled(${1:bool autoHideEnabled})"
			],
			"description": "void ScrollView::setScrollBarAutoHideEnabled(bool autoHideEnabled)"
		},
		 "void SpriteBatchNode::sortAllChildren()": {
			"prefix": "void SpriteBatchNode::sortAllChildren()",
			"body": [
				"void SpriteBatchNode:sortAllChildren()"
			],
			"description": "void SpriteBatchNode::sortAllChildren()"
		},
		 "Vector<Node*> ActionManager::pauseAllRunningActions()": {
			"prefix": "Vector<Node*> ActionManager::pauseAllRunningActions()",
			"body": [
				"Vector<Node*> ActionManager:pauseAllRunningActions()"
			],
			"description": "Vector<Node*> ActionManager::pauseAllRunningActions()"
		},
		 "UICCTextField * UICCTextField::create(const std::string& placeholder, const std::string& fontName, float fontSize)": {
			"prefix": "UICCTextField * UICCTextField::create(const std::string& placeholder, const std::string& fontName, float fontSize)",
			"body": [
				"* UICCTextField:create(${1:std:string& placeholder},${2:std:string& fontName},${3:float fontSize})"
			],
			"description": "UICCTextField * UICCTextField::create(const std::string& placeholder, const std::string& fontName, float fontSize)"
		},
		 "void ScrollView::setScrollBarColor(const Color3B& color)": {
			"prefix": "void ScrollView::setScrollBarColor(const Color3B& color)",
			"body": [
				"ScrollView:setScrollBarColor(${1:Color3B& color})"
			],
			"description": "void ScrollView::setScrollBarColor(const Color3B& color)"
		},
		 "void ListView::copyClonedWidgetChildren(Widget* model)": {
			"prefix": "void ListView::copyClonedWidgetChildren(Widget* model)",
			"body": [
				"ListView:copyClonedWidgetChildren(${1:Widget* model})"
			],
			"description": "void ListView::copyClonedWidgetChildren(Widget* model)"
		},
		 "bool Image::initWithATITCData(const unsigned char *data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithATITCData(const unsigned char *data, ssize_t dataLen)",
			"body": [
				"Image:initWithATITCData(${1:unsigned char *data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithATITCData(const unsigned char *data, ssize_t dataLen)"
		},
		 "void RenderQueue::saveRenderState()": {
			"prefix": "void RenderQueue::saveRenderState()",
			"body": [
				"void RenderQueue:saveRenderState()"
			],
			"description": "void RenderQueue::saveRenderState()"
		},
		 "RepeatForever *RepeatForever::reverse() const": {
			"prefix": "RepeatForever *RepeatForever::reverse() const",
			"body": [
				"RepeatForever *RepeatForever:reverse() "
			],
			"description": "RepeatForever *RepeatForever::reverse() const"
		},
		 "Size LoadingBar::getVirtualRendererSize() const": {
			"prefix": "Size LoadingBar::getVirtualRendererSize() const",
			"body": [
				"Size LoadingBar:getVirtualRendererSize() "
			],
			"description": "Size LoadingBar::getVirtualRendererSize() const"
		},
		 "Component* CSLoader::loadComponent(const rapidjson::Value &json)": {
			"prefix": "Component* CSLoader::loadComponent(const rapidjson::Value &json)",
			"body": [
				"CSLoader:loadComponent(${1:rapidjson:Value &json})"
			],
			"description": "Component* CSLoader::loadComponent(const rapidjson::Value &json)"
		},
		 "float Physics3DRigidBody::getCcdSweptSphereRadius() const": {
			"prefix": "float Physics3DRigidBody::getCcdSweptSphereRadius() const",
			"body": [
				"float Physics3DRigidBody:getCcdSweptSphereRadius() "
			],
			"description": "float Physics3DRigidBody::getCcdSweptSphereRadius() const"
		},
		 "const char* EditBoxImplAndroid::getNativeDefaultFontName()": {
			"prefix": "const char* EditBoxImplAndroid::getNativeDefaultFontName()",
			"body": [
				" char* EditBoxImplAndroid:getNativeDefaultFontName()"
			],
			"description": "const char* EditBoxImplAndroid::getNativeDefaultFontName()"
		},
		 "bool TransitionScene::initWithDuration(float t, Scene *scene)": {
			"prefix": "bool TransitionScene::initWithDuration(float t, Scene *scene)",
			"body": [
				"TransitionScene:initWithDuration(${1:float t},${2:Scene *scene})"
			],
			"description": "bool TransitionScene::initWithDuration(float t, Scene *scene)"
		},
		 "void TransitionFade::onExit()": {
			"prefix": "void TransitionFade::onExit()",
			"body": [
				"void TransitionFade:onExit()"
			],
			"description": "void TransitionFade::onExit()"
		},
		 "bool Image::initWithWebpData(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithWebpData(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithWebpData(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithWebpData(const unsigned char * data, ssize_t dataLen)"
		},
		 "float Physics3DHingeConstraint::getMotorTargetVelosity() const": {
			"prefix": "float Physics3DHingeConstraint::getMotorTargetVelosity() const",
			"body": [
				"float Physics3DHingeConstraint:getMotorTargetVelosity() "
			],
			"description": "float Physics3DHingeConstraint::getMotorTargetVelosity() const"
		},
		 "void Terrain::onDraw(const Mat4 &transform, uint32_t flags)": {
			"prefix": "void Terrain::onDraw(const Mat4 &transform, uint32_t flags)",
			"body": [
				"Terrain:onDraw(${1:Mat4 &transform},${2:uint32_t flags})"
			],
			"description": "void Terrain::onDraw(const Mat4 &transform, uint32_t flags)"
		},
		 "bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root, int index)": {
			"prefix": "bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root, int index)",
			"body": [
				"DictionaryHelper:checkObjectExist_json(${1:rapidjson:Value &root},${2:int index})"
			],
			"description": "bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root, int index)"
		},
		 "float CCBSequence::getDuration()": {
			"prefix": "float CCBSequence::getDuration()",
			"body": [
				"float CCBSequence:getDuration()"
			],
			"description": "float CCBSequence::getDuration()"
		},
		 "Sprite* Sprite::create(const std::string& filename)": {
			"prefix": "Sprite* Sprite::create(const std::string& filename)",
			"body": [
				"Sprite:create(${1:std:string& filename})"
			],
			"description": "Sprite* Sprite::create(const std::string& filename)"
		},
		 "const Mat4& Camera::getViewProjectionMatrix() const": {
			"prefix": "const Mat4& Camera::getViewProjectionMatrix() const",
			"body": [
				" Mat4& Camera:getViewProjectionMatrix() "
			],
			"description": "const Mat4& Camera::getViewProjectionMatrix() const"
		},
		 "bool ActionObject::isPlaying()": {
			"prefix": "bool ActionObject::isPlaying()",
			"body": [
				"bool ActionObject:isPlaying()"
			],
			"description": "bool ActionObject::isPlaying()"
		},
		 "const Mat4& Armature::getNodeToParentTransform() const": {
			"prefix": "const Mat4& Armature::getNodeToParentTransform() const",
			"body": [
				" Mat4& Armature:getNodeToParentTransform() "
			],
			"description": "const Mat4& Armature::getNodeToParentTransform() const"
		},
		 "void __Array::removeObjectAtIndex(ssize_t index, bool releaseObj /* ignored */)": {
			"prefix": "void __Array::removeObjectAtIndex(ssize_t index, bool releaseObj /* ignored */)",
			"body": [
				"__Array:removeObjectAtIndex(${1:ssize_t index},${2:bool releaseObj /* ignored */})"
			],
			"description": "void __Array::removeObjectAtIndex(ssize_t index, bool releaseObj /* ignored */)"
		},
		 "void Slider::loadBarTexture(const std::string& fileName, TextureResType texType)": {
			"prefix": "void Slider::loadBarTexture(const std::string& fileName, TextureResType texType)",
			"body": [
				"Slider:loadBarTexture(${1:std:string& fileName},${2:TextureResType texType})"
			],
			"description": "void Slider::loadBarTexture(const std::string& fileName, TextureResType texType)"
		},
		 "UserDefault* UserDefault::sharedUserDefault()": {
			"prefix": "UserDefault* UserDefault::sharedUserDefault()",
			"body": [
				"UserDefault* UserDefault:sharedUserDefault()"
			],
			"description": "UserDefault* UserDefault::sharedUserDefault()"
		},
		 "RenderState::StateBlock* RenderState::StateBlock::create()": {
			"prefix": "RenderState::StateBlock* RenderState::StateBlock::create()",
			"body": [
				"RenderState:StateBlock* RenderState:StateBlock:create()"
			],
			"description": "RenderState::StateBlock* RenderState::StateBlock::create()"
		},
		 "void AABB::updateMinMax(const Vec3* point, ssize_t num)": {
			"prefix": "void AABB::updateMinMax(const Vec3* point, ssize_t num)",
			"body": [
				"AABB:updateMinMax(${1:Vec3* point},${2:ssize_t num})"
			],
			"description": "void AABB::updateMinMax(const Vec3* point, ssize_t num)"
		},
		 "ActionInterval* ActionFadeFrame::getAction(float fDuration)": {
			"prefix": "ActionInterval* ActionFadeFrame::getAction(float fDuration)",
			"body": [
				"ActionFadeFrame:getAction(${1:float fDuration})"
			],
			"description": "ActionInterval* ActionFadeFrame::getAction(float fDuration)"
		},
		 "void TransitionSplitCols::switchTargetToInscene()": {
			"prefix": "void TransitionSplitCols::switchTargetToInscene()",
			"body": [
				"void TransitionSplitCols:switchTargetToInscene()"
			],
			"description": "void TransitionSplitCols::switchTargetToInscene()"
		},
		 "Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner)": {
			"prefix": "Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner)",
			"body": [
				"CCBReader:createSceneWithNodeGraphFromFile(${1:char *pCCBFileName},${2:Ref *pOwner})"
			],
			"description": "Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner)"
		},
		 "float PhysicsBody::getAngularVelocity()": {
			"prefix": "float PhysicsBody::getAngularVelocity()",
			"body": [
				"float PhysicsBody:getAngularVelocity()"
			],
			"description": "float PhysicsBody::getAngularVelocity()"
		},
		 "bool Image::saveToFile(const std::string& filename, bool isToRGB)": {
			"prefix": "bool Image::saveToFile(const std::string& filename, bool isToRGB)",
			"body": [
				"Image:saveToFile(${1:std:string& filename},${2:bool isToRGB})"
			],
			"description": "bool Image::saveToFile(const std::string& filename, bool isToRGB)"
		},
		 "bool Material::parsePass(Technique* technique, Properties* passProperties)": {
			"prefix": "bool Material::parsePass(Technique* technique, Properties* passProperties)",
			"body": [
				"Material:parsePass(${1:Technique* technique},${2:Properties* passProperties})"
			],
			"description": "bool Material::parsePass(Technique* technique, Properties* passProperties)"
		},
		 "void ProgressTimer::setType(Type type)": {
			"prefix": "void ProgressTimer::setType(Type type)",
			"body": [
				"ProgressTimer:setType(${1:Type type})"
			],
			"description": "void ProgressTimer::setType(Type type)"
		},
		 "void Widget::addCCSEventListener(const ccWidgetEventCallback &callback)": {
			"prefix": "void Widget::addCCSEventListener(const ccWidgetEventCallback &callback)",
			"body": [
				"Widget:addCCSEventListener(${1:ccWidgetEventCallback &callback})"
			],
			"description": "void Widget::addCCSEventListener(const ccWidgetEventCallback &callback)"
		},
		 "void ArmatureDataManager::addTextureData(const std::string& id, TextureData *textureData, const std::string& configFilePath)": {
			"prefix": "void ArmatureDataManager::addTextureData(const std::string& id, TextureData *textureData, const std::string& configFilePath)",
			"body": [
				"ArmatureDataManager:addTextureData(${1:std:string& id},${2:TextureData *textureData},${3:std:string& configFilePath})"
			],
			"description": "void ArmatureDataManager::addTextureData(const std::string& id, TextureData *textureData, const std::string& configFilePath)"
		},
		 "void ScrollViewBar::onTouchBegan()": {
			"prefix": "void ScrollViewBar::onTouchBegan()",
			"body": [
				"void ScrollViewBar:onTouchBegan()"
			],
			"description": "void ScrollViewBar::onTouchBegan()"
		},
		 "float Widget::getLeftBoundary() const": {
			"prefix": "float Widget::getLeftBoundary() const",
			"body": [
				"float Widget:getLeftBoundary() "
			],
			"description": "float Widget::getLeftBoundary() const"
		},
		 "Vec3 OBB::getEdgeDirection(int index)const": {
			"prefix": "Vec3 OBB::getEdgeDirection(int index)const",
			"body": [
				"OBB:getEdgeDirection(${1:int index})"
			],
			"description": "Vec3 OBB::getEdgeDirection(int index)const"
		},
		 "void TargetedAction::setForcedTarget(Node* forcedTarget)": {
			"prefix": "void TargetedAction::setForcedTarget(Node* forcedTarget)",
			"body": [
				"TargetedAction:setForcedTarget(${1:Node* forcedTarget})"
			],
			"description": "void TargetedAction::setForcedTarget(Node* forcedTarget)"
		},
		 "void UserDefault::setIntegerForKey(const char* pKey, int value)": {
			"prefix": "void UserDefault::setIntegerForKey(const char* pKey, int value)",
			"body": [
				"UserDefault:setIntegerForKey(${1:char* pKey},${2:int value})"
			],
			"description": "void UserDefault::setIntegerForKey(const char* pKey, int value)"
		},
		 "void BoneNode::setVisible(bool visible)": {
			"prefix": "void BoneNode::setVisible(bool visible)",
			"body": [
				"BoneNode:setVisible(${1:bool visible})"
			],
			"description": "void BoneNode::setVisible(bool visible)"
		},
		 "void ControlButtonLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)": {
			"prefix": "void ControlButtonLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)",
			"body": [
				"ControlButtonLoader:onHandlePropTypePoint(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Vec2 pPoint},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlButtonLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)"
		},
		 "Bone3D* MeshSkin::getBoneByIndex(unsigned int index) const": {
			"prefix": "Bone3D* MeshSkin::getBoneByIndex(unsigned int index) const",
			"body": [
				"MeshSkin:getBoneByIndex(${1:unsigned int index})"
			],
			"description": "Bone3D* MeshSkin::getBoneByIndex(unsigned int index) const"
		},
		 "spAttachment* SkeletonRenderer::getAttachment (const std::string& slotName, const std::string& attachmentName) const": {
			"prefix": "spAttachment* SkeletonRenderer::getAttachment (const std::string& slotName, const std::string& attachmentName) const",
			"body": [
				"SkeletonRenderer:getAttachment (${1:std:string& slotName},${2:std:string& attachmentName})"
			],
			"description": "spAttachment* SkeletonRenderer::getAttachment (const std::string& slotName, const std::string& attachmentName) const"
		},
		 "void PhysicsSprite3D::syncNodeToPhysics()": {
			"prefix": "void PhysicsSprite3D::syncNodeToPhysics()",
			"body": [
				"void PhysicsSprite3D:syncNodeToPhysics()"
			],
			"description": "void PhysicsSprite3D::syncNodeToPhysics()"
		},
		 "void Terrain::Triangle::transform(cocos2d::Mat4 matrix)": {
			"prefix": "void Terrain::Triangle::transform(cocos2d::Mat4 matrix)",
			"body": [
				"Terrain:Triangle:transform(${1:cocos2d:Mat4 matrix})"
			],
			"description": "void Terrain::Triangle::transform(cocos2d::Mat4 matrix)"
		},
		 "void SceneReader::setPropertyFromJsonDict(const rapidjson::Value &root, cocos2d::Node *node)": {
			"prefix": "void SceneReader::setPropertyFromJsonDict(const rapidjson::Value &root, cocos2d::Node *node)",
			"body": [
				"SceneReader:setPropertyFromJsonDict(${1:rapidjson:Value &root},${2:cocos2d:Node *node})"
			],
			"description": "void SceneReader::setPropertyFromJsonDict(const rapidjson::Value &root, cocos2d::Node *node)"
		},
		 "bool ParticleSmoke::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleSmoke::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSmoke:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleSmoke::initWithTotalParticles(int numberOfParticles)"
		},
		 "void ActionTimeline::gotoFrame(int frameIndex)": {
			"prefix": "void ActionTimeline::gotoFrame(int frameIndex)",
			"body": [
				"ActionTimeline:gotoFrame(${1:int frameIndex})"
			],
			"description": "void ActionTimeline::gotoFrame(int frameIndex)"
		},
		 "void CCBAnimationManager::moveAnimationsFromNode(Node* fromNode, Node* toNode)": {
			"prefix": "void CCBAnimationManager::moveAnimationsFromNode(Node* fromNode, Node* toNode)",
			"body": [
				"CCBAnimationManager:moveAnimationsFromNode(${1:Node* fromNode},${2:Node* toNode})"
			],
			"description": "void CCBAnimationManager::moveAnimationsFromNode(Node* fromNode, Node* toNode)"
		},
		 "void Physics3DSliderConstraint::setRestitutionOrthoLin(float restitutionOrthoLin)": {
			"prefix": "void Physics3DSliderConstraint::setRestitutionOrthoLin(float restitutionOrthoLin)",
			"body": [
				"Physics3DSliderConstraint:setRestitutionOrthoLin(${1:float restitutionOrthoLin})"
			],
			"description": "void Physics3DSliderConstraint::setRestitutionOrthoLin(float restitutionOrthoLin)"
		},
		 "int EditBox::getMaxLength()": {
			"prefix": "int EditBox::getMaxLength()",
			"body": [
				"int EditBox:getMaxLength()"
			],
			"description": "int EditBox::getMaxLength()"
		},
		 "void Bone::setColliderFilter(ColliderFilter *filter)": {
			"prefix": "void Bone::setColliderFilter(ColliderFilter *filter)",
			"body": [
				"Bone:setColliderFilter(${1:ColliderFilter *filter})"
			],
			"description": "void Bone::setColliderFilter(ColliderFilter *filter)"
		},
		 "void PhysicsShapeEdgeChain::updateScale()": {
			"prefix": "void PhysicsShapeEdgeChain::updateScale()",
			"body": [
				"void PhysicsShapeEdgeChain:updateScale()"
			],
			"description": "void PhysicsShapeEdgeChain::updateScale()"
		},
		 "Vec2 NinePatchImageParser::parseHorizontalMargin()const": {
			"prefix": "Vec2 NinePatchImageParser::parseHorizontalMargin()const",
			"body": [
				"Vec2 NinePatchImageParser:parseHorizontalMargin()"
			],
			"description": "Vec2 NinePatchImageParser::parseHorizontalMargin()const"
		},
		 "bool TurnOffTiles::initWithDuration(float duration, const Size& gridSize, unsigned int seed)": {
			"prefix": "bool TurnOffTiles::initWithDuration(float duration, const Size& gridSize, unsigned int seed)",
			"body": [
				"TurnOffTiles:initWithDuration(${1:float duration},${2:Size& gridSize},${3:unsigned int seed})"
			],
			"description": "bool TurnOffTiles::initWithDuration(float duration, const Size& gridSize, unsigned int seed)"
		},
		 "void TransitionProgress::setupTransition()": {
			"prefix": "void TransitionProgress::setupTransition()",
			"body": [
				"void TransitionProgress:setupTransition()"
			],
			"description": "void TransitionProgress::setupTransition()"
		},
		 "void Node::setSkewX(float skewX)": {
			"prefix": "void Node::setSkewX(float skewX)",
			"body": [
				"Node:setSkewX(${1:float skewX})"
			],
			"description": "void Node::setSkewX(float skewX)"
		},
		 "void GLProgramState::applyUniforms()": {
			"prefix": "void GLProgramState::applyUniforms()",
			"body": [
				"void GLProgramState:applyUniforms()"
			],
			"description": "void GLProgramState::applyUniforms()"
		},
		 "int NodeLoader::parsePropTypeIntegerLabeled(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "int NodeLoader::parsePropTypeIntegerLabeled(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeIntegerLabeled(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "int NodeLoader::parsePropTypeIntegerLabeled(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void SAXParser::textHandler(void *ctx, const CC_XML_CHAR *name, int len)": {
			"prefix": "void SAXParser::textHandler(void *ctx, const CC_XML_CHAR *name, int len)",
			"body": [
				"SAXParser:textHandler(${1:void *ctx},${2:CC_XML_CHAR *name},${3:int len})"
			],
			"description": "void SAXParser::textHandler(void *ctx, const CC_XML_CHAR *name, int len)"
		},
		 "int PhysicsWorldCallback::collisionPreSolveCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)": {
			"prefix": "int PhysicsWorldCallback::collisionPreSolveCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)",
			"body": [
				"PhysicsWorldCallback:collisionPreSolveCallbackFunc(${1:cpArbiter *arb},${2:cpSpace *space},${3:PhysicsWorld *world})"
			],
			"description": "int PhysicsWorldCallback::collisionPreSolveCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)"
		},
		 "PhysicsWorld* PhysicsWorld::construct(Scene& scene)": {
			"prefix": "PhysicsWorld* PhysicsWorld::construct(Scene& scene)",
			"body": [
				"PhysicsWorld:ruct(${1:Scene& scene})"
			],
			"description": "PhysicsWorld* PhysicsWorld::construct(Scene& scene)"
		},
		 "RotateTo *RotateTo::reverse() const": {
			"prefix": "RotateTo *RotateTo::reverse() const",
			"body": [
				"RotateTo *RotateTo:reverse() "
			],
			"description": "RotateTo *RotateTo::reverse() const"
		},
		 "void ActionTimeline::gotoFrameAndPlay(int startIndex, int endIndex, bool loop)": {
			"prefix": "void ActionTimeline::gotoFrameAndPlay(int startIndex, int endIndex, bool loop)",
			"body": [
				"ActionTimeline:gotoFrameAndPlay(${1:int startIndex},${2:int endIndex},${3:bool loop})"
			],
			"description": "void ActionTimeline::gotoFrameAndPlay(int startIndex, int endIndex, bool loop)"
		},
		 "void ParticleBatchNode::disableParticle(int particleIndex)": {
			"prefix": "void ParticleBatchNode::disableParticle(int particleIndex)",
			"body": [
				"ParticleBatchNode:disableParticle(${1:int particleIndex})"
			],
			"description": "void ParticleBatchNode::disableParticle(int particleIndex)"
		},
		 "Bone *Armature::getBone(const std::string& name) const": {
			"prefix": "Bone *Armature::getBone(const std::string& name) const",
			"body": [
				"*Armature:getBone(${1:std:string& name})"
			],
			"description": "Bone *Armature::getBone(const std::string& name) const"
		},
		 "void Widget::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void Widget::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"Widget:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void Widget::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void PhysicsContact::generateContactData()": {
			"prefix": "void PhysicsContact::generateContactData()",
			"body": [
				"void PhysicsContact:generateContactData()"
			],
			"description": "void PhysicsContact::generateContactData()"
		},
		 "float Physics3DRigidBody::getLinearDamping() const": {
			"prefix": "float Physics3DRigidBody::getLinearDamping() const",
			"body": [
				"float Physics3DRigidBody:getLinearDamping() "
			],
			"description": "float Physics3DRigidBody::getLinearDamping() const"
		},
		 "void TextField::attachWithIME()": {
			"prefix": "void TextField::attachWithIME()",
			"body": [
				"void TextField:attachWithIME()"
			],
			"description": "void TextField::attachWithIME()"
		},
		 "void FrameBuffer::attachDepthStencilTarget(RenderTargetDepthStencil* rt)": {
			"prefix": "void FrameBuffer::attachDepthStencilTarget(RenderTargetDepthStencil* rt)",
			"body": [
				"FrameBuffer:attachDepthStencilTarget(${1:RenderTargetDepthStencil* rt})"
			],
			"description": "void FrameBuffer::attachDepthStencilTarget(RenderTargetDepthStencil* rt)"
		},
		 "int Label::getStringNumLines()": {
			"prefix": "int Label::getStringNumLines()",
			"body": [
				"int Label:getStringNumLines()"
			],
			"description": "int Label::getStringNumLines()"
		},
		 "Physics3DConeTwistConstraint* Physics3DConeTwistConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)": {
			"prefix": "Physics3DConeTwistConstraint* Physics3DConeTwistConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)",
			"body": [
				"Physics3DConeTwistConstraint:create(${1:Physics3DRigidBody* rbA},${2:Physics3DRigidBody* rbB},${3:cocos2d:Mat4& frameA},${4:cocos2d:Mat4& frameB})"
			],
			"description": "Physics3DConeTwistConstraint* Physics3DConeTwistConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)"
		},
		 "Bone *Bone::getParentBone()": {
			"prefix": "Bone *Bone::getParentBone()",
			"body": [
				"Bone *Bone:getParentBone()"
			],
			"description": "Bone *Bone::getParentBone()"
		},
		 "Vec3::Vec3(const Vec3& copy)": {
			"prefix": "Vec3::Vec3(const Vec3& copy)",
			"body": [
				"copy})"
			],
			"description": "Vec3::Vec3(const Vec3& copy)"
		},
		 "void EventDispatcher::visitTarget(Node* node, bool isRootNode)": {
			"prefix": "void EventDispatcher::visitTarget(Node* node, bool isRootNode)",
			"body": [
				"EventDispatcher:visitTarget(${1:Node* node},${2:bool isRootNode})"
			],
			"description": "void EventDispatcher::visitTarget(Node* node, bool isRootNode)"
		},
		 "void SpriteFrameCacheHelper::removeSpriteFrameFromFile(const std::string &plistPath)": {
			"prefix": "void SpriteFrameCacheHelper::removeSpriteFrameFromFile(const std::string &plistPath)",
			"body": [
				"SpriteFrameCacheHelper:removeSpriteFrameFromFile(${1:std:string &plistPath})"
			],
			"description": "void SpriteFrameCacheHelper::removeSpriteFrameFromFile(const std::string &plistPath)"
		},
		 "void ActionNode::initActionNodeFromRoot(Ref* root)": {
			"prefix": "void ActionNode::initActionNodeFromRoot(Ref* root)",
			"body": [
				"ActionNode:initActionNodeFromRoot(${1:Ref* root})"
			],
			"description": "void ActionNode::initActionNodeFromRoot(Ref* root)"
		},
		 "BezierBy* BezierBy::clone() const": {
			"prefix": "BezierBy* BezierBy::clone() const",
			"body": [
				"BezierBy* BezierBy:clone() "
			],
			"description": "BezierBy* BezierBy::clone() const"
		},
		 "const __String* __Dictionary::valueForKey(const std::string& key)": {
			"prefix": "const __String* __Dictionary::valueForKey(const std::string& key)",
			"body": [
				"__String* __Dictionary:valueForKey(${1:std:string& key})"
			],
			"description": "const __String* __Dictionary::valueForKey(const std::string& key)"
		},
		 "void JumpTo::startWithTarget(Node *target)": {
			"prefix": "void JumpTo::startWithTarget(Node *target)",
			"body": [
				"JumpTo:startWithTarget(${1:Node *target})"
			],
			"description": "void JumpTo::startWithTarget(Node *target)"
		},
		 "void TextField::setAttachWithIME(bool attach)": {
			"prefix": "void TextField::setAttachWithIME(bool attach)",
			"body": [
				"TextField:setAttachWithIME(${1:bool attach})"
			],
			"description": "void TextField::setAttachWithIME(bool attach)"
		},
		 "EaseQuarticActionInOut* EaseQuarticActionInOut::create(ActionInterval* action)": {
			"prefix": "EaseQuarticActionInOut* EaseQuarticActionInOut::create(ActionInterval* action)",
			"body": [
				"EaseQuarticActionInOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseQuarticActionInOut* EaseQuarticActionInOut::create(ActionInterval* action)"
		},
		 "float ListView::getItemsMargin()const": {
			"prefix": "float ListView::getItemsMargin()const",
			"body": [
				"float ListView:getItemsMargin()"
			],
			"description": "float ListView::getItemsMargin()const"
		},
		 "EventListenerTouchOneByOne* EventListenerTouchOneByOne::create()": {
			"prefix": "EventListenerTouchOneByOne* EventListenerTouchOneByOne::create()",
			"body": [
				"EventListenerTouchOneByOne* EventListenerTouchOneByOne:create()"
			],
			"description": "EventListenerTouchOneByOne* EventListenerTouchOneByOne::create()"
		},
		 "void MenuItemToggle::setSelectedIndex(unsigned int index)": {
			"prefix": "void MenuItemToggle::setSelectedIndex(unsigned int index)",
			"body": [
				"MenuItemToggle:setSelectedIndex(${1:unsigned int index})"
			],
			"description": "void MenuItemToggle::setSelectedIndex(unsigned int index)"
		},
		 "Margin::Margin(void) : left(0), top(0), right(0), bottom(0)": {
			"prefix": "Margin::Margin(void) : left(0), top(0), right(0), bottom(0)",
			"body": [
				")"
			],
			"description": "Margin::Margin(void) : left(0), top(0), right(0), bottom(0)"
		},
		 "void CheckBox::onTouchEnded(Touch *touch, Event *unusedEvent)": {
			"prefix": "void CheckBox::onTouchEnded(Touch *touch, Event *unusedEvent)",
			"body": [
				"CheckBox:onTouchEnded(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void CheckBox::onTouchEnded(Touch *touch, Event *unusedEvent)"
		},
		 "void Sprite3D::setCullFaceEnabled(bool enable)": {
			"prefix": "void Sprite3D::setCullFaceEnabled(bool enable)",
			"body": [
				"Sprite3D:setCullFaceEnabled(${1:bool enable})"
			],
			"description": "void Sprite3D::setCullFaceEnabled(bool enable)"
		},
		 "int ComAttribute::getInt(const std::string& key, int def) const": {
			"prefix": "int ComAttribute::getInt(const std::string& key, int def) const",
			"body": [
				"ComAttribute:getInt(${1:std:string& key},${2:int def})"
			],
			"description": "int ComAttribute::getInt(const std::string& key, int def) const"
		},
		 "LRESULT CALLBACK CWin32InputBox::DlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)": {
			"prefix": "LRESULT CALLBACK CWin32InputBox::DlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)",
			"body": [
				"CALLBACK CWin32InputBox:DlgProc(${1:HWND hDlg},${2:UINT message},${3:WPARAM wParam},${4:LPARAM lParam})"
			],
			"description": "LRESULT CALLBACK CWin32InputBox::DlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)"
		},
		 "bool DownloaderImpl::supportsResume(const std::string& url)": {
			"prefix": "bool DownloaderImpl::supportsResume(const std::string& url)",
			"body": [
				"DownloaderImpl:supportsResume(${1:std:string& url})"
			],
			"description": "bool DownloaderImpl::supportsResume(const std::string& url)"
		},
		 "void RenderState::StateBlock::restore(long stateOverrideBits)": {
			"prefix": "void RenderState::StateBlock::restore(long stateOverrideBits)",
			"body": [
				"RenderState:StateBlock:restore(${1:long stateOverrideBits})"
			],
			"description": "void RenderState::StateBlock::restore(long stateOverrideBits)"
		},
		 "unsigned int TriggerObj::getId()": {
			"prefix": "unsigned int TriggerObj::getId()",
			"body": [
				"unsigned int TriggerObj:getId()"
			],
			"description": "unsigned int TriggerObj::getId()"
		},
		 "void PageView::insertPage(Layout* page, int idx)": {
			"prefix": "void PageView::insertPage(Layout* page, int idx)",
			"body": [
				"PageView:insertPage(${1:Layout* page},${2:int idx})"
			],
			"description": "void PageView::insertPage(Layout* page, int idx)"
		},
		 "void Node::setVisible(bool visible)": {
			"prefix": "void Node::setVisible(bool visible)",
			"body": [
				"Node:setVisible(${1:bool visible})"
			],
			"description": "void Node::setVisible(bool visible)"
		},
		 "Node* CSLoader::loadSubGraph(const rapidjson::Value& json)": {
			"prefix": "Node* CSLoader::loadSubGraph(const rapidjson::Value& json)",
			"body": [
				"CSLoader:loadSubGraph(${1:rapidjson:Value& json})"
			],
			"description": "Node* CSLoader::loadSubGraph(const rapidjson::Value& json)"
		},
		 "void GroupCommand::init(float globalOrder)": {
			"prefix": "void GroupCommand::init(float globalOrder)",
			"body": [
				"GroupCommand:init(${1:float globalOrder})"
			],
			"description": "void GroupCommand::init(float globalOrder)"
		},
		 "Frame* AnchorPointFrame::clone()": {
			"prefix": "Frame* AnchorPointFrame::clone()",
			"body": [
				"Frame* AnchorPointFrame:clone()"
			],
			"description": "Frame* AnchorPointFrame::clone()"
		},
		 "void GLProgram::setUniformLocationWith2i(GLint location, GLint i1, GLint i2)": {
			"prefix": "void GLProgram::setUniformLocationWith2i(GLint location, GLint i1, GLint i2)",
			"body": [
				"GLProgram:setUniformLocationWith2i(${1:GLint location},${2:GLint i1},${3:GLint i2})"
			],
			"description": "void GLProgram::setUniformLocationWith2i(GLint location, GLint i1, GLint i2)"
		},
		 "void ParticleBatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void ParticleBatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"ParticleBatchNode:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void ParticleBatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void NavMeshDebugDraw::vertex(const float x, const float y, const float z, unsigned int color)": {
			"prefix": "void NavMeshDebugDraw::vertex(const float x, const float y, const float z, unsigned int color)",
			"body": [
				"NavMeshDebugDraw:vertex(${1:float x},${2:float y},${3:float z},${4:unsigned int color})"
			],
			"description": "void NavMeshDebugDraw::vertex(const float x, const float y, const float z, unsigned int color)"
		},
		 "void Label::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void Label::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"Label:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void Label::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "Bone *Bone::create()": {
			"prefix": "Bone *Bone::create()",
			"body": [
				"Bone *Bone:create()"
			],
			"description": "Bone *Bone::create()"
		},
		 "std::string GLProgram::getFragmentShaderLog() const": {
			"prefix": "std::string GLProgram::getFragmentShaderLog() const",
			"body": [
				"std:string GLProgram:getFragmentShaderLog() "
			],
			"description": "std::string GLProgram::getFragmentShaderLog() const"
		},
		 "bool IndexBuffer::updateIndices(const void* indices, int count, int begin)": {
			"prefix": "bool IndexBuffer::updateIndices(const void* indices, int count, int begin)",
			"body": [
				"IndexBuffer:updateIndices(${1:void* indices},${2:int count},${3:int begin})"
			],
			"description": "bool IndexBuffer::updateIndices(const void* indices, int count, int begin)"
		},
		 "TransitionSlideInT* TransitionSlideInT::create(float t, Scene* scene)": {
			"prefix": "TransitionSlideInT* TransitionSlideInT::create(float t, Scene* scene)",
			"body": [
				"TransitionSlideInT:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionSlideInT* TransitionSlideInT::create(float t, Scene* scene)"
		},
		 "Vec2 PhysicsBody::getVelocityAtLocalPoint(const Vec2& point)": {
			"prefix": "Vec2 PhysicsBody::getVelocityAtLocalPoint(const Vec2& point)",
			"body": [
				"PhysicsBody:getVelocityAtLocalPoint(${1:Vec2& point})"
			],
			"description": "Vec2 PhysicsBody::getVelocityAtLocalPoint(const Vec2& point)"
		},
		 "bool ParticleSystem::initWithFile(const std::string& plistFile)": {
			"prefix": "bool ParticleSystem::initWithFile(const std::string& plistFile)",
			"body": [
				"ParticleSystem:initWithFile(${1:std:string& plistFile})"
			],
			"description": "bool ParticleSystem::initWithFile(const std::string& plistFile)"
		},
		 "void EditBoxImplWin::openKeyboard()": {
			"prefix": "void EditBoxImplWin::openKeyboard()",
			"body": [
				"void EditBoxImplWin:openKeyboard()"
			],
			"description": "void EditBoxImplWin::openKeyboard()"
		},
		 "bool Sprite::initWithTexture(Texture2D *texture, const Rect& rect, bool rotated)": {
			"prefix": "bool Sprite::initWithTexture(Texture2D *texture, const Rect& rect, bool rotated)",
			"body": [
				"Sprite:initWithTexture(${1:Texture2D *texture},${2:Rect& rect},${3:bool rotated})"
			],
			"description": "bool Sprite::initWithTexture(Texture2D *texture, const Rect& rect, bool rotated)"
		},
		 "float PhysicsJointSpring::getRestLength() const": {
			"prefix": "float PhysicsJointSpring::getRestLength() const",
			"body": [
				"float PhysicsJointSpring:getRestLength() "
			],
			"description": "float PhysicsJointSpring::getRestLength() const"
		},
		 "void TransitionJumpZoom::onEnter()": {
			"prefix": "void TransitionJumpZoom::onEnter()",
			"body": [
				"void TransitionJumpZoom:onEnter()"
			],
			"description": "void TransitionJumpZoom::onEnter()"
		},
		 "Texture2D* TextureAtlas::getTexture() const": {
			"prefix": "Texture2D* TextureAtlas::getTexture() const",
			"body": [
				"Texture2D* TextureAtlas:getTexture() "
			],
			"description": "Texture2D* TextureAtlas::getTexture() const"
		},
		 "bool Menu::init()": {
			"prefix": "bool Menu::init()",
			"body": [
				"bool Menu:init()"
			],
			"description": "bool Menu::init()"
		},
		 "ssize_t Console::readline(int fd, char* ptr, size_t maxlen)": {
			"prefix": "ssize_t Console::readline(int fd, char* ptr, size_t maxlen)",
			"body": [
				"Console:readline(${1:int fd},${2:char* ptr},${3:size_t maxlen})"
			],
			"description": "ssize_t Console::readline(int fd, char* ptr, size_t maxlen)"
		},
		 "float FadeOutTRTiles::testFunc(const Size& pos, float time)": {
			"prefix": "float FadeOutTRTiles::testFunc(const Size& pos, float time)",
			"body": [
				"FadeOutTRTiles:testFunc(${1:Size& pos},${2:float time})"
			],
			"description": "float FadeOutTRTiles::testFunc(const Size& pos, float time)"
		},
		 "void TextField::insertTextEvent()": {
			"prefix": "void TextField::insertTextEvent()",
			"body": [
				"void TextField:insertTextEvent()"
			],
			"description": "void TextField::insertTextEvent()"
		},
		 "void Node::setPosition(const Vec2& position)": {
			"prefix": "void Node::setPosition(const Vec2& position)",
			"body": [
				"Node:setPosition(${1:Vec2& position})"
			],
			"description": "void Node::setPosition(const Vec2& position)"
		},
		 "std::string CheckBox::getDescription() const": {
			"prefix": "std::string CheckBox::getDescription() const",
			"body": [
				"std:string CheckBox:getDescription() "
			],
			"description": "std::string CheckBox::getDescription() const"
		},
		 "Plane::Plane(const Vec3& normal, const Vec3& point)": {
			"prefix": "Plane::Plane(const Vec3& normal, const Vec3& point)",
			"body": [
				"normal},${2:Vec3& point})"
			],
			"description": "Plane::Plane(const Vec3& normal, const Vec3& point)"
		},
		 "void CheckBox::dispatchSelectChangedEvent(bool selected)": {
			"prefix": "void CheckBox::dispatchSelectChangedEvent(bool selected)",
			"body": [
				"CheckBox:dispatchSelectChangedEvent(${1:bool selected})"
			],
			"description": "void CheckBox::dispatchSelectChangedEvent(bool selected)"
		},
		 "void Timeline::setNode(Node* node)": {
			"prefix": "void Timeline::setNode(Node* node)",
			"body": [
				"Timeline:setNode(${1:Node* node})"
			],
			"description": "void Timeline::setNode(Node* node)"
		},
		 "void ActionManager::removeAllActionsByTag(int tag, Node *target)": {
			"prefix": "void ActionManager::removeAllActionsByTag(int tag, Node *target)",
			"body": [
				"ActionManager:removeAllActionsByTag(${1:int tag},${2:Node *target})"
			],
			"description": "void ActionManager::removeAllActionsByTag(int tag, Node *target)"
		},
		 "TextHAlignment LabelTTF::getHorizontalAlignment() const": {
			"prefix": "TextHAlignment LabelTTF::getHorizontalAlignment() const",
			"body": [
				"TextHAlignment LabelTTF:getHorizontalAlignment() "
			],
			"description": "TextHAlignment LabelTTF::getHorizontalAlignment() const"
		},
		 "std::string CCBReader::deletePathExtension(const char* pPath)": {
			"prefix": "std::string CCBReader::deletePathExtension(const char* pPath)",
			"body": [
				"CCBReader:deletePathExtension(${1:char* pPath})"
			],
			"description": "std::string CCBReader::deletePathExtension(const char* pPath)"
		},
		 "std::string FileUtilsWin32::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath) const": {
			"prefix": "std::string FileUtilsWin32::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath) const",
			"body": [
				"FileUtilsWin32:getPathForFilename(${1:std:string& filename},${2:std:string& resolutionDirectory},${3:std:string& searchPath})"
			],
			"description": "std::string FileUtilsWin32::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath) const"
		},
		 "bool Liquid::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)": {
			"prefix": "bool Liquid::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)",
			"body": [
				"Liquid:initWithDuration(${1:float duration},${2:Size& gridSize},${3:unsigned int waves},${4:float amplitude})"
			],
			"description": "bool Liquid::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)"
		},
		 "Widget* RadioButton::createCloneInstance()": {
			"prefix": "Widget* RadioButton::createCloneInstance()",
			"body": [
				"Widget* RadioButton:createCloneInstance()"
			],
			"description": "Widget* RadioButton::createCloneInstance()"
		},
		 "bool CCBReader::readSequences()": {
			"prefix": "bool CCBReader::readSequences()",
			"body": [
				"bool CCBReader:readSequences()"
			],
			"description": "bool CCBReader::readSequences()"
		},
		 "unsigned char* FileUtilsAndroid::getFileData(const std::string& filename, const char* mode, ssize_t * size)": {
			"prefix": "unsigned char* FileUtilsAndroid::getFileData(const std::string& filename, const char* mode, ssize_t * size)",
			"body": [
				"char* FileUtilsAndroid:getFileData(${1:std:string& filename},${2:char* mode},${3:ssize_t * size})"
			],
			"description": "unsigned char* FileUtilsAndroid::getFileData(const std::string& filename, const char* mode, ssize_t * size)"
		},
		 "const cocos2d::Map<std::string, TextureData*>& ArmatureDataManager::getTextureDatas() const": {
			"prefix": "const cocos2d::Map<std::string, TextureData*>& ArmatureDataManager::getTextureDatas() const",
			"body": [
				" cocos2d:Map<std:string, TextureData*>& ArmatureDataManager:getTextureDatas() "
			],
			"description": "const cocos2d::Map<std::string, TextureData*>& ArmatureDataManager::getTextureDatas() const"
		},
		 "void ParticleSystem::setTangentialAccel(float t)": {
			"prefix": "void ParticleSystem::setTangentialAccel(float t)",
			"body": [
				"ParticleSystem:setTangentialAccel(${1:float t})"
			],
			"description": "void ParticleSystem::setTangentialAccel(float t)"
		},
		 "void Camera::apply()": {
			"prefix": "void Camera::apply()",
			"body": [
				"void Camera:apply()"
			],
			"description": "void Camera::apply()"
		},
		 "void Skybox::reload()": {
			"prefix": "void Skybox::reload()",
			"body": [
				"void Skybox:reload()"
			],
			"description": "void Skybox::reload()"
		},
		 "bool TextFieldTTF::canAttachWithIME()": {
			"prefix": "bool TextFieldTTF::canAttachWithIME()",
			"body": [
				"bool TextFieldTTF:canAttachWithIME()"
			],
			"description": "bool TextFieldTTF::canAttachWithIME()"
		},
		 "bool FlipX3D::initWithSize(const Size& gridSize, float duration)": {
			"prefix": "bool FlipX3D::initWithSize(const Size& gridSize, float duration)",
			"body": [
				"FlipX3D:initWithSize(${1:Size& gridSize},${2:float duration})"
			],
			"description": "bool FlipX3D::initWithSize(const Size& gridSize, float duration)"
		},
		 "AccelAmplitude* AccelAmplitude::create(Action *action, float duration)": {
			"prefix": "AccelAmplitude* AccelAmplitude::create(Action *action, float duration)",
			"body": [
				"AccelAmplitude:create(${1:Action *action},${2:float duration})"
			],
			"description": "AccelAmplitude* AccelAmplitude::create(Action *action, float duration)"
		},
		 "void SIOClientImpl::onClose(WebSocket* ws)": {
			"prefix": "void SIOClientImpl::onClose(WebSocket* ws)",
			"body": [
				"SIOClientImpl:onClose(${1:WebSocket* ws})"
			],
			"description": "void SIOClientImpl::onClose(WebSocket* ws)"
		},
		 "StopGrid* StopGrid::create()": {
			"prefix": "StopGrid* StopGrid::create()",
			"body": [
				"StopGrid* StopGrid:create()"
			],
			"description": "StopGrid* StopGrid::create()"
		},
		 "void PageView::addEventListenerPageView(Ref *target, SEL_PageViewEvent selector)": {
			"prefix": "void PageView::addEventListenerPageView(Ref *target, SEL_PageViewEvent selector)",
			"body": [
				"PageView:addEventListenerPageView(${1:Ref *target},${2:SEL_PageViewEvent selector})"
			],
			"description": "void PageView::addEventListenerPageView(Ref *target, SEL_PageViewEvent selector)"
		},
		 "void GLView::setViewName(const std::string& viewname )": {
			"prefix": "void GLView::setViewName(const std::string& viewname )",
			"body": [
				"GLView:setViewName(${1:std:string& viewname})"
			],
			"description": "void GLView::setViewName(const std::string& viewname )"
		},
		 "TurnOffTiles* TurnOffTiles::clone() const": {
			"prefix": "TurnOffTiles* TurnOffTiles::clone() const",
			"body": [
				"TurnOffTiles* TurnOffTiles:clone() "
			],
			"description": "TurnOffTiles* TurnOffTiles::clone() const"
		},
		 "void Label::computeStringNumLines()": {
			"prefix": "void Label::computeStringNumLines()",
			"body": [
				"void Label:computeStringNumLines()"
			],
			"description": "void Label::computeStringNumLines()"
		},
		 "bool RenderTargetRenderBuffer::init(unsigned int width, unsigned int height)": {
			"prefix": "bool RenderTargetRenderBuffer::init(unsigned int width, unsigned int height)",
			"body": [
				"RenderTargetRenderBuffer:init(${1:unsigned int width},${2:unsigned int height})"
			],
			"description": "bool RenderTargetRenderBuffer::init(unsigned int width, unsigned int height)"
		},
		 "void Layout::removeBackGroundImage()": {
			"prefix": "void Layout::removeBackGroundImage()",
			"body": [
				"void Layout:removeBackGroundImage()"
			],
			"description": "void Layout::removeBackGroundImage()"
		},
		 "bool TileMapAtlas::initWithTileFile(const std::string& tile, const std::string& mapFile, int tileWidth, int tileHeight)": {
			"prefix": "bool TileMapAtlas::initWithTileFile(const std::string& tile, const std::string& mapFile, int tileWidth, int tileHeight)",
			"body": [
				"TileMapAtlas:initWithTileFile(${1:std:string& tile},${2:std:string& mapFile},${3:int tileWidth},${4:int tileHeight})"
			],
			"description": "bool TileMapAtlas::initWithTileFile(const std::string& tile, const std::string& mapFile, int tileWidth, int tileHeight)"
		},
		 "bool GLViewImpl::windowShouldClose()": {
			"prefix": "bool GLViewImpl::windowShouldClose()",
			"body": [
				"bool GLViewImpl:windowShouldClose()"
			],
			"description": "bool GLViewImpl::windowShouldClose()"
		},
		 "void Sprite3D::setForce2DQueue(bool force2D)": {
			"prefix": "void Sprite3D::setForce2DQueue(bool force2D)",
			"body": [
				"Sprite3D:setForce2DQueue(${1:bool force2D})"
			],
			"description": "void Sprite3D::setForce2DQueue(bool force2D)"
		},
		 "char* Properties::trimWhiteSpace(char *str)": {
			"prefix": "char* Properties::trimWhiteSpace(char *str)",
			"body": [
				"Properties:trimWhiteSpace(${1:char *str})"
			],
			"description": "char* Properties::trimWhiteSpace(char *str)"
		},
		 "Touch::DispatchMode InputDelegate::getTouchMode() const": {
			"prefix": "Touch::DispatchMode InputDelegate::getTouchMode() const",
			"body": [
				"Touch:DispatchMode InputDelegate:getTouchMode() "
			],
			"description": "Touch::DispatchMode InputDelegate::getTouchMode() const"
		},
		 "ComRender* ComRender::create(void)": {
			"prefix": "ComRender* ComRender::create(void)",
			"body": [
				"ComRender:create(${1:void})"
			],
			"description": "ComRender* ComRender::create(void)"
		},
		 "Frame* ActionTimelineCache::loadSkewFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadSkewFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadSkewFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadSkewFrame(const rapidjson::Value& json)"
		},
		 "Spawn * ActionNode::refreshActionProperty()": {
			"prefix": "Spawn * ActionNode::refreshActionProperty()",
			"body": [
				"Spawn * ActionNode:refreshActionProperty()"
			],
			"description": "Spawn * ActionNode::refreshActionProperty()"
		},
		 "Bone3D* MeshSkin::getRootBone() const": {
			"prefix": "Bone3D* MeshSkin::getRootBone() const",
			"body": [
				"Bone3D* MeshSkin:getRootBone() "
			],
			"description": "Bone3D* MeshSkin::getRootBone() const"
		},
		 "void ScrollView::scrollToPercentVertical(float percent, float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToPercentVertical(float percent, float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToPercentVertical(${1:float percent},${2:float second},${3:bool attenuated})"
			],
			"description": "void ScrollView::scrollToPercentVertical(float percent, float second, bool attenuated)"
		},
		 "void DisplayLinkDirector::setAnimationInterval(float interval)": {
			"prefix": "void DisplayLinkDirector::setAnimationInterval(float interval)",
			"body": [
				"DisplayLinkDirector:setAnimationInterval(${1:float interval})"
			],
			"description": "void DisplayLinkDirector::setAnimationInterval(float interval)"
		},
		 "void Menu::alignItemsVertically()": {
			"prefix": "void Menu::alignItemsVertically()",
			"body": [
				"void Menu:alignItemsVertically()"
			],
			"description": "void Menu::alignItemsVertically()"
		},
		 "float Node::getRotationSkewY() const": {
			"prefix": "float Node::getRotationSkewY() const",
			"body": [
				"float Node:getRotationSkewY() "
			],
			"description": "float Node::getRotationSkewY() const"
		},
		 "void AudioEngineImpl::update(float dt)": {
			"prefix": "void AudioEngineImpl::update(float dt)",
			"body": [
				"AudioEngineImpl:update(${1:float dt})"
			],
			"description": "void AudioEngineImpl::update(float dt)"
		},
		 "void SkeletonAnimation::setEventListener (const EventListener& listener)": {
			"prefix": "void SkeletonAnimation::setEventListener (const EventListener& listener)",
			"body": [
				"SkeletonAnimation:setEventListener (${1:EventListener& listener})"
			],
			"description": "void SkeletonAnimation::setEventListener (const EventListener& listener)"
		},
		 "void Scheduler::priorityIn(tListEntry **list, const ccSchedulerFunc& callback, void *target, int priority, bool paused)": {
			"prefix": "void Scheduler::priorityIn(tListEntry **list, const ccSchedulerFunc& callback, void *target, int priority, bool paused)",
			"body": [
				"Scheduler:priorityIn(${1:tListEntry **list},${2:ccSchedulerFunc& callback},${3:void *target},${4:int priority},${5:bool paused})"
			],
			"description": "void Scheduler::priorityIn(tListEntry **list, const ccSchedulerFunc& callback, void *target, int priority, bool paused)"
		},
		 "void SplitCols::startWithTarget(Node *target)": {
			"prefix": "void SplitCols::startWithTarget(Node *target)",
			"body": [
				"SplitCols:startWithTarget(${1:Node *target})"
			],
			"description": "void SplitCols::startWithTarget(Node *target)"
		},
		 "void Lock::unlock(void)": {
			"prefix": "void Lock::unlock(void)",
			"body": [
				"Lock:unlock(${1:void})"
			],
			"description": "void Lock::unlock(void)"
		},
		 "bool RichElement::init(int tag, const Color3B &color, GLubyte opacity)": {
			"prefix": "bool RichElement::init(int tag, const Color3B &color, GLubyte opacity)",
			"body": [
				"RichElement:init(${1:int tag},${2:Color3B &color},${3:GLubyte opacity})"
			],
			"description": "bool RichElement::init(int tag, const Color3B &color, GLubyte opacity)"
		},
		 "TextureAtlas * TextureAtlas::create(const std::string& file, ssize_t capacity)": {
			"prefix": "TextureAtlas * TextureAtlas::create(const std::string& file, ssize_t capacity)",
			"body": [
				"* TextureAtlas:create(${1:std:string& file},${2:ssize_t capacity})"
			],
			"description": "TextureAtlas * TextureAtlas::create(const std::string& file, ssize_t capacity)"
		},
		 "std::string Menu::getDescription() const": {
			"prefix": "std::string Menu::getDescription() const",
			"body": [
				"std:string Menu:getDescription() "
			],
			"description": "std::string Menu::getDescription() const"
		},
		 "void Mat4::createScale(float xScale, float yScale, float zScale, Mat4* dst)": {
			"prefix": "void Mat4::createScale(float xScale, float yScale, float zScale, Mat4* dst)",
			"body": [
				"Mat4:createScale(${1:float xScale},${2:float yScale},${3:float zScale},${4:Mat4* dst})"
			],
			"description": "void Mat4::createScale(float xScale, float yScale, float zScale, Mat4* dst)"
		},
		 "void DecorativeDisplay::setDisplay(cocos2d::Node *display)": {
			"prefix": "void DecorativeDisplay::setDisplay(cocos2d::Node *display)",
			"body": [
				"DecorativeDisplay:setDisplay(${1:cocos2d:Node *display})"
			],
			"description": "void DecorativeDisplay::setDisplay(cocos2d::Node *display)"
		},
		 "Bone3D* Skeleton3D::getBoneByIndex(unsigned int index) const": {
			"prefix": "Bone3D* Skeleton3D::getBoneByIndex(unsigned int index) const",
			"body": [
				"Skeleton3D:getBoneByIndex(${1:unsigned int index})"
			],
			"description": "Bone3D* Skeleton3D::getBoneByIndex(unsigned int index) const"
		},
		 "void Profiler::releaseTimer(const char* timerName)": {
			"prefix": "void Profiler::releaseTimer(const char* timerName)",
			"body": [
				"Profiler:releaseTimer(${1:char* timerName})"
			],
			"description": "void Profiler::releaseTimer(const char* timerName)"
		},
		 "float Node::getSkewX() const": {
			"prefix": "float Node::getSkewX() const",
			"body": [
				"float Node:getSkewX() "
			],
			"description": "float Node::getSkewX() const"
		},
		 "bool ZipUtils::isCCZFile(const char *path)": {
			"prefix": "bool ZipUtils::isCCZFile(const char *path)",
			"body": [
				"ZipUtils:isCCZFile(${1:char *path})"
			],
			"description": "bool ZipUtils::isCCZFile(const char *path)"
		},
		 "Frame* ActionTimelineCache::loadPositionFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadPositionFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadPositionFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadPositionFrame(const rapidjson::Value& json)"
		},
		 "void UserDefault::setDataForKey(const char* pKey, const Data& value)": {
			"prefix": "void UserDefault::setDataForKey(const char* pKey, const Data& value)",
			"body": [
				"UserDefault:setDataForKey(${1:char* pKey},${2:Data& value})"
			],
			"description": "void UserDefault::setDataForKey(const char* pKey, const Data& value)"
		},
		 "float Terrain::getMinHeight()": {
			"prefix": "float Terrain::getMinHeight()",
			"body": [
				"float Terrain:getMinHeight()"
			],
			"description": "float Terrain::getMinHeight()"
		},
		 "void Physics3DComponent::syncPhysicsToNode()": {
			"prefix": "void Physics3DComponent::syncPhysicsToNode()",
			"body": [
				"void Physics3DComponent:syncPhysicsToNode()"
			],
			"description": "void Physics3DComponent::syncPhysicsToNode()"
		},
		 "void EaseSineOut::update(float time)": {
			"prefix": "void EaseSineOut::update(float time)",
			"body": [
				"EaseSineOut:update(${1:float time})"
			],
			"description": "void EaseSineOut::update(float time)"
		},
		 "void ProgressTimer::setSprite(Sprite *sprite)": {
			"prefix": "void ProgressTimer::setSprite(Sprite *sprite)",
			"body": [
				"ProgressTimer:setSprite(${1:Sprite *sprite})"
			],
			"description": "void ProgressTimer::setSprite(Sprite *sprite)"
		},
		 "Node* Button::getVirtualRenderer()": {
			"prefix": "Node* Button::getVirtualRenderer()",
			"body": [
				"Node* Button:getVirtualRenderer()"
			],
			"description": "Node* Button::getVirtualRenderer()"
		},
		 "bool Label::setTTFConfig(const TTFConfig& ttfConfig)": {
			"prefix": "bool Label::setTTFConfig(const TTFConfig& ttfConfig)",
			"body": [
				"Label:setTTFConfig(${1:TTFConfig& ttfConfig})"
			],
			"description": "bool Label::setTTFConfig(const TTFConfig& ttfConfig)"
		},
		 "void RemoveSelf::update(float time)": {
			"prefix": "void RemoveSelf::update(float time)",
			"body": [
				"RemoveSelf:update(${1:float time})"
			],
			"description": "void RemoveSelf::update(float time)"
		},
		 "bool AudioPlayer::play2d(AudioCache* cache)": {
			"prefix": "bool AudioPlayer::play2d(AudioCache* cache)",
			"body": [
				"AudioPlayer:play2d(${1:AudioCache* cache})"
			],
			"description": "bool AudioPlayer::play2d(AudioCache* cache)"
		},
		 "void Vec4::subtract(const Vec4& v)": {
			"prefix": "void Vec4::subtract(const Vec4& v)",
			"body": [
				"Vec4:subtract(${1:Vec4& v})"
			],
			"description": "void Vec4::subtract(const Vec4& v)"
		},
		 "std::set<void*> Scheduler::pauseAllTargets()": {
			"prefix": "std::set<void*> Scheduler::pauseAllTargets()",
			"body": [
				"std:set<void*> Scheduler:pauseAllTargets()"
			],
			"description": "std::set<void*> Scheduler::pauseAllTargets()"
		},
		 "Physics3DConeTwistConstraint* Physics3DConeTwistConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Mat4& frameA)": {
			"prefix": "Physics3DConeTwistConstraint* Physics3DConeTwistConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Mat4& frameA)",
			"body": [
				"Physics3DConeTwistConstraint:create(${1:Physics3DRigidBody* rbA},${2:cocos2d:Mat4& frameA})"
			],
			"description": "Physics3DConeTwistConstraint* Physics3DConeTwistConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Mat4& frameA)"
		},
		 "ProgressTimer* TransitionProgressRadialCCW::progressTimerNodeWithRenderTexture(RenderTexture* texture)": {
			"prefix": "ProgressTimer* TransitionProgressRadialCCW::progressTimerNodeWithRenderTexture(RenderTexture* texture)",
			"body": [
				"TransitionProgressRadialCCW:progressTimerNodeWithRenderTexture(${1:RenderTexture* texture})"
			],
			"description": "ProgressTimer* TransitionProgressRadialCCW::progressTimerNodeWithRenderTexture(RenderTexture* texture)"
		},
		 "Properties* Properties::getNextNamespace()": {
			"prefix": "Properties* Properties::getNextNamespace()",
			"body": [
				"Properties* Properties:getNextNamespace()"
			],
			"description": "Properties* Properties::getNextNamespace()"
		},
		 "void VertexData::removeStream(int semantic)": {
			"prefix": "void VertexData::removeStream(int semantic)",
			"body": [
				"VertexData:removeStream(${1:int semantic})"
			],
			"description": "void VertexData::removeStream(int semantic)"
		},
		 "void ActionCamera::setUp(const Vec3& up)": {
			"prefix": "void ActionCamera::setUp(const Vec3& up)",
			"body": [
				"ActionCamera:setUp(${1:Vec3& up})"
			],
			"description": "void ActionCamera::setUp(const Vec3& up)"
		},
		 "void Data::move(Data& other)": {
			"prefix": "void Data::move(Data& other)",
			"body": [
				"Data:move(${1:Data& other})"
			],
			"description": "void Data::move(Data& other)"
		},
		 "void ScrollView::addChild(Node *child, int zOrder, int tag)": {
			"prefix": "void ScrollView::addChild(Node *child, int zOrder, int tag)",
			"body": [
				"ScrollView:addChild(${1:Node *child},${2:int zOrder},${3:int tag})"
			],
			"description": "void ScrollView::addChild(Node *child, int zOrder, int tag)"
		},
		 "bool Rect::intersectsCircle(const cocos2d::Vec2 &center, float radius) const": {
			"prefix": "bool Rect::intersectsCircle(const cocos2d::Vec2 &center, float radius) const",
			"body": [
				"Rect:intersectsCircle(${1:cocos2d:Vec2 &center},${2:float radius})"
			],
			"description": "bool Rect::intersectsCircle(const cocos2d::Vec2 &center, float radius) const"
		},
		 "void Slider::addEventListener(const ccSliderCallback& callback)": {
			"prefix": "void Slider::addEventListener(const ccSliderCallback& callback)",
			"body": [
				"Slider:addEventListener(${1:ccSliderCallback& callback})"
			],
			"description": "void Slider::addEventListener(const ccSliderCallback& callback)"
		},
		 "void ProgressTimer::updateRadial(void)": {
			"prefix": "void ProgressTimer::updateRadial(void)",
			"body": [
				"ProgressTimer:updateRadial(${1:void})"
			],
			"description": "void ProgressTimer::updateRadial(void)"
		},
		 "void SimpleAudioEngine::resumeBackgroundMusic()": {
			"prefix": "void SimpleAudioEngine::resumeBackgroundMusic()",
			"body": [
				"void SimpleAudioEngine:resumeBackgroundMusic()"
			],
			"description": "void SimpleAudioEngine::resumeBackgroundMusic()"
		},
		 "void ActionInterval::setAmplitudeRate(float amp)": {
			"prefix": "void ActionInterval::setAmplitudeRate(float amp)",
			"body": [
				"ActionInterval:setAmplitudeRate(${1:float amp})"
			],
			"description": "void ActionInterval::setAmplitudeRate(float amp)"
		},
		 "int ZipUtils::inflateCCZFile(const char *path, unsigned char **out)": {
			"prefix": "int ZipUtils::inflateCCZFile(const char *path, unsigned char **out)",
			"body": [
				"ZipUtils:inflateCCZFile(${1:char *path},${2:unsigned char **out})"
			],
			"description": "int ZipUtils::inflateCCZFile(const char *path, unsigned char **out)"
		},
		 "void TextField::didNotSelectSelf()": {
			"prefix": "void TextField::didNotSelectSelf()",
			"body": [
				"void TextField:didNotSelectSelf()"
			],
			"description": "void TextField::didNotSelectSelf()"
		},
		 "const ValueMapIntKey& Value::asIntKeyMap() const": {
			"prefix": "const ValueMapIntKey& Value::asIntKeyMap() const",
			"body": [
				" ValueMapIntKey& Value:asIntKeyMap() "
			],
			"description": "const ValueMapIntKey& Value::asIntKeyMap() const"
		},
		 "void VisibleFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void VisibleFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"VisibleFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void VisibleFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void EditBoxImplAndroid::setNativeFontColor(const Color4B& color)": {
			"prefix": "void EditBoxImplAndroid::setNativeFontColor(const Color4B& color)",
			"body": [
				"EditBoxImplAndroid:setNativeFontColor(${1:Color4B& color})"
			],
			"description": "void EditBoxImplAndroid::setNativeFontColor(const Color4B& color)"
		},
		 "void Node::removeChild(Node* child, bool cleanup /* = true */)": {
			"prefix": "void Node::removeChild(Node* child, bool cleanup /* = true */)",
			"body": [
				"Node:removeChild(${1:Node* child},${2:bool cleanup /* = true */})"
			],
			"description": "void Node::removeChild(Node* child, bool cleanup /* = true */)"
		},
		 "void TextureCache::purgeSharedTextureCache()": {
			"prefix": "void TextureCache::purgeSharedTextureCache()",
			"body": [
				"void TextureCache:purgeSharedTextureCache()"
			],
			"description": "void TextureCache::purgeSharedTextureCache()"
		},
		 "void Node::setPosition3D(const Vec3& position)": {
			"prefix": "void Node::setPosition3D(const Vec3& position)",
			"body": [
				"Node:setPosition3D(${1:Vec3& position})"
			],
			"description": "void Node::setPosition3D(const Vec3& position)"
		},
		 "CCBReader::CCBAnimationManagerMapPtr CCBReader::getAnimationManagers()": {
			"prefix": "CCBReader::CCBAnimationManagerMapPtr CCBReader::getAnimationManagers()",
			"body": [
				"CCBReader:CCBAnimationManagerMapPtr CCBReader:getAnimationManagers()"
			],
			"description": "CCBReader::CCBAnimationManagerMapPtr CCBReader::getAnimationManagers()"
		},
		 "void LayerMultiplex::switchTo(int n)": {
			"prefix": "void LayerMultiplex::switchTo(int n)",
			"body": [
				"LayerMultiplex:switchTo(${1:int n})"
			],
			"description": "void LayerMultiplex::switchTo(int n)"
		},
		 "void Widget::requestFocus()": {
			"prefix": "void Widget::requestFocus()",
			"body": [
				"void Widget:requestFocus()"
			],
			"description": "void Widget::requestFocus()"
		},
		 "void ParticleSystemQuad::setTexture(Texture2D* texture)": {
			"prefix": "void ParticleSystemQuad::setTexture(Texture2D* texture)",
			"body": [
				"ParticleSystemQuad:setTexture(${1:Texture2D* texture})"
			],
			"description": "void ParticleSystemQuad::setTexture(Texture2D* texture)"
		},
		 "unsigned int Texture2D::getBitsPerPixelForFormat() const": {
			"prefix": "unsigned int Texture2D::getBitsPerPixelForFormat() const",
			"body": [
				"unsigned int Texture2D:getBitsPerPixelForFormat() "
			],
			"description": "unsigned int Texture2D::getBitsPerPixelForFormat() const"
		},
		 "void ParticleSystemQuadLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)": {
			"prefix": "void ParticleSystemQuadLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)",
			"body": [
				"ParticleSystemQuadLoader:onHandlePropTypeIntegerLabeled(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:int pIntegerLabeled},${5:CCBReader * ccbReader})"
			],
			"description": "void ParticleSystemQuadLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)"
		},
		 "void Application::setResourceRootPath(const std::string& rootResDir)": {
			"prefix": "void Application::setResourceRootPath(const std::string& rootResDir)",
			"body": [
				"Application:setResourceRootPath(${1:std:string& rootResDir})"
			],
			"description": "void Application::setResourceRootPath(const std::string& rootResDir)"
		},
		 "void Terrain::setAlphaMap(cocos2d::Texture2D * newAlphaMapTexture)": {
			"prefix": "void Terrain::setAlphaMap(cocos2d::Texture2D * newAlphaMapTexture)",
			"body": [
				"Terrain:setAlphaMap(${1:cocos2d:Texture2D * newAlphaMapTexture})"
			],
			"description": "void Terrain::setAlphaMap(cocos2d::Texture2D * newAlphaMapTexture)"
		},
		 "Texture2D * AtlasNode::getTexture() const": {
			"prefix": "Texture2D * AtlasNode::getTexture() const",
			"body": [
				"Texture2D * AtlasNode:getTexture() "
			],
			"description": "Texture2D * AtlasNode::getTexture() const"
		},
		 "void ParticleSystem::setRotation(float newRotation)": {
			"prefix": "void ParticleSystem::setRotation(float newRotation)",
			"body": [
				"ParticleSystem:setRotation(${1:float newRotation})"
			],
			"description": "void ParticleSystem::setRotation(float newRotation)"
		},
		 "Widget* Widget::clone()": {
			"prefix": "Widget* Widget::clone()",
			"body": [
				"Widget* Widget:clone()"
			],
			"description": "Widget* Widget::clone()"
		},
		 "bool TintBy::initWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)": {
			"prefix": "bool TintBy::initWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)",
			"body": [
				"TintBy:initWithDuration(${1:float duration},${2:GLshort deltaRed},${3:GLshort deltaGreen},${4:GLshort deltaBlue})"
			],
			"description": "bool TintBy::initWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)"
		},
		 "void VolatileTextureMgr::addImage(Texture2D *tt, Image *image)": {
			"prefix": "void VolatileTextureMgr::addImage(Texture2D *tt, Image *image)",
			"body": [
				"VolatileTextureMgr:addImage(${1:Texture2D *tt},${2:Image *image})"
			],
			"description": "void VolatileTextureMgr::addImage(Texture2D *tt, Image *image)"
		},
		 "Rect Label::getBoundingBox() const": {
			"prefix": "Rect Label::getBoundingBox() const",
			"body": [
				"Rect Label:getBoundingBox() "
			],
			"description": "Rect Label::getBoundingBox() const"
		},
		 "SpriteFrameCache* SpriteFrameCache::getInstance()": {
			"prefix": "SpriteFrameCache* SpriteFrameCache::getInstance()",
			"body": [
				"SpriteFrameCache* SpriteFrameCache:getInstance()"
			],
			"description": "SpriteFrameCache* SpriteFrameCache::getInstance()"
		},
		 "void FadeOutTRTiles::turnOffTile(const Vec2& pos)": {
			"prefix": "void FadeOutTRTiles::turnOffTile(const Vec2& pos)",
			"body": [
				"FadeOutTRTiles:turnOffTile(${1:Vec2& pos})"
			],
			"description": "void FadeOutTRTiles::turnOffTile(const Vec2& pos)"
		},
		 "void setJavascriptInterfaceSchemeJNI(const int index, const std::string &scheme)": {
			"prefix": "void setJavascriptInterfaceSchemeJNI(const int index, const std::string &scheme)",
			"body": [
				"setJavascriptInterfaceSchemeJNI(${1:int index},${2:std:string &scheme})"
			],
			"description": "void setJavascriptInterfaceSchemeJNI(const int index, const std::string &scheme)"
		},
		 "bool NinePatchImageParser::isNinePatchImage(const std::string& filepath)": {
			"prefix": "bool NinePatchImageParser::isNinePatchImage(const std::string& filepath)",
			"body": [
				"NinePatchImageParser:isNinePatchImage(${1:std:string& filepath})"
			],
			"description": "bool NinePatchImageParser::isNinePatchImage(const std::string& filepath)"
		},
		 "void Scheduler::schedule(SEL_SCHEDULE selector, Ref *target, float interval, unsigned int repeat, float delay, bool paused)": {
			"prefix": "void Scheduler::schedule(SEL_SCHEDULE selector, Ref *target, float interval, unsigned int repeat, float delay, bool paused)",
			"body": [
				"Scheduler:schedule(${1:SEL_SCHEDULE selector},${2:Ref *target},${3:float interval},${4:unsigned int repeat},${5:float delay},${6:bool paused})"
			],
			"description": "void Scheduler::schedule(SEL_SCHEDULE selector, Ref *target, float interval, unsigned int repeat, float delay, bool paused)"
		},
		 "void ClippingNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void ClippingNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"ClippingNode:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void ClippingNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "bool JniHelper::setClassLoaderFrom(jobject activityinstance)": {
			"prefix": "bool JniHelper::setClassLoaderFrom(jobject activityinstance)",
			"body": [
				"JniHelper:setClassLoaderFrom(${1:jobject activityinstance})"
			],
			"description": "bool JniHelper::setClassLoaderFrom(jobject activityinstance)"
		},
		 "bool Physics3DShape::initBox(const cocos2d::Vec3& ext)": {
			"prefix": "bool Physics3DShape::initBox(const cocos2d::Vec3& ext)",
			"body": [
				"Physics3DShape:initBox(${1:cocos2d:Vec3& ext})"
			],
			"description": "bool Physics3DShape::initBox(const cocos2d::Vec3& ext)"
		},
		 "bool Scene::initWithSize(const Size& size)": {
			"prefix": "bool Scene::initWithSize(const Size& size)",
			"body": [
				"Scene:initWithSize(${1:Size& size})"
			],
			"description": "bool Scene::initWithSize(const Size& size)"
		},
		 "Widget* Helper::seekWidgetByTag(Widget* root, int tag)": {
			"prefix": "Widget* Helper::seekWidgetByTag(Widget* root, int tag)",
			"body": [
				"Helper:seekWidgetByTag(${1:Widget* root},${2:int tag})"
			],
			"description": "Widget* Helper::seekWidgetByTag(Widget* root, int tag)"
		},
		 "const Rect& Button::getCapInsetsNormalRenderer()const": {
			"prefix": "const Rect& Button::getCapInsetsNormalRenderer()const",
			"body": [
				" Rect& Button:getCapInsetsNormalRenderer()"
			],
			"description": "const Rect& Button::getCapInsetsNormalRenderer()const"
		},
		 "void MotionStreak::reset()": {
			"prefix": "void MotionStreak::reset()",
			"body": [
				"void MotionStreak:reset()"
			],
			"description": "void MotionStreak::reset()"
		},
		 "Mat4 Bone::getNodeToWorldTransform() const": {
			"prefix": "Mat4 Bone::getNodeToWorldTransform() const",
			"body": [
				"Mat4 Bone:getNodeToWorldTransform() "
			],
			"description": "Mat4 Bone::getNodeToWorldTransform() const"
		},
		 "void RichText::addNewLine()": {
			"prefix": "void RichText::addNewLine()",
			"body": [
				"void RichText:addNewLine()"
			],
			"description": "void RichText::addNewLine()"
		},
		 "void TMXMapInfo::startElement(void *ctx, const char *name, const char **atts)": {
			"prefix": "void TMXMapInfo::startElement(void *ctx, const char *name, const char **atts)",
			"body": [
				"TMXMapInfo:startElement(${1:void *ctx},${2:char *name},${3:char **atts})"
			],
			"description": "void TMXMapInfo::startElement(void *ctx, const char *name, const char **atts)"
		},
		 "Physics3DShape* Physics3DShape::createCylinder(float radius, float height)": {
			"prefix": "Physics3DShape* Physics3DShape::createCylinder(float radius, float height)",
			"body": [
				"Physics3DShape:createCylinder(${1:float radius},${2:float height})"
			],
			"description": "Physics3DShape* Physics3DShape::createCylinder(float radius, float height)"
		},
		 "void __NotificationCenter::unregisterScriptObserver(Ref *target,const std::string& name)": {
			"prefix": "void __NotificationCenter::unregisterScriptObserver(Ref *target,const std::string& name)",
			"body": [
				"__NotificationCenter:unregisterScriptObserver(${1:Ref *target},${2:std:string& name})"
			],
			"description": "void __NotificationCenter::unregisterScriptObserver(Ref *target,const std::string& name)"
		},
		 "void TransitionSlideInR::initScenes()": {
			"prefix": "void TransitionSlideInR::initScenes()",
			"body": [
				"void TransitionSlideInR:initScenes()"
			],
			"description": "void TransitionSlideInR::initScenes()"
		},
		 "void ScrollView::updateScrollBar(const Vec2& outOfBoundary)": {
			"prefix": "void ScrollView::updateScrollBar(const Vec2& outOfBoundary)",
			"body": [
				"ScrollView:updateScrollBar(${1:Vec2& outOfBoundary})"
			],
			"description": "void ScrollView::updateScrollBar(const Vec2& outOfBoundary)"
		},
		 "std::string LabelBMFont::getDescription() const": {
			"prefix": "std::string LabelBMFont::getDescription() const",
			"body": [
				"std:string LabelBMFont:getDescription() "
			],
			"description": "std::string LabelBMFont::getDescription() const"
		},
		 "ParticleRain* ParticleRain::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleRain* ParticleRain::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleRain:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleRain* ParticleRain::createWithTotalParticles(int numberOfParticles)"
		},
		 "Widget* RelativeLayoutManager::getRelativeWidget(Widget* widget)": {
			"prefix": "Widget* RelativeLayoutManager::getRelativeWidget(Widget* widget)",
			"body": [
				"RelativeLayoutManager:getRelativeWidget(${1:Widget* widget})"
			],
			"description": "Widget* RelativeLayoutManager::getRelativeWidget(Widget* widget)"
		},
		 "void Scale9SpriteLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)": {
			"prefix": "void Scale9SpriteLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)",
			"body": [
				"Scale9SpriteLoader:onHandlePropTypeFloat(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:float pFloat},${5:CCBReader * ccbReader})"
			],
			"description": "void Scale9SpriteLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)"
		},
		 "void AbstractCheckButton::copySpecialProperties(Widget *widget)": {
			"prefix": "void AbstractCheckButton::copySpecialProperties(Widget *widget)",
			"body": [
				"AbstractCheckButton:copySpecialProperties(${1:Widget *widget})"
			],
			"description": "void AbstractCheckButton::copySpecialProperties(Widget *widget)"
		},
		 "bool LoadingBar::isScale9Enabled()const": {
			"prefix": "bool LoadingBar::isScale9Enabled()const",
			"body": [
				"bool LoadingBar:isScale9Enabled()"
			],
			"description": "bool LoadingBar::isScale9Enabled()const"
		},
		 "void SIOClientImpl::onOpen(WebSocket* ws)": {
			"prefix": "void SIOClientImpl::onOpen(WebSocket* ws)",
			"body": [
				"SIOClientImpl:onOpen(${1:WebSocket* ws})"
			],
			"description": "void SIOClientImpl::onOpen(WebSocket* ws)"
		},
		 "void EventDispatcher::setEnabled(bool isEnabled)": {
			"prefix": "void EventDispatcher::setEnabled(bool isEnabled)",
			"body": [
				"EventDispatcher:setEnabled(${1:bool isEnabled})"
			],
			"description": "void EventDispatcher::setEnabled(bool isEnabled)"
		},
		 "bool SAXParser::init(const char *encoding)": {
			"prefix": "bool SAXParser::init(const char *encoding)",
			"body": [
				"SAXParser:init(${1:char *encoding})"
			],
			"description": "bool SAXParser::init(const char *encoding)"
		},
		 "void Layer::setAccelerometerEnabled(bool enabled)": {
			"prefix": "void Layer::setAccelerometerEnabled(bool enabled)",
			"body": [
				"Layer:setAccelerometerEnabled(${1:bool enabled})"
			],
			"description": "void Layer::setAccelerometerEnabled(bool enabled)"
		},
		 "void GridBase::setTextureFlipped(bool flipped)": {
			"prefix": "void GridBase::setTextureFlipped(bool flipped)",
			"body": [
				"GridBase:setTextureFlipped(${1:bool flipped})"
			],
			"description": "void GridBase::setTextureFlipped(bool flipped)"
		},
		 "ParticleSystem* ParticleSystem::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleSystem* ParticleSystem::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSystem:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleSystem* ParticleSystem::createWithTotalParticles(int numberOfParticles)"
		},
		 "void TurnOffTiles::turnOffTile(const Vec2& pos)": {
			"prefix": "void TurnOffTiles::turnOffTile(const Vec2& pos)",
			"body": [
				"TurnOffTiles:turnOffTile(${1:Vec2& pos})"
			],
			"description": "void TurnOffTiles::turnOffTile(const Vec2& pos)"
		},
		 "bool Properties::getVec2(const char* name, Vec2* out) const": {
			"prefix": "bool Properties::getVec2(const char* name, Vec2* out) const",
			"body": [
				"Properties:getVec2(${1:char* name},${2:Vec2* out})"
			],
			"description": "bool Properties::getVec2(const char* name, Vec2* out) const"
		},
		 "void MathUtil::transformVec4(const float* m, const float* v, float* dst)": {
			"prefix": "void MathUtil::transformVec4(const float* m, const float* v, float* dst)",
			"body": [
				"MathUtil:transformVec4(${1:float* m},${2:float* v},${3:float* dst})"
			],
			"description": "void MathUtil::transformVec4(const float* m, const float* v, float* dst)"
		},
		 "SkewTo* SkewTo::reverse() const": {
			"prefix": "SkewTo* SkewTo::reverse() const",
			"body": [
				"SkewTo* SkewTo:reverse() "
			],
			"description": "SkewTo* SkewTo::reverse() const"
		},
		 "void NavMesh::update(float dt)": {
			"prefix": "void NavMesh::update(float dt)",
			"body": [
				"NavMesh:update(${1:float dt})"
			],
			"description": "void NavMesh::update(float dt)"
		},
		 "void PhysicsJointRotarySpring::setRestAngle(float restAngle)": {
			"prefix": "void PhysicsJointRotarySpring::setRestAngle(float restAngle)",
			"body": [
				"PhysicsJointRotarySpring:setRestAngle(${1:float restAngle})"
			],
			"description": "void PhysicsJointRotarySpring::setRestAngle(float restAngle)"
		},
		 "Node* CSLoader::loadNode(const rapidjson::Value& json)": {
			"prefix": "Node* CSLoader::loadNode(const rapidjson::Value& json)",
			"body": [
				"CSLoader:loadNode(${1:rapidjson:Value& json})"
			],
			"description": "Node* CSLoader::loadNode(const rapidjson::Value& json)"
		},
		 "void ActionTimeline::setCurrentFrame(int frameIndex)": {
			"prefix": "void ActionTimeline::setCurrentFrame(int frameIndex)",
			"body": [
				"ActionTimeline:setCurrentFrame(${1:int frameIndex})"
			],
			"description": "void ActionTimeline::setCurrentFrame(int frameIndex)"
		},
		 "CCBEaseInstant* CCBEaseInstant::create(ActionInterval *pAction)": {
			"prefix": "CCBEaseInstant* CCBEaseInstant::create(ActionInterval *pAction)",
			"body": [
				"CCBEaseInstant:create(${1:ActionInterval *pAction})"
			],
			"description": "CCBEaseInstant* CCBEaseInstant::create(ActionInterval *pAction)"
		},
		 "void Bone::applyParentTransform(Bone *parent)": {
			"prefix": "void Bone::applyParentTransform(Bone *parent)",
			"body": [
				"Bone:applyParentTransform(${1:Bone *parent})"
			],
			"description": "void Bone::applyParentTransform(Bone *parent)"
		},
		 "bool PhysicsJoint::initJoint()": {
			"prefix": "bool PhysicsJoint::initJoint()",
			"body": [
				"bool PhysicsJoint:initJoint()"
			],
			"description": "bool PhysicsJoint::initJoint()"
		},
		 "void ColliderDetector::addContourData(ContourData *contourData)": {
			"prefix": "void ColliderDetector::addContourData(ContourData *contourData)",
			"body": [
				"ColliderDetector:addContourData(${1:ContourData *contourData})"
			],
			"description": "void ColliderDetector::addContourData(ContourData *contourData)"
		},
		 "void ScaleFrame::onApply(float percent)": {
			"prefix": "void ScaleFrame::onApply(float percent)",
			"body": [
				"ScaleFrame:onApply(${1:float percent})"
			],
			"description": "void ScaleFrame::onApply(float percent)"
		},
		 "void Mat4::transformVector(Vec3* vector) const": {
			"prefix": "void Mat4::transformVector(Vec3* vector) const",
			"body": [
				"Mat4:transformVector(${1:Vec3* vector})"
			],
			"description": "void Mat4::transformVector(Vec3* vector) const"
		},
		 "Pass* Pass::create(Technique* technique)": {
			"prefix": "Pass* Pass::create(Technique* technique)",
			"body": [
				"Pass:create(${1:Technique* technique})"
			],
			"description": "Pass* Pass::create(Technique* technique)"
		},
		 "static RenderState::StencilOperation parseStencilOp(const std::string& value)": {
			"prefix": "static RenderState::StencilOperation parseStencilOp(const std::string& value)",
			"body": [
				"RenderState:StencilOperation parseStencilOp(${1:std:string& value})"
			],
			"description": "static RenderState::StencilOperation parseStencilOp(const std::string& value)"
		},
		 "bool RenderTexture::saveToFile(const std::string& fileName, Image::Format format, bool isRGBA, std::function<void (RenderTexture*, const std::string&)> callback)": {
			"prefix": "bool RenderTexture::saveToFile(const std::string& fileName, Image::Format format, bool isRGBA, std::function<void (RenderTexture*, const std::string&)> callback)",
			"body": [
				"RenderTexture:saveToFile(${1:std:string& fileName},${2:Image:Format format},${3:bool isRGBA},${4:std:function<void (RenderTexture*},${5:std:string&})"
			],
			"description": "bool RenderTexture::saveToFile(const std::string& fileName, Image::Format format, bool isRGBA, std::function<void (RenderTexture*, const std::string&)> callback)"
		},
		 "void GLViewImpl::enableRetina(bool enabled)": {
			"prefix": "void GLViewImpl::enableRetina(bool enabled)",
			"body": [
				"GLViewImpl:enableRetina(${1:bool enabled})"
			],
			"description": "void GLViewImpl::enableRetina(bool enabled)"
		},
		 "void Layout::addChild(Node* child, int zOrder, const std::string &name)": {
			"prefix": "void Layout::addChild(Node* child, int zOrder, const std::string &name)",
			"body": [
				"Layout:addChild(${1:Node* child},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void Layout::addChild(Node* child, int zOrder, const std::string &name)"
		},
		 "cocos2d::Mat4 Physics3DConeTwistConstraint::getAFrame() const": {
			"prefix": "cocos2d::Mat4 Physics3DConeTwistConstraint::getAFrame() const",
			"body": [
				"cocos2d:Mat4 Physics3DConeTwistConstraint:getAFrame() "
			],
			"description": "cocos2d::Mat4 Physics3DConeTwistConstraint::getAFrame() const"
		},
		 "void __Dictionary::acceptVisitor(DataVisitor &visitor)": {
			"prefix": "void __Dictionary::acceptVisitor(DataVisitor &visitor)",
			"body": [
				"__Dictionary:acceptVisitor(${1:DataVisitor &visitor})"
			],
			"description": "void __Dictionary::acceptVisitor(DataVisitor &visitor)"
		},
		 "bool Ripple3D::initWithDuration(float duration, const Size& gridSize, const Vec2& position, float radius, unsigned int waves, float amplitude)": {
			"prefix": "bool Ripple3D::initWithDuration(float duration, const Size& gridSize, const Vec2& position, float radius, unsigned int waves, float amplitude)",
			"body": [
				"Ripple3D:initWithDuration(${1:float duration},${2:Size& gridSize},${3:Vec2& position},${4:float radius},${5:unsigned int waves},${6:float amplitude})"
			],
			"description": "bool Ripple3D::initWithDuration(float duration, const Size& gridSize, const Vec2& position, float radius, unsigned int waves, float amplitude)"
		},
		 "float ActionNode::getUnitTime()": {
			"prefix": "float ActionNode::getUnitTime()",
			"body": [
				"float ActionNode:getUnitTime()"
			],
			"description": "float ActionNode::getUnitTime()"
		},
		 "std::string Texture2D::getDescription() const": {
			"prefix": "std::string Texture2D::getDescription() const",
			"body": [
				"std:string Texture2D:getDescription() "
			],
			"description": "std::string Texture2D::getDescription() const"
		},
		 "void WidgetPropertiesReader0250::setPropsForLayoutFromJsonDictionary(Widget*widget,const rapidjson::Value& options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForLayoutFromJsonDictionary(Widget*widget,const rapidjson::Value& options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForLayoutFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value& options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForLayoutFromJsonDictionary(Widget*widget,const rapidjson::Value& options)"
		},
		 "const std::string& positive_z, const std::string& negative_z)": {
			"prefix": "const std::string& positive_z, const std::string& negative_z)",
			"body": [
				" std:string& positive_z,  std:string& negative_z)"
			],
			"description": "const std::string& positive_z, const std::string& negative_z)"
		},
		 "void Label::setFontDefinition(const FontDefinition& textDefinition)": {
			"prefix": "void Label::setFontDefinition(const FontDefinition& textDefinition)",
			"body": [
				"Label:setFontDefinition(${1:FontDefinition& textDefinition})"
			],
			"description": "void Label::setFontDefinition(const FontDefinition& textDefinition)"
		},
		 "void MenuItemToggle::setEnabled(bool enabled)": {
			"prefix": "void MenuItemToggle::setEnabled(bool enabled)",
			"body": [
				"MenuItemToggle:setEnabled(${1:bool enabled})"
			],
			"description": "void MenuItemToggle::setEnabled(bool enabled)"
		},
		 "unsigned int Bundle3D::parseGLProgramAttribute(const std::string& str)": {
			"prefix": "unsigned int Bundle3D::parseGLProgramAttribute(const std::string& str)",
			"body": [
				"int Bundle3D:parseGLProgramAttribute(${1:std:string& str})"
			],
			"description": "unsigned int Bundle3D::parseGLProgramAttribute(const std::string& str)"
		},
		 "void GLProgramState::resetGLProgram()": {
			"prefix": "void GLProgramState::resetGLProgram()",
			"body": [
				"void GLProgramState:resetGLProgram()"
			],
			"description": "void GLProgramState::resetGLProgram()"
		},
		 "void InnerActionFrame::setEndFrameIndex(int frameIndex)": {
			"prefix": "void InnerActionFrame::setEndFrameIndex(int frameIndex)",
			"body": [
				"InnerActionFrame:setEndFrameIndex(${1:int frameIndex})"
			],
			"description": "void InnerActionFrame::setEndFrameIndex(int frameIndex)"
		},
		 "void __Array::fastRemoveObjectAtIndex(ssize_t index)": {
			"prefix": "void __Array::fastRemoveObjectAtIndex(ssize_t index)",
			"body": [
				"__Array:fastRemoveObjectAtIndex(${1:ssize_t index})"
			],
			"description": "void __Array::fastRemoveObjectAtIndex(ssize_t index)"
		},
		 "__Array* __Array::createWithContentsOfFileThreadSafe(const std::string& fileName)": {
			"prefix": "__Array* __Array::createWithContentsOfFileThreadSafe(const std::string& fileName)",
			"body": [
				"__Array:createWithContentsOfFileThreadSafe(${1:std:string& fileName})"
			],
			"description": "__Array* __Array::createWithContentsOfFileThreadSafe(const std::string& fileName)"
		},
		 "std::string DownloaderImpl::getStrError() const": {
			"prefix": "std::string DownloaderImpl::getStrError() const",
			"body": [
				"std:string DownloaderImpl:getStrError() "
			],
			"description": "std::string DownloaderImpl::getStrError() const"
		},
		 "int Configuration::getMaxSupportPointLightInShader() const": {
			"prefix": "int Configuration::getMaxSupportPointLightInShader() const",
			"body": [
				"int Configuration:getMaxSupportPointLightInShader() "
			],
			"description": "int Configuration::getMaxSupportPointLightInShader() const"
		},
		 "bool TMXTiledMap::getPropertiesForGID(int GID, Value** value)": {
			"prefix": "bool TMXTiledMap::getPropertiesForGID(int GID, Value** value)",
			"body": [
				"TMXTiledMap:getPropertiesForGID(${1:int GID},${2:Value** value})"
			],
			"description": "bool TMXTiledMap::getPropertiesForGID(int GID, Value** value)"
		},
		 "void Sprite3D::createAsync(const std::string& modelPath, const std::function<void(Sprite3D*, void*)>& callback, void* callbackparam)": {
			"prefix": "void Sprite3D::createAsync(const std::string& modelPath, const std::function<void(Sprite3D*, void*)>& callback, void* callbackparam)",
			"body": [
				"Sprite3D:createAsync(${1:std:string& modelPath},${2:std:function<void(Sprite3D*},${3:void*})"
			],
			"description": "void Sprite3D::createAsync(const std::string& modelPath, const std::function<void(Sprite3D*, void*)>& callback, void* callbackparam)"
		},
		 "void MenuItemImage::setDisabledSpriteFrame(SpriteFrame * frame)": {
			"prefix": "void MenuItemImage::setDisabledSpriteFrame(SpriteFrame * frame)",
			"body": [
				"MenuItemImage:setDisabledSpriteFrame(${1:SpriteFrame * frame})"
			],
			"description": "void MenuItemImage::setDisabledSpriteFrame(SpriteFrame * frame)"
		},
		 "spSkeleton* SkeletonRenderer::getSkeleton ()": {
			"prefix": "spSkeleton* SkeletonRenderer::getSkeleton ()",
			"body": [
				"spSkeleton* SkeletonRenderer:getSkeleton ()"
			],
			"description": "spSkeleton* SkeletonRenderer::getSkeleton ()"
		},
		 "void ParticleSystem::setRotationIsDir(bool t)": {
			"prefix": "void ParticleSystem::setRotationIsDir(bool t)",
			"body": [
				"ParticleSystem:setRotationIsDir(${1:bool t})"
			],
			"description": "void ParticleSystem::setRotationIsDir(bool t)"
		},
		 "void ArmatureAnimation::frameEvent(Bone *bone, const std::string& frameEventName, int originFrameIndex, int currentFrameIndex)": {
			"prefix": "void ArmatureAnimation::frameEvent(Bone *bone, const std::string& frameEventName, int originFrameIndex, int currentFrameIndex)",
			"body": [
				"ArmatureAnimation:frameEvent(${1:Bone *bone},${2:std:string& frameEventName},${3:int originFrameIndex},${4:int currentFrameIndex})"
			],
			"description": "void ArmatureAnimation::frameEvent(Bone *bone, const std::string& frameEventName, int originFrameIndex, int currentFrameIndex)"
		},
		 "void Label::updateColor()": {
			"prefix": "void Label::updateColor()",
			"body": [
				"void Label:updateColor()"
			],
			"description": "void Label::updateColor()"
		},
		 "void ScrollView::addEventListenerScrollView(Ref *target, SEL_ScrollViewEvent selector)": {
			"prefix": "void ScrollView::addEventListenerScrollView(Ref *target, SEL_ScrollViewEvent selector)",
			"body": [
				"ScrollView:addEventListenerScrollView(${1:Ref *target},${2:SEL_ScrollViewEvent selector})"
			],
			"description": "void ScrollView::addEventListenerScrollView(Ref *target, SEL_ScrollViewEvent selector)"
		},
		 "void CallFunc::execute()": {
			"prefix": "void CallFunc::execute()",
			"body": [
				"void CallFunc:execute()"
			],
			"description": "void CallFunc::execute()"
		},
		 "Value TMXObjectGroup::getProperty(const std::string& propertyName) const": {
			"prefix": "Value TMXObjectGroup::getProperty(const std::string& propertyName) const",
			"body": [
				"TMXObjectGroup:getProperty(${1:std:string& propertyName})"
			],
			"description": "Value TMXObjectGroup::getProperty(const std::string& propertyName) const"
		},
		 "Ref* __Dictionary::randomObject()": {
			"prefix": "Ref* __Dictionary::randomObject()",
			"body": [
				"Ref* __Dictionary:randomObject()"
			],
			"description": "Ref* __Dictionary::randomObject()"
		},
		 "void AbstractCheckButton::setupBackgroundSelectedTexture()": {
			"prefix": "void AbstractCheckButton::setupBackgroundSelectedTexture()",
			"body": [
				"void AbstractCheckButton:setupBackgroundSelectedTexture()"
			],
			"description": "void AbstractCheckButton::setupBackgroundSelectedTexture()"
		},
		 "void CCBReader::addDocumentCallbackControlEvents(Control::EventType eventType)": {
			"prefix": "void CCBReader::addDocumentCallbackControlEvents(Control::EventType eventType)",
			"body": [
				"CCBReader:addDocumentCallbackControlEvents(${1:Control:EventType eventType})"
			],
			"description": "void CCBReader::addDocumentCallbackControlEvents(Control::EventType eventType)"
		},
		 "V3F_C4B_T2F_Quad* TextureAtlas::getQuads()": {
			"prefix": "V3F_C4B_T2F_Quad* TextureAtlas::getQuads()",
			"body": [
				"V3F_C4B_T2F_Quad* TextureAtlas:getQuads()"
			],
			"description": "V3F_C4B_T2F_Quad* TextureAtlas::getQuads()"
		},
		 "void Director::replaceScene(Scene *scene)": {
			"prefix": "void Director::replaceScene(Scene *scene)",
			"body": [
				"Director:replaceScene(${1:Scene *scene})"
			],
			"description": "void Director::replaceScene(Scene *scene)"
		},
		 "void PhysicsWorld::doRemoveBody(PhysicsBody* body)": {
			"prefix": "void PhysicsWorld::doRemoveBody(PhysicsBody* body)",
			"body": [
				"PhysicsWorld:doRemoveBody(${1:PhysicsBody* body})"
			],
			"description": "void PhysicsWorld::doRemoveBody(PhysicsBody* body)"
		},
		 "void Renderer::setupBuffer()": {
			"prefix": "void Renderer::setupBuffer()",
			"body": [
				"void Renderer:setupBuffer()"
			],
			"description": "void Renderer::setupBuffer()"
		},
		 "Vec2 Director::convertToGL(const Vec2& uiPoint)": {
			"prefix": "Vec2 Director::convertToGL(const Vec2& uiPoint)",
			"body": [
				"Director:convertToGL(${1:Vec2& uiPoint})"
			],
			"description": "Vec2 Director::convertToGL(const Vec2& uiPoint)"
		},
		 "ScriptHandlerEntry* ScriptHandlerEntry::create(int handler)": {
			"prefix": "ScriptHandlerEntry* ScriptHandlerEntry::create(int handler)",
			"body": [
				"ScriptHandlerEntry:create(${1:int handler})"
			],
			"description": "ScriptHandlerEntry* ScriptHandlerEntry::create(int handler)"
		},
		 "void Menu::alignItemsHorizontallyWithPadding(float padding)": {
			"prefix": "void Menu::alignItemsHorizontallyWithPadding(float padding)",
			"body": [
				"Menu:alignItemsHorizontallyWithPadding(${1:float padding})"
			],
			"description": "void Menu::alignItemsHorizontallyWithPadding(float padding)"
		},
		 "AffineTransform Node::getNodeToParentAffineTransform() const": {
			"prefix": "AffineTransform Node::getNodeToParentAffineTransform() const",
			"body": [
				"AffineTransform Node:getNodeToParentAffineTransform() "
			],
			"description": "AffineTransform Node::getNodeToParentAffineTransform() const"
		},
		 "Spawn* Spawn::variadicCreate(FiniteTimeAction *action1, ...)": {
			"prefix": "Spawn* Spawn::variadicCreate(FiniteTimeAction *action1, ...)",
			"body": [
				"Spawn:variadicCreate(${1:FiniteTimeAction *action1},${2:...})"
			],
			"description": "Spawn* Spawn::variadicCreate(FiniteTimeAction *action1, ...)"
		},
		 "int ActionFrame::getFrameIndex()": {
			"prefix": "int ActionFrame::getFrameIndex()",
			"body": [
				"int ActionFrame:getFrameIndex()"
			],
			"description": "int ActionFrame::getFrameIndex()"
		},
		 "bool ScrollViewBar::init()": {
			"prefix": "bool ScrollViewBar::init()",
			"body": [
				"bool ScrollViewBar:init()"
			],
			"description": "bool ScrollViewBar::init()"
		},
		 "const Vec2& Widget::getTouchEndPosition()const": {
			"prefix": "const Vec2& Widget::getTouchEndPosition()const",
			"body": [
				" Vec2& Widget:getTouchEndPosition()"
			],
			"description": "const Vec2& Widget::getTouchEndPosition()const"
		},
		 "bool MciPlayer::IsPlaying()": {
			"prefix": "bool MciPlayer::IsPlaying()",
			"body": [
				"bool MciPlayer:IsPlaying()"
			],
			"description": "bool MciPlayer::IsPlaying()"
		},
		 "AudioPlayer::AudioPlayer(const AudioPlayer& player)": {
			"prefix": "AudioPlayer::AudioPlayer(const AudioPlayer& player)",
			"body": [
				"player})"
			],
			"description": "AudioPlayer::AudioPlayer(const AudioPlayer& player)"
		},
		 "bool FrameBuffer::init(uint8_t fid, unsigned int width, unsigned int height)": {
			"prefix": "bool FrameBuffer::init(uint8_t fid, unsigned int width, unsigned int height)",
			"body": [
				"FrameBuffer:init(${1:uint8_t fid},${2:unsigned int width},${3:unsigned int height})"
			],
			"description": "bool FrameBuffer::init(uint8_t fid, unsigned int width, unsigned int height)"
		},
		 "void RotateTo::update(float time)": {
			"prefix": "void RotateTo::update(float time)",
			"body": [
				"RotateTo:update(${1:float time})"
			],
			"description": "void RotateTo::update(float time)"
		},
		 "void Material::setTarget(cocos2d::Node *target)": {
			"prefix": "void Material::setTarget(cocos2d::Node *target)",
			"body": [
				"Material:setTarget(${1:cocos2d:Node *target})"
			],
			"description": "void Material::setTarget(cocos2d::Node *target)"
		},
		 "int TextField::getMaxLength()const": {
			"prefix": "int TextField::getMaxLength()const",
			"body": [
				"int TextField:getMaxLength()"
			],
			"description": "int TextField::getMaxLength()const"
		},
		 "void NodeLoader::parseProperties(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::parseProperties(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parseProperties(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::parseProperties(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "FrameData *MovementBoneData::getFrameData(int index)": {
			"prefix": "FrameData *MovementBoneData::getFrameData(int index)",
			"body": [
				"*MovementBoneData:getFrameData(${1:int index})"
			],
			"description": "FrameData *MovementBoneData::getFrameData(int index)"
		},
		 "void PrimitiveCommand::execute() const": {
			"prefix": "void PrimitiveCommand::execute() const",
			"body": [
				"void PrimitiveCommand:execute() "
			],
			"description": "void PrimitiveCommand::execute() const"
		},
		 "void HttpClient::setTimeoutForRead(int value)": {
			"prefix": "void HttpClient::setTimeoutForRead(int value)",
			"body": [
				"HttpClient:setTimeoutForRead(${1:int value})"
			],
			"description": "void HttpClient::setTimeoutForRead(int value)"
		},
		 "bool BillBoard::calculateBillbaordTransform()": {
			"prefix": "bool BillBoard::calculateBillbaordTransform()",
			"body": [
				"bool BillBoard:calculateBillbaordTransform()"
			],
			"description": "bool BillBoard::calculateBillbaordTransform()"
		},
		 "void EditBoxImplAndroid::nativeOpenKeyboard()": {
			"prefix": "void EditBoxImplAndroid::nativeOpenKeyboard()",
			"body": [
				"void EditBoxImplAndroid:nativeOpenKeyboard()"
			],
			"description": "void EditBoxImplAndroid::nativeOpenKeyboard()"
		},
		 "void Grid3D::reuse(void)": {
			"prefix": "void Grid3D::reuse(void)",
			"body": [
				"Grid3D:reuse(${1:void})"
			],
			"description": "void Grid3D::reuse(void)"
		},
		 "void ScrollView::jumpToBottom()": {
			"prefix": "void ScrollView::jumpToBottom()",
			"body": [
				"void ScrollView:jumpToBottom()"
			],
			"description": "void ScrollView::jumpToBottom()"
		},
		 "bool __Set::containsObject(Ref *pObject)": {
			"prefix": "bool __Set::containsObject(Ref *pObject)",
			"body": [
				"__Set:containsObject(${1:Ref *pObject})"
			],
			"description": "bool __Set::containsObject(Ref *pObject)"
		},
		 "void Mat4::createTranslation(float xTranslation, float yTranslation, float zTranslation, Mat4* dst)": {
			"prefix": "void Mat4::createTranslation(float xTranslation, float yTranslation, float zTranslation, Mat4* dst)",
			"body": [
				"Mat4:createTranslation(${1:float xTranslation},${2:float yTranslation},${3:float zTranslation},${4:Mat4* dst})"
			],
			"description": "void Mat4::createTranslation(float xTranslation, float yTranslation, float zTranslation, Mat4* dst)"
		},
		 "const flatbuffers::Table *nodeOptions)": {
			"prefix": "const flatbuffers::Table *nodeOptions)",
			"body": [
				" flatbuffers:Table *nodeOptions)"
			],
			"description": "const flatbuffers::Table *nodeOptions)"
		},
		 "SkeletonRenderer* SkeletonRenderer::createWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)": {
			"prefix": "SkeletonRenderer* SkeletonRenderer::createWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)",
			"body": [
				"SkeletonRenderer:createWithFile (${1:std:string& skeletonDataFile},${2:std:string& atlasFile},${3:float scale})"
			],
			"description": "SkeletonRenderer* SkeletonRenderer::createWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)"
		},
		 "Rect Armature::getBoundingBox() const": {
			"prefix": "Rect Armature::getBoundingBox() const",
			"body": [
				"Rect Armature:getBoundingBox() "
			],
			"description": "Rect Armature::getBoundingBox() const"
		},
		 "void DisplayFactory::updateArmatureDisplay(Bone *bone, Node *display, float dt)": {
			"prefix": "void DisplayFactory::updateArmatureDisplay(Bone *bone, Node *display, float dt)",
			"body": [
				"DisplayFactory:updateArmatureDisplay(${1:Bone *bone},${2:Node *display},${3:float dt})"
			],
			"description": "void DisplayFactory::updateArmatureDisplay(Bone *bone, Node *display, float dt)"
		},
		 "b2Body *Armature::getBody() const": {
			"prefix": "b2Body *Armature::getBody() const",
			"body": [
				"b2Body *Armature:getBody() "
			],
			"description": "b2Body *Armature::getBody() const"
		},
		 "void ActionFloat::startWithTarget(Node *target)": {
			"prefix": "void ActionFloat::startWithTarget(Node *target)",
			"body": [
				"ActionFloat:startWithTarget(${1:Node *target})"
			],
			"description": "void ActionFloat::startWithTarget(Node *target)"
		},
		 "void Text::enableOutline(const Color4B& outlineColor,int outlineSize)": {
			"prefix": "void Text::enableOutline(const Color4B& outlineColor,int outlineSize)",
			"body": [
				"Text:enableOutline(${1:Color4B& outlineColor},${2:int outlineSize})"
			],
			"description": "void Text::enableOutline(const Color4B& outlineColor,int outlineSize)"
		},
		 "DisplayType Bone::getDisplayRenderNodeType()": {
			"prefix": "DisplayType Bone::getDisplayRenderNodeType()",
			"body": [
				"DisplayType Bone:getDisplayRenderNodeType()"
			],
			"description": "DisplayType Bone::getDisplayRenderNodeType()"
		},
		 "cocos2d::Mat4 Physics3DHingeConstraint::getFrameOffsetA() const": {
			"prefix": "cocos2d::Mat4 Physics3DHingeConstraint::getFrameOffsetA() const",
			"body": [
				"cocos2d:Mat4 Physics3DHingeConstraint:getFrameOffsetA() "
			],
			"description": "cocos2d::Mat4 Physics3DHingeConstraint::getFrameOffsetA() const"
		},
		 "void DrawNode::ensureCapacity(int count)": {
			"prefix": "void DrawNode::ensureCapacity(int count)",
			"body": [
				"DrawNode:ensureCapacity(${1:int count})"
			],
			"description": "void DrawNode::ensureCapacity(int count)"
		},
		 "bool TextFieldTTF::canDetachWithIME()": {
			"prefix": "bool TextFieldTTF::canDetachWithIME()",
			"body": [
				"bool TextFieldTTF:canDetachWithIME()"
			],
			"description": "bool TextFieldTTF::canDetachWithIME()"
		},
		 "void Sprite3D::setMaterial(Material *material)": {
			"prefix": "void Sprite3D::setMaterial(Material *material)",
			"body": [
				"Sprite3D:setMaterial(${1:Material *material})"
			],
			"description": "void Sprite3D::setMaterial(Material *material)"
		},
		 "void __Set::acceptVisitor(DataVisitor &visitor)": {
			"prefix": "void __Set::acceptVisitor(DataVisitor &visitor)",
			"body": [
				"__Set:acceptVisitor(${1:DataVisitor &visitor})"
			],
			"description": "void __Set::acceptVisitor(DataVisitor &visitor)"
		},
		 "void SplitRows::startWithTarget(Node *target)": {
			"prefix": "void SplitRows::startWithTarget(Node *target)",
			"body": [
				"SplitRows:startWithTarget(${1:Node *target})"
			],
			"description": "void SplitRows::startWithTarget(Node *target)"
		},
		 "Sprite* Sprite::createWithSpriteFrame(SpriteFrame *spriteFrame)": {
			"prefix": "Sprite* Sprite::createWithSpriteFrame(SpriteFrame *spriteFrame)",
			"body": [
				"Sprite:createWithSpriteFrame(${1:SpriteFrame *spriteFrame})"
			],
			"description": "Sprite* Sprite::createWithSpriteFrame(SpriteFrame *spriteFrame)"
		},
		 "void Skeleton3D::addBone(Bone3D* bone)": {
			"prefix": "void Skeleton3D::addBone(Bone3D* bone)",
			"body": [
				"Skeleton3D:addBone(${1:Bone3D* bone})"
			],
			"description": "void Skeleton3D::addBone(Bone3D* bone)"
		},
		 "bool PhysicsShape::containsPoint(const Vec2& point) const": {
			"prefix": "bool PhysicsShape::containsPoint(const Vec2& point) const",
			"body": [
				"PhysicsShape:containsPoint(${1:Vec2& point})"
			],
			"description": "bool PhysicsShape::containsPoint(const Vec2& point) const"
		},
		 "void Properties::setDirectoryPath(const std::string& path)": {
			"prefix": "void Properties::setDirectoryPath(const std::string& path)",
			"body": [
				"Properties:setDirectoryPath(${1:std:string& path})"
			],
			"description": "void Properties::setDirectoryPath(const std::string& path)"
		},
		 "void PageView::setUsingCustomScrollThreshold(bool flag)": {
			"prefix": "void PageView::setUsingCustomScrollThreshold(bool flag)",
			"body": [
				"PageView:setUsingCustomScrollThreshold(${1:bool flag})"
			],
			"description": "void PageView::setUsingCustomScrollThreshold(bool flag)"
		},
		 "std::string FileUtils::getFileExtension(const std::string& filePath) const": {
			"prefix": "std::string FileUtils::getFileExtension(const std::string& filePath) const",
			"body": [
				"FileUtils:getFileExtension(${1:std:string& filePath})"
			],
			"description": "std::string FileUtils::getFileExtension(const std::string& filePath) const"
		},
		 "const std::string& LabelBMFont::getFntFile() const": {
			"prefix": "const std::string& LabelBMFont::getFntFile() const",
			"body": [
				" std:string& LabelBMFont:getFntFile() "
			],
			"description": "const std::string& LabelBMFont::getFntFile() const"
		},
		 "Mat4::Mat4(const Mat4& copy)": {
			"prefix": "Mat4::Mat4(const Mat4& copy)",
			"body": [
				"copy})"
			],
			"description": "Mat4::Mat4(const Mat4& copy)"
		},
		 "void EaseBezierAction::setBezierParamer( float p0, float p1, float p2, float p3)": {
			"prefix": "void EaseBezierAction::setBezierParamer( float p0, float p1, float p2, float p3)",
			"body": [
				"EaseBezierAction:setBezierParamer(${1:float p0},${2:float p1},${3:float p2},${4:float p3})"
			],
			"description": "void EaseBezierAction::setBezierParamer( float p0, float p1, float p2, float p3)"
		},
		 "bool ZipFile::setFilter(const std::string &filter)": {
			"prefix": "bool ZipFile::setFilter(const std::string &filter)",
			"body": [
				"ZipFile:setFilter(${1:std:string &filter})"
			],
			"description": "bool ZipFile::setFilter(const std::string &filter)"
		},
		 "void __CCCallFuncO::setObject(Ref* obj)": {
			"prefix": "void __CCCallFuncO::setObject(Ref* obj)",
			"body": [
				"__CCCallFuncO:setObject(${1:Ref* obj})"
			],
			"description": "void __CCCallFuncO::setObject(Ref* obj)"
		},
		 "void ProgressTo::startWithTarget(Node *target)": {
			"prefix": "void ProgressTo::startWithTarget(Node *target)",
			"body": [
				"ProgressTo:startWithTarget(${1:Node *target})"
			],
			"description": "void ProgressTo::startWithTarget(Node *target)"
		},
		 "void TextureAtlas::fillWithEmptyQuadsFromIndex(ssize_t index, ssize_t amount)": {
			"prefix": "void TextureAtlas::fillWithEmptyQuadsFromIndex(ssize_t index, ssize_t amount)",
			"body": [
				"TextureAtlas:fillWithEmptyQuadsFromIndex(${1:ssize_t index},${2:ssize_t amount})"
			],
			"description": "void TextureAtlas::fillWithEmptyQuadsFromIndex(ssize_t index, ssize_t amount)"
		},
		 "void Physics3DDebugDrawer::setDebugMode( int debugMode )": {
			"prefix": "void Physics3DDebugDrawer::setDebugMode( int debugMode )",
			"body": [
				"Physics3DDebugDrawer:setDebugMode(${1:int debugMode})"
			],
			"description": "void Physics3DDebugDrawer::setDebugMode( int debugMode )"
		},
		 "void Label::updateContent()": {
			"prefix": "void Label::updateContent()",
			"body": [
				"void Label:updateContent()"
			],
			"description": "void Label::updateContent()"
		},
		 "cocos2d::Node* SceneReader::createObject(CocoLoader *cocoLoader, stExpCocoNode *cocoNode, cocos2d::Node* parent, AttachComponentType attachComponent)": {
			"prefix": "cocos2d::Node* SceneReader::createObject(CocoLoader *cocoLoader, stExpCocoNode *cocoNode, cocos2d::Node* parent, AttachComponentType attachComponent)",
			"body": [
				"SceneReader:createObject(${1:CocoLoader *cocoLoader},${2:stExpCocoNode *cocoNode},${3:cocos2d:Node* parent},${4:AttachComponentType attachComponent})"
			],
			"description": "cocos2d::Node* SceneReader::createObject(CocoLoader *cocoLoader, stExpCocoNode *cocoNode, cocos2d::Node* parent, AttachComponentType attachComponent)"
		},
		 "void AndroidJavaEngine::pauseEffect(unsigned int soundID)": {
			"prefix": "void AndroidJavaEngine::pauseEffect(unsigned int soundID)",
			"body": [
				"AndroidJavaEngine:pauseEffect(${1:unsigned int soundID})"
			],
			"description": "void AndroidJavaEngine::pauseEffect(unsigned int soundID)"
		},
		 "std::string CSLoader::getExtentionName(const std::string& name)": {
			"prefix": "std::string CSLoader::getExtentionName(const std::string& name)",
			"body": [
				"CSLoader:getExtentionName(${1:std:string& name})"
			],
			"description": "std::string CSLoader::getExtentionName(const std::string& name)"
		},
		 "const Vector<Node*>& Layout::getLayoutElements()const": {
			"prefix": "const Vector<Node*>& Layout::getLayoutElements()const",
			"body": [
				" Vector<Node*>& Layout:getLayoutElements()"
			],
			"description": "const Vector<Node*>& Layout::getLayoutElements()const"
		},
		 "void WidgetPropertiesReader0250::setColorPropsForWidgetFromJsonDictionary(Widget *widget, const rapidjson::Value&options)": {
			"prefix": "void WidgetPropertiesReader0250::setColorPropsForWidgetFromJsonDictionary(Widget *widget, const rapidjson::Value&options)",
			"body": [
				"WidgetPropertiesReader0250:setColorPropsForWidgetFromJsonDictionary(${1:Widget *widget},${2:rapidjson:Value&options})"
			],
			"description": "void WidgetPropertiesReader0250::setColorPropsForWidgetFromJsonDictionary(Widget *widget, const rapidjson::Value&options)"
		},
		 "bool Repeat::initWithAction(FiniteTimeAction *action, unsigned int times)": {
			"prefix": "bool Repeat::initWithAction(FiniteTimeAction *action, unsigned int times)",
			"body": [
				"Repeat:initWithAction(${1:FiniteTimeAction *action},${2:unsigned int times})"
			],
			"description": "bool Repeat::initWithAction(FiniteTimeAction *action, unsigned int times)"
		},
		 "void TriggerObj::done()": {
			"prefix": "void TriggerObj::done()",
			"body": [
				"void TriggerObj:done()"
			],
			"description": "void TriggerObj::done()"
		},
		 "int DownloaderImpl::getHeader(const std::string& url, HeaderInfo* headerInfo)": {
			"prefix": "int DownloaderImpl::getHeader(const std::string& url, HeaderInfo* headerInfo)",
			"body": [
				"DownloaderImpl:getHeader(${1:std:string& url},${2:HeaderInfo* headerInfo})"
			],
			"description": "int DownloaderImpl::getHeader(const std::string& url, HeaderInfo* headerInfo)"
		},
		 "void RichText::pushBackElement(RichElement *element)": {
			"prefix": "void RichText::pushBackElement(RichElement *element)",
			"body": [
				"RichText:pushBackElement(${1:RichElement *element})"
			],
			"description": "void RichText::pushBackElement(RichElement *element)"
		},
		 "bool Image::hasAlpha()": {
			"prefix": "bool Image::hasAlpha()",
			"body": [
				"bool Image:hasAlpha()"
			],
			"description": "bool Image::hasAlpha()"
		},
		 "float AbstractCheckButton::getZoomScale()const": {
			"prefix": "float AbstractCheckButton::getZoomScale()const",
			"body": [
				"float AbstractCheckButton:getZoomScale()"
			],
			"description": "float AbstractCheckButton::getZoomScale()const"
		},
		 "void UICCTextField::openIME()": {
			"prefix": "void UICCTextField::openIME()",
			"body": [
				"void UICCTextField:openIME()"
			],
			"description": "void UICCTextField::openIME()"
		},
		 "void Bone::setArmature(Armature *armature)": {
			"prefix": "void Bone::setArmature(Armature *armature)",
			"body": [
				"Bone:setArmature(${1:Armature *armature})"
			],
			"description": "void Bone::setArmature(Armature *armature)"
		},
		 "cocos2d::Vec3 Physics3DPointToPointConstraint::getPivotPointInB() const": {
			"prefix": "cocos2d::Vec3 Physics3DPointToPointConstraint::getPivotPointInB() const",
			"body": [
				"cocos2d:Vec3 Physics3DPointToPointConstraint:getPivotPointInB() "
			],
			"description": "cocos2d::Vec3 Physics3DPointToPointConstraint::getPivotPointInB() const"
		},
		 "void AndroidJavaEngine::resumeBackgroundMusic()": {
			"prefix": "void AndroidJavaEngine::resumeBackgroundMusic()",
			"body": [
				"void AndroidJavaEngine:resumeBackgroundMusic()"
			],
			"description": "void AndroidJavaEngine::resumeBackgroundMusic()"
		},
		 "void UICCTextField::setInsertText(bool insert)": {
			"prefix": "void UICCTextField::setInsertText(bool insert)",
			"body": [
				"UICCTextField:setInsertText(${1:bool insert})"
			],
			"description": "void UICCTextField::setInsertText(bool insert)"
		},
		 "cocos2d::Quaternion convertbtQuatToQuat( const btQuaternion &btQuat )": {
			"prefix": "cocos2d::Quaternion convertbtQuatToQuat( const btQuaternion &btQuat )",
			"body": [
				"convertbtQuatToQuat(${1:btQuaternion &btQuat})"
			],
			"description": "cocos2d::Quaternion convertbtQuatToQuat( const btQuaternion &btQuat )"
		},
		 "void NodeLoader::onHandlePropTypeBlockControl(Node * pNode, Node * pParent, const char* pPropertyName, BlockControlData * pBlockControlData, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeBlockControl(Node * pNode, Node * pParent, const char* pPropertyName, BlockControlData * pBlockControlData, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeBlockControl(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:BlockControlData * pBlockControlData},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeBlockControl(Node * pNode, Node * pParent, const char* pPropertyName, BlockControlData * pBlockControlData, CCBReader * ccbReader)"
		},
		 "void TextureCache::loadImage()": {
			"prefix": "void TextureCache::loadImage()",
			"body": [
				"void TextureCache:loadImage()"
			],
			"description": "void TextureCache::loadImage()"
		},
		 "void DrawNode::drawSolidRect(const Vec2 &origin, const Vec2 &destination, const Color4F &color)": {
			"prefix": "void DrawNode::drawSolidRect(const Vec2 &origin, const Vec2 &destination, const Color4F &color)",
			"body": [
				"DrawNode:drawSolidRect(${1:Vec2 &origin},${2:Vec2 &destination},${3:Color4F &color})"
			],
			"description": "void DrawNode::drawSolidRect(const Vec2 &origin, const Vec2 &destination, const Color4F &color)"
		},
		 "Offset<TimeLine> FlatBuffersSerialize::createTimeLine(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<TimeLine> FlatBuffersSerialize::createTimeLine(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createTimeLine(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<TimeLine> FlatBuffersSerialize::createTimeLine(const tinyxml2::XMLElement *objectData)"
		},
		 "bool MenuItemImage::initWithNormalImage(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, const ccMenuCallback& callback)": {
			"prefix": "bool MenuItemImage::initWithNormalImage(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, const ccMenuCallback& callback)",
			"body": [
				"MenuItemImage:initWithNormalImage(${1:std:string& normalImage},${2:std:string& selectedImage},${3:std:string& disabledImage},${4:ccMenuCallback& callback})"
			],
			"description": "bool MenuItemImage::initWithNormalImage(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, const ccMenuCallback& callback)"
		},
		 "void BoneNode::addToSkinList(SkinNode* skin)": {
			"prefix": "void BoneNode::addToSkinList(SkinNode* skin)",
			"body": [
				"BoneNode:addToSkinList(${1:SkinNode* skin})"
			],
			"description": "void BoneNode::addToSkinList(SkinNode* skin)"
		},
		 "bool Armature::init(const std::string& name)": {
			"prefix": "bool Armature::init(const std::string& name)",
			"body": [
				"Armature:init(${1:std:string& name})"
			],
			"description": "bool Armature::init(const std::string& name)"
		},
		 "void Label::removeChild(Node* child, bool cleanup /* = true */)": {
			"prefix": "void Label::removeChild(Node* child, bool cleanup /* = true */)",
			"body": [
				"Label:removeChild(${1:Node* child},${2:bool cleanup /* = true */})"
			],
			"description": "void Label::removeChild(Node* child, bool cleanup /* = true */)"
		},
		 "bool ParticleSystem::initWithDictionary(ValueMap& dictionary)": {
			"prefix": "bool ParticleSystem::initWithDictionary(ValueMap& dictionary)",
			"body": [
				"ParticleSystem:initWithDictionary(${1:ValueMap& dictionary})"
			],
			"description": "bool ParticleSystem::initWithDictionary(ValueMap& dictionary)"
		},
		 "void Armature::onExit()": {
			"prefix": "void Armature::onExit()",
			"body": [
				"void Armature:onExit()"
			],
			"description": "void Armature::onExit()"
		},
		 "RadioButton* RadioButton::create()": {
			"prefix": "RadioButton* RadioButton::create()",
			"body": [
				"RadioButton* RadioButton:create()"
			],
			"description": "RadioButton* RadioButton::create()"
		},
		 "bool Animate3D::init(Animation3D* animation, float fromTime, float duration)": {
			"prefix": "bool Animate3D::init(Animation3D* animation, float fromTime, float duration)",
			"body": [
				"Animate3D:init(${1:Animation3D* animation},${2:float fromTime},${3:float duration})"
			],
			"description": "bool Animate3D::init(Animation3D* animation, float fromTime, float duration)"
		},
		 "void PrimitiveCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, Primitive* primitive,const Mat4& mv)": {
			"prefix": "void PrimitiveCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, Primitive* primitive,const Mat4& mv)",
			"body": [
				"PrimitiveCommand:init(${1:float globalOrder},${2:GLuint textureID},${3:GLProgramState* glProgramState},${4:BlendFunc blendType},${5:Primitive* primitive},${6:Mat4& mv})"
			],
			"description": "void PrimitiveCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, Primitive* primitive,const Mat4& mv)"
		},
		 "float PhysicsJointRatchet::getPhase() const": {
			"prefix": "float PhysicsJointRatchet::getPhase() const",
			"body": [
				"float PhysicsJointRatchet:getPhase() "
			],
			"description": "float PhysicsJointRatchet::getPhase() const"
		},
		 "unsigned int ComAudio::playEffect(const char* pszFilePath, bool loop)": {
			"prefix": "unsigned int ComAudio::playEffect(const char* pszFilePath, bool loop)",
			"body": [
				"int ComAudio:playEffect(${1:char* pszFilePath},${2:bool loop})"
			],
			"description": "unsigned int ComAudio::playEffect(const char* pszFilePath, bool loop)"
		},
		 "void Director::drawScene()": {
			"prefix": "void Director::drawScene()",
			"body": [
				"void Director:drawScene()"
			],
			"description": "void Director::drawScene()"
		},
		 "void ArmatureNodeReader::destroyInstance()": {
			"prefix": "void ArmatureNodeReader::destroyInstance()",
			"body": [
				"void ArmatureNodeReader:destroyInstance()"
			],
			"description": "void ArmatureNodeReader::destroyInstance()"
		},
		 "const __String* __Dictionary::valueForKey(intptr_t key)": {
			"prefix": "const __String* __Dictionary::valueForKey(intptr_t key)",
			"body": [
				"__String* __Dictionary:valueForKey(${1:intptr_t key})"
			],
			"description": "const __String* __Dictionary::valueForKey(intptr_t key)"
		},
		 "void GLViewImpl::pollEvents()": {
			"prefix": "void GLViewImpl::pollEvents()",
			"body": [
				"void GLViewImpl:pollEvents()"
			],
			"description": "void GLViewImpl::pollEvents()"
		},
		 "TMXLayer * TMXLayer::create(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)": {
			"prefix": "TMXLayer * TMXLayer::create(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)",
			"body": [
				"* TMXLayer:create(${1:TMXTilesetInfo *tilesetInfo},${2:TMXLayerInfo *layerInfo},${3:TMXMapInfo *mapInfo})"
			],
			"description": "TMXLayer * TMXLayer::create(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)"
		},
		 "Vec2 PhysicsShape::getPolyonCenter(const Vec2* points, int count)": {
			"prefix": "Vec2 PhysicsShape::getPolyonCenter(const Vec2* points, int count)",
			"body": [
				"PhysicsShape:getPolyonCenter(${1:Vec2* points},${2:int count})"
			],
			"description": "Vec2 PhysicsShape::getPolyonCenter(const Vec2* points, int count)"
		},
		 "void NodeLoader::onHandlePropTypeColor4FVar(Node * pNode, Node * pParent, const char* pPropertyName, Color4F * pColor4FVar, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeColor4FVar(Node * pNode, Node * pParent, const char* pPropertyName, Color4F * pColor4FVar, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeColor4FVar(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:Color4F * pColor4FVar},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeColor4FVar(Node * pNode, Node * pParent, const char* pPropertyName, Color4F * pColor4FVar, CCBReader * ccbReader)"
		},
		 "void GLProgramState::setUniformVec3(GLint uniformLocation, const Vec3& value)": {
			"prefix": "void GLProgramState::setUniformVec3(GLint uniformLocation, const Vec3& value)",
			"body": [
				"GLProgramState:setUniformVec3(${1:GLint uniformLocation},${2:Vec3& value})"
			],
			"description": "void GLProgramState::setUniformVec3(GLint uniformLocation, const Vec3& value)"
		},
		 "static RenderState::CullFaceSide parseCullFaceSide(const std::string& value)": {
			"prefix": "static RenderState::CullFaceSide parseCullFaceSide(const std::string& value)",
			"body": [
				"RenderState:CullFaceSide parseCullFaceSide(${1:std:string& value})"
			],
			"description": "static RenderState::CullFaceSide parseCullFaceSide(const std::string& value)"
		},
		 "const std::string& TextAtlas::getString() const": {
			"prefix": "const std::string& TextAtlas::getString() const",
			"body": [
				" std:string& TextAtlas:getString() "
			],
			"description": "const std::string& TextAtlas::getString() const"
		},
		 "float PhysicsContactPostSolve::getRestitution() const": {
			"prefix": "float PhysicsContactPostSolve::getRestitution() const",
			"body": [
				"float PhysicsContactPostSolve:getRestitution() "
			],
			"description": "float PhysicsContactPostSolve::getRestitution() const"
		},
		 "void BoneNode::removeFromBoneList(BoneNode* bone)": {
			"prefix": "void BoneNode::removeFromBoneList(BoneNode* bone)",
			"body": [
				"BoneNode:removeFromBoneList(${1:BoneNode* bone})"
			],
			"description": "void BoneNode::removeFromBoneList(BoneNode* bone)"
		},
		 "void Slider::onPressStateChangedToNormal()": {
			"prefix": "void Slider::onPressStateChangedToNormal()",
			"body": [
				"void Slider:onPressStateChangedToNormal()"
			],
			"description": "void Slider::onPressStateChangedToNormal()"
		},
		 "std::vector<Mesh*> Sprite3D::getMeshArrayByName(const std::string& name) const": {
			"prefix": "std::vector<Mesh*> Sprite3D::getMeshArrayByName(const std::string& name) const",
			"body": [
				"Sprite3D:getMeshArrayByName(${1:std:string& name})"
			],
			"description": "std::vector<Mesh*> Sprite3D::getMeshArrayByName(const std::string& name) const"
		},
		 "LayoutParameter* Widget::getLayoutParameter()const": {
			"prefix": "LayoutParameter* Widget::getLayoutParameter()const",
			"body": [
				"LayoutParameter* Widget:getLayoutParameter()"
			],
			"description": "LayoutParameter* Widget::getLayoutParameter()const"
		},
		 "bool ArmatureDataManager::isAutoLoadSpriteFile()": {
			"prefix": "bool ArmatureDataManager::isAutoLoadSpriteFile()",
			"body": [
				"bool ArmatureDataManager:isAutoLoadSpriteFile()"
			],
			"description": "bool ArmatureDataManager::isAutoLoadSpriteFile()"
		},
		 "void RadioButton::releaseUpEvent()": {
			"prefix": "void RadioButton::releaseUpEvent()",
			"body": [
				"void RadioButton:releaseUpEvent()"
			],
			"description": "void RadioButton::releaseUpEvent()"
		},
		 "float Physics3DSliderConstraint::getRestitutionLimLin() const": {
			"prefix": "float Physics3DSliderConstraint::getRestitutionLimLin() const",
			"body": [
				"float Physics3DSliderConstraint:getRestitutionLimLin() "
			],
			"description": "float Physics3DSliderConstraint::getRestitutionLimLin() const"
		},
		 "void SpriteBatchNode::swap(ssize_t oldIndex, ssize_t newIndex)": {
			"prefix": "void SpriteBatchNode::swap(ssize_t oldIndex, ssize_t newIndex)",
			"body": [
				"SpriteBatchNode:swap(${1:ssize_t oldIndex},${2:ssize_t newIndex})"
			],
			"description": "void SpriteBatchNode::swap(ssize_t oldIndex, ssize_t newIndex)"
		},
		 "void SkeletonAnimation::setTrackStartListener (spTrackEntry* entry, const StartListener& listener)": {
			"prefix": "void SkeletonAnimation::setTrackStartListener (spTrackEntry* entry, const StartListener& listener)",
			"body": [
				"SkeletonAnimation:setTrackStartListener (${1:spTrackEntry* entry},${2:StartListener& listener})"
			],
			"description": "void SkeletonAnimation::setTrackStartListener (spTrackEntry* entry, const StartListener& listener)"
		},
		 "void ProgressTimer::updateColor(void)": {
			"prefix": "void ProgressTimer::updateColor(void)",
			"body": [
				"ProgressTimer:updateColor(${1:void})"
			],
			"description": "void ProgressTimer::updateColor(void)"
		},
		 "Material* Material::createWithFilename(const std::string& filepath)": {
			"prefix": "Material* Material::createWithFilename(const std::string& filepath)",
			"body": [
				"Material:createWithFilename(${1:std:string& filepath})"
			],
			"description": "Material* Material::createWithFilename(const std::string& filepath)"
		},
		 "void EditBoxImplCommon::openKeyboard()": {
			"prefix": "void EditBoxImplCommon::openKeyboard()",
			"body": [
				"void EditBoxImplCommon:openKeyboard()"
			],
			"description": "void EditBoxImplCommon::openKeyboard()"
		},
		 "void Mat4::rotateZ(float angle)": {
			"prefix": "void Mat4::rotateZ(float angle)",
			"body": [
				"Mat4:rotateZ(${1:float angle})"
			],
			"description": "void Mat4::rotateZ(float angle)"
		},
		 "char* Properties::readLine(char* output, int num)": {
			"prefix": "char* Properties::readLine(char* output, int num)",
			"body": [
				"Properties:readLine(${1:char* output},${2:int num})"
			],
			"description": "char* Properties::readLine(char* output, int num)"
		},
		 "void Slider::barRendererScaleChangedWithSize()": {
			"prefix": "void Slider::barRendererScaleChangedWithSize()",
			"body": [
				"void Slider:barRendererScaleChangedWithSize()"
			],
			"description": "void Slider::barRendererScaleChangedWithSize()"
		},
		 "void GLProgramState::setUniformVec4(const std::string& uniformName, const Vec4& value)": {
			"prefix": "void GLProgramState::setUniformVec4(const std::string& uniformName, const Vec4& value)",
			"body": [
				"GLProgramState:setUniformVec4(${1:std:string& uniformName},${2:Vec4& value})"
			],
			"description": "void GLProgramState::setUniformVec4(const std::string& uniformName, const Vec4& value)"
		},
		 "ActionInterval* TransitionSplitCols::easeActionWithAction(ActionInterval * action)": {
			"prefix": "ActionInterval* TransitionSplitCols::easeActionWithAction(ActionInterval * action)",
			"body": [
				"TransitionSplitCols:easeActionWithAction(${1:ActionInterval * action})"
			],
			"description": "ActionInterval* TransitionSplitCols::easeActionWithAction(ActionInterval * action)"
		},
		 "Vec2 Touch::getStartLocationInView() const": {
			"prefix": "Vec2 Touch::getStartLocationInView() const",
			"body": [
				"Vec2 Touch:getStartLocationInView() "
			],
			"description": "Vec2 Touch::getStartLocationInView() const"
		},
		 "Vec3 Physics3DWorld::getGravity() const": {
			"prefix": "Vec3 Physics3DWorld::getGravity() const",
			"body": [
				"Vec3 Physics3DWorld:getGravity() "
			],
			"description": "Vec3 Physics3DWorld::getGravity() const"
		},
		 "void Physics3DWorld::addPhysics3DConstraint(Physics3DConstraint* constraint, bool disableCollisionsBetweenLinkedObjs)": {
			"prefix": "void Physics3DWorld::addPhysics3DConstraint(Physics3DConstraint* constraint, bool disableCollisionsBetweenLinkedObjs)",
			"body": [
				"Physics3DWorld:addPhysics3DConstraint(${1:Physics3DConstraint* raint},${2:bool disableCollisionsBetweenLinkedObjs})"
			],
			"description": "void Physics3DWorld::addPhysics3DConstraint(Physics3DConstraint* constraint, bool disableCollisionsBetweenLinkedObjs)"
		},
		 "void TransitionSplitCols::onEnter()": {
			"prefix": "void TransitionSplitCols::onEnter()",
			"body": [
				"void TransitionSplitCols:onEnter()"
			],
			"description": "void TransitionSplitCols::onEnter()"
		},
		 "void Label::computeAlignmentOffset()": {
			"prefix": "void Label::computeAlignmentOffset()",
			"body": [
				"void Label:computeAlignmentOffset()"
			],
			"description": "void Label::computeAlignmentOffset()"
		},
		 "void onCaptureScreen(const std::function<void(bool, const std::string&)>& afterCaptured, const std::string& filename)": {
			"prefix": "void onCaptureScreen(const std::function<void(bool, const std::string&)>& afterCaptured, const std::string& filename)",
			"body": [
				"onCaptureScreen(${1:std:function<void(bool},${2:std:string&})"
			],
			"description": "void onCaptureScreen(const std::function<void(bool, const std::string&)>& afterCaptured, const std::string& filename)"
		},
		 "void WebViewImpl::setScalesPageToFit(const bool scalesPageToFit)": {
			"prefix": "void WebViewImpl::setScalesPageToFit(const bool scalesPageToFit)",
			"body": [
				"WebViewImpl:setScalesPageToFit(${1:bool scalesPageToFit})"
			],
			"description": "void WebViewImpl::setScalesPageToFit(const bool scalesPageToFit)"
		},
		 "void AudioEngine::stop(int audioID)": {
			"prefix": "void AudioEngine::stop(int audioID)",
			"body": [
				"AudioEngine:stop(${1:int audioID})"
			],
			"description": "void AudioEngine::stop(int audioID)"
		},
		 "void DrawNode::drawSolidPoly(const Vec2 *poli, unsigned int numberOfPoints, const Color4F &color)": {
			"prefix": "void DrawNode::drawSolidPoly(const Vec2 *poli, unsigned int numberOfPoints, const Color4F &color)",
			"body": [
				"DrawNode:drawSolidPoly(${1:Vec2 *poli},${2:unsigned int numberOfPoints},${3:Color4F &color})"
			],
			"description": "void DrawNode::drawSolidPoly(const Vec2 *poli, unsigned int numberOfPoints, const Color4F &color)"
		},
		 "void PhysicsWorld::removeBodyOrDelay(PhysicsBody* body)": {
			"prefix": "void PhysicsWorld::removeBodyOrDelay(PhysicsBody* body)",
			"body": [
				"PhysicsWorld:removeBodyOrDelay(${1:PhysicsBody* body})"
			],
			"description": "void PhysicsWorld::removeBodyOrDelay(PhysicsBody* body)"
		},
		 "void ClippingNode::setCameraMask(unsigned short mask, bool applyChildren)": {
			"prefix": "void ClippingNode::setCameraMask(unsigned short mask, bool applyChildren)",
			"body": [
				"ClippingNode:setCameraMask(${1:unsigned short mask},${2:bool applyChildren})"
			],
			"description": "void ClippingNode::setCameraMask(unsigned short mask, bool applyChildren)"
		},
		 "static void replaceDefines(const std::string& compileTimeDefines, std::string& out)": {
			"prefix": "static void replaceDefines(const std::string& compileTimeDefines, std::string& out)",
			"body": [
				"void replaceDefines(${1:std:string& compileTimeDefines},${2:std:string& out})"
			],
			"description": "static void replaceDefines(const std::string& compileTimeDefines, std::string& out)"
		},
		 "void PhysicsBody::setCategoryBitmask(int bitmask)": {
			"prefix": "void PhysicsBody::setCategoryBitmask(int bitmask)",
			"body": [
				"PhysicsBody:setCategoryBitmask(${1:int bitmask})"
			],
			"description": "void PhysicsBody::setCategoryBitmask(int bitmask)"
		},
		 "Timeline* Timeline::clone()": {
			"prefix": "Timeline* Timeline::clone()",
			"body": [
				"Timeline* Timeline:clone()"
			],
			"description": "Timeline* Timeline::clone()"
		},
		 "void Mesh::draw(Renderer* renderer, float globalZOrder, const Mat4& transform, uint32_t flags, unsigned int lightMask, const Vec4& color, bool forceDepthWrite)": {
			"prefix": "void Mesh::draw(Renderer* renderer, float globalZOrder, const Mat4& transform, uint32_t flags, unsigned int lightMask, const Vec4& color, bool forceDepthWrite)",
			"body": [
				"Mesh:draw(${1:Renderer* renderer},${2:float globalZOrder},${3:Mat4& transform},${4:uint32_t flags},${5:unsigned int lightMask},${6:Vec4& color},${7:bool forceDepthWrite})"
			],
			"description": "void Mesh::draw(Renderer* renderer, float globalZOrder, const Mat4& transform, uint32_t flags, unsigned int lightMask, const Vec4& color, bool forceDepthWrite)"
		},
		 "void Downloader::setConnectionTimeout(int timeout)": {
			"prefix": "void Downloader::setConnectionTimeout(int timeout)",
			"body": [
				"Downloader:setConnectionTimeout(${1:int timeout})"
			],
			"description": "void Downloader::setConnectionTimeout(int timeout)"
		},
		 "CheckBox* CheckBox::create()": {
			"prefix": "CheckBox* CheckBox::create()",
			"body": [
				"CheckBox* CheckBox:create()"
			],
			"description": "CheckBox* CheckBox::create()"
		},
		 "void TurnOffTiles::shuffle(unsigned int *array, unsigned int len)": {
			"prefix": "void TurnOffTiles::shuffle(unsigned int *array, unsigned int len)",
			"body": [
				"TurnOffTiles:shuffle(${1:unsigned int *array},${2:unsigned int len})"
			],
			"description": "void TurnOffTiles::shuffle(unsigned int *array, unsigned int len)"
		},
		 "void ArmatureDataManager::removeArmatureFileInfo(const std::string& configFilePath)": {
			"prefix": "void ArmatureDataManager::removeArmatureFileInfo(const std::string& configFilePath)",
			"body": [
				"ArmatureDataManager:removeArmatureFileInfo(${1:std:string& configFilePath})"
			],
			"description": "void ArmatureDataManager::removeArmatureFileInfo(const std::string& configFilePath)"
		},
		 "void ParticleSystem::setBatchNode(ParticleBatchNode* batchNode)": {
			"prefix": "void ParticleSystem::setBatchNode(ParticleBatchNode* batchNode)",
			"body": [
				"ParticleSystem:setBatchNode(${1:ParticleBatchNode* batchNode})"
			],
			"description": "void ParticleSystem::setBatchNode(ParticleBatchNode* batchNode)"
		},
		 "inline void CSLoader::reconstructNestNode(cocos2d::Node * node)": {
			"prefix": "inline void CSLoader::reconstructNestNode(cocos2d::Node * node)",
			"body": [
				"void CSLoader:reructNestNode(${1:cocos2d:Node * node})"
			],
			"description": "inline void CSLoader::reconstructNestNode(cocos2d::Node * node)"
		},
		 "void RadioButtonGroup::setSelectedButtonWithoutEvent(RadioButton* radioButton)": {
			"prefix": "void RadioButtonGroup::setSelectedButtonWithoutEvent(RadioButton* radioButton)",
			"body": [
				"RadioButtonGroup:setSelectedButtonWithoutEvent(${1:RadioButton* radioButton})"
			],
			"description": "void RadioButtonGroup::setSelectedButtonWithoutEvent(RadioButton* radioButton)"
		},
		 "void Texture2D::convertRGB888ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGB888ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGB888ToRGBA8888(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGB888ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void Bone::removeDisplay(int index)": {
			"prefix": "void Bone::removeDisplay(int index)",
			"body": [
				"Bone:removeDisplay(${1:int index})"
			],
			"description": "void Bone::removeDisplay(int index)"
		},
		 "Animation* Animation::create(void)": {
			"prefix": "Animation* Animation::create(void)",
			"body": [
				"Animation:create(${1:void})"
			],
			"description": "Animation* Animation::create(void)"
		},
		 "int PhysicsShapeEdgeChain::getPointsCount() const": {
			"prefix": "int PhysicsShapeEdgeChain::getPointsCount() const",
			"body": [
				"int PhysicsShapeEdgeChain:getPointsCount() "
			],
			"description": "int PhysicsShapeEdgeChain::getPointsCount() const"
		},
		 "void UniformValue::setCallback(const std::function<void(GLProgram*, Uniform*)> &callback)": {
			"prefix": "void UniformValue::setCallback(const std::function<void(GLProgram*, Uniform*)> &callback)",
			"body": [
				"UniformValue:setCallback(${1:std:function<void(GLProgram*},${2:Uniform*})"
			],
			"description": "void UniformValue::setCallback(const std::function<void(GLProgram*, Uniform*)> &callback)"
		},
		 "void ComRender::onRemove()": {
			"prefix": "void ComRender::onRemove()",
			"body": [
				"void ComRender:onRemove()"
			],
			"description": "void ComRender::onRemove()"
		},
		 "bool LayerMultiplex::initWithArray(const Vector<Layer*>& arrayOfLayers)": {
			"prefix": "bool LayerMultiplex::initWithArray(const Vector<Layer*>& arrayOfLayers)",
			"body": [
				"LayerMultiplex:initWithArray(${1:Vector<Layer*>& arrayOfLayers})"
			],
			"description": "bool LayerMultiplex::initWithArray(const Vector<Layer*>& arrayOfLayers)"
		},
		 "void WidgetPropertiesReader0300::setPropsForAllWidgetFromJsonDictionary(WidgetReaderProtocol *reader, Widget *widget, const rapidjson::Value &options)": {
			"prefix": "void WidgetPropertiesReader0300::setPropsForAllWidgetFromJsonDictionary(WidgetReaderProtocol *reader, Widget *widget, const rapidjson::Value &options)",
			"body": [
				"WidgetPropertiesReader0300:setPropsForAllWidgetFromJsonDictionary(${1:WidgetReaderProtocol *reader},${2:Widget *widget},${3:rapidjson:Value &options})"
			],
			"description": "void WidgetPropertiesReader0300::setPropsForAllWidgetFromJsonDictionary(WidgetReaderProtocol *reader, Widget *widget, const rapidjson::Value &options)"
		},
		 "AudioCache::AudioCache(const AudioCache& cache)": {
			"prefix": "AudioCache::AudioCache(const AudioCache& cache)",
			"body": [
				"cache})"
			],
			"description": "AudioCache::AudioCache(const AudioCache& cache)"
		},
		 "cocos2d::Node* ActionTimelineNode::getRoot()": {
			"prefix": "cocos2d::Node* ActionTimelineNode::getRoot()",
			"body": [
				"cocos2d:Node* ActionTimelineNode:getRoot()"
			],
			"description": "cocos2d::Node* ActionTimelineNode::getRoot()"
		},
		 "void ActionFrame::setEasingType(int easingType)": {
			"prefix": "void ActionFrame::setEasingType(int easingType)",
			"body": [
				"ActionFrame:setEasingType(${1:int easingType})"
			],
			"description": "void ActionFrame::setEasingType(int easingType)"
		},
		 "void Node::setRotation3D(const Vec3& rotation)": {
			"prefix": "void Node::setRotation3D(const Vec3& rotation)",
			"body": [
				"Node:setRotation3D(${1:Vec3& rotation})"
			],
			"description": "void Node::setRotation3D(const Vec3& rotation)"
		},
		 "void ComAudio::onExit()": {
			"prefix": "void ComAudio::onExit()",
			"body": [
				"void ComAudio:onExit()"
			],
			"description": "void ComAudio::onExit()"
		},
		 "RenderTargetDepthStencil* RenderTargetDepthStencil::create(unsigned int width, unsigned int height)": {
			"prefix": "RenderTargetDepthStencil* RenderTargetDepthStencil::create(unsigned int width, unsigned int height)",
			"body": [
				"RenderTargetDepthStencil:create(${1:unsigned int width},${2:unsigned int height})"
			],
			"description": "RenderTargetDepthStencil* RenderTargetDepthStencil::create(unsigned int width, unsigned int height)"
		},
		 "SpriteFrame* SpriteFrame::clone() const": {
			"prefix": "SpriteFrame* SpriteFrame::clone() const",
			"body": [
				"SpriteFrame* SpriteFrame:clone() "
			],
			"description": "SpriteFrame* SpriteFrame::clone() const"
		},
		 "void GridBase::setActive(bool active)": {
			"prefix": "void GridBase::setActive(bool active)",
			"body": [
				"GridBase:setActive(${1:bool active})"
			],
			"description": "void GridBase::setActive(bool active)"
		},
		 "Vec2 EventMouse::getLocation() const": {
			"prefix": "Vec2 EventMouse::getLocation() const",
			"body": [
				"Vec2 EventMouse:getLocation() "
			],
			"description": "Vec2 EventMouse::getLocation() const"
		},
		 "bool PhysicsJointPin::createConstraints()": {
			"prefix": "bool PhysicsJointPin::createConstraints()",
			"body": [
				"bool PhysicsJointPin:createConstraints()"
			],
			"description": "bool PhysicsJointPin::createConstraints()"
		},
		 "void Device::setKeepScreenOn(bool value)": {
			"prefix": "void Device::setKeepScreenOn(bool value)",
			"body": [
				"Device:setKeepScreenOn(${1:bool value})"
			],
			"description": "void Device::setKeepScreenOn(bool value)"
		},
		 "BillBoard::Mode BillBoard::getMode() const": {
			"prefix": "BillBoard::Mode BillBoard::getMode() const",
			"body": [
				"BillBoard:Mode BillBoard:getMode() "
			],
			"description": "BillBoard::Mode BillBoard::getMode() const"
		},
		 "void MeshCommand::genMaterialID(GLuint texID, void* glProgramState, GLuint vertexBuffer, GLuint indexBuffer, BlendFunc blend)": {
			"prefix": "void MeshCommand::genMaterialID(GLuint texID, void* glProgramState, GLuint vertexBuffer, GLuint indexBuffer, BlendFunc blend)",
			"body": [
				"MeshCommand:genMaterialID(${1:GLuint texID},${2:void* glProgramState},${3:GLuint vertexBuffer},${4:GLuint indexBuffer},${5:BlendFunc blend})"
			],
			"description": "void MeshCommand::genMaterialID(GLuint texID, void* glProgramState, GLuint vertexBuffer, GLuint indexBuffer, BlendFunc blend)"
		},
		 "void BoneNode::displaySkin(const std::string &skinName, bool hideOthers)": {
			"prefix": "void BoneNode::displaySkin(const std::string &skinName, bool hideOthers)",
			"body": [
				"BoneNode:displaySkin(${1:std:string &skinName},${2:bool hideOthers})"
			],
			"description": "void BoneNode::displaySkin(const std::string &skinName, bool hideOthers)"
		},
		 "Mat4 Node::getWorldToNodeTransform() const": {
			"prefix": "Mat4 Node::getWorldToNodeTransform() const",
			"body": [
				"Mat4 Node:getWorldToNodeTransform() "
			],
			"description": "Mat4 Node::getWorldToNodeTransform() const"
		},
		 "void EaseCircleActionOut::update(float time)": {
			"prefix": "void EaseCircleActionOut::update(float time)",
			"body": [
				"EaseCircleActionOut:update(${1:float time})"
			],
			"description": "void EaseCircleActionOut::update(float time)"
		},
		 "Size DisplayManager::getContentSize() const": {
			"prefix": "Size DisplayManager::getContentSize() const",
			"body": [
				"Size DisplayManager:getContentSize() "
			],
			"description": "Size DisplayManager::getContentSize() const"
		},
		 "TrianglesCommand::Triangles AutoPolygon::triangulate(const std::vector<Vec2>& points)": {
			"prefix": "TrianglesCommand::Triangles AutoPolygon::triangulate(const std::vector<Vec2>& points)",
			"body": [
				"AutoPolygon:triangulate(${1:std:vector<Vec2>& points})"
			],
			"description": "TrianglesCommand::Triangles AutoPolygon::triangulate(const std::vector<Vec2>& points)"
		},
		 "Vec2 ScrollView::getHowMuchOutOfBoundary(const Vec2& addition) const": {
			"prefix": "Vec2 ScrollView::getHowMuchOutOfBoundary(const Vec2& addition) const",
			"body": [
				"ScrollView:getHowMuchOutOfBoundary(${1:Vec2& addition})"
			],
			"description": "Vec2 ScrollView::getHowMuchOutOfBoundary(const Vec2& addition) const"
		},
		 "Sprite* Sprite::createWithSpriteFrameName(const std::string& spriteFrameName)": {
			"prefix": "Sprite* Sprite::createWithSpriteFrameName(const std::string& spriteFrameName)",
			"body": [
				"Sprite:createWithSpriteFrameName(${1:std:string& spriteFrameName})"
			],
			"description": "Sprite* Sprite::createWithSpriteFrameName(const std::string& spriteFrameName)"
		},
		 "void Scheduler::pauseTarget(void *target)": {
			"prefix": "void Scheduler::pauseTarget(void *target)",
			"body": [
				"Scheduler:pauseTarget(${1:void *target})"
			],
			"description": "void Scheduler::pauseTarget(void *target)"
		},
		 "void TextField::setTextAreaSize(const Size &size)": {
			"prefix": "void TextField::setTextAreaSize(const Size &size)",
			"body": [
				"TextField:setTextAreaSize(${1:Size &size})"
			],
			"description": "void TextField::setTextAreaSize(const Size &size)"
		},
		 "TextVAlignment LabelTTF::getVerticalAlignment() const": {
			"prefix": "TextVAlignment LabelTTF::getVerticalAlignment() const",
			"body": [
				"TextVAlignment LabelTTF:getVerticalAlignment() "
			],
			"description": "TextVAlignment LabelTTF::getVerticalAlignment() const"
		},
		 "void SpriteFrameCacheHelper::retainSpriteFrames(const std::string &plistPath)": {
			"prefix": "void SpriteFrameCacheHelper::retainSpriteFrames(const std::string &plistPath)",
			"body": [
				"SpriteFrameCacheHelper:retainSpriteFrames(${1:std:string &plistPath})"
			],
			"description": "void SpriteFrameCacheHelper::retainSpriteFrames(const std::string &plistPath)"
		},
		 "void Label::enableOutline(const Color4B& outlineColor,int outlineSize /* = -1 */)": {
			"prefix": "void Label::enableOutline(const Color4B& outlineColor,int outlineSize /* = -1 */)",
			"body": [
				"Label:enableOutline(${1:Color4B& outlineColor},${2:int outlineSize /* = -1 */})"
			],
			"description": "void Label::enableOutline(const Color4B& outlineColor,int outlineSize /* = -1 */)"
		},
		 "bool Sprite3DCache::addSprite3DData(const std::string& key, Sprite3DCache::Sprite3DData* spritedata)": {
			"prefix": "bool Sprite3DCache::addSprite3DData(const std::string& key, Sprite3DCache::Sprite3DData* spritedata)",
			"body": [
				"Sprite3DCache:addSprite3DData(${1:std:string& key},${2:Sprite3DCache:Sprite3DData* spritedata})"
			],
			"description": "bool Sprite3DCache::addSprite3DData(const std::string& key, Sprite3DCache::Sprite3DData* spritedata)"
		},
		 "RelativeBox* RelativeBox::create(const cocos2d::Size &size)": {
			"prefix": "RelativeBox* RelativeBox::create(const cocos2d::Size &size)",
			"body": [
				"RelativeBox:create(${1:cocos2d:Size &size})"
			],
			"description": "RelativeBox* RelativeBox::create(const cocos2d::Size &size)"
		},
		 "Widget* Layout::getPreviousFocusedWidget(FocusDirection direction, Widget *current)": {
			"prefix": "Widget* Layout::getPreviousFocusedWidget(FocusDirection direction, Widget *current)",
			"body": [
				"Layout:getPreviousFocusedWidget(${1:FocusDirection direction},${2:Widget *current})"
			],
			"description": "Widget* Layout::getPreviousFocusedWidget(FocusDirection direction, Widget *current)"
		},
		 "SkewTo* SkewTo::clone() const": {
			"prefix": "SkewTo* SkewTo::clone() const",
			"body": [
				"SkewTo* SkewTo:clone() "
			],
			"description": "SkewTo* SkewTo::clone() const"
		},
		 "void RenderCommand::init(float globalZOrder, const cocos2d::Mat4 &transform, uint32_t flags)": {
			"prefix": "void RenderCommand::init(float globalZOrder, const cocos2d::Mat4 &transform, uint32_t flags)",
			"body": [
				"RenderCommand:init(${1:float globalZOrder},${2:cocos2d:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void RenderCommand::init(float globalZOrder, const cocos2d::Mat4 &transform, uint32_t flags)"
		},
		 "void ActionManager::removeActionByTag(int tag, Node *target)": {
			"prefix": "void ActionManager::removeActionByTag(int tag, Node *target)",
			"body": [
				"ActionManager:removeActionByTag(${1:int tag},${2:Node *target})"
			],
			"description": "void ActionManager::removeActionByTag(int tag, Node *target)"
		},
		 "void HttpClient::setTimeoutForConnect(int value)": {
			"prefix": "void HttpClient::setTimeoutForConnect(int value)",
			"body": [
				"HttpClient:setTimeoutForConnect(${1:int value})"
			],
			"description": "void HttpClient::setTimeoutForConnect(int value)"
		},
		 "const std::vector<std::string>& FileUtils::getSearchPaths() const": {
			"prefix": "const std::vector<std::string>& FileUtils::getSearchPaths() const",
			"body": [
				" std:vector<std:string>& FileUtils:getSearchPaths() "
			],
			"description": "const std::vector<std::string>& FileUtils::getSearchPaths() const"
		},
		 "void evaluateJSJNI(const int index, const std::string &js)": {
			"prefix": "void evaluateJSJNI(const int index, const std::string &js)",
			"body": [
				"evaluateJSJNI(${1:int index},${2:std:string &js})"
			],
			"description": "void evaluateJSJNI(const int index, const std::string &js)"
		},
		 "void PhysicsBody::setRotationOffset(float rotation)": {
			"prefix": "void PhysicsBody::setRotationOffset(float rotation)",
			"body": [
				"PhysicsBody:setRotationOffset(${1:float rotation})"
			],
			"description": "void PhysicsBody::setRotationOffset(float rotation)"
		},
		 "void LabelBMFont::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void LabelBMFont::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"LabelBMFont:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void LabelBMFont::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "bool LayerColor::initWithColor(const Color4B& color, GLfloat w, GLfloat h)": {
			"prefix": "bool LayerColor::initWithColor(const Color4B& color, GLfloat w, GLfloat h)",
			"body": [
				"LayerColor:initWithColor(${1:Color4B& color},${2:GLfloat w},${3:GLfloat h})"
			],
			"description": "bool LayerColor::initWithColor(const Color4B& color, GLfloat w, GLfloat h)"
		},
		 "void Physics3DRigidBody::removeConstraint( Physics3DConstraint *constraint )": {
			"prefix": "void Physics3DRigidBody::removeConstraint( Physics3DConstraint *constraint )",
			"body": [
				"Physics3DRigidBody:removeConstraint(${1:Physics3DConstraint *raint})"
			],
			"description": "void Physics3DRigidBody::removeConstraint( Physics3DConstraint *constraint )"
		},
		 "void Terrain::reload()": {
			"prefix": "void Terrain::reload()",
			"body": [
				"void Terrain:reload()"
			],
			"description": "void Terrain::reload()"
		},
		 "bool Vec4::isOne() const": {
			"prefix": "bool Vec4::isOne() const",
			"body": [
				"bool Vec4:isOne() "
			],
			"description": "bool Vec4::isOne() const"
		},
		 "OrbitCamera * OrbitCamera::create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)": {
			"prefix": "OrbitCamera * OrbitCamera::create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)",
			"body": [
				"* OrbitCamera:create(${1:float t},${2:float radius},${3:float deltaRadius},${4:float angleZ},${5:float deltaAngleZ},${6:float angleX},${7:float deltaAngleX})"
			],
			"description": "OrbitCamera * OrbitCamera::create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)"
		},
		 "void ActionScaleFrame::setScaleY(float scaleY)": {
			"prefix": "void ActionScaleFrame::setScaleY(float scaleY)",
			"body": [
				"ActionScaleFrame:setScaleY(${1:float scaleY})"
			],
			"description": "void ActionScaleFrame::setScaleY(float scaleY)"
		},
		 "void EditBoxImplWin::setPosition(const Vec2& pos)": {
			"prefix": "void EditBoxImplWin::setPosition(const Vec2& pos)",
			"body": [
				"EditBoxImplWin:setPosition(${1:Vec2& pos})"
			],
			"description": "void EditBoxImplWin::setPosition(const Vec2& pos)"
		},
		 "Data UserDefault::getDataForKey(const char* pKey, const Data& defaultValue)": {
			"prefix": "Data UserDefault::getDataForKey(const char* pKey, const Data& defaultValue)",
			"body": [
				"UserDefault:getDataForKey(${1:char* pKey},${2:Data& defaultValue})"
			],
			"description": "Data UserDefault::getDataForKey(const char* pKey, const Data& defaultValue)"
		},
		 "std::set<unsigned int>* BMFontConfiguration::parseConfigFile(const std::string& controlFile)": {
			"prefix": "std::set<unsigned int>* BMFontConfiguration::parseConfigFile(const std::string& controlFile)",
			"body": [
				"int>* BMFontConfiguration:parseConfigFile(${1:std:string& controlFile})"
			],
			"description": "std::set<unsigned int>* BMFontConfiguration::parseConfigFile(const std::string& controlFile)"
		},
		 "void Bone3D::setWorldMatDirty(bool dirty)": {
			"prefix": "void Bone3D::setWorldMatDirty(bool dirty)",
			"body": [
				"Bone3D:setWorldMatDirty(${1:bool dirty})"
			],
			"description": "void Bone3D::setWorldMatDirty(bool dirty)"
		},
		 "void TransitionSlideInB::sceneOrder()": {
			"prefix": "void TransitionSlideInB::sceneOrder()",
			"body": [
				"void TransitionSlideInB:sceneOrder()"
			],
			"description": "void TransitionSlideInB::sceneOrder()"
		},
		 "void Texture2D::drawInRect(const Rect& rect)": {
			"prefix": "void Texture2D::drawInRect(const Rect& rect)",
			"body": [
				"Texture2D:drawInRect(${1:Rect& rect})"
			],
			"description": "void Texture2D::drawInRect(const Rect& rect)"
		},
		 "bool ShakyTiles3D::initWithDuration(float duration, const Size& gridSize, int range, bool shakeZ)": {
			"prefix": "bool ShakyTiles3D::initWithDuration(float duration, const Size& gridSize, int range, bool shakeZ)",
			"body": [
				"ShakyTiles3D:initWithDuration(${1:float duration},${2:Size& gridSize},${3:int range},${4:bool shakeZ})"
			],
			"description": "bool ShakyTiles3D::initWithDuration(float duration, const Size& gridSize, int range, bool shakeZ)"
		},
		 "ParticleExplosion* ParticleExplosion::create()": {
			"prefix": "ParticleExplosion* ParticleExplosion::create()",
			"body": [
				"ParticleExplosion* ParticleExplosion:create()"
			],
			"description": "ParticleExplosion* ParticleExplosion::create()"
		},
		 "Component* Node::getComponent(const std::string& name)": {
			"prefix": "Component* Node::getComponent(const std::string& name)",
			"body": [
				"Node:getComponent(${1:std:string& name})"
			],
			"description": "Component* Node::getComponent(const std::string& name)"
		},
		 "const Vec2& SpriteFrame::getOffsetInPixels() const": {
			"prefix": "const Vec2& SpriteFrame::getOffsetInPixels() const",
			"body": [
				" Vec2& SpriteFrame:getOffsetInPixels() "
			],
			"description": "const Vec2& SpriteFrame::getOffsetInPixels() const"
		},
		 "void ComponentContainer::alloc(void)": {
			"prefix": "void ComponentContainer::alloc(void)",
			"body": [
				"ComponentContainer:alloc(${1:void})"
			],
			"description": "void ComponentContainer::alloc(void)"
		},
		 "bool CameraBackgroundDepthBrush::init()": {
			"prefix": "bool CameraBackgroundDepthBrush::init()",
			"body": [
				"bool CameraBackgroundDepthBrush:init()"
			],
			"description": "bool CameraBackgroundDepthBrush::init()"
		},
		 "const Mat4& MeshSkin::getInvBindPose(const Bone3D* bone)": {
			"prefix": "const Mat4& MeshSkin::getInvBindPose(const Bone3D* bone)",
			"body": [
				"Mat4& MeshSkin:getInvBindPose(${1:Bone3D* bone})"
			],
			"description": "const Mat4& MeshSkin::getInvBindPose(const Bone3D* bone)"
		},
		 "void Widget::onPressStateChangedToNormal()": {
			"prefix": "void Widget::onPressStateChangedToNormal()",
			"body": [
				"void Widget:onPressStateChangedToNormal()"
			],
			"description": "void Widget::onPressStateChangedToNormal()"
		},
		 "void TextureAtlas::increaseTotalQuadsWith(ssize_t amount)": {
			"prefix": "void TextureAtlas::increaseTotalQuadsWith(ssize_t amount)",
			"body": [
				"TextureAtlas:increaseTotalQuadsWith(${1:ssize_t amount})"
			],
			"description": "void TextureAtlas::increaseTotalQuadsWith(ssize_t amount)"
		},
		 "Frame* InnerActionFrame::clone()": {
			"prefix": "Frame* InnerActionFrame::clone()",
			"body": [
				"Frame* InnerActionFrame:clone()"
			],
			"description": "Frame* InnerActionFrame::clone()"
		},
		 "void PositionFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void PositionFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"PositionFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void PositionFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void PageView::removeAllPages()": {
			"prefix": "void PageView::removeAllPages()",
			"body": [
				"void PageView:removeAllPages()"
			],
			"description": "void PageView::removeAllPages()"
		},
		 "RichElementImage* RichElementImage::create(int tag, const Color3B &color, GLubyte opacity, const std::string& filePath)": {
			"prefix": "RichElementImage* RichElementImage::create(int tag, const Color3B &color, GLubyte opacity, const std::string& filePath)",
			"body": [
				"RichElementImage:create(${1:int tag},${2:Color3B &color},${3:GLubyte opacity},${4:std:string& filePath})"
			],
			"description": "RichElementImage* RichElementImage::create(int tag, const Color3B &color, GLubyte opacity, const std::string& filePath)"
		},
		 "Rect RectFromString(const std::string& str)": {
			"prefix": "Rect RectFromString(const std::string& str)",
			"body": [
				"RectFromString(${1:std:string& str})"
			],
			"description": "Rect RectFromString(const std::string& str)"
		},
		 "void Physics3DSliderConstraint::setRestitutionDirAng(float restitutionDirAng)": {
			"prefix": "void Physics3DSliderConstraint::setRestitutionDirAng(float restitutionDirAng)",
			"body": [
				"Physics3DSliderConstraint:setRestitutionDirAng(${1:float restitutionDirAng})"
			],
			"description": "void Physics3DSliderConstraint::setRestitutionDirAng(float restitutionDirAng)"
		},
		 "void Button::updateTitleLocation()": {
			"prefix": "void Button::updateTitleLocation()",
			"body": [
				"void Button:updateTitleLocation()"
			],
			"description": "void Button::updateTitleLocation()"
		},
		 "bool TextureAtlas::initWithFile(const std::string& file, ssize_t capacity)": {
			"prefix": "bool TextureAtlas::initWithFile(const std::string& file, ssize_t capacity)",
			"body": [
				"TextureAtlas:initWithFile(${1:std:string& file},${2:ssize_t capacity})"
			],
			"description": "bool TextureAtlas::initWithFile(const std::string& file, ssize_t capacity)"
		},
		 "void IMEDispatcher::dispatchKeyboardWillShow(IMEKeyboardNotificationInfo& info)": {
			"prefix": "void IMEDispatcher::dispatchKeyboardWillShow(IMEKeyboardNotificationInfo& info)",
			"body": [
				"IMEDispatcher:dispatchKeyboardWillShow(${1:IMEKeyboardNotificationInfo& info})"
			],
			"description": "void IMEDispatcher::dispatchKeyboardWillShow(IMEKeyboardNotificationInfo& info)"
		},
		 "void Text::onSizeChanged()": {
			"prefix": "void Text::onSizeChanged()",
			"body": [
				"void Text:onSizeChanged()"
			],
			"description": "void Text::onSizeChanged()"
		},
		 "BezierTo* BezierTo::create(float t, const ccBezierConfig& c)": {
			"prefix": "BezierTo* BezierTo::create(float t, const ccBezierConfig& c)",
			"body": [
				"BezierTo:create(${1:float t},${2:ccBezierConfig& c})"
			],
			"description": "BezierTo* BezierTo::create(float t, const ccBezierConfig& c)"
		},
		 "void Label::setCameraMask(unsigned short mask, bool applyChildren)": {
			"prefix": "void Label::setCameraMask(unsigned short mask, bool applyChildren)",
			"body": [
				"Label:setCameraMask(${1:unsigned short mask},${2:bool applyChildren})"
			],
			"description": "void Label::setCameraMask(unsigned short mask, bool applyChildren)"
		},
		 "void ActionTimeline::addTimeline(Timeline* timeline)": {
			"prefix": "void ActionTimeline::addTimeline(Timeline* timeline)",
			"body": [
				"ActionTimeline:addTimeline(${1:Timeline* timeline})"
			],
			"description": "void ActionTimeline::addTimeline(Timeline* timeline)"
		},
		 "EaseBackInOut* EaseBackInOut::create(ActionInterval* action)": {
			"prefix": "EaseBackInOut* EaseBackInOut::create(ActionInterval* action)",
			"body": [
				"EaseBackInOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseBackInOut* EaseBackInOut::create(ActionInterval* action)"
		},
		 "bool CCBSoundEffect::initWithSoundFile(const std::string &filename, float pitch, float pan, float gain)": {
			"prefix": "bool CCBSoundEffect::initWithSoundFile(const std::string &filename, float pitch, float pan, float gain)",
			"body": [
				"CCBSoundEffect:initWithSoundFile(${1:std:string &filename},${2:float pitch},${3:float pan},${4:float gain})"
			],
			"description": "bool CCBSoundEffect::initWithSoundFile(const std::string &filename, float pitch, float pan, float gain)"
		},
		 "void ComAudio::preloadBackgroundMusic(const char* pszFilePath)": {
			"prefix": "void ComAudio::preloadBackgroundMusic(const char* pszFilePath)",
			"body": [
				"ComAudio:preloadBackgroundMusic(${1:char* pszFilePath})"
			],
			"description": "void ComAudio::preloadBackgroundMusic(const char* pszFilePath)"
		},
		 "void WidgetPropertiesReader0250::setPropsForLabelBMFontFromJsonDictionary(Widget *widget, const rapidjson::Value&options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForLabelBMFontFromJsonDictionary(Widget *widget, const rapidjson::Value&options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForLabelBMFontFromJsonDictionary(${1:Widget *widget},${2:rapidjson:Value&options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForLabelBMFontFromJsonDictionary(Widget *widget, const rapidjson::Value&options)"
		},
		 "void Slider::setPercent(int percent)": {
			"prefix": "void Slider::setPercent(int percent)",
			"body": [
				"Slider:setPercent(${1:int percent})"
			],
			"description": "void Slider::setPercent(int percent)"
		},
		 "Vector<Widget*> RelativeLayoutManager::getAllWidgets(cocos2d::ui::LayoutProtocol *layout)": {
			"prefix": "Vector<Widget*> RelativeLayoutManager::getAllWidgets(cocos2d::ui::LayoutProtocol *layout)",
			"body": [
				"RelativeLayoutManager:getAllWidgets(${1:cocos2d:ui:LayoutProtocol *layout})"
			],
			"description": "Vector<Widget*> RelativeLayoutManager::getAllWidgets(cocos2d::ui::LayoutProtocol *layout)"
		},
		 "void MathUtil::multiplyMatrix(const float* m1, const float* m2, float* dst)": {
			"prefix": "void MathUtil::multiplyMatrix(const float* m1, const float* m2, float* dst)",
			"body": [
				"MathUtil:multiplyMatrix(${1:float* m1},${2:float* m2},${3:float* dst})"
			],
			"description": "void MathUtil::multiplyMatrix(const float* m1, const float* m2, float* dst)"
		},
		 "void TMXLayer::addChild(Node * child, int zOrder, int tag)": {
			"prefix": "void TMXLayer::addChild(Node * child, int zOrder, int tag)",
			"body": [
				"TMXLayer:addChild(${1:Node * child},${2:int zOrder},${3:int tag})"
			],
			"description": "void TMXLayer::addChild(Node * child, int zOrder, int tag)"
		},
		 "TransitionMoveInR* TransitionMoveInR::create(float t, Scene* scene)": {
			"prefix": "TransitionMoveInR* TransitionMoveInR::create(float t, Scene* scene)",
			"body": [
				"TransitionMoveInR:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionMoveInR* TransitionMoveInR::create(float t, Scene* scene)"
		},
		 "std::string PageView::getDescription() const": {
			"prefix": "std::string PageView::getDescription() const",
			"body": [
				"std:string PageView:getDescription() "
			],
			"description": "std::string PageView::getDescription() const"
		},
		 "void Label::onDraw(const Mat4& transform, bool transformUpdated)": {
			"prefix": "void Label::onDraw(const Mat4& transform, bool transformUpdated)",
			"body": [
				"Label:onDraw(${1:Mat4& transform},${2:bool transformUpdated})"
			],
			"description": "void Label::onDraw(const Mat4& transform, bool transformUpdated)"
		},
		 "void ListView::removeAllChildrenWithCleanup(bool cleanup)": {
			"prefix": "void ListView::removeAllChildrenWithCleanup(bool cleanup)",
			"body": [
				"ListView:removeAllChildrenWithCleanup(${1:bool cleanup})"
			],
			"description": "void ListView::removeAllChildrenWithCleanup(bool cleanup)"
		},
		 "void TransformHelp::nodeToMatrix(const BaseData &node, Mat4 &matrix)": {
			"prefix": "void TransformHelp::nodeToMatrix(const BaseData &node, Mat4 &matrix)",
			"body": [
				"TransformHelp:nodeToMatrix(${1:BaseData &node},${2:Mat4 &matrix})"
			],
			"description": "void TransformHelp::nodeToMatrix(const BaseData &node, Mat4 &matrix)"
		},
		 "void OpenALDecoder::installDecoders()": {
			"prefix": "void OpenALDecoder::installDecoders()",
			"body": [
				"void OpenALDecoder:installDecoders()"
			],
			"description": "void OpenALDecoder::installDecoders()"
		},
		 "void Text::labelScaleChangedWithSize()": {
			"prefix": "void Text::labelScaleChangedWithSize()",
			"body": [
				"void Text:labelScaleChangedWithSize()"
			],
			"description": "void Text::labelScaleChangedWithSize()"
		},
		 "void MciPlayer::Open(const char* pFileName, UINT uId)": {
			"prefix": "void MciPlayer::Open(const char* pFileName, UINT uId)",
			"body": [
				"MciPlayer:Open(${1:char* pFileName},${2:UINT uId})"
			],
			"description": "void MciPlayer::Open(const char* pFileName, UINT uId)"
		},
		 "void Menu::alignItemsVerticallyWithPadding(float padding)": {
			"prefix": "void Menu::alignItemsVerticallyWithPadding(float padding)",
			"body": [
				"Menu:alignItemsVerticallyWithPadding(${1:float padding})"
			],
			"description": "void Menu::alignItemsVerticallyWithPadding(float padding)"
		},
		 "void ShuffleTiles::placeTile(const Vec2& pos, Tile *t)": {
			"prefix": "void ShuffleTiles::placeTile(const Vec2& pos, Tile *t)",
			"body": [
				"ShuffleTiles:placeTile(${1:Vec2& pos},${2:Tile *t})"
			],
			"description": "void ShuffleTiles::placeTile(const Vec2& pos, Tile *t)"
		},
		 "void TMXLayer::removeChild(Node* node, bool cleanup)": {
			"prefix": "void TMXLayer::removeChild(Node* node, bool cleanup)",
			"body": [
				"TMXLayer:removeChild(${1:Node* node},${2:bool cleanup})"
			],
			"description": "void TMXLayer::removeChild(Node* node, bool cleanup)"
		},
		 "void Node::updateDisplayedColor(const Color3B& parentColor)": {
			"prefix": "void Node::updateDisplayedColor(const Color3B& parentColor)",
			"body": [
				"Node:updateDisplayedColor(${1:Color3B& parentColor})"
			],
			"description": "void Node::updateDisplayedColor(const Color3B& parentColor)"
		},
		 "std::string ScrollView::getDescription() const": {
			"prefix": "std::string ScrollView::getDescription() const",
			"body": [
				"std:string ScrollView:getDescription() "
			],
			"description": "std::string ScrollView::getDescription() const"
		},
		 "bool TargetedAction::isDone(void) const": {
			"prefix": "bool TargetedAction::isDone(void) const",
			"body": [
				"TargetedAction:isDone(${1:void})"
			],
			"description": "bool TargetedAction::isDone(void) const"
		},
		 "bool Component::isEnabled() const": {
			"prefix": "bool Component::isEnabled() const",
			"body": [
				"bool Component:isEnabled() "
			],
			"description": "bool Component::isEnabled() const"
		},
		 "ssize_t __Array::getIndexOfObject(Ref* object) const": {
			"prefix": "ssize_t __Array::getIndexOfObject(Ref* object) const",
			"body": [
				"__Array:getIndexOfObject(${1:Ref* object})"
			],
			"description": "ssize_t __Array::getIndexOfObject(Ref* object) const"
		},
		 "void RichText::removeElement(RichElement *element)": {
			"prefix": "void RichText::removeElement(RichElement *element)",
			"body": [
				"RichText:removeElement(${1:RichElement *element})"
			],
			"description": "void RichText::removeElement(RichElement *element)"
		},
		 "bool Label::setCharMap(const std::string& plistFile)": {
			"prefix": "bool Label::setCharMap(const std::string& plistFile)",
			"body": [
				"Label:setCharMap(${1:std:string& plistFile})"
			],
			"description": "bool Label::setCharMap(const std::string& plistFile)"
		},
		 "const Vec2& Layout::getBackGroundColorVector()const": {
			"prefix": "const Vec2& Layout::getBackGroundColorVector()const",
			"body": [
				" Vec2& Layout:getBackGroundColorVector()"
			],
			"description": "const Vec2& Layout::getBackGroundColorVector()const"
		},
		 "uint32_t MeshCommand::getMaterialID() const": {
			"prefix": "uint32_t MeshCommand::getMaterialID() const",
			"body": [
				"uint32_t MeshCommand:getMaterialID() "
			],
			"description": "uint32_t MeshCommand::getMaterialID() const"
		},
		 "void Bone::updateColor()": {
			"prefix": "void Bone::updateColor()",
			"body": [
				"void Bone:updateColor()"
			],
			"description": "void Bone::updateColor()"
		},
		 "VolatileTexture* VolatileTextureMgr::findVolotileTexture(Texture2D *tt)": {
			"prefix": "VolatileTexture* VolatileTextureMgr::findVolotileTexture(Texture2D *tt)",
			"body": [
				"VolatileTextureMgr:findVolotileTexture(${1:Texture2D *tt})"
			],
			"description": "VolatileTexture* VolatileTextureMgr::findVolotileTexture(Texture2D *tt)"
		},
		 "RotateBy* RotateBy::clone() const": {
			"prefix": "RotateBy* RotateBy::clone() const",
			"body": [
				"RotateBy* RotateBy:clone() "
			],
			"description": "RotateBy* RotateBy::clone() const"
		},
		 "void Widget::setLayoutComponentEnabled(bool enable)": {
			"prefix": "void Widget::setLayoutComponentEnabled(bool enable)",
			"body": [
				"Widget:setLayoutComponentEnabled(${1:bool enable})"
			],
			"description": "void Widget::setLayoutComponentEnabled(bool enable)"
		},
		 "void SpriteLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)": {
			"prefix": "void SpriteLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)",
			"body": [
				"SpriteLoader:onHandlePropTypeColor3(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Color3B pColor3B},${5:CCBReader * ccbReader})"
			],
			"description": "void SpriteLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)"
		},
		 "EaseCircleActionOut* EaseCircleActionOut::create(ActionInterval* action)": {
			"prefix": "EaseCircleActionOut* EaseCircleActionOut::create(ActionInterval* action)",
			"body": [
				"EaseCircleActionOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseCircleActionOut* EaseCircleActionOut::create(ActionInterval* action)"
		},
		 "void ArmatureDataManager::addArmatureFileInfo(const std::string& imagePath, const std::string& plistPath, const std::string& configFilePath)": {
			"prefix": "void ArmatureDataManager::addArmatureFileInfo(const std::string& imagePath, const std::string& plistPath, const std::string& configFilePath)",
			"body": [
				"ArmatureDataManager:addArmatureFileInfo(${1:std:string& imagePath},${2:std:string& plistPath},${3:std:string& configFilePath})"
			],
			"description": "void ArmatureDataManager::addArmatureFileInfo(const std::string& imagePath, const std::string& plistPath, const std::string& configFilePath)"
		},
		 "bool EventListener::init(Type t, const ListenerID& listenerID, const std::function<void(Event*)>& callback)": {
			"prefix": "bool EventListener::init(Type t, const ListenerID& listenerID, const std::function<void(Event*)>& callback)",
			"body": [
				"EventListener:init(${1:Type t},${2:ListenerID& listenerID},${3:std:function<void(Event*})"
			],
			"description": "bool EventListener::init(Type t, const ListenerID& listenerID, const std::function<void(Event*)>& callback)"
		},
		 "Size Button::getVirtualRendererSize() const": {
			"prefix": "Size Button::getVirtualRendererSize() const",
			"body": [
				"Size Button:getVirtualRendererSize() "
			],
			"description": "Size Button::getVirtualRendererSize() const"
		},
		 "CWin32InputBox::CWin32InputBox(WIN32INPUTBOX_PARAM *param)": {
			"prefix": "CWin32InputBox::CWin32InputBox(WIN32INPUTBOX_PARAM *param)",
			"body": [
				"*param})"
			],
			"description": "CWin32InputBox::CWin32InputBox(WIN32INPUTBOX_PARAM *param)"
		},
		 "bool Camera::initOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)": {
			"prefix": "bool Camera::initOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)",
			"body": [
				"Camera:initOrthographic(${1:float zoomX},${2:float zoomY},${3:float nearPlane},${4:float farPlane})"
			],
			"description": "bool Camera::initOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)"
		},
		 "TransitionZoomFlipAngular* TransitionZoomFlipAngular::create(float t, Scene* s)": {
			"prefix": "TransitionZoomFlipAngular* TransitionZoomFlipAngular::create(float t, Scene* s)",
			"body": [
				"TransitionZoomFlipAngular:create(${1:float t},${2:Scene* s})"
			],
			"description": "TransitionZoomFlipAngular* TransitionZoomFlipAngular::create(float t, Scene* s)"
		},
		 "void Sprite3DCache::destroyInstance()": {
			"prefix": "void Sprite3DCache::destroyInstance()",
			"body": [
				"void Sprite3DCache:destroyInstance()"
			],
			"description": "void Sprite3DCache::destroyInstance()"
		},
		 "void TiledGrid3D::reuse(void)": {
			"prefix": "void TiledGrid3D::reuse(void)",
			"body": [
				"TiledGrid3D:reuse(${1:void})"
			],
			"description": "void TiledGrid3D::reuse(void)"
		},
		 "void PhysicsWorld::updateJoints()": {
			"prefix": "void PhysicsWorld::updateJoints()",
			"body": [
				"void PhysicsWorld:updateJoints()"
			],
			"description": "void PhysicsWorld::updateJoints()"
		},
		 "void PhysicsWorld::queryPoint(PhysicsQueryPointCallbackFunc func, const Vec2& point, void* data)": {
			"prefix": "void PhysicsWorld::queryPoint(PhysicsQueryPointCallbackFunc func, const Vec2& point, void* data)",
			"body": [
				"PhysicsWorld:queryPoint(${1:PhysicsQueryPointCallbackFunc func},${2:Vec2& point},${3:void* data})"
			],
			"description": "void PhysicsWorld::queryPoint(PhysicsQueryPointCallbackFunc func, const Vec2& point, void* data)"
		},
		 "void PrettyPrinter::visit(const __Integer *p)": {
			"prefix": "void PrettyPrinter::visit(const __Integer *p)",
			"body": [
				"PrettyPrinter:visit(${1:__Integer *p})"
			],
			"description": "void PrettyPrinter::visit(const __Integer *p)"
		},
		 "std::string GLProgramCache::getShaderMacrosForLight() const": {
			"prefix": "std::string GLProgramCache::getShaderMacrosForLight() const",
			"body": [
				"std:string GLProgramCache:getShaderMacrosForLight() "
			],
			"description": "std::string GLProgramCache::getShaderMacrosForLight() const"
		},
		 "Text* Text::create(const std::string &textContent, const std::string &fontName, float fontSize)": {
			"prefix": "Text* Text::create(const std::string &textContent, const std::string &fontName, float fontSize)",
			"body": [
				"Text:create(${1:std:string &textContent},${2:std:string &fontName},${3:float fontSize})"
			],
			"description": "Text* Text::create(const std::string &textContent, const std::string &fontName, float fontSize)"
		},
		 "bool Widget::isHighlighted() const": {
			"prefix": "bool Widget::isHighlighted() const",
			"body": [
				"bool Widget:isHighlighted() "
			],
			"description": "bool Widget::isHighlighted() const"
		},
		 "void AudioEngineImpl::setFinishCallback(int audioID, const std::function<void (int, const std::string &)> &callback)": {
			"prefix": "void AudioEngineImpl::setFinishCallback(int audioID, const std::function<void (int, const std::string &)> &callback)",
			"body": [
				"AudioEngineImpl:setFinishCallback(${1:int audioID},${2:std:function<void (int},${3:std:string &})"
			],
			"description": "void AudioEngineImpl::setFinishCallback(int audioID, const std::function<void (int, const std::string &)> &callback)"
		},
		 "ActionTimeline* CSLoader::createTimeline(const std::string &filename)": {
			"prefix": "ActionTimeline* CSLoader::createTimeline(const std::string &filename)",
			"body": [
				"CSLoader:createTimeline(${1:std:string &filename})"
			],
			"description": "ActionTimeline* CSLoader::createTimeline(const std::string &filename)"
		},
		 "void Node::stopActionByTag(int tag)": {
			"prefix": "void Node::stopActionByTag(int tag)",
			"body": [
				"Node:stopActionByTag(${1:int tag})"
			],
			"description": "void Node::stopActionByTag(int tag)"
		},
		 "bool LabelBMFont::isOpacityModifyRGB() const": {
			"prefix": "bool LabelBMFont::isOpacityModifyRGB() const",
			"body": [
				"bool LabelBMFont:isOpacityModifyRGB() "
			],
			"description": "bool LabelBMFont::isOpacityModifyRGB() const"
		},
		 "void HttpClient::networkThreadAlone(HttpRequest* request, HttpResponse* response)": {
			"prefix": "void HttpClient::networkThreadAlone(HttpRequest* request, HttpResponse* response)",
			"body": [
				"HttpClient:networkThreadAlone(${1:HttpRequest* request},${2:HttpResponse* response})"
			],
			"description": "void HttpClient::networkThreadAlone(HttpRequest* request, HttpResponse* response)"
		},
		 "void Physics3DComponent::preSimulate()": {
			"prefix": "void Physics3DComponent::preSimulate()",
			"body": [
				"void Physics3DComponent:preSimulate()"
			],
			"description": "void Physics3DComponent::preSimulate()"
		},
		 "Texture2D::PixelFormat Texture2D::convertAI88ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)": {
			"prefix": "Texture2D::PixelFormat Texture2D::convertAI88ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)",
			"body": [
				"Texture2D:convertAI88ToFormat(${1:unsigned char* data},${2:ssize_t dataLen},${3:PixelFormat format},${4:unsigned char** outData},${5:ssize_t* outDataLen})"
			],
			"description": "Texture2D::PixelFormat Texture2D::convertAI88ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)"
		},
		 "bool Lens3D::initWithDuration(float duration, const Size& gridSize, const Vec2& position, float radius)": {
			"prefix": "bool Lens3D::initWithDuration(float duration, const Size& gridSize, const Vec2& position, float radius)",
			"body": [
				"Lens3D:initWithDuration(${1:float duration},${2:Size& gridSize},${3:Vec2& position},${4:float radius})"
			],
			"description": "bool Lens3D::initWithDuration(float duration, const Size& gridSize, const Vec2& position, float radius)"
		},
		 "bool Skybox::init()": {
			"prefix": "bool Skybox::init()",
			"body": [
				"bool Skybox:init()"
			],
			"description": "bool Skybox::init()"
		},
		 "void editBoxEditingDidChanged(int index, const std::string& text)": {
			"prefix": "void editBoxEditingDidChanged(int index, const std::string& text)",
			"body": [
				"editBoxEditingDidChanged(${1:int index},${2:std:string& text})"
			],
			"description": "void editBoxEditingDidChanged(int index, const std::string& text)"
		},
		 "void Sprite::setRotationSkewY(float fRotationY)": {
			"prefix": "void Sprite::setRotationSkewY(float fRotationY)",
			"body": [
				"Sprite:setRotationSkewY(${1:float fRotationY})"
			],
			"description": "void Sprite::setRotationSkewY(float fRotationY)"
		},
		 "EaseQuinticActionOut* EaseQuinticActionOut::create(ActionInterval* action)": {
			"prefix": "EaseQuinticActionOut* EaseQuinticActionOut::create(ActionInterval* action)",
			"body": [
				"EaseQuinticActionOut:create(${1:ActionInterval* action})"
			],
			"description": "EaseQuinticActionOut* EaseQuinticActionOut::create(ActionInterval* action)"
		},
		 "ssize_t Material::getTechniqueCount() const": {
			"prefix": "ssize_t Material::getTechniqueCount() const",
			"body": [
				"ssize_t Material:getTechniqueCount() "
			],
			"description": "ssize_t Material::getTechniqueCount() const"
		},
		 "void Bone::setBoneData(BoneData *boneData)": {
			"prefix": "void Bone::setBoneData(BoneData *boneData)",
			"body": [
				"Bone:setBoneData(${1:BoneData *boneData})"
			],
			"description": "void Bone::setBoneData(BoneData *boneData)"
		},
		 "void EditBoxImplWin::setInputFlag(EditBox::InputFlag inputFlag)": {
			"prefix": "void EditBoxImplWin::setInputFlag(EditBox::InputFlag inputFlag)",
			"body": [
				"EditBoxImplWin:setInputFlag(${1:EditBox:InputFlag inputFlag})"
			],
			"description": "void EditBoxImplWin::setInputFlag(EditBox::InputFlag inputFlag)"
		},
		 "void Mat4::getRightVector(Vec3* dst) const": {
			"prefix": "void Mat4::getRightVector(Vec3* dst) const",
			"body": [
				"Mat4:getRightVector(${1:Vec3* dst})"
			],
			"description": "void Mat4::getRightVector(Vec3* dst) const"
		},
		 "void ColliderDetector::addContourDataList(cocos2d::Vector<ContourData*> &contourDataList)": {
			"prefix": "void ColliderDetector::addContourDataList(cocos2d::Vector<ContourData*> &contourDataList)",
			"body": [
				"ColliderDetector:addContourDataList(${1:cocos2d:Vector<ContourData*> &contourDataList})"
			],
			"description": "void ColliderDetector::addContourDataList(cocos2d::Vector<ContourData*> &contourDataList)"
		},
		 "void ProtectedNode::onEnterTransitionDidFinish()": {
			"prefix": "void ProtectedNode::onEnterTransitionDidFinish()",
			"body": [
				"void ProtectedNode:onEnterTransitionDidFinish()"
			],
			"description": "void ProtectedNode::onEnterTransitionDidFinish()"
		},
		 "ValueVector& Value::asValueVector()": {
			"prefix": "ValueVector& Value::asValueVector()",
			"body": [
				"ValueVector& Value:asValueVector()"
			],
			"description": "ValueVector& Value::asValueVector()"
		},
		 "void Ripple3D::setPosition(const Vec2& position)": {
			"prefix": "void Ripple3D::setPosition(const Vec2& position)",
			"body": [
				"Ripple3D:setPosition(${1:Vec2& position})"
			],
			"description": "void Ripple3D::setPosition(const Vec2& position)"
		},
		 "bool Camera::initPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)": {
			"prefix": "bool Camera::initPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)",
			"body": [
				"Camera:initPerspective(${1:float fieldOfView},${2:float aspectRatio},${3:float nearPlane},${4:float farPlane})"
			],
			"description": "bool Camera::initPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)"
		},
		 "void RenderState::finalize()": {
			"prefix": "void RenderState::finalize()",
			"body": [
				"void RenderState:finalize()"
			],
			"description": "void RenderState::finalize()"
		},
		 "void ArmatureAnimation::resume()": {
			"prefix": "void ArmatureAnimation::resume()",
			"body": [
				"void ArmatureAnimation:resume()"
			],
			"description": "void ArmatureAnimation::resume()"
		},
		 "Image* RenderTexture::newImage(bool fliimage)": {
			"prefix": "Image* RenderTexture::newImage(bool fliimage)",
			"body": [
				"RenderTexture:newImage(${1:bool fliimage})"
			],
			"description": "Image* RenderTexture::newImage(bool fliimage)"
		},
		 "Node* CSLoader::nodeWithFlatBuffersForSimulator(const flatbuffers::NodeTree *nodetree)": {
			"prefix": "Node* CSLoader::nodeWithFlatBuffersForSimulator(const flatbuffers::NodeTree *nodetree)",
			"body": [
				"CSLoader:nodeWithFlatBuffersForSimulator(${1:flatbuffers:NodeTree *nodetree})"
			],
			"description": "Node* CSLoader::nodeWithFlatBuffersForSimulator(const flatbuffers::NodeTree *nodetree)"
		},
		 "GLProgramCache* GLProgramCache::sharedShaderCache()": {
			"prefix": "GLProgramCache* GLProgramCache::sharedShaderCache()",
			"body": [
				"GLProgramCache* GLProgramCache:sharedShaderCache()"
			],
			"description": "GLProgramCache* GLProgramCache::sharedShaderCache()"
		},
		 "MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, Node* disabledSprite)": {
			"prefix": "MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, Node* disabledSprite)",
			"body": [
				"* MenuItemSprite:create(${1:Node* normalSprite},${2:Node* selectedSprite},${3:Node* disabledSprite})"
			],
			"description": "MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, Node* disabledSprite)"
		},
		 "void Layout::copyClonedWidgetChildren(Widget* model)": {
			"prefix": "void Layout::copyClonedWidgetChildren(Widget* model)",
			"body": [
				"Layout:copyClonedWidgetChildren(${1:Widget* model})"
			],
			"description": "void Layout::copyClonedWidgetChildren(Widget* model)"
		},
		 "bool LayerGradient::initWithColor(const Color4B& start, const Color4B& end)": {
			"prefix": "bool LayerGradient::initWithColor(const Color4B& start, const Color4B& end)",
			"body": [
				"LayerGradient:initWithColor(${1:Color4B& start},${2:Color4B& end})"
			],
			"description": "bool LayerGradient::initWithColor(const Color4B& start, const Color4B& end)"
		},
		 "void ReuseGrid::cacheTargetAsGridNode()": {
			"prefix": "void ReuseGrid::cacheTargetAsGridNode()",
			"body": [
				"void ReuseGrid:cacheTargetAsGridNode()"
			],
			"description": "void ReuseGrid::cacheTargetAsGridNode()"
		},
		 "bool PhysicsBody::init()": {
			"prefix": "bool PhysicsBody::init()",
			"body": [
				"bool PhysicsBody:init()"
			],
			"description": "bool PhysicsBody::init()"
		},
		 "Sprite* TMXLayer::reusedTileWithRect(Rect rect)": {
			"prefix": "Sprite* TMXLayer::reusedTileWithRect(Rect rect)",
			"body": [
				"TMXLayer:reusedTileWithRect(${1:Rect rect})"
			],
			"description": "Sprite* TMXLayer::reusedTileWithRect(Rect rect)"
		},
		 "void EaseQuadraticActionOut::update(float time)": {
			"prefix": "void EaseQuadraticActionOut::update(float time)",
			"body": [
				"EaseQuadraticActionOut:update(${1:float time})"
			],
			"description": "void EaseQuadraticActionOut::update(float time)"
		},
		 "void PageView::updateBoundaryPages()": {
			"prefix": "void PageView::updateBoundaryPages()",
			"body": [
				"void PageView:updateBoundaryPages()"
			],
			"description": "void PageView::updateBoundaryPages()"
		},
		 "Vec3 Grid3D::getVertex(const Vec2& pos) const": {
			"prefix": "Vec3 Grid3D::getVertex(const Vec2& pos) const",
			"body": [
				"Grid3D:getVertex(${1:Vec2& pos})"
			],
			"description": "Vec3 Grid3D::getVertex(const Vec2& pos) const"
		},
		 "void Mat4::createRotation(const Quaternion& q, Mat4* dst)": {
			"prefix": "void Mat4::createRotation(const Quaternion& q, Mat4* dst)",
			"body": [
				"Mat4:createRotation(${1:Quaternion& q},${2:Mat4* dst})"
			],
			"description": "void Mat4::createRotation(const Quaternion& q, Mat4* dst)"
		},
		 "bool ParticleSystem::isBlendAdditive() const": {
			"prefix": "bool ParticleSystem::isBlendAdditive() const",
			"body": [
				"bool ParticleSystem:isBlendAdditive() "
			],
			"description": "bool ParticleSystem::isBlendAdditive() const"
		},
		 "void EditBox::setPlaceholderFontSize(int fontSize)": {
			"prefix": "void EditBox::setPlaceholderFontSize(int fontSize)",
			"body": [
				"EditBox:setPlaceholderFontSize(${1:int fontSize})"
			],
			"description": "void EditBox::setPlaceholderFontSize(int fontSize)"
		},
		 "float Rect::getMaxX() const": {
			"prefix": "float Rect::getMaxX() const",
			"body": [
				"float Rect:getMaxX() "
			],
			"description": "float Rect::getMaxX() const"
		},
		 "void Node::setScaleY(float scaleY)": {
			"prefix": "void Node::setScaleY(float scaleY)",
			"body": [
				"Node:setScaleY(${1:float scaleY})"
			],
			"description": "void Node::setScaleY(float scaleY)"
		},
		 "class XmlSaxHander : public tinyxml2::XMLVisitor": {
			"prefix": "class XmlSaxHander : public tinyxml2::XMLVisitor",
			"body": [
				"class XmlSaxHander : public tinyxml2:XMLVisitor"
			],
			"description": "class XmlSaxHander : public tinyxml2::XMLVisitor"
		},
		 "void Widget::setSize(const Size &size)": {
			"prefix": "void Widget::setSize(const Size &size)",
			"body": [
				"Widget:setSize(${1:Size &size})"
			],
			"description": "void Widget::setSize(const Size &size)"
		},
		 "void Hide::update(float time)": {
			"prefix": "void Hide::update(float time)",
			"body": [
				"Hide:update(${1:float time})"
			],
			"description": "void Hide::update(float time)"
		},
		 "Repeat* Repeat::create(FiniteTimeAction *action, unsigned int times)": {
			"prefix": "Repeat* Repeat::create(FiniteTimeAction *action, unsigned int times)",
			"body": [
				"Repeat:create(${1:FiniteTimeAction *action},${2:unsigned int times})"
			],
			"description": "Repeat* Repeat::create(FiniteTimeAction *action, unsigned int times)"
		},
		 "void Widget::setBrightStyle(BrightStyle style)": {
			"prefix": "void Widget::setBrightStyle(BrightStyle style)",
			"body": [
				"Widget:setBrightStyle(${1:BrightStyle style})"
			],
			"description": "void Widget::setBrightStyle(BrightStyle style)"
		},
		 "void DelayTime::update(float time)": {
			"prefix": "void DelayTime::update(float time)",
			"body": [
				"DelayTime:update(${1:float time})"
			],
			"description": "void DelayTime::update(float time)"
		},
		 "bool Layer::isTouchEnabled() const": {
			"prefix": "bool Layer::isTouchEnabled() const",
			"body": [
				"bool Layer:isTouchEnabled() "
			],
			"description": "bool Layer::isTouchEnabled() const"
		},
		 "void Scene::setNavMeshDebugCamera(Camera *camera)": {
			"prefix": "void Scene::setNavMeshDebugCamera(Camera *camera)",
			"body": [
				"Scene:setNavMeshDebugCamera(${1:Camera *camera})"
			],
			"description": "void Scene::setNavMeshDebugCamera(Camera *camera)"
		},
		 "void GLProgramStateCache::removeUnusedGLProgramState()": {
			"prefix": "void GLProgramStateCache::removeUnusedGLProgramState()",
			"body": [
				"void GLProgramStateCache:removeUnusedGLProgramState()"
			],
			"description": "void GLProgramStateCache::removeUnusedGLProgramState()"
		},
		 "void Node::removeFromPhysicsWorld()": {
			"prefix": "void Node::removeFromPhysicsWorld()",
			"body": [
				"void Node:removeFromPhysicsWorld()"
			],
			"description": "void Node::removeFromPhysicsWorld()"
		},
		 "void PhysicsWorld::removeBody(PhysicsBody* body)": {
			"prefix": "void PhysicsWorld::removeBody(PhysicsBody* body)",
			"body": [
				"PhysicsWorld:removeBody(${1:PhysicsBody* body})"
			],
			"description": "void PhysicsWorld::removeBody(PhysicsBody* body)"
		},
		 "std::string CSLoader::getWidgetReaderClassName(Widget* widget)": {
			"prefix": "std::string CSLoader::getWidgetReaderClassName(Widget* widget)",
			"body": [
				"CSLoader:getWidgetReaderClassName(${1:Widget* widget})"
			],
			"description": "std::string CSLoader::getWidgetReaderClassName(Widget* widget)"
		},
		 "void Device::vibrate(float duration)": {
			"prefix": "void Device::vibrate(float duration)",
			"body": [
				"Device:vibrate(${1:float duration})"
			],
			"description": "void Device::vibrate(float duration)"
		},
		 "void Texture2D::convertAI88ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertAI88ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertAI88ToRGB5A1(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertAI88ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void SimpleAudioEngine::stopAllEffects()": {
			"prefix": "void SimpleAudioEngine::stopAllEffects()",
			"body": [
				"void SimpleAudioEngine:stopAllEffects()"
			],
			"description": "void SimpleAudioEngine::stopAllEffects()"
		},
		 "Label* Label::createWithCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "Label* Label::createWithCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"Label:createWithCharMap(${1:Texture2D* texture},${2:int itemWidth},${3:int itemHeight},${4:int startCharMap})"
			],
			"description": "Label* Label::createWithCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "void GLProgramState::setUniformVec4v(GLint uniformLocation, ssize_t size, const Vec4* pointer)": {
			"prefix": "void GLProgramState::setUniformVec4v(GLint uniformLocation, ssize_t size, const Vec4* pointer)",
			"body": [
				"GLProgramState:setUniformVec4v(${1:GLint uniformLocation},${2:ssize_t size},${3:Vec4* pointer})"
			],
			"description": "void GLProgramState::setUniformVec4v(GLint uniformLocation, ssize_t size, const Vec4* pointer)"
		},
		 "void TextureCache::removeTexture(Texture2D* texture)": {
			"prefix": "void TextureCache::removeTexture(Texture2D* texture)",
			"body": [
				"TextureCache:removeTexture(${1:Texture2D* texture})"
			],
			"description": "void TextureCache::removeTexture(Texture2D* texture)"
		},
		 "void Terrain::setChunksLOD(Vec3 cameraPos)": {
			"prefix": "void Terrain::setChunksLOD(Vec3 cameraPos)",
			"body": [
				"Terrain:setChunksLOD(${1:Vec3 cameraPos})"
			],
			"description": "void Terrain::setChunksLOD(Vec3 cameraPos)"
		},
		 "void SIOClientImpl::disconnect()": {
			"prefix": "void SIOClientImpl::disconnect()",
			"body": [
				"void SIOClientImpl:disconnect()"
			],
			"description": "void SIOClientImpl::disconnect()"
		},
		 "bool Material::parseTechnique(Properties* techniqueProperties)": {
			"prefix": "bool Material::parseTechnique(Properties* techniqueProperties)",
			"body": [
				"Material:parseTechnique(${1:Properties* techniqueProperties})"
			],
			"description": "bool Material::parseTechnique(Properties* techniqueProperties)"
		},
		 "void Layer::onTouchEnded(Touch *touch, Event *event)": {
			"prefix": "void Layer::onTouchEnded(Touch *touch, Event *event)",
			"body": [
				"Layer:onTouchEnded(${1:Touch *touch},${2:Event *event})"
			],
			"description": "void Layer::onTouchEnded(Touch *touch, Event *event)"
		},
		 "bool __CCCallFuncND::initWithTarget(Ref* selectorTarget, SEL_CallFuncND selector, void* d)": {
			"prefix": "bool __CCCallFuncND::initWithTarget(Ref* selectorTarget, SEL_CallFuncND selector, void* d)",
			"body": [
				"__CCCallFuncND:initWithTarget(${1:Ref* selectorTarget},${2:SEL_CallFuncND selector},${3:void* d})"
			],
			"description": "bool __CCCallFuncND::initWithTarget(Ref* selectorTarget, SEL_CallFuncND selector, void* d)"
		},
		 "AABB::AABB(const Vec3& min, const Vec3& max)": {
			"prefix": "AABB::AABB(const Vec3& min, const Vec3& max)",
			"body": [
				"min},${2:Vec3& max})"
			],
			"description": "AABB::AABB(const Vec3& min, const Vec3& max)"
		},
		 "void CCBReader::addDocumentCallbackName(const std::string& name)": {
			"prefix": "void CCBReader::addDocumentCallbackName(const std::string& name)",
			"body": [
				"CCBReader:addDocumentCallbackName(${1:std:string& name})"
			],
			"description": "void CCBReader::addDocumentCallbackName(const std::string& name)"
		},
		 "float NodeLoader::parsePropTypeDegrees(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)": {
			"prefix": "float NodeLoader::parsePropTypeDegrees(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)",
			"body": [
				"NodeLoader:parsePropTypeDegrees(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader},${4:char *pPropertyName})"
			],
			"description": "float NodeLoader::parsePropTypeDegrees(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)"
		},
		 "void DrawNode::drawSolidCircle(const Vec2& center, float radius, float angle, unsigned int segments, float scaleX, float scaleY, const Color4F &color)": {
			"prefix": "void DrawNode::drawSolidCircle(const Vec2& center, float radius, float angle, unsigned int segments, float scaleX, float scaleY, const Color4F &color)",
			"body": [
				"DrawNode:drawSolidCircle(${1:Vec2& center},${2:float radius},${3:float angle},${4:unsigned int segments},${5:float scaleX},${6:float scaleY},${7:Color4F &color})"
			],
			"description": "void DrawNode::drawSolidCircle(const Vec2& center, float radius, float angle, unsigned int segments, float scaleX, float scaleY, const Color4F &color)"
		},
		 "void EditBoxImplWin::setReturnType(EditBox::KeyboardReturnType returnType)": {
			"prefix": "void EditBoxImplWin::setReturnType(EditBox::KeyboardReturnType returnType)",
			"body": [
				"EditBoxImplWin:setReturnType(${1:EditBox:KeyboardReturnType returnType})"
			],
			"description": "void EditBoxImplWin::setReturnType(EditBox::KeyboardReturnType returnType)"
		},
		 "void ParticleSystem::setRotatePerSecond(float degrees)": {
			"prefix": "void ParticleSystem::setRotatePerSecond(float degrees)",
			"body": [
				"ParticleSystem:setRotatePerSecond(${1:float degrees})"
			],
			"description": "void ParticleSystem::setRotatePerSecond(float degrees)"
		},
		 "bool EventListenerPhysicsContact::checkAvailable()": {
			"prefix": "bool EventListenerPhysicsContact::checkAvailable()",
			"body": [
				"bool EventListenerPhysicsContact:checkAvailable()"
			],
			"description": "bool EventListenerPhysicsContact::checkAvailable()"
		},
		 "void ListView::pushBackCustomItem(Widget* item)": {
			"prefix": "void ListView::pushBackCustomItem(Widget* item)",
			"body": [
				"ListView:pushBackCustomItem(${1:Widget* item})"
			],
			"description": "void ListView::pushBackCustomItem(Widget* item)"
		},
		 "cocos2d::Vec3	Physics3D6DofConstraint::getAngularUpperLimit() const": {
			"prefix": "cocos2d::Vec3	Physics3D6DofConstraint::getAngularUpperLimit() const",
			"body": [
				"cocos2d:Vec3	Physics3D6DofConstraint:getAngularUpperLimit() "
			],
			"description": "cocos2d::Vec3	Physics3D6DofConstraint::getAngularUpperLimit() const"
		},
		 "bool ReverseTime::initWithAction(FiniteTimeAction *action)": {
			"prefix": "bool ReverseTime::initWithAction(FiniteTimeAction *action)",
			"body": [
				"ReverseTime:initWithAction(${1:FiniteTimeAction *action})"
			],
			"description": "bool ReverseTime::initWithAction(FiniteTimeAction *action)"
		},
		 "void TextureAtlas::drawNumberOfQuads(ssize_t numberOfQuads, ssize_t start)": {
			"prefix": "void TextureAtlas::drawNumberOfQuads(ssize_t numberOfQuads, ssize_t start)",
			"body": [
				"TextureAtlas:drawNumberOfQuads(${1:ssize_t numberOfQuads},${2:ssize_t start})"
			],
			"description": "void TextureAtlas::drawNumberOfQuads(ssize_t numberOfQuads, ssize_t start)"
		},
		 "FadeOutUpTiles* FadeOutUpTiles::clone() const": {
			"prefix": "FadeOutUpTiles* FadeOutUpTiles::clone() const",
			"body": [
				"FadeOutUpTiles* FadeOutUpTiles:clone() "
			],
			"description": "FadeOutUpTiles* FadeOutUpTiles::clone() const"
		},
		 "void cocos2d::NavMeshAgent::completeOffMeshLink()": {
			"prefix": "void cocos2d::NavMeshAgent::completeOffMeshLink()",
			"body": [
				"void cocos2d:NavMeshAgent:completeOffMeshLink()"
			],
			"description": "void cocos2d::NavMeshAgent::completeOffMeshLink()"
		},
		 "void NodeLoader::onHandlePropTypeFlip(Node * pNode, Node * pParent, const char* pPropertyName, bool * pFlip, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeFlip(Node * pNode, Node * pParent, const char* pPropertyName, bool * pFlip, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeFlip(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:bool * pFlip},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeFlip(Node * pNode, Node * pParent, const char* pPropertyName, bool * pFlip, CCBReader * ccbReader)"
		},
		 "TiledGrid3D* TiledGrid3D::create(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)": {
			"prefix": "TiledGrid3D* TiledGrid3D::create(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)",
			"body": [
				"TiledGrid3D:create(${1:Size& gridSize},${2:Texture2D *texture},${3:bool flipped},${4:Rect& rect})"
			],
			"description": "TiledGrid3D* TiledGrid3D::create(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)"
		},
		 "bool Animation::initWithSpriteFrames(const Vector<SpriteFrame*>& frames, float delay/* = 0.0f*/, unsigned int loops/* = 1*/)": {
			"prefix": "bool Animation::initWithSpriteFrames(const Vector<SpriteFrame*>& frames, float delay/* = 0.0f*/, unsigned int loops/* = 1*/)",
			"body": [
				"Animation:initWithSpriteFrames(${1:Vector<SpriteFrame*>& frames},${2:float delay/* = 0.0f*/},${3:unsigned int loops/* = 1*/})"
			],
			"description": "bool Animation::initWithSpriteFrames(const Vector<SpriteFrame*>& frames, float delay/* = 0.0f*/, unsigned int loops/* = 1*/)"
		},
		 "void PrettyPrinter::visit(const __Double *p)": {
			"prefix": "void PrettyPrinter::visit(const __Double *p)",
			"body": [
				"PrettyPrinter:visit(${1:__Double *p})"
			],
			"description": "void PrettyPrinter::visit(const __Double *p)"
		},
		 "bool ImageView::init()": {
			"prefix": "bool ImageView::init()",
			"body": [
				"bool ImageView:init()"
			],
			"description": "bool ImageView::init()"
		},
		 "void DataReaderHelper::purge()": {
			"prefix": "void DataReaderHelper::purge()",
			"body": [
				"void DataReaderHelper:purge()"
			],
			"description": "void DataReaderHelper::purge()"
		},
		 "void Physics3DDebugDrawer::drawImplementation( const Mat4 &transform, uint32_t flags )": {
			"prefix": "void Physics3DDebugDrawer::drawImplementation( const Mat4 &transform, uint32_t flags )",
			"body": [
				"Physics3DDebugDrawer:drawImplementation(${1:Mat4 &transform},${2:uint32_t flags})"
			],
			"description": "void Physics3DDebugDrawer::drawImplementation( const Mat4 &transform, uint32_t flags )"
		},
		 "int ParticleBatchNode::addChildHelper(ParticleSystem* child, int z, int aTag, const std::string &name, bool setTag)": {
			"prefix": "int ParticleBatchNode::addChildHelper(ParticleSystem* child, int z, int aTag, const std::string &name, bool setTag)",
			"body": [
				"ParticleBatchNode:addChildHelper(${1:ParticleSystem* child},${2:int z},${3:int aTag},${4:std:string &name},${5:bool setTag})"
			],
			"description": "int ParticleBatchNode::addChildHelper(ParticleSystem* child, int z, int aTag, const std::string &name, bool setTag)"
		},
		 "void Ripple3D::update(float time)": {
			"prefix": "void Ripple3D::update(float time)",
			"body": [
				"Ripple3D:update(${1:float time})"
			],
			"description": "void Ripple3D::update(float time)"
		},
		 "EventListenerPhysicsContactWithShapes* EventListenerPhysicsContactWithShapes::create(PhysicsShape* shapeA, PhysicsShape* shapeB)": {
			"prefix": "EventListenerPhysicsContactWithShapes* EventListenerPhysicsContactWithShapes::create(PhysicsShape* shapeA, PhysicsShape* shapeB)",
			"body": [
				"EventListenerPhysicsContactWithShapes:create(${1:PhysicsShape* shapeA},${2:PhysicsShape* shapeB})"
			],
			"description": "EventListenerPhysicsContactWithShapes* EventListenerPhysicsContactWithShapes::create(PhysicsShape* shapeA, PhysicsShape* shapeB)"
		},
		 "void Texture2D::convertRGB888ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGB888ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGB888ToRGB5A1(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGB888ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void Text::setTextColor(const Color4B color)": {
			"prefix": "void Text::setTextColor(const Color4B color)",
			"body": [
				"Text:setTextColor(${1:Color4B color})"
			],
			"description": "void Text::setTextColor(const Color4B color)"
		},
		 "__Array* __String::componentsSeparatedByString(const char *delimiter)": {
			"prefix": "__Array* __String::componentsSeparatedByString(const char *delimiter)",
			"body": [
				"__String:componentsSeparatedByString(${1:char *delimiter})"
			],
			"description": "__Array* __String::componentsSeparatedByString(const char *delimiter)"
		},
		 "void Text::onPressStateChangedToNormal()": {
			"prefix": "void Text::onPressStateChangedToNormal()",
			"body": [
				"void Text:onPressStateChangedToNormal()"
			],
			"description": "void Text::onPressStateChangedToNormal()"
		},
		 "ssize_t ArmatureAnimation::getMovementCount() const": {
			"prefix": "ssize_t ArmatureAnimation::getMovementCount() const",
			"body": [
				"ssize_t ArmatureAnimation:getMovementCount() "
			],
			"description": "ssize_t ArmatureAnimation::getMovementCount() const"
		},
		 "std::string ListView::getDescription() const": {
			"prefix": "std::string ListView::getDescription() const",
			"body": [
				"std:string ListView:getDescription() "
			],
			"description": "std::string ListView::getDescription() const"
		},
		 "void Lock::lock(void)": {
			"prefix": "void Lock::lock(void)",
			"body": [
				"Lock:lock(${1:void})"
			],
			"description": "void Lock::lock(void)"
		},
		 "void EditBoxImplCommon::setReturnType(EditBox::KeyboardReturnType returnType)": {
			"prefix": "void EditBoxImplCommon::setReturnType(EditBox::KeyboardReturnType returnType)",
			"body": [
				"EditBoxImplCommon:setReturnType(${1:EditBox:KeyboardReturnType returnType})"
			],
			"description": "void EditBoxImplCommon::setReturnType(EditBox::KeyboardReturnType returnType)"
		},
		 "void Node::updateCascadeColor()": {
			"prefix": "void Node::updateCascadeColor()",
			"body": [
				"void Node:updateCascadeColor()"
			],
			"description": "void Node::updateCascadeColor()"
		},
		 "const char* EditBox::getPlaceHolder(void)": {
			"prefix": "const char* EditBox::getPlaceHolder(void)",
			"body": [
				"char* EditBox:getPlaceHolder(${1:void})"
			],
			"description": "const char* EditBox::getPlaceHolder(void)"
		},
		 "void EaseExponentialIn::update(float time)": {
			"prefix": "void EaseExponentialIn::update(float time)",
			"body": [
				"EaseExponentialIn:update(${1:float time})"
			],
			"description": "void EaseExponentialIn::update(float time)"
		},
		 "void ScrollViewLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char * pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)": {
			"prefix": "void ScrollViewLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char * pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)",
			"body": [
				"ScrollViewLoader:onHandlePropTypeCCBFile(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Node * pCCBFileNode},${5:CCBReader * ccbReader})"
			],
			"description": "void ScrollViewLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char * pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)"
		},
		 "void Texture2D::convertI8ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertI8ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertI8ToRGBA4444(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertI8ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void ScrollView::setScrollBarPositionFromCorner(const Vec2& positionFromCorner)": {
			"prefix": "void ScrollView::setScrollBarPositionFromCorner(const Vec2& positionFromCorner)",
			"body": [
				"ScrollView:setScrollBarPositionFromCorner(${1:Vec2& positionFromCorner})"
			],
			"description": "void ScrollView::setScrollBarPositionFromCorner(const Vec2& positionFromCorner)"
		},
		 "Size Texture2D::getContentSize() const": {
			"prefix": "Size Texture2D::getContentSize() const",
			"body": [
				"Size Texture2D:getContentSize() "
			],
			"description": "Size Texture2D::getContentSize() const"
		},
		 "void ArmatureDataManager::addSpriteFrameFromFile(const std::string& plistPath, const std::string& imagePath, const std::string& configFilePath)": {
			"prefix": "void ArmatureDataManager::addSpriteFrameFromFile(const std::string& plistPath, const std::string& imagePath, const std::string& configFilePath)",
			"body": [
				"ArmatureDataManager:addSpriteFrameFromFile(${1:std:string& plistPath},${2:std:string& imagePath},${3:std:string& configFilePath})"
			],
			"description": "void ArmatureDataManager::addSpriteFrameFromFile(const std::string& plistPath, const std::string& imagePath, const std::string& configFilePath)"
		},
		 "void NavMesh::debugDraw(Renderer* renderer)": {
			"prefix": "void NavMesh::debugDraw(Renderer* renderer)",
			"body": [
				"NavMesh:debugDraw(${1:Renderer* renderer})"
			],
			"description": "void NavMesh::debugDraw(Renderer* renderer)"
		},
		 "void Timeline::apply(unsigned int frameIndex)": {
			"prefix": "void Timeline::apply(unsigned int frameIndex)",
			"body": [
				"Timeline:apply(${1:unsigned int frameIndex})"
			],
			"description": "void Timeline::apply(unsigned int frameIndex)"
		},
		 "void AbstractCheckButton::frontCrossTextureScaleChangedWithSize()": {
			"prefix": "void AbstractCheckButton::frontCrossTextureScaleChangedWithSize()",
			"body": [
				"void AbstractCheckButton:frontCrossTextureScaleChangedWithSize()"
			],
			"description": "void AbstractCheckButton::frontCrossTextureScaleChangedWithSize()"
		},
		 "void TriggerMng::destroyInstance()": {
			"prefix": "void TriggerMng::destroyInstance()",
			"body": [
				"void TriggerMng:destroyInstance()"
			],
			"description": "void TriggerMng::destroyInstance()"
		},
		 "bool NavMeshAgent::initWith(const NavMeshAgentParam &param)": {
			"prefix": "bool NavMeshAgent::initWith(const NavMeshAgentParam &param)",
			"body": [
				"NavMeshAgent:initWith(${1:NavMeshAgentParam &param})"
			],
			"description": "bool NavMeshAgent::initWith(const NavMeshAgentParam &param)"
		},
		 "void __Set::removeAllObjects()": {
			"prefix": "void __Set::removeAllObjects()",
			"body": [
				"void __Set:removeAllObjects()"
			],
			"description": "void __Set::removeAllObjects()"
		},
		 "Vec2 PhysicsJointGroove::getGrooveA() const": {
			"prefix": "Vec2 PhysicsJointGroove::getGrooveA() const",
			"body": [
				"Vec2 PhysicsJointGroove:getGrooveA() "
			],
			"description": "Vec2 PhysicsJointGroove::getGrooveA() const"
		},
		 "bool DownloaderImpl::init()": {
			"prefix": "bool DownloaderImpl::init()",
			"body": [
				"bool DownloaderImpl:init()"
			],
			"description": "bool DownloaderImpl::init()"
		},
		 "void LayerColor::setContentSize(const Size & size)": {
			"prefix": "void LayerColor::setContentSize(const Size & size)",
			"body": [
				"LayerColor:setContentSize(${1:Size & size})"
			],
			"description": "void LayerColor::setContentSize(const Size & size)"
		},
		 "CameraBackgroundDepthBrush* CameraBackgroundDepthBrush::create(float depth)": {
			"prefix": "CameraBackgroundDepthBrush* CameraBackgroundDepthBrush::create(float depth)",
			"body": [
				"CameraBackgroundDepthBrush:create(${1:float depth})"
			],
			"description": "CameraBackgroundDepthBrush* CameraBackgroundDepthBrush::create(float depth)"
		},
		 "void PhysicsBody::removeJoint(PhysicsJoint* joint)": {
			"prefix": "void PhysicsBody::removeJoint(PhysicsJoint* joint)",
			"body": [
				"PhysicsBody:removeJoint(${1:PhysicsJoint* joint})"
			],
			"description": "void PhysicsBody::removeJoint(PhysicsJoint* joint)"
		},
		 "void Button::setupDisabledTexture()": {
			"prefix": "void Button::setupDisabledTexture()",
			"body": [
				"void Button:setupDisabledTexture()"
			],
			"description": "void Button::setupDisabledTexture()"
		},
		 "Sprite* Sprite::createWithTexture(Texture2D *texture)": {
			"prefix": "Sprite* Sprite::createWithTexture(Texture2D *texture)",
			"body": [
				"Sprite:createWithTexture(${1:Texture2D *texture})"
			],
			"description": "Sprite* Sprite::createWithTexture(Texture2D *texture)"
		},
		 "void CCBAnimationManager::debug()": {
			"prefix": "void CCBAnimationManager::debug()",
			"body": [
				"void CCBAnimationManager:debug()"
			],
			"description": "void CCBAnimationManager::debug()"
		},
		 "FlipY3D* FlipY3D::create(float duration)": {
			"prefix": "FlipY3D* FlipY3D::create(float duration)",
			"body": [
				"FlipY3D:create(${1:float duration})"
			],
			"description": "FlipY3D* FlipY3D::create(float duration)"
		},
		 "void TransitionScene::hideOutShowIn()": {
			"prefix": "void TransitionScene::hideOutShowIn()",
			"body": [
				"void TransitionScene:hideOutShowIn()"
			],
			"description": "void TransitionScene::hideOutShowIn()"
		},
		 "void Slider::addEventListenerSlider(Ref *target, SEL_SlidPercentChangedEvent selector)": {
			"prefix": "void Slider::addEventListenerSlider(Ref *target, SEL_SlidPercentChangedEvent selector)",
			"body": [
				"Slider:addEventListenerSlider(${1:Ref *target},${2:SEL_SlidPercentChangedEvent selector})"
			],
			"description": "void Slider::addEventListenerSlider(Ref *target, SEL_SlidPercentChangedEvent selector)"
		},
		 "void Application::applicationScreenSizeChanged(int newWidth, int newHeight)": {
			"prefix": "void Application::applicationScreenSizeChanged(int newWidth, int newHeight)",
			"body": [
				"Application:applicationScreenSizeChanged(${1:int newWidth},${2:int newHeight})"
			],
			"description": "void Application::applicationScreenSizeChanged(int newWidth, int newHeight)"
		},
		 "CCBSequenceProperty* CCBSequence::getSoundChannel()": {
			"prefix": "CCBSequenceProperty* CCBSequence::getSoundChannel()",
			"body": [
				"CCBSequenceProperty* CCBSequence:getSoundChannel()"
			],
			"description": "CCBSequenceProperty* CCBSequence::getSoundChannel()"
		},
		 "bool RenderState::StateBlock::isDirty() const": {
			"prefix": "bool RenderState::StateBlock::isDirty() const",
			"body": [
				"bool RenderState:StateBlock:isDirty() "
			],
			"description": "bool RenderState::StateBlock::isDirty() const"
		},
		 "bool SpriteFrame::initWithTexture(Texture2D* texture, const Rect& rect)": {
			"prefix": "bool SpriteFrame::initWithTexture(Texture2D* texture, const Rect& rect)",
			"body": [
				"SpriteFrame:initWithTexture(${1:Texture2D* texture},${2:Rect& rect})"
			],
			"description": "bool SpriteFrame::initWithTexture(Texture2D* texture, const Rect& rect)"
		},
		 "const VertexData* Primitive::getVertexData() const": {
			"prefix": "const VertexData* Primitive::getVertexData() const",
			"body": [
				" VertexData* Primitive:getVertexData() "
			],
			"description": "const VertexData* Primitive::getVertexData() const"
		},
		 "void Scene::addChild(Node* child, int zOrder, const std::string &name)": {
			"prefix": "void Scene::addChild(Node* child, int zOrder, const std::string &name)",
			"body": [
				"Scene:addChild(${1:Node* child},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void Scene::addChild(Node* child, int zOrder, const std::string &name)"
		},
		 "TMXTiledMap* TMXTiledMap::createWithXML(const std::string& tmxString, const std::string& resourcePath)": {
			"prefix": "TMXTiledMap* TMXTiledMap::createWithXML(const std::string& tmxString, const std::string& resourcePath)",
			"body": [
				"TMXTiledMap:createWithXML(${1:std:string& tmxString},${2:std:string& resourcePath})"
			],
			"description": "TMXTiledMap* TMXTiledMap::createWithXML(const std::string& tmxString, const std::string& resourcePath)"
		},
		 "void Node::scheduleUpdateWithPriority(int priority)": {
			"prefix": "void Node::scheduleUpdateWithPriority(int priority)",
			"body": [
				"Node:scheduleUpdateWithPriority(${1:int priority})"
			],
			"description": "void Node::scheduleUpdateWithPriority(int priority)"
		},
		 "void Technique::addPass(Pass *pass)": {
			"prefix": "void Technique::addPass(Pass *pass)",
			"body": [
				"Technique:addPass(${1:Pass *pass})"
			],
			"description": "void Technique::addPass(Pass *pass)"
		},
		 "void CCBAnimationManager::setAnimationCompletedCallback(Ref *target, SEL_CallFunc callbackFunc)": {
			"prefix": "void CCBAnimationManager::setAnimationCompletedCallback(Ref *target, SEL_CallFunc callbackFunc)",
			"body": [
				"CCBAnimationManager:setAnimationCompletedCallback(${1:Ref *target},${2:SEL_CallFunc callbackFunc})"
			],
			"description": "void CCBAnimationManager::setAnimationCompletedCallback(Ref *target, SEL_CallFunc callbackFunc)"
		},
		 "float PhysicsBody::getAngularVelocityLimit()": {
			"prefix": "float PhysicsBody::getAngularVelocityLimit()",
			"body": [
				"float PhysicsBody:getAngularVelocityLimit()"
			],
			"description": "float PhysicsBody::getAngularVelocityLimit()"
		},
		 "void Texture2D::convertRGBA8888ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGBA8888ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGBA8888ToRGB565(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGBA8888ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "bool cmpEventInfoAsc(Animate3D::Animate3DDisplayedEventInfo* info1, Animate3D::Animate3DDisplayedEventInfo* info2)": {
			"prefix": "bool cmpEventInfoAsc(Animate3D::Animate3DDisplayedEventInfo* info1, Animate3D::Animate3DDisplayedEventInfo* info2)",
			"body": [
				"cmpEventInfoAsc(${1:Animate3D:Animate3DDisplayedEventInfo* info1},${2:Animate3D:Animate3DDisplayedEventInfo* info2})"
			],
			"description": "bool cmpEventInfoAsc(Animate3D::Animate3DDisplayedEventInfo* info1, Animate3D::Animate3DDisplayedEventInfo* info2)"
		},
		 "const std::vector<Camera*>& Scene::getCameras()": {
			"prefix": "const std::vector<Camera*>& Scene::getCameras()",
			"body": [
				" std:vector<Camera*>& Scene:getCameras()"
			],
			"description": "const std::vector<Camera*>& Scene::getCameras()"
		},
		 "PhysicsBody* PhysicsBody::create(float mass)": {
			"prefix": "PhysicsBody* PhysicsBody::create(float mass)",
			"body": [
				"PhysicsBody:create(${1:float mass})"
			],
			"description": "PhysicsBody* PhysicsBody::create(float mass)"
		},
		 "void Bone::updateZOrder()": {
			"prefix": "void Bone::updateZOrder()",
			"body": [
				"void Bone:updateZOrder()"
			],
			"description": "void Bone::updateZOrder()"
		},
		 "float Rect::getMaxY() const": {
			"prefix": "float Rect::getMaxY() const",
			"body": [
				"float Rect:getMaxY() "
			],
			"description": "float Rect::getMaxY() const"
		},
		 "void EaseInOut::update(float time)": {
			"prefix": "void EaseInOut::update(float time)",
			"body": [
				"EaseInOut:update(${1:float time})"
			],
			"description": "void EaseInOut::update(float time)"
		},
		 "void DrawNode::drawCardinalSpline(PointArray *config, float tension,  unsigned int segments, const Color4F &color)": {
			"prefix": "void DrawNode::drawCardinalSpline(PointArray *config, float tension,  unsigned int segments, const Color4F &color)",
			"body": [
				"DrawNode:drawCardinalSpline(${1:PointArray *config},${2:float tension},${3:unsigned int segments},${4:Color4F &color})"
			],
			"description": "void DrawNode::drawCardinalSpline(PointArray *config, float tension,  unsigned int segments, const Color4F &color)"
		},
		 "void Mat4::getUpVector(Vec3* dst) const": {
			"prefix": "void Mat4::getUpVector(Vec3* dst) const",
			"body": [
				"Mat4:getUpVector(${1:Vec3* dst})"
			],
			"description": "void Mat4::getUpVector(Vec3* dst) const"
		},
		 "bool ParticleSnow::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleSnow::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSnow:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleSnow::initWithTotalParticles(int numberOfParticles)"
		},
		 "bool Sprite::init(void)": {
			"prefix": "bool Sprite::init(void)",
			"body": [
				"Sprite:init(${1:void})"
			],
			"description": "bool Sprite::init(void)"
		},
		 "void Physics3DRigidBody::setInvInertiaDiagLocal( const cocos2d::Vec3& diagInvInertia )": {
			"prefix": "void Physics3DRigidBody::setInvInertiaDiagLocal( const cocos2d::Vec3& diagInvInertia )",
			"body": [
				"Physics3DRigidBody:setInvInertiaDiagLocal(${1:cocos2d:Vec3& diagInvInertia})"
			],
			"description": "void Physics3DRigidBody::setInvInertiaDiagLocal( const cocos2d::Vec3& diagInvInertia )"
		},
		 "stExpCocoNode*	stExpCocoNode::GetChildArray(CocoLoader* pCoco)": {
			"prefix": "stExpCocoNode*	stExpCocoNode::GetChildArray(CocoLoader* pCoco)",
			"body": [
				"pCoco})"
			],
			"description": "stExpCocoNode*	stExpCocoNode::GetChildArray(CocoLoader* pCoco)"
		},
		 "int ActionFrame::getEasingType()": {
			"prefix": "int ActionFrame::getEasingType()",
			"body": [
				"int ActionFrame:getEasingType()"
			],
			"description": "int ActionFrame::getEasingType()"
		},
		 "bool EditBoxImplWin::isEditing()": {
			"prefix": "bool EditBoxImplWin::isEditing()",
			"body": [
				"bool EditBoxImplWin:isEditing()"
			],
			"description": "bool EditBoxImplWin::isEditing()"
		},
		 "void TextField::adaptRenderers()": {
			"prefix": "void TextField::adaptRenderers()",
			"body": [
				"void TextField:adaptRenderers()"
			],
			"description": "void TextField::adaptRenderers()"
		},
		 "ExtraAction* ExtraAction::clone() const": {
			"prefix": "ExtraAction* ExtraAction::clone() const",
			"body": [
				"ExtraAction* ExtraAction:clone() "
			],
			"description": "ExtraAction* ExtraAction::clone() const"
		},
		 "bool fileExists(const std::string& filePath)": {
			"prefix": "bool fileExists(const std::string& filePath)",
			"body": [
				"fileExists(${1:std:string& filePath})"
			],
			"description": "bool fileExists(const std::string& filePath)"
		},
		 "JNIEnv* JniHelper::cacheEnv(JavaVM* jvm)": {
			"prefix": "JNIEnv* JniHelper::cacheEnv(JavaVM* jvm)",
			"body": [
				"JniHelper:cacheEnv(${1:JavaVM* jvm})"
			],
			"description": "JNIEnv* JniHelper::cacheEnv(JavaVM* jvm)"
		},
		 "void Mat4::transformVector(const Vec3& vector, Vec3* dst) const": {
			"prefix": "void Mat4::transformVector(const Vec3& vector, Vec3* dst) const",
			"body": [
				"Mat4:transformVector(${1:Vec3& vector},${2:Vec3* dst})"
			],
			"description": "void Mat4::transformVector(const Vec3& vector, Vec3* dst) const"
		},
		 "void TransformHelp::matrixToNode(const AffineTransform &matrix, BaseData &node)": {
			"prefix": "void TransformHelp::matrixToNode(const AffineTransform &matrix, BaseData &node)",
			"body": [
				"TransformHelp:matrixToNode(${1:AffineTransform &matrix},${2:BaseData &node})"
			],
			"description": "void TransformHelp::matrixToNode(const AffineTransform &matrix, BaseData &node)"
		},
		 "FontAtlas* FontAtlasCache::getFontAtlasFNT(const std::string& fontFileName, const Vec2& imageOffset /* = Vec2::ZERO */)": {
			"prefix": "FontAtlas* FontAtlasCache::getFontAtlasFNT(const std::string& fontFileName, const Vec2& imageOffset /* = Vec2::ZERO */)",
			"body": [
				"FontAtlasCache:getFontAtlasFNT(${1:std:string& fontFileName},${2:Vec2& imageOffset /* = Vec2:ZERO */})"
			],
			"description": "FontAtlas* FontAtlasCache::getFontAtlasFNT(const std::string& fontFileName, const Vec2& imageOffset /* = Vec2::ZERO */)"
		},
		 "const Size& CCBAnimationManager::getContainerSize(Node *pNode)": {
			"prefix": "const Size& CCBAnimationManager::getContainerSize(Node *pNode)",
			"body": [
				"Size& CCBAnimationManager:getContainerSize(${1:Node *pNode})"
			],
			"description": "const Size& CCBAnimationManager::getContainerSize(Node *pNode)"
		},
		 "void ComAudio::playBackgroundMusic(const char* pszFilePath)": {
			"prefix": "void ComAudio::playBackgroundMusic(const char* pszFilePath)",
			"body": [
				"ComAudio:playBackgroundMusic(${1:char* pszFilePath})"
			],
			"description": "void ComAudio::playBackgroundMusic(const char* pszFilePath)"
		},
		 "void AbstractCheckButton::loadTextureBackGroundSelected(SpriteFrame* spriteframe)": {
			"prefix": "void AbstractCheckButton::loadTextureBackGroundSelected(SpriteFrame* spriteframe)",
			"body": [
				"AbstractCheckButton:loadTextureBackGroundSelected(${1:SpriteFrame* spriteframe})"
			],
			"description": "void AbstractCheckButton::loadTextureBackGroundSelected(SpriteFrame* spriteframe)"
		},
		 "void AbstractCheckButton::loadTextureFrontCrossDisabled(SpriteFrame* spriteframe)": {
			"prefix": "void AbstractCheckButton::loadTextureFrontCrossDisabled(SpriteFrame* spriteframe)",
			"body": [
				"AbstractCheckButton:loadTextureFrontCrossDisabled(${1:SpriteFrame* spriteframe})"
			],
			"description": "void AbstractCheckButton::loadTextureFrontCrossDisabled(SpriteFrame* spriteframe)"
		},
		 "HttpClient* HttpClient::getInstance()": {
			"prefix": "HttpClient* HttpClient::getInstance()",
			"body": [
				"HttpClient* HttpClient:getInstance()"
			],
			"description": "HttpClient* HttpClient::getInstance()"
		},
		 "void Renderer::visitRenderQueue(RenderQueue& queue)": {
			"prefix": "void Renderer::visitRenderQueue(RenderQueue& queue)",
			"body": [
				"Renderer:visitRenderQueue(${1:RenderQueue& queue})"
			],
			"description": "void Renderer::visitRenderQueue(RenderQueue& queue)"
		},
		 "cocos2d::Vec2 Terrain::convertToTerrainSpace(Vec2 worldSpaceXZ) const": {
			"prefix": "cocos2d::Vec2 Terrain::convertToTerrainSpace(Vec2 worldSpaceXZ) const",
			"body": [
				"Terrain:convertToTerrainSpace(${1:Vec2 worldSpaceXZ})"
			],
			"description": "cocos2d::Vec2 Terrain::convertToTerrainSpace(Vec2 worldSpaceXZ) const"
		},
		 "void ActionNode::initWithDictionary(const rapidjson::Value& dic, Ref* root)": {
			"prefix": "void ActionNode::initWithDictionary(const rapidjson::Value& dic, Ref* root)",
			"body": [
				"ActionNode:initWithDictionary(${1:rapidjson:Value& dic},${2:Ref* root})"
			],
			"description": "void ActionNode::initWithDictionary(const rapidjson::Value& dic, Ref* root)"
		},
		 "void Scale9SpriteLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)": {
			"prefix": "void Scale9SpriteLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)",
			"body": [
				"Scale9SpriteLoader:onHandlePropTypeSpriteFrame(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:SpriteFrame * pSpriteFrame},${5:CCBReader * ccbReader})"
			],
			"description": "void Scale9SpriteLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)"
		},
		 "void WidgetPropertiesReader0250::setPropsForLoadingBarFromJsonDictionary(Widget *widget, const rapidjson::Value&options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForLoadingBarFromJsonDictionary(Widget *widget, const rapidjson::Value&options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForLoadingBarFromJsonDictionary(${1:Widget *widget},${2:rapidjson:Value&options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForLoadingBarFromJsonDictionary(Widget *widget, const rapidjson::Value&options)"
		},
		 "void EditBox::adaptRenderers()": {
			"prefix": "void EditBox::adaptRenderers()",
			"body": [
				"void EditBox:adaptRenderers()"
			],
			"description": "void EditBox::adaptRenderers()"
		},
		 "void ScrollView::startInertiaScroll()": {
			"prefix": "void ScrollView::startInertiaScroll()",
			"body": [
				"void ScrollView:startInertiaScroll()"
			],
			"description": "void ScrollView::startInertiaScroll()"
		},
		 "void CCBSequence::setCallbackChannel(CCBSequenceProperty* callbackChannel)": {
			"prefix": "void CCBSequence::setCallbackChannel(CCBSequenceProperty* callbackChannel)",
			"body": [
				"CCBSequence:setCallbackChannel(${1:CCBSequenceProperty* callbackChannel})"
			],
			"description": "void CCBSequence::setCallbackChannel(CCBSequenceProperty* callbackChannel)"
		},
		 "PageTurn3D *PageTurn3D::clone() const": {
			"prefix": "PageTurn3D *PageTurn3D::clone() const",
			"body": [
				"PageTurn3D *PageTurn3D:clone() "
			],
			"description": "PageTurn3D *PageTurn3D::clone() const"
		},
		 "Size NodeLoader::parsePropTypeSize(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "Size NodeLoader::parsePropTypeSize(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeSize(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "Size NodeLoader::parsePropTypeSize(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void Controller::onDisconnected()": {
			"prefix": "void Controller::onDisconnected()",
			"body": [
				"void Controller:onDisconnected()"
			],
			"description": "void Controller::onDisconnected()"
		},
		 "Ref* NotificationObserver::getSender() const": {
			"prefix": "Ref* NotificationObserver::getSender() const",
			"body": [
				"Ref* NotificationObserver:getSender() "
			],
			"description": "Ref* NotificationObserver::getSender() const"
		},
		 "MovementData *DataReaderHelper::decodeMovement(const rapidjson::Value& json, DataInfo *dataInfo)": {
			"prefix": "MovementData *DataReaderHelper::decodeMovement(const rapidjson::Value& json, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeMovement(${1:rapidjson:Value& json},${2:DataInfo *dataInfo})"
			],
			"description": "MovementData *DataReaderHelper::decodeMovement(const rapidjson::Value& json, DataInfo *dataInfo)"
		},
		 "void Texture2D::setMaxT(GLfloat maxT)": {
			"prefix": "void Texture2D::setMaxT(GLfloat maxT)",
			"body": [
				"Texture2D:setMaxT(${1:GLfloat maxT})"
			],
			"description": "void Texture2D::setMaxT(GLfloat maxT)"
		},
		 "void ImageView::setupTexture()": {
			"prefix": "void ImageView::setupTexture()",
			"body": [
				"void ImageView:setupTexture()"
			],
			"description": "void ImageView::setupTexture()"
		},
		 "Frame* ActionTimelineCache::loadInnerActionFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadInnerActionFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadInnerActionFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadInnerActionFrame(const rapidjson::Value& json)"
		},
		 "void ProtectedNode::insertProtectedChild(cocos2d::Node *child, int z)": {
			"prefix": "void ProtectedNode::insertProtectedChild(cocos2d::Node *child, int z)",
			"body": [
				"ProtectedNode:insertProtectedChild(${1:cocos2d:Node *child},${2:int z})"
			],
			"description": "void ProtectedNode::insertProtectedChild(cocos2d::Node *child, int z)"
		},
		 "void EditBox::setPlaceholderFontColor(const Color3B& color)": {
			"prefix": "void EditBox::setPlaceholderFontColor(const Color3B& color)",
			"body": [
				"EditBox:setPlaceholderFontColor(${1:Color3B& color})"
			],
			"description": "void EditBox::setPlaceholderFontColor(const Color3B& color)"
		},
		 "Layout* PageView::getPage(ssize_t index)": {
			"prefix": "Layout* PageView::getPage(ssize_t index)",
			"body": [
				"PageView:getPage(${1:ssize_t index})"
			],
			"description": "Layout* PageView::getPage(ssize_t index)"
		},
		 "void LabelBMFontLoader::onHandlePropTypeFntFile(Node * pNode, Node * pParent, const char * pPropertyName, const char* pFntFile, CCBReader * ccbReader)": {
			"prefix": "void LabelBMFontLoader::onHandlePropTypeFntFile(Node * pNode, Node * pParent, const char * pPropertyName, const char* pFntFile, CCBReader * ccbReader)",
			"body": [
				"LabelBMFontLoader:onHandlePropTypeFntFile(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:char* pFntFile},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelBMFontLoader::onHandlePropTypeFntFile(Node * pNode, Node * pParent, const char * pPropertyName, const char* pFntFile, CCBReader * ccbReader)"
		},
		 "void Mat4::transformVector(const Vec4& vector, Vec4* dst) const": {
			"prefix": "void Mat4::transformVector(const Vec4& vector, Vec4* dst) const",
			"body": [
				"Mat4:transformVector(${1:Vec4& vector},${2:Vec4* dst})"
			],
			"description": "void Mat4::transformVector(const Vec4& vector, Vec4* dst) const"
		},
		 "const Vector<Node*>& ScrollView::getChildren() const": {
			"prefix": "const Vector<Node*>& ScrollView::getChildren() const",
			"body": [
				" Vector<Node*>& ScrollView:getChildren() "
			],
			"description": "const Vector<Node*>& ScrollView::getChildren() const"
		},
		 "void TransformHelp::transformToParentWithoutScale(BaseData &node, const BaseData &parentNode)": {
			"prefix": "void TransformHelp::transformToParentWithoutScale(BaseData &node, const BaseData &parentNode)",
			"body": [
				"TransformHelp:transformToParentWithoutScale(${1:BaseData &node},${2:BaseData &parentNode})"
			],
			"description": "void TransformHelp::transformToParentWithoutScale(BaseData &node, const BaseData &parentNode)"
		},
		 "void SIOClientImpl::disconnectFromEndpoint(const std::string& endpoint)": {
			"prefix": "void SIOClientImpl::disconnectFromEndpoint(const std::string& endpoint)",
			"body": [
				"SIOClientImpl:disconnectFromEndpoint(${1:std:string& endpoint})"
			],
			"description": "void SIOClientImpl::disconnectFromEndpoint(const std::string& endpoint)"
		},
		 "inline unsigned int ZipUtils::checksumPvr(const unsigned int *data, ssize_t len)": {
			"prefix": "inline unsigned int ZipUtils::checksumPvr(const unsigned int *data, ssize_t len)",
			"body": [
				"unsigned int ZipUtils:checksumPvr(${1:unsigned int *data},${2:ssize_t len})"
			],
			"description": "inline unsigned int ZipUtils::checksumPvr(const unsigned int *data, ssize_t len)"
		},
		 "void TileMapAtlas::releaseMap()": {
			"prefix": "void TileMapAtlas::releaseMap()",
			"body": [
				"void TileMapAtlas:releaseMap()"
			],
			"description": "void TileMapAtlas::releaseMap()"
		},
		 "Rect NinePatchImageParser::parseCapInset() const": {
			"prefix": "Rect NinePatchImageParser::parseCapInset() const",
			"body": [
				"Rect NinePatchImageParser:parseCapInset() "
			],
			"description": "Rect NinePatchImageParser::parseCapInset() const"
		},
		 "void Mesh::setMaterial(Material* material)": {
			"prefix": "void Mesh::setMaterial(Material* material)",
			"body": [
				"Mesh:setMaterial(${1:Material* material})"
			],
			"description": "void Mesh::setMaterial(Material* material)"
		},
		 "Menu * Menu::create(MenuItem* item, ...)": {
			"prefix": "Menu * Menu::create(MenuItem* item, ...)",
			"body": [
				"* Menu:create(${1:MenuItem* item},${2:...})"
			],
			"description": "Menu * Menu::create(MenuItem* item, ...)"
		},
		 "std::string CCBReader::readUTF8()": {
			"prefix": "std::string CCBReader::readUTF8()",
			"body": [
				"std:string CCBReader:readUTF8()"
			],
			"description": "std::string CCBReader::readUTF8()"
		},
		 "const char* CCBAnimationManager::getRunningSequenceName()": {
			"prefix": "const char* CCBAnimationManager::getRunningSequenceName()",
			"body": [
				" char* CCBAnimationManager:getRunningSequenceName()"
			],
			"description": "const char* CCBAnimationManager::getRunningSequenceName()"
		},
		 "void cocos2d::NavMesh::drawObstacles()": {
			"prefix": "void cocos2d::NavMesh::drawObstacles()",
			"body": [
				"void cocos2d:NavMesh:drawObstacles()"
			],
			"description": "void cocos2d::NavMesh::drawObstacles()"
		},
		 "void Physics3DSliderConstraint::setDampingLimLin(float dampingLimLin)": {
			"prefix": "void Physics3DSliderConstraint::setDampingLimLin(float dampingLimLin)",
			"body": [
				"Physics3DSliderConstraint:setDampingLimLin(${1:float dampingLimLin})"
			],
			"description": "void Physics3DSliderConstraint::setDampingLimLin(float dampingLimLin)"
		},
		 "int Camera::getRenderOrder() const": {
			"prefix": "int Camera::getRenderOrder() const",
			"body": [
				"int Camera:getRenderOrder() "
			],
			"description": "int Camera::getRenderOrder() const"
		},
		 "void ScrollView::setScrollBarAutoHideTime(float autoHideTime)": {
			"prefix": "void ScrollView::setScrollBarAutoHideTime(float autoHideTime)",
			"body": [
				"ScrollView:setScrollBarAutoHideTime(${1:float autoHideTime})"
			],
			"description": "void ScrollView::setScrollBarAutoHideTime(float autoHideTime)"
		},
		 "void PageView::updateAllPagesSize()": {
			"prefix": "void PageView::updateAllPagesSize()",
			"body": [
				"void PageView:updateAllPagesSize()"
			],
			"description": "void PageView::updateAllPagesSize()"
		},
		 "SkeletonAnimation* SkeletonAnimation::createWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)": {
			"prefix": "SkeletonAnimation* SkeletonAnimation::createWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)",
			"body": [
				"SkeletonAnimation:createWithData (${1:spSkeletonData* skeletonData},${2:bool ownsSkeletonData})"
			],
			"description": "SkeletonAnimation* SkeletonAnimation::createWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)"
		},
		 "float Vec4::distanceSquared(const Vec4& v) const": {
			"prefix": "float Vec4::distanceSquared(const Vec4& v) const",
			"body": [
				"Vec4:distanceSquared(${1:Vec4& v})"
			],
			"description": "float Vec4::distanceSquared(const Vec4& v) const"
		},
		 "void ActionTimeline::gotoFrameAndPlay(int startIndex, int endIndex, int currentFrameIndex, bool loop)": {
			"prefix": "void ActionTimeline::gotoFrameAndPlay(int startIndex, int endIndex, int currentFrameIndex, bool loop)",
			"body": [
				"ActionTimeline:gotoFrameAndPlay(${1:int startIndex},${2:int endIndex},${3:int currentFrameIndex},${4:bool loop})"
			],
			"description": "void ActionTimeline::gotoFrameAndPlay(int startIndex, int endIndex, int currentFrameIndex, bool loop)"
		},
		 "GLuint IndexBuffer::getVBO() const": {
			"prefix": "GLuint IndexBuffer::getVBO() const",
			"body": [
				"GLuint IndexBuffer:getVBO() "
			],
			"description": "GLuint IndexBuffer::getVBO() const"
		},
		 "void ActionManager::removeActionAtIndex(ssize_t index, tHashElement *element)": {
			"prefix": "void ActionManager::removeActionAtIndex(ssize_t index, tHashElement *element)",
			"body": [
				"ActionManager:removeActionAtIndex(${1:ssize_t index},${2:tHashElement *element})"
			],
			"description": "void ActionManager::removeActionAtIndex(ssize_t index, tHashElement *element)"
		},
		 "void Layout::setBackGroundColorOpacity(GLubyte opacity)": {
			"prefix": "void Layout::setBackGroundColorOpacity(GLubyte opacity)",
			"body": [
				"Layout:setBackGroundColorOpacity(${1:GLubyte opacity})"
			],
			"description": "void Layout::setBackGroundColorOpacity(GLubyte opacity)"
		},
		 "void GLProgramState::setUniformTexture(GLint uniformLocation, Texture2D *texture)": {
			"prefix": "void GLProgramState::setUniformTexture(GLint uniformLocation, Texture2D *texture)",
			"body": [
				"GLProgramState:setUniformTexture(${1:GLint uniformLocation},${2:Texture2D *texture})"
			],
			"description": "void GLProgramState::setUniformTexture(GLint uniformLocation, Texture2D *texture)"
		},
		 "void TextureAtlas::setTexture(Texture2D * var)": {
			"prefix": "void TextureAtlas::setTexture(Texture2D * var)",
			"body": [
				"TextureAtlas:setTexture(${1:Texture2D * var})"
			],
			"description": "void TextureAtlas::setTexture(Texture2D * var)"
		},
		 "bool TimerScriptHandler::initWithScriptHandler(int handler, float seconds)": {
			"prefix": "bool TimerScriptHandler::initWithScriptHandler(int handler, float seconds)",
			"body": [
				"TimerScriptHandler:initWithScriptHandler(${1:int handler},${2:float seconds})"
			],
			"description": "bool TimerScriptHandler::initWithScriptHandler(int handler, float seconds)"
		},
		 "void EditBoxImplCommon::setInputFlag(EditBox::InputFlag inputFlag)": {
			"prefix": "void EditBoxImplCommon::setInputFlag(EditBox::InputFlag inputFlag)",
			"body": [
				"EditBoxImplCommon:setInputFlag(${1:EditBox:InputFlag inputFlag})"
			],
			"description": "void EditBoxImplCommon::setInputFlag(EditBox::InputFlag inputFlag)"
		},
		 "bool Spawn::initWithTwoActions(FiniteTimeAction *action1, FiniteTimeAction *action2)": {
			"prefix": "bool Spawn::initWithTwoActions(FiniteTimeAction *action1, FiniteTimeAction *action2)",
			"body": [
				"Spawn:initWithTwoActions(${1:FiniteTimeAction *action1},${2:FiniteTimeAction *action2})"
			],
			"description": "bool Spawn::initWithTwoActions(FiniteTimeAction *action1, FiniteTimeAction *action2)"
		},
		 "void InnerActionFrame::setStartFrameIndex(int frameIndex)": {
			"prefix": "void InnerActionFrame::setStartFrameIndex(int frameIndex)",
			"body": [
				"InnerActionFrame:setStartFrameIndex(${1:int frameIndex})"
			],
			"description": "void InnerActionFrame::setStartFrameIndex(int frameIndex)"
		},
		 "void Sprite3D::afterAsyncLoad(void* param)": {
			"prefix": "void Sprite3D::afterAsyncLoad(void* param)",
			"body": [
				"Sprite3D:afterAsyncLoad(${1:void* param})"
			],
			"description": "void Sprite3D::afterAsyncLoad(void* param)"
		},
		 "bool Layer::isSwallowsTouches() const": {
			"prefix": "bool Layer::isSwallowsTouches() const",
			"body": [
				"bool Layer:isSwallowsTouches() "
			],
			"description": "bool Layer::isSwallowsTouches() const"
		},
		 "bool IMEDispatcher::detachDelegateWithIME(IMEDelegate * delegate)": {
			"prefix": "bool IMEDispatcher::detachDelegateWithIME(IMEDelegate * delegate)",
			"body": [
				"IMEDispatcher:detachDelegateWithIME(${1:IMEDelegate * delegate})"
			],
			"description": "bool IMEDispatcher::detachDelegateWithIME(IMEDelegate * delegate)"
		},
		 "ssize_t RenderQueue::size() const": {
			"prefix": "ssize_t RenderQueue::size() const",
			"body": [
				"ssize_t RenderQueue:size() "
			],
			"description": "ssize_t RenderQueue::size() const"
		},
		 "void TriggerMng::parse(const rapidjson::Value &root)": {
			"prefix": "void TriggerMng::parse(const rapidjson::Value &root)",
			"body": [
				"TriggerMng:parse(${1:rapidjson:Value &root})"
			],
			"description": "void TriggerMng::parse(const rapidjson::Value &root)"
		},
		 "bool Text::isTouchScaleChangeEnabled()const": {
			"prefix": "bool Text::isTouchScaleChangeEnabled()const",
			"body": [
				"bool Text:isTouchScaleChangeEnabled()"
			],
			"description": "bool Text::isTouchScaleChangeEnabled()const"
		},
		 "void EditBox::keyboardDidShow(IMEKeyboardNotificationInfo& info)": {
			"prefix": "void EditBox::keyboardDidShow(IMEKeyboardNotificationInfo& info)",
			"body": [
				"EditBox:keyboardDidShow(${1:IMEKeyboardNotificationInfo& info})"
			],
			"description": "void EditBox::keyboardDidShow(IMEKeyboardNotificationInfo& info)"
		},
		 "std::vector<Vec3> Bundle3D::getTrianglesList(const std::string& path)": {
			"prefix": "std::vector<Vec3> Bundle3D::getTrianglesList(const std::string& path)",
			"body": [
				"Bundle3D:getTrianglesList(${1:std:string& path})"
			],
			"description": "std::vector<Vec3> Bundle3D::getTrianglesList(const std::string& path)"
		},
		 "const char* Properties::getNamespace() const": {
			"prefix": "const char* Properties::getNamespace() const",
			"body": [
				" char* Properties:getNamespace() "
			],
			"description": "const char* Properties::getNamespace() const"
		},
		 "void TextureAtlas::mapBuffers()": {
			"prefix": "void TextureAtlas::mapBuffers()",
			"body": [
				"void TextureAtlas:mapBuffers()"
			],
			"description": "void TextureAtlas::mapBuffers()"
		},
		 "MeshIndexData* MeshVertexData::getMeshIndexDataById(const std::string& id) const": {
			"prefix": "MeshIndexData* MeshVertexData::getMeshIndexDataById(const std::string& id) const",
			"body": [
				"MeshVertexData:getMeshIndexDataById(${1:std:string& id})"
			],
			"description": "MeshIndexData* MeshVertexData::getMeshIndexDataById(const std::string& id) const"
		},
		 "Node * CCBReader::readNodeGraph(Node * pParent)": {
			"prefix": "Node * CCBReader::readNodeGraph(Node * pParent)",
			"body": [
				"* CCBReader:readNodeGraph(${1:Node * pParent})"
			],
			"description": "Node * CCBReader::readNodeGraph(Node * pParent)"
		},
		 "void Button::setZoomScale(float scale)": {
			"prefix": "void Button::setZoomScale(float scale)",
			"body": [
				"Button:setZoomScale(${1:float scale})"
			],
			"description": "void Button::setZoomScale(float scale)"
		},
		 "EaseBounceOut* EaseBounceOut::clone() const": {
			"prefix": "EaseBounceOut* EaseBounceOut::clone() const",
			"body": [
				"EaseBounceOut* EaseBounceOut:clone() "
			],
			"description": "EaseBounceOut* EaseBounceOut::clone() const"
		},
		 "void EventDispatcher::addEventListener(EventListener* listener)": {
			"prefix": "void EventDispatcher::addEventListener(EventListener* listener)",
			"body": [
				"EventDispatcher:addEventListener(${1:EventListener* listener})"
			],
			"description": "void EventDispatcher::addEventListener(EventListener* listener)"
		},
		 "ActionEase* EaseExponentialOut::reverse() const": {
			"prefix": "ActionEase* EaseExponentialOut::reverse() const",
			"body": [
				"ActionEase* EaseExponentialOut:reverse() "
			],
			"description": "ActionEase* EaseExponentialOut::reverse() const"
		},
		 "void BoneNode::visitSkins(cocos2d::Renderer* renderer, BoneNode* bone) const": {
			"prefix": "void BoneNode::visitSkins(cocos2d::Renderer* renderer, BoneNode* bone) const",
			"body": [
				"BoneNode:visitSkins(${1:cocos2d:Renderer* renderer},${2:BoneNode* bone})"
			],
			"description": "void BoneNode::visitSkins(cocos2d::Renderer* renderer, BoneNode* bone) const"
		},
		 "MenuItemFont * MenuItemFont::create(const std::string& value, const ccMenuCallback& callback)": {
			"prefix": "MenuItemFont * MenuItemFont::create(const std::string& value, const ccMenuCallback& callback)",
			"body": [
				"* MenuItemFont:create(${1:std:string& value},${2:ccMenuCallback& callback})"
			],
			"description": "MenuItemFont * MenuItemFont::create(const std::string& value, const ccMenuCallback& callback)"
		},
		 "spTrackEntry* SkeletonAnimation::setAnimation (int trackIndex, const std::string& name, bool loop)": {
			"prefix": "spTrackEntry* SkeletonAnimation::setAnimation (int trackIndex, const std::string& name, bool loop)",
			"body": [
				"SkeletonAnimation:setAnimation (${1:int trackIndex},${2:std:string& name},${3:bool loop})"
			],
			"description": "spTrackEntry* SkeletonAnimation::setAnimation (int trackIndex, const std::string& name, bool loop)"
		},
		 "float PageView::getPositionYByIndex(ssize_t idx)const": {
			"prefix": "float PageView::getPositionYByIndex(ssize_t idx)const",
			"body": [
				"PageView:getPositionYByIndex(${1:ssize_t idx})"
			],
			"description": "float PageView::getPositionYByIndex(ssize_t idx)const"
		},
		 "void Scheduler::resumeTargets(const std::set<void*>& targetsToResume)": {
			"prefix": "void Scheduler::resumeTargets(const std::set<void*>& targetsToResume)",
			"body": [
				"Scheduler:resumeTargets(${1:std:set<void*>& targetsToResume})"
			],
			"description": "void Scheduler::resumeTargets(const std::set<void*>& targetsToResume)"
		},
		 "bool FileUtils::writeValueMapToFile(ValueMap& dict, const std::string& fullPath)": {
			"prefix": "bool FileUtils::writeValueMapToFile(ValueMap& dict, const std::string& fullPath)",
			"body": [
				"FileUtils:writeValueMapToFile(${1:ValueMap& dict},${2:std:string& fullPath})"
			],
			"description": "bool FileUtils::writeValueMapToFile(ValueMap& dict, const std::string& fullPath)"
		},
		 "Sequence*  CCBAnimationManager::actionForCallbackChannel(CCBSequenceProperty* channel)": {
			"prefix": "Sequence*  CCBAnimationManager::actionForCallbackChannel(CCBSequenceProperty* channel)",
			"body": [
				"CCBAnimationManager:actionForCallbackChannel(${1:CCBSequenceProperty* channel})"
			],
			"description": "Sequence*  CCBAnimationManager::actionForCallbackChannel(CCBSequenceProperty* channel)"
		},
		 "bool Frustum::initFrustum(const Camera* camera)": {
			"prefix": "bool Frustum::initFrustum(const Camera* camera)",
			"body": [
				"Frustum:initFrustum(${1:Camera* camera})"
			],
			"description": "bool Frustum::initFrustum(const Camera* camera)"
		},
		 "float PhysicsShapePolygon::calculateMoment(float mass, const Vec2* points, int count, const Vec2& offset)": {
			"prefix": "float PhysicsShapePolygon::calculateMoment(float mass, const Vec2* points, int count, const Vec2& offset)",
			"body": [
				"PhysicsShapePolygon:calculateMoment(${1:float mass},${2:Vec2* points},${3:int count},${4:Vec2& offset})"
			],
			"description": "float PhysicsShapePolygon::calculateMoment(float mass, const Vec2* points, int count, const Vec2& offset)"
		},
		 "bool Properties::parseVec3(const char* str, Vec3* out)": {
			"prefix": "bool Properties::parseVec3(const char* str, Vec3* out)",
			"body": [
				"Properties:parseVec3(${1:char* str},${2:Vec3* out})"
			],
			"description": "bool Properties::parseVec3(const char* str, Vec3* out)"
		},
		 "Vec4* MeshSkin::getMatrixPalette()": {
			"prefix": "Vec4* MeshSkin::getMatrixPalette()",
			"body": [
				"Vec4* MeshSkin:getMatrixPalette()"
			],
			"description": "Vec4* MeshSkin::getMatrixPalette()"
		},
		 "void Widget::copySpecialProperties(Widget* model)": {
			"prefix": "void Widget::copySpecialProperties(Widget* model)",
			"body": [
				"Widget:copySpecialProperties(${1:Widget* model})"
			],
			"description": "void Widget::copySpecialProperties(Widget* model)"
		},
		 "void ActionTimeline::step(float delta)": {
			"prefix": "void ActionTimeline::step(float delta)",
			"body": [
				"ActionTimeline:step(${1:float delta})"
			],
			"description": "void ActionTimeline::step(float delta)"
		},
		 "void ScrollViewBar::setAutoHideEnabled(bool autoHideEnabled)": {
			"prefix": "void ScrollViewBar::setAutoHideEnabled(bool autoHideEnabled)",
			"body": [
				"ScrollViewBar:setAutoHideEnabled(${1:bool autoHideEnabled})"
			],
			"description": "void ScrollViewBar::setAutoHideEnabled(bool autoHideEnabled)"
		},
		 "TransitionProgress* TransitionProgress::create(float t, Scene* scene)": {
			"prefix": "TransitionProgress* TransitionProgress::create(float t, Scene* scene)",
			"body": [
				"TransitionProgress:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionProgress* TransitionProgress::create(float t, Scene* scene)"
		},
		 "bool Sprite::initWithPolygon(const cocos2d::PolygonInfo &info)": {
			"prefix": "bool Sprite::initWithPolygon(const cocos2d::PolygonInfo &info)",
			"body": [
				"Sprite:initWithPolygon(${1:cocos2d:PolygonInfo &info})"
			],
			"description": "bool Sprite::initWithPolygon(const cocos2d::PolygonInfo &info)"
		},
		 "float PhysicsBody::getRotation()": {
			"prefix": "float PhysicsBody::getRotation()",
			"body": [
				"float PhysicsBody:getRotation()"
			],
			"description": "float PhysicsBody::getRotation()"
		},
		 "bool Follow::isDone() const": {
			"prefix": "bool Follow::isDone() const",
			"body": [
				"bool Follow:isDone() "
			],
			"description": "bool Follow::isDone() const"
		},
		 "GLubyte Node::getOpacity(void) const": {
			"prefix": "GLubyte Node::getOpacity(void) const",
			"body": [
				"Node:getOpacity(${1:void})"
			],
			"description": "GLubyte Node::getOpacity(void) const"
		},
		 "void VertexBuffer::recreateVBO() const": {
			"prefix": "void VertexBuffer::recreateVBO() const",
			"body": [
				"void VertexBuffer:recreateVBO() "
			],
			"description": "void VertexBuffer::recreateVBO() const"
		},
		 "float Node::getRotation() const": {
			"prefix": "float Node::getRotation() const",
			"body": [
				"float Node:getRotation() "
			],
			"description": "float Node::getRotation() const"
		},
		 "Vec2 Vec2::getNormalized() const": {
			"prefix": "Vec2 Vec2::getNormalized() const",
			"body": [
				"Vec2 Vec2:getNormalized() "
			],
			"description": "Vec2 Vec2::getNormalized() const"
		},
		 "SocketIO* SocketIO::getInstance()": {
			"prefix": "SocketIO* SocketIO::getInstance()",
			"body": [
				"SocketIO* SocketIO:getInstance()"
			],
			"description": "SocketIO* SocketIO::getInstance()"
		},
		 "Ref* CCBAnimationManager::getObject(Node *pNode, const std::string& propName)": {
			"prefix": "Ref* CCBAnimationManager::getObject(Node *pNode, const std::string& propName)",
			"body": [
				"CCBAnimationManager:getObject(${1:Node *pNode},${2:std:string& propName})"
			],
			"description": "Ref* CCBAnimationManager::getObject(Node *pNode, const std::string& propName)"
		},
		 "void Vec2::clamp(const Vec2& v, const Vec2& min, const Vec2& max, Vec2* dst)": {
			"prefix": "void Vec2::clamp(const Vec2& v, const Vec2& min, const Vec2& max, Vec2* dst)",
			"body": [
				"Vec2:clamp(${1:Vec2& v},${2:Vec2& min},${3:Vec2& max},${4:Vec2* dst})"
			],
			"description": "void Vec2::clamp(const Vec2& v, const Vec2& min, const Vec2& max, Vec2* dst)"
		},
		 "EaseCubicActionIn* EaseCubicActionIn::reverse() const": {
			"prefix": "EaseCubicActionIn* EaseCubicActionIn::reverse() const",
			"body": [
				"EaseCubicActionIn* EaseCubicActionIn:reverse() "
			],
			"description": "EaseCubicActionIn* EaseCubicActionIn::reverse() const"
		},
		 "ActionInterval* TransitionFadeUp::actionWithSize(const Size& size)": {
			"prefix": "ActionInterval* TransitionFadeUp::actionWithSize(const Size& size)",
			"body": [
				"TransitionFadeUp:actionWithSize(${1:Size& size})"
			],
			"description": "ActionInterval* TransitionFadeUp::actionWithSize(const Size& size)"
		},
		 "flatbuffers::FlatBufferBuilder *builder)": {
			"prefix": "flatbuffers::FlatBufferBuilder *builder)",
			"body": [
				"flatbuffers:FlatBufferBuilder *builder)"
			],
			"description": "flatbuffers::FlatBufferBuilder *builder)"
		},
		 "void cocos2d::NavMeshObstacle::removeFrom(dtTileCache *tileCache)": {
			"prefix": "void cocos2d::NavMeshObstacle::removeFrom(dtTileCache *tileCache)",
			"body": [
				"cocos2d:NavMeshObstacle:removeFrom(${1:dtTileCache *tileCache})"
			],
			"description": "void cocos2d::NavMeshObstacle::removeFrom(dtTileCache *tileCache)"
		},
		 "void AudioEngine::addTask(const std::function<void()>& task)": {
			"prefix": "void AudioEngine::addTask(const std::function<void()>& task)",
			"body": [
				"void AudioEngine:addTask( std:function<void()>& task)"
			],
			"description": "void AudioEngine::addTask(const std::function<void()>& task)"
		},
		 "Vec2 PhysicsJointSpring::getAnchr2() const": {
			"prefix": "Vec2 PhysicsJointSpring::getAnchr2() const",
			"body": [
				"Vec2 PhysicsJointSpring:getAnchr2() "
			],
			"description": "Vec2 PhysicsJointSpring::getAnchr2() const"
		},
		 "unsigned int AutoPolygon::getSquareValue(const unsigned int& x, const unsigned int& y, const Rect& rect, const float& threshold)": {
			"prefix": "unsigned int AutoPolygon::getSquareValue(const unsigned int& x, const unsigned int& y, const Rect& rect, const float& threshold)",
			"body": [
				"int AutoPolygon:getSquareValue(${1:unsigned int& x},${2:unsigned int& y},${3:Rect& rect},${4:float& threshold})"
			],
			"description": "unsigned int AutoPolygon::getSquareValue(const unsigned int& x, const unsigned int& y, const Rect& rect, const float& threshold)"
		},
		 "bool GLProgram::initWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)": {
			"prefix": "bool GLProgram::initWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)",
			"body": [
				"GLProgram:initWithFilenames(${1:std:string& vShaderFilename},${2:std:string& fShaderFilename},${3:std:string& compileTimeDefines})"
			],
			"description": "bool GLProgram::initWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)"
		},
		 "void Menu::onTouchCancelled(Touch* touch, Event* event)": {
			"prefix": "void Menu::onTouchCancelled(Touch* touch, Event* event)",
			"body": [
				"Menu:onTouchCancelled(${1:Touch* touch},${2:Event* event})"
			],
			"description": "void Menu::onTouchCancelled(Touch* touch, Event* event)"
		},
		 "Label* Label::createWithSystemFont(const std::string& text, const std::string& font, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)": {
			"prefix": "Label* Label::createWithSystemFont(const std::string& text, const std::string& font, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)",
			"body": [
				"Label:createWithSystemFont(${1:std:string& text},${2:std:string& font},${3:float fontSize},${4:Size& dimensions /* = Size:ZERO */},${5:TextHAlignment hAlignment /* = TextHAlignment:LEFT */},${6:TextVAlignment vAlignment /* = TextVAlignment:TOP */})"
			],
			"description": "Label* Label::createWithSystemFont(const std::string& text, const std::string& font, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)"
		},
		 "int Mesh::getVertexSizeInBytes() const": {
			"prefix": "int Mesh::getVertexSizeInBytes() const",
			"body": [
				"int Mesh:getVertexSizeInBytes() "
			],
			"description": "int Mesh::getVertexSizeInBytes() const"
		},
		 "void Scheduler::removeHashElement(_hashSelectorEntry *element)": {
			"prefix": "void Scheduler::removeHashElement(_hashSelectorEntry *element)",
			"body": [
				"Scheduler:removeHashElement(${1:_hashSelectorEntry *element})"
			],
			"description": "void Scheduler::removeHashElement(_hashSelectorEntry *element)"
		},
		 "Sequence* Sequence::reverse() const": {
			"prefix": "Sequence* Sequence::reverse() const",
			"body": [
				"Sequence* Sequence:reverse() "
			],
			"description": "Sequence* Sequence::reverse() const"
		},
		 "static inline std::string convertPathFormatToUnixStyle(const std::string& path)": {
			"prefix": "static inline std::string convertPathFormatToUnixStyle(const std::string& path)",
			"body": [
				"inline std:string convertPathFormatToUnixStyle(${1:std:string& path})"
			],
			"description": "static inline std::string convertPathFormatToUnixStyle(const std::string& path)"
		},
		 "EaseExponentialOut* EaseExponentialOut::clone() const": {
			"prefix": "EaseExponentialOut* EaseExponentialOut::clone() const",
			"body": [
				"EaseExponentialOut* EaseExponentialOut:clone() "
			],
			"description": "EaseExponentialOut* EaseExponentialOut::clone() const"
		},
		 "bool CallFuncN::initWithFunction(const std::function<void (Node *)> &func)": {
			"prefix": "bool CallFuncN::initWithFunction(const std::function<void (Node *)> &func)",
			"body": [
				"CallFuncN:initWithFunction(${1:std:function<void (Node *})"
			],
			"description": "bool CallFuncN::initWithFunction(const std::function<void (Node *)> &func)"
		},
		 "PhysicsBody* PhysicsBody::createEdgeSegment(const Vec2& a, const Vec2& b, const PhysicsMaterial& material, float border/* = 1*/)": {
			"prefix": "PhysicsBody* PhysicsBody::createEdgeSegment(const Vec2& a, const Vec2& b, const PhysicsMaterial& material, float border/* = 1*/)",
			"body": [
				"PhysicsBody:createEdgeSegment(${1:Vec2& a},${2:Vec2& b},${3:PhysicsMaterial& material},${4:float border/* = 1*/})"
			],
			"description": "PhysicsBody* PhysicsBody::createEdgeSegment(const Vec2& a, const Vec2& b, const PhysicsMaterial& material, float border/* = 1*/)"
		},
		 "TransitionZoomFlipAngular* TransitionZoomFlipAngular::create(float t, Scene* s, Orientation o)": {
			"prefix": "TransitionZoomFlipAngular* TransitionZoomFlipAngular::create(float t, Scene* s, Orientation o)",
			"body": [
				"TransitionZoomFlipAngular:create(${1:float t},${2:Scene* s},${3:Orientation o})"
			],
			"description": "TransitionZoomFlipAngular* TransitionZoomFlipAngular::create(float t, Scene* s, Orientation o)"
		},
		 "int Layout::findFarthestChildWidgetIndex(FocusDirection direction, cocos2d::ui::Widget *baseWidget)": {
			"prefix": "int Layout::findFarthestChildWidgetIndex(FocusDirection direction, cocos2d::ui::Widget *baseWidget)",
			"body": [
				"Layout:findFarthestChildWidgetIndex(${1:FocusDirection direction},${2:cocos2d:ui:Widget *baseWidget})"
			],
			"description": "int Layout::findFarthestChildWidgetIndex(FocusDirection direction, cocos2d::ui::Widget *baseWidget)"
		},
		 "void DrawNode::drawDot(const Vec2 &pos, float radius, const Color4F &color)": {
			"prefix": "void DrawNode::drawDot(const Vec2 &pos, float radius, const Color4F &color)",
			"body": [
				"DrawNode:drawDot(${1:Vec2 &pos},${2:float radius},${3:Color4F &color})"
			],
			"description": "void DrawNode::drawDot(const Vec2 &pos, float radius, const Color4F &color)"
		},
		 "void CameraBackgroundSkyBoxBrush::initBuffer()": {
			"prefix": "void CameraBackgroundSkyBoxBrush::initBuffer()",
			"body": [
				"void CameraBackgroundSkyBoxBrush:initBuffer()"
			],
			"description": "void CameraBackgroundSkyBoxBrush::initBuffer()"
		},
		 "void Mat4::subtract(const Mat4& m1, const Mat4& m2, Mat4* dst)": {
			"prefix": "void Mat4::subtract(const Mat4& m1, const Mat4& m2, Mat4* dst)",
			"body": [
				"Mat4:subtract(${1:Mat4& m1},${2:Mat4& m2},${3:Mat4* dst})"
			],
			"description": "void Mat4::subtract(const Mat4& m1, const Mat4& m2, Mat4* dst)"
		},
		 "bool PhysicsWorld::init(Scene& scene)": {
			"prefix": "bool PhysicsWorld::init(Scene& scene)",
			"body": [
				"PhysicsWorld:init(${1:Scene& scene})"
			],
			"description": "bool PhysicsWorld::init(Scene& scene)"
		},
		 "void WidgetPropertiesReader0250::setPropsForScrollViewFromJsonDictionary(Widget*widget,const rapidjson::Value& options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForScrollViewFromJsonDictionary(Widget*widget,const rapidjson::Value& options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForScrollViewFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value& options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForScrollViewFromJsonDictionary(Widget*widget,const rapidjson::Value& options)"
		},
		 "bool BMFontConfiguration::initWithFNTfile(const std::string& FNTfile)": {
			"prefix": "bool BMFontConfiguration::initWithFNTfile(const std::string& FNTfile)",
			"body": [
				"BMFontConfiguration:initWithFNTfile(${1:std:string& FNTfile})"
			],
			"description": "bool BMFontConfiguration::initWithFNTfile(const std::string& FNTfile)"
		},
		 "void TiledGrid3D::calculateVertexPoints(void)": {
			"prefix": "void TiledGrid3D::calculateVertexPoints(void)",
			"body": [
				"TiledGrid3D:calculateVertexPoints(${1:void})"
			],
			"description": "void TiledGrid3D::calculateVertexPoints(void)"
		},
		 "bool CCBReader::readCallbackKeyframesForSeq(CCBSequence* seq)": {
			"prefix": "bool CCBReader::readCallbackKeyframesForSeq(CCBSequence* seq)",
			"body": [
				"CCBReader:readCallbackKeyframesForSeq(${1:CCBSequence* seq})"
			],
			"description": "bool CCBReader::readCallbackKeyframesForSeq(CCBSequence* seq)"
		},
		 "static tinyxml2::XMLElement* getXMLNodeForKey(const char* pKey, tinyxml2::XMLElement** rootNode, tinyxml2::XMLDocument **doc)": {
			"prefix": "static tinyxml2::XMLElement* getXMLNodeForKey(const char* pKey, tinyxml2::XMLElement** rootNode, tinyxml2::XMLDocument **doc)",
			"body": [
				"tinyxml2:XMLElement* getXMLNodeForKey(${1:char* pKey},${2:tinyxml2:XMLElement** rootNode},${3:tinyxml2:XMLDocument **doc})"
			],
			"description": "static tinyxml2::XMLElement* getXMLNodeForKey(const char* pKey, tinyxml2::XMLElement** rootNode, tinyxml2::XMLDocument **doc)"
		},
		 "const float PolygonInfo::getArea() const": {
			"prefix": "const float PolygonInfo::getArea() const",
			"body": [
				" float PolygonInfo:getArea() "
			],
			"description": "const float PolygonInfo::getArea() const"
		},
		 "LayoutParameter* LayoutParameter::clone()": {
			"prefix": "LayoutParameter* LayoutParameter::clone()",
			"body": [
				"LayoutParameter* LayoutParameter:clone()"
			],
			"description": "LayoutParameter* LayoutParameter::clone()"
		},
		 "void SimpleAudioEngine::stopEffect(unsigned int nSoundId)": {
			"prefix": "void SimpleAudioEngine::stopEffect(unsigned int nSoundId)",
			"body": [
				"SimpleAudioEngine:stopEffect(${1:unsigned int nSoundId})"
			],
			"description": "void SimpleAudioEngine::stopEffect(unsigned int nSoundId)"
		},
		 "void Node::stopAllActionsByTag(int tag)": {
			"prefix": "void Node::stopAllActionsByTag(int tag)",
			"body": [
				"Node:stopAllActionsByTag(${1:int tag})"
			],
			"description": "void Node::stopAllActionsByTag(int tag)"
		},
		 "Color4F * NodeLoader::parsePropTypeColor4FVar(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "Color4F * NodeLoader::parsePropTypeColor4FVar(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"* NodeLoader:parsePropTypeColor4FVar(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "Color4F * NodeLoader::parsePropTypeColor4FVar(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "const Color3B& Node::getColor(void) const": {
			"prefix": "const Color3B& Node::getColor(void) const",
			"body": [
				"Color3B& Node:getColor(${1:void})"
			],
			"description": "const Color3B& Node::getColor(void) const"
		},
		 "const Mat4& Bone3D::getWorldMat()": {
			"prefix": "const Mat4& Bone3D::getWorldMat()",
			"body": [
				" Mat4& Bone3D:getWorldMat()"
			],
			"description": "const Mat4& Bone3D::getWorldMat()"
		},
		 "void Widget::initRenderer()": {
			"prefix": "void Widget::initRenderer()",
			"body": [
				"void Widget:initRenderer()"
			],
			"description": "void Widget::initRenderer()"
		},
		 "void Animate3D::stop()": {
			"prefix": "void Animate3D::stop()",
			"body": [
				"void Animate3D:stop()"
			],
			"description": "void Animate3D::stop()"
		},
		 "int __NotificationCenter::removeAllObservers(Ref *target)": {
			"prefix": "int __NotificationCenter::removeAllObservers(Ref *target)",
			"body": [
				"__NotificationCenter:removeAllObservers(${1:Ref *target})"
			],
			"description": "int __NotificationCenter::removeAllObservers(Ref *target)"
		},
		 "Offset<flatbuffers::InnerActionFrame> FlatBuffersSerialize::createInnerActionFrame(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<flatbuffers::InnerActionFrame> FlatBuffersSerialize::createInnerActionFrame(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createInnerActionFrame(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<flatbuffers::InnerActionFrame> FlatBuffersSerialize::createInnerActionFrame(const tinyxml2::XMLElement *objectData)"
		},
		 "float CCBReader::getResolutionScale()": {
			"prefix": "float CCBReader::getResolutionScale()",
			"body": [
				"float CCBReader:getResolutionScale()"
			],
			"description": "float CCBReader::getResolutionScale()"
		},
		 "void Node::removeChildByTag(int tag, bool cleanup/* = true */)": {
			"prefix": "void Node::removeChildByTag(int tag, bool cleanup/* = true */)",
			"body": [
				"Node:removeChildByTag(${1:int tag},${2:bool cleanup/* = true */})"
			],
			"description": "void Node::removeChildByTag(int tag, bool cleanup/* = true */)"
		},
		 "void RenderTexture::clear(float r, float g, float b, float a)": {
			"prefix": "void RenderTexture::clear(float r, float g, float b, float a)",
			"body": [
				"RenderTexture:clear(${1:float r},${2:float g},${3:float b},${4:float a})"
			],
			"description": "void RenderTexture::clear(float r, float g, float b, float a)"
		},
		 "Node* CSLoader::loadParticle(const rapidjson::Value& json)": {
			"prefix": "Node* CSLoader::loadParticle(const rapidjson::Value& json)",
			"body": [
				"CSLoader:loadParticle(${1:rapidjson:Value& json})"
			],
			"description": "Node* CSLoader::loadParticle(const rapidjson::Value& json)"
		},
		 "void ProtectedNode::removeProtectedChild(cocos2d::Node *child, bool cleanup)": {
			"prefix": "void ProtectedNode::removeProtectedChild(cocos2d::Node *child, bool cleanup)",
			"body": [
				"ProtectedNode:removeProtectedChild(${1:cocos2d:Node *child},${2:bool cleanup})"
			],
			"description": "void ProtectedNode::removeProtectedChild(cocos2d::Node *child, bool cleanup)"
		},
		 "void EventFrame::init()": {
			"prefix": "void EventFrame::init()",
			"body": [
				"void EventFrame:init()"
			],
			"description": "void EventFrame::init()"
		},
		 "PhysicsShapeBox* PhysicsShapeBox::create(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)": {
			"prefix": "PhysicsShapeBox* PhysicsShapeBox::create(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)",
			"body": [
				"PhysicsShapeBox:create(${1:Size& size},${2:PhysicsMaterial& material/* = MaterialDefault*/},${3:Vec2& offset/* = Vec2(0},${4:0})"
			],
			"description": "PhysicsShapeBox* PhysicsShapeBox::create(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)"
		},
		 "float Physics3DRigidBody::getInvMass() const": {
			"prefix": "float Physics3DRigidBody::getInvMass() const",
			"body": [
				"float Physics3DRigidBody:getInvMass() "
			],
			"description": "float Physics3DRigidBody::getInvMass() const"
		},
		 "const std::string& Text::getString() const": {
			"prefix": "const std::string& Text::getString() const",
			"body": [
				" std:string& Text:getString() "
			],
			"description": "const std::string& Text::getString() const"
		},
		 "float Physics3DConeTwistConstraint::getTwistSpan() const": {
			"prefix": "float Physics3DConeTwistConstraint::getTwistSpan() const",
			"body": [
				"float Physics3DConeTwistConstraint:getTwistSpan() "
			],
			"description": "float Physics3DConeTwistConstraint::getTwistSpan() const"
		},
		 "ParticleRain* ParticleRain::create()": {
			"prefix": "ParticleRain* ParticleRain::create()",
			"body": [
				"ParticleRain* ParticleRain:create()"
			],
			"description": "ParticleRain* ParticleRain::create()"
		},
		 "void Image::premultipliedAlpha()": {
			"prefix": "void Image::premultipliedAlpha()",
			"body": [
				"void Image:premultipliedAlpha()"
			],
			"description": "void Image::premultipliedAlpha()"
		},
		 "Rect TMXTilesetInfo::getRectForGID(uint32_t gid)": {
			"prefix": "Rect TMXTilesetInfo::getRectForGID(uint32_t gid)",
			"body": [
				"TMXTilesetInfo:getRectForGID(${1:uint32_t gid})"
			],
			"description": "Rect TMXTilesetInfo::getRectForGID(uint32_t gid)"
		},
		 "void SkeletonNode::updateVertices()": {
			"prefix": "void SkeletonNode::updateVertices()",
			"body": [
				"void SkeletonNode:updateVertices()"
			],
			"description": "void SkeletonNode::updateVertices()"
		},
		 "bool Waves::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)": {
			"prefix": "bool Waves::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)",
			"body": [
				"Waves:initWithDuration(${1:float duration},${2:Size& gridSize},${3:unsigned int waves},${4:float amplitude},${5:bool horizontal},${6:bool vertical})"
			],
			"description": "bool Waves::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)"
		},
		 "bool Label::setCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "bool Label::setCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"Label:setCharMap(${1:Texture2D* texture},${2:int itemWidth},${3:int itemHeight},${4:int startCharMap})"
			],
			"description": "bool Label::setCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "const std::string& TextFieldTTF::getString() const": {
			"prefix": "const std::string& TextFieldTTF::getString() const",
			"body": [
				" std:string& TextFieldTTF:getString() "
			],
			"description": "const std::string& TextFieldTTF::getString() const"
		},
		 "GLProgramState* GLProgramState::getOrCreateWithGLProgram(GLProgram *glprogram)": {
			"prefix": "GLProgramState* GLProgramState::getOrCreateWithGLProgram(GLProgram *glprogram)",
			"body": [
				"GLProgramState:getOrCreateWithGLProgram(${1:GLProgram *glprogram})"
			],
			"description": "GLProgramState* GLProgramState::getOrCreateWithGLProgram(GLProgram *glprogram)"
		},
		 "float ComAudio::getEffectsVolume()": {
			"prefix": "float ComAudio::getEffectsVolume()",
			"body": [
				"float ComAudio:getEffectsVolume()"
			],
			"description": "float ComAudio::getEffectsVolume()"
		},
		 "SkeletonAnimation* SkeletonAnimation::createWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)": {
			"prefix": "SkeletonAnimation* SkeletonAnimation::createWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)",
			"body": [
				"SkeletonAnimation:createWithFile (${1:std:string& skeletonDataFile},${2:std:string& atlasFile},${3:float scale})"
			],
			"description": "SkeletonAnimation* SkeletonAnimation::createWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)"
		},
		 "static bool checkFileName(const std::string& fullPath, const std::string& filename)": {
			"prefix": "static bool checkFileName(const std::string& fullPath, const std::string& filename)",
			"body": [
				"bool checkFileName(${1:std:string& fullPath},${2:std:string& filename})"
			],
			"description": "static bool checkFileName(const std::string& fullPath, const std::string& filename)"
		},
		 "bool IndexBuffer::init(IndexBuffer::IndexType type, int number, GLenum usage/* = GL_STATIC_DRAW*/)": {
			"prefix": "bool IndexBuffer::init(IndexBuffer::IndexType type, int number, GLenum usage/* = GL_STATIC_DRAW*/)",
			"body": [
				"IndexBuffer:init(${1:IndexBuffer:IndexType type},${2:int number},${3:GLenum usage/* = GL_STATIC_DRAW*/})"
			],
			"description": "bool IndexBuffer::init(IndexBuffer::IndexType type, int number, GLenum usage/* = GL_STATIC_DRAW*/)"
		},
		 "void Renderer::pushGroup(int renderQueueID)": {
			"prefix": "void Renderer::pushGroup(int renderQueueID)",
			"body": [
				"Renderer:pushGroup(${1:int renderQueueID})"
			],
			"description": "void Renderer::pushGroup(int renderQueueID)"
		},
		 "bool Configuration::init()": {
			"prefix": "bool Configuration::init()",
			"body": [
				"bool Configuration:init()"
			],
			"description": "bool Configuration::init()"
		},
		 "Vec3 DirectionLight::getDirection() const": {
			"prefix": "Vec3 DirectionLight::getDirection() const",
			"body": [
				"Vec3 DirectionLight:getDirection() "
			],
			"description": "Vec3 DirectionLight::getDirection() const"
		},
		 "void SIOClientImpl::handshakeResponse(HttpClient *sender, HttpResponse *response)": {
			"prefix": "void SIOClientImpl::handshakeResponse(HttpClient *sender, HttpResponse *response)",
			"body": [
				"SIOClientImpl:handshakeResponse(${1:HttpClient *sender},${2:HttpResponse *response})"
			],
			"description": "void SIOClientImpl::handshakeResponse(HttpClient *sender, HttpResponse *response)"
		},
		 "void Sprite::setSkewY(float sy)": {
			"prefix": "void Sprite::setSkewY(float sy)",
			"body": [
				"Sprite:setSkewY(${1:float sy})"
			],
			"description": "void Sprite::setSkewY(float sy)"
		},
		 "void Controller::onConnected()": {
			"prefix": "void Controller::onConnected()",
			"body": [
				"void Controller:onConnected()"
			],
			"description": "void Controller::onConnected()"
		},
		 "std::string Downloader::getFileNameFromUrl(const std::string& srcUrl)": {
			"prefix": "std::string Downloader::getFileNameFromUrl(const std::string& srcUrl)",
			"body": [
				"Downloader:getFileNameFromUrl(${1:std:string& srcUrl})"
			],
			"description": "std::string Downloader::getFileNameFromUrl(const std::string& srcUrl)"
		},
		 "bool Texture2D::initWithMipmaps(MipmapInfo* mipmaps, int mipmapsNum, PixelFormat pixelFormat, int pixelsWide, int pixelsHigh)": {
			"prefix": "bool Texture2D::initWithMipmaps(MipmapInfo* mipmaps, int mipmapsNum, PixelFormat pixelFormat, int pixelsWide, int pixelsHigh)",
			"body": [
				"Texture2D:initWithMipmaps(${1:MipmapInfo* mipmaps},${2:int mipmapsNum},${3:PixelFormat pixelFormat},${4:int pixelsWide},${5:int pixelsHigh})"
			],
			"description": "bool Texture2D::initWithMipmaps(MipmapInfo* mipmaps, int mipmapsNum, PixelFormat pixelFormat, int pixelsWide, int pixelsHigh)"
		},
		 "void ListView::removeAllChildren()": {
			"prefix": "void ListView::removeAllChildren()",
			"body": [
				"void ListView:removeAllChildren()"
			],
			"description": "void ListView::removeAllChildren()"
		},
		 "ssize_t Node::getNumberOfRunningActions() const": {
			"prefix": "ssize_t Node::getNumberOfRunningActions() const",
			"body": [
				"ssize_t Node:getNumberOfRunningActions() "
			],
			"description": "ssize_t Node::getNumberOfRunningActions() const"
		},
		 "void getChildMap(std::map<int, std::vector<int> >& map, SkinData* skinData, const rapidjson::Value& val)": {
			"prefix": "void getChildMap(std::map<int, std::vector<int> >& map, SkinData* skinData, const rapidjson::Value& val)",
			"body": [
				"getChildMap(${1:std:map<int},${2:std:vector<int> >& map},${3:SkinData* skinData},${4:rapidjson:Value& val})"
			],
			"description": "void getChildMap(std::map<int, std::vector<int> >& map, SkinData* skinData, const rapidjson::Value& val)"
		},
		 "void AtlasNode::setOpacity(GLubyte opacity)": {
			"prefix": "void AtlasNode::setOpacity(GLubyte opacity)",
			"body": [
				"AtlasNode:setOpacity(${1:GLubyte opacity})"
			],
			"description": "void AtlasNode::setOpacity(GLubyte opacity)"
		},
		 "const std::string Button::getTitleFontName() const": {
			"prefix": "const std::string Button::getTitleFontName() const",
			"body": [
				" std:string Button:getTitleFontName() "
			],
			"description": "const std::string Button::getTitleFontName() const"
		},
		 "bool GLProgram::link()": {
			"prefix": "bool GLProgram::link()",
			"body": [
				"bool GLProgram:link()"
			],
			"description": "bool GLProgram::link()"
		},
		 "void Scheduler::resumeTarget(void *target)": {
			"prefix": "void Scheduler::resumeTarget(void *target)",
			"body": [
				"Scheduler:resumeTarget(${1:void *target})"
			],
			"description": "void Scheduler::resumeTarget(void *target)"
		},
		 "Uniform* GLProgram::getUniform(const std::string &name)": {
			"prefix": "Uniform* GLProgram::getUniform(const std::string &name)",
			"body": [
				"GLProgram:getUniform(${1:std:string &name})"
			],
			"description": "Uniform* GLProgram::getUniform(const std::string &name)"
		},
		 "TextureData *DataReaderHelper::decodeTexture(tinyxml2::XMLElement *textureXML, DataInfo *dataInfo)": {
			"prefix": "TextureData *DataReaderHelper::decodeTexture(tinyxml2::XMLElement *textureXML, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeTexture(${1:tinyxml2:XMLElement *textureXML},${2:DataInfo *dataInfo})"
			],
			"description": "TextureData *DataReaderHelper::decodeTexture(tinyxml2::XMLElement *textureXML, DataInfo *dataInfo)"
		},
		 "Sequence* Sequence::create(FiniteTimeAction *action1, ...)": {
			"prefix": "Sequence* Sequence::create(FiniteTimeAction *action1, ...)",
			"body": [
				"Sequence:create(${1:FiniteTimeAction *action1},${2:...})"
			],
			"description": "Sequence* Sequence::create(FiniteTimeAction *action1, ...)"
		},
		 "Node* SceneReader::getNodeByTag(int nTag)": {
			"prefix": "Node* SceneReader::getNodeByTag(int nTag)",
			"body": [
				"SceneReader:getNodeByTag(${1:int nTag})"
			],
			"description": "Node* SceneReader::getNodeByTag(int nTag)"
		},
		 "void ActionTimeline::clearFrameEventCallFunc()": {
			"prefix": "void ActionTimeline::clearFrameEventCallFunc()",
			"body": [
				"void ActionTimeline:clearFrameEventCallFunc()"
			],
			"description": "void ActionTimeline::clearFrameEventCallFunc()"
		},
		 "float Rect::getMinX() const": {
			"prefix": "float Rect::getMinX() const",
			"body": [
				"float Rect:getMinX() "
			],
			"description": "float Rect::getMinX() const"
		},
		 "void Widget::onTouchCancelled(Touch *touch, Event *unusedEvent)": {
			"prefix": "void Widget::onTouchCancelled(Touch *touch, Event *unusedEvent)",
			"body": [
				"Widget:onTouchCancelled(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void Widget::onTouchCancelled(Touch *touch, Event *unusedEvent)"
		},
		 "bool Widget::isLayoutComponentEnabled()const": {
			"prefix": "bool Widget::isLayoutComponentEnabled()const",
			"body": [
				"bool Widget:isLayoutComponentEnabled()"
			],
			"description": "bool Widget::isLayoutComponentEnabled()const"
		},
		 "void BaseTriggerAction::removeAll()": {
			"prefix": "void BaseTriggerAction::removeAll()",
			"body": [
				"void BaseTriggerAction:removeAll()"
			],
			"description": "void BaseTriggerAction::removeAll()"
		},
		 "const Vec2& ParticleSystem::getGravity()": {
			"prefix": "const Vec2& ParticleSystem::getGravity()",
			"body": [
				" Vec2& ParticleSystem:getGravity()"
			],
			"description": "const Vec2& ParticleSystem::getGravity()"
		},
		 "void TextureCache::destroyInstance()": {
			"prefix": "void TextureCache::destroyInstance()",
			"body": [
				"void TextureCache:destroyInstance()"
			],
			"description": "void TextureCache::destroyInstance()"
		},
		 "CardinalSplineBy* CardinalSplineBy::create(float duration, cocos2d::PointArray *points, float tension)": {
			"prefix": "CardinalSplineBy* CardinalSplineBy::create(float duration, cocos2d::PointArray *points, float tension)",
			"body": [
				"CardinalSplineBy:create(${1:float duration},${2:cocos2d:PointArray *points},${3:float tension})"
			],
			"description": "CardinalSplineBy* CardinalSplineBy::create(float duration, cocos2d::PointArray *points, float tension)"
		},
		 "bool Sprite::initWithFile(const std::string &filename, const Rect& rect)": {
			"prefix": "bool Sprite::initWithFile(const std::string &filename, const Rect& rect)",
			"body": [
				"Sprite:initWithFile(${1:std:string &filename},${2:Rect& rect})"
			],
			"description": "bool Sprite::initWithFile(const std::string &filename, const Rect& rect)"
		},
		 "void LayerGradient::setCompressedInterpolation(bool compress)": {
			"prefix": "void LayerGradient::setCompressedInterpolation(bool compress)",
			"body": [
				"LayerGradient:setCompressedInterpolation(${1:bool compress})"
			],
			"description": "void LayerGradient::setCompressedInterpolation(bool compress)"
		},
		 "void Timeline::binarySearchKeyFrame(unsigned int frameIndex)": {
			"prefix": "void Timeline::binarySearchKeyFrame(unsigned int frameIndex)",
			"body": [
				"Timeline:binarySearchKeyFrame(${1:unsigned int frameIndex})"
			],
			"description": "void Timeline::binarySearchKeyFrame(unsigned int frameIndex)"
		},
		 "Rect MenuItem::rect() const": {
			"prefix": "Rect MenuItem::rect() const",
			"body": [
				"Rect MenuItem:rect() "
			],
			"description": "Rect MenuItem::rect() const"
		},
		 "EventListenerFocus* EventListenerFocus::create()": {
			"prefix": "EventListenerFocus* EventListenerFocus::create()",
			"body": [
				"EventListenerFocus* EventListenerFocus:create()"
			],
			"description": "EventListenerFocus* EventListenerFocus::create()"
		},
		 "void Camera::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void Camera::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"Camera:visit(${1:Renderer* renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void Camera::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void PhysicsDebugDraw::drawJoint(PhysicsJoint& joint)": {
			"prefix": "void PhysicsDebugDraw::drawJoint(PhysicsJoint& joint)",
			"body": [
				"PhysicsDebugDraw:drawJoint(${1:PhysicsJoint& joint})"
			],
			"description": "void PhysicsDebugDraw::drawJoint(PhysicsJoint& joint)"
		},
		 "bool Layout::checkFocusEnabledChild()const": {
			"prefix": "bool Layout::checkFocusEnabledChild()const",
			"body": [
				"bool Layout:checkFocusEnabledChild()"
			],
			"description": "bool Layout::checkFocusEnabledChild()const"
		},
		 "Texture2D* RenderState::getTexture() const": {
			"prefix": "Texture2D* RenderState::getTexture() const",
			"body": [
				"Texture2D* RenderState:getTexture() "
			],
			"description": "Texture2D* RenderState::getTexture() const"
		},
		 "void FontAtlas::listenRendererRecreated(EventCustom *event)": {
			"prefix": "void FontAtlas::listenRendererRecreated(EventCustom *event)",
			"body": [
				"FontAtlas:listenRendererRecreated(${1:EventCustom *event})"
			],
			"description": "void FontAtlas::listenRendererRecreated(EventCustom *event)"
		},
		 "float Animate3D::getSpeed() const": {
			"prefix": "float Animate3D::getSpeed() const",
			"body": [
				"float Animate3D:getSpeed() "
			],
			"description": "float Animate3D::getSpeed() const"
		},
		 "Button* Button::create()": {
			"prefix": "Button* Button::create()",
			"body": [
				"Button* Button:create()"
			],
			"description": "Button* Button::create()"
		},
		 "void TMXLayer::updateTotalQuads()": {
			"prefix": "void TMXLayer::updateTotalQuads()",
			"body": [
				"void TMXLayer:updateTotalQuads()"
			],
			"description": "void TMXLayer::updateTotalQuads()"
		},
		 "Widget* ScrollView::findNextFocusedWidget(cocos2d::ui::Widget::FocusDirection direction, cocos2d::ui::Widget *current)": {
			"prefix": "Widget* ScrollView::findNextFocusedWidget(cocos2d::ui::Widget::FocusDirection direction, cocos2d::ui::Widget *current)",
			"body": [
				"ScrollView:findNextFocusedWidget(${1:cocos2d:ui:Widget:FocusDirection direction},${2:cocos2d:ui:Widget *current})"
			],
			"description": "Widget* ScrollView::findNextFocusedWidget(cocos2d::ui::Widget::FocusDirection direction, cocos2d::ui::Widget *current)"
		},
		 "void GLViewImpl::onGLFWWindowPosCallback(GLFWwindow *windows, int x, int y)": {
			"prefix": "void GLViewImpl::onGLFWWindowPosCallback(GLFWwindow *windows, int x, int y)",
			"body": [
				"GLViewImpl:onGLFWWindowPosCallback(${1:GLFWwindow *windows},${2:int x},${3:int y})"
			],
			"description": "void GLViewImpl::onGLFWWindowPosCallback(GLFWwindow *windows, int x, int y)"
		},
		 "void AbstractCheckButton::setupBackgroundDisable()": {
			"prefix": "void AbstractCheckButton::setupBackgroundDisable()",
			"body": [
				"void AbstractCheckButton:setupBackgroundDisable()"
			],
			"description": "void AbstractCheckButton::setupBackgroundDisable()"
		},
		 "void PageView::handleMoveLogic(Touch *touch)": {
			"prefix": "void PageView::handleMoveLogic(Touch *touch)",
			"body": [
				"PageView:handleMoveLogic(${1:Touch *touch})"
			],
			"description": "void PageView::handleMoveLogic(Touch *touch)"
		},
		 "void Button::loadTextureNormal(const std::string& normal,TextureResType texType)": {
			"prefix": "void Button::loadTextureNormal(const std::string& normal,TextureResType texType)",
			"body": [
				"Button:loadTextureNormal(${1:std:string& normal},${2:TextureResType texType})"
			],
			"description": "void Button::loadTextureNormal(const std::string& normal,TextureResType texType)"
		},
		 "void ArmatureAnimation::setMovementEventCallFunc(Ref *target, SEL_MovementEventCallFunc callFunc)": {
			"prefix": "void ArmatureAnimation::setMovementEventCallFunc(Ref *target, SEL_MovementEventCallFunc callFunc)",
			"body": [
				"ArmatureAnimation:setMovementEventCallFunc(${1:Ref *target},${2:SEL_MovementEventCallFunc callFunc})"
			],
			"description": "void ArmatureAnimation::setMovementEventCallFunc(Ref *target, SEL_MovementEventCallFunc callFunc)"
		},
		 "Label* Label::createWithCharMap(const std::string& plistFile)": {
			"prefix": "Label* Label::createWithCharMap(const std::string& plistFile)",
			"body": [
				"Label:createWithCharMap(${1:std:string& plistFile})"
			],
			"description": "Label* Label::createWithCharMap(const std::string& plistFile)"
		},
		 "Vec4::Vec4(const float* src)": {
			"prefix": "Vec4::Vec4(const float* src)",
			"body": [
				"src})"
			],
			"description": "Vec4::Vec4(const float* src)"
		},
		 "ParticleSystemQuad * ParticleSystemQuad::create()": {
			"prefix": "ParticleSystemQuad * ParticleSystemQuad::create()",
			"body": [
				"ParticleSystemQuad * ParticleSystemQuad:create()"
			],
			"description": "ParticleSystemQuad * ParticleSystemQuad::create()"
		},
		 "cocos2d::AABB Bundle3D::calculateAABB( const std::vector<float>& vertex, int stride, const std::vector<unsigned short>& index )": {
			"prefix": "cocos2d::AABB Bundle3D::calculateAABB( const std::vector<float>& vertex, int stride, const std::vector<unsigned short>& index )",
			"body": [
				"Bundle3D:calculateAABB(${1:std:vector<float>& vertex},${2:int stride},${3:std:vector<unsigned short>& index})"
			],
			"description": "cocos2d::AABB Bundle3D::calculateAABB( const std::vector<float>& vertex, int stride, const std::vector<unsigned short>& index )"
		},
		 "bool CCBReader::readHeader()": {
			"prefix": "bool CCBReader::readHeader()",
			"body": [
				"bool CCBReader:readHeader()"
			],
			"description": "bool CCBReader::readHeader()"
		},
		 "void Terrain::Chunk::calculateAABB()": {
			"prefix": "void Terrain::Chunk::calculateAABB()",
			"body": [
				"void Terrain:Chunk:calculateAABB()"
			],
			"description": "void Terrain::Chunk::calculateAABB()"
		},
		 "float CCBKeyframe::getTime()": {
			"prefix": "float CCBKeyframe::getTime()",
			"body": [
				"float CCBKeyframe:getTime()"
			],
			"description": "float CCBKeyframe::getTime()"
		},
		 "bool RotateBy::initWithDuration(float duration, float deltaAngle)": {
			"prefix": "bool RotateBy::initWithDuration(float duration, float deltaAngle)",
			"body": [
				"RotateBy:initWithDuration(${1:float duration},${2:float deltaAngle})"
			],
			"description": "bool RotateBy::initWithDuration(float duration, float deltaAngle)"
		},
		 "Texture2D::PixelFormat Texture2D::convertRGB888ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)": {
			"prefix": "Texture2D::PixelFormat Texture2D::convertRGB888ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)",
			"body": [
				"Texture2D:convertRGB888ToFormat(${1:unsigned char* data},${2:ssize_t dataLen},${3:PixelFormat format},${4:unsigned char** outData},${5:ssize_t* outDataLen})"
			],
			"description": "Texture2D::PixelFormat Texture2D::convertRGB888ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)"
		},
		 "Color3B ActionTintFrame::getColor()": {
			"prefix": "Color3B ActionTintFrame::getColor()",
			"body": [
				"Color3B ActionTintFrame:getColor()"
			],
			"description": "Color3B ActionTintFrame::getColor()"
		},
		 "void Mesh::setLightUniforms(Pass* pass, Scene* scene, const Vec4& color, unsigned int lightmask)": {
			"prefix": "void Mesh::setLightUniforms(Pass* pass, Scene* scene, const Vec4& color, unsigned int lightmask)",
			"body": [
				"Mesh:setLightUniforms(${1:Pass* pass},${2:Scene* scene},${3:Vec4& color},${4:unsigned int lightmask})"
			],
			"description": "void Mesh::setLightUniforms(Pass* pass, Scene* scene, const Vec4& color, unsigned int lightmask)"
		},
		 "void EditBoxImplAndroid::setNativeInputMode(EditBox::InputMode inputMode)": {
			"prefix": "void EditBoxImplAndroid::setNativeInputMode(EditBox::InputMode inputMode)",
			"body": [
				"EditBoxImplAndroid:setNativeInputMode(${1:EditBox:InputMode inputMode})"
			],
			"description": "void EditBoxImplAndroid::setNativeInputMode(EditBox::InputMode inputMode)"
		},
		 "void PageView::onSizeChanged()": {
			"prefix": "void PageView::onSizeChanged()",
			"body": [
				"void PageView:onSizeChanged()"
			],
			"description": "void PageView::onSizeChanged()"
		},
		 "void Label::updateLabelLetters()": {
			"prefix": "void Label::updateLabelLetters()",
			"body": [
				"void Label:updateLabelLetters()"
			],
			"description": "void Label::updateLabelLetters()"
		},
		 "cocos2d::Vec3 Terrain::getNormal(int pixel_x, int pixel_y) const": {
			"prefix": "cocos2d::Vec3 Terrain::getNormal(int pixel_x, int pixel_y) const",
			"body": [
				"Terrain:getNormal(${1:int pixel_x},${2:int pixel_y})"
			],
			"description": "cocos2d::Vec3 Terrain::getNormal(int pixel_x, int pixel_y) const"
		},
		 "TriggerMng* TriggerMng::getInstance()": {
			"prefix": "TriggerMng* TriggerMng::getInstance()",
			"body": [
				"TriggerMng* TriggerMng:getInstance()"
			],
			"description": "TriggerMng* TriggerMng::getInstance()"
		},
		 "void AnimationCache::addAnimationsWithFile(const std::string& plist)": {
			"prefix": "void AnimationCache::addAnimationsWithFile(const std::string& plist)",
			"body": [
				"AnimationCache:addAnimationsWithFile(${1:std:string& plist})"
			],
			"description": "void AnimationCache::addAnimationsWithFile(const std::string& plist)"
		},
		 "void BoneNode::addToBoneList(BoneNode* bone)": {
			"prefix": "void BoneNode::addToBoneList(BoneNode* bone)",
			"body": [
				"BoneNode:addToBoneList(${1:BoneNode* bone})"
			],
			"description": "void BoneNode::addToBoneList(BoneNode* bone)"
		},
		 "cocos2d::Vec3 Physics3DRigidBody::getInvInertiaDiagLocal() const": {
			"prefix": "cocos2d::Vec3 Physics3DRigidBody::getInvInertiaDiagLocal() const",
			"body": [
				"cocos2d:Vec3 Physics3DRigidBody:getInvInertiaDiagLocal() "
			],
			"description": "cocos2d::Vec3 Physics3DRigidBody::getInvInertiaDiagLocal() const"
		},
		 "void DisplayData::copy(DisplayData *displayData)": {
			"prefix": "void DisplayData::copy(DisplayData *displayData)",
			"body": [
				"DisplayData:copy(${1:DisplayData *displayData})"
			],
			"description": "void DisplayData::copy(DisplayData *displayData)"
		},
		 "void WebSocket::send(const std::string& message)": {
			"prefix": "void WebSocket::send(const std::string& message)",
			"body": [
				"WebSocket:send(${1:std:string& message})"
			],
			"description": "void WebSocket::send(const std::string& message)"
		},
		 "LabelAtlas* LabelAtlas::create(const std::string& string, const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "LabelAtlas* LabelAtlas::create(const std::string& string, const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"LabelAtlas:create(${1:std:string& string},${2:std:string& charMapFile},${3:int itemWidth},${4:int itemHeight},${5:int startCharMap})"
			],
			"description": "LabelAtlas* LabelAtlas::create(const std::string& string, const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "int AudioEngineImpl::play2d(const std::string &filePath ,bool loop ,float volume)": {
			"prefix": "int AudioEngineImpl::play2d(const std::string &filePath ,bool loop ,float volume)",
			"body": [
				"AudioEngineImpl:play2d(${1:std:string &filePath},${2:bool loop},${3:float volume})"
			],
			"description": "int AudioEngineImpl::play2d(const std::string &filePath ,bool loop ,float volume)"
		},
		 "TextureFrame* TextureFrame::create()": {
			"prefix": "TextureFrame* TextureFrame::create()",
			"body": [
				"TextureFrame* TextureFrame:create()"
			],
			"description": "TextureFrame* TextureFrame::create()"
		},
		 "const std::string& Text::getFontName()const": {
			"prefix": "const std::string& Text::getFontName()const",
			"body": [
				" std:string& Text:getFontName()"
			],
			"description": "const std::string& Text::getFontName()const"
		},
		 "void PointArray::replaceControlPoint(cocos2d::Vec2 &controlPoint, ssize_t index)": {
			"prefix": "void PointArray::replaceControlPoint(cocos2d::Vec2 &controlPoint, ssize_t index)",
			"body": [
				"PointArray:replaceControlPoint(${1:cocos2d:Vec2 &controlPoint},${2:ssize_t index})"
			],
			"description": "void PointArray::replaceControlPoint(cocos2d::Vec2 &controlPoint, ssize_t index)"
		},
		 "ValueMap TMXObjectGroup::getObject(const std::string& objectName) const": {
			"prefix": "ValueMap TMXObjectGroup::getObject(const std::string& objectName) const",
			"body": [
				"TMXObjectGroup:getObject(${1:std:string& objectName})"
			],
			"description": "ValueMap TMXObjectGroup::getObject(const std::string& objectName) const"
		},
		 "bool EventListenerMouse::init()": {
			"prefix": "bool EventListenerMouse::init()",
			"body": [
				"bool EventListenerMouse:init()"
			],
			"description": "bool EventListenerMouse::init()"
		},
		 "Texture2D* SkeletonRenderer::getTexture (spRegionAttachment* attachment) const": {
			"prefix": "Texture2D* SkeletonRenderer::getTexture (spRegionAttachment* attachment) const",
			"body": [
				"SkeletonRenderer:getTexture (${1:spRegionAttachment* attachment})"
			],
			"description": "Texture2D* SkeletonRenderer::getTexture (spRegionAttachment* attachment) const"
		},
		 "Size TextField::getAutoRenderSize()": {
			"prefix": "Size TextField::getAutoRenderSize()",
			"body": [
				"Size TextField:getAutoRenderSize()"
			],
			"description": "Size TextField::getAutoRenderSize()"
		},
		 "Vec2 ProgressTimer::boundaryTexCoord(char index)": {
			"prefix": "Vec2 ProgressTimer::boundaryTexCoord(char index)",
			"body": [
				"ProgressTimer:boundaryTexCoord(${1:char index})"
			],
			"description": "Vec2 ProgressTimer::boundaryTexCoord(char index)"
		},
		 "void TransformHelp::nodeToMatrix(const BaseData &node, AffineTransform &matrix)": {
			"prefix": "void TransformHelp::nodeToMatrix(const BaseData &node, AffineTransform &matrix)",
			"body": [
				"TransformHelp:nodeToMatrix(${1:BaseData &node},${2:AffineTransform &matrix})"
			],
			"description": "void TransformHelp::nodeToMatrix(const BaseData &node, AffineTransform &matrix)"
		},
		 "void RadioButtonGroup::removeAllRadioButtons()": {
			"prefix": "void RadioButtonGroup::removeAllRadioButtons()",
			"body": [
				"void RadioButtonGroup:removeAllRadioButtons()"
			],
			"description": "void RadioButtonGroup::removeAllRadioButtons()"
		},
		 "void Renderer::setDepthTest(bool enable)": {
			"prefix": "void Renderer::setDepthTest(bool enable)",
			"body": [
				"Renderer:setDepthTest(${1:bool enable})"
			],
			"description": "void Renderer::setDepthTest(bool enable)"
		},
		 "void ScrollViewLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)": {
			"prefix": "void ScrollViewLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)",
			"body": [
				"ScrollViewLoader:onHandlePropTypeSize(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Size pSize},${5:CCBReader * ccbReader})"
			],
			"description": "void ScrollViewLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)"
		},
		 "void EventDispatcher::setDirtyForNode(Node* node)": {
			"prefix": "void EventDispatcher::setDirtyForNode(Node* node)",
			"body": [
				"EventDispatcher:setDirtyForNode(${1:Node* node})"
			],
			"description": "void EventDispatcher::setDirtyForNode(Node* node)"
		},
		 "Ref* __Set::anyObject()": {
			"prefix": "Ref* __Set::anyObject()",
			"body": [
				"Ref* __Set:anyObject()"
			],
			"description": "Ref* __Set::anyObject()"
		},
		 "void TextureCache::unbindAllImageAsync()": {
			"prefix": "void TextureCache::unbindAllImageAsync()",
			"body": [
				"void TextureCache:unbindAllImageAsync()"
			],
			"description": "void TextureCache::unbindAllImageAsync()"
		},
		 "LabelAtlas* LabelAtlas::create()": {
			"prefix": "LabelAtlas* LabelAtlas::create()",
			"body": [
				"LabelAtlas* LabelAtlas:create()"
			],
			"description": "LabelAtlas* LabelAtlas::create()"
		},
		 "const std::string& RelativeLayoutParameter::getRelativeToWidgetName() const": {
			"prefix": "const std::string& RelativeLayoutParameter::getRelativeToWidgetName() const",
			"body": [
				" std:string& RelativeLayoutParameter:getRelativeToWidgetName() "
			],
			"description": "const std::string& RelativeLayoutParameter::getRelativeToWidgetName() const"
		},
		 "bool Widget::isEnabled() const": {
			"prefix": "bool Widget::isEnabled() const",
			"body": [
				"bool Widget:isEnabled() "
			],
			"description": "bool Widget::isEnabled() const"
		},
		 "void VideoPlayer::draw(Renderer* renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void VideoPlayer::draw(Renderer* renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"VideoPlayer:draw(${1:Renderer* renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void VideoPlayer::draw(Renderer* renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void WsThreadHelper::update(float dt)": {
			"prefix": "void WsThreadHelper::update(float dt)",
			"body": [
				"WsThreadHelper:update(${1:float dt})"
			],
			"description": "void WsThreadHelper::update(float dt)"
		},
		 "EaseBackIn* EaseBackIn::clone() const": {
			"prefix": "EaseBackIn* EaseBackIn::clone() const",
			"body": [
				"EaseBackIn* EaseBackIn:clone() "
			],
			"description": "EaseBackIn* EaseBackIn::clone() const"
		},
		 "const Vec2& MotionStreak::getPosition() const": {
			"prefix": "const Vec2& MotionStreak::getPosition() const",
			"body": [
				" Vec2& MotionStreak:getPosition() "
			],
			"description": "const Vec2& MotionStreak::getPosition() const"
		},
		 "void Spawn::stop(void)": {
			"prefix": "void Spawn::stop(void)",
			"body": [
				"Spawn:stop(${1:void})"
			],
			"description": "void Spawn::stop(void)"
		},
		 "void Director::restart()": {
			"prefix": "void Director::restart()",
			"body": [
				"void Director:restart()"
			],
			"description": "void Director::restart()"
		},
		 "bool Twirl::initWithDuration(float duration, const Size& gridSize, Vec2 position, unsigned int twirls, float amplitude)": {
			"prefix": "bool Twirl::initWithDuration(float duration, const Size& gridSize, Vec2 position, unsigned int twirls, float amplitude)",
			"body": [
				"Twirl:initWithDuration(${1:float duration},${2:Size& gridSize},${3:Vec2 position},${4:unsigned int twirls},${5:float amplitude})"
			],
			"description": "bool Twirl::initWithDuration(float duration, const Size& gridSize, Vec2 position, unsigned int twirls, float amplitude)"
		},
		 "void Sequence::stop(void)": {
			"prefix": "void Sequence::stop(void)",
			"body": [
				"Sequence:stop(${1:void})"
			],
			"description": "void Sequence::stop(void)"
		},
		 "GLProgramState* Pass::getGLProgramState() const": {
			"prefix": "GLProgramState* Pass::getGLProgramState() const",
			"body": [
				"GLProgramState* Pass:getGLProgramState() "
			],
			"description": "GLProgramState* Pass::getGLProgramState() const"
		},
		 "int FontFreeType::getFontAscender() const": {
			"prefix": "int FontFreeType::getFontAscender() const",
			"body": [
				"int FontFreeType:getFontAscender() "
			],
			"description": "int FontFreeType::getFontAscender() const"
		},
		 "Vec2 Camera::projectGL(const Vec3& src) const": {
			"prefix": "Vec2 Camera::projectGL(const Vec3& src) const",
			"body": [
				"Camera:projectGL(${1:Vec3& src})"
			],
			"description": "Vec2 Camera::projectGL(const Vec3& src) const"
		},
		 "bool IMEDelegate::attachWithIME()": {
			"prefix": "bool IMEDelegate::attachWithIME()",
			"body": [
				"bool IMEDelegate:attachWithIME()"
			],
			"description": "bool IMEDelegate::attachWithIME()"
		},
		 "bool Material::initWithProperties(Properties* materialProperties)": {
			"prefix": "bool Material::initWithProperties(Properties* materialProperties)",
			"body": [
				"Material:initWithProperties(${1:Properties* materialProperties})"
			],
			"description": "bool Material::initWithProperties(Properties* materialProperties)"
		},
		 "const Size& Node::getContentSize() const": {
			"prefix": "const Size& Node::getContentSize() const",
			"body": [
				" Size& Node:getContentSize() "
			],
			"description": "const Size& Node::getContentSize() const"
		},
		 "const Vector<Pass*>& Technique::getPasses() const": {
			"prefix": "const Vector<Pass*>& Technique::getPasses() const",
			"body": [
				" Vector<Pass*>& Technique:getPasses() "
			],
			"description": "const Vector<Pass*>& Technique::getPasses() const"
		},
		 "void CCBAnimationManager::runAnimationsForSequenceNamedTweenDuration(const char *pName, float fTweenDuration)": {
			"prefix": "void CCBAnimationManager::runAnimationsForSequenceNamedTweenDuration(const char *pName, float fTweenDuration)",
			"body": [
				"CCBAnimationManager:runAnimationsForSequenceNamedTweenDuration(${1:char *pName},${2:float fTweenDuration})"
			],
			"description": "void CCBAnimationManager::runAnimationsForSequenceNamedTweenDuration(const char *pName, float fTweenDuration)"
		},
		 "bool Properties::getMat4(const char* name, Mat4* out) const": {
			"prefix": "bool Properties::getMat4(const char* name, Mat4* out) const",
			"body": [
				"Properties:getMat4(${1:char* name},${2:Mat4* out})"
			],
			"description": "bool Properties::getMat4(const char* name, Mat4* out) const"
		},
		 "void Downloader::downloadAsync(const std::string& srcUrl, const std::string& storagePath, const std::string& customId/* = ""*/)": {
			"prefix": "void Downloader::downloadAsync(const std::string& srcUrl, const std::string& storagePath, const std::string& customId/* = ""*/)",
			"body": [
				"Downloader:downloadAsync(${1:std:string& srcUrl},${2:std:string& storagePath},${3:std:string& customId/* = ""*/})"
			],
			"description": "void Downloader::downloadAsync(const std::string& srcUrl, const std::string& storagePath, const std::string& customId/* = ""*/)"
		},
		 "float Slider::getZoomScale()const": {
			"prefix": "float Slider::getZoomScale()const",
			"body": [
				"float Slider:getZoomScale()"
			],
			"description": "float Slider::getZoomScale()const"
		},
		 "void cocos2d::NavMeshAgent::setObstacleAvoidanceType(unsigned char type)": {
			"prefix": "void cocos2d::NavMeshAgent::setObstacleAvoidanceType(unsigned char type)",
			"body": [
				"cocos2d:NavMeshAgent:setObstacleAvoidanceType(${1:unsigned char type})"
			],
			"description": "void cocos2d::NavMeshAgent::setObstacleAvoidanceType(unsigned char type)"
		},
		 "EventListenerCustom* EventListenerCustom::clone()": {
			"prefix": "EventListenerCustom* EventListenerCustom::clone()",
			"body": [
				"EventListenerCustom* EventListenerCustom:clone()"
			],
			"description": "EventListenerCustom* EventListenerCustom::clone()"
		},
		 "void Physics3DSliderConstraint::setMaxLinMotorForce(float maxLinMotorForce)": {
			"prefix": "void Physics3DSliderConstraint::setMaxLinMotorForce(float maxLinMotorForce)",
			"body": [
				"Physics3DSliderConstraint:setMaxLinMotorForce(${1:float maxLinMotorForce})"
			],
			"description": "void Physics3DSliderConstraint::setMaxLinMotorForce(float maxLinMotorForce)"
		},
		 "void LabelBMFont::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void LabelBMFont::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"LabelBMFont:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void LabelBMFont::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "int __Set::count(void)": {
			"prefix": "int __Set::count(void)",
			"body": [
				"__Set:count(${1:void})"
			],
			"description": "int __Set::count(void)"
		},
		 "VisibleFrame* VisibleFrame::create()": {
			"prefix": "VisibleFrame* VisibleFrame::create()",
			"body": [
				"VisibleFrame* VisibleFrame:create()"
			],
			"description": "VisibleFrame* VisibleFrame::create()"
		},
		 "ProfilingTimer* Profiler::createAndAddTimerWithName(const char* timerName)": {
			"prefix": "ProfilingTimer* Profiler::createAndAddTimerWithName(const char* timerName)",
			"body": [
				"Profiler:createAndAddTimerWithName(${1:char* timerName})"
			],
			"description": "ProfilingTimer* Profiler::createAndAddTimerWithName(const char* timerName)"
		},
		 "void NodeLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char* pPropertyName, const char * pFontTTF, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char* pPropertyName, const char * pFontTTF, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeFontTTF(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:char * pFontTTF},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char* pPropertyName, const char * pFontTTF, CCBReader * ccbReader)"
		},
		 "bool AbstractCheckButton::init()": {
			"prefix": "bool AbstractCheckButton::init()",
			"body": [
				"bool AbstractCheckButton:init()"
			],
			"description": "bool AbstractCheckButton::init()"
		},
		 "ScrollView* ScrollView::create()": {
			"prefix": "ScrollView* ScrollView::create()",
			"body": [
				"ScrollView* ScrollView:create()"
			],
			"description": "ScrollView* ScrollView::create()"
		},
		 "MovementBoneData *DataReaderHelper::decodeMovementBone(const rapidjson::Value& json, DataInfo *dataInfo)": {
			"prefix": "MovementBoneData *DataReaderHelper::decodeMovementBone(const rapidjson::Value& json, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeMovementBone(${1:rapidjson:Value& json},${2:DataInfo *dataInfo})"
			],
			"description": "MovementBoneData *DataReaderHelper::decodeMovementBone(const rapidjson::Value& json, DataInfo *dataInfo)"
		},
		 "void ScrollView::jumpToBottomLeft()": {
			"prefix": "void ScrollView::jumpToBottomLeft()",
			"body": [
				"void ScrollView:jumpToBottomLeft()"
			],
			"description": "void ScrollView::jumpToBottomLeft()"
		},
		 "bool VBox::initWithSize(const Size& size)": {
			"prefix": "bool VBox::initWithSize(const Size& size)",
			"body": [
				"VBox:initWithSize(${1:Size& size})"
			],
			"description": "bool VBox::initWithSize(const Size& size)"
		},
		 "void PoolManager::destroyInstance()": {
			"prefix": "void PoolManager::destroyInstance()",
			"body": [
				"void PoolManager:destroyInstance()"
			],
			"description": "void PoolManager::destroyInstance()"
		},
		 "GLProgram* GLProgram::createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)": {
			"prefix": "GLProgram* GLProgram::createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)",
			"body": [
				"GLProgram:createWithFilenames(${1:std:string& vShaderFilename},${2:std:string& fShaderFilename})"
			],
			"description": "GLProgram* GLProgram::createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)"
		},
		 "bool RenderState::init(RenderState* parent)": {
			"prefix": "bool RenderState::init(RenderState* parent)",
			"body": [
				"RenderState:init(${1:RenderState* parent})"
			],
			"description": "bool RenderState::init(RenderState* parent)"
		},
		 "void ScrollViewBar::onEnter()": {
			"prefix": "void ScrollViewBar::onEnter()",
			"body": [
				"void ScrollViewBar:onEnter()"
			],
			"description": "void ScrollViewBar::onEnter()"
		},
		 "Spawn* Spawn::createWithTwoActions(FiniteTimeAction *action1, FiniteTimeAction *action2)": {
			"prefix": "Spawn* Spawn::createWithTwoActions(FiniteTimeAction *action1, FiniteTimeAction *action2)",
			"body": [
				"Spawn:createWithTwoActions(${1:FiniteTimeAction *action1},${2:FiniteTimeAction *action2})"
			],
			"description": "Spawn* Spawn::createWithTwoActions(FiniteTimeAction *action1, FiniteTimeAction *action2)"
		},
		 "void AudioEngineImpl::_play2d(AudioCache *cache, int audioID)": {
			"prefix": "void AudioEngineImpl::_play2d(AudioCache *cache, int audioID)",
			"body": [
				"AudioEngineImpl:_play2d(${1:AudioCache *cache},${2:int audioID})"
			],
			"description": "void AudioEngineImpl::_play2d(AudioCache *cache, int audioID)"
		},
		 "bool Label::multilineTextWrapByWord()": {
			"prefix": "bool Label::multilineTextWrapByWord()",
			"body": [
				"bool Label:multilineTextWrapByWord()"
			],
			"description": "bool Label::multilineTextWrapByWord()"
		},
		 "EaseExponentialInOut* EaseExponentialInOut::create(ActionInterval *action)": {
			"prefix": "EaseExponentialInOut* EaseExponentialInOut::create(ActionInterval *action)",
			"body": [
				"EaseExponentialInOut:create(${1:ActionInterval *action})"
			],
			"description": "EaseExponentialInOut* EaseExponentialInOut::create(ActionInterval *action)"
		},
		 "ParticleSnow* ParticleSnow::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleSnow* ParticleSnow::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSnow:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleSnow* ParticleSnow::createWithTotalParticles(int numberOfParticles)"
		},
		 "void EventDispatcher::dispatchTouchEvent(EventTouch* event)": {
			"prefix": "void EventDispatcher::dispatchTouchEvent(EventTouch* event)",
			"body": [
				"EventDispatcher:dispatchTouchEvent(${1:EventTouch* event})"
			],
			"description": "void EventDispatcher::dispatchTouchEvent(EventTouch* event)"
		},
		 "PoolManager* PoolManager::getInstance()": {
			"prefix": "PoolManager* PoolManager::getInstance()",
			"body": [
				"PoolManager* PoolManager:getInstance()"
			],
			"description": "PoolManager* PoolManager::getInstance()"
		},
		 "PolygonBatch* PolygonBatch::createWithCapacity (ssize_t capacity)": {
			"prefix": "PolygonBatch* PolygonBatch::createWithCapacity (ssize_t capacity)",
			"body": [
				"PolygonBatch:createWithCapacity (${1:ssize_t capacity})"
			],
			"description": "PolygonBatch* PolygonBatch::createWithCapacity (ssize_t capacity)"
		},
		 "bool DrawNode::init()": {
			"prefix": "bool DrawNode::init()",
			"body": [
				"bool DrawNode:init()"
			],
			"description": "bool DrawNode::init()"
		},
		 "void MovementBoneData::addFrameData(FrameData *frameData)": {
			"prefix": "void MovementBoneData::addFrameData(FrameData *frameData)",
			"body": [
				"MovementBoneData:addFrameData(${1:FrameData *frameData})"
			],
			"description": "void MovementBoneData::addFrameData(FrameData *frameData)"
		},
		 "void RenderState::StateBlock::setBlend(bool enabled)": {
			"prefix": "void RenderState::StateBlock::setBlend(bool enabled)",
			"body": [
				"RenderState:StateBlock:setBlend(${1:bool enabled})"
			],
			"description": "void RenderState::StateBlock::setBlend(bool enabled)"
		},
		 "std::string ArmatureNodeReader::getArmatureName(const std::string& exporJsonPath)": {
			"prefix": "std::string ArmatureNodeReader::getArmatureName(const std::string& exporJsonPath)",
			"body": [
				"ArmatureNodeReader:getArmatureName(${1:std:string& exporJsonPath})"
			],
			"description": "std::string ArmatureNodeReader::getArmatureName(const std::string& exporJsonPath)"
		},
		 "JumpTo* JumpTo::clone() const": {
			"prefix": "JumpTo* JumpTo::clone() const",
			"body": [
				"JumpTo* JumpTo:clone() "
			],
			"description": "JumpTo* JumpTo::clone() const"
		},
		 "void GLProgramState::setUniformVec4v(const std::string& uniformName, ssize_t size, const Vec4* value)": {
			"prefix": "void GLProgramState::setUniformVec4v(const std::string& uniformName, ssize_t size, const Vec4* value)",
			"body": [
				"GLProgramState:setUniformVec4v(${1:std:string& uniformName},${2:ssize_t size},${3:Vec4* value})"
			],
			"description": "void GLProgramState::setUniformVec4v(const std::string& uniformName, ssize_t size, const Vec4* value)"
		},
		 "float Physics3DSliderConstraint::getUpperAngLimit() const": {
			"prefix": "float Physics3DSliderConstraint::getUpperAngLimit() const",
			"body": [
				"float Physics3DSliderConstraint:getUpperAngLimit() "
			],
			"description": "float Physics3DSliderConstraint::getUpperAngLimit() const"
		},
		 "bool AABB::containPoint(const Vec3& point) const": {
			"prefix": "bool AABB::containPoint(const Vec3& point) const",
			"body": [
				"AABB:containPoint(${1:Vec3& point})"
			],
			"description": "bool AABB::containPoint(const Vec3& point) const"
		},
		 "void EditBoxImplCommon::editBoxEditingChanged(const std::string& text)": {
			"prefix": "void EditBoxImplCommon::editBoxEditingChanged(const std::string& text)",
			"body": [
				"EditBoxImplCommon:editBoxEditingChanged(${1:std:string& text})"
			],
			"description": "void EditBoxImplCommon::editBoxEditingChanged(const std::string& text)"
		},
		 "Size SizeFromString(const std::string& pszContent)": {
			"prefix": "Size SizeFromString(const std::string& pszContent)",
			"body": [
				"SizeFromString(${1:std:string& pszContent})"
			],
			"description": "Size SizeFromString(const std::string& pszContent)"
		},
		 "FT_Library FontFreeType::getFTLibrary()": {
			"prefix": "FT_Library FontFreeType::getFTLibrary()",
			"body": [
				"FT_Library FontFreeType:getFTLibrary()"
			],
			"description": "FT_Library FontFreeType::getFTLibrary()"
		},
		 "void TextField::setDetachWithIME(bool detach)": {
			"prefix": "void TextField::setDetachWithIME(bool detach)",
			"body": [
				"TextField:setDetachWithIME(${1:bool detach})"
			],
			"description": "void TextField::setDetachWithIME(bool detach)"
		},
		 "void GLProgramState::setVertexAttribPointer(const std::string& name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)": {
			"prefix": "void GLProgramState::setVertexAttribPointer(const std::string& name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)",
			"body": [
				"GLProgramState:setVertexAttribPointer(${1:std:string& name},${2:GLint size},${3:GLenum type},${4:GLboolean normalized},${5:GLsizei stride},${6:GLvoid *pointer})"
			],
			"description": "void GLProgramState::setVertexAttribPointer(const std::string& name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)"
		},
		 "bool GLView::isScissorEnabled()": {
			"prefix": "bool GLView::isScissorEnabled()",
			"body": [
				"bool GLView:isScissorEnabled()"
			],
			"description": "bool GLView::isScissorEnabled()"
		},
		 "void TriggerObj::serialize(const rapidjson::Value &val)": {
			"prefix": "void TriggerObj::serialize(const rapidjson::Value &val)",
			"body": [
				"TriggerObj:serialize(${1:rapidjson:Value &val})"
			],
			"description": "void TriggerObj::serialize(const rapidjson::Value &val)"
		},
		 "void Node::removeAllComponents()": {
			"prefix": "void Node::removeAllComponents()",
			"body": [
				"void Node:removeAllComponents()"
			],
			"description": "void Node::removeAllComponents()"
		},
		 "void Director::setDefaultValues(void)": {
			"prefix": "void Director::setDefaultValues(void)",
			"body": [
				"Director:setDefaultValues(${1:void})"
			],
			"description": "void Director::setDefaultValues(void)"
		},
		 "void Sprite3DMaterialCache::destroyInstance()": {
			"prefix": "void Sprite3DMaterialCache::destroyInstance()",
			"body": [
				"void Sprite3DMaterialCache:destroyInstance()"
			],
			"description": "void Sprite3DMaterialCache::destroyInstance()"
		},
		 "void Margin::setMargin(float l, float t, float r, float b)": {
			"prefix": "void Margin::setMargin(float l, float t, float r, float b)",
			"body": [
				"Margin:setMargin(${1:float l},${2:float t},${3:float r},${4:float b})"
			],
			"description": "void Margin::setMargin(float l, float t, float r, float b)"
		},
		 "void Text::setString(const std::string &text)": {
			"prefix": "void Text::setString(const std::string &text)",
			"body": [
				"Text:setString(${1:std:string &text})"
			],
			"description": "void Text::setString(const std::string &text)"
		},
		 "bool ComponentContainer::remove(const std::string& name)": {
			"prefix": "bool ComponentContainer::remove(const std::string& name)",
			"body": [
				"ComponentContainer:remove(${1:std:string& name})"
			],
			"description": "bool ComponentContainer::remove(const std::string& name)"
		},
		 "ShakyTiles3D* ShakyTiles3D::clone() const": {
			"prefix": "ShakyTiles3D* ShakyTiles3D::clone() const",
			"body": [
				"ShakyTiles3D* ShakyTiles3D:clone() "
			],
			"description": "ShakyTiles3D* ShakyTiles3D::clone() const"
		},
		 "bool Image::initWithTiffData(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithTiffData(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithTiffData(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithTiffData(const unsigned char * data, ssize_t dataLen)"
		},
		 "uint32_t VertexAttribBinding::getVertexAttribsFlags() const": {
			"prefix": "uint32_t VertexAttribBinding::getVertexAttribsFlags() const",
			"body": [
				"uint32_t VertexAttribBinding:getVertexAttribsFlags() "
			],
			"description": "uint32_t VertexAttribBinding::getVertexAttribsFlags() const"
		},
		 "void Physics3DSliderConstraint::setSoftnessOrthoLin(float softnessOrthoLin)": {
			"prefix": "void Physics3DSliderConstraint::setSoftnessOrthoLin(float softnessOrthoLin)",
			"body": [
				"Physics3DSliderConstraint:setSoftnessOrthoLin(${1:float softnessOrthoLin})"
			],
			"description": "void Physics3DSliderConstraint::setSoftnessOrthoLin(float softnessOrthoLin)"
		},
		 "EaseBounce* EaseBounceOut::reverse() const": {
			"prefix": "EaseBounce* EaseBounceOut::reverse() const",
			"body": [
				"EaseBounce* EaseBounceOut:reverse() "
			],
			"description": "EaseBounce* EaseBounceOut::reverse() const"
		},
		 "TextVAlignment Text::getTextVerticalAlignment()const": {
			"prefix": "TextVAlignment Text::getTextVerticalAlignment()const",
			"body": [
				"TextVAlignment Text:getTextVerticalAlignment()"
			],
			"description": "TextVAlignment Text::getTextVerticalAlignment()const"
		},
		 "void ScrollView::jumpToPercentBothDirection(const Vec2& percent)": {
			"prefix": "void ScrollView::jumpToPercentBothDirection(const Vec2& percent)",
			"body": [
				"ScrollView:jumpToPercentBothDirection(${1:Vec2& percent})"
			],
			"description": "void ScrollView::jumpToPercentBothDirection(const Vec2& percent)"
		},
		 "void ScrollView::processScrollEvent(MoveDirection dir, bool bounce)": {
			"prefix": "void ScrollView::processScrollEvent(MoveDirection dir, bool bounce)",
			"body": [
				"ScrollView:processScrollEvent(${1:MoveDirection dir},${2:bool bounce})"
			],
			"description": "void ScrollView::processScrollEvent(MoveDirection dir, bool bounce)"
		},
		 "void TextureAtlas::setupVBOandVAO()": {
			"prefix": "void TextureAtlas::setupVBOandVAO()",
			"body": [
				"void TextureAtlas:setupVBOandVAO()"
			],
			"description": "void TextureAtlas::setupVBOandVAO()"
		},
		 "void localStorageSetItem( const std::string& key, const std::string& value)": {
			"prefix": "void localStorageSetItem( const std::string& key, const std::string& value)",
			"body": [
				"localStorageSetItem(${1:std:string& key},${2:std:string& value})"
			],
			"description": "void localStorageSetItem( const std::string& key, const std::string& value)"
		},
		 "Follow* Follow::reverse() const": {
			"prefix": "Follow* Follow::reverse() const",
			"body": [
				"Follow* Follow:reverse() "
			],
			"description": "Follow* Follow::reverse() const"
		},
		 "void Widget::setFocusEnabled(bool enable)": {
			"prefix": "void Widget::setFocusEnabled(bool enable)",
			"body": [
				"Widget:setFocusEnabled(${1:bool enable})"
			],
			"description": "void Widget::setFocusEnabled(bool enable)"
		},
		 "void BlendFuncFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void BlendFuncFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"BlendFuncFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void BlendFuncFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void Follow::stop()": {
			"prefix": "void Follow::stop()",
			"body": [
				"void Follow:stop()"
			],
			"description": "void Follow::stop()"
		},
		 "bool ParticleFlower::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleFlower::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleFlower:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleFlower::initWithTotalParticles(int numberOfParticles)"
		},
		 "void Rect::setRect(float x, float y, float width, float height)": {
			"prefix": "void Rect::setRect(float x, float y, float width, float height)",
			"body": [
				"Rect:setRect(${1:float x},${2:float y},${3:float width},${4:float height})"
			],
			"description": "void Rect::setRect(float x, float y, float width, float height)"
		},
		 "bool Bundle3D::loadMeshDatasBinary_0_2(MeshDatas& meshdatas)": {
			"prefix": "bool Bundle3D::loadMeshDatasBinary_0_2(MeshDatas& meshdatas)",
			"body": [
				"Bundle3D:loadMeshDatasBinary_0_2(${1:MeshDatas& meshdatas})"
			],
			"description": "bool Bundle3D::loadMeshDatasBinary_0_2(MeshDatas& meshdatas)"
		},
		 "HeaderInfo Downloader::getHeader(const std::string &srcUrl)": {
			"prefix": "HeaderInfo Downloader::getHeader(const std::string &srcUrl)",
			"body": [
				"Downloader:getHeader(${1:std:string &srcUrl})"
			],
			"description": "HeaderInfo Downloader::getHeader(const std::string &srcUrl)"
		},
		 "void GLProgramState::setUniformVec2v(GLint uniformLocation, ssize_t size, const Vec2* pointer)": {
			"prefix": "void GLProgramState::setUniformVec2v(GLint uniformLocation, ssize_t size, const Vec2* pointer)",
			"body": [
				"GLProgramState:setUniformVec2v(${1:GLint uniformLocation},${2:ssize_t size},${3:Vec2* pointer})"
			],
			"description": "void GLProgramState::setUniformVec2v(GLint uniformLocation, ssize_t size, const Vec2* pointer)"
		},
		 "bool DisplayManager::containPoint(Vec2 &point)": {
			"prefix": "bool DisplayManager::containPoint(Vec2 &point)",
			"body": [
				"DisplayManager:containPoint(${1:Vec2 &point})"
			],
			"description": "bool DisplayManager::containPoint(Vec2 &point)"
		},
		 "EventListenerAcceleration* EventListenerAcceleration::clone()": {
			"prefix": "EventListenerAcceleration* EventListenerAcceleration::clone()",
			"body": [
				"EventListenerAcceleration* EventListenerAcceleration:clone()"
			],
			"description": "EventListenerAcceleration* EventListenerAcceleration::clone()"
		},
		 "int IndexBuffer::getSize() const": {
			"prefix": "int IndexBuffer::getSize() const",
			"body": [
				"int IndexBuffer:getSize() "
			],
			"description": "int IndexBuffer::getSize() const"
		},
		 "void Sprite::setReorderChildDirtyRecursively(void)": {
			"prefix": "void Sprite::setReorderChildDirtyRecursively(void)",
			"body": [
				"Sprite:setReorderChildDirtyRecursively(${1:void})"
			],
			"description": "void Sprite::setReorderChildDirtyRecursively(void)"
		},
		 "void JumpBy::update(float t)": {
			"prefix": "void JumpBy::update(float t)",
			"body": [
				"JumpBy:update(${1:float t})"
			],
			"description": "void JumpBy::update(float t)"
		},
		 "void Node::setName(const std::string& name)": {
			"prefix": "void Node::setName(const std::string& name)",
			"body": [
				"Node:setName(${1:std:string& name})"
			],
			"description": "void Node::setName(const std::string& name)"
		},
		 "void PhysicsBody::setMoment(float moment)": {
			"prefix": "void PhysicsBody::setMoment(float moment)",
			"body": [
				"PhysicsBody:setMoment(${1:float moment})"
			],
			"description": "void PhysicsBody::setMoment(float moment)"
		},
		 "void EditBoxImplCommon::setMaxLength(int maxLength)": {
			"prefix": "void EditBoxImplCommon::setMaxLength(int maxLength)",
			"body": [
				"EditBoxImplCommon:setMaxLength(${1:int maxLength})"
			],
			"description": "void EditBoxImplCommon::setMaxLength(int maxLength)"
		},
		 "void Button::setTitleFontSize(float size)": {
			"prefix": "void Button::setTitleFontSize(float size)",
			"body": [
				"Button:setTitleFontSize(${1:float size})"
			],
			"description": "void Button::setTitleFontSize(float size)"
		},
		 "void TextField::addEventListener(const ccTextFieldCallback& callback)": {
			"prefix": "void TextField::addEventListener(const ccTextFieldCallback& callback)",
			"body": [
				"TextField:addEventListener(${1:ccTextFieldCallback& callback})"
			],
			"description": "void TextField::addEventListener(const ccTextFieldCallback& callback)"
		},
		 "PhysicsSprite3D* PhysicsSprite3D::create(const std::string &modelPath, Physics3DRigidBodyDes* rigidDes, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)": {
			"prefix": "PhysicsSprite3D* PhysicsSprite3D::create(const std::string &modelPath, Physics3DRigidBodyDes* rigidDes, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)",
			"body": [
				"PhysicsSprite3D:create(${1:std:string &modelPath},${2:Physics3DRigidBodyDes* rigidDes},${3:cocos2d:Vec3& translateInPhysics},${4:cocos2d:Quaternion& rotInPhsyics})"
			],
			"description": "PhysicsSprite3D* PhysicsSprite3D::create(const std::string &modelPath, Physics3DRigidBodyDes* rigidDes, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)"
		},
		 "void GLProgramState::setUniformVec3(const std::string& uniformName, const Vec3& value)": {
			"prefix": "void GLProgramState::setUniformVec3(const std::string& uniformName, const Vec3& value)",
			"body": [
				"GLProgramState:setUniformVec3(${1:std:string& uniformName},${2:Vec3& value})"
			],
			"description": "void GLProgramState::setUniformVec3(const std::string& uniformName, const Vec3& value)"
		},
		 "void SpriteFrame::setOffset(const Vec2& offsets)": {
			"prefix": "void SpriteFrame::setOffset(const Vec2& offsets)",
			"body": [
				"SpriteFrame:setOffset(${1:Vec2& offsets})"
			],
			"description": "void SpriteFrame::setOffset(const Vec2& offsets)"
		},
		 "void SkeletonNode::changeSkins(const std::map<std::string, std::string>& boneSkinNameMap)": {
			"prefix": "void SkeletonNode::changeSkins(const std::map<std::string, std::string>& boneSkinNameMap)",
			"body": [
				"SkeletonNode:changeSkins(${1:std:map<std:string},${2:std:string>& boneSkinNameMap})"
			],
			"description": "void SkeletonNode::changeSkins(const std::map<std::string, std::string>& boneSkinNameMap)"
		},
		 "WIN32INPUTBOX_PARAM *CWin32InputBox::GetParam()": {
			"prefix": "WIN32INPUTBOX_PARAM *CWin32InputBox::GetParam()",
			"body": [
				"WIN32INPUTBOX_PARAM *CWin32InputBox:GetParam()"
			],
			"description": "WIN32INPUTBOX_PARAM *CWin32InputBox::GetParam()"
		},
		 "float NodeLoader::parsePropTypeFloat(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "float NodeLoader::parsePropTypeFloat(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeFloat(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "float NodeLoader::parsePropTypeFloat(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void ComAttribute::setBool(const std::string& key, bool value)": {
			"prefix": "void ComAttribute::setBool(const std::string& key, bool value)",
			"body": [
				"ComAttribute:setBool(${1:std:string& key},${2:bool value})"
			],
			"description": "void ComAttribute::setBool(const std::string& key, bool value)"
		},
		 "bool EventListenerController::init()": {
			"prefix": "bool EventListenerController::init()",
			"body": [
				"bool EventListenerController:init()"
			],
			"description": "bool EventListenerController::init()"
		},
		 "bool MenuItem::isEnabled() const": {
			"prefix": "bool MenuItem::isEnabled() const",
			"body": [
				"bool MenuItem:isEnabled() "
			],
			"description": "bool MenuItem::isEnabled() const"
		},
		 "void SimpleAudioEngine::preloadEffect(const char* pszFilePath)": {
			"prefix": "void SimpleAudioEngine::preloadEffect(const char* pszFilePath)",
			"body": [
				"SimpleAudioEngine:preloadEffect(${1:char* pszFilePath})"
			],
			"description": "void SimpleAudioEngine::preloadEffect(const char* pszFilePath)"
		},
		 "void SpriteBatchNode::removeSpriteFromAtlas(Sprite *sprite)": {
			"prefix": "void SpriteBatchNode::removeSpriteFromAtlas(Sprite *sprite)",
			"body": [
				"SpriteBatchNode:removeSpriteFromAtlas(${1:Sprite *sprite})"
			],
			"description": "void SpriteBatchNode::removeSpriteFromAtlas(Sprite *sprite)"
		},
		 "LayoutParameter* Widget::getLayoutParameter(LayoutParameter::Type type)": {
			"prefix": "LayoutParameter* Widget::getLayoutParameter(LayoutParameter::Type type)",
			"body": [
				"Widget:getLayoutParameter(${1:LayoutParameter:Type type})"
			],
			"description": "LayoutParameter* Widget::getLayoutParameter(LayoutParameter::Type type)"
		},
		 "void Layer::onTouchesMoved(const std::vector<Touch*>& touches, Event *event)": {
			"prefix": "void Layer::onTouchesMoved(const std::vector<Touch*>& touches, Event *event)",
			"body": [
				"Layer:onTouchesMoved(${1:std:vector<Touch*>& touches},${2:Event *event})"
			],
			"description": "void Layer::onTouchesMoved(const std::vector<Touch*>& touches, Event *event)"
		},
		 "void ControlLoader::onHandlePropTypeBlockControl(Node * pNode, Node * pParent, const char * pPropertyName, BlockControlData * pBlockControlData, CCBReader * ccbReader)": {
			"prefix": "void ControlLoader::onHandlePropTypeBlockControl(Node * pNode, Node * pParent, const char * pPropertyName, BlockControlData * pBlockControlData, CCBReader * ccbReader)",
			"body": [
				"ControlLoader:onHandlePropTypeBlockControl(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:BlockControlData * pBlockControlData},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlLoader::onHandlePropTypeBlockControl(Node * pNode, Node * pParent, const char * pPropertyName, BlockControlData * pBlockControlData, CCBReader * ccbReader)"
		},
		 "void RichText::adaptRenderers()": {
			"prefix": "void RichText::adaptRenderers()",
			"body": [
				"void RichText:adaptRenderers()"
			],
			"description": "void RichText::adaptRenderers()"
		},
		 "void UniformValue::setFloat(float value)": {
			"prefix": "void UniformValue::setFloat(float value)",
			"body": [
				"UniformValue:setFloat(${1:float value})"
			],
			"description": "void UniformValue::setFloat(float value)"
		},
		 "PhysicsJointGear* PhysicsJointGear::construct(PhysicsBody* a, PhysicsBody* b, float phase, float ratio)": {
			"prefix": "PhysicsJointGear* PhysicsJointGear::construct(PhysicsBody* a, PhysicsBody* b, float phase, float ratio)",
			"body": [
				"PhysicsJointGear:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:float phase},${4:float ratio})"
			],
			"description": "PhysicsJointGear* PhysicsJointGear::construct(PhysicsBody* a, PhysicsBody* b, float phase, float ratio)"
		},
		 "const char* ComAudio::getFile()": {
			"prefix": "const char* ComAudio::getFile()",
			"body": [
				" char* ComAudio:getFile()"
			],
			"description": "const char* ComAudio::getFile()"
		},
		 "void TransitionScene::onExit()": {
			"prefix": "void TransitionScene::onExit()",
			"body": [
				"void TransitionScene:onExit()"
			],
			"description": "void TransitionScene::onExit()"
		},
		 "Text* Text::create()": {
			"prefix": "Text* Text::create()",
			"body": [
				"Text* Text:create()"
			],
			"description": "Text* Text::create()"
		},
		 "void CCBAnimationManager::setDelegate(CCBAnimationManagerDelegate *pDelegate)": {
			"prefix": "void CCBAnimationManager::setDelegate(CCBAnimationManagerDelegate *pDelegate)",
			"body": [
				"CCBAnimationManager:setDelegate(${1:CCBAnimationManagerDelegate *pDelegate})"
			],
			"description": "void CCBAnimationManager::setDelegate(CCBAnimationManagerDelegate *pDelegate)"
		},
		 "int PhysicsBody::getGroup() const": {
			"prefix": "int PhysicsBody::getGroup() const",
			"body": [
				"int PhysicsBody:getGroup() "
			],
			"description": "int PhysicsBody::getGroup() const"
		},
		 "static std::string &ltrim(std::string &s)": {
			"prefix": "static std::string &ltrim(std::string &s)",
			"body": [
				"std:string &ltrim(${1:std:string &s})"
			],
			"description": "static std::string &ltrim(std::string &s)"
		},
		 "std::vector<cocos2d::Vec2> AutoPolygon::rdp(std::vector<cocos2d::Vec2> v, const float& optimization)": {
			"prefix": "std::vector<cocos2d::Vec2> AutoPolygon::rdp(std::vector<cocos2d::Vec2> v, const float& optimization)",
			"body": [
				"AutoPolygon:rdp(${1:std:vector<cocos2d:Vec2> v},${2:float& optimization})"
			],
			"description": "std::vector<cocos2d::Vec2> AutoPolygon::rdp(std::vector<cocos2d::Vec2> v, const float& optimization)"
		},
		 "void Slider::loadProgressBarTexture(SpriteFrame* spriteframe)": {
			"prefix": "void Slider::loadProgressBarTexture(SpriteFrame* spriteframe)",
			"body": [
				"Slider:loadProgressBarTexture(${1:SpriteFrame* spriteframe})"
			],
			"description": "void Slider::loadProgressBarTexture(SpriteFrame* spriteframe)"
		},
		 "PointLight* PointLight::create(const Vec3 &position, const Color3B &color, float range)": {
			"prefix": "PointLight* PointLight::create(const Vec3 &position, const Color3B &color, float range)",
			"body": [
				"PointLight:create(${1:Vec3 &position},${2:Color3B &color},${3:float range})"
			],
			"description": "PointLight* PointLight::create(const Vec3 &position, const Color3B &color, float range)"
		},
		 "void Director::resume()": {
			"prefix": "void Director::resume()",
			"body": [
				"void Director:resume()"
			],
			"description": "void Director::resume()"
		},
		 "ParticleSnow* ParticleSnow::create()": {
			"prefix": "ParticleSnow* ParticleSnow::create()",
			"body": [
				"ParticleSnow* ParticleSnow:create()"
			],
			"description": "ParticleSnow* ParticleSnow::create()"
		},
		 "void GLViewImpl::setCursorVisible( bool isVisible )": {
			"prefix": "void GLViewImpl::setCursorVisible( bool isVisible )",
			"body": [
				"GLViewImpl:setCursorVisible(${1:bool isVisible})"
			],
			"description": "void GLViewImpl::setCursorVisible( bool isVisible )"
		},
		 "void ParticleSystem::stopSystem()": {
			"prefix": "void ParticleSystem::stopSystem()",
			"body": [
				"void ParticleSystem:stopSystem()"
			],
			"description": "void ParticleSystem::stopSystem()"
		},
		 "void InputDelegate::onTouchEnded(Touch *pTouch, Event *pEvent)": {
			"prefix": "void InputDelegate::onTouchEnded(Touch *pTouch, Event *pEvent)",
			"body": [
				"InputDelegate:onTouchEnded(${1:Touch *pTouch},${2:Event *pEvent})"
			],
			"description": "void InputDelegate::onTouchEnded(Touch *pTouch, Event *pEvent)"
		},
		 "bool Repeat::isDone(void) const": {
			"prefix": "bool Repeat::isDone(void) const",
			"body": [
				"Repeat:isDone(${1:void})"
			],
			"description": "bool Repeat::isDone(void) const"
		},
		 "ssize_t TextAtlas::getStringLength()const": {
			"prefix": "ssize_t TextAtlas::getStringLength()const",
			"body": [
				"ssize_t TextAtlas:getStringLength()"
			],
			"description": "ssize_t TextAtlas::getStringLength()const"
		},
		 "void RenderState::StateBlock::cloneInto(StateBlock* state) const": {
			"prefix": "void RenderState::StateBlock::cloneInto(StateBlock* state) const",
			"body": [
				"RenderState:StateBlock:cloneInto(${1:StateBlock* state})"
			],
			"description": "void RenderState::StateBlock::cloneInto(StateBlock* state) const"
		},
		 "EventListenerController* EventListenerController::create()": {
			"prefix": "EventListenerController* EventListenerController::create()",
			"body": [
				"EventListenerController* EventListenerController:create()"
			],
			"description": "EventListenerController* EventListenerController::create()"
		},
		 "bool Vec2::isSegmentOverlap(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D, Vec2* S, Vec2* E)": {
			"prefix": "bool Vec2::isSegmentOverlap(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D, Vec2* S, Vec2* E)",
			"body": [
				"Vec2:isSegmentOverlap(${1:Vec2& A},${2:Vec2& B},${3:Vec2& C},${4:Vec2& D},${5:Vec2* S},${6:Vec2* E})"
			],
			"description": "bool Vec2::isSegmentOverlap(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D, Vec2* S, Vec2* E)"
		},
		 "void MeshCommand::listenRendererRecreated(EventCustom* event)": {
			"prefix": "void MeshCommand::listenRendererRecreated(EventCustom* event)",
			"body": [
				"MeshCommand:listenRendererRecreated(${1:EventCustom* event})"
			],
			"description": "void MeshCommand::listenRendererRecreated(EventCustom* event)"
		},
		 "Widget* Widget::create()": {
			"prefix": "Widget* Widget::create()",
			"body": [
				"Widget* Widget:create()"
			],
			"description": "Widget* Widget::create()"
		},
		 "void ControlButtonLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char * pPropertyName, float pFloatScale, CCBReader * ccbReader)": {
			"prefix": "void ControlButtonLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char * pPropertyName, float pFloatScale, CCBReader * ccbReader)",
			"body": [
				"ControlButtonLoader:onHandlePropTypeFloatScale(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:float pFloatScale},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlButtonLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char * pPropertyName, float pFloatScale, CCBReader * ccbReader)"
		},
		 "void ControlButtonLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)": {
			"prefix": "void ControlButtonLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)",
			"body": [
				"ControlButtonLoader:onHandlePropTypeColor3(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Color3B pColor3B},${5:CCBReader * ccbReader})"
			],
			"description": "void ControlButtonLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)"
		},
		 "void Camera::clearBackground()": {
			"prefix": "void Camera::clearBackground()",
			"body": [
				"void Camera:clearBackground()"
			],
			"description": "void Camera::clearBackground()"
		},
		 "void Mat4::createRotationZ(float angle, Mat4* dst)": {
			"prefix": "void Mat4::createRotationZ(float angle, Mat4* dst)",
			"body": [
				"Mat4:createRotationZ(${1:float angle},${2:Mat4* dst})"
			],
			"description": "void Mat4::createRotationZ(float angle, Mat4* dst)"
		},
		 "void MciPlayer::_SendGenericCommand( int nCommand, DWORD_PTR param1 /*= 0*/, DWORD_PTR parma2 /*= 0*/ )": {
			"prefix": "void MciPlayer::_SendGenericCommand( int nCommand, DWORD_PTR param1 /*= 0*/, DWORD_PTR parma2 /*= 0*/ )",
			"body": [
				"MciPlayer:_SendGenericCommand(${1:int nCommand},${2:DWORD_PTR param1 /*= 0*/},${3:DWORD_PTR parma2 /*= 0*/})"
			],
			"description": "void MciPlayer::_SendGenericCommand( int nCommand, DWORD_PTR param1 /*= 0*/, DWORD_PTR parma2 /*= 0*/ )"
		},
		 "void Widget::updateSizeAndPosition()": {
			"prefix": "void Widget::updateSizeAndPosition()",
			"body": [
				"void Widget:updateSizeAndPosition()"
			],
			"description": "void Widget::updateSizeAndPosition()"
		},
		 "GLfloat ClippingNode::getAlphaThreshold() const": {
			"prefix": "GLfloat ClippingNode::getAlphaThreshold() const",
			"body": [
				"GLfloat ClippingNode:getAlphaThreshold() "
			],
			"description": "GLfloat ClippingNode::getAlphaThreshold() const"
		},
		 "ssize_t Technique::getPassCount() const": {
			"prefix": "ssize_t Technique::getPassCount() const",
			"body": [
				"ssize_t Technique:getPassCount() "
			],
			"description": "ssize_t Technique::getPassCount() const"
		},
		 "void Widget::setPropagateTouchEvents(bool isPropagate)": {
			"prefix": "void Widget::setPropagateTouchEvents(bool isPropagate)",
			"body": [
				"Widget:setPropagateTouchEvents(${1:bool isPropagate})"
			],
			"description": "void Widget::setPropagateTouchEvents(bool isPropagate)"
		},
		 "void UserDefault::setDoubleForKey(const char* pKey, double value)": {
			"prefix": "void UserDefault::setDoubleForKey(const char* pKey, double value)",
			"body": [
				"UserDefault:setDoubleForKey(${1:char* pKey},${2:double value})"
			],
			"description": "void UserDefault::setDoubleForKey(const char* pKey, double value)"
		},
		 "bool TextureAtlas::resizeCapacity(ssize_t newCapacity)": {
			"prefix": "bool TextureAtlas::resizeCapacity(ssize_t newCapacity)",
			"body": [
				"TextureAtlas:resizeCapacity(${1:ssize_t newCapacity})"
			],
			"description": "bool TextureAtlas::resizeCapacity(ssize_t newCapacity)"
		},
		 "void ActionCamera::setEye(float x, float y, float z)": {
			"prefix": "void ActionCamera::setEye(float x, float y, float z)",
			"body": [
				"ActionCamera:setEye(${1:float x},${2:float y},${3:float z})"
			],
			"description": "void ActionCamera::setEye(float x, float y, float z)"
		},
		 "bool UTF8ToUTF16(const std::string& utf8, std::u16string& outUtf16)": {
			"prefix": "bool UTF8ToUTF16(const std::string& utf8, std::u16string& outUtf16)",
			"body": [
				"UTF8ToUTF16(${1:std:string& utf8},${2:std:u16string& outUtf16})"
			],
			"description": "bool UTF8ToUTF16(const std::string& utf8, std::u16string& outUtf16)"
		},
		 "void ArmatureDataManager::addArmatureData(const std::string& id, ArmatureData *armatureData, const std::string& configFilePath)": {
			"prefix": "void ArmatureDataManager::addArmatureData(const std::string& id, ArmatureData *armatureData, const std::string& configFilePath)",
			"body": [
				"ArmatureDataManager:addArmatureData(${1:std:string& id},${2:ArmatureData *armatureData},${3:std:string& configFilePath})"
			],
			"description": "void ArmatureDataManager::addArmatureData(const std::string& id, ArmatureData *armatureData, const std::string& configFilePath)"
		},
		 "void BoneNode::updateDisplayedColor(const cocos2d::Color3B& parentColor)": {
			"prefix": "void BoneNode::updateDisplayedColor(const cocos2d::Color3B& parentColor)",
			"body": [
				"BoneNode:updateDisplayedColor(${1:cocos2d:Color3B& parentColor})"
			],
			"description": "void BoneNode::updateDisplayedColor(const cocos2d::Color3B& parentColor)"
		},
		 "bool Node::isScheduled(SEL_SCHEDULE selector)": {
			"prefix": "bool Node::isScheduled(SEL_SCHEDULE selector)",
			"body": [
				"Node:isScheduled(${1:SEL_SCHEDULE selector})"
			],
			"description": "bool Node::isScheduled(SEL_SCHEDULE selector)"
		},
		 "GridBase* Grid3DAction::getGrid()": {
			"prefix": "GridBase* Grid3DAction::getGrid()",
			"body": [
				"GridBase* Grid3DAction:getGrid()"
			],
			"description": "GridBase* Grid3DAction::getGrid()"
		},
		 "void CSLoader::purge()": {
			"prefix": "void CSLoader::purge()",
			"body": [
				"void CSLoader:purge()"
			],
			"description": "void CSLoader::purge()"
		},
		 "void ActionEase::update(float time)": {
			"prefix": "void ActionEase::update(float time)",
			"body": [
				"ActionEase:update(${1:float time})"
			],
			"description": "void ActionEase::update(float time)"
		},
		 "FadeOut* FadeOut::create(float d)": {
			"prefix": "FadeOut* FadeOut::create(float d)",
			"body": [
				"FadeOut:create(${1:float d})"
			],
			"description": "FadeOut* FadeOut::create(float d)"
		},
		 "void LoadingBar::loadTexture(const std::string& texture,TextureResType texType)": {
			"prefix": "void LoadingBar::loadTexture(const std::string& texture,TextureResType texType)",
			"body": [
				"LoadingBar:loadTexture(${1:std:string& texture},${2:TextureResType texType})"
			],
			"description": "void LoadingBar::loadTexture(const std::string& texture,TextureResType texType)"
		},
		 "void EditBoxImplWin::setMaxLength(int maxLength)": {
			"prefix": "void EditBoxImplWin::setMaxLength(int maxLength)",
			"body": [
				"EditBoxImplWin:setMaxLength(${1:int maxLength})"
			],
			"description": "void EditBoxImplWin::setMaxLength(int maxLength)"
		},
		 "void AudioEngine::setFinishCallback(int audioID, const std::function<void (int, const std::string &)> &callback)": {
			"prefix": "void AudioEngine::setFinishCallback(int audioID, const std::function<void (int, const std::string &)> &callback)",
			"body": [
				"AudioEngine:setFinishCallback(${1:int audioID},${2:std:function<void (int},${3:std:string &})"
			],
			"description": "void AudioEngine::setFinishCallback(int audioID, const std::function<void (int, const std::string &)> &callback)"
		},
		 "Image::Format Image::detectFormat(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "Image::Format Image::detectFormat(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:detectFormat(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "Image::Format Image::detectFormat(const unsigned char * data, ssize_t dataLen)"
		},
		 "cpBody *ColliderDetector::getBody() const": {
			"prefix": "cpBody *ColliderDetector::getBody() const",
			"body": [
				"cpBody *ColliderDetector:getBody() "
			],
			"description": "cpBody *ColliderDetector::getBody() const"
		},
		 "float __String::floatValue() const": {
			"prefix": "float __String::floatValue() const",
			"body": [
				"float __String:floatValue() "
			],
			"description": "float __String::floatValue() const"
		},
		 "Physics3D6DofConstraint* Physics3D6DofConstraint::create(Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInB, bool useLinearReferenceFrameB)": {
			"prefix": "Physics3D6DofConstraint* Physics3D6DofConstraint::create(Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInB, bool useLinearReferenceFrameB)",
			"body": [
				"Physics3D6DofConstraint:create(${1:Physics3DRigidBody* rbB},${2:cocos2d:Mat4& frameInB},${3:bool useLinearReferenceFrameB})"
			],
			"description": "Physics3D6DofConstraint* Physics3D6DofConstraint::create(Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInB, bool useLinearReferenceFrameB)"
		},
		 "void Director::setNextDeltaTimeZero(bool nextDeltaTimeZero)": {
			"prefix": "void Director::setNextDeltaTimeZero(bool nextDeltaTimeZero)",
			"body": [
				"Director:setNextDeltaTimeZero(${1:bool nextDeltaTimeZero})"
			],
			"description": "void Director::setNextDeltaTimeZero(bool nextDeltaTimeZero)"
		},
		 "ActionTimeline* ActionTimeline::create()": {
			"prefix": "ActionTimeline* ActionTimeline::create()",
			"body": [
				"ActionTimeline* ActionTimeline:create()"
			],
			"description": "ActionTimeline* ActionTimeline::create()"
		},
		 "void Mesh::bindMeshCommand()": {
			"prefix": "void Mesh::bindMeshCommand()",
			"body": [
				"void Mesh:bindMeshCommand()"
			],
			"description": "void Mesh::bindMeshCommand()"
		},
		 "void FlatBuffersSerialize::purge()": {
			"prefix": "void FlatBuffersSerialize::purge()",
			"body": [
				"void FlatBuffersSerialize:purge()"
			],
			"description": "void FlatBuffersSerialize::purge()"
		},
		 "void PhysicsShape::setDensity(float density)": {
			"prefix": "void PhysicsShape::setDensity(float density)",
			"body": [
				"PhysicsShape:setDensity(${1:float density})"
			],
			"description": "void PhysicsShape::setDensity(float density)"
		},
		 "bool Application::openURL(const std::string &url)": {
			"prefix": "bool Application::openURL(const std::string &url)",
			"body": [
				"Application:openURL(${1:std:string &url})"
			],
			"description": "bool Application::openURL(const std::string &url)"
		},
		 "bool PhysicsDebugDraw::begin()": {
			"prefix": "bool PhysicsDebugDraw::begin()",
			"body": [
				"bool PhysicsDebugDraw:begin()"
			],
			"description": "bool PhysicsDebugDraw::begin()"
		},
		 "Texture2D * NodeLoader::parsePropTypeTexture(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "Texture2D * NodeLoader::parsePropTypeTexture(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"* NodeLoader:parsePropTypeTexture(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "Texture2D * NodeLoader::parsePropTypeTexture(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void Widget::onPressStateChangedToPressed()": {
			"prefix": "void Widget::onPressStateChangedToPressed()",
			"body": [
				"void Widget:onPressStateChangedToPressed()"
			],
			"description": "void Widget::onPressStateChangedToPressed()"
		},
		 "void Physics3DSliderConstraint::setSoftnessLimLin(float softnessLimLin)": {
			"prefix": "void Physics3DSliderConstraint::setSoftnessLimLin(float softnessLimLin)",
			"body": [
				"Physics3DSliderConstraint:setSoftnessLimLin(${1:float softnessLimLin})"
			],
			"description": "void Physics3DSliderConstraint::setSoftnessLimLin(float softnessLimLin)"
		},
		 "ShuffleTiles* ShuffleTiles::clone() const": {
			"prefix": "ShuffleTiles* ShuffleTiles::clone() const",
			"body": [
				"ShuffleTiles* ShuffleTiles:clone() "
			],
			"description": "ShuffleTiles* ShuffleTiles::clone() const"
		},
		 "void MciPlayer::Resume()": {
			"prefix": "void MciPlayer::Resume()",
			"body": [
				"void MciPlayer:Resume()"
			],
			"description": "void MciPlayer::Resume()"
		},
		 "float Rect::getMidY() const": {
			"prefix": "float Rect::getMidY() const",
			"body": [
				"float Rect:getMidY() "
			],
			"description": "float Rect::getMidY() const"
		},
		 "const Size& Widget::getCustomSize() const": {
			"prefix": "const Size& Widget::getCustomSize() const",
			"body": [
				" Size& Widget:getCustomSize() "
			],
			"description": "const Size& Widget::getCustomSize() const"
		},
		 "TransitionJumpZoom* TransitionJumpZoom::create(float t, Scene* scene)": {
			"prefix": "TransitionJumpZoom* TransitionJumpZoom::create(float t, Scene* scene)",
			"body": [
				"TransitionJumpZoom:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionJumpZoom* TransitionJumpZoom::create(float t, Scene* scene)"
		},
		 "void Tween::gotoAndPause(int frameIndex)": {
			"prefix": "void Tween::gotoAndPause(int frameIndex)",
			"body": [
				"Tween:gotoAndPause(${1:int frameIndex})"
			],
			"description": "void Tween::gotoAndPause(int frameIndex)"
		},
		 "bool Image::isTiff(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::isTiff(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:isTiff(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::isTiff(const unsigned char * data, ssize_t dataLen)"
		},
		 "void Vec4::scale(float scalar)": {
			"prefix": "void Vec4::scale(float scalar)",
			"body": [
				"Vec4:scale(${1:float scalar})"
			],
			"description": "void Vec4::scale(float scalar)"
		},
		 "ScriptEngineManager* ScriptEngineManager::getInstance()": {
			"prefix": "ScriptEngineManager* ScriptEngineManager::getInstance()",
			"body": [
				"ScriptEngineManager* ScriptEngineManager:getInstance()"
			],
			"description": "ScriptEngineManager* ScriptEngineManager::getInstance()"
		},
		 "bool Layer::isAccelerometerEnabled() const": {
			"prefix": "bool Layer::isAccelerometerEnabled() const",
			"body": [
				"bool Layer:isAccelerometerEnabled() "
			],
			"description": "bool Layer::isAccelerometerEnabled() const"
		},
		 "float Physics3DSliderConstraint::getDampingLimLin() const": {
			"prefix": "float Physics3DSliderConstraint::getDampingLimLin() const",
			"body": [
				"float Physics3DSliderConstraint:getDampingLimLin() "
			],
			"description": "float Physics3DSliderConstraint::getDampingLimLin() const"
		},
		 "Frame* ActionTimelineCache::loadScaleFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadScaleFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadScaleFrameWithFlatBuffers(${1:flatbuffers:ScaleFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadScaleFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)"
		},
		 "void NavMeshAgent::pause()": {
			"prefix": "void NavMeshAgent::pause()",
			"body": [
				"void NavMeshAgent:pause()"
			],
			"description": "void NavMeshAgent::pause()"
		},
		 "bool FileUtilsWin32::isFileExistInternal(const std::string& strFilePath) const": {
			"prefix": "bool FileUtilsWin32::isFileExistInternal(const std::string& strFilePath) const",
			"body": [
				"FileUtilsWin32:isFileExistInternal(${1:std:string& strFilePath})"
			],
			"description": "bool FileUtilsWin32::isFileExistInternal(const std::string& strFilePath) const"
		},
		 "void Ref::release()": {
			"prefix": "void Ref::release()",
			"body": [
				"void Ref:release()"
			],
			"description": "void Ref::release()"
		},
		 "void Mat4::getLeftVector(Vec3* dst) const": {
			"prefix": "void Mat4::getLeftVector(Vec3* dst) const",
			"body": [
				"Mat4:getLeftVector(${1:Vec3* dst})"
			],
			"description": "void Mat4::getLeftVector(Vec3* dst) const"
		},
		 "void Sprite::setSpriteFrame(SpriteFrame *spriteFrame)": {
			"prefix": "void Sprite::setSpriteFrame(SpriteFrame *spriteFrame)",
			"body": [
				"Sprite:setSpriteFrame(${1:SpriteFrame *spriteFrame})"
			],
			"description": "void Sprite::setSpriteFrame(SpriteFrame *spriteFrame)"
		},
		 "void Node::enumerateChildren(const std::string &name, std::function<bool (Node *)> callback) const": {
			"prefix": "void Node::enumerateChildren(const std::string &name, std::function<bool (Node *)> callback) const",
			"body": [
				"Node:enumerateChildren(${1:std:string &name},${2:std:function<bool (Node *})"
			],
			"description": "void Node::enumerateChildren(const std::string &name, std::function<bool (Node *)> callback) const"
		},
		 "void IMEDispatcher::removeDelegate(IMEDelegate* delegate)": {
			"prefix": "void IMEDispatcher::removeDelegate(IMEDelegate* delegate)",
			"body": [
				"IMEDispatcher:removeDelegate(${1:IMEDelegate* delegate})"
			],
			"description": "void IMEDispatcher::removeDelegate(IMEDelegate* delegate)"
		},
		 "void Button::setTitleText(const std::string& text)": {
			"prefix": "void Button::setTitleText(const std::string& text)",
			"body": [
				"Button:setTitleText(${1:std:string& text})"
			],
			"description": "void Button::setTitleText(const std::string& text)"
		},
		 "float Physics3DSliderConstraint::getSoftnessDirAng() const": {
			"prefix": "float Physics3DSliderConstraint::getSoftnessDirAng() const",
			"body": [
				"float Physics3DSliderConstraint:getSoftnessDirAng() "
			],
			"description": "float Physics3DSliderConstraint::getSoftnessDirAng() const"
		},
		 "bool NavMesh::loadNavMeshFile()": {
			"prefix": "bool NavMesh::loadNavMeshFile()",
			"body": [
				"bool NavMesh:loadNavMeshFile()"
			],
			"description": "bool NavMesh::loadNavMeshFile()"
		},
		 "static void deleteNode(tinyxml2::XMLDocument* doc, tinyxml2::XMLElement* node)": {
			"prefix": "static void deleteNode(tinyxml2::XMLDocument* doc, tinyxml2::XMLElement* node)",
			"body": [
				"void deleteNode(${1:tinyxml2:XMLDocument* doc},${2:tinyxml2:XMLElement* node})"
			],
			"description": "static void deleteNode(tinyxml2::XMLDocument* doc, tinyxml2::XMLElement* node)"
		},
		 "void EaseIn::update(float time)": {
			"prefix": "void EaseIn::update(float time)",
			"body": [
				"EaseIn:update(${1:float time})"
			],
			"description": "void EaseIn::update(float time)"
		},
		 "void Node::setGLProgram(GLProgram* glProgram)": {
			"prefix": "void Node::setGLProgram(GLProgram* glProgram)",
			"body": [
				"Node:setGLProgram(${1:GLProgram* glProgram})"
			],
			"description": "void Node::setGLProgram(GLProgram* glProgram)"
		},
		 "float Physics3DSliderConstraint::getMaxLinMotorForce() const": {
			"prefix": "float Physics3DSliderConstraint::getMaxLinMotorForce() const",
			"body": [
				"float Physics3DSliderConstraint:getMaxLinMotorForce() "
			],
			"description": "float Physics3DSliderConstraint::getMaxLinMotorForce() const"
		},
		 "Sprite * TMXLayer::appendTileForGID(uint32_t gid, const Vec2& pos)": {
			"prefix": "Sprite * TMXLayer::appendTileForGID(uint32_t gid, const Vec2& pos)",
			"body": [
				"* TMXLayer:appendTileForGID(${1:uint32_t gid},${2:Vec2& pos})"
			],
			"description": "Sprite * TMXLayer::appendTileForGID(uint32_t gid, const Vec2& pos)"
		},
		 "void CCBAnimationManager::sequenceCompleted()": {
			"prefix": "void CCBAnimationManager::sequenceCompleted()",
			"body": [
				"void CCBAnimationManager:sequenceCompleted()"
			],
			"description": "void CCBAnimationManager::sequenceCompleted()"
		},
		 "void PhysicsBody::setScale(float scaleX, float scaleY)": {
			"prefix": "void PhysicsBody::setScale(float scaleX, float scaleY)",
			"body": [
				"PhysicsBody:setScale(${1:float scaleX},${2:float scaleY})"
			],
			"description": "void PhysicsBody::setScale(float scaleX, float scaleY)"
		},
		 "void Physics3DRigidBody::setAngularVelocity( const cocos2d::Vec3& ang_vel )": {
			"prefix": "void Physics3DRigidBody::setAngularVelocity( const cocos2d::Vec3& ang_vel )",
			"body": [
				"Physics3DRigidBody:setAngularVelocity(${1:cocos2d:Vec3& ang_vel})"
			],
			"description": "void Physics3DRigidBody::setAngularVelocity( const cocos2d::Vec3& ang_vel )"
		},
		 "Frame* ActionTimelineCache::loadEventFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadEventFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadEventFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadEventFrame(const rapidjson::Value& json)"
		},
		 "bool PointArray::initWithCapacity(ssize_t capacity)": {
			"prefix": "bool PointArray::initWithCapacity(ssize_t capacity)",
			"body": [
				"PointArray:initWithCapacity(${1:ssize_t capacity})"
			],
			"description": "bool PointArray::initWithCapacity(ssize_t capacity)"
		},
		 "__String* __String::createWithData(const unsigned char* data, size_t nLen)": {
			"prefix": "__String* __String::createWithData(const unsigned char* data, size_t nLen)",
			"body": [
				"__String:createWithData(${1:unsigned char* data},${2:size_t nLen})"
			],
			"description": "__String* __String::createWithData(const unsigned char* data, size_t nLen)"
		},
		 "int EnhanceAPI::setLowPowerMode(bool enable)": {
			"prefix": "int EnhanceAPI::setLowPowerMode(bool enable)",
			"body": [
				"EnhanceAPI:setLowPowerMode(${1:bool enable})"
			],
			"description": "int EnhanceAPI::setLowPowerMode(bool enable)"
		},
		 "void ActionTimeline::play(std::string name, bool loop)": {
			"prefix": "void ActionTimeline::play(std::string name, bool loop)",
			"body": [
				"ActionTimeline:play(${1:std:string name},${2:bool loop})"
			],
			"description": "void ActionTimeline::play(std::string name, bool loop)"
		},
		 "void ScrollView::jumpToTopRight()": {
			"prefix": "void ScrollView::jumpToTopRight()",
			"body": [
				"void ScrollView:jumpToTopRight()"
			],
			"description": "void ScrollView::jumpToTopRight()"
		},
		 "const std::string& NotificationObserver::getName() const": {
			"prefix": "const std::string& NotificationObserver::getName() const",
			"body": [
				" std:string& NotificationObserver:getName() "
			],
			"description": "const std::string& NotificationObserver::getName() const"
		},
		 "bool SkeletonRenderer::setAttachment (const std::string& slotName, const char* attachmentName)": {
			"prefix": "bool SkeletonRenderer::setAttachment (const std::string& slotName, const char* attachmentName)",
			"body": [
				"SkeletonRenderer:setAttachment (${1:std:string& slotName},${2:char* attachmentName})"
			],
			"description": "bool SkeletonRenderer::setAttachment (const std::string& slotName, const char* attachmentName)"
		},
		 "void Physics3DCollider::setFriction(float frict)": {
			"prefix": "void Physics3DCollider::setFriction(float frict)",
			"body": [
				"Physics3DCollider:setFriction(${1:float frict})"
			],
			"description": "void Physics3DCollider::setFriction(float frict)"
		},
		 "void LabelTTF::setFontFillColor(const Color3B &tintColor, bool updateTexture)": {
			"prefix": "void LabelTTF::setFontFillColor(const Color3B &tintColor, bool updateTexture)",
			"body": [
				"LabelTTF:setFontFillColor(${1:Color3B &tintColor},${2:bool updateTexture})"
			],
			"description": "void LabelTTF::setFontFillColor(const Color3B &tintColor, bool updateTexture)"
		},
		 "void WsThreadHelper::joinSubThread()": {
			"prefix": "void WsThreadHelper::joinSubThread()",
			"body": [
				"void WsThreadHelper:joinSubThread()"
			],
			"description": "void WsThreadHelper::joinSubThread()"
		},
		 "void ScrollView::scrollToLeft(float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToLeft(float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToLeft(${1:float second},${2:bool attenuated})"
			],
			"description": "void ScrollView::scrollToLeft(float second, bool attenuated)"
		},
		 "void Node::detachChild(Node *child, ssize_t childIndex, bool doCleanup)": {
			"prefix": "void Node::detachChild(Node *child, ssize_t childIndex, bool doCleanup)",
			"body": [
				"Node:detachChild(${1:Node *child},${2:ssize_t childIndex},${3:bool doCleanup})"
			],
			"description": "void Node::detachChild(Node *child, ssize_t childIndex, bool doCleanup)"
		},
		 "void Console::log(const char* buf)": {
			"prefix": "void Console::log(const char* buf)",
			"body": [
				"Console:log(${1:char* buf})"
			],
			"description": "void Console::log(const char* buf)"
		},
		 "void CCBSequence::setChainedSequenceId(int nChainedSequenceId)": {
			"prefix": "void CCBSequence::setChainedSequenceId(int nChainedSequenceId)",
			"body": [
				"CCBSequence:setChainedSequenceId(${1:int nChainedSequenceId})"
			],
			"description": "void CCBSequence::setChainedSequenceId(int nChainedSequenceId)"
		},
		 "void Node::setAnchorPoint(const Vec2& point)": {
			"prefix": "void Node::setAnchorPoint(const Vec2& point)",
			"body": [
				"Node:setAnchorPoint(${1:Vec2& point})"
			],
			"description": "void Node::setAnchorPoint(const Vec2& point)"
		},
		 "void ListView::addChild(cocos2d::Node *child, int zOrder)": {
			"prefix": "void ListView::addChild(cocos2d::Node *child, int zOrder)",
			"body": [
				"ListView:addChild(${1:cocos2d:Node *child},${2:int zOrder})"
			],
			"description": "void ListView::addChild(cocos2d::Node *child, int zOrder)"
		},
		 "void BoneNode::batchBoneDrawToSkeleton(BoneNode* bone) const": {
			"prefix": "void BoneNode::batchBoneDrawToSkeleton(BoneNode* bone) const",
			"body": [
				"BoneNode:batchBoneDrawToSkeleton(${1:BoneNode* bone})"
			],
			"description": "void BoneNode::batchBoneDrawToSkeleton(BoneNode* bone) const"
		},
		 "PointArray* PointArray::clone() const": {
			"prefix": "PointArray* PointArray::clone() const",
			"body": [
				"PointArray* PointArray:clone() "
			],
			"description": "PointArray* PointArray::clone() const"
		},
		 "bool ScriptEngineManager::sendNodeEventToJSExtended(Node* node, int action)": {
			"prefix": "bool ScriptEngineManager::sendNodeEventToJSExtended(Node* node, int action)",
			"body": [
				"ScriptEngineManager:sendNodeEventToJSExtended(${1:Node* node},${2:int action})"
			],
			"description": "bool ScriptEngineManager::sendNodeEventToJSExtended(Node* node, int action)"
		},
		 "void Layout::setBackGroundColor(const Color3B &color)": {
			"prefix": "void Layout::setBackGroundColor(const Color3B &color)",
			"body": [
				"Layout:setBackGroundColor(${1:Color3B &color})"
			],
			"description": "void Layout::setBackGroundColor(const Color3B &color)"
		},
		 "MenuItemToggle * MenuItemToggle::createWithCallbackVA(const ccMenuCallback &callback, MenuItem* item, ...)": {
			"prefix": "MenuItemToggle * MenuItemToggle::createWithCallbackVA(const ccMenuCallback &callback, MenuItem* item, ...)",
			"body": [
				"* MenuItemToggle:createWithCallbackVA(${1:ccMenuCallback &callback},${2:MenuItem* item},${3:...})"
			],
			"description": "MenuItemToggle * MenuItemToggle::createWithCallbackVA(const ccMenuCallback &callback, MenuItem* item, ...)"
		},
		 "RenderState::StateBlock* RenderState::getStateBlock() const": {
			"prefix": "RenderState::StateBlock* RenderState::getStateBlock() const",
			"body": [
				"RenderState:StateBlock* RenderState:getStateBlock() "
			],
			"description": "RenderState::StateBlock* RenderState::getStateBlock() const"
		},
		 "Data FileUtilsWin32::getDataFromFile(const std::string& filename)": {
			"prefix": "Data FileUtilsWin32::getDataFromFile(const std::string& filename)",
			"body": [
				"FileUtilsWin32:getDataFromFile(${1:std:string& filename})"
			],
			"description": "Data FileUtilsWin32::getDataFromFile(const std::string& filename)"
		},
		 "EaseElasticInOut* EaseElasticInOut::create(ActionInterval *action)": {
			"prefix": "EaseElasticInOut* EaseElasticInOut::create(ActionInterval *action)",
			"body": [
				"EaseElasticInOut:create(${1:ActionInterval *action})"
			],
			"description": "EaseElasticInOut* EaseElasticInOut::create(ActionInterval *action)"
		},
		 "void VideoPlayer::addEventListener(const VideoPlayer::ccVideoPlayerCallback& callback)": {
			"prefix": "void VideoPlayer::addEventListener(const VideoPlayer::ccVideoPlayerCallback& callback)",
			"body": [
				"VideoPlayer:addEventListener(${1:VideoPlayer:ccVideoPlayerCallback& callback})"
			],
			"description": "void VideoPlayer::addEventListener(const VideoPlayer::ccVideoPlayerCallback& callback)"
		},
		 "float Physics3DRigidBody::getHitFraction() const": {
			"prefix": "float Physics3DRigidBody::getHitFraction() const",
			"body": [
				"float Physics3DRigidBody:getHitFraction() "
			],
			"description": "float Physics3DRigidBody::getHitFraction() const"
		},
		 "Vec2 PointArray::getControlPointAtIndex(ssize_t index)": {
			"prefix": "Vec2 PointArray::getControlPointAtIndex(ssize_t index)",
			"body": [
				"PointArray:getControlPointAtIndex(${1:ssize_t index})"
			],
			"description": "Vec2 PointArray::getControlPointAtIndex(ssize_t index)"
		},
		 "void Label::enableGlow(const Color4B& glowColor)": {
			"prefix": "void Label::enableGlow(const Color4B& glowColor)",
			"body": [
				"Label:enableGlow(${1:Color4B& glowColor})"
			],
			"description": "void Label::enableGlow(const Color4B& glowColor)"
		},
		 "bool Console::listenOnTCP(int port)": {
			"prefix": "bool Console::listenOnTCP(int port)",
			"body": [
				"Console:listenOnTCP(${1:int port})"
			],
			"description": "bool Console::listenOnTCP(int port)"
		},
		 "void Sprite3DCache::removeAllSprite3DData()": {
			"prefix": "void Sprite3DCache::removeAllSprite3DData()",
			"body": [
				"void Sprite3DCache:removeAllSprite3DData()"
			],
			"description": "void Sprite3DCache::removeAllSprite3DData()"
		},
		 "void NavMeshDebugDraw::vertex(const float* pos, unsigned int color)": {
			"prefix": "void NavMeshDebugDraw::vertex(const float* pos, unsigned int color)",
			"body": [
				"NavMeshDebugDraw:vertex(${1:float* pos},${2:unsigned int color})"
			],
			"description": "void NavMeshDebugDraw::vertex(const float* pos, unsigned int color)"
		},
		 "const Value& CCBAnimationManager::getBaseValue(Node *pNode, const std::string& propName)": {
			"prefix": "const Value& CCBAnimationManager::getBaseValue(Node *pNode, const std::string& propName)",
			"body": [
				"Value& CCBAnimationManager:getBaseValue(${1:Node *pNode},${2:std:string& propName})"
			],
			"description": "const Value& CCBAnimationManager::getBaseValue(Node *pNode, const std::string& propName)"
		},
		 "void ClippingNode::onEnter()": {
			"prefix": "void ClippingNode::onEnter()",
			"body": [
				"void ClippingNode:onEnter()"
			],
			"description": "void ClippingNode::onEnter()"
		},
		 "void AndroidJavaEngine::stopAllEffects()": {
			"prefix": "void AndroidJavaEngine::stopAllEffects()",
			"body": [
				"void AndroidJavaEngine:stopAllEffects()"
			],
			"description": "void AndroidJavaEngine::stopAllEffects()"
		},
		 "bool DisplayManager::isVisible() const": {
			"prefix": "bool DisplayManager::isVisible() const",
			"body": [
				"bool DisplayManager:isVisible() "
			],
			"description": "bool DisplayManager::isVisible() const"
		},
		 "void Vec2::add(const Vec2& v1, const Vec2& v2, Vec2* dst)": {
			"prefix": "void Vec2::add(const Vec2& v1, const Vec2& v2, Vec2* dst)",
			"body": [
				"Vec2:add(${1:Vec2& v1},${2:Vec2& v2},${3:Vec2* dst})"
			],
			"description": "void Vec2::add(const Vec2& v1, const Vec2& v2, Vec2* dst)"
		},
		 "LayerGradient* LayerGradient::create()": {
			"prefix": "LayerGradient* LayerGradient::create()",
			"body": [
				"LayerGradient* LayerGradient:create()"
			],
			"description": "LayerGradient* LayerGradient::create()"
		},
		 "const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, const char* key)": {
			"prefix": "const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, const char* key)",
			"body": [
				"rapidjson:Value& DictionaryHelper:getSubDictionary_json(${1:rapidjson:Value &root},${2:char* key})"
			],
			"description": "const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, const char* key)"
		},
		 "void AbstractCheckButton::setupBackgroundTexture()": {
			"prefix": "void AbstractCheckButton::setupBackgroundTexture()",
			"body": [
				"void AbstractCheckButton:setupBackgroundTexture()"
			],
			"description": "void AbstractCheckButton::setupBackgroundTexture()"
		},
		 "void GLView::updateDesignResolutionSize()": {
			"prefix": "void GLView::updateDesignResolutionSize()",
			"body": [
				"void GLView:updateDesignResolutionSize()"
			],
			"description": "void GLView::updateDesignResolutionSize()"
		},
		 "void PhysicsDebugDraw::drawShape(PhysicsShape& shape)": {
			"prefix": "void PhysicsDebugDraw::drawShape(PhysicsShape& shape)",
			"body": [
				"PhysicsDebugDraw:drawShape(${1:PhysicsShape& shape})"
			],
			"description": "void PhysicsDebugDraw::drawShape(PhysicsShape& shape)"
		},
		 "const Vec2& Armature::getOffsetPoints() const": {
			"prefix": "const Vec2& Armature::getOffsetPoints() const",
			"body": [
				" Vec2& Armature:getOffsetPoints() "
			],
			"description": "const Vec2& Armature::getOffsetPoints() const"
		},
		 "bool Sprite::initWithTexture(Texture2D *texture)": {
			"prefix": "bool Sprite::initWithTexture(Texture2D *texture)",
			"body": [
				"Sprite:initWithTexture(${1:Texture2D *texture})"
			],
			"description": "bool Sprite::initWithTexture(Texture2D *texture)"
		},
		 "bool TextField::getDetachWithIME()const": {
			"prefix": "bool TextField::getDetachWithIME()const",
			"body": [
				"bool TextField:getDetachWithIME()"
			],
			"description": "bool TextField::getDetachWithIME()const"
		},
		 "const std::string& MenuItemFont::getFontNameObj() const": {
			"prefix": "const std::string& MenuItemFont::getFontNameObj() const",
			"body": [
				" std:string& MenuItemFont:getFontNameObj() "
			],
			"description": "const std::string& MenuItemFont::getFontNameObj() const"
		},
		 "Terrain::TerrainData::TerrainData(const char* heightMapsrc, const char * alphamap, const DetailMap& detail1, const DetailMap& detail2, const DetailMap& detail3, const Size & chunksize /*= Size(32,32)*/, float height /*= 2*/, float scale /*= 0.1*/)": {
			"prefix": "Terrain::TerrainData::TerrainData(const char* heightMapsrc, const char * alphamap, const DetailMap& detail1, const DetailMap& detail2, const DetailMap& detail3, const Size & chunksize /*= Size(32,32)*/, float height /*= 2*/, float scale /*= 0.1*/)",
			"body": [
				"heightMapsrc},${2:char * alphamap},${3:DetailMap& detail1},${4:DetailMap& detail2},${5:DetailMap& detail3},${6:Size & chunksize /*= Size(32},${7:32})"
			],
			"description": "Terrain::TerrainData::TerrainData(const char* heightMapsrc, const char * alphamap, const DetailMap& detail1, const DetailMap& detail2, const DetailMap& detail3, const Size & chunksize /*= Size(32,32)*/, float height /*= 2*/, float scale /*= 0.1*/)"
		},
		 "const Rect& Button::getCapInsetsPressedRenderer()const": {
			"prefix": "const Rect& Button::getCapInsetsPressedRenderer()const",
			"body": [
				" Rect& Button:getCapInsetsPressedRenderer()"
			],
			"description": "const Rect& Button::getCapInsetsPressedRenderer()const"
		},
		 "Size PhysicsShapeBox::getSize() const": {
			"prefix": "Size PhysicsShapeBox::getSize() const",
			"body": [
				"Size PhysicsShapeBox:getSize() "
			],
			"description": "Size PhysicsShapeBox::getSize() const"
		},
		 "const char* ActionObject::getName()": {
			"prefix": "const char* ActionObject::getName()",
			"body": [
				" char* ActionObject:getName()"
			],
			"description": "const char* ActionObject::getName()"
		},
		 "TransitionMoveInT* TransitionMoveInT::create(float t, Scene* scene)": {
			"prefix": "TransitionMoveInT* TransitionMoveInT::create(float t, Scene* scene)",
			"body": [
				"TransitionMoveInT:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionMoveInT* TransitionMoveInT::create(float t, Scene* scene)"
		},
		 "void TextureAtlas::drawNumberOfQuads(ssize_t numberOfQuads)": {
			"prefix": "void TextureAtlas::drawNumberOfQuads(ssize_t numberOfQuads)",
			"body": [
				"TextureAtlas:drawNumberOfQuads(${1:ssize_t numberOfQuads})"
			],
			"description": "void TextureAtlas::drawNumberOfQuads(ssize_t numberOfQuads)"
		},
		 "FileUtils* FileUtils::getInstance()": {
			"prefix": "FileUtils* FileUtils::getInstance()",
			"body": [
				"FileUtils* FileUtils:getInstance()"
			],
			"description": "FileUtils* FileUtils::getInstance()"
		},
		 "Material* Material::clone() const": {
			"prefix": "Material* Material::clone() const",
			"body": [
				"Material* Material:clone() "
			],
			"description": "Material* Material::clone() const"
		},
		 "bool SimpleAudioEngine::willPlayBackgroundMusic()": {
			"prefix": "bool SimpleAudioEngine::willPlayBackgroundMusic()",
			"body": [
				"bool SimpleAudioEngine:willPlayBackgroundMusic()"
			],
			"description": "bool SimpleAudioEngine::willPlayBackgroundMusic()"
		},
		 "void MciPlayer::Close()": {
			"prefix": "void MciPlayer::Close()",
			"body": [
				"void MciPlayer:Close()"
			],
			"description": "void MciPlayer::Close()"
		},
		 "GLProgram* GLProgram::createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)": {
			"prefix": "GLProgram* GLProgram::createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)",
			"body": [
				"GLProgram:createWithFilenames(${1:std:string& vShaderFilename},${2:std:string& fShaderFilename},${3:std:string& compileTimeDefines})"
			],
			"description": "GLProgram* GLProgram::createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)"
		},
		 "float PhysicsJointRotarySpring::getDamping() const": {
			"prefix": "float PhysicsJointRotarySpring::getDamping() const",
			"body": [
				"float PhysicsJointRotarySpring:getDamping() "
			],
			"description": "float PhysicsJointRotarySpring::getDamping() const"
		},
		 "bool Armature::init(const std::string& name, Bone *parentBone)": {
			"prefix": "bool Armature::init(const std::string& name, Bone *parentBone)",
			"body": [
				"Armature:init(${1:std:string& name},${2:Bone *parentBone})"
			],
			"description": "bool Armature::init(const std::string& name, Bone *parentBone)"
		},
		 "bool __String::initWithFormat(const char* format, ...)": {
			"prefix": "bool __String::initWithFormat(const char* format, ...)",
			"body": [
				"__String:initWithFormat(${1:char* format},${2:...})"
			],
			"description": "bool __String::initWithFormat(const char* format, ...)"
		},
		 "void Director::destroyTextureCache()": {
			"prefix": "void Director::destroyTextureCache()",
			"body": [
				"void Director:destroyTextureCache()"
			],
			"description": "void Director::destroyTextureCache()"
		},
		 "GLubyte ProgressTimer::getOpacity() const": {
			"prefix": "GLubyte ProgressTimer::getOpacity() const",
			"body": [
				"GLubyte ProgressTimer:getOpacity() "
			],
			"description": "GLubyte ProgressTimer::getOpacity() const"
		},
		 "float AudioEngine::getCurrentTime(int audioID)": {
			"prefix": "float AudioEngine::getCurrentTime(int audioID)",
			"body": [
				"AudioEngine:getCurrentTime(${1:int audioID})"
			],
			"description": "float AudioEngine::getCurrentTime(int audioID)"
		},
		 "void TransitionMoveInL::initScenes()": {
			"prefix": "void TransitionMoveInL::initScenes()",
			"body": [
				"void TransitionMoveInL:initScenes()"
			],
			"description": "void TransitionMoveInL::initScenes()"
		},
		 "bool MenuItem::initWithCallback(const ccMenuCallback& callback)": {
			"prefix": "bool MenuItem::initWithCallback(const ccMenuCallback& callback)",
			"body": [
				"MenuItem:initWithCallback(${1:ccMenuCallback& callback})"
			],
			"description": "bool MenuItem::initWithCallback(const ccMenuCallback& callback)"
		},
		 "EaseSineInOut* EaseSineInOut::reverse() const": {
			"prefix": "EaseSineInOut* EaseSineInOut::reverse() const",
			"body": [
				"EaseSineInOut* EaseSineInOut:reverse() "
			],
			"description": "EaseSineInOut* EaseSineInOut::reverse() const"
		},
		 "void ParticleBatchNode::removeAllChildrenWithCleanup(bool doCleanup)": {
			"prefix": "void ParticleBatchNode::removeAllChildrenWithCleanup(bool doCleanup)",
			"body": [
				"ParticleBatchNode:removeAllChildrenWithCleanup(${1:bool doCleanup})"
			],
			"description": "void ParticleBatchNode::removeAllChildrenWithCleanup(bool doCleanup)"
		},
		 "void PhysicsBody::removeFromWorld()": {
			"prefix": "void PhysicsBody::removeFromWorld()",
			"body": [
				"void PhysicsBody:removeFromWorld()"
			],
			"description": "void PhysicsBody::removeFromWorld()"
		},
		 "void ListView::addChild(cocos2d::Node *child)": {
			"prefix": "void ListView::addChild(cocos2d::Node *child)",
			"body": [
				"ListView:addChild(${1:cocos2d:Node *child})"
			],
			"description": "void ListView::addChild(cocos2d::Node *child)"
		},
		 "bool FileUtils::renameFile(const std::string &path, const std::string &oldname, const std::string &name)": {
			"prefix": "bool FileUtils::renameFile(const std::string &path, const std::string &oldname, const std::string &name)",
			"body": [
				"FileUtils:renameFile(${1:std:string &path},${2:std:string &oldname},${3:std:string &name})"
			],
			"description": "bool FileUtils::renameFile(const std::string &path, const std::string &oldname, const std::string &name)"
		},
		 "void AllocatorDiagnostics::trackAllocator(AllocatorBase* allocator)": {
			"prefix": "void AllocatorDiagnostics::trackAllocator(AllocatorBase* allocator)",
			"body": [
				"AllocatorDiagnostics:trackAllocator(${1:AllocatorBase* allocator})"
			],
			"description": "void AllocatorDiagnostics::trackAllocator(AllocatorBase* allocator)"
		},
		 "void RadioButtonGroup::setSelectedButtonWithoutEvent(int index)": {
			"prefix": "void RadioButtonGroup::setSelectedButtonWithoutEvent(int index)",
			"body": [
				"RadioButtonGroup:setSelectedButtonWithoutEvent(${1:int index})"
			],
			"description": "void RadioButtonGroup::setSelectedButtonWithoutEvent(int index)"
		},
		 "PhysicsJointRotaryLimit* PhysicsJointRotaryLimit::construct(PhysicsBody* a, PhysicsBody* b, float min, float max)": {
			"prefix": "PhysicsJointRotaryLimit* PhysicsJointRotaryLimit::construct(PhysicsBody* a, PhysicsBody* b, float min, float max)",
			"body": [
				"PhysicsJointRotaryLimit:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:float min},${4:float max})"
			],
			"description": "PhysicsJointRotaryLimit* PhysicsJointRotaryLimit::construct(PhysicsBody* a, PhysicsBody* b, float min, float max)"
		},
		 "EaseBackInOut* EaseBackInOut::clone() const": {
			"prefix": "EaseBackInOut* EaseBackInOut::clone() const",
			"body": [
				"EaseBackInOut* EaseBackInOut:clone() "
			],
			"description": "EaseBackInOut* EaseBackInOut::clone() const"
		},
		 "void GLViewImpl::onGLFWMouseScrollCallback(GLFWwindow* window, double x, double y)": {
			"prefix": "void GLViewImpl::onGLFWMouseScrollCallback(GLFWwindow* window, double x, double y)",
			"body": [
				"GLViewImpl:onGLFWMouseScrollCallback(${1:GLFWwindow* window},${2:double x},${3:double y})"
			],
			"description": "void GLViewImpl::onGLFWMouseScrollCallback(GLFWwindow* window, double x, double y)"
		},
		 "bool Texture2D::initWithImage(Image *image)": {
			"prefix": "bool Texture2D::initWithImage(Image *image)",
			"body": [
				"Texture2D:initWithImage(${1:Image *image})"
			],
			"description": "bool Texture2D::initWithImage(Image *image)"
		},
		 "void GLProgramCache::reloadDefaultGLProgramsRelativeToLights()": {
			"prefix": "void GLProgramCache::reloadDefaultGLProgramsRelativeToLights()",
			"body": [
				"void GLProgramCache:reloadDefaultGLProgramsRelativeToLights()"
			],
			"description": "void GLProgramCache::reloadDefaultGLProgramsRelativeToLights()"
		},
		 "void LabelBMFont::setWidth(float width)": {
			"prefix": "void LabelBMFont::setWidth(float width)",
			"body": [
				"LabelBMFont:setWidth(${1:float width})"
			],
			"description": "void LabelBMFont::setWidth(float width)"
		},
		 "void Scene::setNavMesh(NavMesh* navMesh)": {
			"prefix": "void Scene::setNavMesh(NavMesh* navMesh)",
			"body": [
				"Scene:setNavMesh(${1:NavMesh* navMesh})"
			],
			"description": "void Scene::setNavMesh(NavMesh* navMesh)"
		},
		 "void Terrain::loadVertices()": {
			"prefix": "void Terrain::loadVertices()",
			"body": [
				"void Terrain:loadVertices()"
			],
			"description": "void Terrain::loadVertices()"
		},
		 "JumpBy* JumpBy::create(float duration, const Vec2& position, float height, int jumps)": {
			"prefix": "JumpBy* JumpBy::create(float duration, const Vec2& position, float height, int jumps)",
			"body": [
				"JumpBy:create(${1:float duration},${2:Vec2& position},${3:float height},${4:int jumps})"
			],
			"description": "JumpBy* JumpBy::create(float duration, const Vec2& position, float height, int jumps)"
		},
		 "void NavMeshAgent::setOrientationRefAxes(const Vec3 &rotRefAxes)": {
			"prefix": "void NavMeshAgent::setOrientationRefAxes(const Vec3 &rotRefAxes)",
			"body": [
				"NavMeshAgent:setOrientationRefAxes(${1:Vec3 &rotRefAxes})"
			],
			"description": "void NavMeshAgent::setOrientationRefAxes(const Vec3 &rotRefAxes)"
		},
		 "void FontAtlasCache::purgeCachedData()": {
			"prefix": "void FontAtlasCache::purgeCachedData()",
			"body": [
				"void FontAtlasCache:purgeCachedData()"
			],
			"description": "void FontAtlasCache::purgeCachedData()"
		},
		 "MenuItem* MenuItem::create()": {
			"prefix": "MenuItem* MenuItem::create()",
			"body": [
				"MenuItem* MenuItem:create()"
			],
			"description": "MenuItem* MenuItem::create()"
		},
		 "bool WavesTiles3D::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)": {
			"prefix": "bool WavesTiles3D::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)",
			"body": [
				"WavesTiles3D:initWithDuration(${1:float duration},${2:Size& gridSize},${3:unsigned int waves},${4:float amplitude})"
			],
			"description": "bool WavesTiles3D::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)"
		},
		 "int ActionNode::getActionTag()": {
			"prefix": "int ActionNode::getActionTag()",
			"body": [
				"int ActionNode:getActionTag()"
			],
			"description": "int ActionNode::getActionTag()"
		},
		 "bool JumpTo::initWithDuration(float duration, const Vec2& position, float height, int jumps)": {
			"prefix": "bool JumpTo::initWithDuration(float duration, const Vec2& position, float height, int jumps)",
			"body": [
				"JumpTo:initWithDuration(${1:float duration},${2:Vec2& position},${3:float height},${4:int jumps})"
			],
			"description": "bool JumpTo::initWithDuration(float duration, const Vec2& position, float height, int jumps)"
		},
		 "void Texture2D::convertAI88ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertAI88ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertAI88ToRGBA8888(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertAI88ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "bool TextureCube::reloadTexture()": {
			"prefix": "bool TextureCube::reloadTexture()",
			"body": [
				"bool TextureCube:reloadTexture()"
			],
			"description": "bool TextureCube::reloadTexture()"
		},
		 "void ListView::addChild(cocos2d::Node *child, int zOrder, int tag)": {
			"prefix": "void ListView::addChild(cocos2d::Node *child, int zOrder, int tag)",
			"body": [
				"ListView:addChild(${1:cocos2d:Node *child},${2:int zOrder},${3:int tag})"
			],
			"description": "void ListView::addChild(cocos2d::Node *child, int zOrder, int tag)"
		},
		 "Plane::Plane(const Vec3& p1, const Vec3& p2, const Vec3& p3)": {
			"prefix": "Plane::Plane(const Vec3& p1, const Vec3& p2, const Vec3& p3)",
			"body": [
				"p1},${2:Vec3& p2},${3:Vec3& p3})"
			],
			"description": "Plane::Plane(const Vec3& p1, const Vec3& p2, const Vec3& p3)"
		},
		 "void Texture2D::setGLProgram(GLProgram* shaderProgram)": {
			"prefix": "void Texture2D::setGLProgram(GLProgram* shaderProgram)",
			"body": [
				"Texture2D:setGLProgram(${1:GLProgram* shaderProgram})"
			],
			"description": "void Texture2D::setGLProgram(GLProgram* shaderProgram)"
		},
		 "DictElement::DictElement(intptr_t iKey, Ref* pObject)": {
			"prefix": "DictElement::DictElement(intptr_t iKey, Ref* pObject)",
			"body": [
				"iKey},${2:Ref* pObject})"
			],
			"description": "DictElement::DictElement(intptr_t iKey, Ref* pObject)"
		},
		 "void SkeletonRenderer::onEnter ()": {
			"prefix": "void SkeletonRenderer::onEnter ()",
			"body": [
				"void SkeletonRenderer:onEnter ()"
			],
			"description": "void SkeletonRenderer::onEnter ()"
		},
		 "bool ProgressTo::initWithDuration(float duration, float percent)": {
			"prefix": "bool ProgressTo::initWithDuration(float duration, float percent)",
			"body": [
				"ProgressTo:initWithDuration(${1:float duration},${2:float percent})"
			],
			"description": "bool ProgressTo::initWithDuration(float duration, float percent)"
		},
		 "Vec2 PhysicsBody::world2Local(const Vec2& point)": {
			"prefix": "Vec2 PhysicsBody::world2Local(const Vec2& point)",
			"body": [
				"PhysicsBody:world2Local(${1:Vec2& point})"
			],
			"description": "Vec2 PhysicsBody::world2Local(const Vec2& point)"
		},
		 "void Physics3DHingeConstraint::setMotorTarget(const cocos2d::Quaternion& qAinB, float dt)": {
			"prefix": "void Physics3DHingeConstraint::setMotorTarget(const cocos2d::Quaternion& qAinB, float dt)",
			"body": [
				"Physics3DHingeConstraint:setMotorTarget(${1:cocos2d:Quaternion& qAinB},${2:float dt})"
			],
			"description": "void Physics3DHingeConstraint::setMotorTarget(const cocos2d::Quaternion& qAinB, float dt)"
		},
		 "const Vec2 ScrollView::getInnerContainerPosition() const": {
			"prefix": "const Vec2 ScrollView::getInnerContainerPosition() const",
			"body": [
				" Vec2 ScrollView:getInnerContainerPosition() "
			],
			"description": "const Vec2 ScrollView::getInnerContainerPosition() const"
		},
		 "void InputDelegate::setTouchMode(Touch::DispatchMode mode)": {
			"prefix": "void InputDelegate::setTouchMode(Touch::DispatchMode mode)",
			"body": [
				"InputDelegate:setTouchMode(${1:Touch:DispatchMode mode})"
			],
			"description": "void InputDelegate::setTouchMode(Touch::DispatchMode mode)"
		},
		 "void Menu::addChild(Node * child)": {
			"prefix": "void Menu::addChild(Node * child)",
			"body": [
				"Menu:addChild(${1:Node * child})"
			],
			"description": "void Menu::addChild(Node * child)"
		},
		 "void Mat4::scale(float xScale, float yScale, float zScale)": {
			"prefix": "void Mat4::scale(float xScale, float yScale, float zScale)",
			"body": [
				"Mat4:scale(${1:float xScale},${2:float yScale},${3:float zScale})"
			],
			"description": "void Mat4::scale(float xScale, float yScale, float zScale)"
		},
		 "int __String::length() const": {
			"prefix": "int __String::length() const",
			"body": [
				"int __String:length() "
			],
			"description": "int __String::length() const"
		},
		 "bool Node::isScheduled(const std::string &key)": {
			"prefix": "bool Node::isScheduled(const std::string &key)",
			"body": [
				"Node:isScheduled(${1:std:string &key})"
			],
			"description": "bool Node::isScheduled(const std::string &key)"
		},
		 "void Sprite::setTextureRect(const Rect& rect, bool rotated, const Size& untrimmedSize)": {
			"prefix": "void Sprite::setTextureRect(const Rect& rect, bool rotated, const Size& untrimmedSize)",
			"body": [
				"Sprite:setTextureRect(${1:Rect& rect},${2:bool rotated},${3:Size& untrimmedSize})"
			],
			"description": "void Sprite::setTextureRect(const Rect& rect, bool rotated, const Size& untrimmedSize)"
		},
		 "void LayerColor::setBlendFunc(const BlendFunc &var)": {
			"prefix": "void LayerColor::setBlendFunc(const BlendFunc &var)",
			"body": [
				"LayerColor:setBlendFunc(${1:BlendFunc &var})"
			],
			"description": "void LayerColor::setBlendFunc(const BlendFunc &var)"
		},
		 "void LabelAtlas::updateAtlasValues()": {
			"prefix": "void LabelAtlas::updateAtlasValues()",
			"body": [
				"void LabelAtlas:updateAtlasValues()"
			],
			"description": "void LabelAtlas::updateAtlasValues()"
		},
		 "std::string Sprite::getDescription() const": {
			"prefix": "std::string Sprite::getDescription() const",
			"body": [
				"std:string Sprite:getDescription() "
			],
			"description": "std::string Sprite::getDescription() const"
		},
		 "bool Slider::onTouchBegan(Touch *touch, Event *unusedEvent)": {
			"prefix": "bool Slider::onTouchBegan(Touch *touch, Event *unusedEvent)",
			"body": [
				"Slider:onTouchBegan(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "bool Slider::onTouchBegan(Touch *touch, Event *unusedEvent)"
		},
		 "float AutoPolygon::perpendicularDistance(const cocos2d::Vec2& i, const cocos2d::Vec2& start, const cocos2d::Vec2& end)": {
			"prefix": "float AutoPolygon::perpendicularDistance(const cocos2d::Vec2& i, const cocos2d::Vec2& start, const cocos2d::Vec2& end)",
			"body": [
				"AutoPolygon:perpendicularDistance(${1:cocos2d:Vec2& i},${2:cocos2d:Vec2& start},${3:cocos2d:Vec2& end})"
			],
			"description": "float AutoPolygon::perpendicularDistance(const cocos2d::Vec2& i, const cocos2d::Vec2& start, const cocos2d::Vec2& end)"
		},
		 "bool NavMesh::read()": {
			"prefix": "bool NavMesh::read()",
			"body": [
				"bool NavMesh:read()"
			],
			"description": "bool NavMesh::read()"
		},
		 "const Size& LabelBMFont::getContentSize() const": {
			"prefix": "const Size& LabelBMFont::getContentSize() const",
			"body": [
				" Size& LabelBMFont:getContentSize() "
			],
			"description": "const Size& LabelBMFont::getContentSize() const"
		},
		 "AmbientLight* AmbientLight::create( const Color3B &color )": {
			"prefix": "AmbientLight* AmbientLight::create( const Color3B &color )",
			"body": [
				"AmbientLight:create(${1:Color3B &color})"
			],
			"description": "AmbientLight* AmbientLight::create( const Color3B &color )"
		},
		 "ParticleSmoke* ParticleSmoke::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleSmoke* ParticleSmoke::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSmoke:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleSmoke* ParticleSmoke::createWithTotalParticles(int numberOfParticles)"
		},
		 "void Layout::setBackGroundImageScale9Enabled(bool able)": {
			"prefix": "void Layout::setBackGroundImageScale9Enabled(bool able)",
			"body": [
				"Layout:setBackGroundImageScale9Enabled(${1:bool able})"
			],
			"description": "void Layout::setBackGroundImageScale9Enabled(bool able)"
		},
		 "AnimationFrame* AnimationFrame::clone() const": {
			"prefix": "AnimationFrame* AnimationFrame::clone() const",
			"body": [
				"AnimationFrame* AnimationFrame:clone() "
			],
			"description": "AnimationFrame* AnimationFrame::clone() const"
		},
		 "void localStorageRemoveItem( const std::string& key )": {
			"prefix": "void localStorageRemoveItem( const std::string& key )",
			"body": [
				"localStorageRemoveItem(${1:std:string& key})"
			],
			"description": "void localStorageRemoveItem( const std::string& key )"
		},
		 "cocos2d::Mat4 Physics3DRigidBody::getCenterOfMassTransform() const": {
			"prefix": "cocos2d::Mat4 Physics3DRigidBody::getCenterOfMassTransform() const",
			"body": [
				"cocos2d:Mat4 Physics3DRigidBody:getCenterOfMassTransform() "
			],
			"description": "cocos2d::Mat4 Physics3DRigidBody::getCenterOfMassTransform() const"
		},
		 "bool ColliderDetector::getActive()": {
			"prefix": "bool ColliderDetector::getActive()",
			"body": [
				"bool ColliderDetector:getActive()"
			],
			"description": "bool ColliderDetector::getActive()"
		},
		 "void Node::setScale(float scaleX,float scaleY)": {
			"prefix": "void Node::setScale(float scaleX,float scaleY)",
			"body": [
				"Node:setScale(${1:float scaleX},${2:float scaleY})"
			],
			"description": "void Node::setScale(float scaleX,float scaleY)"
		},
		 "void DataVisitor::visit(const __Double *value)": {
			"prefix": "void DataVisitor::visit(const __Double *value)",
			"body": [
				"DataVisitor:visit(${1:__Double *value})"
			],
			"description": "void DataVisitor::visit(const __Double *value)"
		},
		 "void Ref::printLeaks()": {
			"prefix": "void Ref::printLeaks()",
			"body": [
				"void Ref:printLeaks()"
			],
			"description": "void Ref::printLeaks()"
		},
		 "bool Image::isS3TC(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::isS3TC(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:isS3TC(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::isS3TC(const unsigned char * data, ssize_t dataLen)"
		},
		 "void BoneNode::updateColor()": {
			"prefix": "void BoneNode::updateColor()",
			"body": [
				"void BoneNode:updateColor()"
			],
			"description": "void BoneNode::updateColor()"
		},
		 "unsigned int __Dictionary::count()": {
			"prefix": "unsigned int __Dictionary::count()",
			"body": [
				"unsigned int __Dictionary:count()"
			],
			"description": "unsigned int __Dictionary::count()"
		},
		 "void Slider::loadSlidBallTextureNormal(SpriteFrame* spriteframe)": {
			"prefix": "void Slider::loadSlidBallTextureNormal(SpriteFrame* spriteframe)",
			"body": [
				"Slider:loadSlidBallTextureNormal(${1:SpriteFrame* spriteframe})"
			],
			"description": "void Slider::loadSlidBallTextureNormal(SpriteFrame* spriteframe)"
		},
		 "void PhysicsShapeEdgePolygon::updateScale()": {
			"prefix": "void PhysicsShapeEdgePolygon::updateScale()",
			"body": [
				"void PhysicsShapeEdgePolygon:updateScale()"
			],
			"description": "void PhysicsShapeEdgePolygon::updateScale()"
		},
		 "bool AndroidJavaEngine::willPlayBackgroundMusic()": {
			"prefix": "bool AndroidJavaEngine::willPlayBackgroundMusic()",
			"body": [
				"bool AndroidJavaEngine:willPlayBackgroundMusic()"
			],
			"description": "bool AndroidJavaEngine::willPlayBackgroundMusic()"
		},
		 "int ActionNode::getFirstFrameIndex()": {
			"prefix": "int ActionNode::getFirstFrameIndex()",
			"body": [
				"int ActionNode:getFirstFrameIndex()"
			],
			"description": "int ActionNode::getFirstFrameIndex()"
		},
		 "float AndroidJavaEngine::getEffectsVolume()": {
			"prefix": "float AndroidJavaEngine::getEffectsVolume()",
			"body": [
				"float AndroidJavaEngine:getEffectsVolume()"
			],
			"description": "float AndroidJavaEngine::getEffectsVolume()"
		},
		 "void ScrollView::onTouchEnded(Touch *touch, Event *unusedEvent)": {
			"prefix": "void ScrollView::onTouchEnded(Touch *touch, Event *unusedEvent)",
			"body": [
				"ScrollView:onTouchEnded(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void ScrollView::onTouchEnded(Touch *touch, Event *unusedEvent)"
		},
		 "ActionInterval* CCBAnimationManager::getAction(CCBKeyframe *pKeyframe0, CCBKeyframe *pKeyframe1, const std::string& propName, Node *pNode)": {
			"prefix": "ActionInterval* CCBAnimationManager::getAction(CCBKeyframe *pKeyframe0, CCBKeyframe *pKeyframe1, const std::string& propName, Node *pNode)",
			"body": [
				"CCBAnimationManager:getAction(${1:CCBKeyframe *pKeyframe0},${2:CCBKeyframe *pKeyframe1},${3:std:string& propName},${4:Node *pNode})"
			],
			"description": "ActionInterval* CCBAnimationManager::getAction(CCBKeyframe *pKeyframe0, CCBKeyframe *pKeyframe1, const std::string& propName, Node *pNode)"
		},
		 "void CustomCommand::init(float depth, const cocos2d::Mat4 &modelViewTransform, uint32_t flags)": {
			"prefix": "void CustomCommand::init(float depth, const cocos2d::Mat4 &modelViewTransform, uint32_t flags)",
			"body": [
				"CustomCommand:init(${1:float depth},${2:cocos2d:Mat4 &modelViewTransform},${3:uint32_t flags})"
			],
			"description": "void CustomCommand::init(float depth, const cocos2d::Mat4 &modelViewTransform, uint32_t flags)"
		},
		 "void RenderState::StateBlock::setDepthTest(bool enabled)": {
			"prefix": "void RenderState::StateBlock::setDepthTest(bool enabled)",
			"body": [
				"RenderState:StateBlock:setDepthTest(${1:bool enabled})"
			],
			"description": "void RenderState::StateBlock::setDepthTest(bool enabled)"
		},
		 "void TMXLayer::setupTileSprite(Sprite* sprite, Vec2 pos, int gid)": {
			"prefix": "void TMXLayer::setupTileSprite(Sprite* sprite, Vec2 pos, int gid)",
			"body": [
				"TMXLayer:setupTileSprite(${1:Sprite* sprite},${2:Vec2 pos},${3:int gid})"
			],
			"description": "void TMXLayer::setupTileSprite(Sprite* sprite, Vec2 pos, int gid)"
		},
		 "void LayerMultiplex::switchToAndReleaseMe(int n)": {
			"prefix": "void LayerMultiplex::switchToAndReleaseMe(int n)",
			"body": [
				"LayerMultiplex:switchToAndReleaseMe(${1:int n})"
			],
			"description": "void LayerMultiplex::switchToAndReleaseMe(int n)"
		},
		 "EaseIn* EaseIn::create(ActionInterval *action, float rate)": {
			"prefix": "EaseIn* EaseIn::create(ActionInterval *action, float rate)",
			"body": [
				"EaseIn:create(${1:ActionInterval *action},${2:float rate})"
			],
			"description": "EaseIn* EaseIn::create(ActionInterval *action, float rate)"
		},
		 "void Node::setContentSize(const Size & size)": {
			"prefix": "void Node::setContentSize(const Size & size)",
			"body": [
				"Node:setContentSize(${1:Size & size})"
			],
			"description": "void Node::setContentSize(const Size & size)"
		},
		 "bool Sprite::isOpacityModifyRGB(void) const": {
			"prefix": "bool Sprite::isOpacityModifyRGB(void) const",
			"body": [
				"Sprite:isOpacityModifyRGB(${1:void})"
			],
			"description": "bool Sprite::isOpacityModifyRGB(void) const"
		},
		 "void ScrollView::scrollToTopLeft(float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToTopLeft(float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToTopLeft(${1:float second},${2:bool attenuated})"
			],
			"description": "void ScrollView::scrollToTopLeft(float second, bool attenuated)"
		},
		 "EaseElasticOut* EaseElasticOut::create(ActionInterval *action, float period/* = 0.3f*/)": {
			"prefix": "EaseElasticOut* EaseElasticOut::create(ActionInterval *action, float period/* = 0.3f*/)",
			"body": [
				"EaseElasticOut:create(${1:ActionInterval *action},${2:float period/* = 0.3f*/})"
			],
			"description": "EaseElasticOut* EaseElasticOut::create(ActionInterval *action, float period/* = 0.3f*/)"
		},
		 "void LabelTTF::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void LabelTTF::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"LabelTTF:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void LabelTTF::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "bool CCBReader::getBit()": {
			"prefix": "bool CCBReader::getBit()",
			"body": [
				"bool CCBReader:getBit()"
			],
			"description": "bool CCBReader::getBit()"
		},
		 "bool SkeletonRenderer::getDebugSlotsEnabled () const": {
			"prefix": "bool SkeletonRenderer::getDebugSlotsEnabled () const",
			"body": [
				"bool SkeletonRenderer:getDebugSlotsEnabled () "
			],
			"description": "bool SkeletonRenderer::getDebugSlotsEnabled () const"
		},
		 "bool CCBRotateTo::initWithDuration(float fDuration, float fAngle)": {
			"prefix": "bool CCBRotateTo::initWithDuration(float fDuration, float fAngle)",
			"body": [
				"CCBRotateTo:initWithDuration(${1:float fDuration},${2:float fAngle})"
			],
			"description": "bool CCBRotateTo::initWithDuration(float fDuration, float fAngle)"
		},
		 "bool EventListenerMouse::checkAvailable()": {
			"prefix": "bool EventListenerMouse::checkAvailable()",
			"body": [
				"bool EventListenerMouse:checkAvailable()"
			],
			"description": "bool EventListenerMouse::checkAvailable()"
		},
		 "float LoadingBar::getPercent() const": {
			"prefix": "float LoadingBar::getPercent() const",
			"body": [
				"float LoadingBar:getPercent() "
			],
			"description": "float LoadingBar::getPercent() const"
		},
		 "void LabelAtlas::updateColor()": {
			"prefix": "void LabelAtlas::updateColor()",
			"body": [
				"void LabelAtlas:updateColor()"
			],
			"description": "void LabelAtlas::updateColor()"
		},
		 "void TextField::setDeleteBackward(bool deleteBackward)": {
			"prefix": "void TextField::setDeleteBackward(bool deleteBackward)",
			"body": [
				"TextField:setDeleteBackward(${1:bool deleteBackward})"
			],
			"description": "void TextField::setDeleteBackward(bool deleteBackward)"
		},
		 "float Physics3DCollider::getCcdMotionThreshold() const": {
			"prefix": "float Physics3DCollider::getCcdMotionThreshold() const",
			"body": [
				"float Physics3DCollider:getCcdMotionThreshold() "
			],
			"description": "float Physics3DCollider::getCcdMotionThreshold() const"
		},
		 "void SpriteFrameCache::removeSpriteFramesFromTexture(Texture2D* texture)": {
			"prefix": "void SpriteFrameCache::removeSpriteFramesFromTexture(Texture2D* texture)",
			"body": [
				"SpriteFrameCache:removeSpriteFramesFromTexture(${1:Texture2D* texture})"
			],
			"description": "void SpriteFrameCache::removeSpriteFramesFromTexture(Texture2D* texture)"
		},
		 "AffineTransform Node::getWorldToNodeAffineTransform() const": {
			"prefix": "AffineTransform Node::getWorldToNodeAffineTransform() const",
			"body": [
				"AffineTransform Node:getWorldToNodeAffineTransform() "
			],
			"description": "AffineTransform Node::getWorldToNodeAffineTransform() const"
		},
		 "bool Animate3D::initWithFrames(Animation3D* animation, int startFrame, int endFrame, float frameRate)": {
			"prefix": "bool Animate3D::initWithFrames(Animation3D* animation, int startFrame, int endFrame, float frameRate)",
			"body": [
				"Animate3D:initWithFrames(${1:Animation3D* animation},${2:int startFrame},${3:int endFrame},${4:float frameRate})"
			],
			"description": "bool Animate3D::initWithFrames(Animation3D* animation, int startFrame, int endFrame, float frameRate)"
		},
		 "void Director::restartDirector()": {
			"prefix": "void Director::restartDirector()",
			"body": [
				"void Director:restartDirector()"
			],
			"description": "void Director::restartDirector()"
		},
		 "__Set* __Set::copy(void)": {
			"prefix": "__Set* __Set::copy(void)",
			"body": [
				"__Set:copy(${1:void})"
			],
			"description": "__Set* __Set::copy(void)"
		},
		 "bool CallFuncN::initWithTarget(Ref* selectorTarget, SEL_CallFuncN selector)": {
			"prefix": "bool CallFuncN::initWithTarget(Ref* selectorTarget, SEL_CallFuncN selector)",
			"body": [
				"CallFuncN:initWithTarget(${1:Ref* selectorTarget},${2:SEL_CallFuncN selector})"
			],
			"description": "bool CallFuncN::initWithTarget(Ref* selectorTarget, SEL_CallFuncN selector)"
		},
		 "bool Animation3D::initWithFile(const std::string& filename, const std::string& animationName)": {
			"prefix": "bool Animation3D::initWithFile(const std::string& filename, const std::string& animationName)",
			"body": [
				"Animation3D:initWithFile(${1:std:string& filename},${2:std:string& animationName})"
			],
			"description": "bool Animation3D::initWithFile(const std::string& filename, const std::string& animationName)"
		},
		 "void BoneNode::addChild(cocos2d::Node* child, int localZOrder, int tag)": {
			"prefix": "void BoneNode::addChild(cocos2d::Node* child, int localZOrder, int tag)",
			"body": [
				"BoneNode:addChild(${1:cocos2d:Node* child},${2:int localZOrder},${3:int tag})"
			],
			"description": "void BoneNode::addChild(cocos2d::Node* child, int localZOrder, int tag)"
		},
		 "void Technique::setName(const std::string &name)": {
			"prefix": "void Technique::setName(const std::string &name)",
			"body": [
				"Technique:setName(${1:std:string &name})"
			],
			"description": "void Technique::setName(const std::string &name)"
		},
		 "ProtectedNode::ProtectedNode() : _reorderProtectedChildDirty(false)": {
			"prefix": "ProtectedNode::ProtectedNode() : _reorderProtectedChildDirty(false)",
			"body": [
				"ProtectedNode:ProtectedNode() : _reorderProtectedChildDirty(false)"
			],
			"description": "ProtectedNode::ProtectedNode() : _reorderProtectedChildDirty(false)"
		},
		 "void BoneNode::disableCascadeColor()": {
			"prefix": "void BoneNode::disableCascadeColor()",
			"body": [
				"void BoneNode:disableCascadeColor()"
			],
			"description": "void BoneNode::disableCascadeColor()"
		},
		 "void Armature::setBody(b2Body *body)": {
			"prefix": "void Armature::setBody(b2Body *body)",
			"body": [
				"Armature:setBody(${1:b2Body *body})"
			],
			"description": "void Armature::setBody(b2Body *body)"
		},
		 "Vec2 Node::convertTouchToNodeSpaceAR(Touch *touch) const": {
			"prefix": "Vec2 Node::convertTouchToNodeSpaceAR(Touch *touch) const",
			"body": [
				"Node:convertTouchToNodeSpaceAR(${1:Touch *touch})"
			],
			"description": "Vec2 Node::convertTouchToNodeSpaceAR(Touch *touch) const"
		},
		 "bool Material::parseUniform(GLProgramState* programState, Properties* properties, const char* uniformName)": {
			"prefix": "bool Material::parseUniform(GLProgramState* programState, Properties* properties, const char* uniformName)",
			"body": [
				"Material:parseUniform(${1:GLProgramState* programState},${2:Properties* properties},${3:char* uniformName})"
			],
			"description": "bool Material::parseUniform(GLProgramState* programState, Properties* properties, const char* uniformName)"
		},
		 "void EditBox::setInputMode(EditBox::InputMode inputMode)": {
			"prefix": "void EditBox::setInputMode(EditBox::InputMode inputMode)",
			"body": [
				"EditBox:setInputMode(${1:EditBox:InputMode inputMode})"
			],
			"description": "void EditBox::setInputMode(EditBox::InputMode inputMode)"
		},
		 "void LayerColorLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)": {
			"prefix": "void LayerColorLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)",
			"body": [
				"LayerColorLoader:onHandlePropTypeBlendFunc(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:BlendFunc pBlendFunc},${5:CCBReader * ccbReader})"
			],
			"description": "void LayerColorLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)"
		},
		 "void Mat4::scale(float xScale, float yScale, float zScale, Mat4* dst) const": {
			"prefix": "void Mat4::scale(float xScale, float yScale, float zScale, Mat4* dst) const",
			"body": [
				"Mat4:scale(${1:float xScale},${2:float yScale},${3:float zScale},${4:Mat4* dst})"
			],
			"description": "void Mat4::scale(float xScale, float yScale, float zScale, Mat4* dst) const"
		},
		 "EaseCircleActionInOut* EaseCircleActionInOut::clone() const": {
			"prefix": "EaseCircleActionInOut* EaseCircleActionInOut::clone() const",
			"body": [
				"EaseCircleActionInOut* EaseCircleActionInOut:clone() "
			],
			"description": "EaseCircleActionInOut* EaseCircleActionInOut::clone() const"
		},
		 "Vec2 Touch::getPreviousLocationInView() const": {
			"prefix": "Vec2 Touch::getPreviousLocationInView() const",
			"body": [
				"Vec2 Touch:getPreviousLocationInView() "
			],
			"description": "Vec2 Touch::getPreviousLocationInView() const"
		},
		 "void Timeline::insertFrame(Frame* frame, int index)": {
			"prefix": "void Timeline::insertFrame(Frame* frame, int index)",
			"body": [
				"Timeline:insertFrame(${1:Frame* frame},${2:int index})"
			],
			"description": "void Timeline::insertFrame(Frame* frame, int index)"
		},
		 "void ColliderDetector::setColliderFilter(ColliderFilter *filter)": {
			"prefix": "void ColliderDetector::setColliderFilter(ColliderFilter *filter)",
			"body": [
				"ColliderDetector:setColliderFilter(${1:ColliderFilter *filter})"
			],
			"description": "void ColliderDetector::setColliderFilter(ColliderFilter *filter)"
		},
		 "Vec2 GLView::getVisibleOrigin() const": {
			"prefix": "Vec2 GLView::getVisibleOrigin() const",
			"body": [
				"Vec2 GLView:getVisibleOrigin() "
			],
			"description": "Vec2 GLView::getVisibleOrigin() const"
		},
		 "UniformValue* GLProgramState::getUniformValue(const std::string& name)": {
			"prefix": "UniformValue* GLProgramState::getUniformValue(const std::string& name)",
			"body": [
				"GLProgramState:getUniformValue(${1:std:string& name})"
			],
			"description": "UniformValue* GLProgramState::getUniformValue(const std::string& name)"
		},
		 "__NotificationCenter *__NotificationCenter::getInstance()": {
			"prefix": "__NotificationCenter *__NotificationCenter::getInstance()",
			"body": [
				"__NotificationCenter *__NotificationCenter:getInstance()"
			],
			"description": "__NotificationCenter *__NotificationCenter::getInstance()"
		},
		 "void Downloader::downloadToBufferAsync(const std::string& srcUrl, unsigned char *buffer, long size, const std::string& customId/* = ""*/)": {
			"prefix": "void Downloader::downloadToBufferAsync(const std::string& srcUrl, unsigned char *buffer, long size, const std::string& customId/* = ""*/)",
			"body": [
				"Downloader:downloadToBufferAsync(${1:std:string& srcUrl},${2:unsigned char *buffer},${3:long size},${4:std:string& customId/* = ""*/})"
			],
			"description": "void Downloader::downloadToBufferAsync(const std::string& srcUrl, unsigned char *buffer, long size, const std::string& customId/* = ""*/)"
		},
		 "bool Terrain::initWithTerrainData(TerrainData &parameter, CrackFixedType fixedType)": {
			"prefix": "bool Terrain::initWithTerrainData(TerrainData &parameter, CrackFixedType fixedType)",
			"body": [
				"Terrain:initWithTerrainData(${1:TerrainData &parameter},${2:CrackFixedType fixedType})"
			],
			"description": "bool Terrain::initWithTerrainData(TerrainData &parameter, CrackFixedType fixedType)"
		},
		 "const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, int idx)": {
			"prefix": "const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, int idx)",
			"body": [
				"rapidjson:Value& DictionaryHelper:getSubDictionary_json(${1:rapidjson:Value &root},${2:int idx})"
			],
			"description": "const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, int idx)"
		},
		 "ExtraAction* ExtraAction::create()": {
			"prefix": "ExtraAction* ExtraAction::create()",
			"body": [
				"ExtraAction* ExtraAction:create()"
			],
			"description": "ExtraAction* ExtraAction::create()"
		},
		 "Texture2D::PixelFormat Texture2D::getPixelFormat() const": {
			"prefix": "Texture2D::PixelFormat Texture2D::getPixelFormat() const",
			"body": [
				"Texture2D:PixelFormat Texture2D:getPixelFormat() "
			],
			"description": "Texture2D::PixelFormat Texture2D::getPixelFormat() const"
		},
		 "TargetedAction* TargetedAction::create(Node* target, FiniteTimeAction* action)": {
			"prefix": "TargetedAction* TargetedAction::create(Node* target, FiniteTimeAction* action)",
			"body": [
				"TargetedAction:create(${1:Node* target},${2:FiniteTimeAction* action})"
			],
			"description": "TargetedAction* TargetedAction::create(Node* target, FiniteTimeAction* action)"
		},
		 "cpBody *Armature::getBody() const": {
			"prefix": "cpBody *Armature::getBody() const",
			"body": [
				"cpBody *Armature:getBody() "
			],
			"description": "cpBody *Armature::getBody() const"
		},
		 "void CCBReader::addDocumentCallbackNode(Node *node)": {
			"prefix": "void CCBReader::addDocumentCallbackNode(Node *node)",
			"body": [
				"CCBReader:addDocumentCallbackNode(${1:Node *node})"
			],
			"description": "void CCBReader::addDocumentCallbackNode(Node *node)"
		},
		 "void LoadingBar::barRendererScaleChangedWithSize()": {
			"prefix": "void LoadingBar::barRendererScaleChangedWithSize()",
			"body": [
				"void LoadingBar:barRendererScaleChangedWithSize()"
			],
			"description": "void LoadingBar::barRendererScaleChangedWithSize()"
		},
		 "bool ParticleSystem::isAutoRemoveOnFinish() const": {
			"prefix": "bool ParticleSystem::isAutoRemoveOnFinish() const",
			"body": [
				"bool ParticleSystem:isAutoRemoveOnFinish() "
			],
			"description": "bool ParticleSystem::isAutoRemoveOnFinish() const"
		},
		 "static std::string visitMap(const T& v, int depth)": {
			"prefix": "static std::string visitMap(const T& v, int depth)",
			"body": [
				"std:string visitMap(${1:T& v},${2:int depth})"
			],
			"description": "static std::string visitMap(const T& v, int depth)"
		},
		 "void EditBox::setPosition(const Vec2& pos)": {
			"prefix": "void EditBox::setPosition(const Vec2& pos)",
			"body": [
				"EditBox:setPosition(${1:Vec2& pos})"
			],
			"description": "void EditBox::setPosition(const Vec2& pos)"
		},
		 "Texture2D* SpriteBatchNode::getTexture() const": {
			"prefix": "Texture2D* SpriteBatchNode::getTexture() const",
			"body": [
				"Texture2D* SpriteBatchNode:getTexture() "
			],
			"description": "Texture2D* SpriteBatchNode::getTexture() const"
		},
		 "bool BezierBy::initWithDuration(float t, const ccBezierConfig& c)": {
			"prefix": "bool BezierBy::initWithDuration(float t, const ccBezierConfig& c)",
			"body": [
				"BezierBy:initWithDuration(${1:float t},${2:ccBezierConfig& c})"
			],
			"description": "bool BezierBy::initWithDuration(float t, const ccBezierConfig& c)"
		},
		 "void PhysicsShape::addShape(cpShape* shape)": {
			"prefix": "void PhysicsShape::addShape(cpShape* shape)",
			"body": [
				"PhysicsShape:addShape(${1:cpShape* shape})"
			],
			"description": "void PhysicsShape::addShape(cpShape* shape)"
		},
		 "PhysicsJointPin* PhysicsJointPin::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)": {
			"prefix": "PhysicsJointPin* PhysicsJointPin::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)",
			"body": [
				"PhysicsJointPin:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:Vec2& anchr1},${4:Vec2& anchr2})"
			],
			"description": "PhysicsJointPin* PhysicsJointPin::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)"
		},
		 "bool	Physics3D6DofConstraint::isLimited(int limitIndex) const": {
			"prefix": "bool	Physics3D6DofConstraint::isLimited(int limitIndex) const",
			"body": [
				"limitIndex})"
			],
			"description": "bool	Physics3D6DofConstraint::isLimited(int limitIndex) const"
		},
		 "void Vec4::clamp(const Vec4& min, const Vec4& max)": {
			"prefix": "void Vec4::clamp(const Vec4& min, const Vec4& max)",
			"body": [
				"Vec4:clamp(${1:Vec4& min},${2:Vec4& max})"
			],
			"description": "void Vec4::clamp(const Vec4& min, const Vec4& max)"
		},
		 "bool MoveTo::initWithDuration(float duration, const Vec3& position)": {
			"prefix": "bool MoveTo::initWithDuration(float duration, const Vec3& position)",
			"body": [
				"MoveTo:initWithDuration(${1:float duration},${2:Vec3& position})"
			],
			"description": "bool MoveTo::initWithDuration(float duration, const Vec3& position)"
		},
		 "void ProtectedNode::updateDisplayedOpacity(GLubyte parentOpacity)": {
			"prefix": "void ProtectedNode::updateDisplayedOpacity(GLubyte parentOpacity)",
			"body": [
				"ProtectedNode:updateDisplayedOpacity(${1:GLubyte parentOpacity})"
			],
			"description": "void ProtectedNode::updateDisplayedOpacity(GLubyte parentOpacity)"
		},
		 "RotateBy* RotateBy::create(float duration, float deltaAngle)": {
			"prefix": "RotateBy* RotateBy::create(float duration, float deltaAngle)",
			"body": [
				"RotateBy:create(${1:float duration},${2:float deltaAngle})"
			],
			"description": "RotateBy* RotateBy::create(float duration, float deltaAngle)"
		},
		 "void Node::removeAllChildrenWithCleanup(bool cleanup)": {
			"prefix": "void Node::removeAllChildrenWithCleanup(bool cleanup)",
			"body": [
				"Node:removeAllChildrenWithCleanup(${1:bool cleanup})"
			],
			"description": "void Node::removeAllChildrenWithCleanup(bool cleanup)"
		},
		 "MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"* MenuItemAtlasFont:create(${1:std:string& value},${2:std:string& charMapFile},${3:int itemWidth},${4:int itemHeight},${5:char startCharMap},${6:Ref* target},${7:SEL_MenuHandler selector})"
			],
			"description": "MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, Ref* target, SEL_MenuHandler selector)"
		},
		 "Texture2D * TextureCache::addImage(const std::string &path)": {
			"prefix": "Texture2D * TextureCache::addImage(const std::string &path)",
			"body": [
				"* TextureCache:addImage(${1:std:string &path})"
			],
			"description": "Texture2D * TextureCache::addImage(const std::string &path)"
		},
		 "void TextFieldTTF::setSecureTextEntry(bool value)": {
			"prefix": "void TextFieldTTF::setSecureTextEntry(bool value)",
			"body": [
				"TextFieldTTF:setSecureTextEntry(${1:bool value})"
			],
			"description": "void TextFieldTTF::setSecureTextEntry(bool value)"
		},
		 "void TMXLayer::releaseMap()": {
			"prefix": "void TMXLayer::releaseMap()",
			"body": [
				"void TMXLayer:releaseMap()"
			],
			"description": "void TMXLayer::releaseMap()"
		},
		 "Animate3D* Animate3D::create(Animation3D* animation)": {
			"prefix": "Animate3D* Animate3D::create(Animation3D* animation)",
			"body": [
				"Animate3D:create(${1:Animation3D* animation})"
			],
			"description": "Animate3D* Animate3D::create(Animation3D* animation)"
		},
		 "size_t VertexData::getVertexStreamCount() const": {
			"prefix": "size_t VertexData::getVertexStreamCount() const",
			"body": [
				"size_t VertexData:getVertexStreamCount() "
			],
			"description": "size_t VertexData::getVertexStreamCount() const"
		},
		 "PhysicsShapeEdgePolygon* PhysicsShapeEdgePolygon::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)": {
			"prefix": "PhysicsShapeEdgePolygon* PhysicsShapeEdgePolygon::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)",
			"body": [
				"PhysicsShapeEdgePolygon:create(${1:Vec2* points},${2:int count},${3:PhysicsMaterial& material/* = MaterialDefault*/},${4:float border/* = 1*/})"
			],
			"description": "PhysicsShapeEdgePolygon* PhysicsShapeEdgePolygon::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)"
		},
		 "void ActionTimeline::removeAnimationInfo(std::string animationName)": {
			"prefix": "void ActionTimeline::removeAnimationInfo(std::string animationName)",
			"body": [
				"ActionTimeline:removeAnimationInfo(${1:std:string animationName})"
			],
			"description": "void ActionTimeline::removeAnimationInfo(std::string animationName)"
		},
		 "OBB::OBB(const AABB& aabb)": {
			"prefix": "OBB::OBB(const AABB& aabb)",
			"body": [
				"aabb})"
			],
			"description": "OBB::OBB(const AABB& aabb)"
		},
		 "Node* CSLoader::createNodeWithFlatBuffersForSimulator(const std::string& filename)": {
			"prefix": "Node* CSLoader::createNodeWithFlatBuffersForSimulator(const std::string& filename)",
			"body": [
				"CSLoader:createNodeWithFlatBuffersForSimulator(${1:std:string& filename})"
			],
			"description": "Node* CSLoader::createNodeWithFlatBuffersForSimulator(const std::string& filename)"
		},
		 "void ClippingNode::onExit()": {
			"prefix": "void ClippingNode::onExit()",
			"body": [
				"void ClippingNode:onExit()"
			],
			"description": "void ClippingNode::onExit()"
		},
		 "void AndroidJavaEngine::rewindBackgroundMusic()": {
			"prefix": "void AndroidJavaEngine::rewindBackgroundMusic()",
			"body": [
				"void AndroidJavaEngine:rewindBackgroundMusic()"
			],
			"description": "void AndroidJavaEngine::rewindBackgroundMusic()"
		},
		 "WebSocket::State WebSocket::getReadyState()": {
			"prefix": "WebSocket::State WebSocket::getReadyState()",
			"body": [
				"WebSocket:State WebSocket:getReadyState()"
			],
			"description": "WebSocket::State WebSocket::getReadyState()"
		},
		 "void Data::clear()": {
			"prefix": "void Data::clear()",
			"body": [
				"void Data:clear()"
			],
			"description": "void Data::clear()"
		},
		 "void SkeletonRenderer::update (float deltaTime)": {
			"prefix": "void SkeletonRenderer::update (float deltaTime)",
			"body": [
				"SkeletonRenderer:update (${1:float deltaTime})"
			],
			"description": "void SkeletonRenderer::update (float deltaTime)"
		},
		 "void Bundle3D::destroyBundle(Bundle3D* bundle)": {
			"prefix": "void Bundle3D::destroyBundle(Bundle3D* bundle)",
			"body": [
				"Bundle3D:destroyBundle(${1:Bundle3D* bundle})"
			],
			"description": "void Bundle3D::destroyBundle(Bundle3D* bundle)"
		},
		 "const Vec2& Widget::getSizePercent()": {
			"prefix": "const Vec2& Widget::getSizePercent()",
			"body": [
				" Vec2& Widget:getSizePercent()"
			],
			"description": "const Vec2& Widget::getSizePercent()"
		},
		 "void ScriptEngineManager::removeScriptEngine(void)": {
			"prefix": "void ScriptEngineManager::removeScriptEngine(void)",
			"body": [
				"ScriptEngineManager:removeScriptEngine(${1:void})"
			],
			"description": "void ScriptEngineManager::removeScriptEngine(void)"
		},
		 "bool UICCTextField::onTextFieldInsertText(TextFieldTTF *pSender, const char *text, size_t nLen)": {
			"prefix": "bool UICCTextField::onTextFieldInsertText(TextFieldTTF *pSender, const char *text, size_t nLen)",
			"body": [
				"UICCTextField:onTextFieldInsertText(${1:TextFieldTTF *pSender},${2:char *text},${3:size_t nLen})"
			],
			"description": "bool UICCTextField::onTextFieldInsertText(TextFieldTTF *pSender, const char *text, size_t nLen)"
		},
		 "void Physics3DConstraint::setOverrideNumSolverIterations(int overideNumIterations)": {
			"prefix": "void Physics3DConstraint::setOverrideNumSolverIterations(int overideNumIterations)",
			"body": [
				"Physics3DConstraint:setOverrideNumSolverIterations(${1:int overideNumIterations})"
			],
			"description": "void Physics3DConstraint::setOverrideNumSolverIterations(int overideNumIterations)"
		},
		 "Frame* ActionTimelineCache::loadVisibleFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadVisibleFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadVisibleFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadVisibleFrame(const rapidjson::Value& json)"
		},
		 "void EaseQuarticActionIn::update(float time)": {
			"prefix": "void EaseQuarticActionIn::update(float time)",
			"body": [
				"EaseQuarticActionIn:update(${1:float time})"
			],
			"description": "void EaseQuarticActionIn::update(float time)"
		},
		 "void RelativeLayoutParameter::setRelativeName(const std::string& name)": {
			"prefix": "void RelativeLayoutParameter::setRelativeName(const std::string& name)",
			"body": [
				"RelativeLayoutParameter:setRelativeName(${1:std:string& name})"
			],
			"description": "void RelativeLayoutParameter::setRelativeName(const std::string& name)"
		},
		 "ActionInterval* ActionFrame::getAction(float fDuration)": {
			"prefix": "ActionInterval* ActionFrame::getAction(float fDuration)",
			"body": [
				"ActionFrame:getAction(${1:float fDuration})"
			],
			"description": "ActionInterval* ActionFrame::getAction(float fDuration)"
		},
		 "Vec2 Vec2::rotateByAngle(const Vec2& pivot, float angle) const": {
			"prefix": "Vec2 Vec2::rotateByAngle(const Vec2& pivot, float angle) const",
			"body": [
				"Vec2:rotateByAngle(${1:Vec2& pivot},${2:float angle})"
			],
			"description": "Vec2 Vec2::rotateByAngle(const Vec2& pivot, float angle) const"
		},
		 "void EditBoxImplWin::setContentSize(const Size& size)": {
			"prefix": "void EditBoxImplWin::setContentSize(const Size& size)",
			"body": [
				"EditBoxImplWin:setContentSize(${1:Size& size})"
			],
			"description": "void EditBoxImplWin::setContentSize(const Size& size)"
		},
		 "void ScrollView::jumpToRight()": {
			"prefix": "void ScrollView::jumpToRight()",
			"body": [
				"void ScrollView:jumpToRight()"
			],
			"description": "void ScrollView::jumpToRight()"
		},
		 "void Terrain::QuadTree::draw()": {
			"prefix": "void Terrain::QuadTree::draw()",
			"body": [
				"void Terrain:QuadTree:draw()"
			],
			"description": "void Terrain::QuadTree::draw()"
		},
		 "ActionObject* ActionManagerEx::getActionByName(const char* jsonName,const char* actionName)": {
			"prefix": "ActionObject* ActionManagerEx::getActionByName(const char* jsonName,const char* actionName)",
			"body": [
				"ActionManagerEx:getActionByName(${1:char* jsonName},${2:char* actionName})"
			],
			"description": "ActionObject* ActionManagerEx::getActionByName(const char* jsonName,const char* actionName)"
		},
		 "void UICCTextField::setAttachWithIME(bool attach)": {
			"prefix": "void UICCTextField::setAttachWithIME(bool attach)",
			"body": [
				"UICCTextField:setAttachWithIME(${1:bool attach})"
			],
			"description": "void UICCTextField::setAttachWithIME(bool attach)"
		},
		 "void NavMeshDebugDraw::draw(Renderer* renderer)": {
			"prefix": "void NavMeshDebugDraw::draw(Renderer* renderer)",
			"body": [
				"NavMeshDebugDraw:draw(${1:Renderer* renderer})"
			],
			"description": "void NavMeshDebugDraw::draw(Renderer* renderer)"
		},
		 "ProgressFromTo* ProgressFromTo::clone() const": {
			"prefix": "ProgressFromTo* ProgressFromTo::clone() const",
			"body": [
				"ProgressFromTo* ProgressFromTo:clone() "
			],
			"description": "ProgressFromTo* ProgressFromTo::clone() const"
		},
		 "void* operator new[] (std::size_t size)": {
			"prefix": "void* operator new[] (std::size_t size)",
			"body": [
				"operator new[] (${1:std:size_t size})"
			],
			"description": "void* operator new[] (std::size_t size)"
		},
		 "SpotLight* SpotLight::create(const Vec3 &direction, const Vec3 &position, const Color3B &color, float innerAngle, float outerAngle, float range)": {
			"prefix": "SpotLight* SpotLight::create(const Vec3 &direction, const Vec3 &position, const Color3B &color, float innerAngle, float outerAngle, float range)",
			"body": [
				"SpotLight:create(${1:Vec3 &direction},${2:Vec3 &position},${3:Color3B &color},${4:float innerAngle},${5:float outerAngle},${6:float range})"
			],
			"description": "SpotLight* SpotLight::create(const Vec3 &direction, const Vec3 &position, const Color3B &color, float innerAngle, float outerAngle, float range)"
		},
		 "Vec2 PhysicsShapeCircle::getOffset()": {
			"prefix": "Vec2 PhysicsShapeCircle::getOffset()",
			"body": [
				"Vec2 PhysicsShapeCircle:getOffset()"
			],
			"description": "Vec2 PhysicsShapeCircle::getOffset()"
		},
		 "void ProcessBase::update(float dt)": {
			"prefix": "void ProcessBase::update(float dt)",
			"body": [
				"ProcessBase:update(${1:float dt})"
			],
			"description": "void ProcessBase::update(float dt)"
		},
		 "void PrettyPrinter::visit(const __Bool * p)": {
			"prefix": "void PrettyPrinter::visit(const __Bool * p)",
			"body": [
				"PrettyPrinter:visit(${1:__Bool * p})"
			],
			"description": "void PrettyPrinter::visit(const __Bool * p)"
		},
		 "void ProgressFromTo::startWithTarget(Node *target)": {
			"prefix": "void ProgressFromTo::startWithTarget(Node *target)",
			"body": [
				"ProgressFromTo:startWithTarget(${1:Node *target})"
			],
			"description": "void ProgressFromTo::startWithTarget(Node *target)"
		},
		 "RelativeBox* RelativeBox::create()": {
			"prefix": "RelativeBox* RelativeBox::create()",
			"body": [
				"RelativeBox* RelativeBox:create()"
			],
			"description": "RelativeBox* RelativeBox::create()"
		},
		 "void Button::adaptRenderers()": {
			"prefix": "void Button::adaptRenderers()",
			"body": [
				"void Button:adaptRenderers()"
			],
			"description": "void Button::adaptRenderers()"
		},
		 "void AlphaFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void AlphaFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"AlphaFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void AlphaFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "PhysicsShape* PhysicsBody::addShape(PhysicsShape* shape, bool addMassAndMoment/* = true*/)": {
			"prefix": "PhysicsShape* PhysicsBody::addShape(PhysicsShape* shape, bool addMassAndMoment/* = true*/)",
			"body": [
				"PhysicsBody:addShape(${1:PhysicsShape* shape},${2:bool addMassAndMoment/* = true*/})"
			],
			"description": "PhysicsShape* PhysicsBody::addShape(PhysicsShape* shape, bool addMassAndMoment/* = true*/)"
		},
		 "bool Node::isVisitableByVisitingCamera() const": {
			"prefix": "bool Node::isVisitableByVisitingCamera() const",
			"body": [
				"bool Node:isVisitableByVisitingCamera() "
			],
			"description": "bool Node::isVisitableByVisitingCamera() const"
		},
		 "void Button::setupNormalTexture()": {
			"prefix": "void Button::setupNormalTexture()",
			"body": [
				"void Button:setupNormalTexture()"
			],
			"description": "void Button::setupNormalTexture()"
		},
		 "ContourData *DataReaderHelper::decodeContour(tinyxml2::XMLElement *contourXML, DataInfo *dataInfo)": {
			"prefix": "ContourData *DataReaderHelper::decodeContour(tinyxml2::XMLElement *contourXML, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeContour(${1:tinyxml2:XMLElement *contourXML},${2:DataInfo *dataInfo})"
			],
			"description": "ContourData *DataReaderHelper::decodeContour(tinyxml2::XMLElement *contourXML, DataInfo *dataInfo)"
		},
		 "LoadingBar* LoadingBar::create()": {
			"prefix": "LoadingBar* LoadingBar::create()",
			"body": [
				"LoadingBar* LoadingBar:create()"
			],
			"description": "LoadingBar* LoadingBar::create()"
		},
		 "void TransformHelp::transformFromParentWithoutScale(BaseData &node, const BaseData &parentNode)": {
			"prefix": "void TransformHelp::transformFromParentWithoutScale(BaseData &node, const BaseData &parentNode)",
			"body": [
				"TransformHelp:transformFromParentWithoutScale(${1:BaseData &node},${2:BaseData &parentNode})"
			],
			"description": "void TransformHelp::transformFromParentWithoutScale(BaseData &node, const BaseData &parentNode)"
		},
		 "bool CCBReader::init()": {
			"prefix": "bool CCBReader::init()",
			"body": [
				"bool CCBReader:init()"
			],
			"description": "bool CCBReader::init()"
		},
		 "void TransitionProgress::onEnter()": {
			"prefix": "void TransitionProgress::onEnter()",
			"body": [
				"void TransitionProgress:onEnter()"
			],
			"description": "void TransitionProgress::onEnter()"
		},
		 "void LayerColor::changeWidth(GLfloat w)": {
			"prefix": "void LayerColor::changeWidth(GLfloat w)",
			"body": [
				"LayerColor:changeWidth(${1:GLfloat w})"
			],
			"description": "void LayerColor::changeWidth(GLfloat w)"
		},
		 "void MenuItemImageLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)": {
			"prefix": "void MenuItemImageLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)",
			"body": [
				"MenuItemImageLoader:onHandlePropTypeSpriteFrame(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:SpriteFrame * pSpriteFrame},${5:CCBReader * ccbReader})"
			],
			"description": "void MenuItemImageLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)"
		},
		 "std::vector<Vec2> AutoPolygon::expand(const std::vector<Vec2>& points, const cocos2d::Rect &rect, const float& epsilon)": {
			"prefix": "std::vector<Vec2> AutoPolygon::expand(const std::vector<Vec2>& points, const cocos2d::Rect &rect, const float& epsilon)",
			"body": [
				"AutoPolygon:expand(${1:std:vector<Vec2>& points},${2:cocos2d:Rect &rect},${3:float& epsilon})"
			],
			"description": "std::vector<Vec2> AutoPolygon::expand(const std::vector<Vec2>& points, const cocos2d::Rect &rect, const float& epsilon)"
		},
		 "EaseBezierAction* EaseBezierAction::clone() const": {
			"prefix": "EaseBezierAction* EaseBezierAction::clone() const",
			"body": [
				"EaseBezierAction* EaseBezierAction:clone() "
			],
			"description": "EaseBezierAction* EaseBezierAction::clone() const"
		},
		 "void Node::addChild(Node *child)": {
			"prefix": "void Node::addChild(Node *child)",
			"body": [
				"Node:addChild(${1:Node *child})"
			],
			"description": "void Node::addChild(Node *child)"
		},
		 "void SpriteFrameCache::removeSpriteFrames()": {
			"prefix": "void SpriteFrameCache::removeSpriteFrames()",
			"body": [
				"void SpriteFrameCache:removeSpriteFrames()"
			],
			"description": "void SpriteFrameCache::removeSpriteFrames()"
		},
		 "LabelTTF * LabelTTF::create()": {
			"prefix": "LabelTTF * LabelTTF::create()",
			"body": [
				"LabelTTF * LabelTTF:create()"
			],
			"description": "LabelTTF * LabelTTF::create()"
		},
		 "bool Physics3DComponent::init()": {
			"prefix": "bool Physics3DComponent::init()",
			"body": [
				"bool Physics3DComponent:init()"
			],
			"description": "bool Physics3DComponent::init()"
		},
		 "void AtlasNode::setIgnoreContentScaleFactor(bool ignoreContentScaleFactor)": {
			"prefix": "void AtlasNode::setIgnoreContentScaleFactor(bool ignoreContentScaleFactor)",
			"body": [
				"AtlasNode:setIgnoreContentScaleFactor(${1:bool ignoreContentScaleFactor})"
			],
			"description": "void AtlasNode::setIgnoreContentScaleFactor(bool ignoreContentScaleFactor)"
		},
		 "void FileUtils::loadFilenameLookupDictionaryFromFile(const std::string &filename)": {
			"prefix": "void FileUtils::loadFilenameLookupDictionaryFromFile(const std::string &filename)",
			"body": [
				"FileUtils:loadFilenameLookupDictionaryFromFile(${1:std:string &filename})"
			],
			"description": "void FileUtils::loadFilenameLookupDictionaryFromFile(const std::string &filename)"
		},
		 "void SkeletonRenderer::initialize ()": {
			"prefix": "void SkeletonRenderer::initialize ()",
			"body": [
				"void SkeletonRenderer:initialize ()"
			],
			"description": "void SkeletonRenderer::initialize ()"
		},
		 "void ActionTimeline::clearLastFrameCallFunc()": {
			"prefix": "void ActionTimeline::clearLastFrameCallFunc()",
			"body": [
				"void ActionTimeline:clearLastFrameCallFunc()"
			],
			"description": "void ActionTimeline::clearLastFrameCallFunc()"
		},
		 "void Label::setLineBreakWithoutSpace(bool breakWithoutSpace)": {
			"prefix": "void Label::setLineBreakWithoutSpace(bool breakWithoutSpace)",
			"body": [
				"Label:setLineBreakWithoutSpace(${1:bool breakWithoutSpace})"
			],
			"description": "void Label::setLineBreakWithoutSpace(bool breakWithoutSpace)"
		},
		 "void TransitionFadeTR::onExit()": {
			"prefix": "void TransitionFadeTR::onExit()",
			"body": [
				"void TransitionFadeTR:onExit()"
			],
			"description": "void TransitionFadeTR::onExit()"
		},
		 "IndexBuffer* IndexBuffer::create(IndexType type, int number, GLenum usage/* = GL_STATIC_DRAW*/)": {
			"prefix": "IndexBuffer* IndexBuffer::create(IndexType type, int number, GLenum usage/* = GL_STATIC_DRAW*/)",
			"body": [
				"IndexBuffer:create(${1:IndexType type},${2:int number},${3:GLenum usage/* = GL_STATIC_DRAW*/})"
			],
			"description": "IndexBuffer* IndexBuffer::create(IndexType type, int number, GLenum usage/* = GL_STATIC_DRAW*/)"
		},
		 "float PhysicsJointRatchet::getAngle() const": {
			"prefix": "float PhysicsJointRatchet::getAngle() const",
			"body": [
				"float PhysicsJointRatchet:getAngle() "
			],
			"description": "float PhysicsJointRatchet::getAngle() const"
		},
		 "void cocos2d::Terrain::setLightDir(const Vec3& lightDir)": {
			"prefix": "void cocos2d::Terrain::setLightDir(const Vec3& lightDir)",
			"body": [
				"cocos2d:Terrain:setLightDir(${1:Vec3& lightDir})"
			],
			"description": "void cocos2d::Terrain::setLightDir(const Vec3& lightDir)"
		},
		 "void CCBSequence::setSoundChannel(CCBSequenceProperty* soundChannel)": {
			"prefix": "void CCBSequence::setSoundChannel(CCBSequenceProperty* soundChannel)",
			"body": [
				"CCBSequence:setSoundChannel(${1:CCBSequenceProperty* soundChannel})"
			],
			"description": "void CCBSequence::setSoundChannel(CCBSequenceProperty* soundChannel)"
		},
		 "void Frame::apply(float percent)": {
			"prefix": "void Frame::apply(float percent)",
			"body": [
				"Frame:apply(${1:float percent})"
			],
			"description": "void Frame::apply(float percent)"
		},
		 "MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"* MenuItemSprite:create(${1:Node* normalSprite},${2:Node* selectedSprite},${3:Ref* target},${4:SEL_MenuHandler selector})"
			],
			"description": "MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, Ref* target, SEL_MenuHandler selector)"
		},
		 "float OBB::projectPoint(const Vec3& point, const Vec3& axis)const": {
			"prefix": "float OBB::projectPoint(const Vec3& point, const Vec3& axis)const",
			"body": [
				"OBB:projectPoint(${1:Vec3& point},${2:Vec3& axis})"
			],
			"description": "float OBB::projectPoint(const Vec3& point, const Vec3& axis)const"
		},
		 "TransitionFlipAngular* TransitionFlipAngular::create(float t, Scene* s)": {
			"prefix": "TransitionFlipAngular* TransitionFlipAngular::create(float t, Scene* s)",
			"body": [
				"TransitionFlipAngular:create(${1:float t},${2:Scene* s})"
			],
			"description": "TransitionFlipAngular* TransitionFlipAngular::create(float t, Scene* s)"
		},
		 "void Slider::loadSlidBallTextureDisabled(SpriteFrame* spriteframe)": {
			"prefix": "void Slider::loadSlidBallTextureDisabled(SpriteFrame* spriteframe)",
			"body": [
				"Slider:loadSlidBallTextureDisabled(${1:SpriteFrame* spriteframe})"
			],
			"description": "void Slider::loadSlidBallTextureDisabled(SpriteFrame* spriteframe)"
		},
		 "void Scale9SpriteLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)": {
			"prefix": "void Scale9SpriteLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)",
			"body": [
				"Scale9SpriteLoader:onHandlePropTypeColor3(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Color3B pColor3B},${5:CCBReader * ccbReader})"
			],
			"description": "void Scale9SpriteLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)"
		},
		 "Node* CCBReader::readNodeGraphFromFile(const char* pCCBFileName, Ref* pOwner)": {
			"prefix": "Node* CCBReader::readNodeGraphFromFile(const char* pCCBFileName, Ref* pOwner)",
			"body": [
				"CCBReader:readNodeGraphFromFile(${1:char* pCCBFileName},${2:Ref* pOwner})"
			],
			"description": "Node* CCBReader::readNodeGraphFromFile(const char* pCCBFileName, Ref* pOwner)"
		},
		 "void GLProgramState::setUniformInt(const std::string& uniformName, int value)": {
			"prefix": "void GLProgramState::setUniformInt(const std::string& uniformName, int value)",
			"body": [
				"GLProgramState:setUniformInt(${1:std:string& uniformName},${2:int value})"
			],
			"description": "void GLProgramState::setUniformInt(const std::string& uniformName, int value)"
		},
		 "bool AudioEngine::isLoop(int audioID)": {
			"prefix": "bool AudioEngine::isLoop(int audioID)",
			"body": [
				"AudioEngine:isLoop(${1:int audioID})"
			],
			"description": "bool AudioEngine::isLoop(int audioID)"
		},
		 "void Physics3DDebugDrawer::reportErrorWarning( const char* warningString )": {
			"prefix": "void Physics3DDebugDrawer::reportErrorWarning( const char* warningString )",
			"body": [
				"Physics3DDebugDrawer:reportErrorWarning(${1:char* warningString})"
			],
			"description": "void Physics3DDebugDrawer::reportErrorWarning( const char* warningString )"
		},
		 "float NavMeshAgent::getMaxSpeed() const": {
			"prefix": "float NavMeshAgent::getMaxSpeed() const",
			"body": [
				"float NavMeshAgent:getMaxSpeed() "
			],
			"description": "float NavMeshAgent::getMaxSpeed() const"
		},
		 "void MenuItemLabel::setLabel(Node* var)": {
			"prefix": "void MenuItemLabel::setLabel(Node* var)",
			"body": [
				"MenuItemLabel:setLabel(${1:Node* var})"
			],
			"description": "void MenuItemLabel::setLabel(Node* var)"
		},
		 "float Physics3DRigidBody::getCcdMotionThreshold() const": {
			"prefix": "float Physics3DRigidBody::getCcdMotionThreshold() const",
			"body": [
				"float Physics3DRigidBody:getCcdMotionThreshold() "
			],
			"description": "float Physics3DRigidBody::getCcdMotionThreshold() const"
		},
		 "void SimpleAudioEngine::unloadEffect(const char* pszFilePath)": {
			"prefix": "void SimpleAudioEngine::unloadEffect(const char* pszFilePath)",
			"body": [
				"SimpleAudioEngine:unloadEffect(${1:char* pszFilePath})"
			],
			"description": "void SimpleAudioEngine::unloadEffect(const char* pszFilePath)"
		},
		 "void TransitionMoveInT::initScenes()": {
			"prefix": "void TransitionMoveInT::initScenes()",
			"body": [
				"void TransitionMoveInT:initScenes()"
			],
			"description": "void TransitionMoveInT::initScenes()"
		},
		 "void RichText::removeElement(int index)": {
			"prefix": "void RichText::removeElement(int index)",
			"body": [
				"RichText:removeElement(${1:int index})"
			],
			"description": "void RichText::removeElement(int index)"
		},
		 "void ComController::update(float delta)": {
			"prefix": "void ComController::update(float delta)",
			"body": [
				"ComController:update(${1:float delta})"
			],
			"description": "void ComController::update(float delta)"
		},
		 "Frame* AlphaFrame::clone()": {
			"prefix": "Frame* AlphaFrame::clone()",
			"body": [
				"Frame* AlphaFrame:clone()"
			],
			"description": "Frame* AlphaFrame::clone()"
		},
		 "Node* findChildByNameRecursively(Node* node, const std::string &childName)": {
			"prefix": "Node* findChildByNameRecursively(Node* node, const std::string &childName)",
			"body": [
				"findChildByNameRecursively(${1:Node* node},${2:std:string &childName})"
			],
			"description": "Node* findChildByNameRecursively(Node* node, const std::string &childName)"
		},
		 "Frame* TextureFrame::clone()": {
			"prefix": "Frame* TextureFrame::clone()",
			"body": [
				"Frame* TextureFrame:clone()"
			],
			"description": "Frame* TextureFrame::clone()"
		},
		 "void Bone::addDisplay(Node *display, int index)": {
			"prefix": "void Bone::addDisplay(Node *display, int index)",
			"body": [
				"Bone:addDisplay(${1:Node *display},${2:int index})"
			],
			"description": "void Bone::addDisplay(Node *display, int index)"
		},
		 "void Button::loadTextureDisabled(SpriteFrame* disabledSpriteFrame)": {
			"prefix": "void Button::loadTextureDisabled(SpriteFrame* disabledSpriteFrame)",
			"body": [
				"Button:loadTextureDisabled(${1:SpriteFrame* disabledSpriteFrame})"
			],
			"description": "void Button::loadTextureDisabled(SpriteFrame* disabledSpriteFrame)"
		},
		 "std::mt19937 &cocos2d::RandomHelper::getEngine()": {
			"prefix": "std::mt19937 &cocos2d::RandomHelper::getEngine()",
			"body": [
				"std:mt19937 &cocos2d:RandomHelper:getEngine()"
			],
			"description": "std::mt19937 &cocos2d::RandomHelper::getEngine()"
		},
		 "int ProcessBase::getCurrentFrameIndex()": {
			"prefix": "int ProcessBase::getCurrentFrameIndex()",
			"body": [
				"int ProcessBase:getCurrentFrameIndex()"
			],
			"description": "int ProcessBase::getCurrentFrameIndex()"
		},
		 "void ArmatureAnimation::setUserObject(Ref *pUserObject)": {
			"prefix": "void ArmatureAnimation::setUserObject(Ref *pUserObject)",
			"body": [
				"ArmatureAnimation:setUserObject(${1:Ref *pUserObject})"
			],
			"description": "void ArmatureAnimation::setUserObject(Ref *pUserObject)"
		},
		 "Node* CSLoader::nodeWithFlatBuffersFile(const std::string &fileName)": {
			"prefix": "Node* CSLoader::nodeWithFlatBuffersFile(const std::string &fileName)",
			"body": [
				"CSLoader:nodeWithFlatBuffersFile(${1:std:string &fileName})"
			],
			"description": "Node* CSLoader::nodeWithFlatBuffersFile(const std::string &fileName)"
		},
		 "void TextureAtlas::moveQuadsFromIndex(ssize_t index, ssize_t newIndex)": {
			"prefix": "void TextureAtlas::moveQuadsFromIndex(ssize_t index, ssize_t newIndex)",
			"body": [
				"TextureAtlas:moveQuadsFromIndex(${1:ssize_t index},${2:ssize_t newIndex})"
			],
			"description": "void TextureAtlas::moveQuadsFromIndex(ssize_t index, ssize_t newIndex)"
		},
		 "void Configuration::gatherGPUInfo()": {
			"prefix": "void Configuration::gatherGPUInfo()",
			"body": [
				"void Configuration:gatherGPUInfo()"
			],
			"description": "void Configuration::gatherGPUInfo()"
		},
		 "void ComAudio::playBackgroundMusic()": {
			"prefix": "void ComAudio::playBackgroundMusic()",
			"body": [
				"void ComAudio:playBackgroundMusic()"
			],
			"description": "void ComAudio::playBackgroundMusic()"
		},
		 "void Physics3DRigidBody::applyCentralImpulse( const cocos2d::Vec3& impulse )": {
			"prefix": "void Physics3DRigidBody::applyCentralImpulse( const cocos2d::Vec3& impulse )",
			"body": [
				"Physics3DRigidBody:applyCentralImpulse(${1:cocos2d:Vec3& impulse})"
			],
			"description": "void Physics3DRigidBody::applyCentralImpulse( const cocos2d::Vec3& impulse )"
		},
		 "TransitionProgressOutIn* TransitionProgressOutIn::create(float t, Scene* scene)": {
			"prefix": "TransitionProgressOutIn* TransitionProgressOutIn::create(float t, Scene* scene)",
			"body": [
				"TransitionProgressOutIn:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionProgressOutIn* TransitionProgressOutIn::create(float t, Scene* scene)"
		},
		 "ActionInterval* TransitionMoveInL::action()": {
			"prefix": "ActionInterval* TransitionMoveInL::action()",
			"body": [
				"ActionInterval* TransitionMoveInL:action()"
			],
			"description": "ActionInterval* TransitionMoveInL::action()"
		},
		 "void Animate3D::step(float dt)": {
			"prefix": "void Animate3D::step(float dt)",
			"body": [
				"Animate3D:step(${1:float dt})"
			],
			"description": "void Animate3D::step(float dt)"
		},
		 "bool MeshVertexData::hasVertexAttrib(int attrib) const": {
			"prefix": "bool MeshVertexData::hasVertexAttrib(int attrib) const",
			"body": [
				"MeshVertexData:hasVertexAttrib(${1:int attrib})"
			],
			"description": "bool MeshVertexData::hasVertexAttrib(int attrib) const"
		},
		 "ParticleMeteor* ParticleMeteor::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleMeteor* ParticleMeteor::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleMeteor:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleMeteor* ParticleMeteor::createWithTotalParticles(int numberOfParticles)"
		},
		 "GLProgram* GLProgram::createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)": {
			"prefix": "GLProgram* GLProgram::createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)",
			"body": [
				"GLProgram:createWithByteArrays(${1:GLchar* vShaderByteArray},${2:GLchar* fShaderByteArray})"
			],
			"description": "GLProgram* GLProgram::createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)"
		},
		 "Controller* Controller::getControllerByTag(int tag)": {
			"prefix": "Controller* Controller::getControllerByTag(int tag)",
			"body": [
				"Controller:getControllerByTag(${1:int tag})"
			],
			"description": "Controller* Controller::getControllerByTag(int tag)"
		},
		 "int IndexBuffer::getIndexNumber() const": {
			"prefix": "int IndexBuffer::getIndexNumber() const",
			"body": [
				"int IndexBuffer:getIndexNumber() "
			],
			"description": "int IndexBuffer::getIndexNumber() const"
		},
		 "void Node::setPositionZ(float positionZ)": {
			"prefix": "void Node::setPositionZ(float positionZ)",
			"body": [
				"Node:setPositionZ(${1:float positionZ})"
			],
			"description": "void Node::setPositionZ(float positionZ)"
		},
		 "void NavMeshAgent::resume()": {
			"prefix": "void NavMeshAgent::resume()",
			"body": [
				"void NavMeshAgent:resume()"
			],
			"description": "void NavMeshAgent::resume()"
		},
		 "void WebViewImpl::loadURL(const std::string &url)": {
			"prefix": "void WebViewImpl::loadURL(const std::string &url)",
			"body": [
				"WebViewImpl:loadURL(${1:std:string &url})"
			],
			"description": "void WebViewImpl::loadURL(const std::string &url)"
		},
		 "BillBoard* BillBoard::create(const std::string& filename, const Rect& rect, Mode mode)": {
			"prefix": "BillBoard* BillBoard::create(const std::string& filename, const Rect& rect, Mode mode)",
			"body": [
				"BillBoard:create(${1:std:string& filename},${2:Rect& rect},${3:Mode mode})"
			],
			"description": "BillBoard* BillBoard::create(const std::string& filename, const Rect& rect, Mode mode)"
		},
		 "void SkeletonAnimation::setEndListener (const EndListener& listener)": {
			"prefix": "void SkeletonAnimation::setEndListener (const EndListener& listener)",
			"body": [
				"SkeletonAnimation:setEndListener (${1:EndListener& listener})"
			],
			"description": "void SkeletonAnimation::setEndListener (const EndListener& listener)"
		},
		 "void loadDataJNI(const int index, const std::string &data, const std::string &MIMEType, const std::string &encoding, const std::string &baseURL)": {
			"prefix": "void loadDataJNI(const int index, const std::string &data, const std::string &MIMEType, const std::string &encoding, const std::string &baseURL)",
			"body": [
				"loadDataJNI(${1:int index},${2:std:string &data},${3:std:string &MIMEType},${4:std:string &encoding},${5:std:string &baseURL})"
			],
			"description": "void loadDataJNI(const int index, const std::string &data, const std::string &MIMEType, const std::string &encoding, const std::string &baseURL)"
		},
		 "float Vec3::dot(const Vec3& v1, const Vec3& v2)": {
			"prefix": "float Vec3::dot(const Vec3& v1, const Vec3& v2)",
			"body": [
				"Vec3:dot(${1:Vec3& v1},${2:Vec3& v2})"
			],
			"description": "float Vec3::dot(const Vec3& v1, const Vec3& v2)"
		},
		 "EaseQuinticActionOut* EaseQuinticActionOut::reverse() const": {
			"prefix": "EaseQuinticActionOut* EaseQuinticActionOut::reverse() const",
			"body": [
				"EaseQuinticActionOut* EaseQuinticActionOut:reverse() "
			],
			"description": "EaseQuinticActionOut* EaseQuinticActionOut::reverse() const"
		},
		 "int	Physics3DConstraint::getOverrideNumSolverIterations() const": {
			"prefix": "int	Physics3DConstraint::getOverrideNumSolverIterations() const",
			"body": [
				"int	Physics3DConstraint:getOverrideNumSolverIterations() "
			],
			"description": "int	Physics3DConstraint::getOverrideNumSolverIterations() const"
		},
		 "std::string Slider::getDescription() const": {
			"prefix": "std::string Slider::getDescription() const",
			"body": [
				"std:string Slider:getDescription() "
			],
			"description": "std::string Slider::getDescription() const"
		},
		 "class IMEDispatcher::Impl": {
			"prefix": "class IMEDispatcher::Impl",
			"body": [
				"class IMEDispatcher:Impl"
			],
			"description": "class IMEDispatcher::Impl"
		},
		 "void EditBox::setReturnType(EditBox::KeyboardReturnType returnType)": {
			"prefix": "void EditBox::setReturnType(EditBox::KeyboardReturnType returnType)",
			"body": [
				"EditBox:setReturnType(${1:EditBox:KeyboardReturnType returnType})"
			],
			"description": "void EditBox::setReturnType(EditBox::KeyboardReturnType returnType)"
		},
		 "Frame* ActionTimelineCache::loadAlphaFrameWithFlatBuffers(const flatbuffers::IntFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadAlphaFrameWithFlatBuffers(const flatbuffers::IntFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadAlphaFrameWithFlatBuffers(${1:flatbuffers:IntFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadAlphaFrameWithFlatBuffers(const flatbuffers::IntFrame *flatbuffers)"
		},
		 "void SpriteBatchNode::addChild(Node *child, int zOrder, int tag)": {
			"prefix": "void SpriteBatchNode::addChild(Node *child, int zOrder, int tag)",
			"body": [
				"SpriteBatchNode:addChild(${1:Node *child},${2:int zOrder},${3:int tag})"
			],
			"description": "void SpriteBatchNode::addChild(Node *child, int zOrder, int tag)"
		},
		 "void ActionManager::update(float dt)": {
			"prefix": "void ActionManager::update(float dt)",
			"body": [
				"ActionManager:update(${1:float dt})"
			],
			"description": "void ActionManager::update(float dt)"
		},
		 "void PhysicsJointMotor::setRate(float rate)": {
			"prefix": "void PhysicsJointMotor::setRate(float rate)",
			"body": [
				"PhysicsJointMotor:setRate(${1:float rate})"
			],
			"description": "void PhysicsJointMotor::setRate(float rate)"
		},
		 "Widget* TextField::createCloneInstance()": {
			"prefix": "Widget* TextField::createCloneInstance()",
			"body": [
				"Widget* TextField:createCloneInstance()"
			],
			"description": "Widget* TextField::createCloneInstance()"
		},
		 "__Dictionary* __Dictionary::createWithContentsOfFileThreadSafe(const char *pFileName)": {
			"prefix": "__Dictionary* __Dictionary::createWithContentsOfFileThreadSafe(const char *pFileName)",
			"body": [
				"__Dictionary:createWithContentsOfFileThreadSafe(${1:char *pFileName})"
			],
			"description": "__Dictionary* __Dictionary::createWithContentsOfFileThreadSafe(const char *pFileName)"
		},
		 "Vec4 Vec4::getNormalized() const": {
			"prefix": "Vec4 Vec4::getNormalized() const",
			"body": [
				"Vec4 Vec4:getNormalized() "
			],
			"description": "Vec4 Vec4::getNormalized() const"
		},
		 "std::string Text::getDescription() const": {
			"prefix": "std::string Text::getDescription() const",
			"body": [
				"std:string Text:getDescription() "
			],
			"description": "std::string Text::getDescription() const"
		},
		 "bool Layout::isClippingEnabled()const": {
			"prefix": "bool Layout::isClippingEnabled()const",
			"body": [
				"bool Layout:isClippingEnabled()"
			],
			"description": "bool Layout::isClippingEnabled()const"
		},
		 "void NodeGrid::onGridEndDraw()": {
			"prefix": "void NodeGrid::onGridEndDraw()",
			"body": [
				"void NodeGrid:onGridEndDraw()"
			],
			"description": "void NodeGrid::onGridEndDraw()"
		},
		 "PrettyPrinter::PrettyPrinter(int indentLevel/* = 0 */)": {
			"prefix": "PrettyPrinter::PrettyPrinter(int indentLevel/* = 0 */)",
			"body": [
				"indentLevel/* = 0 */})"
			],
			"description": "PrettyPrinter::PrettyPrinter(int indentLevel/* = 0 */)"
		},
		 "bool CCBRotateYTo::initWithDuration(float fDuration, float fAngle)": {
			"prefix": "bool CCBRotateYTo::initWithDuration(float fDuration, float fAngle)",
			"body": [
				"CCBRotateYTo:initWithDuration(${1:float fDuration},${2:float fAngle})"
			],
			"description": "bool CCBRotateYTo::initWithDuration(float fDuration, float fAngle)"
		},
		 "void LayerGradient::setStartOpacity(GLubyte o)": {
			"prefix": "void LayerGradient::setStartOpacity(GLubyte o)",
			"body": [
				"LayerGradient:setStartOpacity(${1:GLubyte o})"
			],
			"description": "void LayerGradient::setStartOpacity(GLubyte o)"
		},
		 "Vec3 Node::getPosition3D() const": {
			"prefix": "Vec3 Node::getPosition3D() const",
			"body": [
				"Vec3 Node:getPosition3D() "
			],
			"description": "Vec3 Node::getPosition3D() const"
		},
		 "static void splitFilename (std::string& str)": {
			"prefix": "static void splitFilename (std::string& str)",
			"body": [
				"void splitFilename (${1:std:string& str})"
			],
			"description": "static void splitFilename (std::string& str)"
		},
		 "int Node::getTag() const": {
			"prefix": "int Node::getTag() const",
			"body": [
				"int Node:getTag() "
			],
			"description": "int Node::getTag() const"
		},
		 "float PhysicsJointRotarySpring::getStiffness() const": {
			"prefix": "float PhysicsJointRotarySpring::getStiffness() const",
			"body": [
				"float PhysicsJointRotarySpring:getStiffness() "
			],
			"description": "float PhysicsJointRotarySpring::getStiffness() const"
		},
		 "void FrameBuffer::clearFBO()": {
			"prefix": "void FrameBuffer::clearFBO()",
			"body": [
				"void FrameBuffer:clearFBO()"
			],
			"description": "void FrameBuffer::clearFBO()"
		},
		 "Material* Material::createWithGLStateProgram(GLProgramState* programState)": {
			"prefix": "Material* Material::createWithGLStateProgram(GLProgramState* programState)",
			"body": [
				"Material:createWithGLStateProgram(${1:GLProgramState* programState})"
			],
			"description": "Material* Material::createWithGLStateProgram(GLProgramState* programState)"
		},
		 "bool AnimationFrame::initWithSpriteFrame(SpriteFrame* spriteFrame, float delayUnits, const ValueMap& userInfo)": {
			"prefix": "bool AnimationFrame::initWithSpriteFrame(SpriteFrame* spriteFrame, float delayUnits, const ValueMap& userInfo)",
			"body": [
				"AnimationFrame:initWithSpriteFrame(${1:SpriteFrame* spriteFrame},${2:float delayUnits},${3:ValueMap& userInfo})"
			],
			"description": "bool AnimationFrame::initWithSpriteFrame(SpriteFrame* spriteFrame, float delayUnits, const ValueMap& userInfo)"
		},
		 "const unsigned int PolygonInfo::getTriaglesCount() const": {
			"prefix": "const unsigned int PolygonInfo::getTriaglesCount() const",
			"body": [
				" unsigned int PolygonInfo:getTriaglesCount() "
			],
			"description": "const unsigned int PolygonInfo::getTriaglesCount() const"
		},
		 "void BoneNode::removeFromSkinList(SkinNode* skin)": {
			"prefix": "void BoneNode::removeFromSkinList(SkinNode* skin)",
			"body": [
				"BoneNode:removeFromSkinList(${1:SkinNode* skin})"
			],
			"description": "void BoneNode::removeFromSkinList(SkinNode* skin)"
		},
		 "void Quaternion::slerpForSquad(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)": {
			"prefix": "void Quaternion::slerpForSquad(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)",
			"body": [
				"Quaternion:slerpForSquad(${1:Quaternion& q1},${2:Quaternion& q2},${3:float t},${4:Quaternion* dst})"
			],
			"description": "void Quaternion::slerpForSquad(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)"
		},
		 "void Director::setProjection(Projection projection)": {
			"prefix": "void Director::setProjection(Projection projection)",
			"body": [
				"Director:setProjection(${1:Projection projection})"
			],
			"description": "void Director::setProjection(Projection projection)"
		},
		 "PolygonBatch::~PolygonBatch ()": {
			"prefix": "PolygonBatch::~PolygonBatch ()",
			"body": [
				"PolygonBatch:~PolygonBatch ()"
			],
			"description": "PolygonBatch::~PolygonBatch ()"
		},
		 "void IMEDispatcher::dispatchKeyboardDidHide(IMEKeyboardNotificationInfo& info)": {
			"prefix": "void IMEDispatcher::dispatchKeyboardDidHide(IMEKeyboardNotificationInfo& info)",
			"body": [
				"IMEDispatcher:dispatchKeyboardDidHide(${1:IMEKeyboardNotificationInfo& info})"
			],
			"description": "void IMEDispatcher::dispatchKeyboardDidHide(IMEKeyboardNotificationInfo& info)"
		},
		 "bool ParticleExplosion::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleExplosion::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleExplosion:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleExplosion::initWithTotalParticles(int numberOfParticles)"
		},
		 "void ProcessBase::pause()": {
			"prefix": "void ProcessBase::pause()",
			"body": [
				"void ProcessBase:pause()"
			],
			"description": "void ProcessBase::pause()"
		},
		 "bool Quaternion::isIdentity() const": {
			"prefix": "bool Quaternion::isIdentity() const",
			"body": [
				"bool Quaternion:isIdentity() "
			],
			"description": "bool Quaternion::isIdentity() const"
		},
		 "void Armature::update(float dt)": {
			"prefix": "void Armature::update(float dt)",
			"body": [
				"Armature:update(${1:float dt})"
			],
			"description": "void Armature::update(float dt)"
		},
		 "Grid3D* Grid3D::create(const Size& gridSize)": {
			"prefix": "Grid3D* Grid3D::create(const Size& gridSize)",
			"body": [
				"Grid3D:create(${1:Size& gridSize})"
			],
			"description": "Grid3D* Grid3D::create(const Size& gridSize)"
		},
		 "void Data::fastSet(unsigned char* bytes, const ssize_t size)": {
			"prefix": "void Data::fastSet(unsigned char* bytes, const ssize_t size)",
			"body": [
				"Data:fastSet(${1:unsigned char* bytes},${2:ssize_t size})"
			],
			"description": "void Data::fastSet(unsigned char* bytes, const ssize_t size)"
		},
		 "void GLViewImpl::onGLFWError(int errorID, const char* errorDesc)": {
			"prefix": "void GLViewImpl::onGLFWError(int errorID, const char* errorDesc)",
			"body": [
				"GLViewImpl:onGLFWError(${1:int errorID},${2:char* errorDesc})"
			],
			"description": "void GLViewImpl::onGLFWError(int errorID, const char* errorDesc)"
		},
		 "bool Mat4::inverse()": {
			"prefix": "bool Mat4::inverse()",
			"body": [
				"bool Mat4:inverse()"
			],
			"description": "bool Mat4::inverse()"
		},
		 "void Sprite::setFlippedY(bool flippedY)": {
			"prefix": "void Sprite::setFlippedY(bool flippedY)",
			"body": [
				"Sprite:setFlippedY(${1:bool flippedY})"
			],
			"description": "void Sprite::setFlippedY(bool flippedY)"
		},
		 "void TransitionZoomFlipY::onEnter()": {
			"prefix": "void TransitionZoomFlipY::onEnter()",
			"body": [
				"void TransitionZoomFlipY:onEnter()"
			],
			"description": "void TransitionZoomFlipY::onEnter()"
		},
		 "void EditBox::registerScriptEditBoxHandler(int handler)": {
			"prefix": "void EditBox::registerScriptEditBoxHandler(int handler)",
			"body": [
				"EditBox:registerScriptEditBoxHandler(${1:int handler})"
			],
			"description": "void EditBox::registerScriptEditBoxHandler(int handler)"
		},
		 "void SkeletonRenderer::onExit ()": {
			"prefix": "void SkeletonRenderer::onExit ()",
			"body": [
				"void SkeletonRenderer:onExit ()"
			],
			"description": "void SkeletonRenderer::onExit ()"
		},
		 "void Texture2D::convertAI88ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertAI88ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertAI88ToRGB565(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertAI88ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "bool FileUtilsAndroid::init()": {
			"prefix": "bool FileUtilsAndroid::init()",
			"body": [
				"bool FileUtilsAndroid:init()"
			],
			"description": "bool FileUtilsAndroid::init()"
		},
		 "void ParticleSystem::onExit()": {
			"prefix": "void ParticleSystem::onExit()",
			"body": [
				"void ParticleSystem:onExit()"
			],
			"description": "void ParticleSystem::onExit()"
		},
		 "float Physics3DSliderConstraint::getLowerAngLimit() const": {
			"prefix": "float Physics3DSliderConstraint::getLowerAngLimit() const",
			"body": [
				"float Physics3DSliderConstraint:getLowerAngLimit() "
			],
			"description": "float Physics3DSliderConstraint::getLowerAngLimit() const"
		},
		 "void ScrollView::initRenderer()": {
			"prefix": "void ScrollView::initRenderer()",
			"body": [
				"void ScrollView:initRenderer()"
			],
			"description": "void ScrollView::initRenderer()"
		},
		 "ssize_t PageView::getPageCount()const": {
			"prefix": "ssize_t PageView::getPageCount()const",
			"body": [
				"ssize_t PageView:getPageCount()"
			],
			"description": "ssize_t PageView::getPageCount()const"
		},
		 "bool Properties::getColor(const char* name, Vec4* out) const": {
			"prefix": "bool Properties::getColor(const char* name, Vec4* out) const",
			"body": [
				"Properties:getColor(${1:char* name},${2:Vec4* out})"
			],
			"description": "bool Properties::getColor(const char* name, Vec4* out) const"
		},
		 "bool DeccelAmplitude::initWithAction(Action *action, float duration)": {
			"prefix": "bool DeccelAmplitude::initWithAction(Action *action, float duration)",
			"body": [
				"DeccelAmplitude:initWithAction(${1:Action *action},${2:float duration})"
			],
			"description": "bool DeccelAmplitude::initWithAction(Action *action, float duration)"
		},
		 "void NavMesh::setDebugDrawEnable(bool enable)": {
			"prefix": "void NavMesh::setDebugDrawEnable(bool enable)",
			"body": [
				"NavMesh:setDebugDrawEnable(${1:bool enable})"
			],
			"description": "void NavMesh::setDebugDrawEnable(bool enable)"
		},
		 "Vec4 Vec4::fromColor(unsigned int color)": {
			"prefix": "Vec4 Vec4::fromColor(unsigned int color)",
			"body": [
				"Vec4:fromColor(${1:unsigned int color})"
			],
			"description": "Vec4 Vec4::fromColor(unsigned int color)"
		},
		 "Vec2 PhysicsBody::getVelocity()": {
			"prefix": "Vec2 PhysicsBody::getVelocity()",
			"body": [
				"Vec2 PhysicsBody:getVelocity()"
			],
			"description": "Vec2 PhysicsBody::getVelocity()"
		},
		 "void SpriteFrameCache::removeSpriteFrameByName(const std::string& name)": {
			"prefix": "void SpriteFrameCache::removeSpriteFrameByName(const std::string& name)",
			"body": [
				"SpriteFrameCache:removeSpriteFrameByName(${1:std:string& name})"
			],
			"description": "void SpriteFrameCache::removeSpriteFrameByName(const std::string& name)"
		},
		 "GLProgramState* GLProgramStateCache::getGLProgramState(GLProgram* glprogram)": {
			"prefix": "GLProgramState* GLProgramStateCache::getGLProgramState(GLProgram* glprogram)",
			"body": [
				"GLProgramStateCache:getGLProgramState(${1:GLProgram* glprogram})"
			],
			"description": "GLProgramState* GLProgramStateCache::getGLProgramState(GLProgram* glprogram)"
		},
		 "bool ParticleSystem::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleSystem::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSystem:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleSystem::initWithTotalParticles(int numberOfParticles)"
		},
		 "void UniformValue::setMat4(const Mat4& value)": {
			"prefix": "void UniformValue::setMat4(const Mat4& value)",
			"body": [
				"UniformValue:setMat4(${1:Mat4& value})"
			],
			"description": "void UniformValue::setMat4(const Mat4& value)"
		},
		 "void TextField::initRenderer()": {
			"prefix": "void TextField::initRenderer()",
			"body": [
				"void TextField:initRenderer()"
			],
			"description": "void TextField::initRenderer()"
		},
		 "Technique* Technique::createWithGLProgramState(Material* parent, GLProgramState* state)": {
			"prefix": "Technique* Technique::createWithGLProgramState(Material* parent, GLProgramState* state)",
			"body": [
				"Technique:createWithGLProgramState(${1:Material* parent},${2:GLProgramState* state})"
			],
			"description": "Technique* Technique::createWithGLProgramState(Material* parent, GLProgramState* state)"
		},
		 "void ScrollView::initScrollBar()": {
			"prefix": "void ScrollView::initScrollBar()",
			"body": [
				"void ScrollView:initScrollBar()"
			],
			"description": "void ScrollView::initScrollBar()"
		},
		 "void AnimationCache::addAnimation(Animation *animation, const std::string& name)": {
			"prefix": "void AnimationCache::addAnimation(Animation *animation, const std::string& name)",
			"body": [
				"AnimationCache:addAnimation(${1:Animation *animation},${2:std:string& name})"
			],
			"description": "void AnimationCache::addAnimation(Animation *animation, const std::string& name)"
		},
		 "Waves* Waves::create(float duration, const Size& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)": {
			"prefix": "Waves* Waves::create(float duration, const Size& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)",
			"body": [
				"Waves:create(${1:float duration},${2:Size& gridSize},${3:unsigned int waves},${4:float amplitude},${5:bool horizontal},${6:bool vertical})"
			],
			"description": "Waves* Waves::create(float duration, const Size& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)"
		},
		 "void EventFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void EventFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"EventFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void EventFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void EditBox::keyboardWillHide(IMEKeyboardNotificationInfo& info)": {
			"prefix": "void EditBox::keyboardWillHide(IMEKeyboardNotificationInfo& info)",
			"body": [
				"EditBox:keyboardWillHide(${1:IMEKeyboardNotificationInfo& info})"
			],
			"description": "void EditBox::keyboardWillHide(IMEKeyboardNotificationInfo& info)"
		},
		 "RelativeLayoutParameter* RelativeLayoutParameter::create()": {
			"prefix": "RelativeLayoutParameter* RelativeLayoutParameter::create()",
			"body": [
				"RelativeLayoutParameter* RelativeLayoutParameter:create()"
			],
			"description": "RelativeLayoutParameter* RelativeLayoutParameter::create()"
		},
		 "void AutoreleasePool::dump()": {
			"prefix": "void AutoreleasePool::dump()",
			"body": [
				"void AutoreleasePool:dump()"
			],
			"description": "void AutoreleasePool::dump()"
		},
		 "Vec2 DisplayManager::getAnchorPointInPoints() const": {
			"prefix": "Vec2 DisplayManager::getAnchorPointInPoints() const",
			"body": [
				"Vec2 DisplayManager:getAnchorPointInPoints() "
			],
			"description": "Vec2 DisplayManager::getAnchorPointInPoints() const"
		},
		 "int __String::intValue() const": {
			"prefix": "int __String::intValue() const",
			"body": [
				"int __String:intValue() "
			],
			"description": "int __String::intValue() const"
		},
		 "Node* Text::getVirtualRenderer()": {
			"prefix": "Node* Text::getVirtualRenderer()",
			"body": [
				"Node* Text:getVirtualRenderer()"
			],
			"description": "Node* Text::getVirtualRenderer()"
		},
		 "void BoneNode::removeFromChildrenListHelper(Node * child)": {
			"prefix": "void BoneNode::removeFromChildrenListHelper(Node * child)",
			"body": [
				"BoneNode:removeFromChildrenListHelper(${1:Node * child})"
			],
			"description": "void BoneNode::removeFromChildrenListHelper(Node * child)"
		},
		 "bool __String::isEqual(const Ref* pObject)": {
			"prefix": "bool __String::isEqual(const Ref* pObject)",
			"body": [
				"__String:isEqual(${1:Ref* pObject})"
			],
			"description": "bool __String::isEqual(const Ref* pObject)"
		},
		 "void Mat4::createRotationY(float angle, Mat4* dst)": {
			"prefix": "void Mat4::createRotationY(float angle, Mat4* dst)",
			"body": [
				"Mat4:createRotationY(${1:float angle},${2:Mat4* dst})"
			],
			"description": "void Mat4::createRotationY(float angle, Mat4* dst)"
		},
		 "void BaseTriggerAction::serialize(const rapidjson::Value &val)": {
			"prefix": "void BaseTriggerAction::serialize(const rapidjson::Value &val)",
			"body": [
				"BaseTriggerAction:serialize(${1:rapidjson:Value &val})"
			],
			"description": "void BaseTriggerAction::serialize(const rapidjson::Value &val)"
		},
		 "void NavMeshDebugDraw::vertex(const float x, const float y, const float z, unsigned int color, const float u, const float v)": {
			"prefix": "void NavMeshDebugDraw::vertex(const float x, const float y, const float z, unsigned int color, const float u, const float v)",
			"body": [
				"NavMeshDebugDraw:vertex(${1:float x},${2:float y},${3:float z},${4:unsigned int color},${5:float u},${6:float v})"
			],
			"description": "void NavMeshDebugDraw::vertex(const float x, const float y, const float z, unsigned int color, const float u, const float v)"
		},
		 "float Physics3DCollider::getFriction() const": {
			"prefix": "float Physics3DCollider::getFriction() const",
			"body": [
				"float Physics3DCollider:getFriction() "
			],
			"description": "float Physics3DCollider::getFriction() const"
		},
		 "std::string BundleReader::readString()": {
			"prefix": "std::string BundleReader::readString()",
			"body": [
				"std:string BundleReader:readString()"
			],
			"description": "std::string BundleReader::readString()"
		},
		 "TriggerObj* TriggerObj::create()": {
			"prefix": "TriggerObj* TriggerObj::create()",
			"body": [
				"TriggerObj* TriggerObj:create()"
			],
			"description": "TriggerObj* TriggerObj::create()"
		},
		 "void __Array::replaceObjectAtIndex(int index, Ref* object, bool releaseObject /* ignored */)": {
			"prefix": "void __Array::replaceObjectAtIndex(int index, Ref* object, bool releaseObject /* ignored */)",
			"body": [
				"__Array:replaceObjectAtIndex(${1:int index},${2:Ref* object},${3:bool releaseObject /* ignored */})"
			],
			"description": "void __Array::replaceObjectAtIndex(int index, Ref* object, bool releaseObject /* ignored */)"
		},
		 "void FrameBuffer::attachRenderTarget(RenderTargetBase* rt)": {
			"prefix": "void FrameBuffer::attachRenderTarget(RenderTargetBase* rt)",
			"body": [
				"FrameBuffer:attachRenderTarget(${1:RenderTargetBase* rt})"
			],
			"description": "void FrameBuffer::attachRenderTarget(RenderTargetBase* rt)"
		},
		 "bool MotionStreak::initWithFade(float fade, float minSeg, float stroke, const Color3B& color, Texture2D* texture)": {
			"prefix": "bool MotionStreak::initWithFade(float fade, float minSeg, float stroke, const Color3B& color, Texture2D* texture)",
			"body": [
				"MotionStreak:initWithFade(${1:float fade},${2:float minSeg},${3:float stroke},${4:Color3B& color},${5:Texture2D* texture})"
			],
			"description": "bool MotionStreak::initWithFade(float fade, float minSeg, float stroke, const Color3B& color, Texture2D* texture)"
		},
		 "void SkeletonAnimation::onTrackEntryEvent (int trackIndex, spEventType type, spEvent* event, int loopCount)": {
			"prefix": "void SkeletonAnimation::onTrackEntryEvent (int trackIndex, spEventType type, spEvent* event, int loopCount)",
			"body": [
				"SkeletonAnimation:onTrackEntryEvent (${1:int trackIndex},${2:spEventType type},${3:spEvent* event},${4:int loopCount})"
			],
			"description": "void SkeletonAnimation::onTrackEntryEvent (int trackIndex, spEventType type, spEvent* event, int loopCount)"
		},
		 "DecorativeDisplay *DecorativeDisplay::create()": {
			"prefix": "DecorativeDisplay *DecorativeDisplay::create()",
			"body": [
				"DecorativeDisplay *DecorativeDisplay:create()"
			],
			"description": "DecorativeDisplay *DecorativeDisplay::create()"
		},
		 "bool GLProgram::initWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)": {
			"prefix": "bool GLProgram::initWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)",
			"body": [
				"GLProgram:initWithByteArrays(${1:GLchar* vShaderByteArray},${2:GLchar* fShaderByteArray},${3:std:string& compileTimeDefines})"
			],
			"description": "bool GLProgram::initWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)"
		},
		 "const Color3B& Layout::getBackGroundImageColor()const": {
			"prefix": "const Color3B& Layout::getBackGroundImageColor()const",
			"body": [
				" Color3B& Layout:getBackGroundImageColor()"
			],
			"description": "const Color3B& Layout::getBackGroundImageColor()const"
		},
		 "NodeData* Bundle3D::parseNodesRecursivelyBinary(bool& skeleton, bool singleSprite)": {
			"prefix": "NodeData* Bundle3D::parseNodesRecursivelyBinary(bool& skeleton, bool singleSprite)",
			"body": [
				"Bundle3D:parseNodesRecursivelyBinary(${1:bool& skeleton},${2:bool singleSprite})"
			],
			"description": "NodeData* Bundle3D::parseNodesRecursivelyBinary(bool& skeleton, bool singleSprite)"
		},
		 "void Button::loadTexturePressed(SpriteFrame* pressedSpriteFrame)": {
			"prefix": "void Button::loadTexturePressed(SpriteFrame* pressedSpriteFrame)",
			"body": [
				"Button:loadTexturePressed(${1:SpriteFrame* pressedSpriteFrame})"
			],
			"description": "void Button::loadTexturePressed(SpriteFrame* pressedSpriteFrame)"
		},
		 "void ComAudio::stopAllEffects()": {
			"prefix": "void ComAudio::stopAllEffects()",
			"body": [
				"void ComAudio:stopAllEffects()"
			],
			"description": "void ComAudio::stopAllEffects()"
		},
		 "LoadingBar* LoadingBar::create(const std::string &textureName, float percentage)": {
			"prefix": "LoadingBar* LoadingBar::create(const std::string &textureName, float percentage)",
			"body": [
				"LoadingBar:create(${1:std:string &textureName},${2:float percentage})"
			],
			"description": "LoadingBar* LoadingBar::create(const std::string &textureName, float percentage)"
		},
		 "void Renderer::mapBuffers()": {
			"prefix": "void Renderer::mapBuffers()",
			"body": [
				"void Renderer:mapBuffers()"
			],
			"description": "void Renderer::mapBuffers()"
		},
		 "void OBB::set(const Vec3& center, const Vec3& xAxis, const Vec3& yAxis, const Vec3& zAxis, const Vec3& extents)": {
			"prefix": "void OBB::set(const Vec3& center, const Vec3& xAxis, const Vec3& yAxis, const Vec3& zAxis, const Vec3& extents)",
			"body": [
				"OBB:set(${1:Vec3& center},${2:Vec3& xAxis},${3:Vec3& yAxis},${4:Vec3& zAxis},${5:Vec3& extents})"
			],
			"description": "void OBB::set(const Vec3& center, const Vec3& xAxis, const Vec3& yAxis, const Vec3& zAxis, const Vec3& extents)"
		},
		 "void Physics3DRigidBody::setAngularFactor( float angFac )": {
			"prefix": "void Physics3DRigidBody::setAngularFactor( float angFac )",
			"body": [
				"Physics3DRigidBody:setAngularFactor(${1:float angFac})"
			],
			"description": "void Physics3DRigidBody::setAngularFactor( float angFac )"
		},
		 "const rapidjson::Value &customOptions)": {
			"prefix": "const rapidjson::Value &customOptions)",
			"body": [
				" rapidjson:Value &customOptions)"
			],
			"description": "const rapidjson::Value &customOptions)"
		},
		 "const Color4B& TextField::getTextColor()const": {
			"prefix": "const Color4B& TextField::getTextColor()const",
			"body": [
				" Color4B& TextField:getTextColor()"
			],
			"description": "const Color4B& TextField::getTextColor()const"
		},
		 "Technique* Material::getTechnique() const": {
			"prefix": "Technique* Material::getTechnique() const",
			"body": [
				"Technique* Material:getTechnique() "
			],
			"description": "Technique* Material::getTechnique() const"
		},
		 "bool BatchNode::init()": {
			"prefix": "bool BatchNode::init()",
			"body": [
				"bool BatchNode:init()"
			],
			"description": "bool BatchNode::init()"
		},
		 "ActionFloat* ActionFloat::create(float duration, float from, float to, ActionFloatCallback callback)": {
			"prefix": "ActionFloat* ActionFloat::create(float duration, float from, float to, ActionFloatCallback callback)",
			"body": [
				"ActionFloat:create(${1:float duration},${2:float from},${3:float to},${4:ActionFloatCallback callback})"
			],
			"description": "ActionFloat* ActionFloat::create(float duration, float from, float to, ActionFloatCallback callback)"
		},
		 "Rect Node::getBoundingBox() const": {
			"prefix": "Rect Node::getBoundingBox() const",
			"body": [
				"Rect Node:getBoundingBox() "
			],
			"description": "Rect Node::getBoundingBox() const"
		},
		 "void DisplayFactory::createArmatureDisplay(Bone *bone, DecorativeDisplay *decoDisplay)": {
			"prefix": "void DisplayFactory::createArmatureDisplay(Bone *bone, DecorativeDisplay *decoDisplay)",
			"body": [
				"DisplayFactory:createArmatureDisplay(${1:Bone *bone},${2:DecorativeDisplay *decoDisplay})"
			],
			"description": "void DisplayFactory::createArmatureDisplay(Bone *bone, DecorativeDisplay *decoDisplay)"
		},
		 "void ImageView::adaptRenderers()": {
			"prefix": "void ImageView::adaptRenderers()",
			"body": [
				"void ImageView:adaptRenderers()"
			],
			"description": "void ImageView::adaptRenderers()"
		},
		 "void ProcessBase::stop()": {
			"prefix": "void ProcessBase::stop()",
			"body": [
				"void ProcessBase:stop()"
			],
			"description": "void ProcessBase::stop()"
		},
		 "VertexData* VertexData::create()": {
			"prefix": "VertexData* VertexData::create()",
			"body": [
				"VertexData* VertexData:create()"
			],
			"description": "VertexData* VertexData::create()"
		},
		 "RelativeLayoutParameter::RelativeAlign RelativeLayoutParameter::getAlign() const": {
			"prefix": "RelativeLayoutParameter::RelativeAlign RelativeLayoutParameter::getAlign() const",
			"body": [
				"RelativeLayoutParameter:RelativeAlign RelativeLayoutParameter:getAlign() "
			],
			"description": "RelativeLayoutParameter::RelativeAlign RelativeLayoutParameter::getAlign() const"
		},
		 "void MathUtil::addMatrix(const float* m, float scalar, float* dst)": {
			"prefix": "void MathUtil::addMatrix(const float* m, float scalar, float* dst)",
			"body": [
				"MathUtil:addMatrix(${1:float* m},${2:float scalar},${3:float* dst})"
			],
			"description": "void MathUtil::addMatrix(const float* m, float scalar, float* dst)"
		},
		 "Node* TextAtlas::getVirtualRenderer()": {
			"prefix": "Node* TextAtlas::getVirtualRenderer()",
			"body": [
				"Node* TextAtlas:getVirtualRenderer()"
			],
			"description": "Node* TextAtlas::getVirtualRenderer()"
		},
		 "Repeat* Repeat::reverse() const": {
			"prefix": "Repeat* Repeat::reverse() const",
			"body": [
				"Repeat* Repeat:reverse() "
			],
			"description": "Repeat* Repeat::reverse() const"
		},
		 "bool ZipFile::initWithBuffer(const void *buffer, uLong size)": {
			"prefix": "bool ZipFile::initWithBuffer(const void *buffer, uLong size)",
			"body": [
				"ZipFile:initWithBuffer(${1:void *buffer},${2:uLong size})"
			],
			"description": "bool ZipFile::initWithBuffer(const void *buffer, uLong size)"
		},
		 "EaseBounce* EaseBounceIn::reverse() const": {
			"prefix": "EaseBounce* EaseBounceIn::reverse() const",
			"body": [
				"EaseBounce* EaseBounceIn:reverse() "
			],
			"description": "EaseBounce* EaseBounceIn::reverse() const"
		},
		 "TextVAlignment TextField::getTextVerticalAlignment() const": {
			"prefix": "TextVAlignment TextField::getTextVerticalAlignment() const",
			"body": [
				"TextVAlignment TextField:getTextVerticalAlignment() "
			],
			"description": "TextVAlignment TextField::getTextVerticalAlignment() const"
		},
		 "Texture2D* SkeletonRenderer::getTexture (spSkinnedMeshAttachment* attachment) const": {
			"prefix": "Texture2D* SkeletonRenderer::getTexture (spSkinnedMeshAttachment* attachment) const",
			"body": [
				"SkeletonRenderer:getTexture (${1:spSkinnedMeshAttachment* attachment})"
			],
			"description": "Texture2D* SkeletonRenderer::getTexture (spSkinnedMeshAttachment* attachment) const"
		},
		 "EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce::create()": {
			"prefix": "EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce::create()",
			"body": [
				"EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce:create()"
			],
			"description": "EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce::create()"
		},
		 "Widget* WidgetPropertiesReader0250::createWidget(const rapidjson::Value& data, const char* fullPath, const char* fileName)": {
			"prefix": "Widget* WidgetPropertiesReader0250::createWidget(const rapidjson::Value& data, const char* fullPath, const char* fileName)",
			"body": [
				"WidgetPropertiesReader0250:createWidget(${1:rapidjson:Value& data},${2:char* fullPath},${3:char* fileName})"
			],
			"description": "Widget* WidgetPropertiesReader0250::createWidget(const rapidjson::Value& data, const char* fullPath, const char* fileName)"
		},
		 "float Node::getScale(void) const": {
			"prefix": "float Node::getScale(void) const",
			"body": [
				"Node:getScale(${1:void})"
			],
			"description": "float Node::getScale(void) const"
		},
		 "void EaseElasticIn::update(float time)": {
			"prefix": "void EaseElasticIn::update(float time)",
			"body": [
				"EaseElasticIn:update(${1:float time})"
			],
			"description": "void EaseElasticIn::update(float time)"
		},
		 "const Vec2& SpriteFrame::getOffset() const": {
			"prefix": "const Vec2& SpriteFrame::getOffset() const",
			"body": [
				" Vec2& SpriteFrame:getOffset() "
			],
			"description": "const Vec2& SpriteFrame::getOffset() const"
		},
		 "void EditBox::onExit(void)": {
			"prefix": "void EditBox::onExit(void)",
			"body": [
				"EditBox:onExit(${1:void})"
			],
			"description": "void EditBox::onExit(void)"
		},
		 "const std::string& HttpClient::getCookieFilename()": {
			"prefix": "const std::string& HttpClient::getCookieFilename()",
			"body": [
				" std:string& HttpClient:getCookieFilename()"
			],
			"description": "const std::string& HttpClient::getCookieFilename()"
		},
		 "void Label::removeAllChildrenWithCleanup(bool cleanup)": {
			"prefix": "void Label::removeAllChildrenWithCleanup(bool cleanup)",
			"body": [
				"Label:removeAllChildrenWithCleanup(${1:bool cleanup})"
			],
			"description": "void Label::removeAllChildrenWithCleanup(bool cleanup)"
		},
		 "GLProgramState* GLProgramState::getOrCreateWithShaders(const std::string& vertexShader, const std::string& fragShader, const std::string& compileTimeDefines)": {
			"prefix": "GLProgramState* GLProgramState::getOrCreateWithShaders(const std::string& vertexShader, const std::string& fragShader, const std::string& compileTimeDefines)",
			"body": [
				"GLProgramState:getOrCreateWithShaders(${1:std:string& vertexShader},${2:std:string& fragShader},${3:std:string& compileTimeDefines})"
			],
			"description": "GLProgramState* GLProgramState::getOrCreateWithShaders(const std::string& vertexShader, const std::string& fragShader, const std::string& compileTimeDefines)"
		},
		 "long FileUtils::getFileSize(const std::string &filepath)": {
			"prefix": "long FileUtils::getFileSize(const std::string &filepath)",
			"body": [
				"FileUtils:getFileSize(${1:std:string &filepath})"
			],
			"description": "long FileUtils::getFileSize(const std::string &filepath)"
		},
		 "void DrawNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void DrawNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"DrawNode:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void DrawNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void GLProgram::setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)": {
			"prefix": "void GLProgram::setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)",
			"body": [
				"GLProgram:setUniformLocationWith2f(${1:GLint location},${2:GLfloat f1},${3:GLfloat f2})"
			],
			"description": "void GLProgram::setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)"
		},
		 "void Application::setAnimationInterval(float interval)": {
			"prefix": "void Application::setAnimationInterval(float interval)",
			"body": [
				"Application:setAnimationInterval(${1:float interval})"
			],
			"description": "void Application::setAnimationInterval(float interval)"
		},
		 "Camera* Camera::createPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)": {
			"prefix": "Camera* Camera::createPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)",
			"body": [
				"Camera:createPerspective(${1:float fieldOfView},${2:float aspectRatio},${3:float nearPlane},${4:float farPlane})"
			],
			"description": "Camera* Camera::createPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)"
		},
		 "ParticleGalaxy* ParticleGalaxy::createWithTotalParticles(int numberOfParticles)": {
			"prefix": "ParticleGalaxy* ParticleGalaxy::createWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleGalaxy:createWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "ParticleGalaxy* ParticleGalaxy::createWithTotalParticles(int numberOfParticles)"
		},
		 "ActionTimeline* ActionTimelineCache::createAction(const std::string& filename)": {
			"prefix": "ActionTimeline* ActionTimelineCache::createAction(const std::string& filename)",
			"body": [
				"ActionTimelineCache:createAction(${1:std:string& filename})"
			],
			"description": "ActionTimeline* ActionTimelineCache::createAction(const std::string& filename)"
		},
		 "ParticleMeteor * ParticleMeteor::create()": {
			"prefix": "ParticleMeteor * ParticleMeteor::create()",
			"body": [
				"ParticleMeteor * ParticleMeteor:create()"
			],
			"description": "ParticleMeteor * ParticleMeteor::create()"
		},
		 "void Sprite3D::setMaterial(Material *material, int meshIndex)": {
			"prefix": "void Sprite3D::setMaterial(Material *material, int meshIndex)",
			"body": [
				"Sprite3D:setMaterial(${1:Material *material},${2:int meshIndex})"
			],
			"description": "void Sprite3D::setMaterial(Material *material, int meshIndex)"
		},
		 "void FontAtlas::setAliasTexParameters()": {
			"prefix": "void FontAtlas::setAliasTexParameters()",
			"body": [
				"void FontAtlas:setAliasTexParameters()"
			],
			"description": "void FontAtlas::setAliasTexParameters()"
		},
		 "bool BaseTriggerCondition::init()": {
			"prefix": "bool BaseTriggerCondition::init()",
			"body": [
				"bool BaseTriggerCondition:init()"
			],
			"description": "bool BaseTriggerCondition::init()"
		},
		 "int Widget::getActionTag()const": {
			"prefix": "int Widget::getActionTag()const",
			"body": [
				"int Widget:getActionTag()"
			],
			"description": "int Widget::getActionTag()const"
		},
		 "void Layout::setBackGroundImageCapInsets(const Rect &capInsets)": {
			"prefix": "void Layout::setBackGroundImageCapInsets(const Rect &capInsets)",
			"body": [
				"Layout:setBackGroundImageCapInsets(${1:Rect &capInsets})"
			],
			"description": "void Layout::setBackGroundImageCapInsets(const Rect &capInsets)"
		},
		 "ProgressTo* ProgressTo::reverse() const": {
			"prefix": "ProgressTo* ProgressTo::reverse() const",
			"body": [
				"ProgressTo* ProgressTo:reverse() "
			],
			"description": "ProgressTo* ProgressTo::reverse() const"
		},
		 "const char* DictionaryHelper::getStringValue_json(const rapidjson::Value& root,const char* key, const char *def)": {
			"prefix": "const char* DictionaryHelper::getStringValue_json(const rapidjson::Value& root,const char* key, const char *def)",
			"body": [
				"char* DictionaryHelper:getStringValue_json(${1:rapidjson:Value& root},${2:char* key},${3:char *def})"
			],
			"description": "const char* DictionaryHelper::getStringValue_json(const rapidjson::Value& root,const char* key, const char *def)"
		},
		 "bool ParticleSun::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleSun::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSun:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleSun::initWithTotalParticles(int numberOfParticles)"
		},
		 "bool FileUtils::isAbsolutePath(const std::string& path) const": {
			"prefix": "bool FileUtils::isAbsolutePath(const std::string& path) const",
			"body": [
				"FileUtils:isAbsolutePath(${1:std:string& path})"
			],
			"description": "bool FileUtils::isAbsolutePath(const std::string& path) const"
		},
		 "void __Dictionary::setObject(Ref* pObject, const std::string& key)": {
			"prefix": "void __Dictionary::setObject(Ref* pObject, const std::string& key)",
			"body": [
				"__Dictionary:setObject(${1:Ref* pObject},${2:std:string& key})"
			],
			"description": "void __Dictionary::setObject(Ref* pObject, const std::string& key)"
		},
		 "void GLProgram::setUniformLocationWith1f(GLint location, GLfloat f1)": {
			"prefix": "void GLProgram::setUniformLocationWith1f(GLint location, GLfloat f1)",
			"body": [
				"GLProgram:setUniformLocationWith1f(${1:GLint location},${2:GLfloat f1})"
			],
			"description": "void GLProgram::setUniformLocationWith1f(GLint location, GLfloat f1)"
		},
		 "void ScrollView::removeAllChildren()": {
			"prefix": "void ScrollView::removeAllChildren()",
			"body": [
				"void ScrollView:removeAllChildren()"
			],
			"description": "void ScrollView::removeAllChildren()"
		},
		 "SIOClientImpl* SIOClientImpl::create(const std::string& host, int port)": {
			"prefix": "SIOClientImpl* SIOClientImpl::create(const std::string& host, int port)",
			"body": [
				"SIOClientImpl:create(${1:std:string& host},${2:int port})"
			],
			"description": "SIOClientImpl* SIOClientImpl::create(const std::string& host, int port)"
		},
		 "void Renderer::drawBatchedQuads()": {
			"prefix": "void Renderer::drawBatchedQuads()",
			"body": [
				"void Renderer:drawBatchedQuads()"
			],
			"description": "void Renderer::drawBatchedQuads()"
		},
		 "void SpriteBatchNode::removeAllChildrenWithCleanup(bool doCleanup)": {
			"prefix": "void SpriteBatchNode::removeAllChildrenWithCleanup(bool doCleanup)",
			"body": [
				"SpriteBatchNode:removeAllChildrenWithCleanup(${1:bool doCleanup})"
			],
			"description": "void SpriteBatchNode::removeAllChildrenWithCleanup(bool doCleanup)"
		},
		 "void PhysicsJointRotarySpring::setDamping(float damping)": {
			"prefix": "void PhysicsJointRotarySpring::setDamping(float damping)",
			"body": [
				"PhysicsJointRotarySpring:setDamping(${1:float damping})"
			],
			"description": "void PhysicsJointRotarySpring::setDamping(float damping)"
		},
		 "bool ShuffleTiles::initWithDuration(float duration, const Size& gridSize, unsigned int seed)": {
			"prefix": "bool ShuffleTiles::initWithDuration(float duration, const Size& gridSize, unsigned int seed)",
			"body": [
				"ShuffleTiles:initWithDuration(${1:float duration},${2:Size& gridSize},${3:unsigned int seed})"
			],
			"description": "bool ShuffleTiles::initWithDuration(float duration, const Size& gridSize, unsigned int seed)"
		},
		 "Vec3 SpotLight::getDirectionInWorld() const": {
			"prefix": "Vec3 SpotLight::getDirectionInWorld() const",
			"body": [
				"Vec3 SpotLight:getDirectionInWorld() "
			],
			"description": "Vec3 SpotLight::getDirectionInWorld() const"
		},
		 "void UICCTextField::deleteBackward()": {
			"prefix": "void UICCTextField::deleteBackward()",
			"body": [
				"void UICCTextField:deleteBackward()"
			],
			"description": "void UICCTextField::deleteBackward()"
		},
		 "void FileUtils::purgeCachedEntries()": {
			"prefix": "void FileUtils::purgeCachedEntries()",
			"body": [
				"void FileUtils:purgeCachedEntries()"
			],
			"description": "void FileUtils::purgeCachedEntries()"
		},
		 "void ProtectedNode::removeAllProtectedChildren()": {
			"prefix": "void ProtectedNode::removeAllProtectedChildren()",
			"body": [
				"void ProtectedNode:removeAllProtectedChildren()"
			],
			"description": "void ProtectedNode::removeAllProtectedChildren()"
		},
		 "float PhysicsShapeCircle::calculateMoment(float mass, float radius, const Vec2& offset)": {
			"prefix": "float PhysicsShapeCircle::calculateMoment(float mass, float radius, const Vec2& offset)",
			"body": [
				"PhysicsShapeCircle:calculateMoment(${1:float mass},${2:float radius},${3:Vec2& offset})"
			],
			"description": "float PhysicsShapeCircle::calculateMoment(float mass, float radius, const Vec2& offset)"
		},
		 "void EditBoxImplCommon::setPlaceHolder(const char* pText)": {
			"prefix": "void EditBoxImplCommon::setPlaceHolder(const char* pText)",
			"body": [
				"EditBoxImplCommon:setPlaceHolder(${1:char* pText})"
			],
			"description": "void EditBoxImplCommon::setPlaceHolder(const char* pText)"
		},
		 "Vec2 Node::convertTouchToNodeSpace(Touch *touch) const": {
			"prefix": "Vec2 Node::convertTouchToNodeSpace(Touch *touch) const",
			"body": [
				"Node:convertTouchToNodeSpace(${1:Touch *touch})"
			],
			"description": "Vec2 Node::convertTouchToNodeSpace(Touch *touch) const"
		},
		 "bool Vec2::fuzzyEquals(const Vec2& b, float var) const": {
			"prefix": "bool Vec2::fuzzyEquals(const Vec2& b, float var) const",
			"body": [
				"Vec2:fuzzyEquals(${1:Vec2& b},${2:float var})"
			],
			"description": "bool Vec2::fuzzyEquals(const Vec2& b, float var) const"
		},
		 "void EditBoxImplWin::setFont(const char* pFontName, int fontSize)": {
			"prefix": "void EditBoxImplWin::setFont(const char* pFontName, int fontSize)",
			"body": [
				"EditBoxImplWin:setFont(${1:char* pFontName},${2:int fontSize})"
			],
			"description": "void EditBoxImplWin::setFont(const char* pFontName, int fontSize)"
		},
		 "float Button::getZoomScale()const": {
			"prefix": "float Button::getZoomScale()const",
			"body": [
				"float Button:getZoomScale()"
			],
			"description": "float Button::getZoomScale()const"
		},
		 "PhysicsBody* PhysicsBody::createEdgeChain(const Vec2* points, int count, const PhysicsMaterial& material, float border/* = 1*/)": {
			"prefix": "PhysicsBody* PhysicsBody::createEdgeChain(const Vec2* points, int count, const PhysicsMaterial& material, float border/* = 1*/)",
			"body": [
				"PhysicsBody:createEdgeChain(${1:Vec2* points},${2:int count},${3:PhysicsMaterial& material},${4:float border/* = 1*/})"
			],
			"description": "PhysicsBody* PhysicsBody::createEdgeChain(const Vec2* points, int count, const PhysicsMaterial& material, float border/* = 1*/)"
		},
		 "b2Fixture *Armature::getShapeList()": {
			"prefix": "b2Fixture *Armature::getShapeList()",
			"body": [
				"b2Fixture *Armature:getShapeList()"
			],
			"description": "b2Fixture *Armature::getShapeList()"
		},
		 "void AudioCache::addLoadCallback(const std::function<void(bool)>& callback)": {
			"prefix": "void AudioCache::addLoadCallback(const std::function<void(bool)>& callback)",
			"body": [
				"AudioCache:addLoadCallback(${1:std:function<void(bool})"
			],
			"description": "void AudioCache::addLoadCallback(const std::function<void(bool)>& callback)"
		},
		 "GLProgram * Node::getGLProgram() const": {
			"prefix": "GLProgram * Node::getGLProgram() const",
			"body": [
				"GLProgram * Node:getGLProgram() "
			],
			"description": "GLProgram * Node::getGLProgram() const"
		},
		 "void Downloader::groupBatchDownload(const DownloadUnits& units)": {
			"prefix": "void Downloader::groupBatchDownload(const DownloadUnits& units)",
			"body": [
				"Downloader:groupBatchDownload(${1:DownloadUnits& units})"
			],
			"description": "void Downloader::groupBatchDownload(const DownloadUnits& units)"
		},
		 "EaseQuarticActionOut* EaseQuarticActionOut::clone() const": {
			"prefix": "EaseQuarticActionOut* EaseQuarticActionOut::clone() const",
			"body": [
				"EaseQuarticActionOut* EaseQuarticActionOut:clone() "
			],
			"description": "EaseQuarticActionOut* EaseQuarticActionOut::clone() const"
		},
		 "bool Sprite3D::loadFromCache(const std::string& path)": {
			"prefix": "bool Sprite3D::loadFromCache(const std::string& path)",
			"body": [
				"Sprite3D:loadFromCache(${1:std:string& path})"
			],
			"description": "bool Sprite3D::loadFromCache(const std::string& path)"
		},
		 "void Sprite::updateColor(void)": {
			"prefix": "void Sprite::updateColor(void)",
			"body": [
				"Sprite:updateColor(${1:void})"
			],
			"description": "void Sprite::updateColor(void)"
		},
		 "void LabelTTFLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)": {
			"prefix": "void LabelTTFLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)",
			"body": [
				"LabelTTFLoader:onHandlePropTypeColor3(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Color3B pColor3B},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelTTFLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)"
		},
		 "bool Rect::intersectsRect(const Rect& rect) const": {
			"prefix": "bool Rect::intersectsRect(const Rect& rect) const",
			"body": [
				"Rect:intersectsRect(${1:Rect& rect})"
			],
			"description": "bool Rect::intersectsRect(const Rect& rect) const"
		},
		 "void Text::disableEffect()": {
			"prefix": "void Text::disableEffect()",
			"body": [
				"void Text:disableEffect()"
			],
			"description": "void Text::disableEffect()"
		},
		 "const BlendFunc& ParticleBatchNode::getBlendFunc() const": {
			"prefix": "const BlendFunc& ParticleBatchNode::getBlendFunc() const",
			"body": [
				" BlendFunc& ParticleBatchNode:getBlendFunc() "
			],
			"description": "const BlendFunc& ParticleBatchNode::getBlendFunc() const"
		},
		 "bool GLViewImpl::isOpenGLReady()": {
			"prefix": "bool GLViewImpl::isOpenGLReady()",
			"body": [
				"bool GLViewImpl:isOpenGLReady()"
			],
			"description": "bool GLViewImpl::isOpenGLReady()"
		},
		 "void Pass::bind(const Mat4& modelView, bool bindAttributes)": {
			"prefix": "void Pass::bind(const Mat4& modelView, bool bindAttributes)",
			"body": [
				"Pass:bind(${1:Mat4& modelView},${2:bool bindAttributes})"
			],
			"description": "void Pass::bind(const Mat4& modelView, bool bindAttributes)"
		},
		 "Ref* __Dictionary::objectForKey(intptr_t key)": {
			"prefix": "Ref* __Dictionary::objectForKey(intptr_t key)",
			"body": [
				"__Dictionary:objectForKey(${1:intptr_t key})"
			],
			"description": "Ref* __Dictionary::objectForKey(intptr_t key)"
		},
		 "void WidgetPropertiesReader0250::setPropsForSliderFromJsonDictionary(Widget*widget,const rapidjson::Value& options)": {
			"prefix": "void WidgetPropertiesReader0250::setPropsForSliderFromJsonDictionary(Widget*widget,const rapidjson::Value& options)",
			"body": [
				"WidgetPropertiesReader0250:setPropsForSliderFromJsonDictionary(${1:Widget*widget},${2:rapidjson:Value& options})"
			],
			"description": "void WidgetPropertiesReader0250::setPropsForSliderFromJsonDictionary(Widget*widget,const rapidjson::Value& options)"
		},
		 "void TimerTargetCallback::cancel()": {
			"prefix": "void TimerTargetCallback::cancel()",
			"body": [
				"void TimerTargetCallback:cancel()"
			],
			"description": "void TimerTargetCallback::cancel()"
		},
		 "ScaleTo* ScaleTo::create(float duration, float sx, float sy, float sz)": {
			"prefix": "ScaleTo* ScaleTo::create(float duration, float sx, float sy, float sz)",
			"body": [
				"ScaleTo:create(${1:float duration},${2:float sx},${3:float sy},${4:float sz})"
			],
			"description": "ScaleTo* ScaleTo::create(float duration, float sx, float sy, float sz)"
		},
		 "void Rect::merge(const Rect& rect)": {
			"prefix": "void Rect::merge(const Rect& rect)",
			"body": [
				"Rect:merge(${1:Rect& rect})"
			],
			"description": "void Rect::merge(const Rect& rect)"
		},
		 "const char* TriggerMng::triggerMngVersion()": {
			"prefix": "const char* TriggerMng::triggerMngVersion()",
			"body": [
				" char* TriggerMng:triggerMngVersion()"
			],
			"description": "const char* TriggerMng::triggerMngVersion()"
		},
		 "Grid3D* Grid3D::create(const Size& gridSize, Texture2D *texture, bool flipped)": {
			"prefix": "Grid3D* Grid3D::create(const Size& gridSize, Texture2D *texture, bool flipped)",
			"body": [
				"Grid3D:create(${1:Size& gridSize},${2:Texture2D *texture},${3:bool flipped})"
			],
			"description": "Grid3D* Grid3D::create(const Size& gridSize, Texture2D *texture, bool flipped)"
		},
		 "Camera* Camera::create()": {
			"prefix": "Camera* Camera::create()",
			"body": [
				"Camera* Camera:create()"
			],
			"description": "Camera* Camera::create()"
		},
		 "void WebViewImpl::stopLoading()": {
			"prefix": "void WebViewImpl::stopLoading()",
			"body": [
				"void WebViewImpl:stopLoading()"
			],
			"description": "void WebViewImpl::stopLoading()"
		},
		 "GLProgramState* Mesh::getGLProgramState() const": {
			"prefix": "GLProgramState* Mesh::getGLProgramState() const",
			"body": [
				"GLProgramState* Mesh:getGLProgramState() "
			],
			"description": "GLProgramState* Mesh::getGLProgramState() const"
		},
		 "GridBase* GridBase::create(const Size& gridSize, Texture2D *texture, bool flipped)": {
			"prefix": "GridBase* GridBase::create(const Size& gridSize, Texture2D *texture, bool flipped)",
			"body": [
				"GridBase:create(${1:Size& gridSize},${2:Texture2D *texture},${3:bool flipped})"
			],
			"description": "GridBase* GridBase::create(const Size& gridSize, Texture2D *texture, bool flipped)"
		},
		 "void SpriteLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)": {
			"prefix": "void SpriteLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)",
			"body": [
				"SpriteLoader:onHandlePropTypeByte(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:unsigned char pByte},${5:CCBReader * ccbReader})"
			],
			"description": "void SpriteLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)"
		},
		 "void RotateTo::startWithTarget(Node *target)": {
			"prefix": "void RotateTo::startWithTarget(Node *target)",
			"body": [
				"RotateTo:startWithTarget(${1:Node *target})"
			],
			"description": "void RotateTo::startWithTarget(Node *target)"
		},
		 "FontAtlas* FontAtlasCache::getFontAtlasCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)": {
			"prefix": "FontAtlas* FontAtlasCache::getFontAtlasCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)",
			"body": [
				"FontAtlasCache:getFontAtlasCharMap(${1:Texture2D* texture},${2:int itemWidth},${3:int itemHeight},${4:int startCharMap})"
			],
			"description": "FontAtlas* FontAtlasCache::getFontAtlasCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)"
		},
		 "void Frame::emitEvent()": {
			"prefix": "void Frame::emitEvent()",
			"body": [
				"void Frame:emitEvent()"
			],
			"description": "void Frame::emitEvent()"
		},
		 "void VolatileTextureMgr::setHasMipmaps(Texture2D *t, bool hasMipmaps)": {
			"prefix": "void VolatileTextureMgr::setHasMipmaps(Texture2D *t, bool hasMipmaps)",
			"body": [
				"VolatileTextureMgr:setHasMipmaps(${1:Texture2D *t},${2:bool hasMipmaps})"
			],
			"description": "void VolatileTextureMgr::setHasMipmaps(Texture2D *t, bool hasMipmaps)"
		},
		 "ParticleSystemQuad * ParticleSystemQuad::create(const std::string& filename)": {
			"prefix": "ParticleSystemQuad * ParticleSystemQuad::create(const std::string& filename)",
			"body": [
				"* ParticleSystemQuad:create(${1:std:string& filename})"
			],
			"description": "ParticleSystemQuad * ParticleSystemQuad::create(const std::string& filename)"
		},
		 "void ActionTween::update(float dt)": {
			"prefix": "void ActionTween::update(float dt)",
			"body": [
				"ActionTween:update(${1:float dt})"
			],
			"description": "void ActionTween::update(float dt)"
		},
		 "void EventListenerPhysicsContact::onEvent(EventCustom* event)": {
			"prefix": "void EventListenerPhysicsContact::onEvent(EventCustom* event)",
			"body": [
				"EventListenerPhysicsContact:onEvent(${1:EventCustom* event})"
			],
			"description": "void EventListenerPhysicsContact::onEvent(EventCustom* event)"
		},
		 "NavMeshObstacle* NavMeshObstacle::create(float radius, float height)": {
			"prefix": "NavMeshObstacle* NavMeshObstacle::create(float radius, float height)",
			"body": [
				"NavMeshObstacle:create(${1:float radius},${2:float height})"
			],
			"description": "NavMeshObstacle* NavMeshObstacle::create(float radius, float height)"
		},
		 "bool FrameBuffer::initWithGLView(GLView* view)": {
			"prefix": "bool FrameBuffer::initWithGLView(GLView* view)",
			"body": [
				"FrameBuffer:initWithGLView(${1:GLView* view})"
			],
			"description": "bool FrameBuffer::initWithGLView(GLView* view)"
		},
		 "void Console::commandDirector(int fd, const std::string& args)": {
			"prefix": "void Console::commandDirector(int fd, const std::string& args)",
			"body": [
				"Console:commandDirector(${1:int fd},${2:std:string& args})"
			],
			"description": "void Console::commandDirector(int fd, const std::string& args)"
		},
		 "void Slider::onTouchEnded(Touch *touch, Event *unusedEvent)": {
			"prefix": "void Slider::onTouchEnded(Touch *touch, Event *unusedEvent)",
			"body": [
				"Slider:onTouchEnded(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void Slider::onTouchEnded(Touch *touch, Event *unusedEvent)"
		},
		 "void Terrain::setSkirtHeightRatio(float ratio)": {
			"prefix": "void Terrain::setSkirtHeightRatio(float ratio)",
			"body": [
				"Terrain:setSkirtHeightRatio(${1:float ratio})"
			],
			"description": "void Terrain::setSkirtHeightRatio(float ratio)"
		},
		 "void Vec2::normalize()": {
			"prefix": "void Vec2::normalize()",
			"body": [
				"void Vec2:normalize()"
			],
			"description": "void Vec2::normalize()"
		},
		 "float PhysicsJointMotor::getRate() const": {
			"prefix": "float PhysicsJointMotor::getRate() const",
			"body": [
				"float PhysicsJointMotor:getRate() "
			],
			"description": "float PhysicsJointMotor::getRate() const"
		},
		 "bool ComAudio::isLoop()": {
			"prefix": "bool ComAudio::isLoop()",
			"body": [
				"bool ComAudio:isLoop()"
			],
			"description": "bool ComAudio::isLoop()"
		},
		 "int CCBReader::readInt(bool pSigned)": {
			"prefix": "int CCBReader::readInt(bool pSigned)",
			"body": [
				"CCBReader:readInt(${1:bool pSigned})"
			],
			"description": "int CCBReader::readInt(bool pSigned)"
		},
		 "void Scheduler::schedule(const ccSchedulerFunc& callback, void *target, float interval, unsigned int repeat, float delay, bool paused, const std::string& key)": {
			"prefix": "void Scheduler::schedule(const ccSchedulerFunc& callback, void *target, float interval, unsigned int repeat, float delay, bool paused, const std::string& key)",
			"body": [
				"Scheduler:schedule(${1:ccSchedulerFunc& callback},${2:void *target},${3:float interval},${4:unsigned int repeat},${5:float delay},${6:bool paused},${7:std:string& key})"
			],
			"description": "void Scheduler::schedule(const ccSchedulerFunc& callback, void *target, float interval, unsigned int repeat, float delay, bool paused, const std::string& key)"
		},
		 "bool FileUtils::renameFile(const std::string &oldfullpath, const std::string &newfullpath)": {
			"prefix": "bool FileUtils::renameFile(const std::string &oldfullpath, const std::string &newfullpath)",
			"body": [
				"FileUtils:renameFile(${1:std:string &oldfullpath},${2:std:string &newfullpath})"
			],
			"description": "bool FileUtils::renameFile(const std::string &oldfullpath, const std::string &newfullpath)"
		},
		 "void Director::setNotificationNode(Node *node)": {
			"prefix": "void Director::setNotificationNode(Node *node)",
			"body": [
				"Director:setNotificationNode(${1:Node *node})"
			],
			"description": "void Director::setNotificationNode(Node *node)"
		},
		 "FadeOutDownTiles* FadeOutDownTiles::create(float duration, const Size& gridSize)": {
			"prefix": "FadeOutDownTiles* FadeOutDownTiles::create(float duration, const Size& gridSize)",
			"body": [
				"FadeOutDownTiles:create(${1:float duration},${2:Size& gridSize})"
			],
			"description": "FadeOutDownTiles* FadeOutDownTiles::create(float duration, const Size& gridSize)"
		},
		 "void GLView::setViewPortInPoints(float x , float y , float w , float h)": {
			"prefix": "void GLView::setViewPortInPoints(float x , float y , float w , float h)",
			"body": [
				"GLView:setViewPortInPoints(${1:float x},${2:float y},${3:float w},${4:float h})"
			],
			"description": "void GLView::setViewPortInPoints(float x , float y , float w , float h)"
		},
		 "void EditBoxImplCommon::setPlaceholderFontColor(const Color4B &color)": {
			"prefix": "void EditBoxImplCommon::setPlaceholderFontColor(const Color4B &color)",
			"body": [
				"EditBoxImplCommon:setPlaceholderFontColor(${1:Color4B &color})"
			],
			"description": "void EditBoxImplCommon::setPlaceholderFontColor(const Color4B &color)"
		},
		 "void RichText::handleCustomRenderer(cocos2d::Node *renderer)": {
			"prefix": "void RichText::handleCustomRenderer(cocos2d::Node *renderer)",
			"body": [
				"RichText:handleCustomRenderer(${1:cocos2d:Node *renderer})"
			],
			"description": "void RichText::handleCustomRenderer(cocos2d::Node *renderer)"
		},
		 "void PhysicsJointRatchet::setAngle(float angle)": {
			"prefix": "void PhysicsJointRatchet::setAngle(float angle)",
			"body": [
				"PhysicsJointRatchet:setAngle(${1:float angle})"
			],
			"description": "void PhysicsJointRatchet::setAngle(float angle)"
		},
		 "float Physics3DSliderConstraint::getSoftnessOrthoAng() const": {
			"prefix": "float Physics3DSliderConstraint::getSoftnessOrthoAng() const",
			"body": [
				"float Physics3DSliderConstraint:getSoftnessOrthoAng() "
			],
			"description": "float Physics3DSliderConstraint::getSoftnessOrthoAng() const"
		},
		 "BoneData *Bone::getBoneData() const": {
			"prefix": "BoneData *Bone::getBoneData() const",
			"body": [
				"BoneData *Bone:getBoneData() "
			],
			"description": "BoneData *Bone::getBoneData() const"
		},
		 "void Layer::onTouchMoved(Touch *touch, Event *event)": {
			"prefix": "void Layer::onTouchMoved(Touch *touch, Event *event)",
			"body": [
				"Layer:onTouchMoved(${1:Touch *touch},${2:Event *event})"
			],
			"description": "void Layer::onTouchMoved(Touch *touch, Event *event)"
		},
		 "MoveTo* MoveTo::reverse() const": {
			"prefix": "MoveTo* MoveTo::reverse() const",
			"body": [
				"MoveTo* MoveTo:reverse() "
			],
			"description": "MoveTo* MoveTo::reverse() const"
		},
		 "SpriteFrame* SpriteFrame::createWithTexture(Texture2D* texture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)": {
			"prefix": "SpriteFrame* SpriteFrame::createWithTexture(Texture2D* texture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)",
			"body": [
				"SpriteFrame:createWithTexture(${1:Texture2D* texture},${2:Rect& rect},${3:bool rotated},${4:Vec2& offset},${5:Size& originalSize})"
			],
			"description": "SpriteFrame* SpriteFrame::createWithTexture(Texture2D* texture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)"
		},
		 "void Physics3DDebugDrawer::init()": {
			"prefix": "void Physics3DDebugDrawer::init()",
			"body": [
				"void Physics3DDebugDrawer:init()"
			],
			"description": "void Physics3DDebugDrawer::init()"
		},
		 "void Node::setPositionX(float x)": {
			"prefix": "void Node::setPositionX(float x)",
			"body": [
				"Node:setPositionX(${1:float x})"
			],
			"description": "void Node::setPositionX(float x)"
		},
		 "void MeshCommand::setMatrixPaletteSize(int size)": {
			"prefix": "void MeshCommand::setMatrixPaletteSize(int size)",
			"body": [
				"MeshCommand:setMatrixPaletteSize(${1:int size})"
			],
			"description": "void MeshCommand::setMatrixPaletteSize(int size)"
		},
		 "Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner, const Size &parentSize)": {
			"prefix": "Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner, const Size &parentSize)",
			"body": [
				"CCBReader:createSceneWithNodeGraphFromFile(${1:char *pCCBFileName},${2:Ref *pOwner},${3:Size &parentSize})"
			],
			"description": "Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner, const Size &parentSize)"
		},
		 "void SkeletonAnimation::clearTracks ()": {
			"prefix": "void SkeletonAnimation::clearTracks ()",
			"body": [
				"void SkeletonAnimation:clearTracks ()"
			],
			"description": "void SkeletonAnimation::clearTracks ()"
		},
		 "void CCBRotateTo::update(float time)": {
			"prefix": "void CCBRotateTo::update(float time)",
			"body": [
				"CCBRotateTo:update(${1:float time})"
			],
			"description": "void CCBRotateTo::update(float time)"
		},
		 "void BoneNode::displaySkin(SkinNode* skin, bool hideOthers)": {
			"prefix": "void BoneNode::displaySkin(SkinNode* skin, bool hideOthers)",
			"body": [
				"BoneNode:displaySkin(${1:SkinNode* skin},${2:bool hideOthers})"
			],
			"description": "void BoneNode::displaySkin(SkinNode* skin, bool hideOthers)"
		},
		 "std::string GLProgram::getDescription() const": {
			"prefix": "std::string GLProgram::getDescription() const",
			"body": [
				"std:string GLProgram:getDescription() "
			],
			"description": "std::string GLProgram::getDescription() const"
		},
		 "void DataVisitor::visit(const __Set *value)": {
			"prefix": "void DataVisitor::visit(const __Set *value)",
			"body": [
				"DataVisitor:visit(${1:__Set *value})"
			],
			"description": "void DataVisitor::visit(const __Set *value)"
		},
		 "void ParticleSystemQuad::initTexCoordsWithRect(const Rect& pointRect)": {
			"prefix": "void ParticleSystemQuad::initTexCoordsWithRect(const Rect& pointRect)",
			"body": [
				"ParticleSystemQuad:initTexCoordsWithRect(${1:Rect& pointRect})"
			],
			"description": "void ParticleSystemQuad::initTexCoordsWithRect(const Rect& pointRect)"
		},
		 "const FontDefinition& LabelTTF::getTextDefinition()": {
			"prefix": "const FontDefinition& LabelTTF::getTextDefinition()",
			"body": [
				" FontDefinition& LabelTTF:getTextDefinition()"
			],
			"description": "const FontDefinition& LabelTTF::getTextDefinition()"
		},
		 "void ArmatureAnimation::updateMovementList()": {
			"prefix": "void ArmatureAnimation::updateMovementList()",
			"body": [
				"void ArmatureAnimation:updateMovementList()"
			],
			"description": "void ArmatureAnimation::updateMovementList()"
		},
		 "const std::string& CCBReader::getCCBRootPath() const": {
			"prefix": "const std::string& CCBReader::getCCBRootPath() const",
			"body": [
				" std:string& CCBReader:getCCBRootPath() "
			],
			"description": "const std::string& CCBReader::getCCBRootPath() const"
		},
		 "void OBB::getCorners(Vec3* verts) const": {
			"prefix": "void OBB::getCorners(Vec3* verts) const",
			"body": [
				"OBB:getCorners(${1:Vec3* verts})"
			],
			"description": "void OBB::getCorners(Vec3* verts) const"
		},
		 "const Quaternion& Quaternion::identity()": {
			"prefix": "const Quaternion& Quaternion::identity()",
			"body": [
				" Quaternion& Quaternion:identity()"
			],
			"description": "const Quaternion& Quaternion::identity()"
		},
		 "DisplayData *DataReaderHelper::decodeBoneDisplay(const rapidjson::Value& json, DataInfo *dataInfo)": {
			"prefix": "DisplayData *DataReaderHelper::decodeBoneDisplay(const rapidjson::Value& json, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeBoneDisplay(${1:rapidjson:Value& json},${2:DataInfo *dataInfo})"
			],
			"description": "DisplayData *DataReaderHelper::decodeBoneDisplay(const rapidjson::Value& json, DataInfo *dataInfo)"
		},
		 "ActionTimeline* ActionTimelineCache::createActionFromJson(const std::string& fileName)": {
			"prefix": "ActionTimeline* ActionTimelineCache::createActionFromJson(const std::string& fileName)",
			"body": [
				"ActionTimelineCache:createActionFromJson(${1:std:string& fileName})"
			],
			"description": "ActionTimeline* ActionTimelineCache::createActionFromJson(const std::string& fileName)"
		},
		 "bool ActionNode::isActionDoneOnce()": {
			"prefix": "bool ActionNode::isActionDoneOnce()",
			"body": [
				"bool ActionNode:isActionDoneOnce()"
			],
			"description": "bool ActionNode::isActionDoneOnce()"
		},
		 "LayerGradient* LayerGradient::create(const Color4B& start, const Color4B& end, const Vec2& v)": {
			"prefix": "LayerGradient* LayerGradient::create(const Color4B& start, const Color4B& end, const Vec2& v)",
			"body": [
				"LayerGradient:create(${1:Color4B& start},${2:Color4B& end},${3:Vec2& v})"
			],
			"description": "LayerGradient* LayerGradient::create(const Color4B& start, const Color4B& end, const Vec2& v)"
		},
		 "void SkeletonRenderer::setDebugBonesEnabled (bool enabled)": {
			"prefix": "void SkeletonRenderer::setDebugBonesEnabled (bool enabled)",
			"body": [
				"SkeletonRenderer:setDebugBonesEnabled (${1:bool enabled})"
			],
			"description": "void SkeletonRenderer::setDebugBonesEnabled (bool enabled)"
		},
		 "void DisplayFactory::addArmatureDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)": {
			"prefix": "void DisplayFactory::addArmatureDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)",
			"body": [
				"DisplayFactory:addArmatureDisplay(${1:Bone *bone},${2:DecorativeDisplay *decoDisplay},${3:DisplayData *displayData})"
			],
			"description": "void DisplayFactory::addArmatureDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)"
		},
		 "void EaseQuadraticActionIn::update(float time)": {
			"prefix": "void EaseQuadraticActionIn::update(float time)",
			"body": [
				"EaseQuadraticActionIn:update(${1:float time})"
			],
			"description": "void EaseQuadraticActionIn::update(float time)"
		},
		 "void MovementData::addMovementBoneData(MovementBoneData *movBoneData)": {
			"prefix": "void MovementData::addMovementBoneData(MovementBoneData *movBoneData)",
			"body": [
				"MovementData:addMovementBoneData(${1:MovementBoneData *movBoneData})"
			],
			"description": "void MovementData::addMovementBoneData(MovementBoneData *movBoneData)"
		},
		 "void MathUtil::addMatrix(const float* m1, const float* m2, float* dst)": {
			"prefix": "void MathUtil::addMatrix(const float* m1, const float* m2, float* dst)",
			"body": [
				"MathUtil:addMatrix(${1:float* m1},${2:float* m2},${3:float* dst})"
			],
			"description": "void MathUtil::addMatrix(const float* m1, const float* m2, float* dst)"
		},
		 "AffineTransform Node::getNodeToWorldAffineTransform() const": {
			"prefix": "AffineTransform Node::getNodeToWorldAffineTransform() const",
			"body": [
				"AffineTransform Node:getNodeToWorldAffineTransform() "
			],
			"description": "AffineTransform Node::getNodeToWorldAffineTransform() const"
		},
		 "Animation* Animation::createWithSpriteFrames(const Vector<SpriteFrame*>& frames, float delay/* = 0.0f*/, unsigned int loops/* = 1*/)": {
			"prefix": "Animation* Animation::createWithSpriteFrames(const Vector<SpriteFrame*>& frames, float delay/* = 0.0f*/, unsigned int loops/* = 1*/)",
			"body": [
				"Animation:createWithSpriteFrames(${1:Vector<SpriteFrame*>& frames},${2:float delay/* = 0.0f*/},${3:unsigned int loops/* = 1*/})"
			],
			"description": "Animation* Animation::createWithSpriteFrames(const Vector<SpriteFrame*>& frames, float delay/* = 0.0f*/, unsigned int loops/* = 1*/)"
		},
		 "bool ScrollView::isBounceEnabled() const": {
			"prefix": "bool ScrollView::isBounceEnabled() const",
			"body": [
				"bool ScrollView:isBounceEnabled() "
			],
			"description": "bool ScrollView::isBounceEnabled() const"
		},
		 "uint32_t Pass::getHash() const": {
			"prefix": "uint32_t Pass::getHash() const",
			"body": [
				"uint32_t Pass:getHash() "
			],
			"description": "uint32_t Pass::getHash() const"
		},
		 "bool Physics3DShape::initCylinder(float radius, float height)": {
			"prefix": "bool Physics3DShape::initCylinder(float radius, float height)",
			"body": [
				"Physics3DShape:initCylinder(${1:float radius},${2:float height})"
			],
			"description": "bool Physics3DShape::initCylinder(float radius, float height)"
		},
		 "ToggleVisibility * ToggleVisibility::clone() const": {
			"prefix": "ToggleVisibility * ToggleVisibility::clone() const",
			"body": [
				"ToggleVisibility * ToggleVisibility:clone() "
			],
			"description": "ToggleVisibility * ToggleVisibility::clone() const"
		},
		 "void PhysicsShape::setMaterial(const PhysicsMaterial& material)": {
			"prefix": "void PhysicsShape::setMaterial(const PhysicsMaterial& material)",
			"body": [
				"PhysicsShape:setMaterial(${1:PhysicsMaterial& material})"
			],
			"description": "void PhysicsShape::setMaterial(const PhysicsMaterial& material)"
		},
		 "__Array* __Array::create()": {
			"prefix": "__Array* __Array::create()",
			"body": [
				"__Array* __Array:create()"
			],
			"description": "__Array* __Array::create()"
		},
		 "void DataReaderHelper::setPositionReadScale(float scale)": {
			"prefix": "void DataReaderHelper::setPositionReadScale(float scale)",
			"body": [
				"DataReaderHelper:setPositionReadScale(${1:float scale})"
			],
			"description": "void DataReaderHelper::setPositionReadScale(float scale)"
		},
		 "ToggleVisibility * ToggleVisibility::reverse() const": {
			"prefix": "ToggleVisibility * ToggleVisibility::reverse() const",
			"body": [
				"ToggleVisibility * ToggleVisibility:reverse() "
			],
			"description": "ToggleVisibility * ToggleVisibility::reverse() const"
		},
		 "void Vec4::set(float xx, float yy, float zz, float ww)": {
			"prefix": "void Vec4::set(float xx, float yy, float zz, float ww)",
			"body": [
				"Vec4:set(${1:float xx},${2:float yy},${3:float zz},${4:float ww})"
			],
			"description": "void Vec4::set(float xx, float yy, float zz, float ww)"
		},
		 "bool CCBReader::endsWith(const char* pString, const char* pEnding)": {
			"prefix": "bool CCBReader::endsWith(const char* pString, const char* pEnding)",
			"body": [
				"CCBReader:endsWith(${1:char* pString},${2:char* pEnding})"
			],
			"description": "bool CCBReader::endsWith(const char* pString, const char* pEnding)"
		},
		 "GLProgramState* GLProgramState::create(GLProgram *glprogram)": {
			"prefix": "GLProgramState* GLProgramState::create(GLProgram *glprogram)",
			"body": [
				"GLProgramState:create(${1:GLProgram *glprogram})"
			],
			"description": "GLProgramState* GLProgramState::create(GLProgram *glprogram)"
		},
		 "void PageView::scrollToPage(ssize_t idx)": {
			"prefix": "void PageView::scrollToPage(ssize_t idx)",
			"body": [
				"PageView:scrollToPage(${1:ssize_t idx})"
			],
			"description": "void PageView::scrollToPage(ssize_t idx)"
		},
		 "cocos2d::Rect SkeletonNode::getBoundingBox() const": {
			"prefix": "cocos2d::Rect SkeletonNode::getBoundingBox() const",
			"body": [
				"cocos2d:Rect SkeletonNode:getBoundingBox() "
			],
			"description": "cocos2d::Rect SkeletonNode::getBoundingBox() const"
		},
		 "cocos2d::Vec3	Physics3D6DofConstraint::getLinearUpperLimit() const": {
			"prefix": "cocos2d::Vec3	Physics3D6DofConstraint::getLinearUpperLimit() const",
			"body": [
				"cocos2d:Vec3	Physics3D6DofConstraint:getLinearUpperLimit() "
			],
			"description": "cocos2d::Vec3	Physics3D6DofConstraint::getLinearUpperLimit() const"
		},
		 "Ref* CCBKeyframe::getObject() const": {
			"prefix": "Ref* CCBKeyframe::getObject() const",
			"body": [
				"Ref* CCBKeyframe:getObject() "
			],
			"description": "Ref* CCBKeyframe::getObject() const"
		},
		 "void Scene::addChild(Node* child, int zOrder, int tag)": {
			"prefix": "void Scene::addChild(Node* child, int zOrder, int tag)",
			"body": [
				"Scene:addChild(${1:Node* child},${2:int zOrder},${3:int tag})"
			],
			"description": "void Scene::addChild(Node* child, int zOrder, int tag)"
		},
		 "std::string SocketIOPacket::toString()const": {
			"prefix": "std::string SocketIOPacket::toString()const",
			"body": [
				"std:string SocketIOPacket:toString()"
			],
			"description": "std::string SocketIOPacket::toString()const"
		},
		 "void Label::alignText()": {
			"prefix": "void Label::alignText()",
			"body": [
				"void Label:alignText()"
			],
			"description": "void Label::alignText()"
		},
		 "void EditBoxImplCommon::setVisible(bool visible)": {
			"prefix": "void EditBoxImplCommon::setVisible(bool visible)",
			"body": [
				"EditBoxImplCommon:setVisible(${1:bool visible})"
			],
			"description": "void EditBoxImplCommon::setVisible(bool visible)"
		},
		 "Size Slider::getVirtualRendererSize() const": {
			"prefix": "Size Slider::getVirtualRendererSize() const",
			"body": [
				"Size Slider:getVirtualRendererSize() "
			],
			"description": "Size Slider::getVirtualRendererSize() const"
		},
		 "void EventDispatcher::pauseEventListenersForTarget(Node* target, bool recursive/* = false */)": {
			"prefix": "void EventDispatcher::pauseEventListenersForTarget(Node* target, bool recursive/* = false */)",
			"body": [
				"EventDispatcher:pauseEventListenersForTarget(${1:Node* target},${2:bool recursive/* = false */})"
			],
			"description": "void EventDispatcher::pauseEventListenersForTarget(Node* target, bool recursive/* = false */)"
		},
		 "void ComController::setEnabled(bool b)": {
			"prefix": "void ComController::setEnabled(bool b)",
			"body": [
				"ComController:setEnabled(${1:bool b})"
			],
			"description": "void ComController::setEnabled(bool b)"
		},
		 "void SpriteBatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void SpriteBatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"SpriteBatchNode:visit(${1:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void SpriteBatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void Director::showStats()": {
			"prefix": "void Director::showStats()",
			"body": [
				"void Director:showStats()"
			],
			"description": "void Director::showStats()"
		},
		 "void TMXLayer::updatePrimitives()": {
			"prefix": "void TMXLayer::updatePrimitives()",
			"body": [
				"void TMXLayer:updatePrimitives()"
			],
			"description": "void TMXLayer::updatePrimitives()"
		},
		 "int DictionaryHelper::getIntValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, int def)": {
			"prefix": "int DictionaryHelper::getIntValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, int def)",
			"body": [
				"DictionaryHelper:getIntValueFromArray_json(${1:rapidjson:Value& root},${2:char* arrayKey},${3:int idx},${4:int def})"
			],
			"description": "int DictionaryHelper::getIntValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, int def)"
		},
		 "void GLProgramState::setUniformVec2(GLint uniformLocation, const Vec2& value)": {
			"prefix": "void GLProgramState::setUniformVec2(GLint uniformLocation, const Vec2& value)",
			"body": [
				"GLProgramState:setUniformVec2(${1:GLint uniformLocation},${2:Vec2& value})"
			],
			"description": "void GLProgramState::setUniformVec2(GLint uniformLocation, const Vec2& value)"
		},
		 "cocos2d::ui::Widget* VideoPlayer::createCloneInstance()": {
			"prefix": "cocos2d::ui::Widget* VideoPlayer::createCloneInstance()",
			"body": [
				"cocos2d:ui:Widget* VideoPlayer:createCloneInstance()"
			],
			"description": "cocos2d::ui::Widget* VideoPlayer::createCloneInstance()"
		},
		 "void AnimationCache::parseVersion1(const ValueMap& animations)": {
			"prefix": "void AnimationCache::parseVersion1(const ValueMap& animations)",
			"body": [
				"AnimationCache:parseVersion1(${1:ValueMap& animations})"
			],
			"description": "void AnimationCache::parseVersion1(const ValueMap& animations)"
		},
		 "bool Properties::getQuaternionFromAxisAngle(const char* name, Quaternion* out) const": {
			"prefix": "bool Properties::getQuaternionFromAxisAngle(const char* name, Quaternion* out) const",
			"body": [
				"Properties:getQuaternionFromAxisAngle(${1:char* name},${2:Quaternion* out})"
			],
			"description": "bool Properties::getQuaternionFromAxisAngle(const char* name, Quaternion* out) const"
		},
		 "Widget* Layout::createCloneInstance()": {
			"prefix": "Widget* Layout::createCloneInstance()",
			"body": [
				"Widget* Layout:createCloneInstance()"
			],
			"description": "Widget* Layout::createCloneInstance()"
		},
		 "EventListenerPhysicsContactWithGroup* EventListenerPhysicsContactWithGroup::create(int group)": {
			"prefix": "EventListenerPhysicsContactWithGroup* EventListenerPhysicsContactWithGroup::create(int group)",
			"body": [
				"EventListenerPhysicsContactWithGroup:create(${1:int group})"
			],
			"description": "EventListenerPhysicsContactWithGroup* EventListenerPhysicsContactWithGroup::create(int group)"
		},
		 "PhysicsJointPin* PhysicsJointPin::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& pivot)": {
			"prefix": "PhysicsJointPin* PhysicsJointPin::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& pivot)",
			"body": [
				"PhysicsJointPin:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:Vec2& pivot})"
			],
			"description": "PhysicsJointPin* PhysicsJointPin::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& pivot)"
		},
		 "void Bone3D::resetPose()": {
			"prefix": "void Bone3D::resetPose()",
			"body": [
				"void Bone3D:resetPose()"
			],
			"description": "void Bone3D::resetPose()"
		},
		 "void Node::pause()": {
			"prefix": "void Node::pause()",
			"body": [
				"void Node:pause()"
			],
			"description": "void Node::pause()"
		},
		 "void GLProgram::setUniformLocationWith3i(GLint location, GLint i1, GLint i2, GLint i3)": {
			"prefix": "void GLProgram::setUniformLocationWith3i(GLint location, GLint i1, GLint i2, GLint i3)",
			"body": [
				"GLProgram:setUniformLocationWith3i(${1:GLint location},${2:GLint i1},${3:GLint i2},${4:GLint i3})"
			],
			"description": "void GLProgram::setUniformLocationWith3i(GLint location, GLint i1, GLint i2, GLint i3)"
		},
		 "void LayerGradient::setVector(const Vec2& var)": {
			"prefix": "void LayerGradient::setVector(const Vec2& var)",
			"body": [
				"LayerGradient:setVector(${1:Vec2& var})"
			],
			"description": "void LayerGradient::setVector(const Vec2& var)"
		},
		 "__Array* __Dictionary::allKeysForObject(Ref* object)": {
			"prefix": "__Array* __Dictionary::allKeysForObject(Ref* object)",
			"body": [
				"__Dictionary:allKeysForObject(${1:Ref* object})"
			],
			"description": "__Array* __Dictionary::allKeysForObject(Ref* object)"
		},
		 "void SkeletonRenderer::setToSetupPose ()": {
			"prefix": "void SkeletonRenderer::setToSetupPose ()",
			"body": [
				"void SkeletonRenderer:setToSetupPose ()"
			],
			"description": "void SkeletonRenderer::setToSetupPose ()"
		},
		 "FontAtlas * FontFNT::createFontAtlas()": {
			"prefix": "FontAtlas * FontFNT::createFontAtlas()",
			"body": [
				"FontAtlas * FontFNT:createFontAtlas()"
			],
			"description": "FontAtlas * FontFNT::createFontAtlas()"
		},
		 "void StopGrid::cacheTargetAsGridNode()": {
			"prefix": "void StopGrid::cacheTargetAsGridNode()",
			"body": [
				"void StopGrid:cacheTargetAsGridNode()"
			],
			"description": "void StopGrid::cacheTargetAsGridNode()"
		},
		 "LayerColor * LayerColor::create(const Color4B& color, GLfloat width, GLfloat height)": {
			"prefix": "LayerColor * LayerColor::create(const Color4B& color, GLfloat width, GLfloat height)",
			"body": [
				"* LayerColor:create(${1:Color4B& color},${2:GLfloat width},${3:GLfloat height})"
			],
			"description": "LayerColor * LayerColor::create(const Color4B& color, GLfloat width, GLfloat height)"
		},
		 "bool Data::isNull() const": {
			"prefix": "bool Data::isNull() const",
			"body": [
				"bool Data:isNull() "
			],
			"description": "bool Data::isNull() const"
		},
		 "void ReverseTime::update(float time)": {
			"prefix": "void ReverseTime::update(float time)",
			"body": [
				"ReverseTime:update(${1:float time})"
			],
			"description": "void ReverseTime::update(float time)"
		},
		 "Size Size::operator*(float a) const": {
			"prefix": "Size Size::operator*(float a) const",
			"body": [
				"Size:operator*(${1:float a})"
			],
			"description": "Size Size::operator*(float a) const"
		},
		 "void Armature::drawContour()": {
			"prefix": "void Armature::drawContour()",
			"body": [
				"void Armature:drawContour()"
			],
			"description": "void Armature::drawContour()"
		},
		 "bool AudioEngineImpl::resume(int audioID)": {
			"prefix": "bool AudioEngineImpl::resume(int audioID)",
			"body": [
				"AudioEngineImpl:resume(${1:int audioID})"
			],
			"description": "bool AudioEngineImpl::resume(int audioID)"
		},
		 "float Vec4::dot(const Vec4& v) const": {
			"prefix": "float Vec4::dot(const Vec4& v) const",
			"body": [
				"Vec4:dot(${1:Vec4& v})"
			],
			"description": "float Vec4::dot(const Vec4& v) const"
		},
		 "void NodeGrid::setGrid(GridBase *grid)": {
			"prefix": "void NodeGrid::setGrid(GridBase *grid)",
			"body": [
				"NodeGrid:setGrid(${1:GridBase *grid})"
			],
			"description": "void NodeGrid::setGrid(GridBase *grid)"
		},
		 "NodeLoader * NodeLoaderLibrary::getNodeLoader(const char* pClassName)": {
			"prefix": "NodeLoader * NodeLoaderLibrary::getNodeLoader(const char* pClassName)",
			"body": [
				"* NodeLoaderLibrary:getNodeLoader(${1:char* pClassName})"
			],
			"description": "NodeLoader * NodeLoaderLibrary::getNodeLoader(const char* pClassName)"
		},
		 "void PhysicsWorldCallback::collisionSeparateCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)": {
			"prefix": "void PhysicsWorldCallback::collisionSeparateCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)",
			"body": [
				"PhysicsWorldCallback:collisionSeparateCallbackFunc(${1:cpArbiter *arb},${2:cpSpace *space},${3:PhysicsWorld *world})"
			],
			"description": "void PhysicsWorldCallback::collisionSeparateCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)"
		},
		 "void FileUtils::setSearchResolutionsOrder(const std::vector<std::string>& searchResolutionsOrder)": {
			"prefix": "void FileUtils::setSearchResolutionsOrder(const std::vector<std::string>& searchResolutionsOrder)",
			"body": [
				"FileUtils:setSearchResolutionsOrder(${1:std:vector<std:string>& searchResolutionsOrder})"
			],
			"description": "void FileUtils::setSearchResolutionsOrder(const std::vector<std::string>& searchResolutionsOrder)"
		},
		 "unsigned char Value::asByte() const": {
			"prefix": "unsigned char Value::asByte() const",
			"body": [
				"unsigned char Value:asByte() "
			],
			"description": "unsigned char Value::asByte() const"
		},
		 "void HttpClient::send(HttpRequest* request)": {
			"prefix": "void HttpClient::send(HttpRequest* request)",
			"body": [
				"HttpClient:send(${1:HttpRequest* request})"
			],
			"description": "void HttpClient::send(HttpRequest* request)"
		},
		 "GLProgramState* Node::getGLProgramState() const": {
			"prefix": "GLProgramState* Node::getGLProgramState() const",
			"body": [
				"GLProgramState* Node:getGLProgramState() "
			],
			"description": "GLProgramState* Node::getGLProgramState() const"
		},
		 "void EventDispatcher::sortEventListenersOfFixedPriority(const EventListener::ListenerID& listenerID)": {
			"prefix": "void EventDispatcher::sortEventListenersOfFixedPriority(const EventListener::ListenerID& listenerID)",
			"body": [
				"EventDispatcher:sortEventListenersOfFixedPriority(${1:EventListener:ListenerID& listenerID})"
			],
			"description": "void EventDispatcher::sortEventListenersOfFixedPriority(const EventListener::ListenerID& listenerID)"
		},
		 "void DisplayFactory::updateDisplay(Bone *bone, float dt, bool dirty)": {
			"prefix": "void DisplayFactory::updateDisplay(Bone *bone, float dt, bool dirty)",
			"body": [
				"DisplayFactory:updateDisplay(${1:Bone *bone},${2:float dt},${3:bool dirty})"
			],
			"description": "void DisplayFactory::updateDisplay(Bone *bone, float dt, bool dirty)"
		},
		 "void GLProgram::bindPredefinedVertexAttribs()": {
			"prefix": "void GLProgram::bindPredefinedVertexAttribs()",
			"body": [
				"void GLProgram:bindPredefinedVertexAttribs()"
			],
			"description": "void GLProgram::bindPredefinedVertexAttribs()"
		},
		 "void SpriteFrameCache::addSpriteFramesWithDictionary(ValueMap& dictionary, Texture2D* texture)": {
			"prefix": "void SpriteFrameCache::addSpriteFramesWithDictionary(ValueMap& dictionary, Texture2D* texture)",
			"body": [
				"SpriteFrameCache:addSpriteFramesWithDictionary(${1:ValueMap& dictionary},${2:Texture2D* texture})"
			],
			"description": "void SpriteFrameCache::addSpriteFramesWithDictionary(ValueMap& dictionary, Texture2D* texture)"
		},
		 "void TileMapAtlas::updateAtlasValues()": {
			"prefix": "void TileMapAtlas::updateAtlasValues()",
			"body": [
				"void TileMapAtlas:updateAtlasValues()"
			],
			"description": "void TileMapAtlas::updateAtlasValues()"
		},
		 "LoadingBar::Direction LoadingBar::getDirection()const": {
			"prefix": "LoadingBar::Direction LoadingBar::getDirection()const",
			"body": [
				"LoadingBar:Direction LoadingBar:getDirection()"
			],
			"description": "LoadingBar::Direction LoadingBar::getDirection()const"
		},
		 "TMXTilesetInfo * TMXTiledMap::tilesetForLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)": {
			"prefix": "TMXTilesetInfo * TMXTiledMap::tilesetForLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)",
			"body": [
				"* TMXTiledMap:tilesetForLayer(${1:TMXLayerInfo *layerInfo},${2:TMXMapInfo *mapInfo})"
			],
			"description": "TMXTilesetInfo * TMXTiledMap::tilesetForLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)"
		},
		 "void BoneData::addDisplayData(DisplayData *displayData)": {
			"prefix": "void BoneData::addDisplayData(DisplayData *displayData)",
			"body": [
				"BoneData:addDisplayData(${1:DisplayData *displayData})"
			],
			"description": "void BoneData::addDisplayData(DisplayData *displayData)"
		},
		 "Frame* ActionTimelineCache::loadRotationSkewFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadRotationSkewFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadRotationSkewFrameWithFlatBuffers(${1:flatbuffers:ScaleFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadRotationSkewFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)"
		},
		 "void DisplayManager::removeDisplay(int index)": {
			"prefix": "void DisplayManager::removeDisplay(int index)",
			"body": [
				"DisplayManager:removeDisplay(${1:int index})"
			],
			"description": "void DisplayManager::removeDisplay(int index)"
		},
		 "void __Array::removeLastObject(bool releaseObj)": {
			"prefix": "void __Array::removeLastObject(bool releaseObj)",
			"body": [
				"__Array:removeLastObject(${1:bool releaseObj})"
			],
			"description": "void __Array::removeLastObject(bool releaseObj)"
		},
		 "void Physics3DWorld::removeAllPhysics3DConstraints()": {
			"prefix": "void Physics3DWorld::removeAllPhysics3DConstraints()",
			"body": [
				"void Physics3DWorld:removeAllPhysics3DConstraints()"
			],
			"description": "void Physics3DWorld::removeAllPhysics3DConstraints()"
		},
		 "int CCBSequenceProperty::getType()": {
			"prefix": "int CCBSequenceProperty::getType()",
			"body": [
				"int CCBSequenceProperty:getType()"
			],
			"description": "int CCBSequenceProperty::getType()"
		},
		 "void __String::appendWithFormat(const char* format, ...)": {
			"prefix": "void __String::appendWithFormat(const char* format, ...)",
			"body": [
				"__String:appendWithFormat(${1:char* format},${2:...})"
			],
			"description": "void __String::appendWithFormat(const char* format, ...)"
		},
		 "bool OBB::intersects(const OBB& box) const": {
			"prefix": "bool OBB::intersects(const OBB& box) const",
			"body": [
				"OBB:intersects(${1:OBB& box})"
			],
			"description": "bool OBB::intersects(const OBB& box) const"
		},
		 "void PhysicsWorld::removeAllJoints(bool destroy)": {
			"prefix": "void PhysicsWorld::removeAllJoints(bool destroy)",
			"body": [
				"PhysicsWorld:removeAllJoints(${1:bool destroy})"
			],
			"description": "void PhysicsWorld::removeAllJoints(bool destroy)"
		},
		 "RichText* RichText::create()": {
			"prefix": "RichText* RichText::create()",
			"body": [
				"RichText* RichText:create()"
			],
			"description": "RichText* RichText::create()"
		},
		 "void PhysicsJointDistance::setDistance(float distance)": {
			"prefix": "void PhysicsJointDistance::setDistance(float distance)",
			"body": [
				"PhysicsJointDistance:setDistance(${1:float distance})"
			],
			"description": "void PhysicsJointDistance::setDistance(float distance)"
		},
		 "void EventDispatcher::addEventListenerWithFixedPriority(EventListener* listener, int fixedPriority)": {
			"prefix": "void EventDispatcher::addEventListenerWithFixedPriority(EventListener* listener, int fixedPriority)",
			"body": [
				"EventDispatcher:addEventListenerWithFixedPriority(${1:EventListener* listener},${2:int fixedPriority})"
			],
			"description": "void EventDispatcher::addEventListenerWithFixedPriority(EventListener* listener, int fixedPriority)"
		},
		 "Widget* ListView::createCloneInstance()": {
			"prefix": "Widget* ListView::createCloneInstance()",
			"body": [
				"Widget* ListView:createCloneInstance()"
			],
			"description": "Widget* ListView::createCloneInstance()"
		},
		 "Size GLView::getVisibleSize() const": {
			"prefix": "Size GLView::getVisibleSize() const",
			"body": [
				"Size GLView:getVisibleSize() "
			],
			"description": "Size GLView::getVisibleSize() const"
		},
		 "void Physics3DRigidBody::setGravity( const cocos2d::Vec3& acceleration )": {
			"prefix": "void Physics3DRigidBody::setGravity( const cocos2d::Vec3& acceleration )",
			"body": [
				"Physics3DRigidBody:setGravity(${1:cocos2d:Vec3& acceleration})"
			],
			"description": "void Physics3DRigidBody::setGravity( const cocos2d::Vec3& acceleration )"
		},
		 "void EditBoxImplWin::setPlaceholderFont(const char* pFontName, int fontSize)": {
			"prefix": "void EditBoxImplWin::setPlaceholderFont(const char* pFontName, int fontSize)",
			"body": [
				"EditBoxImplWin:setPlaceholderFont(${1:char* pFontName},${2:int fontSize})"
			],
			"description": "void EditBoxImplWin::setPlaceholderFont(const char* pFontName, int fontSize)"
		},
		 "bool TextField::onTouchBegan(Touch *touch, Event *unusedEvent)": {
			"prefix": "bool TextField::onTouchBegan(Touch *touch, Event *unusedEvent)",
			"body": [
				"TextField:onTouchBegan(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "bool TextField::onTouchBegan(Touch *touch, Event *unusedEvent)"
		},
		 "cocos2d::Mat4 Physics3DHingeConstraint::getFrameOffsetB() const": {
			"prefix": "cocos2d::Mat4 Physics3DHingeConstraint::getFrameOffsetB() const",
			"body": [
				"cocos2d:Mat4 Physics3DHingeConstraint:getFrameOffsetB() "
			],
			"description": "cocos2d::Mat4 Physics3DHingeConstraint::getFrameOffsetB() const"
		},
		 "void UserDefault::flush()": {
			"prefix": "void UserDefault::flush()",
			"body": [
				"void UserDefault:flush()"
			],
			"description": "void UserDefault::flush()"
		},
		 "FadeOutUpTiles* FadeOutUpTiles::create(float duration, const Size& gridSize)": {
			"prefix": "FadeOutUpTiles* FadeOutUpTiles::create(float duration, const Size& gridSize)",
			"body": [
				"FadeOutUpTiles:create(${1:float duration},${2:Size& gridSize})"
			],
			"description": "FadeOutUpTiles* FadeOutUpTiles::create(float duration, const Size& gridSize)"
		},
		 "Action * Node::getActionByTag(int tag)": {
			"prefix": "Action * Node::getActionByTag(int tag)",
			"body": [
				"* Node:getActionByTag(${1:int tag})"
			],
			"description": "Action * Node::getActionByTag(int tag)"
		},
		 "BMFontConfiguration * BMFontConfiguration::create(const std::string& FNTfile)": {
			"prefix": "BMFontConfiguration * BMFontConfiguration::create(const std::string& FNTfile)",
			"body": [
				"* BMFontConfiguration:create(${1:std:string& FNTfile})"
			],
			"description": "BMFontConfiguration * BMFontConfiguration::create(const std::string& FNTfile)"
		},
		 "Node* CSLoader::loadSprite(const rapidjson::Value& json)": {
			"prefix": "Node* CSLoader::loadSprite(const rapidjson::Value& json)",
			"body": [
				"CSLoader:loadSprite(${1:rapidjson:Value& json})"
			],
			"description": "Node* CSLoader::loadSprite(const rapidjson::Value& json)"
		},
		 "void TiledGrid3D::blit(void)": {
			"prefix": "void TiledGrid3D::blit(void)",
			"body": [
				"TiledGrid3D:blit(${1:void})"
			],
			"description": "void TiledGrid3D::blit(void)"
		},
		 "void ComRender::setNode(cocos2d::Node *node)": {
			"prefix": "void ComRender::setNode(cocos2d::Node *node)",
			"body": [
				"ComRender:setNode(${1:cocos2d:Node *node})"
			],
			"description": "void ComRender::setNode(cocos2d::Node *node)"
		},
		 "void GLViewImpl::swapBuffers()": {
			"prefix": "void GLViewImpl::swapBuffers()",
			"body": [
				"void GLViewImpl:swapBuffers()"
			],
			"description": "void GLViewImpl::swapBuffers()"
		},
		 "void AbstractCheckButton::setupFrontCrossDisableTexture()": {
			"prefix": "void AbstractCheckButton::setupFrontCrossDisableTexture()",
			"body": [
				"void AbstractCheckButton:setupFrontCrossDisableTexture()"
			],
			"description": "void AbstractCheckButton::setupFrontCrossDisableTexture()"
		},
		 "void Widget::setActionTag(int tag)": {
			"prefix": "void Widget::setActionTag(int tag)",
			"body": [
				"Widget:setActionTag(${1:int tag})"
			],
			"description": "void Widget::setActionTag(int tag)"
		},
		 "Vec3 DirectionLight::getDirectionInWorld() const": {
			"prefix": "Vec3 DirectionLight::getDirectionInWorld() const",
			"body": [
				"Vec3 DirectionLight:getDirectionInWorld() "
			],
			"description": "Vec3 DirectionLight::getDirectionInWorld() const"
		},
		 "void OrbitCamera::startWithTarget(Node *target)": {
			"prefix": "void OrbitCamera::startWithTarget(Node *target)",
			"body": [
				"OrbitCamera:startWithTarget(${1:Node *target})"
			],
			"description": "void OrbitCamera::startWithTarget(Node *target)"
		},
		 "void ActionTimelineCache::destroyInstance()": {
			"prefix": "void ActionTimelineCache::destroyInstance()",
			"body": [
				"void ActionTimelineCache:destroyInstance()"
			],
			"description": "void ActionTimelineCache::destroyInstance()"
		},
		 "void Widget::setSizeType(SizeType type)": {
			"prefix": "void Widget::setSizeType(SizeType type)",
			"body": [
				"Widget:setSizeType(${1:SizeType type})"
			],
			"description": "void Widget::setSizeType(SizeType type)"
		},
		 "cocos2d::Node *handler)": {
			"prefix": "cocos2d::Node *handler)",
			"body": [
				"cocos2d:Node *handler)"
			],
			"description": "cocos2d::Node *handler)"
		},
		 "bool Widget::isUnifySizeEnabled()const": {
			"prefix": "bool Widget::isUnifySizeEnabled()const",
			"body": [
				"bool Widget:isUnifySizeEnabled()"
			],
			"description": "bool Widget::isUnifySizeEnabled()const"
		},
		 "void EaseBackInOut::update(float time)": {
			"prefix": "void EaseBackInOut::update(float time)",
			"body": [
				"EaseBackInOut:update(${1:float time})"
			],
			"description": "void EaseBackInOut::update(float time)"
		},
		 "void TransitionScene::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void TransitionScene::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"TransitionScene:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void TransitionScene::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void __Array::removeObject(Ref* object, bool releaseObj /* ignored */)": {
			"prefix": "void __Array::removeObject(Ref* object, bool releaseObj /* ignored */)",
			"body": [
				"__Array:removeObject(${1:Ref* object},${2:bool releaseObj /* ignored */})"
			],
			"description": "void __Array::removeObject(Ref* object, bool releaseObj /* ignored */)"
		},
		 "void Widget::copyProperties(Widget *widget)": {
			"prefix": "void Widget::copyProperties(Widget *widget)",
			"body": [
				"Widget:copyProperties(${1:Widget *widget})"
			],
			"description": "void Widget::copyProperties(Widget *widget)"
		},
		 "void Timer::setupTimerWithInterval(float seconds, unsigned int repeat, float delay)": {
			"prefix": "void Timer::setupTimerWithInterval(float seconds, unsigned int repeat, float delay)",
			"body": [
				"Timer:setupTimerWithInterval(${1:float seconds},${2:unsigned int repeat},${3:float delay})"
			],
			"description": "void Timer::setupTimerWithInterval(float seconds, unsigned int repeat, float delay)"
		},
		 "HBox* HBox::create(const cocos2d::Size &size)": {
			"prefix": "HBox* HBox::create(const cocos2d::Size &size)",
			"body": [
				"HBox:create(${1:cocos2d:Size &size})"
			],
			"description": "HBox* HBox::create(const cocos2d::Size &size)"
		},
		 "PhysicsBody* PhysicsBody::createEdgePolygon(const Vec2* points, int count, const PhysicsMaterial& material, float border/* = 1*/)": {
			"prefix": "PhysicsBody* PhysicsBody::createEdgePolygon(const Vec2* points, int count, const PhysicsMaterial& material, float border/* = 1*/)",
			"body": [
				"PhysicsBody:createEdgePolygon(${1:Vec2* points},${2:int count},${3:PhysicsMaterial& material},${4:float border/* = 1*/})"
			],
			"description": "PhysicsBody* PhysicsBody::createEdgePolygon(const Vec2* points, int count, const PhysicsMaterial& material, float border/* = 1*/)"
		},
		 "bool ComAttribute::parse(const std::string &jsonFile)": {
			"prefix": "bool ComAttribute::parse(const std::string &jsonFile)",
			"body": [
				"ComAttribute:parse(${1:std:string &jsonFile})"
			],
			"description": "bool ComAttribute::parse(const std::string &jsonFile)"
		},
		 "void TMXLayerInfo::setProperties(ValueMap var)": {
			"prefix": "void TMXLayerInfo::setProperties(ValueMap var)",
			"body": [
				"TMXLayerInfo:setProperties(${1:ValueMap var})"
			],
			"description": "void TMXLayerInfo::setProperties(ValueMap var)"
		},
		 "void Layout::doLayout()": {
			"prefix": "void Layout::doLayout()",
			"body": [
				"void Layout:doLayout()"
			],
			"description": "void Layout::doLayout()"
		},
		 "SocketIOPacket::SocketIOPacket() :_separator(":")": {
			"prefix": "SocketIOPacket::SocketIOPacket() :_separator(":")",
			"body": [
				"SocketIOPacket:SocketIOPacket() :_separator(":")"
			],
			"description": "SocketIOPacket::SocketIOPacket() :_separator(":")"
		},
		 "void BaseLight::onExit()": {
			"prefix": "void BaseLight::onExit()",
			"body": [
				"void BaseLight:onExit()"
			],
			"description": "void BaseLight::onExit()"
		},
		 "void LayerGradientLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)": {
			"prefix": "void LayerGradientLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)",
			"body": [
				"LayerGradientLoader:onHandlePropTypePoint(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Vec2 pPoint},${5:CCBReader * ccbReader})"
			],
			"description": "void LayerGradientLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)"
		},
		 "bool PhysicsJointRotarySpring::createConstraints()": {
			"prefix": "bool PhysicsJointRotarySpring::createConstraints()",
			"body": [
				"bool PhysicsJointRotarySpring:createConstraints()"
			],
			"description": "bool PhysicsJointRotarySpring::createConstraints()"
		},
		 "Quaternion::Quaternion(float* array)": {
			"prefix": "Quaternion::Quaternion(float* array)",
			"body": [
				"array})"
			],
			"description": "Quaternion::Quaternion(float* array)"
		},
		 "const Size& GLView::getDesignResolutionSize() const": {
			"prefix": "const Size& GLView::getDesignResolutionSize() const",
			"body": [
				" Size& GLView:getDesignResolutionSize() "
			],
			"description": "const Size& GLView::getDesignResolutionSize() const"
		},
		 "bool ActionNode::updateActionToTimeLine(float fTime)": {
			"prefix": "bool ActionNode::updateActionToTimeLine(float fTime)",
			"body": [
				"ActionNode:updateActionToTimeLine(${1:float fTime})"
			],
			"description": "bool ActionNode::updateActionToTimeLine(float fTime)"
		},
		 "bool Configuration::supportsATITC() const": {
			"prefix": "bool Configuration::supportsATITC() const",
			"body": [
				"bool Configuration:supportsATITC() "
			],
			"description": "bool Configuration::supportsATITC() const"
		},
		 "bool EventListenerPhysicsContactWithShapes::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)": {
			"prefix": "bool EventListenerPhysicsContactWithShapes::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)",
			"body": [
				"EventListenerPhysicsContactWithShapes:hitTest(${1:PhysicsShape* shapeA},${2:PhysicsShape* shapeB})"
			],
			"description": "bool EventListenerPhysicsContactWithShapes::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)"
		},
		 "void Grid3D::blit(void)": {
			"prefix": "void Grid3D::blit(void)",
			"body": [
				"Grid3D:blit(${1:void})"
			],
			"description": "void Grid3D::blit(void)"
		},
		 "GLenum Bundle3D::parseGLType(const std::string& str)": {
			"prefix": "GLenum Bundle3D::parseGLType(const std::string& str)",
			"body": [
				"Bundle3D:parseGLType(${1:std:string& str})"
			],
			"description": "GLenum Bundle3D::parseGLType(const std::string& str)"
		},
		 "void PageView::onTouchMoved(Touch *touch, Event *unusedEvent)": {
			"prefix": "void PageView::onTouchMoved(Touch *touch, Event *unusedEvent)",
			"body": [
				"PageView:onTouchMoved(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void PageView::onTouchMoved(Touch *touch, Event *unusedEvent)"
		},
		 "void PhysicsJointRotarySpring::setStiffness(float stiffness)": {
			"prefix": "void PhysicsJointRotarySpring::setStiffness(float stiffness)",
			"body": [
				"PhysicsJointRotarySpring:setStiffness(${1:float stiffness})"
			],
			"description": "void PhysicsJointRotarySpring::setStiffness(float stiffness)"
		},
		 "EaseBezierAction* EaseBezierAction::create(cocos2d::ActionInterval* action)": {
			"prefix": "EaseBezierAction* EaseBezierAction::create(cocos2d::ActionInterval* action)",
			"body": [
				"EaseBezierAction:create(${1:cocos2d:ActionInterval* action})"
			],
			"description": "EaseBezierAction* EaseBezierAction::create(cocos2d::ActionInterval* action)"
		},
		 "const Color3B& LayerGradient::getStartColor() const": {
			"prefix": "const Color3B& LayerGradient::getStartColor() const",
			"body": [
				" Color3B& LayerGradient:getStartColor() "
			],
			"description": "const Color3B& LayerGradient::getStartColor() const"
		},
		 "float Terrain::getHeight(Vec2 pos, Vec3*Normal) const": {
			"prefix": "float Terrain::getHeight(Vec2 pos, Vec3*Normal) const",
			"body": [
				"Terrain:getHeight(${1:Vec2 pos},${2:Vec3*Normal})"
			],
			"description": "float Terrain::getHeight(Vec2 pos, Vec3*Normal) const"
		},
		 "const Size& Label::getContentSize() const": {
			"prefix": "const Size& Label::getContentSize() const",
			"body": [
				" Size& Label:getContentSize() "
			],
			"description": "const Size& Label::getContentSize() const"
		},
		 "void PhysicsBody::setCollisionBitmask(int bitmask)": {
			"prefix": "void PhysicsBody::setCollisionBitmask(int bitmask)",
			"body": [
				"PhysicsBody:setCollisionBitmask(${1:int bitmask})"
			],
			"description": "void PhysicsBody::setCollisionBitmask(int bitmask)"
		},
		 "Mesh* Sprite3D::getMeshByIndex(int index) const": {
			"prefix": "Mesh* Sprite3D::getMeshByIndex(int index) const",
			"body": [
				"Sprite3D:getMeshByIndex(${1:int index})"
			],
			"description": "Mesh* Sprite3D::getMeshByIndex(int index) const"
		},
		 "void BundleReader::init(char* buffer, ssize_t length)": {
			"prefix": "void BundleReader::init(char* buffer, ssize_t length)",
			"body": [
				"BundleReader:init(${1:char* buffer},${2:ssize_t length})"
			],
			"description": "void BundleReader::init(char* buffer, ssize_t length)"
		},
		 "CCBRotateTo* CCBRotateTo::create(float fDuration, float fAngle)": {
			"prefix": "CCBRotateTo* CCBRotateTo::create(float fDuration, float fAngle)",
			"body": [
				"CCBRotateTo:create(${1:float fDuration},${2:float fAngle})"
			],
			"description": "CCBRotateTo* CCBRotateTo::create(float fDuration, float fAngle)"
		},
		 "void TriggerMng::removeAll(void)": {
			"prefix": "void TriggerMng::removeAll(void)",
			"body": [
				"TriggerMng:removeAll(${1:void})"
			],
			"description": "void TriggerMng::removeAll(void)"
		},
		 "void TriggerMng::buildJson(rapidjson::Document &document, cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)": {
			"prefix": "void TriggerMng::buildJson(rapidjson::Document &document, cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)",
			"body": [
				"TriggerMng:buildJson(${1:rapidjson:Document &document},${2:cocostudio:CocoLoader *pCocoLoader},${3:cocostudio:stExpCocoNode *pCocoNode})"
			],
			"description": "void TriggerMng::buildJson(rapidjson::Document &document, cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)"
		},
		 "void EaseCircleActionInOut::update(float time)": {
			"prefix": "void EaseCircleActionInOut::update(float time)",
			"body": [
				"EaseCircleActionInOut:update(${1:float time})"
			],
			"description": "void EaseCircleActionInOut::update(float time)"
		},
		 "void Vec3::add(const Vec3& v1, const Vec3& v2, Vec3* dst)": {
			"prefix": "void Vec3::add(const Vec3& v1, const Vec3& v2, Vec3* dst)",
			"body": [
				"Vec3:add(${1:Vec3& v1},${2:Vec3& v2},${3:Vec3* dst})"
			],
			"description": "void Vec3::add(const Vec3& v1, const Vec3& v2, Vec3* dst)"
		},
		 "bool TMXMapInfo::initWithTMXFile(const std::string& tmxFile)": {
			"prefix": "bool TMXMapInfo::initWithTMXFile(const std::string& tmxFile)",
			"body": [
				"TMXMapInfo:initWithTMXFile(${1:std:string& tmxFile})"
			],
			"description": "bool TMXMapInfo::initWithTMXFile(const std::string& tmxFile)"
		},
		 "void ActionCamera::restore()": {
			"prefix": "void ActionCamera::restore()",
			"body": [
				"void ActionCamera:restore()"
			],
			"description": "void ActionCamera::restore()"
		},
		 "Material* Sprite3D::getMaterial(int meshIndex) const": {
			"prefix": "Material* Sprite3D::getMaterial(int meshIndex) const",
			"body": [
				"Sprite3D:getMaterial(${1:int meshIndex})"
			],
			"description": "Material* Sprite3D::getMaterial(int meshIndex) const"
		},
		 "const cocos2d::Size GUIReader::getFileDesignSize(const char* fileName) const": {
			"prefix": "const cocos2d::Size GUIReader::getFileDesignSize(const char* fileName) const",
			"body": [
				"cocos2d:Size GUIReader:getFileDesignSize(${1:char* fileName})"
			],
			"description": "const cocos2d::Size GUIReader::getFileDesignSize(const char* fileName) const"
		},
		 "void Bone::setParentBone(Bone *parent)": {
			"prefix": "void Bone::setParentBone(Bone *parent)",
			"body": [
				"Bone:setParentBone(${1:Bone *parent})"
			],
			"description": "void Bone::setParentBone(Bone *parent)"
		},
		 "void WebViewImpl::goForward()": {
			"prefix": "void WebViewImpl::goForward()",
			"body": [
				"void WebViewImpl:goForward()"
			],
			"description": "void WebViewImpl::goForward()"
		},
		 "float ParticleSystem::getSpeedVar() const": {
			"prefix": "float ParticleSystem::getSpeedVar() const",
			"body": [
				"float ParticleSystem:getSpeedVar() "
			],
			"description": "float ParticleSystem::getSpeedVar() const"
		},
		 "void SocketIO::removeSocket(const std::string& uri)": {
			"prefix": "void SocketIO::removeSocket(const std::string& uri)",
			"body": [
				"SocketIO:removeSocket(${1:std:string& uri})"
			],
			"description": "void SocketIO::removeSocket(const std::string& uri)"
		},
		 "bool TintTo::initWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue)": {
			"prefix": "bool TintTo::initWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue)",
			"body": [
				"TintTo:initWithDuration(${1:float duration},${2:GLubyte red},${3:GLubyte green},${4:GLubyte blue})"
			],
			"description": "bool TintTo::initWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue)"
		},
		 "void MotionStreak::setOpacity(GLubyte opacity)": {
			"prefix": "void MotionStreak::setOpacity(GLubyte opacity)",
			"body": [
				"MotionStreak:setOpacity(${1:GLubyte opacity})"
			],
			"description": "void MotionStreak::setOpacity(GLubyte opacity)"
		},
		 "void ParticleSystemQuad::initIndices()": {
			"prefix": "void ParticleSystemQuad::initIndices()",
			"body": [
				"void ParticleSystemQuad:initIndices()"
			],
			"description": "void ParticleSystemQuad::initIndices()"
		},
		 "AsyncTaskPool* AsyncTaskPool::getInstance()": {
			"prefix": "AsyncTaskPool* AsyncTaskPool::getInstance()",
			"body": [
				"AsyncTaskPool* AsyncTaskPool:getInstance()"
			],
			"description": "AsyncTaskPool* AsyncTaskPool::getInstance()"
		},
		 "AnimationData *ArmatureDataManager::getAnimationData(const std::string& id)": {
			"prefix": "AnimationData *ArmatureDataManager::getAnimationData(const std::string& id)",
			"body": [
				"*ArmatureDataManager:getAnimationData(${1:std:string& id})"
			],
			"description": "AnimationData *ArmatureDataManager::getAnimationData(const std::string& id)"
		},
		 "float Button::getTitleFontSize() const": {
			"prefix": "float Button::getTitleFontSize() const",
			"body": [
				"float Button:getTitleFontSize() "
			],
			"description": "float Button::getTitleFontSize() const"
		},
		 "bool MenuItem::isSelected() const": {
			"prefix": "bool MenuItem::isSelected() const",
			"body": [
				"bool MenuItem:isSelected() "
			],
			"description": "bool MenuItem::isSelected() const"
		},
		 "Mat4 Node::getNodeToWorldTransform() const": {
			"prefix": "Mat4 Node::getNodeToWorldTransform() const",
			"body": [
				"Mat4 Node:getNodeToWorldTransform() "
			],
			"description": "Mat4 Node::getNodeToWorldTransform() const"
		},
		 "Texture2D* ParticleBatchNode::getTexture() const": {
			"prefix": "Texture2D* ParticleBatchNode::getTexture() const",
			"body": [
				"Texture2D* ParticleBatchNode:getTexture() "
			],
			"description": "Texture2D* ParticleBatchNode::getTexture() const"
		},
		 "void Button::onPressStateChangedToNormal()": {
			"prefix": "void Button::onPressStateChangedToNormal()",
			"body": [
				"void Button:onPressStateChangedToNormal()"
			],
			"description": "void Button::onPressStateChangedToNormal()"
		},
		 "FlipY * FlipY::create(bool y)": {
			"prefix": "FlipY * FlipY::create(bool y)",
			"body": [
				"* FlipY:create(${1:bool y})"
			],
			"description": "FlipY * FlipY::create(bool y)"
		},
		 "void ActionTimeline::gotoFrameAndPlay(int startIndex, bool loop)": {
			"prefix": "void ActionTimeline::gotoFrameAndPlay(int startIndex, bool loop)",
			"body": [
				"ActionTimeline:gotoFrameAndPlay(${1:int startIndex},${2:bool loop})"
			],
			"description": "void ActionTimeline::gotoFrameAndPlay(int startIndex, bool loop)"
		},
		 "void FadeOutTRTiles::turnOnTile(const Vec2& pos)": {
			"prefix": "void FadeOutTRTiles::turnOnTile(const Vec2& pos)",
			"body": [
				"FadeOutTRTiles:turnOnTile(${1:Vec2& pos})"
			],
			"description": "void FadeOutTRTiles::turnOnTile(const Vec2& pos)"
		},
		 "ScrollViewBar* ScrollViewBar::create(ScrollView* parent, ScrollView::Direction direction)": {
			"prefix": "ScrollViewBar* ScrollViewBar::create(ScrollView* parent, ScrollView::Direction direction)",
			"body": [
				"ScrollViewBar:create(${1:ScrollView* parent},${2:ScrollView:Direction direction})"
			],
			"description": "ScrollViewBar* ScrollViewBar::create(ScrollView* parent, ScrollView::Direction direction)"
		},
		 "bool ParticleSystem::init()": {
			"prefix": "bool ParticleSystem::init()",
			"body": [
				"bool ParticleSystem:init()"
			],
			"description": "bool ParticleSystem::init()"
		},
		 "void LayerGradientLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)": {
			"prefix": "void LayerGradientLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)",
			"body": [
				"LayerGradientLoader:onHandlePropTypeByte(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:unsigned char pByte},${5:CCBReader * ccbReader})"
			],
			"description": "void LayerGradientLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)"
		},
		 "std::string TextureAtlas::getDescription() const": {
			"prefix": "std::string TextureAtlas::getDescription() const",
			"body": [
				"std:string TextureAtlas:getDescription() "
			],
			"description": "std::string TextureAtlas::getDescription() const"
		},
		 "Frame* ActionTimelineCache::loadVisibleFrameWithFlatBuffers(const flatbuffers::BoolFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadVisibleFrameWithFlatBuffers(const flatbuffers::BoolFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadVisibleFrameWithFlatBuffers(${1:flatbuffers:BoolFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadVisibleFrameWithFlatBuffers(const flatbuffers::BoolFrame *flatbuffers)"
		},
		 "int Layout::findFirstFocusEnabledWidgetIndex()": {
			"prefix": "int Layout::findFirstFocusEnabledWidgetIndex()",
			"body": [
				"int Layout:findFirstFocusEnabledWidgetIndex()"
			],
			"description": "int Layout::findFirstFocusEnabledWidgetIndex()"
		},
		 "void DataReaderHelper::addDataFromFileAsync(const std::string& imagePath, const std::string& plistPath, const std::string& filePath, Ref *target, SEL_SCHEDULE selector)": {
			"prefix": "void DataReaderHelper::addDataFromFileAsync(const std::string& imagePath, const std::string& plistPath, const std::string& filePath, Ref *target, SEL_SCHEDULE selector)",
			"body": [
				"DataReaderHelper:addDataFromFileAsync(${1:std:string& imagePath},${2:std:string& plistPath},${3:std:string& filePath},${4:Ref *target},${5:SEL_SCHEDULE selector})"
			],
			"description": "void DataReaderHelper::addDataFromFileAsync(const std::string& imagePath, const std::string& plistPath, const std::string& filePath, Ref *target, SEL_SCHEDULE selector)"
		},
		 "void NodeLoader::onHandlePropTypeDegrees(Node * pNode, Node * pParent, const char* pPropertyName, float pDegrees, CCBReader * ccbReader)": {
			"prefix": "void NodeLoader::onHandlePropTypeDegrees(Node * pNode, Node * pParent, const char* pPropertyName, float pDegrees, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:onHandlePropTypeDegrees(${1:Node * pNode},${2:Node * pParent},${3:char* pPropertyName},${4:float pDegrees},${5:CCBReader * ccbReader})"
			],
			"description": "void NodeLoader::onHandlePropTypeDegrees(Node * pNode, Node * pParent, const char* pPropertyName, float pDegrees, CCBReader * ccbReader)"
		},
		 "cocos2d::Vec3 Physics3DRigidBody::getTotalForce() const": {
			"prefix": "cocos2d::Vec3 Physics3DRigidBody::getTotalForce() const",
			"body": [
				"cocos2d:Vec3 Physics3DRigidBody:getTotalForce() "
			],
			"description": "cocos2d::Vec3 Physics3DRigidBody::getTotalForce() const"
		},
		 "void Armature::setAnimation(ArmatureAnimation *animation)": {
			"prefix": "void Armature::setAnimation(ArmatureAnimation *animation)",
			"body": [
				"Armature:setAnimation(${1:ArmatureAnimation *animation})"
			],
			"description": "void Armature::setAnimation(ArmatureAnimation *animation)"
		},
		 "void EditBoxImplCommon::setPlaceholderFont(const char* pFontName, int fontSize)": {
			"prefix": "void EditBoxImplCommon::setPlaceholderFont(const char* pFontName, int fontSize)",
			"body": [
				"EditBoxImplCommon:setPlaceholderFont(${1:char* pFontName},${2:int fontSize})"
			],
			"description": "void EditBoxImplCommon::setPlaceholderFont(const char* pFontName, int fontSize)"
		},
		 "void GLProgramCache::purgeSharedShaderCache()": {
			"prefix": "void GLProgramCache::purgeSharedShaderCache()",
			"body": [
				"void GLProgramCache:purgeSharedShaderCache()"
			],
			"description": "void GLProgramCache::purgeSharedShaderCache()"
		},
		 "void Terrain::cacheUniformAttribLocation()": {
			"prefix": "void Terrain::cacheUniformAttribLocation()",
			"body": [
				"void Terrain:cacheUniformAttribLocation()"
			],
			"description": "void Terrain::cacheUniformAttribLocation()"
		},
		 "void ArmatureDataManager::addArmatureFileInfoAsync(const std::string& configFilePath, Ref *target, SEL_SCHEDULE selector)": {
			"prefix": "void ArmatureDataManager::addArmatureFileInfoAsync(const std::string& configFilePath, Ref *target, SEL_SCHEDULE selector)",
			"body": [
				"ArmatureDataManager:addArmatureFileInfoAsync(${1:std:string& configFilePath},${2:Ref *target},${3:SEL_SCHEDULE selector})"
			],
			"description": "void ArmatureDataManager::addArmatureFileInfoAsync(const std::string& configFilePath, Ref *target, SEL_SCHEDULE selector)"
		},
		 "Vec2 ScrollViewBar::calculatePosition(float innerContainerMeasure, float scrollViewMeasure, float innerContainerPosition, float outOfBoundaryValue, float length)": {
			"prefix": "Vec2 ScrollViewBar::calculatePosition(float innerContainerMeasure, float scrollViewMeasure, float innerContainerPosition, float outOfBoundaryValue, float length)",
			"body": [
				"ScrollViewBar:calculatePosition(${1:float innerContainerMeasure},${2:float scrollViewMeasure},${3:float innerContainerPosition},${4:float outOfBoundaryValue},${5:float length})"
			],
			"description": "Vec2 ScrollViewBar::calculatePosition(float innerContainerMeasure, float scrollViewMeasure, float innerContainerPosition, float outOfBoundaryValue, float length)"
		},
		 "Animate3D* Animate3D::create(Animation3D* animation, float fromTime, float duration)": {
			"prefix": "Animate3D* Animate3D::create(Animation3D* animation, float fromTime, float duration)",
			"body": [
				"Animate3D:create(${1:Animation3D* animation},${2:float fromTime},${3:float duration})"
			],
			"description": "Animate3D* Animate3D::create(Animation3D* animation, float fromTime, float duration)"
		},
		 "void Sprite::setPositionZ(float fVertexZ)": {
			"prefix": "void Sprite::setPositionZ(float fVertexZ)",
			"body": [
				"Sprite:setPositionZ(${1:float fVertexZ})"
			],
			"description": "void Sprite::setPositionZ(float fVertexZ)"
		},
		 "Layer *Layer::create()": {
			"prefix": "Layer *Layer::create()",
			"body": [
				"Layer *Layer:create()"
			],
			"description": "Layer *Layer::create()"
		},
		 "Liquid* Liquid::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)": {
			"prefix": "Liquid* Liquid::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)",
			"body": [
				"Liquid:create(${1:float duration},${2:Size& gridSize},${3:unsigned int waves},${4:float amplitude})"
			],
			"description": "Liquid* Liquid::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)"
		},
		 "ShakyTiles3D* ShakyTiles3D::create(float duration, const Size& gridSize, int range, bool shakeZ)": {
			"prefix": "ShakyTiles3D* ShakyTiles3D::create(float duration, const Size& gridSize, int range, bool shakeZ)",
			"body": [
				"ShakyTiles3D:create(${1:float duration},${2:Size& gridSize},${3:int range},${4:bool shakeZ})"
			],
			"description": "ShakyTiles3D* ShakyTiles3D::create(float duration, const Size& gridSize, int range, bool shakeZ)"
		},
		 "Data FileUtilsAndroid::getDataFromFile(const std::string& filename)": {
			"prefix": "Data FileUtilsAndroid::getDataFromFile(const std::string& filename)",
			"body": [
				"FileUtilsAndroid:getDataFromFile(${1:std:string& filename})"
			],
			"description": "Data FileUtilsAndroid::getDataFromFile(const std::string& filename)"
		},
		 "void ImageView::setTextureRect(const Rect &rect)": {
			"prefix": "void ImageView::setTextureRect(const Rect &rect)",
			"body": [
				"ImageView:setTextureRect(${1:Rect &rect})"
			],
			"description": "void ImageView::setTextureRect(const Rect &rect)"
		},
		 "void ProgressFromTo::update(float time)": {
			"prefix": "void ProgressFromTo::update(float time)",
			"body": [
				"ProgressFromTo:update(${1:float time})"
			],
			"description": "void ProgressFromTo::update(float time)"
		},
		 "CameraBackgroundSkyBoxBrush* CameraBackgroundBrush::createSkyboxBrush(const std::string& positive_x, const std::string& negative_x, const std::string& positive_y, const std::string& negative_y, const std::string& positive_z, const std::string& negative_z)": {
			"prefix": "CameraBackgroundSkyBoxBrush* CameraBackgroundBrush::createSkyboxBrush(const std::string& positive_x, const std::string& negative_x, const std::string& positive_y, const std::string& negative_y, const std::string& positive_z, const std::string& negative_z)",
			"body": [
				"CameraBackgroundBrush:createSkyboxBrush(${1:std:string& positive_x},${2:std:string& negative_x},${3:std:string& positive_y},${4:std:string& negative_y},${5:std:string& positive_z},${6:std:string& negative_z})"
			],
			"description": "CameraBackgroundSkyBoxBrush* CameraBackgroundBrush::createSkyboxBrush(const std::string& positive_x, const std::string& negative_x, const std::string& positive_y, const std::string& negative_y, const std::string& positive_z, const std::string& negative_z)"
		},
		 "void ParticleSystemQuad::postStep()": {
			"prefix": "void ParticleSystemQuad::postStep()",
			"body": [
				"void ParticleSystemQuad:postStep()"
			],
			"description": "void ParticleSystemQuad::postStep()"
		},
		 "int IndexBuffer::getSizePerIndex() const": {
			"prefix": "int IndexBuffer::getSizePerIndex() const",
			"body": [
				"int IndexBuffer:getSizePerIndex() "
			],
			"description": "int IndexBuffer::getSizePerIndex() const"
		},
		 "void Terrain::Chunk::finish()": {
			"prefix": "void Terrain::Chunk::finish()",
			"body": [
				"void Terrain:Chunk:finish()"
			],
			"description": "void Terrain::Chunk::finish()"
		},
		 "void Mat4::multiply(float scalar, Mat4* dst) const": {
			"prefix": "void Mat4::multiply(float scalar, Mat4* dst) const",
			"body": [
				"Mat4:multiply(${1:float scalar},${2:Mat4* dst})"
			],
			"description": "void Mat4::multiply(float scalar, Mat4* dst) const"
		},
		 "void Texture2D::drawAtPoint(const Vec2& point)": {
			"prefix": "void Texture2D::drawAtPoint(const Vec2& point)",
			"body": [
				"Texture2D:drawAtPoint(${1:Vec2& point})"
			],
			"description": "void Texture2D::drawAtPoint(const Vec2& point)"
		},
		 "void MenuItemLabel::activate()": {
			"prefix": "void MenuItemLabel::activate()",
			"body": [
				"void MenuItemLabel:activate()"
			],
			"description": "void MenuItemLabel::activate()"
		},
		 "std::string ComAttribute::getString(const std::string& key, const std::string& def) const": {
			"prefix": "std::string ComAttribute::getString(const std::string& key, const std::string& def) const",
			"body": [
				"ComAttribute:getString(${1:std:string& key},${2:std:string& def})"
			],
			"description": "std::string ComAttribute::getString(const std::string& key, const std::string& def) const"
		},
		 "float Properties::getFloat(const char* name) const": {
			"prefix": "float Properties::getFloat(const char* name) const",
			"body": [
				"Properties:getFloat(${1:char* name})"
			],
			"description": "float Properties::getFloat(const char* name) const"
		},
		 "void BoneNode::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4& parentTransform, uint32_t parentFlags)": {
			"prefix": "void BoneNode::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4& parentTransform, uint32_t parentFlags)",
			"body": [
				"BoneNode:visit(${1:cocos2d:Renderer *renderer},${2:cocos2d:Mat4& parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void BoneNode::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4& parentTransform, uint32_t parentFlags)"
		},
		 "void DataReaderHelper::decodeNode(BaseData *node, const rapidjson::Value& json, DataInfo *dataInfo)": {
			"prefix": "void DataReaderHelper::decodeNode(BaseData *node, const rapidjson::Value& json, DataInfo *dataInfo)",
			"body": [
				"DataReaderHelper:decodeNode(${1:BaseData *node},${2:rapidjson:Value& json},${3:DataInfo *dataInfo})"
			],
			"description": "void DataReaderHelper::decodeNode(BaseData *node, const rapidjson::Value& json, DataInfo *dataInfo)"
		},
		 "const Size& ScrollView::getInnerContainerSize() const": {
			"prefix": "const Size& ScrollView::getInnerContainerSize() const",
			"body": [
				" Size& ScrollView:getInnerContainerSize() "
			],
			"description": "const Size& ScrollView::getInnerContainerSize() const"
		},
		 "bool MenuItemAtlasFont::initWithString(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, const ccMenuCallback& callback)": {
			"prefix": "bool MenuItemAtlasFont::initWithString(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, const ccMenuCallback& callback)",
			"body": [
				"MenuItemAtlasFont:initWithString(${1:std:string& value},${2:std:string& charMapFile},${3:int itemWidth},${4:int itemHeight},${5:char startCharMap},${6:ccMenuCallback& callback})"
			],
			"description": "bool MenuItemAtlasFont::initWithString(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, const ccMenuCallback& callback)"
		},
		 "void Layout::setStencilClippingSize(const Size &size)": {
			"prefix": "void Layout::setStencilClippingSize(const Size &size)",
			"body": [
				"Layout:setStencilClippingSize(${1:Size &size})"
			],
			"description": "void Layout::setStencilClippingSize(const Size &size)"
		},
		 "bool SimpleAudioEngine::isBackgroundMusicPlaying()": {
			"prefix": "bool SimpleAudioEngine::isBackgroundMusicPlaying()",
			"body": [
				"bool SimpleAudioEngine:isBackgroundMusicPlaying()"
			],
			"description": "bool SimpleAudioEngine::isBackgroundMusicPlaying()"
		},
		 "void ImageView::setScale9Enabled(bool able)": {
			"prefix": "void ImageView::setScale9Enabled(bool able)",
			"body": [
				"ImageView:setScale9Enabled(${1:bool able})"
			],
			"description": "void ImageView::setScale9Enabled(bool able)"
		},
		 "bool TMXLayer::initWithTilesetInfo(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)": {
			"prefix": "bool TMXLayer::initWithTilesetInfo(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)",
			"body": [
				"TMXLayer:initWithTilesetInfo(${1:TMXTilesetInfo *tilesetInfo},${2:TMXLayerInfo *layerInfo},${3:TMXMapInfo *mapInfo})"
			],
			"description": "bool TMXLayer::initWithTilesetInfo(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)"
		},
		 "FlipX * FlipX::clone() const": {
			"prefix": "FlipX * FlipX::clone() const",
			"body": [
				"FlipX * FlipX:clone() "
			],
			"description": "FlipX * FlipX::clone() const"
		},
		 "void DisplayFactory::createDisplay(Bone *bone, DecorativeDisplay *decoDisplay)": {
			"prefix": "void DisplayFactory::createDisplay(Bone *bone, DecorativeDisplay *decoDisplay)",
			"body": [
				"DisplayFactory:createDisplay(${1:Bone *bone},${2:DecorativeDisplay *decoDisplay})"
			],
			"description": "void DisplayFactory::createDisplay(Bone *bone, DecorativeDisplay *decoDisplay)"
		},
		 "bool ParticleSystemQuad::initWithTotalParticles(int numberOfParticles)": {
			"prefix": "bool ParticleSystemQuad::initWithTotalParticles(int numberOfParticles)",
			"body": [
				"ParticleSystemQuad:initWithTotalParticles(${1:int numberOfParticles})"
			],
			"description": "bool ParticleSystemQuad::initWithTotalParticles(int numberOfParticles)"
		},
		 "void ActionManager::actionAllocWithHashElement(tHashElement *element)": {
			"prefix": "void ActionManager::actionAllocWithHashElement(tHashElement *element)",
			"body": [
				"ActionManager:actionAllocWithHashElement(${1:tHashElement *element})"
			],
			"description": "void ActionManager::actionAllocWithHashElement(tHashElement *element)"
		},
		 "void TextureCache::reloadAllTextures()": {
			"prefix": "void TextureCache::reloadAllTextures()",
			"body": [
				"void TextureCache:reloadAllTextures()"
			],
			"description": "void TextureCache::reloadAllTextures()"
		},
		 "int ActionNode::getLastFrameIndex()": {
			"prefix": "int ActionNode::getLastFrameIndex()",
			"body": [
				"int ActionNode:getLastFrameIndex()"
			],
			"description": "int ActionNode::getLastFrameIndex()"
		},
		 "void Sprite::setTexture(Texture2D *texture)": {
			"prefix": "void Sprite::setTexture(Texture2D *texture)",
			"body": [
				"Sprite:setTexture(${1:Texture2D *texture})"
			],
			"description": "void Sprite::setTexture(Texture2D *texture)"
		},
		 "SpriteFrame* SpriteFrame::create(const std::string& filename, const Rect& rect)": {
			"prefix": "SpriteFrame* SpriteFrame::create(const std::string& filename, const Rect& rect)",
			"body": [
				"SpriteFrame:create(${1:std:string& filename},${2:Rect& rect})"
			],
			"description": "SpriteFrame* SpriteFrame::create(const std::string& filename, const Rect& rect)"
		},
		 "void ParticleSystem::setSpeedVar(float speedVar)": {
			"prefix": "void ParticleSystem::setSpeedVar(float speedVar)",
			"body": [
				"ParticleSystem:setSpeedVar(${1:float speedVar})"
			],
			"description": "void ParticleSystem::setSpeedVar(float speedVar)"
		},
		 "Widget* CheckBox::createCloneInstance()": {
			"prefix": "Widget* CheckBox::createCloneInstance()",
			"body": [
				"Widget* CheckBox:createCloneInstance()"
			],
			"description": "Widget* CheckBox::createCloneInstance()"
		},
		 "Size Layout::getLayoutAccumulatedSize()const": {
			"prefix": "Size Layout::getLayoutAccumulatedSize()const",
			"body": [
				"Size Layout:getLayoutAccumulatedSize()"
			],
			"description": "Size Layout::getLayoutAccumulatedSize()const"
		},
		 "void Renderer::popGroup()": {
			"prefix": "void Renderer::popGroup()",
			"body": [
				"void Renderer:popGroup()"
			],
			"description": "void Renderer::popGroup()"
		},
		 "void LabelTTF::disableStroke(bool updateTexture)": {
			"prefix": "void LabelTTF::disableStroke(bool updateTexture)",
			"body": [
				"LabelTTF:disableStroke(${1:bool updateTexture})"
			],
			"description": "void LabelTTF::disableStroke(bool updateTexture)"
		},
		 "TextureCache* Director::getTextureCache() const": {
			"prefix": "TextureCache* Director::getTextureCache() const",
			"body": [
				"TextureCache* Director:getTextureCache() "
			],
			"description": "TextureCache* Director::getTextureCache() const"
		},
		 "void EaseQuarticActionInOut::update(float time)": {
			"prefix": "void EaseQuarticActionInOut::update(float time)",
			"body": [
				"EaseQuarticActionInOut:update(${1:float time})"
			],
			"description": "void EaseQuarticActionInOut::update(float time)"
		},
		 "void UniformValue::setVec2v(ssize_t size, const Vec2* pointer)": {
			"prefix": "void UniformValue::setVec2v(ssize_t size, const Vec2* pointer)",
			"body": [
				"UniformValue:setVec2v(${1:ssize_t size},${2:Vec2* pointer})"
			],
			"description": "void UniformValue::setVec2v(ssize_t size, const Vec2* pointer)"
		},
		 "bool WebViewImpl::canGoForward()": {
			"prefix": "bool WebViewImpl::canGoForward()",
			"body": [
				"bool WebViewImpl:canGoForward()"
			],
			"description": "bool WebViewImpl::canGoForward()"
		},
		 "TransitionCrossFade* TransitionCrossFade::create(float t, Scene* scene)": {
			"prefix": "TransitionCrossFade* TransitionCrossFade::create(float t, Scene* scene)",
			"body": [
				"TransitionCrossFade:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionCrossFade* TransitionCrossFade::create(float t, Scene* scene)"
		},
		 "void ImageView::setCapInsets(const Rect &capInsets)": {
			"prefix": "void ImageView::setCapInsets(const Rect &capInsets)",
			"body": [
				"ImageView:setCapInsets(${1:Rect &capInsets})"
			],
			"description": "void ImageView::setCapInsets(const Rect &capInsets)"
		},
		 "int FlatBuffersSerialize::getResourceType(std::string key)": {
			"prefix": "int FlatBuffersSerialize::getResourceType(std::string key)",
			"body": [
				"FlatBuffersSerialize:getResourceType(${1:std:string key})"
			],
			"description": "int FlatBuffersSerialize::getResourceType(std::string key)"
		},
		 "ssize_t PointArray::count() const": {
			"prefix": "ssize_t PointArray::count() const",
			"body": [
				"ssize_t PointArray:count() "
			],
			"description": "ssize_t PointArray::count() const"
		},
		 "float DictionaryHelper::getFloatValue_json(const rapidjson::Value& root,const char* key, float def)": {
			"prefix": "float DictionaryHelper::getFloatValue_json(const rapidjson::Value& root,const char* key, float def)",
			"body": [
				"DictionaryHelper:getFloatValue_json(${1:rapidjson:Value& root},${2:char* key},${3:float def})"
			],
			"description": "float DictionaryHelper::getFloatValue_json(const rapidjson::Value& root,const char* key, float def)"
		},
		 "bool WebViewImpl::canGoBack()": {
			"prefix": "bool WebViewImpl::canGoBack()",
			"body": [
				"bool WebViewImpl:canGoBack()"
			],
			"description": "bool WebViewImpl::canGoBack()"
		},
		 "float PhysicsJointRatchet::getRatchet() const": {
			"prefix": "float PhysicsJointRatchet::getRatchet() const",
			"body": [
				"float PhysicsJointRatchet:getRatchet() "
			],
			"description": "float PhysicsJointRatchet::getRatchet() const"
		},
		 "void Director::runWithScene(Scene *scene)": {
			"prefix": "void Director::runWithScene(Scene *scene)",
			"body": [
				"Director:runWithScene(${1:Scene *scene})"
			],
			"description": "void Director::runWithScene(Scene *scene)"
		},
		 "std::set<std::string>* CCBReader::getAnimatedProperties()": {
			"prefix": "std::set<std::string>* CCBReader::getAnimatedProperties()",
			"body": [
				"std:set<std:string>* CCBReader:getAnimatedProperties()"
			],
			"description": "std::set<std::string>* CCBReader::getAnimatedProperties()"
		},
		 "MenuItemFont * MenuItemFont::create(const std::string& value)": {
			"prefix": "MenuItemFont * MenuItemFont::create(const std::string& value)",
			"body": [
				"* MenuItemFont:create(${1:std:string& value})"
			],
			"description": "MenuItemFont * MenuItemFont::create(const std::string& value)"
		},
		 "void AndroidJavaEngine::playBackgroundMusic(const char* filePath, bool loop)": {
			"prefix": "void AndroidJavaEngine::playBackgroundMusic(const char* filePath, bool loop)",
			"body": [
				"AndroidJavaEngine:playBackgroundMusic(${1:char* filePath},${2:bool loop})"
			],
			"description": "void AndroidJavaEngine::playBackgroundMusic(const char* filePath, bool loop)"
		},
		 "void Blink::update(float time)": {
			"prefix": "void Blink::update(float time)",
			"body": [
				"Blink:update(${1:float time})"
			],
			"description": "void Blink::update(float time)"
		},
		 "TransitionFadeTR* TransitionFadeTR::create(float t, Scene* scene)": {
			"prefix": "TransitionFadeTR* TransitionFadeTR::create(float t, Scene* scene)",
			"body": [
				"TransitionFadeTR:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionFadeTR* TransitionFadeTR::create(float t, Scene* scene)"
		},
		 "void ComAudio::setLoop(bool loop)": {
			"prefix": "void ComAudio::setLoop(bool loop)",
			"body": [
				"ComAudio:setLoop(${1:bool loop})"
			],
			"description": "void ComAudio::setLoop(bool loop)"
		},
		 "void Node::schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)": {
			"prefix": "void Node::schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)",
			"body": [
				"Node:schedule(${1:SEL_SCHEDULE selector},${2:float interval},${3:unsigned int repeat},${4:float delay})"
			],
			"description": "void Node::schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)"
		},
		 "void CCBAnimationManager::addDocumentOutletName(std::string name)": {
			"prefix": "void CCBAnimationManager::addDocumentOutletName(std::string name)",
			"body": [
				"CCBAnimationManager:addDocumentOutletName(${1:std:string name})"
			],
			"description": "void CCBAnimationManager::addDocumentOutletName(std::string name)"
		},
		 "Hide * Hide::create()": {
			"prefix": "Hide * Hide::create()",
			"body": [
				"Hide * Hide:create()"
			],
			"description": "Hide * Hide::create()"
		},
		 "ssize_t BundleReader::read(void* ptr, ssize_t size, ssize_t count)": {
			"prefix": "ssize_t BundleReader::read(void* ptr, ssize_t size, ssize_t count)",
			"body": [
				"BundleReader:read(${1:void* ptr},${2:ssize_t size},${3:ssize_t count})"
			],
			"description": "ssize_t BundleReader::read(void* ptr, ssize_t size, ssize_t count)"
		},
		 "spTrackEntry* SkeletonAnimation::getCurrent (int trackIndex)": {
			"prefix": "spTrackEntry* SkeletonAnimation::getCurrent (int trackIndex)",
			"body": [
				"SkeletonAnimation:getCurrent (${1:int trackIndex})"
			],
			"description": "spTrackEntry* SkeletonAnimation::getCurrent (int trackIndex)"
		},
		 "void Button::setCapInsetsNormalRenderer(const Rect &capInsets)": {
			"prefix": "void Button::setCapInsetsNormalRenderer(const Rect &capInsets)",
			"body": [
				"Button:setCapInsetsNormalRenderer(${1:Rect &capInsets})"
			],
			"description": "void Button::setCapInsetsNormalRenderer(const Rect &capInsets)"
		},
		 "bool PhysicsContact::init(PhysicsShape* a, PhysicsShape* b)": {
			"prefix": "bool PhysicsContact::init(PhysicsShape* a, PhysicsShape* b)",
			"body": [
				"PhysicsContact:init(${1:PhysicsShape* a},${2:PhysicsShape* b})"
			],
			"description": "bool PhysicsContact::init(PhysicsShape* a, PhysicsShape* b)"
		},
		 "Widget* Layout::getChildWidgetByIndex(ssize_t index)const": {
			"prefix": "Widget* Layout::getChildWidgetByIndex(ssize_t index)const",
			"body": [
				"Layout:getChildWidgetByIndex(${1:ssize_t index})"
			],
			"description": "Widget* Layout::getChildWidgetByIndex(ssize_t index)const"
		},
		 "void ScrollView::dispatchEvent(ScrollviewEventType scrollEventType, EventType eventType)": {
			"prefix": "void ScrollView::dispatchEvent(ScrollviewEventType scrollEventType, EventType eventType)",
			"body": [
				"ScrollView:dispatchEvent(${1:ScrollviewEventType scrollEventType},${2:EventType eventType})"
			],
			"description": "void ScrollView::dispatchEvent(ScrollviewEventType scrollEventType, EventType eventType)"
		},
		 "void CCBReader::addOwnerOutletNode(Node *node)": {
			"prefix": "void CCBReader::addOwnerOutletNode(Node *node)",
			"body": [
				"CCBReader:addOwnerOutletNode(${1:Node *node})"
			],
			"description": "void CCBReader::addOwnerOutletNode(Node *node)"
		},
		 "int EnhanceAPI::setResolutionPercent(int n)": {
			"prefix": "int EnhanceAPI::setResolutionPercent(int n)",
			"body": [
				"EnhanceAPI:setResolutionPercent(${1:int n})"
			],
			"description": "int EnhanceAPI::setResolutionPercent(int n)"
		},
		 "unsigned int Scheduler::scheduleScriptFunc(unsigned int handler, float interval, bool paused)": {
			"prefix": "unsigned int Scheduler::scheduleScriptFunc(unsigned int handler, float interval, bool paused)",
			"body": [
				"int Scheduler:scheduleScriptFunc(${1:unsigned int handler},${2:float interval},${3:bool paused})"
			],
			"description": "unsigned int Scheduler::scheduleScriptFunc(unsigned int handler, float interval, bool paused)"
		},
		 "void ScrollView::removeChild(Node* child, bool cleanup)": {
			"prefix": "void ScrollView::removeChild(Node* child, bool cleanup)",
			"body": [
				"ScrollView:removeChild(${1:Node* child},${2:bool cleanup})"
			],
			"description": "void ScrollView::removeChild(Node* child, bool cleanup)"
		},
		 "void Physics3DSliderConstraint::setMaxAngMotorForce(float maxAngMotorForce)": {
			"prefix": "void Physics3DSliderConstraint::setMaxAngMotorForce(float maxAngMotorForce)",
			"body": [
				"Physics3DSliderConstraint:setMaxAngMotorForce(${1:float maxAngMotorForce})"
			],
			"description": "void Physics3DSliderConstraint::setMaxAngMotorForce(float maxAngMotorForce)"
		},
		 "bool ComponentContainer::remove(Component *com)": {
			"prefix": "bool ComponentContainer::remove(Component *com)",
			"body": [
				"ComponentContainer:remove(${1:Component *com})"
			],
			"description": "bool ComponentContainer::remove(Component *com)"
		},
		 "void SpriteFrameCacheHelper::purge()": {
			"prefix": "void SpriteFrameCacheHelper::purge()",
			"body": [
				"void SpriteFrameCacheHelper:purge()"
			],
			"description": "void SpriteFrameCacheHelper::purge()"
		},
		 "int Layout::findNearestChildWidgetIndex(FocusDirection direction, Widget* baseWidget)": {
			"prefix": "int Layout::findNearestChildWidgetIndex(FocusDirection direction, Widget* baseWidget)",
			"body": [
				"Layout:findNearestChildWidgetIndex(${1:FocusDirection direction},${2:Widget* baseWidget})"
			],
			"description": "int Layout::findNearestChildWidgetIndex(FocusDirection direction, Widget* baseWidget)"
		},
		 "void VideoPlayer::setVisible(bool visible)": {
			"prefix": "void VideoPlayer::setVisible(bool visible)",
			"body": [
				"VideoPlayer:setVisible(${1:bool visible})"
			],
			"description": "void VideoPlayer::setVisible(bool visible)"
		},
		 "float PhysicsJointRotarySpring::getRestAngle() const": {
			"prefix": "float PhysicsJointRotarySpring::getRestAngle() const",
			"body": [
				"float PhysicsJointRotarySpring:getRestAngle() "
			],
			"description": "float PhysicsJointRotarySpring::getRestAngle() const"
		},
		 "void Physics3DRigidBody::setRollingFriction( float frict )": {
			"prefix": "void Physics3DRigidBody::setRollingFriction( float frict )",
			"body": [
				"Physics3DRigidBody:setRollingFriction(${1:float frict})"
			],
			"description": "void Physics3DRigidBody::setRollingFriction( float frict )"
		},
		 "FontAtlas * FontCharMap::createFontAtlas()": {
			"prefix": "FontAtlas * FontCharMap::createFontAtlas()",
			"body": [
				"FontAtlas * FontCharMap:createFontAtlas()"
			],
			"description": "FontAtlas * FontCharMap::createFontAtlas()"
		},
		 "void RadioButtonGroup::setAllowedNoSelection(bool allowedNoSelection)": {
			"prefix": "void RadioButtonGroup::setAllowedNoSelection(bool allowedNoSelection)",
			"body": [
				"RadioButtonGroup:setAllowedNoSelection(${1:bool allowedNoSelection})"
			],
			"description": "void RadioButtonGroup::setAllowedNoSelection(bool allowedNoSelection)"
		},
		 "void Label::setAdditionalKerning(float space)": {
			"prefix": "void Label::setAdditionalKerning(float space)",
			"body": [
				"Label:setAdditionalKerning(${1:float space})"
			],
			"description": "void Label::setAdditionalKerning(float space)"
		},
		 "Application* Application::sharedApplication()": {
			"prefix": "Application* Application::sharedApplication()",
			"body": [
				"Application* Application:sharedApplication()"
			],
			"description": "Application* Application::sharedApplication()"
		},
		 "bool FileUtilsAndroid::isAbsolutePath(const std::string& strPath) const": {
			"prefix": "bool FileUtilsAndroid::isAbsolutePath(const std::string& strPath) const",
			"body": [
				"FileUtilsAndroid:isAbsolutePath(${1:std:string& strPath})"
			],
			"description": "bool FileUtilsAndroid::isAbsolutePath(const std::string& strPath) const"
		},
		 "void DataReaderHelper::addDataFromJsonCache(const std::string& fileContent, DataInfo *dataInfo)": {
			"prefix": "void DataReaderHelper::addDataFromJsonCache(const std::string& fileContent, DataInfo *dataInfo)",
			"body": [
				"DataReaderHelper:addDataFromJsonCache(${1:std:string& fileContent},${2:DataInfo *dataInfo})"
			],
			"description": "void DataReaderHelper::addDataFromJsonCache(const std::string& fileContent, DataInfo *dataInfo)"
		},
		 "void DrawNode::onDraw(const Mat4 &transform, uint32_t flags)": {
			"prefix": "void DrawNode::onDraw(const Mat4 &transform, uint32_t flags)",
			"body": [
				"DrawNode:onDraw(${1:Mat4 &transform},${2:uint32_t flags})"
			],
			"description": "void DrawNode::onDraw(const Mat4 &transform, uint32_t flags)"
		},
		 "Place * Place::clone() const": {
			"prefix": "Place * Place::clone() const",
			"body": [
				"Place * Place:clone() "
			],
			"description": "Place * Place::clone() const"
		},
		 "void DataReaderHelper::addDataAsyncCallBack(float dt)": {
			"prefix": "void DataReaderHelper::addDataAsyncCallBack(float dt)",
			"body": [
				"DataReaderHelper:addDataAsyncCallBack(${1:float dt})"
			],
			"description": "void DataReaderHelper::addDataAsyncCallBack(float dt)"
		},
		 "void PhysicsBody::setVelocityLimit(float limit)": {
			"prefix": "void PhysicsBody::setVelocityLimit(float limit)",
			"body": [
				"PhysicsBody:setVelocityLimit(${1:float limit})"
			],
			"description": "void PhysicsBody::setVelocityLimit(float limit)"
		},
		 "void PrettyPrinter::visit(const __Float *p)": {
			"prefix": "void PrettyPrinter::visit(const __Float *p)",
			"body": [
				"PrettyPrinter:visit(${1:__Float *p})"
			],
			"description": "void PrettyPrinter::visit(const __Float *p)"
		},
		 "Vec3 Grid3D::getOriginalVertex(const Vec2& pos) const": {
			"prefix": "Vec3 Grid3D::getOriginalVertex(const Vec2& pos) const",
			"body": [
				"Grid3D:getOriginalVertex(${1:Vec2& pos})"
			],
			"description": "Vec3 Grid3D::getOriginalVertex(const Vec2& pos) const"
		},
		 "void TextBMFont::setFntFile(const std::string& fileName)": {
			"prefix": "void TextBMFont::setFntFile(const std::string& fileName)",
			"body": [
				"TextBMFont:setFntFile(${1:std:string& fileName})"
			],
			"description": "void TextBMFont::setFntFile(const std::string& fileName)"
		},
		 "void Spawn::startWithTarget(Node *target)": {
			"prefix": "void Spawn::startWithTarget(Node *target)",
			"body": [
				"Spawn:startWithTarget(${1:Node *target})"
			],
			"description": "void Spawn::startWithTarget(Node *target)"
		},
		 "std::sort(sceneGraphListeners->begin(), sceneGraphListeners->end(), [this](const EventListener* l1, const EventListener* l2)": {
			"prefix": "std::sort(sceneGraphListeners->begin(), sceneGraphListeners->end(), [this](const EventListener* l1, const EventListener* l2)",
			"body": [
				"std:sort(sceneGraphListeners->begin(), sceneGraphListeners->end(), [this]( EventListener* l1,  EventListener* l2)"
			],
			"description": "std::sort(sceneGraphListeners->begin(), sceneGraphListeners->end(), [this](const EventListener* l1, const EventListener* l2)"
		},
		 "void DisplayFactory::addParticleDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)": {
			"prefix": "void DisplayFactory::addParticleDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)",
			"body": [
				"DisplayFactory:addParticleDisplay(${1:Bone *bone},${2:DecorativeDisplay *decoDisplay},${3:DisplayData *displayData})"
			],
			"description": "void DisplayFactory::addParticleDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)"
		},
		 "void ScrollView::moveChildrenToPosition(const Vec2& position)": {
			"prefix": "void ScrollView::moveChildrenToPosition(const Vec2& position)",
			"body": [
				"ScrollView:moveChildrenToPosition(${1:Vec2& position})"
			],
			"description": "void ScrollView::moveChildrenToPosition(const Vec2& position)"
		},
		 "void TiledGrid3D::setTile(const Vec2& pos, const Quad3& coords)": {
			"prefix": "void TiledGrid3D::setTile(const Vec2& pos, const Quad3& coords)",
			"body": [
				"TiledGrid3D:setTile(${1:Vec2& pos},${2:Quad3& coords})"
			],
			"description": "void TiledGrid3D::setTile(const Vec2& pos, const Quad3& coords)"
		},
		 "TurnOffTiles* TurnOffTiles::create(float duration, const Size& gridSize)": {
			"prefix": "TurnOffTiles* TurnOffTiles::create(float duration, const Size& gridSize)",
			"body": [
				"TurnOffTiles:create(${1:float duration},${2:Size& gridSize})"
			],
			"description": "TurnOffTiles* TurnOffTiles::create(float duration, const Size& gridSize)"
		},
		 "void Mesh::setTexture(const std::string& texPath)": {
			"prefix": "void Mesh::setTexture(const std::string& texPath)",
			"body": [
				"Mesh:setTexture(${1:std:string& texPath})"
			],
			"description": "void Mesh::setTexture(const std::string& texPath)"
		},
		 "void ListView::setDirection(Direction dir)": {
			"prefix": "void ListView::setDirection(Direction dir)",
			"body": [
				"ListView:setDirection(${1:Direction dir})"
			],
			"description": "void ListView::setDirection(Direction dir)"
		},
		 "float FadeOutDownTiles::testFunc(const Size& pos, float time)": {
			"prefix": "float FadeOutDownTiles::testFunc(const Size& pos, float time)",
			"body": [
				"FadeOutDownTiles:testFunc(${1:Size& pos},${2:float time})"
			],
			"description": "float FadeOutDownTiles::testFunc(const Size& pos, float time)"
		},
		 "bool RenderTexture::initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat eFormat)": {
			"prefix": "bool RenderTexture::initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat eFormat)",
			"body": [
				"RenderTexture:initWithWidthAndHeight(${1:int w},${2:int h},${3:Texture2D:PixelFormat eFormat})"
			],
			"description": "bool RenderTexture::initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat eFormat)"
		},
		 "void UICCTextField::setMaxLengthEnabled(bool enable)": {
			"prefix": "void UICCTextField::setMaxLengthEnabled(bool enable)",
			"body": [
				"UICCTextField:setMaxLengthEnabled(${1:bool enable})"
			],
			"description": "void UICCTextField::setMaxLengthEnabled(bool enable)"
		},
		 "bool MenuItemToggle::initWithCallback(const ccMenuCallback &callback, MenuItem *item, va_list args)": {
			"prefix": "bool MenuItemToggle::initWithCallback(const ccMenuCallback &callback, MenuItem *item, va_list args)",
			"body": [
				"MenuItemToggle:initWithCallback(${1:ccMenuCallback &callback},${2:MenuItem *item},${3:va_list args})"
			],
			"description": "bool MenuItemToggle::initWithCallback(const ccMenuCallback &callback, MenuItem *item, va_list args)"
		},
		 "void PhysicsJointGroove::setGrooveB(const Vec2& grooveB)": {
			"prefix": "void PhysicsJointGroove::setGrooveB(const Vec2& grooveB)",
			"body": [
				"PhysicsJointGroove:setGrooveB(${1:Vec2& grooveB})"
			],
			"description": "void PhysicsJointGroove::setGrooveB(const Vec2& grooveB)"
		},
		 "void ComAttribute::setFloat(const std::string& key, float value)": {
			"prefix": "void ComAttribute::setFloat(const std::string& key, float value)",
			"body": [
				"ComAttribute:setFloat(${1:std:string& key},${2:float value})"
			],
			"description": "void ComAttribute::setFloat(const std::string& key, float value)"
		},
		 "TextureData *DataReaderHelper::decodeTexture(const rapidjson::Value& json)": {
			"prefix": "TextureData *DataReaderHelper::decodeTexture(const rapidjson::Value& json)",
			"body": [
				"*DataReaderHelper:decodeTexture(${1:rapidjson:Value& json})"
			],
			"description": "TextureData *DataReaderHelper::decodeTexture(const rapidjson::Value& json)"
		},
		 "Vec3::Vec3(const float* array)": {
			"prefix": "Vec3::Vec3(const float* array)",
			"body": [
				"array})"
			],
			"description": "Vec3::Vec3(const float* array)"
		},
		 "ArmatureData *DataReaderHelper::decodeArmature(const rapidjson::Value& json, DataInfo *dataInfo)": {
			"prefix": "ArmatureData *DataReaderHelper::decodeArmature(const rapidjson::Value& json, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeArmature(${1:rapidjson:Value& json},${2:DataInfo *dataInfo})"
			],
			"description": "ArmatureData *DataReaderHelper::decodeArmature(const rapidjson::Value& json, DataInfo *dataInfo)"
		},
		 "void NodeLoaderLibrary::registerDefaultNodeLoaders()": {
			"prefix": "void NodeLoaderLibrary::registerDefaultNodeLoaders()",
			"body": [
				"void NodeLoaderLibrary:registerDefaultNodeLoaders()"
			],
			"description": "void NodeLoaderLibrary::registerDefaultNodeLoaders()"
		},
		 "bool EventListenerFocus::checkAvailable()": {
			"prefix": "bool EventListenerFocus::checkAvailable()",
			"body": [
				"bool EventListenerFocus:checkAvailable()"
			],
			"description": "bool EventListenerFocus::checkAvailable()"
		},
		 "int SocketIOPacketV10x::typeAsNumber()const": {
			"prefix": "int SocketIOPacketV10x::typeAsNumber()const",
			"body": [
				"int SocketIOPacketV10x:typeAsNumber()"
			],
			"description": "int SocketIOPacketV10x::typeAsNumber()const"
		},
		 "void PrettyPrinter::visitObject(const Ref *p)": {
			"prefix": "void PrettyPrinter::visitObject(const Ref *p)",
			"body": [
				"PrettyPrinter:visitObject(${1:Ref *p})"
			],
			"description": "void PrettyPrinter::visitObject(const Ref *p)"
		},
		 "void ActionInstant::update(float time)": {
			"prefix": "void ActionInstant::update(float time)",
			"body": [
				"ActionInstant:update(${1:float time})"
			],
			"description": "void ActionInstant::update(float time)"
		},
		 "void ArmatureDataManager::removeArmatureData(const std::string& id)": {
			"prefix": "void ArmatureDataManager::removeArmatureData(const std::string& id)",
			"body": [
				"ArmatureDataManager:removeArmatureData(${1:std:string& id})"
			],
			"description": "void ArmatureDataManager::removeArmatureData(const std::string& id)"
		},
		 "PhysicsBody* PhysicsBody::createPolygon(const Vec2* points, int count, const PhysicsMaterial& material, const Vec2& offset)": {
			"prefix": "PhysicsBody* PhysicsBody::createPolygon(const Vec2* points, int count, const PhysicsMaterial& material, const Vec2& offset)",
			"body": [
				"PhysicsBody:createPolygon(${1:Vec2* points},${2:int count},${3:PhysicsMaterial& material},${4:Vec2& offset})"
			],
			"description": "PhysicsBody* PhysicsBody::createPolygon(const Vec2* points, int count, const PhysicsMaterial& material, const Vec2& offset)"
		},
		 "bool Properties::parseVec2(const char* str, Vec2* out)": {
			"prefix": "bool Properties::parseVec2(const char* str, Vec2* out)",
			"body": [
				"Properties:parseVec2(${1:char* str},${2:Vec2* out})"
			],
			"description": "bool Properties::parseVec2(const char* str, Vec2* out)"
		},
		 "int PhysicsBody::getCategoryBitmask() const": {
			"prefix": "int PhysicsBody::getCategoryBitmask() const",
			"body": [
				"int PhysicsBody:getCategoryBitmask() "
			],
			"description": "int PhysicsBody::getCategoryBitmask() const"
		},
		 "ClippingRectangleNode* ClippingRectangleNode::create(const Rect& clippingRegion)": {
			"prefix": "ClippingRectangleNode* ClippingRectangleNode::create(const Rect& clippingRegion)",
			"body": [
				"ClippingRectangleNode:create(${1:Rect& clippingRegion})"
			],
			"description": "ClippingRectangleNode* ClippingRectangleNode::create(const Rect& clippingRegion)"
		},
		 "void VolatileTextureMgr::addDataTexture(Texture2D *tt, void* data, int dataLen, Texture2D::PixelFormat pixelFormat, const Size& contentSize)": {
			"prefix": "void VolatileTextureMgr::addDataTexture(Texture2D *tt, void* data, int dataLen, Texture2D::PixelFormat pixelFormat, const Size& contentSize)",
			"body": [
				"VolatileTextureMgr:addDataTexture(${1:Texture2D *tt},${2:void* data},${3:int dataLen},${4:Texture2D:PixelFormat pixelFormat},${5:Size& contentSize})"
			],
			"description": "void VolatileTextureMgr::addDataTexture(Texture2D *tt, void* data, int dataLen, Texture2D::PixelFormat pixelFormat, const Size& contentSize)"
		},
		 "bool __String::boolValue() const": {
			"prefix": "bool __String::boolValue() const",
			"body": [
				"bool __String:boolValue() "
			],
			"description": "bool __String::boolValue() const"
		},
		 "void RelativeLayoutParameter::setAlign(RelativeAlign align)": {
			"prefix": "void RelativeLayoutParameter::setAlign(RelativeAlign align)",
			"body": [
				"RelativeLayoutParameter:setAlign(${1:RelativeAlign align})"
			],
			"description": "void RelativeLayoutParameter::setAlign(RelativeAlign align)"
		},
		 "GLuint Texture2D::getName() const": {
			"prefix": "GLuint Texture2D::getName() const",
			"body": [
				"GLuint Texture2D:getName() "
			],
			"description": "GLuint Texture2D::getName() const"
		},
		 "VertexAttribBinding* VertexAttribBinding::create(MeshIndexData* meshIndexData, GLProgramState* glProgramState)": {
			"prefix": "VertexAttribBinding* VertexAttribBinding::create(MeshIndexData* meshIndexData, GLProgramState* glProgramState)",
			"body": [
				"VertexAttribBinding:create(${1:MeshIndexData* meshIndexData},${2:GLProgramState* glProgramState})"
			],
			"description": "VertexAttribBinding* VertexAttribBinding::create(MeshIndexData* meshIndexData, GLProgramState* glProgramState)"
		},
		 "void Vec4::set(const Vec4& p1, const Vec4& p2)": {
			"prefix": "void Vec4::set(const Vec4& p1, const Vec4& p2)",
			"body": [
				"Vec4:set(${1:Vec4& p1},${2:Vec4& p2})"
			],
			"description": "void Vec4::set(const Vec4& p1, const Vec4& p2)"
		},
		 "CatmullRomBy* CatmullRomBy::clone() const": {
			"prefix": "CatmullRomBy* CatmullRomBy::clone() const",
			"body": [
				"CatmullRomBy* CatmullRomBy:clone() "
			],
			"description": "CatmullRomBy* CatmullRomBy::clone() const"
		},
		 "bool RelativeBox::init()": {
			"prefix": "bool RelativeBox::init()",
			"body": [
				"bool RelativeBox:init()"
			],
			"description": "bool RelativeBox::init()"
		},
		 "void Component::setEnabled(bool b)": {
			"prefix": "void Component::setEnabled(bool b)",
			"body": [
				"Component:setEnabled(${1:bool b})"
			],
			"description": "void Component::setEnabled(bool b)"
		},
		 "void CCBAnimationManager::setSequences(const Vector<CCBSequence*>& seq)": {
			"prefix": "void CCBAnimationManager::setSequences(const Vector<CCBSequence*>& seq)",
			"body": [
				"CCBAnimationManager:setSequences(${1:Vector<CCBSequence*>& seq})"
			],
			"description": "void CCBAnimationManager::setSequences(const Vector<CCBSequence*>& seq)"
		},
		 "void LabelBMFont::setLineBreakWithoutSpace( bool breakWithoutSpace )": {
			"prefix": "void LabelBMFont::setLineBreakWithoutSpace( bool breakWithoutSpace )",
			"body": [
				"LabelBMFont:setLineBreakWithoutSpace(${1:bool breakWithoutSpace})"
			],
			"description": "void LabelBMFont::setLineBreakWithoutSpace( bool breakWithoutSpace )"
		},
		 "bool Value::asBool() const": {
			"prefix": "bool Value::asBool() const",
			"body": [
				"bool Value:asBool() "
			],
			"description": "bool Value::asBool() const"
		},
		 "bool TargetedAction::initWithTarget(Node* target, FiniteTimeAction* action)": {
			"prefix": "bool TargetedAction::initWithTarget(Node* target, FiniteTimeAction* action)",
			"body": [
				"TargetedAction:initWithTarget(${1:Node* target},${2:FiniteTimeAction* action})"
			],
			"description": "bool TargetedAction::initWithTarget(Node* target, FiniteTimeAction* action)"
		},
		 "void RenderState::StateBlock::setState(const std::string& name, const std::string& value)": {
			"prefix": "void RenderState::StateBlock::setState(const std::string& name, const std::string& value)",
			"body": [
				"RenderState:StateBlock:setState(${1:std:string& name},${2:std:string& value})"
			],
			"description": "void RenderState::StateBlock::setState(const std::string& name, const std::string& value)"
		},
		 "bool  Layout::isWidgetAncestorSupportLoopFocus(Widget* widget, FocusDirection direction)const": {
			"prefix": "bool  Layout::isWidgetAncestorSupportLoopFocus(Widget* widget, FocusDirection direction)const",
			"body": [
				"Layout:isWidgetAncestorSupportLoopFocus(${1:Widget* widget},${2:FocusDirection direction})"
			],
			"description": "bool  Layout::isWidgetAncestorSupportLoopFocus(Widget* widget, FocusDirection direction)const"
		},
		 "void SpriteFrameCache::addSpriteFramesWithFileContent(const std::string& plist_content, Texture2D *texture)": {
			"prefix": "void SpriteFrameCache::addSpriteFramesWithFileContent(const std::string& plist_content, Texture2D *texture)",
			"body": [
				"SpriteFrameCache:addSpriteFramesWithFileContent(${1:std:string& plist_content},${2:Texture2D *texture})"
			],
			"description": "void SpriteFrameCache::addSpriteFramesWithFileContent(const std::string& plist_content, Texture2D *texture)"
		},
		 "float PhysicsShapePolygon::calculateDefaultMoment()": {
			"prefix": "float PhysicsShapePolygon::calculateDefaultMoment()",
			"body": [
				"float PhysicsShapePolygon:calculateDefaultMoment()"
			],
			"description": "float PhysicsShapePolygon::calculateDefaultMoment()"
		},
		 "float Terrain::getHeight(float x, float z, Vec3 * normal) const": {
			"prefix": "float Terrain::getHeight(float x, float z, Vec3 * normal) const",
			"body": [
				"Terrain:getHeight(${1:float x},${2:float z},${3:Vec3 * normal})"
			],
			"description": "float Terrain::getHeight(float x, float z, Vec3 * normal) const"
		},
		 "void NavMeshDebugDraw::drawImplement(const cocos2d::Mat4& transform, uint32_t flags)": {
			"prefix": "void NavMeshDebugDraw::drawImplement(const cocos2d::Mat4& transform, uint32_t flags)",
			"body": [
				"NavMeshDebugDraw:drawImplement(${1:cocos2d:Mat4& transform},${2:uint32_t flags})"
			],
			"description": "void NavMeshDebugDraw::drawImplement(const cocos2d::Mat4& transform, uint32_t flags)"
		},
		 "bool ImageView::isScale9Enabled()const": {
			"prefix": "bool ImageView::isScale9Enabled()const",
			"body": [
				"bool ImageView:isScale9Enabled()"
			],
			"description": "bool ImageView::isScale9Enabled()const"
		},
		 "void EaseOut::update(float time)": {
			"prefix": "void EaseOut::update(float time)",
			"body": [
				"EaseOut:update(${1:float time})"
			],
			"description": "void EaseOut::update(float time)"
		},
		 "ssize_t Mesh::getIndexCount() const": {
			"prefix": "ssize_t Mesh::getIndexCount() const",
			"body": [
				"ssize_t Mesh:getIndexCount() "
			],
			"description": "ssize_t Mesh::getIndexCount() const"
		},
		 "std::string Node::getName() const": {
			"prefix": "std::string Node::getName() const",
			"body": [
				"std:string Node:getName() "
			],
			"description": "std::string Node::getName() const"
		},
		 "void cocos2d::NavMeshAgent::onEnter()": {
			"prefix": "void cocos2d::NavMeshAgent::onEnter()",
			"body": [
				"void cocos2d:NavMeshAgent:onEnter()"
			],
			"description": "void cocos2d::NavMeshAgent::onEnter()"
		},
		 "void LabelTTF::setFontName(const std::string& fontName)": {
			"prefix": "void LabelTTF::setFontName(const std::string& fontName)",
			"body": [
				"LabelTTF:setFontName(${1:std:string& fontName})"
			],
			"description": "void LabelTTF::setFontName(const std::string& fontName)"
		},
		 "void Layer::onAcceleration(Acceleration* acc, Event* unused_event)": {
			"prefix": "void Layer::onAcceleration(Acceleration* acc, Event* unused_event)",
			"body": [
				"Layer:onAcceleration(${1:Acceleration* acc},${2:Event* unused_event})"
			],
			"description": "void Layer::onAcceleration(Acceleration* acc, Event* unused_event)"
		},
		 "Frame* ZOrderFrame::clone()": {
			"prefix": "Frame* ZOrderFrame::clone()",
			"body": [
				"Frame* ZOrderFrame:clone()"
			],
			"description": "Frame* ZOrderFrame::clone()"
		},
		 "void Physics3DConeTwistConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)": {
			"prefix": "void Physics3DConeTwistConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)",
			"body": [
				"Physics3DConeTwistConstraint:setFrames(${1:cocos2d:Mat4& frameA},${2:cocos2d:Mat4& frameB})"
			],
			"description": "void Physics3DConeTwistConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)"
		},
		 "void ColliderDetector::removeContourData(ContourData *contourData)": {
			"prefix": "void ColliderDetector::removeContourData(ContourData *contourData)",
			"body": [
				"ColliderDetector:removeContourData(${1:ContourData *contourData})"
			],
			"description": "void ColliderDetector::removeContourData(ContourData *contourData)"
		},
		 "LinearHorizontalLayoutManager* LinearHorizontalLayoutManager::create()": {
			"prefix": "LinearHorizontalLayoutManager* LinearHorizontalLayoutManager::create()",
			"body": [
				"LinearHorizontalLayoutManager* LinearHorizontalLayoutManager:create()"
			],
			"description": "LinearHorizontalLayoutManager* LinearHorizontalLayoutManager::create()"
		},
		 "void Physics3DRigidBody::applyForce( const cocos2d::Vec3& force, const cocos2d::Vec3& rel_pos )": {
			"prefix": "void Physics3DRigidBody::applyForce( const cocos2d::Vec3& force, const cocos2d::Vec3& rel_pos )",
			"body": [
				"Physics3DRigidBody:applyForce(${1:cocos2d:Vec3& force},${2:cocos2d:Vec3& rel_pos})"
			],
			"description": "void Physics3DRigidBody::applyForce( const cocos2d::Vec3& force, const cocos2d::Vec3& rel_pos )"
		},
		 "void Texture2D::convertRGBA8888ToA8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertRGBA8888ToA8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertRGBA8888ToA8(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertRGBA8888ToA8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "Ref* Ref::autorelease()": {
			"prefix": "Ref* Ref::autorelease()",
			"body": [
				"Ref* Ref:autorelease()"
			],
			"description": "Ref* Ref::autorelease()"
		},
		 "void __Array::removeObjectAtIndex(ssize_t index, bool releaseObj)": {
			"prefix": "void __Array::removeObjectAtIndex(ssize_t index, bool releaseObj)",
			"body": [
				"__Array:removeObjectAtIndex(${1:ssize_t index},${2:bool releaseObj})"
			],
			"description": "void __Array::removeObjectAtIndex(ssize_t index, bool releaseObj)"
		},
		 "char*	stExpCocoAttribDesc::GetName(CocoLoader* pCoco)": {
			"prefix": "char*	stExpCocoAttribDesc::GetName(CocoLoader* pCoco)",
			"body": [
				"pCoco})"
			],
			"description": "char*	stExpCocoAttribDesc::GetName(CocoLoader* pCoco)"
		},
		 "const char* CCBSequenceProperty::getName()": {
			"prefix": "const char* CCBSequenceProperty::getName()",
			"body": [
				" char* CCBSequenceProperty:getName()"
			],
			"description": "const char* CCBSequenceProperty::getName()"
		},
		 "ssize_t TextBMFont::getStringLength()const": {
			"prefix": "ssize_t TextBMFont::getStringLength()const",
			"body": [
				"ssize_t TextBMFont:getStringLength()"
			],
			"description": "ssize_t TextBMFont::getStringLength()const"
		},
		 "GLubyte Layout::getBackGroundColorOpacity()const": {
			"prefix": "GLubyte Layout::getBackGroundColorOpacity()const",
			"body": [
				"GLubyte Layout:getBackGroundColorOpacity()"
			],
			"description": "GLubyte Layout::getBackGroundColorOpacity()const"
		},
		 "void Properties::setVariable(const char* name, const char* value)": {
			"prefix": "void Properties::setVariable(const char* name, const char* value)",
			"body": [
				"Properties:setVariable(${1:char* name},${2:char* value})"
			],
			"description": "void Properties::setVariable(const char* name, const char* value)"
		},
		 "void Sprite3D::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void Sprite3D::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"Sprite3D:visit(${1:cocos2d:Renderer *renderer},${2:cocos2d:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void Sprite3D::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void ZipUtils::setPvrEncryptionKeyPart(int index, unsigned int value)": {
			"prefix": "void ZipUtils::setPvrEncryptionKeyPart(int index, unsigned int value)",
			"body": [
				"ZipUtils:setPvrEncryptionKeyPart(${1:int index},${2:unsigned int value})"
			],
			"description": "void ZipUtils::setPvrEncryptionKeyPart(int index, unsigned int value)"
		},
		 "void TransitionRotoZoom:: onEnter()": {
			"prefix": "void TransitionRotoZoom:: onEnter()",
			"body": [
				"void TransitionRotoZoom: onEnter()"
			],
			"description": "void TransitionRotoZoom:: onEnter()"
		},
		 "void WebViewImpl::reload()": {
			"prefix": "void WebViewImpl::reload()",
			"body": [
				"void WebViewImpl:reload()"
			],
			"description": "void WebViewImpl::reload()"
		},
		 "void OrbitCamera::sphericalRadius(float *newRadius, float *zenith, float *azimuth)": {
			"prefix": "void OrbitCamera::sphericalRadius(float *newRadius, float *zenith, float *azimuth)",
			"body": [
				"OrbitCamera:sphericalRadius(${1:float *newRadius},${2:float *zenith},${3:float *azimuth})"
			],
			"description": "void OrbitCamera::sphericalRadius(float *newRadius, float *zenith, float *azimuth)"
		},
		 "void __NotificationCenter::postNotification(const std::string& name, Ref *sender)": {
			"prefix": "void __NotificationCenter::postNotification(const std::string& name, Ref *sender)",
			"body": [
				"__NotificationCenter:postNotification(${1:std:string& name},${2:Ref *sender})"
			],
			"description": "void __NotificationCenter::postNotification(const std::string& name, Ref *sender)"
		},
		 "Node* Slider::getVirtualRenderer()": {
			"prefix": "Node* Slider::getVirtualRenderer()",
			"body": [
				"Node* Slider:getVirtualRenderer()"
			],
			"description": "Node* Slider::getVirtualRenderer()"
		},
		 "TransitionZoomFlipY* TransitionZoomFlipY::create(float t, Scene* s)": {
			"prefix": "TransitionZoomFlipY* TransitionZoomFlipY::create(float t, Scene* s)",
			"body": [
				"TransitionZoomFlipY:create(${1:float t},${2:Scene* s})"
			],
			"description": "TransitionZoomFlipY* TransitionZoomFlipY::create(float t, Scene* s)"
		},
		 "void LabelTTFLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char * pPropertyName, const char * pText, CCBReader * ccbReader)": {
			"prefix": "void LabelTTFLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char * pPropertyName, const char * pText, CCBReader * ccbReader)",
			"body": [
				"LabelTTFLoader:onHandlePropTypeText(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:char * pText},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelTTFLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char * pPropertyName, const char * pText, CCBReader * ccbReader)"
		},
		 "const cocos2d::Map<std::string, ArmatureData*>& ArmatureDataManager::getArmatureDatas() const": {
			"prefix": "const cocos2d::Map<std::string, ArmatureData*>& ArmatureDataManager::getArmatureDatas() const",
			"body": [
				" cocos2d:Map<std:string, ArmatureData*>& ArmatureDataManager:getArmatureDatas() "
			],
			"description": "const cocos2d::Map<std::string, ArmatureData*>& ArmatureDataManager::getArmatureDatas() const"
		},
		 "bool ActionInstant::isDone() const": {
			"prefix": "bool ActionInstant::isDone() const",
			"body": [
				"bool ActionInstant:isDone() "
			],
			"description": "bool ActionInstant::isDone() const"
		},
		 "cocos2d::Vec3 Physics3DRigidBody::getLinearFactor() const": {
			"prefix": "cocos2d::Vec3 Physics3DRigidBody::getLinearFactor() const",
			"body": [
				"cocos2d:Vec3 Physics3DRigidBody:getLinearFactor() "
			],
			"description": "cocos2d::Vec3 Physics3DRigidBody::getLinearFactor() const"
		},
		 "Animate* Animate::reverse() const": {
			"prefix": "Animate* Animate::reverse() const",
			"body": [
				"Animate* Animate:reverse() "
			],
			"description": "Animate* Animate::reverse() const"
		},
		 "RotateTo* RotateTo::clone(void) const": {
			"prefix": "RotateTo* RotateTo::clone(void) const",
			"body": [
				"RotateTo:clone(${1:void})"
			],
			"description": "RotateTo* RotateTo::clone(void) const"
		},
		 "void VertexAttribBinding::parseAttributes()": {
			"prefix": "void VertexAttribBinding::parseAttributes()",
			"body": [
				"void VertexAttribBinding:parseAttributes()"
			],
			"description": "void VertexAttribBinding::parseAttributes()"
		},
		 "void ScrollViewLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)": {
			"prefix": "void ScrollViewLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)",
			"body": [
				"ScrollViewLoader:onHandlePropTypeCheck(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:bool pCheck},${5:CCBReader * ccbReader})"
			],
			"description": "void ScrollViewLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)"
		},
		 "void WsThreadHelper::quitSubThread()": {
			"prefix": "void WsThreadHelper::quitSubThread()",
			"body": [
				"void WsThreadHelper:quitSubThread()"
			],
			"description": "void WsThreadHelper::quitSubThread()"
		},
		 "void SkeletonRenderer::setSkeletonData (spSkeletonData *skeletonData, bool ownsSkeletonData)": {
			"prefix": "void SkeletonRenderer::setSkeletonData (spSkeletonData *skeletonData, bool ownsSkeletonData)",
			"body": [
				"SkeletonRenderer:setSkeletonData (${1:spSkeletonData *skeletonData},${2:bool ownsSkeletonData})"
			],
			"description": "void SkeletonRenderer::setSkeletonData (spSkeletonData *skeletonData, bool ownsSkeletonData)"
		},
		 "void SkeletonRenderer::setOpacityModifyRGB (bool value)": {
			"prefix": "void SkeletonRenderer::setOpacityModifyRGB (bool value)",
			"body": [
				"SkeletonRenderer:setOpacityModifyRGB (${1:bool value})"
			],
			"description": "void SkeletonRenderer::setOpacityModifyRGB (bool value)"
		},
		 "Vec3 NavMeshAgent::getVelocity() const": {
			"prefix": "Vec3 NavMeshAgent::getVelocity() const",
			"body": [
				"Vec3 NavMeshAgent:getVelocity() "
			],
			"description": "Vec3 NavMeshAgent::getVelocity() const"
		},
		 "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const ccMenuCallback& callback)": {
			"prefix": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const ccMenuCallback& callback)",
			"body": [
				"* MenuItemImage:create(${1:std:string& normalImage},${2:std:string& selectedImage},${3:ccMenuCallback& callback})"
			],
			"description": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const ccMenuCallback& callback)"
		},
		 "const char* SceneReader::sceneReaderVersion()": {
			"prefix": "const char* SceneReader::sceneReaderVersion()",
			"body": [
				" char* SceneReader:sceneReaderVersion()"
			],
			"description": "const char* SceneReader::sceneReaderVersion()"
		},
		 "Layout::Type ScrollView::getLayoutType() const": {
			"prefix": "Layout::Type ScrollView::getLayoutType() const",
			"body": [
				"Layout:Type ScrollView:getLayoutType() "
			],
			"description": "Layout::Type ScrollView::getLayoutType() const"
		},
		 "cocos2d::Mat4 Physics3DSliderConstraint::getFrameOffsetB() const": {
			"prefix": "cocos2d::Mat4 Physics3DSliderConstraint::getFrameOffsetB() const",
			"body": [
				"cocos2d:Mat4 Physics3DSliderConstraint:getFrameOffsetB() "
			],
			"description": "cocos2d::Mat4 Physics3DSliderConstraint::getFrameOffsetB() const"
		},
		 "void BatchNode::addChild(Node *child, int zOrder, int tag)": {
			"prefix": "void BatchNode::addChild(Node *child, int zOrder, int tag)",
			"body": [
				"BatchNode:addChild(${1:Node *child},${2:int zOrder},${3:int tag})"
			],
			"description": "void BatchNode::addChild(Node *child, int zOrder, int tag)"
		},
		 "SkewBy* SkewBy::reverse() const": {
			"prefix": "SkewBy* SkewBy::reverse() const",
			"body": [
				"SkewBy* SkewBy:reverse() "
			],
			"description": "SkewBy* SkewBy::reverse() const"
		},
		 "Spawn* Spawn::clone(void) const": {
			"prefix": "Spawn* Spawn::clone(void) const",
			"body": [
				"Spawn:clone(${1:void})"
			],
			"description": "Spawn* Spawn::clone(void) const"
		},
		 "void ArmatureAnimation::pause()": {
			"prefix": "void ArmatureAnimation::pause()",
			"body": [
				"void ArmatureAnimation:pause()"
			],
			"description": "void ArmatureAnimation::pause()"
		},
		 "bool GLViewImpl::initWithFullscreen(const std::string &viewname, const GLFWvidmode &videoMode, GLFWmonitor *monitor)": {
			"prefix": "bool GLViewImpl::initWithFullscreen(const std::string &viewname, const GLFWvidmode &videoMode, GLFWmonitor *monitor)",
			"body": [
				"GLViewImpl:initWithFullscreen(${1:std:string &viewname},${2:GLFWvidmode &videoMode},${3:GLFWmonitor *monitor})"
			],
			"description": "bool GLViewImpl::initWithFullscreen(const std::string &viewname, const GLFWvidmode &videoMode, GLFWmonitor *monitor)"
		},
		 "void TextureCache::removeTextureForKey(const std::string &textureKeyName)": {
			"prefix": "void TextureCache::removeTextureForKey(const std::string &textureKeyName)",
			"body": [
				"TextureCache:removeTextureForKey(${1:std:string &textureKeyName})"
			],
			"description": "void TextureCache::removeTextureForKey(const std::string &textureKeyName)"
		},
		 "bool Widget::isFocusEnabled()const": {
			"prefix": "bool Widget::isFocusEnabled()const",
			"body": [
				"bool Widget:isFocusEnabled()"
			],
			"description": "bool Widget::isFocusEnabled()const"
		},
		 "void TextFieldTTF::setColorSpaceHolder(const Color3B& color)": {
			"prefix": "void TextFieldTTF::setColorSpaceHolder(const Color3B& color)",
			"body": [
				"TextFieldTTF:setColorSpaceHolder(${1:Color3B& color})"
			],
			"description": "void TextFieldTTF::setColorSpaceHolder(const Color3B& color)"
		},
		 "void Scheduler::unscheduleAllWithMinPriority(int minPriority)": {
			"prefix": "void Scheduler::unscheduleAllWithMinPriority(int minPriority)",
			"body": [
				"Scheduler:unscheduleAllWithMinPriority(${1:int minPriority})"
			],
			"description": "void Scheduler::unscheduleAllWithMinPriority(int minPriority)"
		},
		 "void PhysicsWorld::addBodyOrDelay(PhysicsBody* body)": {
			"prefix": "void PhysicsWorld::addBodyOrDelay(PhysicsBody* body)",
			"body": [
				"PhysicsWorld:addBodyOrDelay(${1:PhysicsBody* body})"
			],
			"description": "void PhysicsWorld::addBodyOrDelay(PhysicsBody* body)"
		},
		 "bool ParticleBatchNode::initWithTexture(Texture2D *tex, int capacity)": {
			"prefix": "bool ParticleBatchNode::initWithTexture(Texture2D *tex, int capacity)",
			"body": [
				"ParticleBatchNode:initWithTexture(${1:Texture2D *tex},${2:int capacity})"
			],
			"description": "bool ParticleBatchNode::initWithTexture(Texture2D *tex, int capacity)"
		},
		 "float CCBKeyframe::getEasingOpt()": {
			"prefix": "float CCBKeyframe::getEasingOpt()",
			"body": [
				"float CCBKeyframe:getEasingOpt()"
			],
			"description": "float CCBKeyframe::getEasingOpt()"
		},
		 "void DirectionLight::setDirection(const Vec3 &dir)": {
			"prefix": "void DirectionLight::setDirection(const Vec3 &dir)",
			"body": [
				"DirectionLight:setDirection(${1:Vec3 &dir})"
			],
			"description": "void DirectionLight::setDirection(const Vec3 &dir)"
		},
		 "void LabelBMFontLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)": {
			"prefix": "void LabelBMFontLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)",
			"body": [
				"LabelBMFontLoader:onHandlePropTypeColor3(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:Color3B pColor3B},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelBMFontLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)"
		},
		 "void SocketIO::destroyInstance()": {
			"prefix": "void SocketIO::destroyInstance()",
			"body": [
				"void SocketIO:destroyInstance()"
			],
			"description": "void SocketIO::destroyInstance()"
		},
		 "void VideoPlayer::drawDebugData()": {
			"prefix": "void VideoPlayer::drawDebugData()",
			"body": [
				"void VideoPlayer:drawDebugData()"
			],
			"description": "void VideoPlayer::drawDebugData()"
		},
		 "void LabelAtlas::setString(const std::string &label)": {
			"prefix": "void LabelAtlas::setString(const std::string &label)",
			"body": [
				"LabelAtlas:setString(${1:std:string &label})"
			],
			"description": "void LabelAtlas::setString(const std::string &label)"
		},
		 "void Physics3DSliderConstraint::setSoftnessLimAng(float softnessLimAng)": {
			"prefix": "void Physics3DSliderConstraint::setSoftnessLimAng(float softnessLimAng)",
			"body": [
				"Physics3DSliderConstraint:setSoftnessLimAng(${1:float softnessLimAng})"
			],
			"description": "void Physics3DSliderConstraint::setSoftnessLimAng(float softnessLimAng)"
		},
		 "ShuffleTiles* ShuffleTiles::create(float duration, const Size& gridSize, unsigned int seed)": {
			"prefix": "ShuffleTiles* ShuffleTiles::create(float duration, const Size& gridSize, unsigned int seed)",
			"body": [
				"ShuffleTiles:create(${1:float duration},${2:Size& gridSize},${3:unsigned int seed})"
			],
			"description": "ShuffleTiles* ShuffleTiles::create(float duration, const Size& gridSize, unsigned int seed)"
		},
		 "bool MenuItemLabel::initWithLabel(Node* label, const ccMenuCallback& callback)": {
			"prefix": "bool MenuItemLabel::initWithLabel(Node* label, const ccMenuCallback& callback)",
			"body": [
				"MenuItemLabel:initWithLabel(${1:Node* label},${2:ccMenuCallback& callback})"
			],
			"description": "bool MenuItemLabel::initWithLabel(Node* label, const ccMenuCallback& callback)"
		},
		 "RemoveSelf *RemoveSelf::reverse() const": {
			"prefix": "RemoveSelf *RemoveSelf::reverse() const",
			"body": [
				"RemoveSelf *RemoveSelf:reverse() "
			],
			"description": "RemoveSelf *RemoveSelf::reverse() const"
		},
		 "void RotationSkewFrame::onEnter(Frame *nextFrame, int currentFrameIndex)": {
			"prefix": "void RotationSkewFrame::onEnter(Frame *nextFrame, int currentFrameIndex)",
			"body": [
				"RotationSkewFrame:onEnter(${1:Frame *nextFrame},${2:int currentFrameIndex})"
			],
			"description": "void RotationSkewFrame::onEnter(Frame *nextFrame, int currentFrameIndex)"
		},
		 "void ActionObject::stop()": {
			"prefix": "void ActionObject::stop()",
			"body": [
				"void ActionObject:stop()"
			],
			"description": "void ActionObject::stop()"
		},
		 "void AtlasNode::setTexture(Texture2D *texture)": {
			"prefix": "void AtlasNode::setTexture(Texture2D *texture)",
			"body": [
				"AtlasNode:setTexture(${1:Texture2D *texture})"
			],
			"description": "void AtlasNode::setTexture(Texture2D *texture)"
		},
		 "void ScrollView::scrollToPercentHorizontal(float percent, float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToPercentHorizontal(float percent, float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToPercentHorizontal(${1:float percent},${2:float second},${3:bool attenuated})"
			],
			"description": "void ScrollView::scrollToPercentHorizontal(float percent, float second, bool attenuated)"
		},
		 "cocos2d::Mat4 convertbtTransformToMat4( const btTransform &btTrans )": {
			"prefix": "cocos2d::Mat4 convertbtTransformToMat4( const btTransform &btTrans )",
			"body": [
				"convertbtTransformToMat4(${1:btTransform &btTrans})"
			],
			"description": "cocos2d::Mat4 convertbtTransformToMat4( const btTransform &btTrans )"
		},
		 "TextureAtlas * AtlasNode::getTextureAtlas() const": {
			"prefix": "TextureAtlas * AtlasNode::getTextureAtlas() const",
			"body": [
				"TextureAtlas * AtlasNode:getTextureAtlas() "
			],
			"description": "TextureAtlas * AtlasNode::getTextureAtlas() const"
		},
		 "bool Node::isCascadeColorEnabled(void) const": {
			"prefix": "bool Node::isCascadeColorEnabled(void) const",
			"body": [
				"Node:isCascadeColorEnabled(${1:void})"
			],
			"description": "bool Node::isCascadeColorEnabled(void) const"
		},
		 "void Animate3D::setQuality(Animate3DQuality quality)": {
			"prefix": "void Animate3D::setQuality(Animate3DQuality quality)",
			"body": [
				"Animate3D:setQuality(${1:Animate3DQuality quality})"
			],
			"description": "void Animate3D::setQuality(Animate3DQuality quality)"
		},
		 "float ParticleSystem::getEndRadius() const": {
			"prefix": "float ParticleSystem::getEndRadius() const",
			"body": [
				"float ParticleSystem:getEndRadius() "
			],
			"description": "float ParticleSystem::getEndRadius() const"
		},
		 "Frame* PositionFrame::clone()": {
			"prefix": "Frame* PositionFrame::clone()",
			"body": [
				"Frame* PositionFrame:clone()"
			],
			"description": "Frame* PositionFrame::clone()"
		},
		 "void Text::setFontName(const std::string& name)": {
			"prefix": "void Text::setFontName(const std::string& name)",
			"body": [
				"Text:setFontName(${1:std:string& name})"
			],
			"description": "void Text::setFontName(const std::string& name)"
		},
		 "void Node::unscheduleAllCallbacks()": {
			"prefix": "void Node::unscheduleAllCallbacks()",
			"body": [
				"void Node:unscheduleAllCallbacks()"
			],
			"description": "void Node::unscheduleAllCallbacks()"
		},
		 "void CCBReader::setResolutionScale(float scale)": {
			"prefix": "void CCBReader::setResolutionScale(float scale)",
			"body": [
				"CCBReader:setResolutionScale(${1:float scale})"
			],
			"description": "void CCBReader::setResolutionScale(float scale)"
		},
		 "void TransitionSlideInB:: initScenes()": {
			"prefix": "void TransitionSlideInB:: initScenes()",
			"body": [
				"void TransitionSlideInB: initScenes()"
			],
			"description": "void TransitionSlideInB:: initScenes()"
		},
		 "bool Physics3DHingeConstraint::getAngularOnly() const": {
			"prefix": "bool Physics3DHingeConstraint::getAngularOnly() const",
			"body": [
				"bool Physics3DHingeConstraint:getAngularOnly() "
			],
			"description": "bool Physics3DHingeConstraint::getAngularOnly() const"
		},
		 "void Menu::addChild(Node * child, int zOrder, const std::string &name)": {
			"prefix": "void Menu::addChild(Node * child, int zOrder, const std::string &name)",
			"body": [
				"Menu:addChild(${1:Node * child},${2:int zOrder},${3:std:string &name})"
			],
			"description": "void Menu::addChild(Node * child, int zOrder, const std::string &name)"
		},
		 "bool Rect::equals(const Rect& rect) const": {
			"prefix": "bool Rect::equals(const Rect& rect) const",
			"body": [
				"Rect:equals(${1:Rect& rect})"
			],
			"description": "bool Rect::equals(const Rect& rect) const"
		},
		 "bool TimerTargetCallback::initWithCallback(Scheduler* scheduler, const ccSchedulerFunc& callback, void *target, const std::string& key, float seconds, unsigned int repeat, float delay)": {
			"prefix": "bool TimerTargetCallback::initWithCallback(Scheduler* scheduler, const ccSchedulerFunc& callback, void *target, const std::string& key, float seconds, unsigned int repeat, float delay)",
			"body": [
				"TimerTargetCallback:initWithCallback(${1:Scheduler* scheduler},${2:ccSchedulerFunc& callback},${3:void *target},${4:std:string& key},${5:float seconds},${6:unsigned int repeat},${7:float delay})"
			],
			"description": "bool TimerTargetCallback::initWithCallback(Scheduler* scheduler, const ccSchedulerFunc& callback, void *target, const std::string& key, float seconds, unsigned int repeat, float delay)"
		},
		 "void Layout::onBeforeVisitStencil()": {
			"prefix": "void Layout::onBeforeVisitStencil()",
			"body": [
				"void Layout:onBeforeVisitStencil()"
			],
			"description": "void Layout::onBeforeVisitStencil()"
		},
		 "void Sprite::debugDraw(bool on)": {
			"prefix": "void Sprite::debugDraw(bool on)",
			"body": [
				"Sprite:debugDraw(${1:bool on})"
			],
			"description": "void Sprite::debugDraw(bool on)"
		},
		 "void InputDelegate::setKeypadEnabled(bool enabled)": {
			"prefix": "void InputDelegate::setKeypadEnabled(bool enabled)",
			"body": [
				"InputDelegate:setKeypadEnabled(${1:bool enabled})"
			],
			"description": "void InputDelegate::setKeypadEnabled(bool enabled)"
		},
		 "RotateBy* RotateBy::reverse() const": {
			"prefix": "RotateBy* RotateBy::reverse() const",
			"body": [
				"RotateBy* RotateBy:reverse() "
			],
			"description": "RotateBy* RotateBy::reverse() const"
		},
		 "Node* CCBReader::readNodeGraphFromData(std::shared_ptr<cocos2d::Data> data, Ref *pOwner, const Size &parentSize)": {
			"prefix": "Node* CCBReader::readNodeGraphFromData(std::shared_ptr<cocos2d::Data> data, Ref *pOwner, const Size &parentSize)",
			"body": [
				"CCBReader:readNodeGraphFromData(${1:std:shared_ptr<cocos2d:Data> data},${2:Ref *pOwner},${3:Size &parentSize})"
			],
			"description": "Node* CCBReader::readNodeGraphFromData(std::shared_ptr<cocos2d::Data> data, Ref *pOwner, const Size &parentSize)"
		},
		 "const std::string &startCharMap)": {
			"prefix": "const std::string &startCharMap)",
			"body": [
				" std:string &startCharMap)"
			],
			"description": "const std::string &startCharMap)"
		},
		 "void Downloader::downloadToFP(const std::string& srcUrl, const std::string& customId, const std::string& storagePath)": {
			"prefix": "void Downloader::downloadToFP(const std::string& srcUrl, const std::string& customId, const std::string& storagePath)",
			"body": [
				"Downloader:downloadToFP(${1:std:string& srcUrl},${2:std:string& customId},${3:std:string& storagePath})"
			],
			"description": "void Downloader::downloadToFP(const std::string& srcUrl, const std::string& customId, const std::string& storagePath)"
		},
		 "void Tween::play(MovementBoneData *movementBoneData, int durationTo, int durationTween,  int loop, int tweenEasing)": {
			"prefix": "void Tween::play(MovementBoneData *movementBoneData, int durationTo, int durationTween,  int loop, int tweenEasing)",
			"body": [
				"Tween:play(${1:MovementBoneData *movementBoneData},${2:int durationTo},${3:int durationTween},${4:int loop},${5:int tweenEasing})"
			],
			"description": "void Tween::play(MovementBoneData *movementBoneData, int durationTo, int durationTween,  int loop, int tweenEasing)"
		},
		 "void Mat4::createTranslation(const Vec3& translation, Mat4* dst)": {
			"prefix": "void Mat4::createTranslation(const Vec3& translation, Mat4* dst)",
			"body": [
				"Mat4:createTranslation(${1:Vec3& translation},${2:Mat4* dst})"
			],
			"description": "void Mat4::createTranslation(const Vec3& translation, Mat4* dst)"
		},
		 "void Layout::setBackGroundImageColor(const Color3B &color)": {
			"prefix": "void Layout::setBackGroundImageColor(const Color3B &color)",
			"body": [
				"Layout:setBackGroundImageColor(${1:Color3B &color})"
			],
			"description": "void Layout::setBackGroundImageColor(const Color3B &color)"
		},
		 "void EditBoxImplWin::setInputMode(EditBox::InputMode inputMode)": {
			"prefix": "void EditBoxImplWin::setInputMode(EditBox::InputMode inputMode)",
			"body": [
				"EditBoxImplWin:setInputMode(${1:EditBox:InputMode inputMode})"
			],
			"description": "void EditBoxImplWin::setInputMode(EditBox::InputMode inputMode)"
		},
		 "ProtectedNode * ProtectedNode::create(void)": {
			"prefix": "ProtectedNode * ProtectedNode::create(void)",
			"body": [
				"* ProtectedNode:create(${1:void})"
			],
			"description": "ProtectedNode * ProtectedNode::create(void)"
		},
		 "Vec2 EventMouse::getLocationInView() const": {
			"prefix": "Vec2 EventMouse::getLocationInView() const",
			"body": [
				"Vec2 EventMouse:getLocationInView() "
			],
			"description": "Vec2 EventMouse::getLocationInView() const"
		},
		 "BillBoard* BillBoard::create(Mode mode)": {
			"prefix": "BillBoard* BillBoard::create(Mode mode)",
			"body": [
				"BillBoard:create(${1:Mode mode})"
			],
			"description": "BillBoard* BillBoard::create(Mode mode)"
		},
		 "void Downloader::notifyError(ErrorCode code, const std::string& msg/* ="" */, const std::string& customId/* ="" */, int curle_code/* = CURLE_OK*/, int curlm_code/* = CURLM_OK*/)": {
			"prefix": "void Downloader::notifyError(ErrorCode code, const std::string& msg/* ="" */, const std::string& customId/* ="" */, int curle_code/* = CURLE_OK*/, int curlm_code/* = CURLM_OK*/)",
			"body": [
				"Downloader:notifyError(${1:ErrorCode code},${2:std:string& msg/* ="" */},${3:std:string& customId/* ="" */},${4:int curle_code/* = CURLE_OK*/},${5:int curlm_code/* = CURLM_OK*/})"
			],
			"description": "void Downloader::notifyError(ErrorCode code, const std::string& msg/* ="" */, const std::string& customId/* ="" */, int curle_code/* = CURLE_OK*/, int curlm_code/* = CURLM_OK*/)"
		},
		 "float ActionObject::getUnitTime()": {
			"prefix": "float ActionObject::getUnitTime()",
			"body": [
				"float ActionObject:getUnitTime()"
			],
			"description": "float ActionObject::getUnitTime()"
		},
		 "void CustomCommand::init(float globalOrder)": {
			"prefix": "void CustomCommand::init(float globalOrder)",
			"body": [
				"CustomCommand:init(${1:float globalOrder})"
			],
			"description": "void CustomCommand::init(float globalOrder)"
		},
		 "void Vec2::rotate(const Vec2& point, float angle)": {
			"prefix": "void Vec2::rotate(const Vec2& point, float angle)",
			"body": [
				"Vec2:rotate(${1:Vec2& point},${2:float angle})"
			],
			"description": "void Vec2::rotate(const Vec2& point, float angle)"
		},
		 "std::string NodeLoader::parsePropTypeFontTTF(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "std::string NodeLoader::parsePropTypeFontTTF(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeFontTTF(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "std::string NodeLoader::parsePropTypeFontTTF(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void MoveBy::startWithTarget(Node *target)": {
			"prefix": "void MoveBy::startWithTarget(Node *target)",
			"body": [
				"MoveBy:startWithTarget(${1:Node *target})"
			],
			"description": "void MoveBy::startWithTarget(Node *target)"
		},
		 "bool MenuItemSprite::initWithNormalSprite(Node* normalSprite, Node* selectedSprite, Node* disabledSprite, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "bool MenuItemSprite::initWithNormalSprite(Node* normalSprite, Node* selectedSprite, Node* disabledSprite, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"MenuItemSprite:initWithNormalSprite(${1:Node* normalSprite},${2:Node* selectedSprite},${3:Node* disabledSprite},${4:Ref* target},${5:SEL_MenuHandler selector})"
			],
			"description": "bool MenuItemSprite::initWithNormalSprite(Node* normalSprite, Node* selectedSprite, Node* disabledSprite, Ref* target, SEL_MenuHandler selector)"
		},
		 "void Label::setTextColor(const Color4B &color)": {
			"prefix": "void Label::setTextColor(const Color4B &color)",
			"body": [
				"Label:setTextColor(${1:Color4B &color})"
			],
			"description": "void Label::setTextColor(const Color4B &color)"
		},
		 "void Component::onEnter()": {
			"prefix": "void Component::onEnter()",
			"body": [
				"void Component:onEnter()"
			],
			"description": "void Component::onEnter()"
		},
		 "Node* LoadingBar::getVirtualRenderer()": {
			"prefix": "Node* LoadingBar::getVirtualRenderer()",
			"body": [
				"Node* LoadingBar:getVirtualRenderer()"
			],
			"description": "Node* LoadingBar::getVirtualRenderer()"
		},
		 "void Downloader::reportDownloadFinished(const std::string& url, const std::string& path, const std::string& customid)": {
			"prefix": "void Downloader::reportDownloadFinished(const std::string& url, const std::string& path, const std::string& customid)",
			"body": [
				"Downloader:reportDownloadFinished(${1:std:string& url},${2:std:string& path},${3:std:string& customid})"
			],
			"description": "void Downloader::reportDownloadFinished(const std::string& url, const std::string& path, const std::string& customid)"
		},
		 "void Layout::setBackGroundColorType(BackGroundColorType type)": {
			"prefix": "void Layout::setBackGroundColorType(BackGroundColorType type)",
			"body": [
				"Layout:setBackGroundColorType(${1:BackGroundColorType type})"
			],
			"description": "void Layout::setBackGroundColorType(BackGroundColorType type)"
		},
		 "void Mat4::transpose()": {
			"prefix": "void Mat4::transpose()",
			"body": [
				"void Mat4:transpose()"
			],
			"description": "void Mat4::transpose()"
		},
		 "bool SceneReader::readJson(const std::string &fileName, rapidjson::Document &doc)": {
			"prefix": "bool SceneReader::readJson(const std::string &fileName, rapidjson::Document &doc)",
			"body": [
				"SceneReader:readJson(${1:std:string &fileName},${2:rapidjson:Document &doc})"
			],
			"description": "bool SceneReader::readJson(const std::string &fileName, rapidjson::Document &doc)"
		},
		 "Menu* Menu::createWithItem(MenuItem* item)": {
			"prefix": "Menu* Menu::createWithItem(MenuItem* item)",
			"body": [
				"Menu:createWithItem(${1:MenuItem* item})"
			],
			"description": "Menu* Menu::createWithItem(MenuItem* item)"
		},
		 "void EditBoxImplWin::setText(const char* pText)": {
			"prefix": "void EditBoxImplWin::setText(const char* pText)",
			"body": [
				"EditBoxImplWin:setText(${1:char* pText})"
			],
			"description": "void EditBoxImplWin::setText(const char* pText)"
		},
		 "bool Image::initWithTGAData(tImageTGA* tgaData)": {
			"prefix": "bool Image::initWithTGAData(tImageTGA* tgaData)",
			"body": [
				"Image:initWithTGAData(${1:tImageTGA* tgaData})"
			],
			"description": "bool Image::initWithTGAData(tImageTGA* tgaData)"
		},
		 "void GLProgram::setUniformLocationWithMatrix3fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)": {
			"prefix": "void GLProgram::setUniformLocationWithMatrix3fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)",
			"body": [
				"GLProgram:setUniformLocationWithMatrix3fv(${1:GLint location},${2:GLfloat* matrixArray},${3:unsigned int numberOfMatrices})"
			],
			"description": "void GLProgram::setUniformLocationWithMatrix3fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)"
		},
		 "bool Widget::isClippingParentContainsPoint(const Vec2 &pt)": {
			"prefix": "bool Widget::isClippingParentContainsPoint(const Vec2 &pt)",
			"body": [
				"Widget:isClippingParentContainsPoint(${1:Vec2 &pt})"
			],
			"description": "bool Widget::isClippingParentContainsPoint(const Vec2 &pt)"
		},
		 "bool AudioEngineImpl::setCurrentTime(int audioID, float time)": {
			"prefix": "bool AudioEngineImpl::setCurrentTime(int audioID, float time)",
			"body": [
				"AudioEngineImpl:setCurrentTime(${1:int audioID},${2:float time})"
			],
			"description": "bool AudioEngineImpl::setCurrentTime(int audioID, float time)"
		},
		 "void LabelTTF::setTextDefinition(const FontDefinition& theDefinition)": {
			"prefix": "void LabelTTF::setTextDefinition(const FontDefinition& theDefinition)",
			"body": [
				"LabelTTF:setTextDefinition(${1:FontDefinition& theDefinition})"
			],
			"description": "void LabelTTF::setTextDefinition(const FontDefinition& theDefinition)"
		},
		 "Size Button::getNormalSize() const": {
			"prefix": "Size Button::getNormalSize() const",
			"body": [
				"Size Button:getNormalSize() "
			],
			"description": "Size Button::getNormalSize() const"
		},
		 "std::string ImageView::getDescription() const": {
			"prefix": "std::string ImageView::getDescription() const",
			"body": [
				"std:string ImageView:getDescription() "
			],
			"description": "std::string ImageView::getDescription() const"
		},
		 "void PolygonInfo::setQuad(V3F_C4B_T2F_Quad *quad)": {
			"prefix": "void PolygonInfo::setQuad(V3F_C4B_T2F_Quad *quad)",
			"body": [
				"PolygonInfo:setQuad(${1:V3F_C4B_T2F_Quad *quad})"
			],
			"description": "void PolygonInfo::setQuad(V3F_C4B_T2F_Quad *quad)"
		},
		 "const char*  EditBoxImplCommon::getText(void)": {
			"prefix": "const char*  EditBoxImplCommon::getText(void)",
			"body": [
				"char*  EditBoxImplCommon:getText(${1:void})"
			],
			"description": "const char*  EditBoxImplCommon::getText(void)"
		},
		 "void Physics3DHingeConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)": {
			"prefix": "void Physics3DHingeConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)",
			"body": [
				"Physics3DHingeConstraint:setFrames(${1:cocos2d:Mat4& frameA},${2:cocos2d:Mat4& frameB})"
			],
			"description": "void Physics3DHingeConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)"
		},
		 "EventListenerCustom* EventDispatcher::addCustomEventListener(const std::string &eventName, const std::function<void(EventCustom*)>& callback)": {
			"prefix": "EventListenerCustom* EventDispatcher::addCustomEventListener(const std::string &eventName, const std::function<void(EventCustom*)>& callback)",
			"body": [
				"EventDispatcher:addCustomEventListener(${1:std:string &eventName},${2:std:function<void(EventCustom*})"
			],
			"description": "EventListenerCustom* EventDispatcher::addCustomEventListener(const std::string &eventName, const std::function<void(EventCustom*)>& callback)"
		},
		 "void TransitionSlideInR::sceneOrder()": {
			"prefix": "void TransitionSlideInR::sceneOrder()",
			"body": [
				"void TransitionSlideInR:sceneOrder()"
			],
			"description": "void TransitionSlideInR::sceneOrder()"
		},
		 "void Scheduler::schedule(SEL_SCHEDULE selector, Ref *target, float interval, bool paused)": {
			"prefix": "void Scheduler::schedule(SEL_SCHEDULE selector, Ref *target, float interval, bool paused)",
			"body": [
				"Scheduler:schedule(${1:SEL_SCHEDULE selector},${2:Ref *target},${3:float interval},${4:bool paused})"
			],
			"description": "void Scheduler::schedule(SEL_SCHEDULE selector, Ref *target, float interval, bool paused)"
		},
		 "bool ComAttribute::getBool(const std::string& key, bool def) const": {
			"prefix": "bool ComAttribute::getBool(const std::string& key, bool def) const",
			"body": [
				"ComAttribute:getBool(${1:std:string& key},${2:bool def})"
			],
			"description": "bool ComAttribute::getBool(const std::string& key, bool def) const"
		},
		 "bool Layout::isBackGroundImageScale9Enabled()const": {
			"prefix": "bool Layout::isBackGroundImageScale9Enabled()const",
			"body": [
				"bool Layout:isBackGroundImageScale9Enabled()"
			],
			"description": "bool Layout::isBackGroundImageScale9Enabled()const"
		},
		 "void SkeletonNode::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4& parentTransform, uint32_t parentFlags)": {
			"prefix": "void SkeletonNode::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4& parentTransform, uint32_t parentFlags)",
			"body": [
				"SkeletonNode:visit(${1:cocos2d:Renderer *renderer},${2:cocos2d:Mat4& parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void SkeletonNode::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4& parentTransform, uint32_t parentFlags)"
		},
		 "bool __Array::containsObject(Ref* object) const": {
			"prefix": "bool __Array::containsObject(Ref* object) const",
			"body": [
				"__Array:containsObject(${1:Ref* object})"
			],
			"description": "bool __Array::containsObject(Ref* object) const"
		},
		 "Tween *Bone::getTween()": {
			"prefix": "Tween *Bone::getTween()",
			"body": [
				"Tween *Bone:getTween()"
			],
			"description": "Tween *Bone::getTween()"
		},
		 "void Physics3DSliderConstraint::setDampingOrthoAng(float dampingOrthoAng)": {
			"prefix": "void Physics3DSliderConstraint::setDampingOrthoAng(float dampingOrthoAng)",
			"body": [
				"Physics3DSliderConstraint:setDampingOrthoAng(${1:float dampingOrthoAng})"
			],
			"description": "void Physics3DSliderConstraint::setDampingOrthoAng(float dampingOrthoAng)"
		},
		 "void MathUtil::smooth(float* x, float target, float elapsedTime, float riseTime, float fallTime)": {
			"prefix": "void MathUtil::smooth(float* x, float target, float elapsedTime, float riseTime, float fallTime)",
			"body": [
				"MathUtil:smooth(${1:float* x},${2:float target},${3:float elapsedTime},${4:float riseTime},${5:float fallTime})"
			],
			"description": "void MathUtil::smooth(float* x, float target, float elapsedTime, float riseTime, float fallTime)"
		},
		 "float CCBReader::readFloat()": {
			"prefix": "float CCBReader::readFloat()",
			"body": [
				"float CCBReader:readFloat()"
			],
			"description": "float CCBReader::readFloat()"
		},
		 "void GLProgramState::apply(const Mat4& modelView)": {
			"prefix": "void GLProgramState::apply(const Mat4& modelView)",
			"body": [
				"GLProgramState:apply(${1:Mat4& modelView})"
			],
			"description": "void GLProgramState::apply(const Mat4& modelView)"
		},
		 "void Director::getFPSImageData(unsigned char** datapointer, ssize_t* length)": {
			"prefix": "void Director::getFPSImageData(unsigned char** datapointer, ssize_t* length)",
			"body": [
				"Director:getFPSImageData(${1:unsigned char** datapointer},${2:ssize_t* length})"
			],
			"description": "void Director::getFPSImageData(unsigned char** datapointer, ssize_t* length)"
		},
		 "void __Array::reverseObjects()": {
			"prefix": "void __Array::reverseObjects()",
			"body": [
				"void __Array:reverseObjects()"
			],
			"description": "void __Array::reverseObjects()"
		},
		 "void JumpBy::startWithTarget(Node *target)": {
			"prefix": "void JumpBy::startWithTarget(Node *target)",
			"body": [
				"JumpBy:startWithTarget(${1:Node *target})"
			],
			"description": "void JumpBy::startWithTarget(Node *target)"
		},
		 "AsyncStruct(const std::string& fn, std::function<void(Texture2D*)> f) : filename(fn), callback(f), loadSuccess(false)": {
			"prefix": "AsyncStruct(const std::string& fn, std::function<void(Texture2D*)> f) : filename(fn), callback(f), loadSuccess(false)",
			"body": [
				"fn},${2:std:function<void(Texture2D*})"
			],
			"description": "AsyncStruct(const std::string& fn, std::function<void(Texture2D*)> f) : filename(fn), callback(f), loadSuccess(false)"
		},
		 "void Renderer::flush()": {
			"prefix": "void Renderer::flush()",
			"body": [
				"void Renderer:flush()"
			],
			"description": "void Renderer::flush()"
		},
		 "Sequence* Sequence::createWithVariableList(FiniteTimeAction *action1, va_list args)": {
			"prefix": "Sequence* Sequence::createWithVariableList(FiniteTimeAction *action1, va_list args)",
			"body": [
				"Sequence:createWithVariableList(${1:FiniteTimeAction *action1},${2:va_list args})"
			],
			"description": "Sequence* Sequence::createWithVariableList(FiniteTimeAction *action1, va_list args)"
		},
		 "void ActionManagerEx::releaseActions()": {
			"prefix": "void ActionManagerEx::releaseActions()",
			"body": [
				"void ActionManagerEx:releaseActions()"
			],
			"description": "void ActionManagerEx::releaseActions()"
		},
		 "void PhysicsContactPreSolve::setRestitution(float restitution)": {
			"prefix": "void PhysicsContactPreSolve::setRestitution(float restitution)",
			"body": [
				"PhysicsContactPreSolve:setRestitution(${1:float restitution})"
			],
			"description": "void PhysicsContactPreSolve::setRestitution(float restitution)"
		},
		 "const Size& Director::getWinSize(void) const": {
			"prefix": "const Size& Director::getWinSize(void) const",
			"body": [
				"Size& Director:getWinSize(${1:void})"
			],
			"description": "const Size& Director::getWinSize(void) const"
		},
		 "void Physics3DSliderConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)": {
			"prefix": "void Physics3DSliderConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)",
			"body": [
				"Physics3DSliderConstraint:setFrames(${1:cocos2d:Mat4& frameA},${2:cocos2d:Mat4& frameB})"
			],
			"description": "void Physics3DSliderConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)"
		},
		 "void TMXLayer::updateVertexBuffer()": {
			"prefix": "void TMXLayer::updateVertexBuffer()",
			"body": [
				"void TMXLayer:updateVertexBuffer()"
			],
			"description": "void TMXLayer::updateVertexBuffer()"
		},
		 "void Texture2D::setTexParameters(const TexParams &texParams)": {
			"prefix": "void Texture2D::setTexParameters(const TexParams &texParams)",
			"body": [
				"Texture2D:setTexParameters(${1:TexParams &texParams})"
			],
			"description": "void Texture2D::setTexParameters(const TexParams &texParams)"
		},
		 "void AnimationCache::parseVersion2(const ValueMap& animations)": {
			"prefix": "void AnimationCache::parseVersion2(const ValueMap& animations)",
			"body": [
				"AnimationCache:parseVersion2(${1:ValueMap& animations})"
			],
			"description": "void AnimationCache::parseVersion2(const ValueMap& animations)"
		},
		 "void GLView::pollInputEvents()": {
			"prefix": "void GLView::pollInputEvents()",
			"body": [
				"void GLView:pollInputEvents()"
			],
			"description": "void GLView::pollInputEvents()"
		},
		 "void ScrollView::setBounceEnabled(bool enabled)": {
			"prefix": "void ScrollView::setBounceEnabled(bool enabled)",
			"body": [
				"ScrollView:setBounceEnabled(${1:bool enabled})"
			],
			"description": "void ScrollView::setBounceEnabled(bool enabled)"
		},
		 "void ActionScaleFrame::setScaleX(float scaleX)": {
			"prefix": "void ActionScaleFrame::setScaleX(float scaleX)",
			"body": [
				"ActionScaleFrame:setScaleX(${1:float scaleX})"
			],
			"description": "void ActionScaleFrame::setScaleX(float scaleX)"
		},
		 "ParallaxNode * ParallaxNode::create()": {
			"prefix": "ParallaxNode * ParallaxNode::create()",
			"body": [
				"ParallaxNode * ParallaxNode:create()"
			],
			"description": "ParallaxNode * ParallaxNode::create()"
		},
		 "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, Ref* target, SEL_MenuHandler selector)": {
			"prefix": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, Ref* target, SEL_MenuHandler selector)",
			"body": [
				"* MenuItemImage:create(${1:std:string& normalImage},${2:std:string& selectedImage},${3:std:string& disabledImage},${4:Ref* target},${5:SEL_MenuHandler selector})"
			],
			"description": "MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, Ref* target, SEL_MenuHandler selector)"
		},
		 "NodeLoaderLibrary * NodeLoaderLibrary::newDefaultNodeLoaderLibrary()": {
			"prefix": "NodeLoaderLibrary * NodeLoaderLibrary::newDefaultNodeLoaderLibrary()",
			"body": [
				"NodeLoaderLibrary * NodeLoaderLibrary:newDefaultNodeLoaderLibrary()"
			],
			"description": "NodeLoaderLibrary * NodeLoaderLibrary::newDefaultNodeLoaderLibrary()"
		},
		 "void ScrollView::addChild(Node* child)": {
			"prefix": "void ScrollView::addChild(Node* child)",
			"body": [
				"ScrollView:addChild(${1:Node* child})"
			],
			"description": "void ScrollView::addChild(Node* child)"
		},
		 "void EaseCubicActionOut::update(float time)": {
			"prefix": "void EaseCubicActionOut::update(float time)",
			"body": [
				"EaseCubicActionOut:update(${1:float time})"
			],
			"description": "void EaseCubicActionOut::update(float time)"
		},
		 "std::string TextField::getDescription() const": {
			"prefix": "std::string TextField::getDescription() const",
			"body": [
				"std:string TextField:getDescription() "
			],
			"description": "std::string TextField::getDescription() const"
		},
		 "Sprite* Sprite::createWithTexture(Texture2D *texture, const Rect& rect, bool rotated)": {
			"prefix": "Sprite* Sprite::createWithTexture(Texture2D *texture, const Rect& rect, bool rotated)",
			"body": [
				"Sprite:createWithTexture(${1:Texture2D *texture},${2:Rect& rect},${3:bool rotated})"
			],
			"description": "Sprite* Sprite::createWithTexture(Texture2D *texture, const Rect& rect, bool rotated)"
		},
		 "bool Physics3D6DofConstraint::getUseFrameOffset() const": {
			"prefix": "bool Physics3D6DofConstraint::getUseFrameOffset() const",
			"body": [
				"bool Physics3D6DofConstraint:getUseFrameOffset() "
			],
			"description": "bool Physics3D6DofConstraint::getUseFrameOffset() const"
		},
		 "BoneNode* BoneNode::create(int length)": {
			"prefix": "BoneNode* BoneNode::create(int length)",
			"body": [
				"BoneNode:create(${1:int length})"
			],
			"description": "BoneNode* BoneNode::create(int length)"
		},
		 "bool EventListener::checkAvailable()": {
			"prefix": "bool EventListener::checkAvailable()",
			"body": [
				"bool EventListener:checkAvailable()"
			],
			"description": "bool EventListener::checkAvailable()"
		},
		 "bool Material::initWithGLProgramState(cocos2d::GLProgramState *state)": {
			"prefix": "bool Material::initWithGLProgramState(cocos2d::GLProgramState *state)",
			"body": [
				"Material:initWithGLProgramState(${1:cocos2d:GLProgramState *state})"
			],
			"description": "bool Material::initWithGLProgramState(cocos2d::GLProgramState *state)"
		},
		 "public WebSocket::Delegate": {
			"prefix": "public WebSocket::Delegate",
			"body": [
				"public WebSocket:Delegate"
			],
			"description": "public WebSocket::Delegate"
		},
		 "void PageView::handleReleaseLogic(Touch *touch)": {
			"prefix": "void PageView::handleReleaseLogic(Touch *touch)",
			"body": [
				"PageView:handleReleaseLogic(${1:Touch *touch})"
			],
			"description": "void PageView::handleReleaseLogic(Touch *touch)"
		},
		 "void ActionTimeline::gotoFrameAndPlay(int startIndex)": {
			"prefix": "void ActionTimeline::gotoFrameAndPlay(int startIndex)",
			"body": [
				"ActionTimeline:gotoFrameAndPlay(${1:int startIndex})"
			],
			"description": "void ActionTimeline::gotoFrameAndPlay(int startIndex)"
		},
		 "Physics3DPointToPointConstraint* Physics3DPointToPointConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotPointInA)": {
			"prefix": "Physics3DPointToPointConstraint* Physics3DPointToPointConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotPointInA)",
			"body": [
				"Physics3DPointToPointConstraint:create(${1:Physics3DRigidBody* rbA},${2:cocos2d:Vec3& pivotPointInA})"
			],
			"description": "Physics3DPointToPointConstraint* Physics3DPointToPointConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotPointInA)"
		},
		 "int Configuration::getMaxSupportSpotLightInShader() const": {
			"prefix": "int Configuration::getMaxSupportSpotLightInShader() const",
			"body": [
				"int Configuration:getMaxSupportSpotLightInShader() "
			],
			"description": "int Configuration::getMaxSupportSpotLightInShader() const"
		},
		 "Menu* Menu::create()": {
			"prefix": "Menu* Menu::create()",
			"body": [
				"Menu* Menu:create()"
			],
			"description": "Menu* Menu::create()"
		},
		 "void ComAttribute::setInt(const std::string& key, int value)": {
			"prefix": "void ComAttribute::setInt(const std::string& key, int value)",
			"body": [
				"ComAttribute:setInt(${1:std:string& key},${2:int value})"
			],
			"description": "void ComAttribute::setInt(const std::string& key, int value)"
		},
		 "void ActionManagerEx::destroyInstance()": {
			"prefix": "void ActionManagerEx::destroyInstance()",
			"body": [
				"void ActionManagerEx:destroyInstance()"
			],
			"description": "void ActionManagerEx::destroyInstance()"
		},
		 "void PhysicsWorld::setSubsteps(int steps)": {
			"prefix": "void PhysicsWorld::setSubsteps(int steps)",
			"body": [
				"PhysicsWorld:setSubsteps(${1:int steps})"
			],
			"description": "void PhysicsWorld::setSubsteps(int steps)"
		},
		 "void MenuItem::selected()": {
			"prefix": "void MenuItem::selected()",
			"body": [
				"void MenuItem:selected()"
			],
			"description": "void MenuItem::selected()"
		},
		 "void Slider::setupBarTexture()": {
			"prefix": "void Slider::setupBarTexture()",
			"body": [
				"void Slider:setupBarTexture()"
			],
			"description": "void Slider::setupBarTexture()"
		},
		 "void Node::updatePhysicsBodyTransform(const Mat4& parentTransform, uint32_t parentFlags, float parentScaleX, float parentScaleY)": {
			"prefix": "void Node::updatePhysicsBodyTransform(const Mat4& parentTransform, uint32_t parentFlags, float parentScaleX, float parentScaleY)",
			"body": [
				"Node:updatePhysicsBodyTransform(${1:Mat4& parentTransform},${2:uint32_t parentFlags},${3:float parentScaleX},${4:float parentScaleY})"
			],
			"description": "void Node::updatePhysicsBodyTransform(const Mat4& parentTransform, uint32_t parentFlags, float parentScaleX, float parentScaleY)"
		},
		 "LinearLayoutParameter::LinearGravity LinearLayoutParameter::getGravity() const": {
			"prefix": "LinearLayoutParameter::LinearGravity LinearLayoutParameter::getGravity() const",
			"body": [
				"LinearLayoutParameter:LinearGravity LinearLayoutParameter:getGravity() "
			],
			"description": "LinearLayoutParameter::LinearGravity LinearLayoutParameter::getGravity() const"
		},
		 "void Tween::tweenColorTo(float percent, FrameData *node)": {
			"prefix": "void Tween::tweenColorTo(float percent, FrameData *node)",
			"body": [
				"Tween:tweenColorTo(${1:float percent},${2:FrameData *node})"
			],
			"description": "void Tween::tweenColorTo(float percent, FrameData *node)"
		},
		 "long getCharacterCountInUTF8String(const std::string& utf8)": {
			"prefix": "long getCharacterCountInUTF8String(const std::string& utf8)",
			"body": [
				"getCharacterCountInUTF8String(${1:std:string& utf8})"
			],
			"description": "long getCharacterCountInUTF8String(const std::string& utf8)"
		},
		 "bool MathUtil::isNeon32Enabled()": {
			"prefix": "bool MathUtil::isNeon32Enabled()",
			"body": [
				"bool MathUtil:isNeon32Enabled()"
			],
			"description": "bool MathUtil::isNeon32Enabled()"
		},
		 "bool CatmullRomTo::initWithDuration(float dt, cocos2d::PointArray *points)": {
			"prefix": "bool CatmullRomTo::initWithDuration(float dt, cocos2d::PointArray *points)",
			"body": [
				"CatmullRomTo:initWithDuration(${1:float dt},${2:cocos2d:PointArray *points})"
			],
			"description": "bool CatmullRomTo::initWithDuration(float dt, cocos2d::PointArray *points)"
		},
		 "bool RenderTarget::init(unsigned int width, unsigned int height, Texture2D::PixelFormat format)": {
			"prefix": "bool RenderTarget::init(unsigned int width, unsigned int height, Texture2D::PixelFormat format)",
			"body": [
				"RenderTarget:init(${1:unsigned int width},${2:unsigned int height},${3:Texture2D:PixelFormat format})"
			],
			"description": "bool RenderTarget::init(unsigned int width, unsigned int height, Texture2D::PixelFormat format)"
		},
		 "void WebViewImpl::setVisible(bool visible)": {
			"prefix": "void WebViewImpl::setVisible(bool visible)",
			"body": [
				"WebViewImpl:setVisible(${1:bool visible})"
			],
			"description": "void WebViewImpl::setVisible(bool visible)"
		},
		 "void TransitionMoveInL::onEnter()": {
			"prefix": "void TransitionMoveInL::onEnter()",
			"body": [
				"void TransitionMoveInL:onEnter()"
			],
			"description": "void TransitionMoveInL::onEnter()"
		},
		 "void Sprite3D::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void Sprite3D::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"Sprite3D:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void Sprite3D::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "Speed* Speed::create(ActionInterval* action, float speed)": {
			"prefix": "Speed* Speed::create(ActionInterval* action, float speed)",
			"body": [
				"Speed:create(${1:ActionInterval* action},${2:float speed})"
			],
			"description": "Speed* Speed::create(ActionInterval* action, float speed)"
		},
		 "void Text::setTextVerticalAlignment(TextVAlignment alignment)": {
			"prefix": "void Text::setTextVerticalAlignment(TextVAlignment alignment)",
			"body": [
				"Text:setTextVerticalAlignment(${1:TextVAlignment alignment})"
			],
			"description": "void Text::setTextVerticalAlignment(TextVAlignment alignment)"
		},
		 "void ScrollView::scrollToTop(float second, bool attenuated)": {
			"prefix": "void ScrollView::scrollToTop(float second, bool attenuated)",
			"body": [
				"ScrollView:scrollToTop(${1:float second},${2:bool attenuated})"
			],
			"description": "void ScrollView::scrollToTop(float second, bool attenuated)"
		},
		 "CCBSetSpriteFrame* CCBSetSpriteFrame::reverse() const": {
			"prefix": "CCBSetSpriteFrame* CCBSetSpriteFrame::reverse() const",
			"body": [
				"CCBSetSpriteFrame* CCBSetSpriteFrame:reverse() "
			],
			"description": "CCBSetSpriteFrame* CCBSetSpriteFrame::reverse() const"
		},
		 "void Sprite::setVertexRect(const Rect& rect)": {
			"prefix": "void Sprite::setVertexRect(const Rect& rect)",
			"body": [
				"Sprite:setVertexRect(${1:Rect& rect})"
			],
			"description": "void Sprite::setVertexRect(const Rect& rect)"
		},
		 "btVector3 convertVec3TobtVector3( const cocos2d::Vec3 &vec3 )": {
			"prefix": "btVector3 convertVec3TobtVector3( const cocos2d::Vec3 &vec3 )",
			"body": [
				"convertVec3TobtVector3(${1:cocos2d:Vec3 &vec3})"
			],
			"description": "btVector3 convertVec3TobtVector3( const cocos2d::Vec3 &vec3 )"
		},
		 "uint32_t TMXLayer::getTileGIDAt(const Vec2& pos, TMXTileFlags* flags/* = nullptr*/)": {
			"prefix": "uint32_t TMXLayer::getTileGIDAt(const Vec2& pos, TMXTileFlags* flags/* = nullptr*/)",
			"body": [
				"TMXLayer:getTileGIDAt(${1:Vec2& pos},${2:TMXTileFlags* flags/* = nullptr*/})"
			],
			"description": "uint32_t TMXLayer::getTileGIDAt(const Vec2& pos, TMXTileFlags* flags/* = nullptr*/)"
		},
		 "CallFunc * CallFunc::reverse() const": {
			"prefix": "CallFunc * CallFunc::reverse() const",
			"body": [
				"CallFunc * CallFunc:reverse() "
			],
			"description": "CallFunc * CallFunc::reverse() const"
		},
		 "void LoadingBar::onSizeChanged()": {
			"prefix": "void LoadingBar::onSizeChanged()",
			"body": [
				"void LoadingBar:onSizeChanged()"
			],
			"description": "void LoadingBar::onSizeChanged()"
		},
		 "PhysicsBody* PhysicsBody::createBox(const Size& size, const PhysicsMaterial& material, const Vec2& offset)": {
			"prefix": "PhysicsBody* PhysicsBody::createBox(const Size& size, const PhysicsMaterial& material, const Vec2& offset)",
			"body": [
				"PhysicsBody:createBox(${1:Size& size},${2:PhysicsMaterial& material},${3:Vec2& offset})"
			],
			"description": "PhysicsBody* PhysicsBody::createBox(const Size& size, const PhysicsMaterial& material, const Vec2& offset)"
		},
		 "void ProtectedNode::reorderProtectedChild(cocos2d::Node *child, int localZOrder)": {
			"prefix": "void ProtectedNode::reorderProtectedChild(cocos2d::Node *child, int localZOrder)",
			"body": [
				"ProtectedNode:reorderProtectedChild(${1:cocos2d:Node *child},${2:int localZOrder})"
			],
			"description": "void ProtectedNode::reorderProtectedChild(cocos2d::Node *child, int localZOrder)"
		},
		 "bool Physics3DShape::initMesh( const cocos2d::Vec3 *triangles, int numTriangles )": {
			"prefix": "bool Physics3DShape::initMesh( const cocos2d::Vec3 *triangles, int numTriangles )",
			"body": [
				"Physics3DShape:initMesh(${1:cocos2d:Vec3 *triangles},${2:int numTriangles})"
			],
			"description": "bool Physics3DShape::initMesh( const cocos2d::Vec3 *triangles, int numTriangles )"
		},
		 "void Sprite::removeChild(Node *child, bool cleanup)": {
			"prefix": "void Sprite::removeChild(Node *child, bool cleanup)",
			"body": [
				"Sprite:removeChild(${1:Node *child},${2:bool cleanup})"
			],
			"description": "void Sprite::removeChild(Node *child, bool cleanup)"
		},
		 "ActionTween* ActionTween::create(float duration, const std::string& key, float from, float to)": {
			"prefix": "ActionTween* ActionTween::create(float duration, const std::string& key, float from, float to)",
			"body": [
				"ActionTween:create(${1:float duration},${2:std:string& key},${3:float from},${4:float to})"
			],
			"description": "ActionTween* ActionTween::create(float duration, const std::string& key, float from, float to)"
		},
		 "void Mat4::translate(const Vec3& t)": {
			"prefix": "void Mat4::translate(const Vec3& t)",
			"body": [
				"Mat4:translate(${1:Vec3& t})"
			],
			"description": "void Mat4::translate(const Vec3& t)"
		},
		 "void ObjectFactory::destroyInstance()": {
			"prefix": "void ObjectFactory::destroyInstance()",
			"body": [
				"void ObjectFactory:destroyInstance()"
			],
			"description": "void ObjectFactory::destroyInstance()"
		},
		 "void ArmatureAnimation::play(const std::string& animationName, int durationTo,  int loop)": {
			"prefix": "void ArmatureAnimation::play(const std::string& animationName, int durationTo,  int loop)",
			"body": [
				"ArmatureAnimation:play(${1:std:string& animationName},${2:int durationTo},${3:int loop})"
			],
			"description": "void ArmatureAnimation::play(const std::string& animationName, int durationTo,  int loop)"
		},
		 "void Node::unschedule(const std::string &key)": {
			"prefix": "void Node::unschedule(const std::string &key)",
			"body": [
				"Node:unschedule(${1:std:string &key})"
			],
			"description": "void Node::unschedule(const std::string &key)"
		},
		 "const BlendFunc& Mesh::getBlendFunc() const": {
			"prefix": "const BlendFunc& Mesh::getBlendFunc() const",
			"body": [
				" BlendFunc& Mesh:getBlendFunc() "
			],
			"description": "const BlendFunc& Mesh::getBlendFunc() const"
		},
		 "void ActionTimeline::removeTimeline(Timeline* timeline)": {
			"prefix": "void ActionTimeline::removeTimeline(Timeline* timeline)",
			"body": [
				"ActionTimeline:removeTimeline(${1:Timeline* timeline})"
			],
			"description": "void ActionTimeline::removeTimeline(Timeline* timeline)"
		},
		 "void Widget::propagateTouchEvent(cocos2d::ui::Widget::TouchEventType event, cocos2d::ui::Widget *sender, cocos2d::Touch *touch)": {
			"prefix": "void Widget::propagateTouchEvent(cocos2d::ui::Widget::TouchEventType event, cocos2d::ui::Widget *sender, cocos2d::Touch *touch)",
			"body": [
				"Widget:propagateTouchEvent(${1:cocos2d:ui:Widget:TouchEventType event},${2:cocos2d:ui:Widget *sender},${3:cocos2d:Touch *touch})"
			],
			"description": "void Widget::propagateTouchEvent(cocos2d::ui::Widget::TouchEventType event, cocos2d::ui::Widget *sender, cocos2d::Touch *touch)"
		},
		 "void Console::commandProjection(int fd, const std::string& args)": {
			"prefix": "void Console::commandProjection(int fd, const std::string& args)",
			"body": [
				"Console:commandProjection(${1:int fd},${2:std:string& args})"
			],
			"description": "void Console::commandProjection(int fd, const std::string& args)"
		},
		 "bool Configuration::supportsShareableVAO() const": {
			"prefix": "bool Configuration::supportsShareableVAO() const",
			"body": [
				"bool Configuration:supportsShareableVAO() "
			],
			"description": "bool Configuration::supportsShareableVAO() const"
		},
		 "void ScrollView::setScrollBarWidth(float width)": {
			"prefix": "void ScrollView::setScrollBarWidth(float width)",
			"body": [
				"ScrollView:setScrollBarWidth(${1:float width})"
			],
			"description": "void ScrollView::setScrollBarWidth(float width)"
		},
		 "void Mat4::getTranslation(Vec3* translation) const": {
			"prefix": "void Mat4::getTranslation(Vec3* translation) const",
			"body": [
				"Mat4:getTranslation(${1:Vec3* translation})"
			],
			"description": "void Mat4::getTranslation(Vec3* translation) const"
		},
		 "Bone3D* Bone3D::create(const std::string& id)": {
			"prefix": "Bone3D* Bone3D::create(const std::string& id)",
			"body": [
				"Bone3D:create(${1:std:string& id})"
			],
			"description": "Bone3D* Bone3D::create(const std::string& id)"
		},
		 "void ParticleSystem::setRotatePerSecondVar(float degrees)": {
			"prefix": "void ParticleSystem::setRotatePerSecondVar(float degrees)",
			"body": [
				"ParticleSystem:setRotatePerSecondVar(${1:float degrees})"
			],
			"description": "void ParticleSystem::setRotatePerSecondVar(float degrees)"
		},
		 "SchedulerScriptHandlerEntry* SchedulerScriptHandlerEntry::create(int handler, float interval, bool paused)": {
			"prefix": "SchedulerScriptHandlerEntry* SchedulerScriptHandlerEntry::create(int handler, float interval, bool paused)",
			"body": [
				"SchedulerScriptHandlerEntry:create(${1:int handler},${2:float interval},${3:bool paused})"
			],
			"description": "SchedulerScriptHandlerEntry* SchedulerScriptHandlerEntry::create(int handler, float interval, bool paused)"
		},
		 "GLubyte MotionStreak::getOpacity(void) const": {
			"prefix": "GLubyte MotionStreak::getOpacity(void) const",
			"body": [
				"MotionStreak:getOpacity(${1:void})"
			],
			"description": "GLubyte MotionStreak::getOpacity(void) const"
		},
		 "bool EventListenerTouchOneByOne::isSwallowTouches()": {
			"prefix": "bool EventListenerTouchOneByOne::isSwallowTouches()",
			"body": [
				"bool EventListenerTouchOneByOne:isSwallowTouches()"
			],
			"description": "bool EventListenerTouchOneByOne::isSwallowTouches()"
		},
		 "Node * Node::create()": {
			"prefix": "Node * Node::create()",
			"body": [
				"Node * Node:create()"
			],
			"description": "Node * Node::create()"
		},
		 "void SkeletonRenderer::initWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)": {
			"prefix": "void SkeletonRenderer::initWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)",
			"body": [
				"SkeletonRenderer:initWithData (${1:spSkeletonData* skeletonData},${2:bool ownsSkeletonData})"
			],
			"description": "void SkeletonRenderer::initWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)"
		},
		 "float Label::getLineHeight() const": {
			"prefix": "float Label::getLineHeight() const",
			"body": [
				"float Label:getLineHeight() "
			],
			"description": "float Label::getLineHeight() const"
		},
		 "void FadeOut::setReverseAction(cocos2d::FadeTo *ac)": {
			"prefix": "void FadeOut::setReverseAction(cocos2d::FadeTo *ac)",
			"body": [
				"FadeOut:setReverseAction(${1:cocos2d:FadeTo *ac})"
			],
			"description": "void FadeOut::setReverseAction(cocos2d::FadeTo *ac)"
		},
		 "bool MoveTo::initWithDuration(float duration, const Vec2& position)": {
			"prefix": "bool MoveTo::initWithDuration(float duration, const Vec2& position)",
			"body": [
				"MoveTo:initWithDuration(${1:float duration},${2:Vec2& position})"
			],
			"description": "bool MoveTo::initWithDuration(float duration, const Vec2& position)"
		},
		 "Quaternion Quaternion::getNormalized() const": {
			"prefix": "Quaternion Quaternion::getNormalized() const",
			"body": [
				"Quaternion Quaternion:getNormalized() "
			],
			"description": "Quaternion Quaternion::getNormalized() const"
		},
		 "void ActionNode::setUnitTime(float fTime)": {
			"prefix": "void ActionNode::setUnitTime(float fTime)",
			"body": [
				"ActionNode:setUnitTime(${1:float fTime})"
			],
			"description": "void ActionNode::setUnitTime(float fTime)"
		},
		 "CardinalSplineTo* CardinalSplineTo::create(float duration, cocos2d::PointArray *points, float tension)": {
			"prefix": "CardinalSplineTo* CardinalSplineTo::create(float duration, cocos2d::PointArray *points, float tension)",
			"body": [
				"CardinalSplineTo:create(${1:float duration},${2:cocos2d:PointArray *points},${3:float tension})"
			],
			"description": "CardinalSplineTo* CardinalSplineTo::create(float duration, cocos2d::PointArray *points, float tension)"
		},
		 "void Node::stopAction(Action* action)": {
			"prefix": "void Node::stopAction(Action* action)",
			"body": [
				"Node:stopAction(${1:Action* action})"
			],
			"description": "void Node::stopAction(Action* action)"
		},
		 "bool ClippingNode::hasContent() const": {
			"prefix": "bool ClippingNode::hasContent() const",
			"body": [
				"bool ClippingNode:hasContent() "
			],
			"description": "bool ClippingNode::hasContent() const"
		},
		 "FlipX* FlipX::reverse() const": {
			"prefix": "FlipX* FlipX::reverse() const",
			"body": [
				"FlipX* FlipX:reverse() "
			],
			"description": "FlipX* FlipX::reverse() const"
		},
		 "Follow* Follow::create(Node *followedNode, const Rect& rect/* = Rect::ZERO*/)": {
			"prefix": "Follow* Follow::create(Node *followedNode, const Rect& rect/* = Rect::ZERO*/)",
			"body": [
				"Follow:create(${1:Node *followedNode},${2:Rect& rect/* = Rect:ZERO*/})"
			],
			"description": "Follow* Follow::create(Node *followedNode, const Rect& rect/* = Rect::ZERO*/)"
		},
		 "float AndroidJavaEngine::getBackgroundMusicVolume()": {
			"prefix": "float AndroidJavaEngine::getBackgroundMusicVolume()",
			"body": [
				"float AndroidJavaEngine:getBackgroundMusicVolume()"
			],
			"description": "float AndroidJavaEngine::getBackgroundMusicVolume()"
		},
		 "ActionTimelineNode* ActionTimelineNode::create(Node* root, ActionTimeline* action)": {
			"prefix": "ActionTimelineNode* ActionTimelineNode::create(Node* root, ActionTimeline* action)",
			"body": [
				"ActionTimelineNode:create(${1:Node* root},${2:ActionTimeline* action})"
			],
			"description": "ActionTimelineNode* ActionTimelineNode::create(Node* root, ActionTimeline* action)"
		},
		 "void ParticleSystemQuadLoader::onHandlePropTypeInteger(Node * pNode, Node * pParent, const char * pPropertyName, int pInteger, CCBReader * ccbReader)": {
			"prefix": "void ParticleSystemQuadLoader::onHandlePropTypeInteger(Node * pNode, Node * pParent, const char * pPropertyName, int pInteger, CCBReader * ccbReader)",
			"body": [
				"ParticleSystemQuadLoader:onHandlePropTypeInteger(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:int pInteger},${5:CCBReader * ccbReader})"
			],
			"description": "void ParticleSystemQuadLoader::onHandlePropTypeInteger(Node * pNode, Node * pParent, const char * pPropertyName, int pInteger, CCBReader * ccbReader)"
		},
		 "void TransitionProgressInOut::setupTransition()": {
			"prefix": "void TransitionProgressInOut::setupTransition()",
			"body": [
				"void TransitionProgressInOut:setupTransition()"
			],
			"description": "void TransitionProgressInOut::setupTransition()"
		},
		 "static std::string visit(const Value& v, int depth)": {
			"prefix": "static std::string visit(const Value& v, int depth)",
			"body": [
				"std:string visit(${1:Value& v},${2:int depth})"
			],
			"description": "static std::string visit(const Value& v, int depth)"
		},
		 "Terrain::ChunkIndices Terrain::insertIndicesLODSkirt(int selfLod, GLushort * indices, int size)": {
			"prefix": "Terrain::ChunkIndices Terrain::insertIndicesLODSkirt(int selfLod, GLushort * indices, int size)",
			"body": [
				"Terrain:insertIndicesLODSkirt(${1:int selfLod},${2:GLushort * indices},${3:int size})"
			],
			"description": "Terrain::ChunkIndices Terrain::insertIndicesLODSkirt(int selfLod, GLushort * indices, int size)"
		},
		 "bool Configuration::supportsETC() const": {
			"prefix": "bool Configuration::supportsETC() const",
			"body": [
				"bool Configuration:supportsETC() "
			],
			"description": "bool Configuration::supportsETC() const"
		},
		 "__String* __String::createWithFormat(const char* format, ...)": {
			"prefix": "__String* __String::createWithFormat(const char* format, ...)",
			"body": [
				"__String:createWithFormat(${1:char* format},${2:...})"
			],
			"description": "__String* __String::createWithFormat(const char* format, ...)"
		},
		 "BlendFuncFrame* BlendFuncFrame::create()": {
			"prefix": "BlendFuncFrame* BlendFuncFrame::create()",
			"body": [
				"BlendFuncFrame* BlendFuncFrame:create()"
			],
			"description": "BlendFuncFrame* BlendFuncFrame::create()"
		},
		 "void AudioEngineImpl::preload(const std::string& filePath, std::function<void(bool)> callback)": {
			"prefix": "void AudioEngineImpl::preload(const std::string& filePath, std::function<void(bool)> callback)",
			"body": [
				"AudioEngineImpl:preload(${1:std:string& filePath},${2:std:function<void(bool})"
			],
			"description": "void AudioEngineImpl::preload(const std::string& filePath, std::function<void(bool)> callback)"
		},
		 "void Component::setName(const std::string& name)": {
			"prefix": "void Component::setName(const std::string& name)",
			"body": [
				"Component:setName(${1:std:string& name})"
			],
			"description": "void Component::setName(const std::string& name)"
		},
		 "bool Physics3DHingeConstraint::getUseFrameOffset() const": {
			"prefix": "bool Physics3DHingeConstraint::getUseFrameOffset() const",
			"body": [
				"bool Physics3DHingeConstraint:getUseFrameOffset() "
			],
			"description": "bool Physics3DHingeConstraint::getUseFrameOffset() const"
		},
		 "void EditBoxImplCommon::placeInactiveLabels()": {
			"prefix": "void EditBoxImplCommon::placeInactiveLabels()",
			"body": [
				"void EditBoxImplCommon:placeInactiveLabels()"
			],
			"description": "void EditBoxImplCommon::placeInactiveLabels()"
		},
		 "std::string GLProgram::getVertexShaderLog() const": {
			"prefix": "std::string GLProgram::getVertexShaderLog() const",
			"body": [
				"std:string GLProgram:getVertexShaderLog() "
			],
			"description": "std::string GLProgram::getVertexShaderLog() const"
		},
		 "void Layer::setTouchMode(Touch::DispatchMode mode)": {
			"prefix": "void Layer::setTouchMode(Touch::DispatchMode mode)",
			"body": [
				"Layer:setTouchMode(${1:Touch:DispatchMode mode})"
			],
			"description": "void Layer::setTouchMode(Touch::DispatchMode mode)"
		},
		 "static int parseInt(const std::string& value)": {
			"prefix": "static int parseInt(const std::string& value)",
			"body": [
				"int parseInt(${1:std:string& value})"
			],
			"description": "static int parseInt(const std::string& value)"
		},
		 "void Widget::moveEvent()": {
			"prefix": "void Widget::moveEvent()",
			"body": [
				"void Widget:moveEvent()"
			],
			"description": "void Widget::moveEvent()"
		},
		 "void HttpCookie::readFile()": {
			"prefix": "void HttpCookie::readFile()",
			"body": [
				"void HttpCookie:readFile()"
			],
			"description": "void HttpCookie::readFile()"
		},
		 "Node* AbstractCheckButton::getVirtualRenderer()": {
			"prefix": "Node* AbstractCheckButton::getVirtualRenderer()",
			"body": [
				"Node* AbstractCheckButton:getVirtualRenderer()"
			],
			"description": "Node* AbstractCheckButton::getVirtualRenderer()"
		},
		 "void PhysicsBody::setEnable(bool enable)": {
			"prefix": "void PhysicsBody::setEnable(bool enable)",
			"body": [
				"PhysicsBody:setEnable(${1:bool enable})"
			],
			"description": "void PhysicsBody::setEnable(bool enable)"
		},
		 "cocos2d::Vector<SkinNode*> BoneNode::getVisibleSkins() const": {
			"prefix": "cocos2d::Vector<SkinNode*> BoneNode::getVisibleSkins() const",
			"body": [
				"cocos2d:Vector<SkinNode*> BoneNode:getVisibleSkins() "
			],
			"description": "cocos2d::Vector<SkinNode*> BoneNode::getVisibleSkins() const"
		},
		 "void Terrain::Chunk::calculateSlope()": {
			"prefix": "void Terrain::Chunk::calculateSlope()",
			"body": [
				"void Terrain:Chunk:calculateSlope()"
			],
			"description": "void Terrain::Chunk::calculateSlope()"
		},
		 "void ScrollViewBar::setPositionFromCorner(const Vec2& positionFromCorner)": {
			"prefix": "void ScrollViewBar::setPositionFromCorner(const Vec2& positionFromCorner)",
			"body": [
				"ScrollViewBar:setPositionFromCorner(${1:Vec2& positionFromCorner})"
			],
			"description": "void ScrollViewBar::setPositionFromCorner(const Vec2& positionFromCorner)"
		},
		 "bool FileUtilsWin32::renameFile(const std::string &oldfullpath, const std::string& newfullpath)": {
			"prefix": "bool FileUtilsWin32::renameFile(const std::string &oldfullpath, const std::string& newfullpath)",
			"body": [
				"FileUtilsWin32:renameFile(${1:std:string &oldfullpath},${2:std:string& newfullpath})"
			],
			"description": "bool FileUtilsWin32::renameFile(const std::string &oldfullpath, const std::string& newfullpath)"
		},
		 "void UICCTextField::onEnter()": {
			"prefix": "void UICCTextField::onEnter()",
			"body": [
				"void UICCTextField:onEnter()"
			],
			"description": "void UICCTextField::onEnter()"
		},
		 "void MeshCommand::postBatchDraw()": {
			"prefix": "void MeshCommand::postBatchDraw()",
			"body": [
				"void MeshCommand:postBatchDraw()"
			],
			"description": "void MeshCommand::postBatchDraw()"
		},
		 "void Scheduler::appendIn(_listEntry **list, const ccSchedulerFunc& callback, void *target, bool paused)": {
			"prefix": "void Scheduler::appendIn(_listEntry **list, const ccSchedulerFunc& callback, void *target, bool paused)",
			"body": [
				"Scheduler:appendIn(${1:_listEntry **list},${2:ccSchedulerFunc& callback},${3:void *target},${4:bool paused})"
			],
			"description": "void Scheduler::appendIn(_listEntry **list, const ccSchedulerFunc& callback, void *target, bool paused)"
		},
		 "void TriggerMng::removeArmatureMovementCallBack(Armature *pAr, Ref *pTarget, SEL_MovementEventCallFunc mecf)": {
			"prefix": "void TriggerMng::removeArmatureMovementCallBack(Armature *pAr, Ref *pTarget, SEL_MovementEventCallFunc mecf)",
			"body": [
				"TriggerMng:removeArmatureMovementCallBack(${1:Armature *pAr},${2:Ref *pTarget},${3:SEL_MovementEventCallFunc mecf})"
			],
			"description": "void TriggerMng::removeArmatureMovementCallBack(Armature *pAr, Ref *pTarget, SEL_MovementEventCallFunc mecf)"
		},
		 "Node* Component::getOwner() const": {
			"prefix": "Node* Component::getOwner() const",
			"body": [
				"Node* Component:getOwner() "
			],
			"description": "Node* Component::getOwner() const"
		},
		 "void CCBAnimationManager::setAnimatedProperty(const std::string& propName, Node *pNode, const Value& value, Ref* obj, float fTweenDuration)": {
			"prefix": "void CCBAnimationManager::setAnimatedProperty(const std::string& propName, Node *pNode, const Value& value, Ref* obj, float fTweenDuration)",
			"body": [
				"CCBAnimationManager:setAnimatedProperty(${1:std:string& propName},${2:Node *pNode},${3:Value& value},${4:Ref* obj},${5:float fTweenDuration})"
			],
			"description": "void CCBAnimationManager::setAnimatedProperty(const std::string& propName, Node *pNode, const Value& value, Ref* obj, float fTweenDuration)"
		},
		 "void HttpClient::destroyInstance()": {
			"prefix": "void HttpClient::destroyInstance()",
			"body": [
				"void HttpClient:destroyInstance()"
			],
			"description": "void HttpClient::destroyInstance()"
		},
		 "void __Array::addObjectsFromArray(__Array* otherArray)": {
			"prefix": "void __Array::addObjectsFromArray(__Array* otherArray)",
			"body": [
				"__Array:addObjectsFromArray(${1:__Array* otherArray})"
			],
			"description": "void __Array::addObjectsFromArray(__Array* otherArray)"
		},
		 "ClippingNode* ClippingNode::create(Node *pStencil)": {
			"prefix": "ClippingNode* ClippingNode::create(Node *pStencil)",
			"body": [
				"ClippingNode:create(${1:Node *pStencil})"
			],
			"description": "ClippingNode* ClippingNode::create(Node *pStencil)"
		},
		 "void Director::setNextScene()": {
			"prefix": "void Director::setNextScene()",
			"body": [
				"void Director:setNextScene()"
			],
			"description": "void Director::setNextScene()"
		},
		 "Quad3 TiledGrid3D::getOriginalTile(const Vec2& pos) const": {
			"prefix": "Quad3 TiledGrid3D::getOriginalTile(const Vec2& pos) const",
			"body": [
				"TiledGrid3D:getOriginalTile(${1:Vec2& pos})"
			],
			"description": "Quad3 TiledGrid3D::getOriginalTile(const Vec2& pos) const"
		},
		 "bool Configuration::supportsPVRTC() const": {
			"prefix": "bool Configuration::supportsPVRTC() const",
			"body": [
				"bool Configuration:supportsPVRTC() "
			],
			"description": "bool Configuration::supportsPVRTC() const"
		},
		 "ReuseGrid* ReuseGrid::create(int times)": {
			"prefix": "ReuseGrid* ReuseGrid::create(int times)",
			"body": [
				"ReuseGrid:create(${1:int times})"
			],
			"description": "ReuseGrid* ReuseGrid::create(int times)"
		},
		 "bool Animation3D::init(const Animation3DData &data)": {
			"prefix": "bool Animation3D::init(const Animation3DData &data)",
			"body": [
				"Animation3D:init(${1:Animation3DData &data})"
			],
			"description": "bool Animation3D::init(const Animation3DData &data)"
		},
		 "void __Array::removeObject(Ref* object, bool releaseObj/* = true*/)": {
			"prefix": "void __Array::removeObject(Ref* object, bool releaseObj/* = true*/)",
			"body": [
				"__Array:removeObject(${1:Ref* object},${2:bool releaseObj/* = true*/})"
			],
			"description": "void __Array::removeObject(Ref* object, bool releaseObj/* = true*/)"
		},
		 "const std::string& GLView::getViewName() const": {
			"prefix": "const std::string& GLView::getViewName() const",
			"body": [
				" std:string& GLView:getViewName() "
			],
			"description": "const std::string& GLView::getViewName() const"
		},
		 "void Quaternion::slerp(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)": {
			"prefix": "void Quaternion::slerp(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)",
			"body": [
				"Quaternion:slerp(${1:Quaternion& q1},${2:Quaternion& q2},${3:float t},${4:Quaternion* dst})"
			],
			"description": "void Quaternion::slerp(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)"
		},
		 "void Mat4::setIdentity()": {
			"prefix": "void Mat4::setIdentity()",
			"body": [
				"void Mat4:setIdentity()"
			],
			"description": "void Mat4::setIdentity()"
		},
		 "void ActionManager::deleteHashElement(tHashElement *element)": {
			"prefix": "void ActionManager::deleteHashElement(tHashElement *element)",
			"body": [
				"ActionManager:deleteHashElement(${1:tHashElement *element})"
			],
			"description": "void ActionManager::deleteHashElement(tHashElement *element)"
		},
		 "void LabelTTFLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)": {
			"prefix": "void LabelTTFLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)",
			"body": [
				"LabelTTFLoader:onHandlePropTypeBlendFunc(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:BlendFunc pBlendFunc},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelTTFLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)"
		},
		 "void GLViewImpl::setIMEKeyboardState(bool bOpen)": {
			"prefix": "void GLViewImpl::setIMEKeyboardState(bool bOpen)",
			"body": [
				"GLViewImpl:setIMEKeyboardState(${1:bool bOpen})"
			],
			"description": "void GLViewImpl::setIMEKeyboardState(bool bOpen)"
		},
		 "void EditBox::setDelegate(EditBoxDelegate* pDelegate)": {
			"prefix": "void EditBox::setDelegate(EditBoxDelegate* pDelegate)",
			"body": [
				"EditBox:setDelegate(${1:EditBoxDelegate* pDelegate})"
			],
			"description": "void EditBox::setDelegate(EditBoxDelegate* pDelegate)"
		},
		 "VertexBuffer* VertexBuffer::create(int sizePerVertex, int vertexNumber, GLenum usage/* = GL_STATIC_DRAW*/)": {
			"prefix": "VertexBuffer* VertexBuffer::create(int sizePerVertex, int vertexNumber, GLenum usage/* = GL_STATIC_DRAW*/)",
			"body": [
				"VertexBuffer:create(${1:int sizePerVertex},${2:int vertexNumber},${3:GLenum usage/* = GL_STATIC_DRAW*/})"
			],
			"description": "VertexBuffer* VertexBuffer::create(int sizePerVertex, int vertexNumber, GLenum usage/* = GL_STATIC_DRAW*/)"
		},
		 "Size Text::getVirtualRendererSize() const": {
			"prefix": "Size Text::getVirtualRendererSize() const",
			"body": [
				"Size Text:getVirtualRendererSize() "
			],
			"description": "Size Text::getVirtualRendererSize() const"
		},
		 "void Director::initTextureCache()": {
			"prefix": "void Director::initTextureCache()",
			"body": [
				"void Director:initTextureCache()"
			],
			"description": "void Director::initTextureCache()"
		},
		 "MeshIndexData* Sprite3D::getMeshIndexData(const std::string& indexId) const": {
			"prefix": "MeshIndexData* Sprite3D::getMeshIndexData(const std::string& indexId) const",
			"body": [
				"Sprite3D:getMeshIndexData(${1:std:string& indexId})"
			],
			"description": "MeshIndexData* Sprite3D::getMeshIndexData(const std::string& indexId) const"
		},
		 "PolygonInfo AutoPolygon::generateTriangles(const Rect& rect, const float& epsilon, const float& threshold)": {
			"prefix": "PolygonInfo AutoPolygon::generateTriangles(const Rect& rect, const float& epsilon, const float& threshold)",
			"body": [
				"AutoPolygon:generateTriangles(${1:Rect& rect},${2:float& epsilon},${3:float& threshold})"
			],
			"description": "PolygonInfo AutoPolygon::generateTriangles(const Rect& rect, const float& epsilon, const float& threshold)"
		},
		 "const Size& Texture2D::getContentSizeInPixels()": {
			"prefix": "const Size& Texture2D::getContentSizeInPixels()",
			"body": [
				" Size& Texture2D:getContentSizeInPixels()"
			],
			"description": "const Size& Texture2D::getContentSizeInPixels()"
		},
		 "void Slider::onPressStateChangedToPressed()": {
			"prefix": "void Slider::onPressStateChangedToPressed()",
			"body": [
				"void Slider:onPressStateChangedToPressed()"
			],
			"description": "void Slider::onPressStateChangedToPressed()"
		},
		 "void Vec3::clamp(const Vec3& min, const Vec3& max)": {
			"prefix": "void Vec3::clamp(const Vec3& min, const Vec3& max)",
			"body": [
				"Vec3:clamp(${1:Vec3& min},${2:Vec3& max})"
			],
			"description": "void Vec3::clamp(const Vec3& min, const Vec3& max)"
		},
		 "float Physics3DSliderConstraint::getDampingLimAng() const": {
			"prefix": "float Physics3DSliderConstraint::getDampingLimAng() const",
			"body": [
				"float Physics3DSliderConstraint:getDampingLimAng() "
			],
			"description": "float Physics3DSliderConstraint::getDampingLimAng() const"
		},
		 "void Widget::FocusNavigationController::onKeypadKeyPressed(EventKeyboard::KeyCode  keyCode, Event *event)": {
			"prefix": "void Widget::FocusNavigationController::onKeypadKeyPressed(EventKeyboard::KeyCode  keyCode, Event *event)",
			"body": [
				"Widget:FocusNavigationController:onKeypadKeyPressed(${1:EventKeyboard:KeyCode  keyCode},${2:Event *event})"
			],
			"description": "void Widget::FocusNavigationController::onKeypadKeyPressed(EventKeyboard::KeyCode  keyCode, Event *event)"
		},
		 "Value TMXTiledMap::getPropertiesForGID(int GID) const": {
			"prefix": "Value TMXTiledMap::getPropertiesForGID(int GID) const",
			"body": [
				"TMXTiledMap:getPropertiesForGID(${1:int GID})"
			],
			"description": "Value TMXTiledMap::getPropertiesForGID(int GID) const"
		},
		 "FadeOutTRTiles* FadeOutTRTiles::create(float duration, const Size& gridSize)": {
			"prefix": "FadeOutTRTiles* FadeOutTRTiles::create(float duration, const Size& gridSize)",
			"body": [
				"FadeOutTRTiles:create(${1:float duration},${2:Size& gridSize})"
			],
			"description": "FadeOutTRTiles* FadeOutTRTiles::create(float duration, const Size& gridSize)"
		},
		 "TransitionProgressInOut* TransitionProgressInOut::create(float t, Scene* scene)": {
			"prefix": "TransitionProgressInOut* TransitionProgressInOut::create(float t, Scene* scene)",
			"body": [
				"TransitionProgressInOut:create(${1:float t},${2:Scene* scene})"
			],
			"description": "TransitionProgressInOut* TransitionProgressInOut::create(float t, Scene* scene)"
		},
		 "EaseCubicActionIn* EaseCubicActionIn::create(ActionInterval* action)": {
			"prefix": "EaseCubicActionIn* EaseCubicActionIn::create(ActionInterval* action)",
			"body": [
				"EaseCubicActionIn:create(${1:ActionInterval* action})"
			],
			"description": "EaseCubicActionIn* EaseCubicActionIn::create(ActionInterval* action)"
		},
		 "float Terrain::getMaxHeight()": {
			"prefix": "float Terrain::getMaxHeight()",
			"body": [
				"float Terrain:getMaxHeight()"
			],
			"description": "float Terrain::getMaxHeight()"
		},
		 "void Director::multiplyMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)": {
			"prefix": "void Director::multiplyMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)",
			"body": [
				"Director:multiplyMatrix(${1:MATRIX_STACK_TYPE type},${2:Mat4& mat})"
			],
			"description": "void Director::multiplyMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)"
		},
		 "void Layer::onTouchesBegan(const std::vector<Touch*>& touches, Event *event)": {
			"prefix": "void Layer::onTouchesBegan(const std::vector<Touch*>& touches, Event *event)",
			"body": [
				"Layer:onTouchesBegan(${1:std:vector<Touch*>& touches},${2:Event *event})"
			],
			"description": "void Layer::onTouchesBegan(const std::vector<Touch*>& touches, Event *event)"
		},
		 "Vec2 Widget::getWorldPosition()const": {
			"prefix": "Vec2 Widget::getWorldPosition()const",
			"body": [
				"Vec2 Widget:getWorldPosition()"
			],
			"description": "Vec2 Widget::getWorldPosition()const"
		},
		 "Tex2F ProgressTimer::textureCoordFromAlphaPoint(Vec2 alpha)": {
			"prefix": "Tex2F ProgressTimer::textureCoordFromAlphaPoint(Vec2 alpha)",
			"body": [
				"ProgressTimer:textureCoordFromAlphaPoint(${1:Vec2 alpha})"
			],
			"description": "Tex2F ProgressTimer::textureCoordFromAlphaPoint(Vec2 alpha)"
		},
		 "void LabelTTFLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char * pPropertyName, const char * pFontTTF, CCBReader * ccbReader)": {
			"prefix": "void LabelTTFLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char * pPropertyName, const char * pFontTTF, CCBReader * ccbReader)",
			"body": [
				"LabelTTFLoader:onHandlePropTypeFontTTF(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:char * pFontTTF},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelTTFLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char * pPropertyName, const char * pFontTTF, CCBReader * ccbReader)"
		},
		 "void Physics3DRigidBody::setAngularFactor( const cocos2d::Vec3& angFac )": {
			"prefix": "void Physics3DRigidBody::setAngularFactor( const cocos2d::Vec3& angFac )",
			"body": [
				"Physics3DRigidBody:setAngularFactor(${1:cocos2d:Vec3& angFac})"
			],
			"description": "void Physics3DRigidBody::setAngularFactor( const cocos2d::Vec3& angFac )"
		},
		 "Pass* Pass::createWithGLProgramState(Technique* technique, GLProgramState* programState)": {
			"prefix": "Pass* Pass::createWithGLProgramState(Technique* technique, GLProgramState* programState)",
			"body": [
				"Pass:createWithGLProgramState(${1:Technique* technique},${2:GLProgramState* programState})"
			],
			"description": "Pass* Pass::createWithGLProgramState(Technique* technique, GLProgramState* programState)"
		},
		 "Frame* RotationFrame::clone()": {
			"prefix": "Frame* RotationFrame::clone()",
			"body": [
				"Frame* RotationFrame:clone()"
			],
			"description": "Frame* RotationFrame::clone()"
		},
		 "bool AbstractCheckButton::isSelected()const": {
			"prefix": "bool AbstractCheckButton::isSelected()const",
			"body": [
				"bool AbstractCheckButton:isSelected()"
			],
			"description": "bool AbstractCheckButton::isSelected()const"
		},
		 "void EventDispatcher::associateNodeAndEventListener(Node* node, EventListener* listener)": {
			"prefix": "void EventDispatcher::associateNodeAndEventListener(Node* node, EventListener* listener)",
			"body": [
				"EventDispatcher:associateNodeAndEventListener(${1:Node* node},${2:EventListener* listener})"
			],
			"description": "void EventDispatcher::associateNodeAndEventListener(Node* node, EventListener* listener)"
		},
		 "void AndroidJavaEngine::unloadEffect(const char* filePath)": {
			"prefix": "void AndroidJavaEngine::unloadEffect(const char* filePath)",
			"body": [
				"AndroidJavaEngine:unloadEffect(${1:char* filePath})"
			],
			"description": "void AndroidJavaEngine::unloadEffect(const char* filePath)"
		},
		 "void Text::setTouchScaleChangeEnabled(bool enable)": {
			"prefix": "void Text::setTouchScaleChangeEnabled(bool enable)",
			"body": [
				"Text:setTouchScaleChangeEnabled(${1:bool enable})"
			],
			"description": "void Text::setTouchScaleChangeEnabled(bool enable)"
		},
		 "void DisplayManager::setVisible(bool visible)": {
			"prefix": "void DisplayManager::setVisible(bool visible)",
			"body": [
				"DisplayManager:setVisible(${1:bool visible})"
			],
			"description": "void DisplayManager::setVisible(bool visible)"
		},
		 "void GLBufferedNode::setGLIndexData(void *buf, GLuint bufSize, int slot)": {
			"prefix": "void GLBufferedNode::setGLIndexData(void *buf, GLuint bufSize, int slot)",
			"body": [
				"GLBufferedNode:setGLIndexData(${1:void *buf},${2:GLuint bufSize},${3:int slot})"
			],
			"description": "void GLBufferedNode::setGLIndexData(void *buf, GLuint bufSize, int slot)"
		},
		 "Spawn* Spawn::reverse() const": {
			"prefix": "Spawn* Spawn::reverse() const",
			"body": [
				"Spawn* Spawn:reverse() "
			],
			"description": "Spawn* Spawn::reverse() const"
		},
		 "void GridBase::set2DProjection()": {
			"prefix": "void GridBase::set2DProjection()",
			"body": [
				"void GridBase:set2DProjection()"
			],
			"description": "void GridBase::set2DProjection()"
		},
		 "void TransitionSplitCols::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void TransitionSplitCols::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"TransitionSplitCols:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void TransitionSplitCols::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "Physics3DRigidBody* Physics3DRigidBody::create(Physics3DRigidBodyDes* info)": {
			"prefix": "Physics3DRigidBody* Physics3DRigidBody::create(Physics3DRigidBodyDes* info)",
			"body": [
				"Physics3DRigidBody:create(${1:Physics3DRigidBodyDes* info})"
			],
			"description": "Physics3DRigidBody* Physics3DRigidBody::create(Physics3DRigidBodyDes* info)"
		},
		 "void ProtectedNode::addProtectedChild(cocos2d::Node *child, int localZOrder)": {
			"prefix": "void ProtectedNode::addProtectedChild(cocos2d::Node *child, int localZOrder)",
			"body": [
				"ProtectedNode:addProtectedChild(${1:cocos2d:Node *child},${2:int localZOrder})"
			],
			"description": "void ProtectedNode::addProtectedChild(cocos2d::Node *child, int localZOrder)"
		},
		 "bool PhysicsJointDistance::createConstraints()": {
			"prefix": "bool PhysicsJointDistance::createConstraints()",
			"body": [
				"bool PhysicsJointDistance:createConstraints()"
			],
			"description": "bool PhysicsJointDistance::createConstraints()"
		},
		 "const std::string& NavMeshObstacle::getNavMeshObstacleComponentName()": {
			"prefix": "const std::string& NavMeshObstacle::getNavMeshObstacleComponentName()",
			"body": [
				" std:string& NavMeshObstacle:getNavMeshObstacleComponentName()"
			],
			"description": "const std::string& NavMeshObstacle::getNavMeshObstacleComponentName()"
		},
		 "void OBB::getInterval(const OBB& box, const Vec3& axis, float &min, float &max)const": {
			"prefix": "void OBB::getInterval(const OBB& box, const Vec3& axis, float &min, float &max)const",
			"body": [
				"OBB:getInterval(${1:OBB& box},${2:Vec3& axis},${3:float &min},${4:float &max})"
			],
			"description": "void OBB::getInterval(const OBB& box, const Vec3& axis, float &min, float &max)const"
		},
		 "void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist, Texture2D *texture)": {
			"prefix": "void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist, Texture2D *texture)",
			"body": [
				"SpriteFrameCache:addSpriteFramesWithFile(${1:std:string& plist},${2:Texture2D *texture})"
			],
			"description": "void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist, Texture2D *texture)"
		},
		 "void Sprite::setScaleX(float scaleX)": {
			"prefix": "void Sprite::setScaleX(float scaleX)",
			"body": [
				"Sprite:setScaleX(${1:float scaleX})"
			],
			"description": "void Sprite::setScaleX(float scaleX)"
		},
		 "bool Scene::initWithPhysics()": {
			"prefix": "bool Scene::initWithPhysics()",
			"body": [
				"bool Scene:initWithPhysics()"
			],
			"description": "bool Scene::initWithPhysics()"
		},
		 "void TextureCache::waitForQuit()": {
			"prefix": "void TextureCache::waitForQuit()",
			"body": [
				"void TextureCache:waitForQuit()"
			],
			"description": "void TextureCache::waitForQuit()"
		},
		 "void ActionTimelineCache::removeAction(const std::string& fileName)": {
			"prefix": "void ActionTimelineCache::removeAction(const std::string& fileName)",
			"body": [
				"ActionTimelineCache:removeAction(${1:std:string& fileName})"
			],
			"description": "void ActionTimelineCache::removeAction(const std::string& fileName)"
		},
		 "ActionInterval* TransitionMoveInL::easeActionWithAction(ActionInterval* action)": {
			"prefix": "ActionInterval* TransitionMoveInL::easeActionWithAction(ActionInterval* action)",
			"body": [
				"TransitionMoveInL:easeActionWithAction(${1:ActionInterval* action})"
			],
			"description": "ActionInterval* TransitionMoveInL::easeActionWithAction(ActionInterval* action)"
		},
		 "void PointArray::insertControlPoint(Vec2 &controlPoint, ssize_t index)": {
			"prefix": "void PointArray::insertControlPoint(Vec2 &controlPoint, ssize_t index)",
			"body": [
				"PointArray:insertControlPoint(${1:Vec2 &controlPoint},${2:ssize_t index})"
			],
			"description": "void PointArray::insertControlPoint(Vec2 &controlPoint, ssize_t index)"
		},
		 "bool ScrollView::startBounceBackIfNeeded()": {
			"prefix": "bool ScrollView::startBounceBackIfNeeded()",
			"body": [
				"bool ScrollView:startBounceBackIfNeeded()"
			],
			"description": "bool ScrollView::startBounceBackIfNeeded()"
		},
		 "void ScaleTo::update(float time)": {
			"prefix": "void ScaleTo::update(float time)",
			"body": [
				"ScaleTo:update(${1:float time})"
			],
			"description": "void ScaleTo::update(float time)"
		},
		 "bool Scheduler::isScheduled(SEL_SCHEDULE selector, Ref *target)": {
			"prefix": "bool Scheduler::isScheduled(SEL_SCHEDULE selector, Ref *target)",
			"body": [
				"Scheduler:isScheduled(${1:SEL_SCHEDULE selector},${2:Ref *target})"
			],
			"description": "bool Scheduler::isScheduled(SEL_SCHEDULE selector, Ref *target)"
		},
		 "Animation3D* Animation3DCache::getAnimation(const std::string& key)": {
			"prefix": "Animation3D* Animation3DCache::getAnimation(const std::string& key)",
			"body": [
				"Animation3DCache:getAnimation(${1:std:string& key})"
			],
			"description": "Animation3D* Animation3DCache::getAnimation(const std::string& key)"
		},
		 "void PhysicsWorld::updateBodies()": {
			"prefix": "void PhysicsWorld::updateBodies()",
			"body": [
				"void PhysicsWorld:updateBodies()"
			],
			"description": "void PhysicsWorld::updateBodies()"
		},
		 "Size::Size(void) : width(0), height(0)": {
			"prefix": "Size::Size(void) : width(0), height(0)",
			"body": [
				")"
			],
			"description": "Size::Size(void) : width(0), height(0)"
		},
		 "const Rect& Slider::getCapInsetsProgressBarRebderer()const": {
			"prefix": "const Rect& Slider::getCapInsetsProgressBarRebderer()const",
			"body": [
				" Rect& Slider:getCapInsetsProgressBarRebderer()"
			],
			"description": "const Rect& Slider::getCapInsetsProgressBarRebderer()const"
		},
		 "void Node::removeFromParentAndCleanup(bool cleanup)": {
			"prefix": "void Node::removeFromParentAndCleanup(bool cleanup)",
			"body": [
				"Node:removeFromParentAndCleanup(${1:bool cleanup})"
			],
			"description": "void Node::removeFromParentAndCleanup(bool cleanup)"
		},
		 "ssize_t Data::getSize() const": {
			"prefix": "ssize_t Data::getSize() const",
			"body": [
				"ssize_t Data:getSize() "
			],
			"description": "ssize_t Data::getSize() const"
		},
		 "void Sprite::addChild(Node *child, int zOrder, int tag)": {
			"prefix": "void Sprite::addChild(Node *child, int zOrder, int tag)",
			"body": [
				"Sprite:addChild(${1:Node *child},${2:int zOrder},${3:int tag})"
			],
			"description": "void Sprite::addChild(Node *child, int zOrder, int tag)"
		},
		 "void ArmatureDataManager::addArmatureFileInfo(const std::string& configFilePath)": {
			"prefix": "void ArmatureDataManager::addArmatureFileInfo(const std::string& configFilePath)",
			"body": [
				"ArmatureDataManager:addArmatureFileInfo(${1:std:string& configFilePath})"
			],
			"description": "void ArmatureDataManager::addArmatureFileInfo(const std::string& configFilePath)"
		},
		 "int* FontCharMap::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const": {
			"prefix": "int* FontCharMap::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const",
			"body": [
				"FontCharMap:getHorizontalKerningForTextUTF16(${1:std:u16string& text},${2:int &outNumLetters})"
			],
			"description": "int* FontCharMap::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const"
		},
		 "bool Texture2D::hasMipmaps() const": {
			"prefix": "bool Texture2D::hasMipmaps() const",
			"body": [
				"bool Texture2D:hasMipmaps() "
			],
			"description": "bool Texture2D::hasMipmaps() const"
		},
		 "void TextureAtlas::removeQuadAtIndex(ssize_t index)": {
			"prefix": "void TextureAtlas::removeQuadAtIndex(ssize_t index)",
			"body": [
				"TextureAtlas:removeQuadAtIndex(${1:ssize_t index})"
			],
			"description": "void TextureAtlas::removeQuadAtIndex(ssize_t index)"
		},
		 "const Size& CCBAnimationManager::getRootContainerSize()": {
			"prefix": "const Size& CCBAnimationManager::getRootContainerSize()",
			"body": [
				" Size& CCBAnimationManager:getRootContainerSize()"
			],
			"description": "const Size& CCBAnimationManager::getRootContainerSize()"
		},
		 "float * NodeLoader::parsePropTypeScaleLock(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)": {
			"prefix": "float * NodeLoader::parsePropTypeScaleLock(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)",
			"body": [
				"* NodeLoader:parsePropTypeScaleLock(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader},${4:char *pPropertyName})"
			],
			"description": "float * NodeLoader::parsePropTypeScaleLock(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)"
		},
		 "bool CCBReader::readStringCache()": {
			"prefix": "bool CCBReader::readStringCache()",
			"body": [
				"bool CCBReader:readStringCache()"
			],
			"description": "bool CCBReader::readStringCache()"
		},
		 "GLContextAttrs GLView::getGLContextAttrs()": {
			"prefix": "GLContextAttrs GLView::getGLContextAttrs()",
			"body": [
				"GLContextAttrs GLView:getGLContextAttrs()"
			],
			"description": "GLContextAttrs GLView::getGLContextAttrs()"
		},
		 "void UniformValue::setVec3(const Vec3& value)": {
			"prefix": "void UniformValue::setVec3(const Vec3& value)",
			"body": [
				"UniformValue:setVec3(${1:Vec3& value})"
			],
			"description": "void UniformValue::setVec3(const Vec3& value)"
		},
		 "bool EventListenerFocus::init()": {
			"prefix": "bool EventListenerFocus::init()",
			"body": [
				"bool EventListenerFocus:init()"
			],
			"description": "bool EventListenerFocus::init()"
		},
		 "Frame* ActionTimelineCache::loadInnerActionFrameWithFlatBuffers(const flatbuffers::InnerActionFrame *flatbuffers)": {
			"prefix": "Frame* ActionTimelineCache::loadInnerActionFrameWithFlatBuffers(const flatbuffers::InnerActionFrame *flatbuffers)",
			"body": [
				"ActionTimelineCache:loadInnerActionFrameWithFlatBuffers(${1:flatbuffers:InnerActionFrame *flatbuffers})"
			],
			"description": "Frame* ActionTimelineCache::loadInnerActionFrameWithFlatBuffers(const flatbuffers::InnerActionFrame *flatbuffers)"
		},
		 "void RenderQueue::push_back(RenderCommand* command)": {
			"prefix": "void RenderQueue::push_back(RenderCommand* command)",
			"body": [
				"RenderQueue:push_back(${1:RenderCommand* command})"
			],
			"description": "void RenderQueue::push_back(RenderCommand* command)"
		},
		 "TiledGrid3D* TiledGrid3D::create(const Size& gridSize, const Rect& rect)": {
			"prefix": "TiledGrid3D* TiledGrid3D::create(const Size& gridSize, const Rect& rect)",
			"body": [
				"TiledGrid3D:create(${1:Size& gridSize},${2:Rect& rect})"
			],
			"description": "TiledGrid3D* TiledGrid3D::create(const Size& gridSize, const Rect& rect)"
		},
		 "bool EventListenerTouchOneByOne::init()": {
			"prefix": "bool EventListenerTouchOneByOne::init()",
			"body": [
				"bool EventListenerTouchOneByOne:init()"
			],
			"description": "bool EventListenerTouchOneByOne::init()"
		},
		 "void PhysicsJointGear::setPhase(float phase)": {
			"prefix": "void PhysicsJointGear::setPhase(float phase)",
			"body": [
				"PhysicsJointGear:setPhase(${1:float phase})"
			],
			"description": "void PhysicsJointGear::setPhase(float phase)"
		},
		 "void Timeline::updateCurrentKeyFrame(unsigned int frameIndex)": {
			"prefix": "void Timeline::updateCurrentKeyFrame(unsigned int frameIndex)",
			"body": [
				"Timeline:updateCurrentKeyFrame(${1:unsigned int frameIndex})"
			],
			"description": "void Timeline::updateCurrentKeyFrame(unsigned int frameIndex)"
		},
		 "bool DecorativeDisplay::init()": {
			"prefix": "bool DecorativeDisplay::init()",
			"body": [
				"bool DecorativeDisplay:init()"
			],
			"description": "bool DecorativeDisplay::init()"
		},
		 "bool CCBReader::readBool()": {
			"prefix": "bool CCBReader::readBool()",
			"body": [
				"bool CCBReader:readBool()"
			],
			"description": "bool CCBReader::readBool()"
		},
		 "void Follow::step(float dt)": {
			"prefix": "void Follow::step(float dt)",
			"body": [
				"Follow:step(${1:float dt})"
			],
			"description": "void Follow::step(float dt)"
		},
		 "Texture2D::PixelFormat getDevicePixelFormat(Texture2D::PixelFormat format)": {
			"prefix": "Texture2D::PixelFormat getDevicePixelFormat(Texture2D::PixelFormat format)",
			"body": [
				"getDevicePixelFormat(${1:Texture2D:PixelFormat format})"
			],
			"description": "Texture2D::PixelFormat getDevicePixelFormat(Texture2D::PixelFormat format)"
		},
		 "std::string RadioButton::getDescription() const": {
			"prefix": "std::string RadioButton::getDescription() const",
			"body": [
				"std:string RadioButton:getDescription() "
			],
			"description": "std::string RadioButton::getDescription() const"
		},
		 "void Size::setSize(float w, float h)": {
			"prefix": "void Size::setSize(float w, float h)",
			"body": [
				"Size:setSize(${1:float w},${2:float h})"
			],
			"description": "void Size::setSize(float w, float h)"
		},
		 "bool ActionTimeline::init()": {
			"prefix": "bool ActionTimeline::init()",
			"body": [
				"bool ActionTimeline:init()"
			],
			"description": "bool ActionTimeline::init()"
		},
		 "void GLView::pollEvents()": {
			"prefix": "void GLView::pollEvents()",
			"body": [
				"void GLView:pollEvents()"
			],
			"description": "void GLView::pollEvents()"
		},
		 "Vec3 Grid3DAction::getVertex(const Vec2& position) const": {
			"prefix": "Vec3 Grid3DAction::getVertex(const Vec2& position) const",
			"body": [
				"Grid3DAction:getVertex(${1:Vec2& position})"
			],
			"description": "Vec3 Grid3DAction::getVertex(const Vec2& position) const"
		},
		 "__Array* __Array::create(Ref* object, ...)": {
			"prefix": "__Array* __Array::create(Ref* object, ...)",
			"body": [
				"__Array:create(${1:Ref* object},${2:...})"
			],
			"description": "__Array* __Array::create(Ref* object, ...)"
		},
		 "TileMapAtlas * TileMapAtlas::create(const std::string& tile, const std::string& mapFile, int tileWidth, int tileHeight)": {
			"prefix": "TileMapAtlas * TileMapAtlas::create(const std::string& tile, const std::string& mapFile, int tileWidth, int tileHeight)",
			"body": [
				"* TileMapAtlas:create(${1:std:string& tile},${2:std:string& mapFile},${3:int tileWidth},${4:int tileHeight})"
			],
			"description": "TileMapAtlas * TileMapAtlas::create(const std::string& tile, const std::string& mapFile, int tileWidth, int tileHeight)"
		},
		 "Physics3DShape* Physics3DShape::createCompoundShape( const std::vector<std::pair<Physics3DShape *, Mat4>> &shapes )": {
			"prefix": "Physics3DShape* Physics3DShape::createCompoundShape( const std::vector<std::pair<Physics3DShape *, Mat4>> &shapes )",
			"body": [
				"Physics3DShape:createCompoundShape(${1:std:vector<std:pair<Physics3DShape *},${2:Mat4>> &shapes})"
			],
			"description": "Physics3DShape* Physics3DShape::createCompoundShape( const std::vector<std::pair<Physics3DShape *, Mat4>> &shapes )"
		},
		 "AnimationCache* AnimationCache::getInstance()": {
			"prefix": "AnimationCache* AnimationCache::getInstance()",
			"body": [
				"AnimationCache* AnimationCache:getInstance()"
			],
			"description": "AnimationCache* AnimationCache::getInstance()"
		},
		 "void PageView::removePageAtIndex(ssize_t index)": {
			"prefix": "void PageView::removePageAtIndex(ssize_t index)",
			"body": [
				"PageView:removePageAtIndex(${1:ssize_t index})"
			],
			"description": "void PageView::removePageAtIndex(ssize_t index)"
		},
		 "void InputDelegate::setTouchEnabled(bool enabled)": {
			"prefix": "void InputDelegate::setTouchEnabled(bool enabled)",
			"body": [
				"InputDelegate:setTouchEnabled(${1:bool enabled})"
			],
			"description": "void InputDelegate::setTouchEnabled(bool enabled)"
		},
		 "void SpriteBatchNode::reorderBatch(bool reorder)": {
			"prefix": "void SpriteBatchNode::reorderBatch(bool reorder)",
			"body": [
				"SpriteBatchNode:reorderBatch(${1:bool reorder})"
			],
			"description": "void SpriteBatchNode::reorderBatch(bool reorder)"
		},
		 "void TrianglesCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, const Triangles& triangles,const Mat4& mv, uint32_t flags)": {
			"prefix": "void TrianglesCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, const Triangles& triangles,const Mat4& mv, uint32_t flags)",
			"body": [
				"TrianglesCommand:init(${1:float globalOrder},${2:GLuint textureID},${3:GLProgramState* glProgramState},${4:BlendFunc blendType},${5:Triangles& triangles},${6:Mat4& mv},${7:uint32_t flags})"
			],
			"description": "void TrianglesCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, const Triangles& triangles,const Mat4& mv, uint32_t flags)"
		},
		 "Action * Node::runAction(Action* action)": {
			"prefix": "Action * Node::runAction(Action* action)",
			"body": [
				"* Node:runAction(${1:Action* action})"
			],
			"description": "Action * Node::runAction(Action* action)"
		},
		 "Shaky3D* Shaky3D::create(float duration, const Size& gridSize, int range, bool shakeZ)": {
			"prefix": "Shaky3D* Shaky3D::create(float duration, const Size& gridSize, int range, bool shakeZ)",
			"body": [
				"Shaky3D:create(${1:float duration},${2:Size& gridSize},${3:int range},${4:bool shakeZ})"
			],
			"description": "Shaky3D* Shaky3D::create(float duration, const Size& gridSize, int range, bool shakeZ)"
		},
		 "std::string& Physics3DComponent::getPhysics3DComponentName()": {
			"prefix": "std::string& Physics3DComponent::getPhysics3DComponentName()",
			"body": [
				"std:string& Physics3DComponent:getPhysics3DComponentName()"
			],
			"description": "std::string& Physics3DComponent::getPhysics3DComponentName()"
		},
		 "void LayerColor::changeHeight(GLfloat h)": {
			"prefix": "void LayerColor::changeHeight(GLfloat h)",
			"body": [
				"LayerColor:changeHeight(${1:GLfloat h})"
			],
			"description": "void LayerColor::changeHeight(GLfloat h)"
		},
		 "void __Array::replaceObjectAtIndex(ssize_t index, Ref* object, bool releaseObject/* = true*/)": {
			"prefix": "void __Array::replaceObjectAtIndex(ssize_t index, Ref* object, bool releaseObject/* = true*/)",
			"body": [
				"__Array:replaceObjectAtIndex(${1:ssize_t index},${2:Ref* object},${3:bool releaseObject/* = true*/})"
			],
			"description": "void __Array::replaceObjectAtIndex(ssize_t index, Ref* object, bool releaseObject/* = true*/)"
		},
		 "void Configuration::setValue(const std::string& key, const Value& value)": {
			"prefix": "void Configuration::setValue(const std::string& key, const Value& value)",
			"body": [
				"Configuration:setValue(${1:std:string& key},${2:Value& value})"
			],
			"description": "void Configuration::setValue(const std::string& key, const Value& value)"
		},
		 "void ProgressTo::update(float time)": {
			"prefix": "void ProgressTo::update(float time)",
			"body": [
				"ProgressTo:update(${1:float time})"
			],
			"description": "void ProgressTo::update(float time)"
		},
		 "std::string CCBReader::readCachedString()": {
			"prefix": "std::string CCBReader::readCachedString()",
			"body": [
				"std:string CCBReader:readCachedString()"
			],
			"description": "std::string CCBReader::readCachedString()"
		},
		 "void EditBoxImplWin::setVisible(bool visible)": {
			"prefix": "void EditBoxImplWin::setVisible(bool visible)",
			"body": [
				"EditBoxImplWin:setVisible(${1:bool visible})"
			],
			"description": "void EditBoxImplWin::setVisible(bool visible)"
		},
		 "void MenuItemSprite::selected()": {
			"prefix": "void MenuItemSprite::selected()",
			"body": [
				"void MenuItemSprite:selected()"
			],
			"description": "void MenuItemSprite::selected()"
		},
		 "bool ActionTimeline::isPlaying() const": {
			"prefix": "bool ActionTimeline::isPlaying() const",
			"body": [
				"bool ActionTimeline:isPlaying() "
			],
			"description": "bool ActionTimeline::isPlaying() const"
		},
		 "FlipX3D* FlipX3D::clone() const": {
			"prefix": "FlipX3D* FlipX3D::clone() const",
			"body": [
				"FlipX3D* FlipX3D:clone() "
			],
			"description": "FlipX3D* FlipX3D::clone() const"
		},
		 "void Node::schedule(const std::function<void(float)> &callback, float interval, const std::string &key)": {
			"prefix": "void Node::schedule(const std::function<void(float)> &callback, float interval, const std::string &key)",
			"body": [
				"Node:schedule(${1:std:function<void(float})"
			],
			"description": "void Node::schedule(const std::function<void(float)> &callback, float interval, const std::string &key)"
		},
		 "void PageView::removePage(Layout* page)": {
			"prefix": "void PageView::removePage(Layout* page)",
			"body": [
				"PageView:removePage(${1:Layout* page})"
			],
			"description": "void PageView::removePage(Layout* page)"
		},
		 "void AnimationCache::removeAnimation(const std::string& name)": {
			"prefix": "void AnimationCache::removeAnimation(const std::string& name)",
			"body": [
				"AnimationCache:removeAnimation(${1:std:string& name})"
			],
			"description": "void AnimationCache::removeAnimation(const std::string& name)"
		},
		 "int CCBAnimationManager::getSequenceId(const char* pSequenceName)": {
			"prefix": "int CCBAnimationManager::getSequenceId(const char* pSequenceName)",
			"body": [
				"CCBAnimationManager:getSequenceId(${1:char* pSequenceName})"
			],
			"description": "int CCBAnimationManager::getSequenceId(const char* pSequenceName)"
		},
		 "void ParticleSystemQuadLoader::onHandlePropTypeFloatVar(Node * pNode, Node * pParent, const char * pPropertyName, float * pFloatVar, CCBReader * ccbReader)": {
			"prefix": "void ParticleSystemQuadLoader::onHandlePropTypeFloatVar(Node * pNode, Node * pParent, const char * pPropertyName, float * pFloatVar, CCBReader * ccbReader)",
			"body": [
				"ParticleSystemQuadLoader:onHandlePropTypeFloatVar(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:float * pFloatVar},${5:CCBReader * ccbReader})"
			],
			"description": "void ParticleSystemQuadLoader::onHandlePropTypeFloatVar(Node * pNode, Node * pParent, const char * pPropertyName, float * pFloatVar, CCBReader * ccbReader)"
		},
		 "void Slider::onTouchMoved(Touch *touch, Event *unusedEvent)": {
			"prefix": "void Slider::onTouchMoved(Touch *touch, Event *unusedEvent)",
			"body": [
				"Slider:onTouchMoved(${1:Touch *touch},${2:Event *unusedEvent})"
			],
			"description": "void Slider::onTouchMoved(Touch *touch, Event *unusedEvent)"
		},
		 "void CustomCommand::execute()": {
			"prefix": "void CustomCommand::execute()",
			"body": [
				"void CustomCommand:execute()"
			],
			"description": "void CustomCommand::execute()"
		},
		 "void Camera::setBackgroundBrush(CameraBackgroundBrush* clearBrush)": {
			"prefix": "void Camera::setBackgroundBrush(CameraBackgroundBrush* clearBrush)",
			"body": [
				"Camera:setBackgroundBrush(${1:CameraBackgroundBrush* clearBrush})"
			],
			"description": "void Camera::setBackgroundBrush(CameraBackgroundBrush* clearBrush)"
		},
		 "void Renderer::clear()": {
			"prefix": "void Renderer::clear()",
			"body": [
				"void Renderer:clear()"
			],
			"description": "void Renderer::clear()"
		},
		 "AudioCache* AudioEngineImpl::preload(const std::string& filePath, std::function<void(bool)> callback)": {
			"prefix": "AudioCache* AudioEngineImpl::preload(const std::string& filePath, std::function<void(bool)> callback)",
			"body": [
				"AudioEngineImpl:preload(${1:std:string& filePath},${2:std:function<void(bool})"
			],
			"description": "AudioCache* AudioEngineImpl::preload(const std::string& filePath, std::function<void(bool)> callback)"
		},
		 "void ObjectFactory::registerType(const TInfo &t)": {
			"prefix": "void ObjectFactory::registerType(const TInfo &t)",
			"body": [
				"ObjectFactory:registerType(${1:TInfo &t})"
			],
			"description": "void ObjectFactory::registerType(const TInfo &t)"
		},
		 "void HttpClient::processResponse(HttpResponse* response, char* responseMessage)": {
			"prefix": "void HttpClient::processResponse(HttpResponse* response, char* responseMessage)",
			"body": [
				"HttpClient:processResponse(${1:HttpResponse* response},${2:char* responseMessage})"
			],
			"description": "void HttpClient::processResponse(HttpResponse* response, char* responseMessage)"
		},
		 "bool Physics3DWorld::rayCast(const cocos2d::Vec3& startPos, const cocos2d::Vec3& endPos, Physics3DWorld::HitResult* result)": {
			"prefix": "bool Physics3DWorld::rayCast(const cocos2d::Vec3& startPos, const cocos2d::Vec3& endPos, Physics3DWorld::HitResult* result)",
			"body": [
				"Physics3DWorld:rayCast(${1:cocos2d:Vec3& startPos},${2:cocos2d:Vec3& endPos},${3:Physics3DWorld:HitResult* result})"
			],
			"description": "bool Physics3DWorld::rayCast(const cocos2d::Vec3& startPos, const cocos2d::Vec3& endPos, Physics3DWorld::HitResult* result)"
		},
		 "void Downloader::downloadToBufferSync(const std::string& srcUrl, unsigned char *buffer, long size, const std::string& customId/* = ""*/)": {
			"prefix": "void Downloader::downloadToBufferSync(const std::string& srcUrl, unsigned char *buffer, long size, const std::string& customId/* = ""*/)",
			"body": [
				"Downloader:downloadToBufferSync(${1:std:string& srcUrl},${2:unsigned char *buffer},${3:long size},${4:std:string& customId/* = ""*/})"
			],
			"description": "void Downloader::downloadToBufferSync(const std::string& srcUrl, unsigned char *buffer, long size, const std::string& customId/* = ""*/)"
		},
		 "Texture2D* MotionStreak::getTexture(void) const": {
			"prefix": "Texture2D* MotionStreak::getTexture(void) const",
			"body": [
				"MotionStreak:getTexture(${1:void})"
			],
			"description": "Texture2D* MotionStreak::getTexture(void) const"
		},
		 "bool TransitionFade::initWithDuration(float t, Scene *scene)": {
			"prefix": "bool TransitionFade::initWithDuration(float t, Scene *scene)",
			"body": [
				"TransitionFade:initWithDuration(${1:float t},${2:Scene *scene})"
			],
			"description": "bool TransitionFade::initWithDuration(float t, Scene *scene)"
		},
		 "EaseQuarticActionInOut* EaseQuarticActionInOut::reverse() const": {
			"prefix": "EaseQuarticActionInOut* EaseQuarticActionInOut::reverse() const",
			"body": [
				"EaseQuarticActionInOut* EaseQuarticActionInOut:reverse() "
			],
			"description": "EaseQuarticActionInOut* EaseQuarticActionInOut::reverse() const"
		},
		 "bool Material::parseRenderState(RenderState* renderState, Properties* properties)": {
			"prefix": "bool Material::parseRenderState(RenderState* renderState, Properties* properties)",
			"body": [
				"Material:parseRenderState(${1:RenderState* renderState},${2:Properties* properties})"
			],
			"description": "bool Material::parseRenderState(RenderState* renderState, Properties* properties)"
		},
		 "Vec3 NavMeshAgent::getCurrentVelocity() const": {
			"prefix": "Vec3 NavMeshAgent::getCurrentVelocity() const",
			"body": [
				"Vec3 NavMeshAgent:getCurrentVelocity() "
			],
			"description": "Vec3 NavMeshAgent::getCurrentVelocity() const"
		},
		 "float LabelTTF::getFontSize() const": {
			"prefix": "float LabelTTF::getFontSize() const",
			"body": [
				"float LabelTTF:getFontSize() "
			],
			"description": "float LabelTTF::getFontSize() const"
		},
		 "void MenuItemToggle::selected()": {
			"prefix": "void MenuItemToggle::selected()",
			"body": [
				"void MenuItemToggle:selected()"
			],
			"description": "void MenuItemToggle::selected()"
		},
		 "bool TriggerMng::removeTriggerObj(TriggerObj *Obj)": {
			"prefix": "bool TriggerMng::removeTriggerObj(TriggerObj *Obj)",
			"body": [
				"TriggerMng:removeTriggerObj(${1:TriggerObj *Obj})"
			],
			"description": "bool TriggerMng::removeTriggerObj(TriggerObj *Obj)"
		},
		 "const CookiesInfo* HttpCookie::getMatchCookie(const std::string& url) const": {
			"prefix": "const CookiesInfo* HttpCookie::getMatchCookie(const std::string& url) const",
			"body": [
				"CookiesInfo* HttpCookie:getMatchCookie(${1:std:string& url})"
			],
			"description": "const CookiesInfo* HttpCookie::getMatchCookie(const std::string& url) const"
		},
		 "void purgeCachedByFile(const std::string& filePath)": {
			"prefix": "void purgeCachedByFile(const std::string& filePath)",
			"body": [
				"purgeCachedByFile(${1:std:string& filePath})"
			],
			"description": "void purgeCachedByFile(const std::string& filePath)"
		},
		 "class Widget::FocusNavigationController": {
			"prefix": "class Widget::FocusNavigationController",
			"body": [
				"class Widget:FocusNavigationController"
			],
			"description": "class Widget::FocusNavigationController"
		},
		 "void Node::ignoreAnchorPointForPosition(bool newValue)": {
			"prefix": "void Node::ignoreAnchorPointForPosition(bool newValue)",
			"body": [
				"Node:ignoreAnchorPointForPosition(${1:bool newValue})"
			],
			"description": "void Node::ignoreAnchorPointForPosition(bool newValue)"
		},
		 "std::string WidgetPropertiesReader::getGUIClassName(const std::string &name)": {
			"prefix": "std::string WidgetPropertiesReader::getGUIClassName(const std::string &name)",
			"body": [
				"WidgetPropertiesReader:getGUIClassName(${1:std:string &name})"
			],
			"description": "std::string WidgetPropertiesReader::getGUIClassName(const std::string &name)"
		},
		 "float * NodeLoader::parsePropTypeFloatVar(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "float * NodeLoader::parsePropTypeFloatVar(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"* NodeLoader:parsePropTypeFloatVar(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "float * NodeLoader::parsePropTypeFloatVar(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "Offset<NodeAction> FlatBuffersSerialize::createNodeAction(const tinyxml2::XMLElement *objectData)": {
			"prefix": "Offset<NodeAction> FlatBuffersSerialize::createNodeAction(const tinyxml2::XMLElement *objectData)",
			"body": [
				"FlatBuffersSerialize:createNodeAction(${1:tinyxml2:XMLElement *objectData})"
			],
			"description": "Offset<NodeAction> FlatBuffersSerialize::createNodeAction(const tinyxml2::XMLElement *objectData)"
		},
		 "unsigned int Texture2D::getBitsPerPixelForFormat(Texture2D::PixelFormat format) const": {
			"prefix": "unsigned int Texture2D::getBitsPerPixelForFormat(Texture2D::PixelFormat format) const",
			"body": [
				"int Texture2D:getBitsPerPixelForFormat(${1:Texture2D:PixelFormat format})"
			],
			"description": "unsigned int Texture2D::getBitsPerPixelForFormat(Texture2D::PixelFormat format) const"
		},
		 "void Director::calculateMPF()": {
			"prefix": "void Director::calculateMPF()",
			"body": [
				"void Director:calculateMPF()"
			],
			"description": "void Director::calculateMPF()"
		},
		 "void TextField::setString(const std::string& text)": {
			"prefix": "void TextField::setString(const std::string& text)",
			"body": [
				"TextField:setString(${1:std:string& text})"
			],
			"description": "void TextField::setString(const std::string& text)"
		},
		 "RenderTargetRenderBuffer* RenderTargetRenderBuffer::create(unsigned int width, unsigned int height)": {
			"prefix": "RenderTargetRenderBuffer* RenderTargetRenderBuffer::create(unsigned int width, unsigned int height)",
			"body": [
				"RenderTargetRenderBuffer:create(${1:unsigned int width},${2:unsigned int height})"
			],
			"description": "RenderTargetRenderBuffer* RenderTargetRenderBuffer::create(unsigned int width, unsigned int height)"
		},
		 "void ShatteredTiles3D::update(float time)": {
			"prefix": "void ShatteredTiles3D::update(float time)",
			"body": [
				"ShatteredTiles3D:update(${1:float time})"
			],
			"description": "void ShatteredTiles3D::update(float time)"
		},
		 "void Physics3DDebugDrawer::clear()": {
			"prefix": "void Physics3DDebugDrawer::clear()",
			"body": [
				"void Physics3DDebugDrawer:clear()"
			],
			"description": "void Physics3DDebugDrawer::clear()"
		},
		 "bool Slider::hitTest(const cocos2d::Vec2 &pt, const Camera *camera, Vec3 *p) const": {
			"prefix": "bool Slider::hitTest(const cocos2d::Vec2 &pt, const Camera *camera, Vec3 *p) const",
			"body": [
				"Slider:hitTest(${1:cocos2d:Vec2 &pt},${2:Camera *camera},${3:Vec3 *p})"
			],
			"description": "bool Slider::hitTest(const cocos2d::Vec2 &pt, const Camera *camera, Vec3 *p) const"
		},
		 "bool PhysicsJointGear::createConstraints()": {
			"prefix": "bool PhysicsJointGear::createConstraints()",
			"body": [
				"bool PhysicsJointGear:createConstraints()"
			],
			"description": "bool PhysicsJointGear::createConstraints()"
		},
		 "bool MathUtil::isNeon64Enabled()": {
			"prefix": "bool MathUtil::isNeon64Enabled()",
			"body": [
				"bool MathUtil:isNeon64Enabled()"
			],
			"description": "bool MathUtil::isNeon64Enabled()"
		},
		 "Grid3D* Grid3D::create(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)": {
			"prefix": "Grid3D* Grid3D::create(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)",
			"body": [
				"Grid3D:create(${1:Size& gridSize},${2:Texture2D *texture},${3:bool flipped},${4:Rect& rect})"
			],
			"description": "Grid3D* Grid3D::create(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)"
		},
		 "ColliderDetector *ColliderDetector::create(Bone *bone)": {
			"prefix": "ColliderDetector *ColliderDetector::create(Bone *bone)",
			"body": [
				"*ColliderDetector:create(${1:Bone *bone})"
			],
			"description": "ColliderDetector *ColliderDetector::create(Bone *bone)"
		},
		 "int EditBoxImplCommon::getMaxLength()": {
			"prefix": "int EditBoxImplCommon::getMaxLength()",
			"body": [
				"int EditBoxImplCommon:getMaxLength()"
			],
			"description": "int EditBoxImplCommon::getMaxLength()"
		},
		 "void Widget::setEnabled(bool enabled)": {
			"prefix": "void Widget::setEnabled(bool enabled)",
			"body": [
				"Widget:setEnabled(${1:bool enabled})"
			],
			"description": "void Widget::setEnabled(bool enabled)"
		},
		 "GLViewImpl* GLViewImpl::create(const std::string& viewName)": {
			"prefix": "GLViewImpl* GLViewImpl::create(const std::string& viewName)",
			"body": [
				"GLViewImpl:create(${1:std:string& viewName})"
			],
			"description": "GLViewImpl* GLViewImpl::create(const std::string& viewName)"
		},
		 "void Layout::setClippingEnabled(bool able)": {
			"prefix": "void Layout::setClippingEnabled(bool able)",
			"body": [
				"Layout:setClippingEnabled(${1:bool able})"
			],
			"description": "void Layout::setClippingEnabled(bool able)"
		},
		 "GLubyte LayerGradient::getEndOpacity() const": {
			"prefix": "GLubyte LayerGradient::getEndOpacity() const",
			"body": [
				"GLubyte LayerGradient:getEndOpacity() "
			],
			"description": "GLubyte LayerGradient::getEndOpacity() const"
		},
		 "void Mat4::getScale(Vec3* scale) const": {
			"prefix": "void Mat4::getScale(Vec3* scale) const",
			"body": [
				"Mat4:getScale(${1:Vec3* scale})"
			],
			"description": "void Mat4::getScale(Vec3* scale) const"
		},
		 "int NinePatchImageParser::getFrameHeight()const": {
			"prefix": "int NinePatchImageParser::getFrameHeight()const",
			"body": [
				"int NinePatchImageParser:getFrameHeight()"
			],
			"description": "int NinePatchImageParser::getFrameHeight()const"
		},
		 "JumpTo* JumpTo::create(float duration, const Vec2& position, float height, int jumps)": {
			"prefix": "JumpTo* JumpTo::create(float duration, const Vec2& position, float height, int jumps)",
			"body": [
				"JumpTo:create(${1:float duration},${2:Vec2& position},${3:float height},${4:int jumps})"
			],
			"description": "JumpTo* JumpTo::create(float duration, const Vec2& position, float height, int jumps)"
		},
		 "void ScrollView::jumpToTop()": {
			"prefix": "void ScrollView::jumpToTop()",
			"body": [
				"void ScrollView:jumpToTop()"
			],
			"description": "void ScrollView::jumpToTop()"
		},
		 "bool Material::initWithFile(const std::string& validfilename)": {
			"prefix": "bool Material::initWithFile(const std::string& validfilename)",
			"body": [
				"Material:initWithFile(${1:std:string& validfilename})"
			],
			"description": "bool Material::initWithFile(const std::string& validfilename)"
		},
		 "void Sprite::setDisplayFrameWithAnimationName(const std::string& animationName, ssize_t frameIndex)": {
			"prefix": "void Sprite::setDisplayFrameWithAnimationName(const std::string& animationName, ssize_t frameIndex)",
			"body": [
				"Sprite:setDisplayFrameWithAnimationName(${1:std:string& animationName},${2:ssize_t frameIndex})"
			],
			"description": "void Sprite::setDisplayFrameWithAnimationName(const std::string& animationName, ssize_t frameIndex)"
		},
		 "void Physics3DComponent::onEnter()": {
			"prefix": "void Physics3DComponent::onEnter()",
			"body": [
				"void Physics3DComponent:onEnter()"
			],
			"description": "void Physics3DComponent::onEnter()"
		},
		 "void TextureAtlas::listenRendererRecreated(EventCustom* event)": {
			"prefix": "void TextureAtlas::listenRendererRecreated(EventCustom* event)",
			"body": [
				"TextureAtlas:listenRendererRecreated(${1:EventCustom* event})"
			],
			"description": "void TextureAtlas::listenRendererRecreated(EventCustom* event)"
		},
		 "CCBSetSpriteFrame* CCBSetSpriteFrame::clone() const": {
			"prefix": "CCBSetSpriteFrame* CCBSetSpriteFrame::clone() const",
			"body": [
				"CCBSetSpriteFrame* CCBSetSpriteFrame:clone() "
			],
			"description": "CCBSetSpriteFrame* CCBSetSpriteFrame::clone() const"
		},
		 "void ListView::insertCustomItem(Widget* item, ssize_t index)": {
			"prefix": "void ListView::insertCustomItem(Widget* item, ssize_t index)",
			"body": [
				"ListView:insertCustomItem(${1:Widget* item},${2:ssize_t index})"
			],
			"description": "void ListView::insertCustomItem(Widget* item, ssize_t index)"
		},
		 "int SocketIOPacket::typeAsNumber()const": {
			"prefix": "int SocketIOPacket::typeAsNumber()const",
			"body": [
				"int SocketIOPacket:typeAsNumber()"
			],
			"description": "int SocketIOPacket::typeAsNumber()const"
		},
		 "EaseCubicActionOut* EaseCubicActionOut::clone() const": {
			"prefix": "EaseCubicActionOut* EaseCubicActionOut::clone() const",
			"body": [
				"EaseCubicActionOut* EaseCubicActionOut:clone() "
			],
			"description": "EaseCubicActionOut* EaseCubicActionOut::clone() const"
		},
		 "Frame* ActionTimelineCache::loadRotationFrame(const rapidjson::Value& json)": {
			"prefix": "Frame* ActionTimelineCache::loadRotationFrame(const rapidjson::Value& json)",
			"body": [
				"ActionTimelineCache:loadRotationFrame(${1:rapidjson:Value& json})"
			],
			"description": "Frame* ActionTimelineCache::loadRotationFrame(const rapidjson::Value& json)"
		},
		 "void PhysicsBody::addMoment(float moment)": {
			"prefix": "void PhysicsBody::addMoment(float moment)",
			"body": [
				"PhysicsBody:addMoment(${1:float moment})"
			],
			"description": "void PhysicsBody::addMoment(float moment)"
		},
		 "void LabelBMFontLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)": {
			"prefix": "void LabelBMFontLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)",
			"body": [
				"LabelBMFontLoader:onHandlePropTypeByte(${1:Node * pNode},${2:Node * pParent},${3:char * pPropertyName},${4:unsigned char pByte},${5:CCBReader * ccbReader})"
			],
			"description": "void LabelBMFontLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)"
		},
		 "void DrawNode::setBlendFunc(const BlendFunc &blendFunc)": {
			"prefix": "void DrawNode::setBlendFunc(const BlendFunc &blendFunc)",
			"body": [
				"DrawNode:setBlendFunc(${1:BlendFunc &blendFunc})"
			],
			"description": "void DrawNode::setBlendFunc(const BlendFunc &blendFunc)"
		},
		 "ActionInstant *Hide::reverse() const": {
			"prefix": "ActionInstant *Hide::reverse() const",
			"body": [
				"ActionInstant *Hide:reverse() "
			],
			"description": "ActionInstant *Hide::reverse() const"
		},
		 "FadeOutDownTiles* FadeOutDownTiles::clone() const": {
			"prefix": "FadeOutDownTiles* FadeOutDownTiles::clone() const",
			"body": [
				"FadeOutDownTiles* FadeOutDownTiles:clone() "
			],
			"description": "FadeOutDownTiles* FadeOutDownTiles::clone() const"
		},
		 "Sequence* Sequence::create(const Vector<FiniteTimeAction*>& arrayOfActions)": {
			"prefix": "Sequence* Sequence::create(const Vector<FiniteTimeAction*>& arrayOfActions)",
			"body": [
				"Sequence:create(${1:Vector<FiniteTimeAction*>& arrayOfActions})"
			],
			"description": "Sequence* Sequence::create(const Vector<FiniteTimeAction*>& arrayOfActions)"
		},
		 "void GLProgramState::setParameterAutoBinding(const std::string& uniformName, const std::string& autoBinding)": {
			"prefix": "void GLProgramState::setParameterAutoBinding(const std::string& uniformName, const std::string& autoBinding)",
			"body": [
				"GLProgramState:setParameterAutoBinding(${1:std:string& uniformName},${2:std:string& autoBinding})"
			],
			"description": "void GLProgramState::setParameterAutoBinding(const std::string& uniformName, const std::string& autoBinding)"
		},
		 "void TileMapAtlas::calculateItemsToRender()": {
			"prefix": "void TileMapAtlas::calculateItemsToRender()",
			"body": [
				"void TileMapAtlas:calculateItemsToRender()"
			],
			"description": "void TileMapAtlas::calculateItemsToRender()"
		},
		 "void Action::update(float time)": {
			"prefix": "void Action::update(float time)",
			"body": [
				"Action:update(${1:float time})"
			],
			"description": "void Action::update(float time)"
		},
		 "unsigned int __String::uintValue() const": {
			"prefix": "unsigned int __String::uintValue() const",
			"body": [
				"unsigned int __String:uintValue() "
			],
			"description": "unsigned int __String::uintValue() const"
		},
		 "void TransitionCrossFade::onExit()": {
			"prefix": "void TransitionCrossFade::onExit()",
			"body": [
				"void TransitionCrossFade:onExit()"
			],
			"description": "void TransitionCrossFade::onExit()"
		},
		 "std::string WidgetPropertiesReader::getWidgetReaderClassName(Widget* widget)": {
			"prefix": "std::string WidgetPropertiesReader::getWidgetReaderClassName(Widget* widget)",
			"body": [
				"WidgetPropertiesReader:getWidgetReaderClassName(${1:Widget* widget})"
			],
			"description": "std::string WidgetPropertiesReader::getWidgetReaderClassName(Widget* widget)"
		},
		 "SIOClient* SIOClientImpl::getClient(const std::string& endpoint)": {
			"prefix": "SIOClient* SIOClientImpl::getClient(const std::string& endpoint)",
			"body": [
				"SIOClientImpl:getClient(${1:std:string& endpoint})"
			],
			"description": "SIOClient* SIOClientImpl::getClient(const std::string& endpoint)"
		},
		 "ColliderFilter *ColliderBody::getColliderFilter()": {
			"prefix": "ColliderFilter *ColliderBody::getColliderFilter()",
			"body": [
				"ColliderFilter *ColliderBody:getColliderFilter()"
			],
			"description": "ColliderFilter *ColliderBody::getColliderFilter()"
		},
		 "void Widget::copyClonedWidgetChildren(Widget* model)": {
			"prefix": "void Widget::copyClonedWidgetChildren(Widget* model)",
			"body": [
				"Widget:copyClonedWidgetChildren(${1:Widget* model})"
			],
			"description": "void Widget::copyClonedWidgetChildren(Widget* model)"
		},
		 "Vec2 Node::convertToWindowSpace(const Vec2& nodePoint) const": {
			"prefix": "Vec2 Node::convertToWindowSpace(const Vec2& nodePoint) const",
			"body": [
				"Node:convertToWindowSpace(${1:Vec2& nodePoint})"
			],
			"description": "Vec2 Node::convertToWindowSpace(const Vec2& nodePoint) const"
		},
		 "bool XmlSaxHander::VisitEnter( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )": {
			"prefix": "bool XmlSaxHander::VisitEnter( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )",
			"body": [
				"XmlSaxHander:VisitEnter(${1:tinyxml2:XMLElement& element},${2:tinyxml2:XMLAttribute* firstAttribute})"
			],
			"description": "bool XmlSaxHander::VisitEnter( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )"
		},
		 "bool RenderTargetDepthStencil::init(unsigned int width, unsigned int height)": {
			"prefix": "bool RenderTargetDepthStencil::init(unsigned int width, unsigned int height)",
			"body": [
				"RenderTargetDepthStencil:init(${1:unsigned int width},${2:unsigned int height})"
			],
			"description": "bool RenderTargetDepthStencil::init(unsigned int width, unsigned int height)"
		},
		 "FontDefinition Label::_getFontDefinition() const": {
			"prefix": "FontDefinition Label::_getFontDefinition() const",
			"body": [
				"FontDefinition Label:_getFontDefinition() "
			],
			"description": "FontDefinition Label::_getFontDefinition() const"
		},
		 "void Node::updateCascadeOpacity()": {
			"prefix": "void Node::updateCascadeOpacity()",
			"body": [
				"void Node:updateCascadeOpacity()"
			],
			"description": "void Node::updateCascadeOpacity()"
		},
		 "void Properties::resolveInheritance(const char* id)": {
			"prefix": "void Properties::resolveInheritance(const char* id)",
			"body": [
				"Properties:resolveInheritance(${1:char* id})"
			],
			"description": "void Properties::resolveInheritance(const char* id)"
		},
		 "bool PhysicsJointGroove::createConstraints()": {
			"prefix": "bool PhysicsJointGroove::createConstraints()",
			"body": [
				"bool PhysicsJointGroove:createConstraints()"
			],
			"description": "bool PhysicsJointGroove::createConstraints()"
		},
		 "Mesh* Sprite3D::getMeshByName(const std::string& name) const": {
			"prefix": "Mesh* Sprite3D::getMeshByName(const std::string& name) const",
			"body": [
				"Sprite3D:getMeshByName(${1:std:string& name})"
			],
			"description": "Mesh* Sprite3D::getMeshByName(const std::string& name) const"
		},
		 "void LoadingBar::ignoreContentAdaptWithSize(bool ignore)": {
			"prefix": "void LoadingBar::ignoreContentAdaptWithSize(bool ignore)",
			"body": [
				"LoadingBar:ignoreContentAdaptWithSize(${1:bool ignore})"
			],
			"description": "void LoadingBar::ignoreContentAdaptWithSize(bool ignore)"
		},
		 "void NodeGrid::onGridBeginDraw()": {
			"prefix": "void NodeGrid::onGridBeginDraw()",
			"body": [
				"void NodeGrid:onGridBeginDraw()"
			],
			"description": "void NodeGrid::onGridBeginDraw()"
		},
		 "GLint GLProgram::getAttribLocation(const std::string &attributeName) const": {
			"prefix": "GLint GLProgram::getAttribLocation(const std::string &attributeName) const",
			"body": [
				"GLProgram:getAttribLocation(${1:std:string &attributeName})"
			],
			"description": "GLint GLProgram::getAttribLocation(const std::string &attributeName) const"
		},
		 "WavesTiles3D* WavesTiles3D::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)": {
			"prefix": "WavesTiles3D* WavesTiles3D::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)",
			"body": [
				"WavesTiles3D:create(${1:float duration},${2:Size& gridSize},${3:unsigned int waves},${4:float amplitude})"
			],
			"description": "WavesTiles3D* WavesTiles3D::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)"
		},
		 "float	Physics3DHingeConstraint::getUpperLimit() const": {
			"prefix": "float	Physics3DHingeConstraint::getUpperLimit() const",
			"body": [
				"float	Physics3DHingeConstraint:getUpperLimit() "
			],
			"description": "float	Physics3DHingeConstraint::getUpperLimit() const"
		},
		 "void ActionTween::startWithTarget(Node *target)": {
			"prefix": "void ActionTween::startWithTarget(Node *target)",
			"body": [
				"ActionTween:startWithTarget(${1:Node *target})"
			],
			"description": "void ActionTween::startWithTarget(Node *target)"
		},
		 "void Physics3DSliderConstraint::setPoweredAngMotor(bool onOff)": {
			"prefix": "void Physics3DSliderConstraint::setPoweredAngMotor(bool onOff)",
			"body": [
				"Physics3DSliderConstraint:setPoweredAngMotor(${1:bool onOff})"
			],
			"description": "void Physics3DSliderConstraint::setPoweredAngMotor(bool onOff)"
		},
		 "void VideoPlayer::onPlayEvent(int event)": {
			"prefix": "void VideoPlayer::onPlayEvent(int event)",
			"body": [
				"VideoPlayer:onPlayEvent(${1:int event})"
			],
			"description": "void VideoPlayer::onPlayEvent(int event)"
		},
		 "void PhysicsSprite3D::setSyncFlag(Physics3DComponent::PhysicsSyncFlag syncFlag)": {
			"prefix": "void PhysicsSprite3D::setSyncFlag(Physics3DComponent::PhysicsSyncFlag syncFlag)",
			"body": [
				"PhysicsSprite3D:setSyncFlag(${1:Physics3DComponent:PhysicsSyncFlag syncFlag})"
			],
			"description": "void PhysicsSprite3D::setSyncFlag(Physics3DComponent::PhysicsSyncFlag syncFlag)"
		},
		 "bool GLProgram::initWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)": {
			"prefix": "bool GLProgram::initWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)",
			"body": [
				"GLProgram:initWithFilenames(${1:std:string& vShaderFilename},${2:std:string& fShaderFilename})"
			],
			"description": "bool GLProgram::initWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)"
		},
		 "float PhysicsShapeCircle::calculateDefaultMoment()": {
			"prefix": "float PhysicsShapeCircle::calculateDefaultMoment()",
			"body": [
				"float PhysicsShapeCircle:calculateDefaultMoment()"
			],
			"description": "float PhysicsShapeCircle::calculateDefaultMoment()"
		},
		 "Node* CSLoader::createNode(const std::string& filename)": {
			"prefix": "Node* CSLoader::createNode(const std::string& filename)",
			"body": [
				"CSLoader:createNode(${1:std:string& filename})"
			],
			"description": "Node* CSLoader::createNode(const std::string& filename)"
		},
		 "double  UserDefault::getDoubleForKey(const char* pKey)": {
			"prefix": "double  UserDefault::getDoubleForKey(const char* pKey)",
			"body": [
				"UserDefault:getDoubleForKey(${1:char* pKey})"
			],
			"description": "double  UserDefault::getDoubleForKey(const char* pKey)"
		},
		 "NodeGrid* NodeGrid::create()": {
			"prefix": "NodeGrid* NodeGrid::create()",
			"body": [
				"NodeGrid* NodeGrid:create()"
			],
			"description": "NodeGrid* NodeGrid::create()"
		},
		 "void Animation::addSpriteFrameWithFile(const std::string& filename)": {
			"prefix": "void Animation::addSpriteFrameWithFile(const std::string& filename)",
			"body": [
				"Animation:addSpriteFrameWithFile(${1:std:string& filename})"
			],
			"description": "void Animation::addSpriteFrameWithFile(const std::string& filename)"
		},
		 "unsigned char NavMeshAgent::getObstacleAvoidanceType() const": {
			"prefix": "unsigned char NavMeshAgent::getObstacleAvoidanceType() const",
			"body": [
				"unsigned char NavMeshAgent:getObstacleAvoidanceType() "
			],
			"description": "unsigned char NavMeshAgent::getObstacleAvoidanceType() const"
		},
		 "std::string getCurrentLanguageJNI()": {
			"prefix": "std::string getCurrentLanguageJNI()",
			"body": [
				"std:string getCurrentLanguageJNI()"
			],
			"description": "std::string getCurrentLanguageJNI()"
		},
		 "void EventDispatcher::removeCustomEventListeners(const std::string& customEventName)": {
			"prefix": "void EventDispatcher::removeCustomEventListeners(const std::string& customEventName)",
			"body": [
				"EventDispatcher:removeCustomEventListeners(${1:std:string& customEventName})"
			],
			"description": "void EventDispatcher::removeCustomEventListeners(const std::string& customEventName)"
		},
		 "Plane::Plane(const Vec3& normal, float dist)": {
			"prefix": "Plane::Plane(const Vec3& normal, float dist)",
			"body": [
				"normal},${2:float dist})"
			],
			"description": "Plane::Plane(const Vec3& normal, float dist)"
		},
		 "const Vector<Technique*>& Material::getTechniques() const": {
			"prefix": "const Vector<Technique*>& Material::getTechniques() const",
			"body": [
				" Vector<Technique*>& Material:getTechniques() "
			],
			"description": "const Vector<Technique*>& Material::getTechniques() const"
		},
		 "void CSLoader::initNode(Node* node, const rapidjson::Value& json)": {
			"prefix": "void CSLoader::initNode(Node* node, const rapidjson::Value& json)",
			"body": [
				"CSLoader:initNode(${1:Node* node},${2:rapidjson:Value& json})"
			],
			"description": "void CSLoader::initNode(Node* node, const rapidjson::Value& json)"
		},
		 "void	Physics3DPointToPointConstraint::setPivotPointInA(const cocos2d::Vec3& pivotA)": {
			"prefix": "void	Physics3DPointToPointConstraint::setPivotPointInA(const cocos2d::Vec3& pivotA)",
			"body": [
				"pivotA})"
			],
			"description": "void	Physics3DPointToPointConstraint::setPivotPointInA(const cocos2d::Vec3& pivotA)"
		},
		 "void GLProgram::setUniformLocationWith2fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)": {
			"prefix": "void GLProgram::setUniformLocationWith2fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)",
			"body": [
				"GLProgram:setUniformLocationWith2fv(${1:GLint location},${2:GLfloat* floats},${3:unsigned int numberOfArrays})"
			],
			"description": "void GLProgram::setUniformLocationWith2fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)"
		},
		 "__Dictionary* __Dictionary::clone() const": {
			"prefix": "__Dictionary* __Dictionary::clone() const",
			"body": [
				"__Dictionary* __Dictionary:clone() "
			],
			"description": "__Dictionary* __Dictionary::clone() const"
		},
		 "void Layout::setClippingType(ClippingType type)": {
			"prefix": "void Layout::setClippingType(ClippingType type)",
			"body": [
				"Layout:setClippingType(${1:ClippingType type})"
			],
			"description": "void Layout::setClippingType(ClippingType type)"
		},
		 "Vec2 PhysicsShapePolygon::getPoint(int i) const": {
			"prefix": "Vec2 PhysicsShapePolygon::getPoint(int i) const",
			"body": [
				"PhysicsShapePolygon:getPoint(${1:int i})"
			],
			"description": "Vec2 PhysicsShapePolygon::getPoint(int i) const"
		},
		 "void ComAudio::onEnter()": {
			"prefix": "void ComAudio::onEnter()",
			"body": [
				"void ComAudio:onEnter()"
			],
			"description": "void ComAudio::onEnter()"
		},
		 "ssize_t TMXLayer::atlasIndexForExistantZ(int z)": {
			"prefix": "ssize_t TMXLayer::atlasIndexForExistantZ(int z)",
			"body": [
				"TMXLayer:atlasIndexForExistantZ(${1:int z})"
			],
			"description": "ssize_t TMXLayer::atlasIndexForExistantZ(int z)"
		},
		 "std::string getFullPathWithoutAssetsPrefix(const char* pszFilename)": {
			"prefix": "std::string getFullPathWithoutAssetsPrefix(const char* pszFilename)",
			"body": [
				"getFullPathWithoutAssetsPrefix(${1:char* pszFilename})"
			],
			"description": "std::string getFullPathWithoutAssetsPrefix(const char* pszFilename)"
		},
		 "Pass* Technique::getPassByIndex(ssize_t index) const": {
			"prefix": "Pass* Technique::getPassByIndex(ssize_t index) const",
			"body": [
				"Technique:getPassByIndex(${1:ssize_t index})"
			],
			"description": "Pass* Technique::getPassByIndex(ssize_t index) const"
		},
		 "Vec2 PhysicsContactPostSolve::getSurfaceVelocity() const": {
			"prefix": "Vec2 PhysicsContactPostSolve::getSurfaceVelocity() const",
			"body": [
				"Vec2 PhysicsContactPostSolve:getSurfaceVelocity() "
			],
			"description": "Vec2 PhysicsContactPostSolve::getSurfaceVelocity() const"
		},
		 "void MenuItemFont::setFontNameObj(const std::string& name)": {
			"prefix": "void MenuItemFont::setFontNameObj(const std::string& name)",
			"body": [
				"MenuItemFont:setFontNameObj(${1:std:string& name})"
			],
			"description": "void MenuItemFont::setFontNameObj(const std::string& name)"
		},
		 "int VertexBuffer::getVertexNumber() const": {
			"prefix": "int VertexBuffer::getVertexNumber() const",
			"body": [
				"int VertexBuffer:getVertexNumber() "
			],
			"description": "int VertexBuffer::getVertexNumber() const"
		},
		 "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate)": {
			"prefix": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate)",
			"body": [
				"EaseRateAction:create(${1:ActionInterval* action},${2:float rate})"
			],
			"description": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate)"
		},
		 "void ArmatureAnimation::setMovementEventCallFunc(std::function<void(Armature *armature, MovementEventType movementType, const std::string& movementID)> listener)": {
			"prefix": "void ArmatureAnimation::setMovementEventCallFunc(std::function<void(Armature *armature, MovementEventType movementType, const std::string& movementID)> listener)",
			"body": [
				"ArmatureAnimation:setMovementEventCallFunc(${1:std:function<void(Armature *armature},${2:MovementEventType movementType},${3:std:string& movementID})"
			],
			"description": "void ArmatureAnimation::setMovementEventCallFunc(std::function<void(Armature *armature, MovementEventType movementType, const std::string& movementID)> listener)"
		},
		 "inline void ZipUtils::decodeEncodedPvr(unsigned int *data, ssize_t len)": {
			"prefix": "inline void ZipUtils::decodeEncodedPvr(unsigned int *data, ssize_t len)",
			"body": [
				"void ZipUtils:decodeEncodedPvr(${1:unsigned int *data},${2:ssize_t len})"
			],
			"description": "inline void ZipUtils::decodeEncodedPvr(unsigned int *data, ssize_t len)"
		},
		 "int PhysicsShapeEdgePolygon::getPointsCount() const": {
			"prefix": "int PhysicsShapeEdgePolygon::getPointsCount() const",
			"body": [
				"int PhysicsShapeEdgePolygon:getPointsCount() "
			],
			"description": "int PhysicsShapeEdgePolygon::getPointsCount() const"
		},
		 "std::string NodeLoader::parsePropTypeFntFile(Node * pNode, Node * pParent, CCBReader * ccbReader)": {
			"prefix": "std::string NodeLoader::parsePropTypeFntFile(Node * pNode, Node * pParent, CCBReader * ccbReader)",
			"body": [
				"NodeLoader:parsePropTypeFntFile(${1:Node * pNode},${2:Node * pParent},${3:CCBReader * ccbReader})"
			],
			"description": "std::string NodeLoader::parsePropTypeFntFile(Node * pNode, Node * pParent, CCBReader * ccbReader)"
		},
		 "void Texture2D::convertI8ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)": {
			"prefix": "void Texture2D::convertI8ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)",
			"body": [
				"Texture2D:convertI8ToRGB5A1(${1:unsigned char* data},${2:ssize_t dataLen},${3:unsigned char* outData})"
			],
			"description": "void Texture2D::convertI8ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)"
		},
		 "void Bone::addChildBone(Bone *child)": {
			"prefix": "void Bone::addChildBone(Bone *child)",
			"body": [
				"Bone:addChildBone(${1:Bone *child})"
			],
			"description": "void Bone::addChildBone(Bone *child)"
		},
		 "void Node::setNormalizedPosition(const Vec2& position)": {
			"prefix": "void Node::setNormalizedPosition(const Vec2& position)",
			"body": [
				"Node:setNormalizedPosition(${1:Vec2& position})"
			],
			"description": "void Node::setNormalizedPosition(const Vec2& position)"
		},
		 "void Downloader::batchDownloadAsync(const DownloadUnits& units, const std::string& batchId/* = ""*/)": {
			"prefix": "void Downloader::batchDownloadAsync(const DownloadUnits& units, const std::string& batchId/* = ""*/)",
			"body": [
				"Downloader:batchDownloadAsync(${1:DownloadUnits& units},${2:std:string& batchId/* = ""*/})"
			],
			"description": "void Downloader::batchDownloadAsync(const DownloadUnits& units, const std::string& batchId/* = ""*/)"
		},
		 "TransitionZoomFlipY* TransitionZoomFlipY::create(float t, Scene* s, Orientation o)": {
			"prefix": "TransitionZoomFlipY* TransitionZoomFlipY::create(float t, Scene* s, Orientation o)",
			"body": [
				"TransitionZoomFlipY:create(${1:float t},${2:Scene* s},${3:Orientation o})"
			],
			"description": "TransitionZoomFlipY* TransitionZoomFlipY::create(float t, Scene* s, Orientation o)"
		},
		 "void GLView::handleTouchesOfEndOrCancel(EventTouch::EventCode eventCode, int num, intptr_t ids[], float xs[], float ys[])": {
			"prefix": "void GLView::handleTouchesOfEndOrCancel(EventTouch::EventCode eventCode, int num, intptr_t ids[], float xs[], float ys[])",
			"body": [
				"GLView:handleTouchesOfEndOrCancel(${1:EventTouch:EventCode eventCode},${2:int num},${3:intptr_t ids[]},${4:float xs[]},${5:float ys[]})"
			],
			"description": "void GLView::handleTouchesOfEndOrCancel(EventTouch::EventCode eventCode, int num, intptr_t ids[], float xs[], float ys[])"
		},
		 "MenuItem* Menu::getItemForTouch(Touch *touch, const Camera *camera)": {
			"prefix": "MenuItem* Menu::getItemForTouch(Touch *touch, const Camera *camera)",
			"body": [
				"Menu:getItemForTouch(${1:Touch *touch},${2:Camera *camera})"
			],
			"description": "MenuItem* Menu::getItemForTouch(Touch *touch, const Camera *camera)"
		},
		 "Node* Widget::getVirtualRenderer()": {
			"prefix": "Node* Widget::getVirtualRenderer()",
			"body": [
				"Node* Widget:getVirtualRenderer()"
			],
			"description": "Node* Widget::getVirtualRenderer()"
		},
		 "Layout::BackGroundColorType Layout::getBackGroundColorType()const": {
			"prefix": "Layout::BackGroundColorType Layout::getBackGroundColorType()const",
			"body": [
				"Layout:BackGroundColorType Layout:getBackGroundColorType()"
			],
			"description": "Layout::BackGroundColorType Layout::getBackGroundColorType()const"
		},
		 "void ActionCamera::setEye(const Vec3& eye)": {
			"prefix": "void ActionCamera::setEye(const Vec3& eye)",
			"body": [
				"ActionCamera:setEye(${1:Vec3& eye})"
			],
			"description": "void ActionCamera::setEye(const Vec3& eye)"
		},
		 "void Physics3DRigidBody::setDamping( float lin_damping, float ang_damping )": {
			"prefix": "void Physics3DRigidBody::setDamping( float lin_damping, float ang_damping )",
			"body": [
				"Physics3DRigidBody:setDamping(${1:float lin_damping},${2:float ang_damping})"
			],
			"description": "void Physics3DRigidBody::setDamping( float lin_damping, float ang_damping )"
		},
		 "void ActionFadeFrame::setOpacity(int opacity)": {
			"prefix": "void ActionFadeFrame::setOpacity(int opacity)",
			"body": [
				"ActionFadeFrame:setOpacity(${1:int opacity})"
			],
			"description": "void ActionFadeFrame::setOpacity(int opacity)"
		},
		 "PhysicsJointRatchet* PhysicsJointRatchet::construct(PhysicsBody* a, PhysicsBody* b, float phase, float ratchet)": {
			"prefix": "PhysicsJointRatchet* PhysicsJointRatchet::construct(PhysicsBody* a, PhysicsBody* b, float phase, float ratchet)",
			"body": [
				"PhysicsJointRatchet:ruct(${1:PhysicsBody* a},${2:PhysicsBody* b},${3:float phase},${4:float ratchet})"
			],
			"description": "PhysicsJointRatchet* PhysicsJointRatchet::construct(PhysicsBody* a, PhysicsBody* b, float phase, float ratchet)"
		},
		 "void IMEDispatcher::dispatchKeyboardDidShow(IMEKeyboardNotificationInfo& info)": {
			"prefix": "void IMEDispatcher::dispatchKeyboardDidShow(IMEKeyboardNotificationInfo& info)",
			"body": [
				"IMEDispatcher:dispatchKeyboardDidShow(${1:IMEKeyboardNotificationInfo& info})"
			],
			"description": "void IMEDispatcher::dispatchKeyboardDidShow(IMEKeyboardNotificationInfo& info)"
		},
		 "void ComAudio::setEnabled(bool b)": {
			"prefix": "void ComAudio::setEnabled(bool b)",
			"body": [
				"ComAudio:setEnabled(${1:bool b})"
			],
			"description": "void ComAudio::setEnabled(bool b)"
		},
		 "bool Properties::getVec3(const char* name, Vec3* out) const": {
			"prefix": "bool Properties::getVec3(const char* name, Vec3* out) const",
			"body": [
				"Properties:getVec3(${1:char* name},${2:Vec3* out})"
			],
			"description": "bool Properties::getVec3(const char* name, Vec3* out) const"
		},
		 "bool Physics3DWorld::sweepShape(Physics3DShape* shape, const cocos2d::Mat4& startTransform, const cocos2d::Mat4& endTransform, Physics3DWorld::HitResult* result)": {
			"prefix": "bool Physics3DWorld::sweepShape(Physics3DShape* shape, const cocos2d::Mat4& startTransform, const cocos2d::Mat4& endTransform, Physics3DWorld::HitResult* result)",
			"body": [
				"Physics3DWorld:sweepShape(${1:Physics3DShape* shape},${2:cocos2d:Mat4& startTransform},${3:cocos2d:Mat4& endTransform},${4:Physics3DWorld:HitResult* result})"
			],
			"description": "bool Physics3DWorld::sweepShape(Physics3DShape* shape, const cocos2d::Mat4& startTransform, const cocos2d::Mat4& endTransform, Physics3DWorld::HitResult* result)"
		},
		 "void AABB::set(const Vec3& min, const Vec3& max)": {
			"prefix": "void AABB::set(const Vec3& min, const Vec3& max)",
			"body": [
				"AABB:set(${1:Vec3& min},${2:Vec3& max})"
			],
			"description": "void AABB::set(const Vec3& min, const Vec3& max)"
		},
		 "FontAtlas* FontAtlasCache::getFontAtlasTTF(const _ttfConfig* config)": {
			"prefix": "FontAtlas* FontAtlasCache::getFontAtlasTTF(const _ttfConfig* config)",
			"body": [
				"FontAtlasCache:getFontAtlasTTF(${1:_ttfConfig* config})"
			],
			"description": "FontAtlas* FontAtlasCache::getFontAtlasTTF(const _ttfConfig* config)"
		},
		 "void TextField::onEnter()": {
			"prefix": "void TextField::onEnter()",
			"body": [
				"void TextField:onEnter()"
			],
			"description": "void TextField::onEnter()"
		},
		 "std::string FlatBuffersSerialize::getGUIClassName(const std::string &name)": {
			"prefix": "std::string FlatBuffersSerialize::getGUIClassName(const std::string &name)",
			"body": [
				"FlatBuffersSerialize:getGUIClassName(${1:std:string &name})"
			],
			"description": "std::string FlatBuffersSerialize::getGUIClassName(const std::string &name)"
		},
		 "bool EditBoxImplCommon::initWithSize(const Size& size)": {
			"prefix": "bool EditBoxImplCommon::initWithSize(const Size& size)",
			"body": [
				"EditBoxImplCommon:initWithSize(${1:Size& size})"
			],
			"description": "bool EditBoxImplCommon::initWithSize(const Size& size)"
		},
		 "ProgressTimer* ProgressTimer::create(Sprite* sp)": {
			"prefix": "ProgressTimer* ProgressTimer::create(Sprite* sp)",
			"body": [
				"ProgressTimer:create(${1:Sprite* sp})"
			],
			"description": "ProgressTimer* ProgressTimer::create(Sprite* sp)"
		},
		 "Label* Label::createWithTTF(const TTFConfig& ttfConfig, const std::string& text, TextHAlignment hAlignment /* = TextHAlignment::CENTER */, int maxLineWidth /* = 0 */)": {
			"prefix": "Label* Label::createWithTTF(const TTFConfig& ttfConfig, const std::string& text, TextHAlignment hAlignment /* = TextHAlignment::CENTER */, int maxLineWidth /* = 0 */)",
			"body": [
				"Label:createWithTTF(${1:TTFConfig& ttfConfig},${2:std:string& text},${3:TextHAlignment hAlignment /* = TextHAlignment:CENTER */},${4:int maxLineWidth /* = 0 */})"
			],
			"description": "Label* Label::createWithTTF(const TTFConfig& ttfConfig, const std::string& text, TextHAlignment hAlignment /* = TextHAlignment::CENTER */, int maxLineWidth /* = 0 */)"
		},
		 "void AbstractCheckButton::backGroundSelectedTextureScaleChangedWithSize()": {
			"prefix": "void AbstractCheckButton::backGroundSelectedTextureScaleChangedWithSize()",
			"body": [
				"void AbstractCheckButton:backGroundSelectedTextureScaleChangedWithSize()"
			],
			"description": "void AbstractCheckButton::backGroundSelectedTextureScaleChangedWithSize()"
		},
		 "void ProtectedNode::sortAllProtectedChildren()": {
			"prefix": "void ProtectedNode::sortAllProtectedChildren()",
			"body": [
				"void ProtectedNode:sortAllProtectedChildren()"
			],
			"description": "void ProtectedNode::sortAllProtectedChildren()"
		},
		 "bool Image::initWithETCData(const unsigned char * data, ssize_t dataLen)": {
			"prefix": "bool Image::initWithETCData(const unsigned char * data, ssize_t dataLen)",
			"body": [
				"Image:initWithETCData(${1:unsigned char * data},${2:ssize_t dataLen})"
			],
			"description": "bool Image::initWithETCData(const unsigned char * data, ssize_t dataLen)"
		},
		 "void TextAtlas::setString(const std::string& value)": {
			"prefix": "void TextAtlas::setString(const std::string& value)",
			"body": [
				"TextAtlas:setString(${1:std:string& value})"
			],
			"description": "void TextAtlas::setString(const std::string& value)"
		},
		 "void CWin32InputBox::InitDialog()": {
			"prefix": "void CWin32InputBox::InitDialog()",
			"body": [
				"void CWin32InputBox:InitDialog()"
			],
			"description": "void CWin32InputBox::InitDialog()"
		},
		 "void IMEDispatcher::addDelegate(IMEDelegate* delegate)": {
			"prefix": "void IMEDispatcher::addDelegate(IMEDelegate* delegate)",
			"body": [
				"IMEDispatcher:addDelegate(${1:IMEDelegate* delegate})"
			],
			"description": "void IMEDispatcher::addDelegate(IMEDelegate* delegate)"
		},
		 "Node* ActionNode::getActionNode()": {
			"prefix": "Node* ActionNode::getActionNode()",
			"body": [
				"Node* ActionNode:getActionNode()"
			],
			"description": "Node* ActionNode::getActionNode()"
		},
		 "void Texture2D::PVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)": {
			"prefix": "void Texture2D::PVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)",
			"body": [
				"Texture2D:PVRImagesHavePremultipliedAlpha(${1:bool haveAlphaPremultiplied})"
			],
			"description": "void Texture2D::PVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)"
		},
		 "void Slider::loadSlidBallTexturePressed(SpriteFrame* spriteframe)": {
			"prefix": "void Slider::loadSlidBallTexturePressed(SpriteFrame* spriteframe)",
			"body": [
				"Slider:loadSlidBallTexturePressed(${1:SpriteFrame* spriteframe})"
			],
			"description": "void Slider::loadSlidBallTexturePressed(SpriteFrame* spriteframe)"
		},
		 "void ScrollView::onSizeChanged()": {
			"prefix": "void ScrollView::onSizeChanged()",
			"body": [
				"void ScrollView:onSizeChanged()"
			],
			"description": "void ScrollView::onSizeChanged()"
		},
		 "bool Layout::isLoopFocus()const": {
			"prefix": "bool Layout::isLoopFocus()const",
			"body": [
				"bool Layout:isLoopFocus()"
			],
			"description": "bool Layout::isLoopFocus()const"
		},
		 "void Device::setAccelerometerInterval(float interval)": {
			"prefix": "void Device::setAccelerometerInterval(float interval)",
			"body": [
				"Device:setAccelerometerInterval(${1:float interval})"
			],
			"description": "void Device::setAccelerometerInterval(float interval)"
		},
		 "ReuseGrid* ReuseGrid::clone() const": {
			"prefix": "ReuseGrid* ReuseGrid::clone() const",
			"body": [
				"ReuseGrid* ReuseGrid:clone() "
			],
			"description": "ReuseGrid* ReuseGrid::clone() const"
		},
		 "bool SpriteBatchNode::initWithTexture(Texture2D *tex, ssize_t capacity/* = DEFAULT_CAPACITY*/)": {
			"prefix": "bool SpriteBatchNode::initWithTexture(Texture2D *tex, ssize_t capacity/* = DEFAULT_CAPACITY*/)",
			"body": [
				"SpriteBatchNode:initWithTexture(${1:Texture2D *tex},${2:ssize_t capacity/* = DEFAULT_CAPACITY*/})"
			],
			"description": "bool SpriteBatchNode::initWithTexture(Texture2D *tex, ssize_t capacity/* = DEFAULT_CAPACITY*/)"
		},
		 "void TurnOffTiles::update(float time)": {
			"prefix": "void TurnOffTiles::update(float time)",
			"body": [
				"TurnOffTiles:update(${1:float time})"
			],
			"description": "void TurnOffTiles::update(float time)"
		},
		 "void Physics3DRigidBody::setFriction( float frict )": {
			"prefix": "void Physics3DRigidBody::setFriction( float frict )",
			"body": [
				"Physics3DRigidBody:setFriction(${1:float frict})"
			],
			"description": "void Physics3DRigidBody::setFriction( float frict )"
		},
		 "void notifyFileLoaded(const std::string& filePath)": {
			"prefix": "void notifyFileLoaded(const std::string& filePath)",
			"body": [
				"notifyFileLoaded(${1:std:string& filePath})"
			],
			"description": "void notifyFileLoaded(const std::string& filePath)"
		},
		 "void ActionNode::addFrame(ActionFrame* frame)": {
			"prefix": "void ActionNode::addFrame(ActionFrame* frame)",
			"body": [
				"ActionNode:addFrame(${1:ActionFrame* frame})"
			],
			"description": "void ActionNode::addFrame(ActionFrame* frame)"
		},
		 "void Armature::visit(cocos2d::Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)": {
			"prefix": "void Armature::visit(cocos2d::Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)",
			"body": [
				"Armature:visit(${1:cocos2d:Renderer *renderer},${2:Mat4 &parentTransform},${3:uint32_t parentFlags})"
			],
			"description": "void Armature::visit(cocos2d::Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)"
		},
		 "void LayerColor::onDraw(const Mat4& transform, uint32_t flags)": {
			"prefix": "void LayerColor::onDraw(const Mat4& transform, uint32_t flags)",
			"body": [
				"LayerColor:onDraw(${1:Mat4& transform},${2:uint32_t flags})"
			],
			"description": "void LayerColor::onDraw(const Mat4& transform, uint32_t flags)"
		},
		 "void FontAtlas::findNewCharacters(const std::u16string& u16Text, std::unordered_map<unsigned short, unsigned short>& charCodeMap)": {
			"prefix": "void FontAtlas::findNewCharacters(const std::u16string& u16Text, std::unordered_map<unsigned short, unsigned short>& charCodeMap)",
			"body": [
				"FontAtlas:findNewCharacters(${1:std:u16string& u16Text},${2:std:unordered_map<unsigned short},${3:unsigned short>& charCodeMap})"
			],
			"description": "void FontAtlas::findNewCharacters(const std::u16string& u16Text, std::unordered_map<unsigned short, unsigned short>& charCodeMap)"
		},
		 "void Component::onRemove()": {
			"prefix": "void Component::onRemove()",
			"body": [
				"void Component:onRemove()"
			],
			"description": "void Component::onRemove()"
		},
		 "EditBoxDelegate* EditBox::getDelegate()": {
			"prefix": "EditBoxDelegate* EditBox::getDelegate()",
			"body": [
				"EditBoxDelegate* EditBox:getDelegate()"
			],
			"description": "EditBoxDelegate* EditBox::getDelegate()"
		},
		 "void VideoPlayer::setFullScreenEnabled(bool enabled)": {
			"prefix": "void VideoPlayer::setFullScreenEnabled(bool enabled)",
			"body": [
				"VideoPlayer:setFullScreenEnabled(${1:bool enabled})"
			],
			"description": "void VideoPlayer::setFullScreenEnabled(bool enabled)"
		},
		 "EaseQuadraticActionOut* EaseQuadraticActionOut::reverse() const": {
			"prefix": "EaseQuadraticActionOut* EaseQuadraticActionOut::reverse() const",
			"body": [
				"EaseQuadraticActionOut* EaseQuadraticActionOut:reverse() "
			],
			"description": "EaseQuadraticActionOut* EaseQuadraticActionOut::reverse() const"
		},
		 "int CCBAnimationManager::getAutoPlaySequenceId()": {
			"prefix": "int CCBAnimationManager::getAutoPlaySequenceId()",
			"body": [
				"int CCBAnimationManager:getAutoPlaySequenceId()"
			],
			"description": "int CCBAnimationManager::getAutoPlaySequenceId()"
		},
		 "void Bone::changeDisplayWithIndex(int index, bool force)": {
			"prefix": "void Bone::changeDisplayWithIndex(int index, bool force)",
			"body": [
				"Bone:changeDisplayWithIndex(${1:int index},${2:bool force})"
			],
			"description": "void Bone::changeDisplayWithIndex(int index, bool force)"
		},
		 "void UniformValue::setVec4v(ssize_t size, const Vec4* pointer)": {
			"prefix": "void UniformValue::setVec4v(ssize_t size, const Vec4* pointer)",
			"body": [
				"UniformValue:setVec4v(${1:ssize_t size},${2:Vec4* pointer})"
			],
			"description": "void UniformValue::setVec4v(ssize_t size, const Vec4* pointer)"
		},
		 "void LabelTTF::setHorizontalAlignment(TextHAlignment alignment)": {
			"prefix": "void LabelTTF::setHorizontalAlignment(TextHAlignment alignment)",
			"body": [
				"LabelTTF:setHorizontalAlignment(${1:TextHAlignment alignment})"
			],
			"description": "void LabelTTF::setHorizontalAlignment(TextHAlignment alignment)"
		},
		 "float ParticleSystem::getRotatePerSecondVar() const": {
			"prefix": "float ParticleSystem::getRotatePerSecondVar() const",
			"body": [
				"float ParticleSystem:getRotatePerSecondVar() "
			],
			"description": "float ParticleSystem::getRotatePerSecondVar() const"
		},
		 "bool Controller::isConnected() const": {
			"prefix": "bool Controller::isConnected() const",
			"body": [
				"bool Controller:isConnected() "
			],
			"description": "bool Controller::isConnected() const"
		},
		 "void Layer::setKeyboardEnabled(bool enabled)": {
			"prefix": "void Layer::setKeyboardEnabled(bool enabled)",
			"body": [
				"Layer:setKeyboardEnabled(${1:bool enabled})"
			],
			"description": "void Layer::setKeyboardEnabled(bool enabled)"
		},
		 "void PhysicsWorldCallback::rayCastCallbackFunc(cpShape *shape, cpFloat t, cpVect n, RayCastCallbackInfo *info)": {
			"prefix": "void PhysicsWorldCallback::rayCastCallbackFunc(cpShape *shape, cpFloat t, cpVect n, RayCastCallbackInfo *info)",
			"body": [
				"PhysicsWorldCallback:rayCastCallbackFunc(${1:cpShape *shape},${2:cpFloat t},${3:cpVect n},${4:RayCastCallbackInfo *info})"
			],
			"description": "void PhysicsWorldCallback::rayCastCallbackFunc(cpShape *shape, cpFloat t, cpVect n, RayCastCallbackInfo *info)"
		},
		 "Color3B TileMapAtlas::getTileAt(const Vec2& position) const": {
			"prefix": "Color3B TileMapAtlas::getTileAt(const Vec2& position) const",
			"body": [
				"TileMapAtlas:getTileAt(${1:Vec2& position})"
			],
			"description": "Color3B TileMapAtlas::getTileAt(const Vec2& position) const"
		},
		 "Vec2 PhysicsJointSpring::getAnchr1() const": {
			"prefix": "Vec2 PhysicsJointSpring::getAnchr1() const",
			"body": [
				"Vec2 PhysicsJointSpring:getAnchr1() "
			],
			"description": "Vec2 PhysicsJointSpring::getAnchr1() const"
		},
		 "void Node::setScale(float scale)": {
			"prefix": "void Node::setScale(float scale)",
			"body": [
				"Node:setScale(${1:float scale})"
			],
			"description": "void Node::setScale(float scale)"
		},
		 "void BoneNode::setDebugDrawWidth(float width)": {
			"prefix": "void BoneNode::setDebugDrawWidth(float width)",
			"body": [
				"BoneNode:setDebugDrawWidth(${1:float width})"
			],
			"description": "void BoneNode::setDebugDrawWidth(float width)"
		},
		 "void PageView::setCustomScrollThreshold(float threshold)": {
			"prefix": "void PageView::setCustomScrollThreshold(float threshold)",
			"body": [
				"PageView:setCustomScrollThreshold(${1:float threshold})"
			],
			"description": "void PageView::setCustomScrollThreshold(float threshold)"
		},
		 "Lens3D* Lens3D::create(float duration, const Size& gridSize, const Vec2& position, float radius)": {
			"prefix": "Lens3D* Lens3D::create(float duration, const Size& gridSize, const Vec2& position, float radius)",
			"body": [
				"Lens3D:create(${1:float duration},${2:Size& gridSize},${3:Vec2& position},${4:float radius})"
			],
			"description": "Lens3D* Lens3D::create(float duration, const Size& gridSize, const Vec2& position, float radius)"
		},
		 "bool FileUtilsWin32::init()": {
			"prefix": "bool FileUtilsWin32::init()",
			"body": [
				"bool FileUtilsWin32:init()"
			],
			"description": "bool FileUtilsWin32::init()"
		},
		 "Vec2 ProgressTimer::getMidpoint() const": {
			"prefix": "Vec2 ProgressTimer::getMidpoint() const",
			"body": [
				"Vec2 ProgressTimer:getMidpoint() "
			],
			"description": "Vec2 ProgressTimer::getMidpoint() const"
		},
		 "bool Properties::parseColor(const char* str, Vec3* out)": {
			"prefix": "bool Properties::parseColor(const char* str, Vec3* out)",
			"body": [
				"Properties:parseColor(${1:char* str},${2:Vec3* out})"
			],
			"description": "bool Properties::parseColor(const char* str, Vec3* out)"
		},
		 "TintTo* TintTo::clone() const": {
			"prefix": "TintTo* TintTo::clone() const",
			"body": [
				"TintTo* TintTo:clone() "
			],
			"description": "TintTo* TintTo::clone() const"
		},
		 "void	Physics3DConeTwistConstraint::setLimit(float swingSpan1,float swingSpan2,float twistSpan, float softness, float biasFactor, float relaxationFactor)": {
			"prefix": "void	Physics3DConeTwistConstraint::setLimit(float swingSpan1,float swingSpan2,float twistSpan, float softness, float biasFactor, float relaxationFactor)",
			"body": [
				"swingSpan1},${2:float swingSpan2},${3:float twistSpan},${4:float softness},${5:float biasFactor},${6:float relaxationFactor})"
			],
			"description": "void	Physics3DConeTwistConstraint::setLimit(float swingSpan1,float swingSpan2,float twistSpan, float softness, float biasFactor, float relaxationFactor)"
		},
		 "FlipX *FlipX::create(bool x)": {
			"prefix": "FlipX *FlipX::create(bool x)",
			"body": [
				"*FlipX:create(${1:bool x})"
			],
			"description": "FlipX *FlipX::create(bool x)"
		},
		 "Node* CSLoader::createNodeWithFlatBuffersFile(const std::string &filename)": {
			"prefix": "Node* CSLoader::createNodeWithFlatBuffersFile(const std::string &filename)",
			"body": [
				"CSLoader:createNodeWithFlatBuffersFile(${1:std:string &filename})"
			],
			"description": "Node* CSLoader::createNodeWithFlatBuffersFile(const std::string &filename)"
		},
		 "void DrawNode::drawRect(const Vec2 &origin, const Vec2 &destination, const Color4F &color)": {
			"prefix": "void DrawNode::drawRect(const Vec2 &origin, const Vec2 &destination, const Color4F &color)",
			"body": [
				"DrawNode:drawRect(${1:Vec2 &origin},${2:Vec2 &destination},${3:Color4F &color})"
			],
			"description": "void DrawNode::drawRect(const Vec2 &origin, const Vec2 &destination, const Color4F &color)"
		},
		 "void ScrollViewBar::onTouchEnded()": {
			"prefix": "void ScrollViewBar::onTouchEnded()",
			"body": [
				"void ScrollViewBar:onTouchEnded()"
			],
			"description": "void ScrollViewBar::onTouchEnded()"
		},
		 "bool Bundle3D::loadMeshDataJson_0_2(MeshDatas& meshdatas)": {
			"prefix": "bool Bundle3D::loadMeshDataJson_0_2(MeshDatas& meshdatas)",
			"body": [
				"Bundle3D:loadMeshDataJson_0_2(${1:MeshDatas& meshdatas})"
			],
			"description": "bool Bundle3D::loadMeshDataJson_0_2(MeshDatas& meshdatas)"
		},
		 "void AABB::merge(const AABB& box)": {
			"prefix": "void AABB::merge(const AABB& box)",
			"body": [
				"AABB:merge(${1:AABB& box})"
			],
			"description": "void AABB::merge(const AABB& box)"
		},
		 "MenuItemToggle* MenuItemToggle::create(MenuItem *item)": {
			"prefix": "MenuItemToggle* MenuItemToggle::create(MenuItem *item)",
			"body": [
				"MenuItemToggle:create(${1:MenuItem *item})"
			],
			"description": "MenuItemToggle* MenuItemToggle::create(MenuItem *item)"
		},
		 "float Node::getSkewY() const": {
			"prefix": "float Node::getSkewY() const",
			"body": [
				"float Node:getSkewY() "
			],
			"description": "float Node::getSkewY() const"
		},
		 "void SkeletonNode::batchDrawAllSubBones(const cocos2d::Mat4 &transform)": {
			"prefix": "void SkeletonNode::batchDrawAllSubBones(const cocos2d::Mat4 &transform)",
			"body": [
				"SkeletonNode:batchDrawAllSubBones(${1:cocos2d:Mat4 &transform})"
			],
			"description": "void SkeletonNode::batchDrawAllSubBones(const cocos2d::Mat4 &transform)"
		},
		 "BoneData *DataReaderHelper::decodeBone(const rapidjson::Value& json, DataInfo *dataInfo)": {
			"prefix": "BoneData *DataReaderHelper::decodeBone(const rapidjson::Value& json, DataInfo *dataInfo)",
			"body": [
				"*DataReaderHelper:decodeBone(${1:rapidjson:Value& json},${2:DataInfo *dataInfo})"
			],
			"description": "BoneData *DataReaderHelper::decodeBone(const rapidjson::Value& json, DataInfo *dataInfo)"
		},
		 "void CCBFile::setCCBFileNode(Node *pNode)": {
			"prefix": "void CCBFile::setCCBFileNode(Node *pNode)",
			"body": [
				"CCBFile:setCCBFileNode(${1:Node *pNode})"
			],
			"description": "void CCBFile::setCCBFileNode(Node *pNode)"
		},
		 "void Physics3DSliderConstraint::setDampingLimAng(float dampingLimAng)": {
			"prefix": "void Physics3DSliderConstraint::setDampingLimAng(float dampingLimAng)",
			"body": [
				"Physics3DSliderConstraint:setDampingLimAng(${1:float dampingLimAng})"
			],
			"description": "void Physics3DSliderConstraint::setDampingLimAng(float dampingLimAng)"
		},
		 "Physics3DPointToPointConstraint* Physics3DPointToPointConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotPointInA, const cocos2d::Vec3& pivotPointInB)": {
			"prefix": "Physics3DPointToPointConstraint* Physics3DPointToPointConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotPointInA, const cocos2d::Vec3& pivotPointInB)",
			"body": [
				"Physics3DPointToPointConstraint:create(${1:Physics3DRigidBody* rbA},${2:Physics3DRigidBody* rbB},${3:cocos2d:Vec3& pivotPointInA},${4:cocos2d:Vec3& pivotPointInB})"
			],
			"description": "Physics3DPointToPointConstraint* Physics3DPointToPointConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotPointInA, const cocos2d::Vec3& pivotPointInB)"
		},
		 "void IMEDispatcher::dispatchInsertText(const char * text, size_t len)": {
			"prefix": "void IMEDispatcher::dispatchInsertText(const char * text, size_t len)",
			"body": [
				"IMEDispatcher:dispatchInsertText(${1:char * text},${2:size_t len})"
			],
			"description": "void IMEDispatcher::dispatchInsertText(const char * text, size_t len)"
		},
		 "void SkeletonNode::changeSkins(const std::string& skinGroupName)": {
			"prefix": "void SkeletonNode::changeSkins(const std::string& skinGroupName)",
			"body": [
				"SkeletonNode:changeSkins(${1:std:string& skinGroupName})"
			],
			"description": "void SkeletonNode::changeSkins(const std::string& skinGroupName)"
		},
		 "void ComAudio::resumeBackgroundMusic()": {
			"prefix": "void ComAudio::resumeBackgroundMusic()",
			"body": [
				"void ComAudio:resumeBackgroundMusic()"
			],
			"description": "void ComAudio::resumeBackgroundMusic()"
		},
		 "void RichText::setVerticalSpace(float space)": {
			"prefix": "void RichText::setVerticalSpace(float space)",
			"body": [
				"RichText:setVerticalSpace(${1:float space})"
			],
			"description": "void RichText::setVerticalSpace(float space)"
		},
		 "void SIOClientImpl::onError(WebSocket* ws, const WebSocket::ErrorCode& error)": {
			"prefix": "void SIOClientImpl::onError(WebSocket* ws, const WebSocket::ErrorCode& error)",
			"body": [
				"SIOClientImpl:onError(${1:WebSocket* ws},${2:WebSocket:ErrorCode& error})"
			],
			"description": "void SIOClientImpl::onError(WebSocket* ws, const WebSocket::ErrorCode& error)"
		},
		 "void SIOClient::socketClosed()": {
			"prefix": "void SIOClient::socketClosed()",
			"body": [
				"void SIOClient:socketClosed()"
			],
			"description": "void SIOClient::socketClosed()"
		},
		 "bool ScrollView::isScrollBarEnabled() const": {
			"prefix": "bool ScrollView::isScrollBarEnabled() const",
			"body": [
				"bool ScrollView:isScrollBarEnabled() "
			],
			"description": "bool ScrollView::isScrollBarEnabled() const"
		},
		 "void NavMeshAgent::move(const Vec3 &destination, const MoveCallback &callback)": {
			"prefix": "void NavMeshAgent::move(const Vec3 &destination, const MoveCallback &callback)",
			"body": [
				"NavMeshAgent:move(${1:Vec3 &destination},${2:MoveCallback &callback})"
			],
			"description": "void NavMeshAgent::move(const Vec3 &destination, const MoveCallback &callback)"
		},
		 "void Bone::update(float delta)": {
			"prefix": "void Bone::update(float delta)",
			"body": [
				"Bone:update(${1:float delta})"
			],
			"description": "void Bone::update(float delta)"
		},
		 "void ListView::setItemsMargin(float margin)": {
			"prefix": "void ListView::setItemsMargin(float margin)",
			"body": [
				"ListView:setItemsMargin(${1:float margin})"
			],
			"description": "void ListView::setItemsMargin(float margin)"
		},
		 "Label* Label::create(const std::string& text, const std::string& font, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)": {
			"prefix": "Label* Label::create(const std::string& text, const std::string& font, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)",
			"body": [
				"Label:create(${1:std:string& text},${2:std:string& font},${3:float fontSize},${4:Size& dimensions /* = Size:ZERO */},${5:TextHAlignment hAlignment /* = TextHAlignment:LEFT */},${6:TextVAlignment vAlignment /* = TextVAlignment:TOP */})"
			],
			"description": "Label* Label::create(const std::string& text, const std::string& font, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)"
		},
		 "int GUIReader::getVersionInteger(const char *str)": {
			"prefix": "int GUIReader::getVersionInteger(const char *str)",
			"body": [
				"GUIReader:getVersionInteger(${1:char *str})"
			],
			"description": "int GUIReader::getVersionInteger(const char *str)"
		},
		 "bool Physics3DPointToPointConstraint::init(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotPointInA, const cocos2d::Vec3& pivotPointInB)": {
			"prefix": "bool Physics3DPointToPointConstraint::init(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotPointInA, const cocos2d::Vec3& pivotPointInB)",
			"body": [
				"Physics3DPointToPointConstraint:init(${1:Physics3DRigidBody* rbA},${2:Physics3DRigidBody* rbB},${3:cocos2d:Vec3& pivotPointInA},${4:cocos2d:Vec3& pivotPointInB})"
			],
			"description": "bool Physics3DPointToPointConstraint::init(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotPointInA, const cocos2d::Vec3& pivotPointInB)"
		},
		 "__Dictionary* __Dictionary::createWithDictionary(__Dictionary* srcDict)": {
			"prefix": "__Dictionary* __Dictionary::createWithDictionary(__Dictionary* srcDict)",
			"body": [
				"__Dictionary:createWithDictionary(${1:__Dictionary* srcDict})"
			],
			"description": "__Dictionary* __Dictionary::createWithDictionary(__Dictionary* srcDict)"
		},
		 "DisplayData *BoneData::getDisplayData(int index)": {
			"prefix": "DisplayData *BoneData::getDisplayData(int index)",
			"body": [
				"*BoneData:getDisplayData(${1:int index})"
			],
			"description": "DisplayData *BoneData::getDisplayData(int index)"
		},
		 "float Vec3::dot(const Vec3& v) const": {
			"prefix": "float Vec3::dot(const Vec3& v) const",
			"body": [
				"Vec3:dot(${1:Vec3& v})"
			],
			"description": "float Vec3::dot(const Vec3& v) const"
		},
		 "bool Terrain::initProperties()": {
			"prefix": "bool Terrain::initProperties()",
			"body": [
				"bool Terrain:initProperties()"
			],
			"description": "bool Terrain::initProperties()"
		},
		 "Bone *Armature::getParentBone() const": {
			"prefix": "Bone *Armature::getParentBone() const",
			"body": [
				"Bone *Armature:getParentBone() "
			],
			"description": "Bone *Armature::getParentBone() const"
		},
		 "void NavMeshObstacle::syncToObstacle()": {
			"prefix": "void NavMeshObstacle::syncToObstacle()",
			"body": [
				"void NavMeshObstacle:syncToObstacle()"
			],
			"description": "void NavMeshObstacle::syncToObstacle()"
		},
		 "ActionEase* EaseBackOut::reverse() const": {
			"prefix": "ActionEase* EaseBackOut::reverse() const",
			"body": [
				"ActionEase* EaseBackOut:reverse() "
			],
			"description": "ActionEase* EaseBackOut::reverse() const"
		},
		 "void LabelAtlas::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)": {
			"prefix": "void LabelAtlas::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)",
			"body": [
				"LabelAtlas:draw(${1:Renderer *renderer},${2:Mat4 &transform},${3:uint32_t flags})"
			],
			"description": "void LabelAtlas::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)"
		},
		 "void MenuItemLabel::selected()": {
			"prefix": "void MenuItemLabel::selected()",
			"body": [
				"void MenuItemLabel:selected()"
			],
			"description": "void MenuItemLabel::selected()"
		},
		 "void Controller::init()": {
			"prefix": "void Controller::init()",
			"body": [
				"void Controller:init()"
			],
			"description": "void Controller::init()"
		},
		 "static std::string _FullPath(const char * szPath)": {
			"prefix": "static std::string _FullPath(const char * szPath)",
			"body": [
				"std:string _FullPath(${1:char * szPath})"
			],
			"description": "static std::string _FullPath(const char * szPath)"
		},
		 "bool NavMeshAgent::isOnOffMeshLink()": {
			"prefix": "bool NavMeshAgent::isOnOffMeshLink()",
			"body": [
				"bool NavMeshAgent:isOnOffMeshLink()"
			],
			"description": "bool NavMeshAgent::isOnOffMeshLink()"
		},