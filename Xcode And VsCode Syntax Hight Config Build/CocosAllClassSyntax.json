std::string Action::description() const
void Action::startWithTarget(Node *aTarget)
void Action::stop()
bool Action::isDone() const
void Action::step(float dt)
void Action::update(float time)
Speed* Speed::create(ActionInterval* action, float speed)
bool Speed::initWithAction(ActionInterval *action, float speed)
Speed *Speed::clone() const
void Speed::startWithTarget(Node* target)
void Speed::stop()
void Speed::step(float dt)
bool Speed::isDone() const
Speed *Speed::reverse() const
void Speed::setInnerAction(ActionInterval *action)
Follow* Follow::create(Node *followedNode, const Rect& rect/* = Rect::ZERO*/)
Follow* Follow::clone() const
Follow* Follow::reverse() const
bool Follow::initWithTarget(Node *followedNode, const Rect& rect/* = Rect::ZERO*/)
void Follow::step(float dt)
bool Follow::isDone() const
void Follow::stop()
void ActionCamera::startWithTarget(Node *target)
ActionCamera* ActionCamera::clone() const
ActionCamera * ActionCamera::reverse() const
void ActionCamera::restore()
void ActionCamera::setEye(const Vec3& eye)
void ActionCamera::setEye(float x, float y, float z)
void ActionCamera::setCenter(const Vec3& center)
void ActionCamera::setUp(const Vec3& up)
void ActionCamera::updateTransform()
OrbitCamera * OrbitCamera::create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
OrbitCamera* OrbitCamera::clone() const
bool OrbitCamera::initWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
void OrbitCamera::startWithTarget(Node *target)
void OrbitCamera::update(float dt)
void OrbitCamera::sphericalRadius(float *newRadius, float *zenith, float *azimuth)
PointArray* PointArray::create(ssize_t capacity)
bool PointArray::initWithCapacity(ssize_t capacity)
PointArray* PointArray::clone() const
const std::vector<Vec2*>* PointArray::getControlPoints() const
void PointArray::setControlPoints(vector<Vec2*> *controlPoints)
void PointArray::addControlPoint(Vec2 controlPoint)
void PointArray::insertControlPoint(Vec2 &controlPoint, ssize_t index)
Vec2 PointArray::getControlPointAtIndex(ssize_t index)
void PointArray::replaceControlPoint(cocos2d::Vec2 &controlPoint, ssize_t index)
void PointArray::removeControlPointAtIndex(ssize_t index)
ssize_t PointArray::count() const
PointArray* PointArray::reverse() const
void PointArray::reverseInline()
CardinalSplineTo* CardinalSplineTo::create(float duration, cocos2d::PointArray *points, float tension)
bool CardinalSplineTo::initWithDuration(float duration, cocos2d::PointArray *points, float tension)
void CardinalSplineTo::startWithTarget(cocos2d::Node *target)
CardinalSplineTo* CardinalSplineTo::clone() const
void CardinalSplineTo::update(float time)
void CardinalSplineTo::updatePosition(cocos2d::Vec2 &newPos)
CardinalSplineTo* CardinalSplineTo::reverse() const
CardinalSplineBy* CardinalSplineBy::create(float duration, cocos2d::PointArray *points, float tension)
CardinalSplineBy::CardinalSplineBy() : _startPosition(0,0)
void CardinalSplineBy::updatePosition(cocos2d::Vec2 &newPos)
CardinalSplineBy* CardinalSplineBy::reverse() const
void CardinalSplineBy::startWithTarget(cocos2d::Node *target)
CardinalSplineBy* CardinalSplineBy::clone() const
CatmullRomTo* CatmullRomTo::create(float dt, cocos2d::PointArray *points)
bool CatmullRomTo::initWithDuration(float dt, cocos2d::PointArray *points)
CatmullRomTo* CatmullRomTo::clone() const
CatmullRomTo* CatmullRomTo::reverse() const
CatmullRomBy* CatmullRomBy::create(float dt, cocos2d::PointArray *points)
bool CatmullRomBy::initWithDuration(float dt, cocos2d::PointArray *points)
CatmullRomBy* CatmullRomBy::clone() const
CatmullRomBy* CatmullRomBy::reverse() const
bool ActionEase::initWithAction(ActionInterval *action)
void ActionEase::startWithTarget(Node *target)
void ActionEase::stop(void)
void ActionEase::update(float time)
ActionInterval* ActionEase::getInnerAction()
EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate)
bool EaseRateAction::initWithAction(ActionInterval *action, float rate)
EaseIn* EaseIn::create(ActionInterval *action, float rate)
EaseIn* EaseIn::clone() const
void EaseIn::update(float time)
EaseIn* EaseIn::reverse() const
EaseOut* EaseOut::create(ActionInterval *action, float rate)
EaseOut* EaseOut::clone() const
void EaseOut::update(float time)
EaseOut* EaseOut::reverse() const
EaseInOut* EaseInOut::create(ActionInterval *action, float rate)
EaseInOut* EaseInOut::clone() const
void EaseInOut::update(float time)
EaseInOut* EaseInOut::reverse() const
EaseExponentialIn* EaseExponentialIn::create(ActionInterval* action)
EaseExponentialIn* EaseExponentialIn::clone() const
void EaseExponentialIn::update(float time)
ActionEase * EaseExponentialIn::reverse() const
EaseExponentialOut* EaseExponentialOut::create(ActionInterval* action)
EaseExponentialOut* EaseExponentialOut::clone() const
void EaseExponentialOut::update(float time)
ActionEase* EaseExponentialOut::reverse() const
EaseExponentialInOut* EaseExponentialInOut::create(ActionInterval *action)
EaseExponentialInOut* EaseExponentialInOut::clone() const
void EaseExponentialInOut::update(float time)
EaseExponentialInOut* EaseExponentialInOut::reverse() const
EaseSineIn* EaseSineIn::create(ActionInterval* action)
EaseSineIn* EaseSineIn::clone() const
void EaseSineIn::update(float time)
ActionEase* EaseSineIn::reverse() const
EaseSineOut* EaseSineOut::create(ActionInterval* action)
EaseSineOut* EaseSineOut::clone() const
void EaseSineOut::update(float time)
ActionEase* EaseSineOut::reverse(void) const
EaseSineInOut* EaseSineInOut::create(ActionInterval* action)
EaseSineInOut* EaseSineInOut::clone() const
void EaseSineInOut::update(float time)
EaseSineInOut* EaseSineInOut::reverse() const
bool EaseElastic::initWithAction(ActionInterval *action, float period/* = 0.3f*/)
EaseElasticIn* EaseElasticIn::create(ActionInterval *action)
EaseElasticIn* EaseElasticIn::create(ActionInterval *action, float period/* = 0.3f*/)
EaseElasticIn* EaseElasticIn::clone() const
void EaseElasticIn::update(float time)
EaseElastic* EaseElasticIn::reverse() const
EaseElasticOut* EaseElasticOut::create(ActionInterval *action)
EaseElasticOut* EaseElasticOut::create(ActionInterval *action, float period/* = 0.3f*/)
EaseElasticOut* EaseElasticOut::clone() const
void EaseElasticOut::update(float time)
EaseElastic* EaseElasticOut::reverse() const
EaseElasticInOut* EaseElasticInOut::create(ActionInterval *action)
EaseElasticInOut* EaseElasticInOut::create(ActionInterval *action, float period/* = 0.3f*/)
EaseElasticInOut* EaseElasticInOut::clone() const
void EaseElasticInOut::update(float time)
EaseElasticInOut* EaseElasticInOut::reverse() const
EaseBounceIn* EaseBounceIn::create(ActionInterval* action)
EaseBounceIn* EaseBounceIn::clone() const
void EaseBounceIn::update(float time)
EaseBounce* EaseBounceIn::reverse() const
EaseBounceOut* EaseBounceOut::create(ActionInterval* action)
EaseBounceOut* EaseBounceOut::clone() const
void EaseBounceOut::update(float time)
EaseBounce* EaseBounceOut::reverse() const
EaseBounceInOut* EaseBounceInOut::create(ActionInterval* action)
EaseBounceInOut* EaseBounceInOut::clone() const
void EaseBounceInOut::update(float time)
EaseBounceInOut* EaseBounceInOut::reverse() const
EaseBackIn* EaseBackIn::create(ActionInterval *action)
EaseBackIn* EaseBackIn::clone() const
void EaseBackIn::update(float time)
ActionEase* EaseBackIn::reverse() const
EaseBackOut* EaseBackOut::create(ActionInterval* action)
EaseBackOut* EaseBackOut::clone() const
void EaseBackOut::update(float time)
ActionEase* EaseBackOut::reverse() const
EaseBackInOut* EaseBackInOut::create(ActionInterval* action)
EaseBackInOut* EaseBackInOut::clone() const
void EaseBackInOut::update(float time)
EaseBackInOut* EaseBackInOut::reverse() const
EaseBezierAction* EaseBezierAction::create(cocos2d::ActionInterval* action)
void EaseBezierAction::setBezierParamer( float p0, float p1, float p2, float p3)
EaseBezierAction* EaseBezierAction::clone() const
void EaseBezierAction::update(float time)
EaseBezierAction* EaseBezierAction::reverse() const
EaseQuadraticActionIn* EaseQuadraticActionIn::create(ActionInterval* action)
EaseQuadraticActionIn* EaseQuadraticActionIn::clone() const
void EaseQuadraticActionIn::update(float time)
EaseQuadraticActionIn* EaseQuadraticActionIn::reverse() const
EaseQuadraticActionOut* EaseQuadraticActionOut::create(ActionInterval* action)
EaseQuadraticActionOut* EaseQuadraticActionOut::clone() const
void EaseQuadraticActionOut::update(float time)
EaseQuadraticActionOut* EaseQuadraticActionOut::reverse() const
EaseQuadraticActionInOut* EaseQuadraticActionInOut::create(ActionInterval* action)
EaseQuadraticActionInOut* EaseQuadraticActionInOut::clone() const
void EaseQuadraticActionInOut::update(float time)
EaseQuadraticActionInOut* EaseQuadraticActionInOut::reverse() const
EaseQuarticActionIn* EaseQuarticActionIn::create(ActionInterval* action)
EaseQuarticActionIn* EaseQuarticActionIn::clone() const
void EaseQuarticActionIn::update(float time)
EaseQuarticActionIn* EaseQuarticActionIn::reverse() const
EaseQuarticActionOut* EaseQuarticActionOut::create(ActionInterval* action)
EaseQuarticActionOut* EaseQuarticActionOut::clone() const
void EaseQuarticActionOut::update(float time)
EaseQuarticActionOut* EaseQuarticActionOut::reverse() const
EaseQuarticActionInOut* EaseQuarticActionInOut::create(ActionInterval* action)
EaseQuarticActionInOut* EaseQuarticActionInOut::clone() const
void EaseQuarticActionInOut::update(float time)
EaseQuarticActionInOut* EaseQuarticActionInOut::reverse() const
EaseQuinticActionIn* EaseQuinticActionIn::create(ActionInterval* action)
EaseQuinticActionIn* EaseQuinticActionIn::clone() const
void EaseQuinticActionIn::update(float time)
EaseQuinticActionIn* EaseQuinticActionIn::reverse() const
EaseQuinticActionOut* EaseQuinticActionOut::create(ActionInterval* action)
EaseQuinticActionOut* EaseQuinticActionOut::clone() const
void EaseQuinticActionOut::update(float time)
EaseQuinticActionOut* EaseQuinticActionOut::reverse() const
EaseQuinticActionInOut* EaseQuinticActionInOut::create(ActionInterval* action)
EaseQuinticActionInOut* EaseQuinticActionInOut::clone() const
void EaseQuinticActionInOut::update(float time)
EaseQuinticActionInOut* EaseQuinticActionInOut::reverse() const
EaseCircleActionIn* EaseCircleActionIn::create(ActionInterval* action)
EaseCircleActionIn* EaseCircleActionIn::clone() const
void EaseCircleActionIn::update(float time)
EaseCircleActionIn* EaseCircleActionIn::reverse() const
EaseCircleActionOut* EaseCircleActionOut::create(ActionInterval* action)
EaseCircleActionOut* EaseCircleActionOut::clone() const
void EaseCircleActionOut::update(float time)
EaseCircleActionOut* EaseCircleActionOut::reverse() const
EaseCircleActionInOut* EaseCircleActionInOut::create(ActionInterval* action)
EaseCircleActionInOut* EaseCircleActionInOut::clone() const
void EaseCircleActionInOut::update(float time)
EaseCircleActionInOut* EaseCircleActionInOut::reverse() const
EaseCubicActionIn* EaseCubicActionIn::create(ActionInterval* action)
EaseCubicActionIn* EaseCubicActionIn::clone() const
void EaseCubicActionIn::update(float time)
EaseCubicActionIn* EaseCubicActionIn::reverse() const
EaseCubicActionOut* EaseCubicActionOut::create(ActionInterval* action)
EaseCubicActionOut* EaseCubicActionOut::clone() const
void EaseCubicActionOut::update(float time)
EaseCubicActionOut* EaseCubicActionOut::reverse() const
EaseCubicActionInOut* EaseCubicActionInOut::create(ActionInterval* action)
EaseCubicActionInOut* EaseCubicActionInOut::clone() const
void EaseCubicActionInOut::update(float time)
EaseCubicActionInOut* EaseCubicActionInOut::reverse() const
bool GridAction::initWithDuration(float duration, const Size& gridSize)
void GridAction::startWithTarget(Node *target)
void GridAction::cacheTargetAsGridNode()
GridAction* GridAction::reverse() const
GridBase* GridAction::getGrid()
GridBase* Grid3DAction::getGrid()
Vec3 Grid3DAction::getVertex(const Vec2& position) const
Vec3 Grid3DAction::getOriginalVertex(const Vec2& position) const
void Grid3DAction::setVertex(const Vec2& position, const Vec3& vertex)
Rect Grid3DAction::getGridRect() const
GridBase* TiledGrid3DAction::getGrid(void)
Quad3 TiledGrid3DAction::getTile(const Vec2& pos) const
Quad3 TiledGrid3DAction::getOriginalTile(const Vec2& pos) const
void TiledGrid3DAction::setTile(const Vec2& pos, const Quad3& coords)
AccelDeccelAmplitude* AccelDeccelAmplitude::create(Action *action, float duration)
bool AccelDeccelAmplitude::initWithAction(Action *action, float duration)
AccelDeccelAmplitude* AccelDeccelAmplitude::clone() const
void AccelDeccelAmplitude::startWithTarget(Node *target)
void AccelDeccelAmplitude::update(float time)
AccelDeccelAmplitude* AccelDeccelAmplitude::reverse() const
AccelAmplitude* AccelAmplitude::create(Action *action, float duration)
bool AccelAmplitude::initWithAction(Action *action, float duration)
AccelAmplitude* AccelAmplitude::clone() const
void AccelAmplitude::startWithTarget(Node *target)
void AccelAmplitude::update(float time)
AccelAmplitude* AccelAmplitude::reverse() const
DeccelAmplitude* DeccelAmplitude::create(Action *action, float duration)
bool DeccelAmplitude::initWithAction(Action *action, float duration)
void DeccelAmplitude::startWithTarget(Node *target)
void DeccelAmplitude::update(float time)
DeccelAmplitude* DeccelAmplitude::clone() const
DeccelAmplitude* DeccelAmplitude::reverse() const
void StopGrid::startWithTarget(Node *target)
void StopGrid::cacheTargetAsGridNode()
StopGrid* StopGrid::create()
StopGrid* StopGrid::clone() const
StopGrid* StopGrid::reverse() const
ReuseGrid* ReuseGrid::create(int times)
bool ReuseGrid::initWithTimes(int times)
void ReuseGrid::startWithTarget(Node *target)
void ReuseGrid::cacheTargetAsGridNode()
ReuseGrid* ReuseGrid::clone() const
ReuseGrid* ReuseGrid::reverse() const
Waves3D* Waves3D::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)
bool Waves3D::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)
Waves3D* Waves3D::clone() const
void Waves3D::update(float time)
FlipX3D* FlipX3D::create(float duration)
bool FlipX3D::initWithDuration(float duration)
bool FlipX3D::initWithSize(const Size& gridSize, float duration)
FlipX3D* FlipX3D::clone() const
void FlipX3D::update(float time)
FlipY3D* FlipY3D::clone() const
FlipY3D* FlipY3D::create(float duration)
void FlipY3D::update(float time)
Lens3D* Lens3D::create(float duration, const Size& gridSize, const Vec2& position, float radius)
bool Lens3D::initWithDuration(float duration, const Size& gridSize, const Vec2& position, float radius)
Lens3D* Lens3D::clone() const
void Lens3D::setPosition(const Vec2& pos)
void Lens3D::update(float time)
Ripple3D* Ripple3D::create(float duration, const Size& gridSize, const Vec2& position, float radius, unsigned int waves, float amplitude)
bool Ripple3D::initWithDuration(float duration, const Size& gridSize, const Vec2& position, float radius, unsigned int waves, float amplitude)
void Ripple3D::setPosition(const Vec2& position)
Ripple3D* Ripple3D::clone() const
void Ripple3D::update(float time)
Shaky3D* Shaky3D::create(float duration, const Size& gridSize, int range, bool shakeZ)
bool Shaky3D::initWithDuration(float duration, const Size& gridSize, int range, bool shakeZ)
Shaky3D* Shaky3D::clone() const
void Shaky3D::update(float time)
Liquid* Liquid::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)
bool Liquid::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)
Liquid* Liquid::clone() const
void Liquid::update(float time)
Waves* Waves::create(float duration, const Size& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
bool Waves::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
Waves* Waves::clone() const
void Waves::update(float time)
Twirl* Twirl::create(float duration, const Size& gridSize, Vec2 position, unsigned int twirls, float amplitude)
bool Twirl::initWithDuration(float duration, const Size& gridSize, Vec2 position, unsigned int twirls, float amplitude)
void Twirl::setPosition(const Vec2& position)
Twirl *Twirl::clone() const
void Twirl::update(float time)
bool ActionInstant::isDone() const
void ActionInstant::step(float dt)
void ActionInstant::update(float time)
Show* Show::create()
void Show::update(float time)
ActionInstant* Show::reverse() const
Show * Show::clone() const
Hide * Hide::create()
void Hide::update(float time)
ActionInstant *Hide::reverse() const
Hide * Hide::clone() const
ToggleVisibility * ToggleVisibility::create()
void ToggleVisibility::update(float time)
ToggleVisibility * ToggleVisibility::reverse() const
ToggleVisibility * ToggleVisibility::clone() const
RemoveSelf * RemoveSelf::create(bool isNeedCleanUp /*= true*/)
bool RemoveSelf::init(bool isNeedCleanUp)
void RemoveSelf::update(float time)
RemoveSelf *RemoveSelf::reverse() const
RemoveSelf * RemoveSelf::clone() const
FlipX *FlipX::create(bool x)
bool FlipX::initWithFlipX(bool x)
void FlipX::update(float time)
FlipX* FlipX::reverse() const
FlipX * FlipX::clone() const
FlipY * FlipY::create(bool y)
bool FlipY::initWithFlipY(bool y)
void FlipY::update(float time)
FlipY* FlipY::reverse() const
FlipY * FlipY::clone() const
Place* Place::create(const Vec2& pos)
bool Place::initWithPosition(const Vec2& pos)
Place * Place::clone() const
Place * Place::reverse() const
void Place::update(float time)
CallFunc * CallFunc::create(const std::function<void()> &func)
CallFunc * CallFunc::create(Ref* selectorTarget, SEL_CallFunc selector)
bool CallFunc::initWithFunction(const std::function<void()> &func)
bool CallFunc::initWithTarget(Ref* target)
CallFunc * CallFunc::reverse() const
void CallFunc::update(float time)
void CallFunc::execute()
CallFuncN * CallFuncN::create(const std::function<void(Node*)> &func)
CallFuncN * CallFuncN::create(Ref* selectorTarget, SEL_CallFuncN selector)
void CallFuncN::execute()
bool CallFuncN::initWithFunction(const std::function<void (Node *)> &func)
bool CallFuncN::initWithTarget(Ref* selectorTarget, SEL_CallFuncN selector)
CallFuncN * CallFuncN::clone() const
__CCCallFuncND * __CCCallFuncND::create(Ref* selectorTarget, SEL_CallFuncND selector, void* d)
bool __CCCallFuncND::initWithTarget(Ref* selectorTarget, SEL_CallFuncND selector, void* d)
void __CCCallFuncND::execute()
__CCCallFuncND * __CCCallFuncND::clone() const
void __CCCallFuncO::execute()
__CCCallFuncO * __CCCallFuncO::create(Ref* selectorTarget, SEL_CallFuncO selector, Ref* object)
bool __CCCallFuncO::initWithTarget(Ref* selectorTarget, SEL_CallFuncO selector, Ref* object)
__CCCallFuncO * __CCCallFuncO::clone() const
Ref* __CCCallFuncO::getObject() const
void __CCCallFuncO::setObject(Ref* obj)
ExtraAction* ExtraAction::create()
ExtraAction* ExtraAction::clone() const
ExtraAction* ExtraAction::reverse() const
void ExtraAction::update(float time)
void ExtraAction::step(float dt)
bool ActionInterval::initWithDuration(float d)
bool ActionInterval::isDone() const
void ActionInterval::step(float dt)
void ActionInterval::setAmplitudeRate(float amp)
float ActionInterval::getAmplitudeRate()
void ActionInterval::startWithTarget(Node *target)
Sequence* Sequence::createWithTwoActions(FiniteTimeAction *actionOne, FiniteTimeAction *actionTwo)
Sequence* Sequence::variadicCreate(FiniteTimeAction *action1, ...)
Sequence* Sequence::create(FiniteTimeAction *action1, ...)
Sequence* Sequence::createWithVariableList(FiniteTimeAction *action1, va_list args)
Sequence* Sequence::create(const Vector<FiniteTimeAction*>& arrayOfActions)
bool Sequence::initWithTwoActions(FiniteTimeAction *actionOne, FiniteTimeAction *actionTwo)
Sequence* Sequence::clone() const
void Sequence::startWithTarget(Node *target)
void Sequence::stop(void)
void Sequence::update(float t)
Sequence* Sequence::reverse() const
Repeat* Repeat::create(FiniteTimeAction *action, unsigned int times)
bool Repeat::initWithAction(FiniteTimeAction *action, unsigned int times)
Repeat* Repeat::clone(void) const
void Repeat::startWithTarget(Node *target)
void Repeat::stop(void)
void Repeat::update(float dt)
bool Repeat::isDone(void) const
Repeat* Repeat::reverse() const
RepeatForever *RepeatForever::create(ActionInterval *action)
bool RepeatForever::initWithAction(ActionInterval *action)
RepeatForever *RepeatForever::clone() const
void RepeatForever::startWithTarget(Node* target)
void RepeatForever::step(float dt)
bool RepeatForever::isDone() const
RepeatForever *RepeatForever::reverse() const
Spawn* Spawn::variadicCreate(FiniteTimeAction *action1, ...)
Spawn* Spawn::create(FiniteTimeAction *action1, ...)
Spawn* Spawn::createWithVariableList(FiniteTimeAction *action1, va_list args)
Spawn* Spawn::create(const Vector<FiniteTimeAction*>& arrayOfActions)
Spawn* Spawn::createWithTwoActions(FiniteTimeAction *action1, FiniteTimeAction *action2)
bool Spawn::initWithTwoActions(FiniteTimeAction *action1, FiniteTimeAction *action2)
Spawn* Spawn::clone(void) const
void Spawn::startWithTarget(Node *target)
void Spawn::stop(void)
void Spawn::update(float time)
Spawn* Spawn::reverse() const
RotateTo* RotateTo::create(float duration, float dstAngle)
RotateTo* RotateTo::create(float duration, float dstAngleX, float dstAngleY)
RotateTo* RotateTo::create(float duration, const Vec3& dstAngle3D)
bool RotateTo::initWithDuration(float duration, float dstAngleX, float dstAngleY)
bool RotateTo::initWithDuration(float duration, const Vec3& dstAngle3D)
RotateTo* RotateTo::clone(void) const
void RotateTo::calculateAngles(float &startAngle, float &diffAngle, float dstAngle)
void RotateTo::startWithTarget(Node *target)
void RotateTo::update(float time)
RotateTo *RotateTo::reverse() const
RotateBy* RotateBy::create(float duration, float deltaAngle)
RotateBy* RotateBy::create(float duration, float deltaAngleX, float deltaAngleY)
RotateBy* RotateBy::create(float duration, const Vec3& deltaAngle3D)
bool RotateBy::initWithDuration(float duration, float deltaAngle)
bool RotateBy::initWithDuration(float duration, float deltaAngleX, float deltaAngleY)
bool RotateBy::initWithDuration(float duration, const Vec3& deltaAngle3D)
RotateBy* RotateBy::clone() const
void RotateBy::startWithTarget(Node *target)
void RotateBy::update(float time)
RotateBy* RotateBy::reverse() const
MoveBy* MoveBy::create(float duration, const Vec2& deltaPosition)
MoveBy* MoveBy::create(float duration, const Vec3 &deltaPosition)
bool MoveBy::initWithDuration(float duration, const Vec2& deltaPosition)
bool MoveBy::initWithDuration(float duration, const Vec3& deltaPosition)
MoveBy* MoveBy::clone() const
void MoveBy::startWithTarget(Node *target)
MoveBy* MoveBy::reverse() const
void MoveBy::update(float t)
MoveTo* MoveTo::create(float duration, const Vec2& position)
MoveTo* MoveTo::create(float duration, const Vec3& position)
bool MoveTo::initWithDuration(float duration, const Vec2& position)
bool MoveTo::initWithDuration(float duration, const Vec3& position)
MoveTo* MoveTo::clone() const
void MoveTo::startWithTarget(Node *target)
MoveTo* MoveTo::reverse() const
SkewTo* SkewTo::create(float t, float sx, float sy)
bool SkewTo::initWithDuration(float t, float sx, float sy)
SkewTo* SkewTo::clone() const
SkewTo* SkewTo::reverse() const
void SkewTo::startWithTarget(Node *target)
void SkewTo::update(float t)
SkewBy* SkewBy::create(float t, float sx, float sy)
SkewBy * SkewBy::clone() const
bool SkewBy::initWithDuration(float t, float deltaSkewX, float deltaSkewY)
void SkewBy::startWithTarget(Node *target)
SkewBy* SkewBy::reverse() const
JumpBy* JumpBy::create(float duration, const Vec2& position, float height, int jumps)
bool JumpBy::initWithDuration(float duration, const Vec2& position, float height, int jumps)
JumpBy* JumpBy::clone() const
void JumpBy::startWithTarget(Node *target)
void JumpBy::update(float t)
JumpBy* JumpBy::reverse() const
JumpTo* JumpTo::create(float duration, const Vec2& position, float height, int jumps)
bool JumpTo::initWithDuration(float duration, const Vec2& position, float height, int jumps)
JumpTo* JumpTo::clone() const
JumpTo* JumpTo::reverse() const
void JumpTo::startWithTarget(Node *target)
BezierBy* BezierBy::create(float t, const ccBezierConfig& c)
bool BezierBy::initWithDuration(float t, const ccBezierConfig& c)
void BezierBy::startWithTarget(Node *target)
BezierBy* BezierBy::clone() const
void BezierBy::update(float time)
BezierBy* BezierBy::reverse() const
BezierTo* BezierTo::create(float t, const ccBezierConfig& c)
bool BezierTo::initWithDuration(float t, const ccBezierConfig &c)
BezierTo* BezierTo::clone() const
void BezierTo::startWithTarget(Node *target)
BezierTo* BezierTo::reverse() const
ScaleTo* ScaleTo::create(float duration, float s)
ScaleTo* ScaleTo::create(float duration, float sx, float sy)
ScaleTo* ScaleTo::create(float duration, float sx, float sy, float sz)
bool ScaleTo::initWithDuration(float duration, float s)
bool ScaleTo::initWithDuration(float duration, float sx, float sy)
bool ScaleTo::initWithDuration(float duration, float sx, float sy, float sz)
ScaleTo* ScaleTo::clone() const
ScaleTo* ScaleTo::reverse() const
void ScaleTo::startWithTarget(Node *target)
void ScaleTo::update(float time)
ScaleBy* ScaleBy::create(float duration, float s)
ScaleBy* ScaleBy::create(float duration, float sx, float sy)
ScaleBy* ScaleBy::create(float duration, float sx, float sy, float sz)
ScaleBy* ScaleBy::clone() const
void ScaleBy::startWithTarget(Node *target)
ScaleBy* ScaleBy::reverse() const
Blink* Blink::create(float duration, int blinks)
bool Blink::initWithDuration(float duration, int blinks)
void Blink::stop()
void Blink::startWithTarget(Node *target)
Blink* Blink::clone(void) const
void Blink::update(float time)
Blink* Blink::reverse() const
FadeIn* FadeIn::create(float d)
FadeIn* FadeIn::clone() const
void FadeIn::setReverseAction(cocos2d::FadeTo *ac)
FadeTo* FadeIn::reverse() const
void FadeIn::startWithTarget(cocos2d::Node *target)
FadeOut* FadeOut::create(float d)
FadeOut* FadeOut::clone() const
void FadeOut::startWithTarget(cocos2d::Node *target)
void FadeOut::setReverseAction(cocos2d::FadeTo *ac)
FadeTo* FadeOut::reverse() const
FadeTo* FadeTo::create(float duration, GLubyte opacity)
bool FadeTo::initWithDuration(float duration, GLubyte opacity)
FadeTo* FadeTo::clone() const
FadeTo* FadeTo::reverse() const
void FadeTo::startWithTarget(Node *target)
void FadeTo::update(float time)
TintTo* TintTo::create(float duration, GLubyte red, GLubyte green, GLubyte blue)
TintTo* TintTo::create(float duration, const Color3B& color)
bool TintTo::initWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue)
TintTo* TintTo::clone() const
TintTo* TintTo::reverse() const
void TintTo::startWithTarget(Node *target)
void TintTo::update(float time)
TintBy* TintBy::create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
bool TintBy::initWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
TintBy* TintBy::clone() const
void TintBy::startWithTarget(Node *target)
void TintBy::update(float time)
TintBy* TintBy::reverse() const
DelayTime* DelayTime::create(float d)
DelayTime* DelayTime::clone() const
void DelayTime::update(float time)
DelayTime* DelayTime::reverse() const
ReverseTime* ReverseTime::create(FiniteTimeAction *action)
bool ReverseTime::initWithAction(FiniteTimeAction *action)
ReverseTime* ReverseTime::clone() const
ReverseTime::ReverseTime() : _other(nullptr)
void ReverseTime::startWithTarget(Node *target)
void ReverseTime::stop(void)
void ReverseTime::update(float time)
ReverseTime* ReverseTime::reverse() const
Animate* Animate::create(Animation *animation)
bool Animate::initWithAnimation(Animation* animation)
void Animate::setAnimation(cocos2d::Animation *animation)
Animate* Animate::clone() const
void Animate::startWithTarget(Node *target)
void Animate::stop()
void Animate::update(float t)
Animate* Animate::reverse() const
TargetedAction* TargetedAction::create(Node* target, FiniteTimeAction* action)
bool TargetedAction::initWithTarget(Node* target, FiniteTimeAction* action)
TargetedAction* TargetedAction::clone() const
TargetedAction* TargetedAction::reverse() const
void TargetedAction::startWithTarget(Node *target)
void TargetedAction::stop()
void TargetedAction::update(float time)
bool TargetedAction::isDone(void) const
void TargetedAction::setForcedTarget(Node* forcedTarget)
ActionFloat* ActionFloat::create(float duration, float from, float to, ActionFloatCallback callback)
bool ActionFloat::initWithDuration(float duration, float from, float to, ActionFloatCallback callback)
ActionFloat* ActionFloat::clone() const
void ActionFloat::startWithTarget(Node *target)
void ActionFloat::update(float delta)
ActionFloat* ActionFloat::reverse() const
void ActionManager::deleteHashElement(tHashElement *element)
void ActionManager::actionAllocWithHashElement(tHashElement *element)
void ActionManager::removeActionAtIndex(ssize_t index, tHashElement *element)
void ActionManager::pauseTarget(Node *target)
void ActionManager::resumeTarget(Node *target)
Vector<Node*> ActionManager::pauseAllRunningActions()
void ActionManager::resumeTargets(const Vector<Node*>& targetsToResume)
void ActionManager::addAction(Action *action, Node *target, bool paused)
void ActionManager::removeAllActions()
void ActionManager::removeAllActionsFromTarget(Node *target)
void ActionManager::removeAction(Action *action)
void ActionManager::removeActionByTag(int tag, Node *target)
void ActionManager::removeAllActionsByTag(int tag, Node *target)
void ActionManager::removeActionsByFlags(unsigned int flags, Node *target)
Action* ActionManager::getActionByTag(int tag, const Node *target) const
ssize_t ActionManager::getNumberOfRunningActionsInTarget(const Node *target) const
void ActionManager::update(float dt)
PageTurn3D* PageTurn3D::create(float duration, const Size& gridSize)
PageTurn3D *PageTurn3D::clone() const
GridBase* PageTurn3D::getGrid()
void PageTurn3D::update(float time)
ProgressTo* ProgressTo::create(float duration, float percent)
bool ProgressTo::initWithDuration(float duration, float percent)
ProgressTo* ProgressTo::clone() const
ProgressTo* ProgressTo::reverse() const
void ProgressTo::startWithTarget(Node *target)
void ProgressTo::update(float time)
ProgressFromTo* ProgressFromTo::create(float duration, float fromPercentage, float toPercentage)
bool ProgressFromTo::initWithDuration(float duration, float fromPercentage, float toPercentage)
ProgressFromTo* ProgressFromTo::clone() const
ProgressFromTo* ProgressFromTo::reverse() const
void ProgressFromTo::startWithTarget(Node *target)
void ProgressFromTo::update(float time)
ShakyTiles3D* ShakyTiles3D::create(float duration, const Size& gridSize, int range, bool shakeZ)
bool ShakyTiles3D::initWithDuration(float duration, const Size& gridSize, int range, bool shakeZ)
ShakyTiles3D* ShakyTiles3D::clone() const
void ShakyTiles3D::update(float time)
ShatteredTiles3D* ShatteredTiles3D::create(float duration, const Size& gridSize, int range, bool shatterZ)
bool ShatteredTiles3D::initWithDuration(float duration, const Size& gridSize, int range, bool shatterZ)
ShatteredTiles3D* ShatteredTiles3D::clone() const
void ShatteredTiles3D::update(float time)
ShuffleTiles* ShuffleTiles::create(float duration, const Size& gridSize, unsigned int seed)
bool ShuffleTiles::initWithDuration(float duration, const Size& gridSize, unsigned int seed)
ShuffleTiles* ShuffleTiles::clone() const
void ShuffleTiles::shuffle(unsigned int *array, unsigned int len)
Size ShuffleTiles::getDelta(const Size& pos) const
void ShuffleTiles::placeTile(const Vec2& pos, Tile *t)
void ShuffleTiles::startWithTarget(Node *target)
void ShuffleTiles::update(float time)
FadeOutTRTiles* FadeOutTRTiles::create(float duration, const Size& gridSize)
FadeOutTRTiles* FadeOutTRTiles::clone() const
float FadeOutTRTiles::testFunc(const Size& pos, float time)
void FadeOutTRTiles::turnOnTile(const Vec2& pos)
void FadeOutTRTiles::turnOffTile(const Vec2& pos)
void FadeOutTRTiles::transformTile(const Vec2& pos, float distance)
void FadeOutTRTiles::update(float time)
FadeOutBLTiles* FadeOutBLTiles::create(float duration, const Size& gridSize)
FadeOutBLTiles* FadeOutBLTiles::clone() const
float FadeOutBLTiles::testFunc(const Size& pos, float time)
FadeOutUpTiles* FadeOutUpTiles::create(float duration, const Size& gridSize)
FadeOutUpTiles* FadeOutUpTiles::clone() const
float FadeOutUpTiles::testFunc(const Size& pos, float time)
void FadeOutUpTiles::transformTile(const Vec2& pos, float distance)
FadeOutDownTiles* FadeOutDownTiles::create(float duration, const Size& gridSize)
FadeOutDownTiles* FadeOutDownTiles::clone() const
float FadeOutDownTiles::testFunc(const Size& pos, float time)
TurnOffTiles* TurnOffTiles::create(float duration, const Size& gridSize)
TurnOffTiles* TurnOffTiles::create(float duration, const Size& gridSize, unsigned int seed)
bool TurnOffTiles::initWithDuration(float duration, const Size& gridSize, unsigned int seed)
TurnOffTiles* TurnOffTiles::clone() const
void TurnOffTiles::shuffle(unsigned int *array, unsigned int len)
void TurnOffTiles::turnOnTile(const Vec2& pos)
void TurnOffTiles::turnOffTile(const Vec2& pos)
void TurnOffTiles::startWithTarget(Node *target)
void TurnOffTiles::update(float time)
WavesTiles3D* WavesTiles3D::create(float duration, const Size& gridSize, unsigned int waves, float amplitude)
bool WavesTiles3D::initWithDuration(float duration, const Size& gridSize, unsigned int waves, float amplitude)
WavesTiles3D* WavesTiles3D::clone() const
void WavesTiles3D::update(float time)
JumpTiles3D* JumpTiles3D::create(float duration, const Size& gridSize, unsigned int numberOfJumps, float amplitude)
bool JumpTiles3D::initWithDuration(float duration, const Size& gridSize, unsigned int numberOfJumps, float amplitude)
JumpTiles3D* JumpTiles3D::clone() const
void JumpTiles3D::update(float time)
SplitRows* SplitRows::create(float duration, unsigned int nRows)
bool SplitRows::initWithDuration(float duration, unsigned int rows)
SplitRows* SplitRows::clone() const
void SplitRows::startWithTarget(Node *target)
void SplitRows::update(float time)
SplitCols* SplitCols::create(float duration, unsigned int cols)
bool SplitCols::initWithDuration(float duration, unsigned int cols)
SplitCols* SplitCols::clone() const
void SplitCols::startWithTarget(Node *target)
void SplitCols::update(float time)
ActionTween* ActionTween::create(float duration, const std::string& key, float from, float to)
bool ActionTween::initWithDuration(float duration, const std::string& key, float from, float to)
ActionTween *ActionTween::clone() const
void ActionTween::startWithTarget(Node *target)
void ActionTween::update(float dt)
ActionTween* ActionTween::reverse() const
AnimationFrame* AnimationFrame::create(SpriteFrame* spriteFrame, float delayUnits, const ValueMap& userInfo)
bool AnimationFrame::initWithSpriteFrame(SpriteFrame* spriteFrame, float delayUnits, const ValueMap& userInfo)
AnimationFrame* AnimationFrame::clone() const
Animation* Animation::create(void)
Animation* Animation::createWithSpriteFrames(const Vector<SpriteFrame*>& frames, float delay/* = 0.0f*/, unsigned int loops/* = 1*/)
Animation* Animation::create(const Vector<AnimationFrame*>& arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops /* = 1 */)
bool Animation::init()
bool Animation::initWithSpriteFrames(const Vector<SpriteFrame*>& frames, float delay/* = 0.0f*/, unsigned int loops/* = 1*/)
bool Animation::initWithAnimationFrames(const Vector<AnimationFrame*>& arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)
void Animation::addSpriteFrame(SpriteFrame* spriteFrame)
void Animation::addSpriteFrameWithFile(const std::string& filename)
void Animation::addSpriteFrameWithTexture(Texture2D *pobTexture, const Rect& rect)
float Animation::getDuration(void) const
Animation* Animation::clone() const
AnimationCache* AnimationCache::getInstance()
void AnimationCache::destroyInstance()
bool AnimationCache::init()
void AnimationCache::addAnimation(Animation *animation, const std::string& name)
void AnimationCache::removeAnimation(const std::string& name)
Animation* AnimationCache::getAnimation(const std::string& name)
void AnimationCache::parseVersion1(const ValueMap& animations)
void AnimationCache::parseVersion2(const ValueMap& animations)
void AnimationCache::addAnimationsWithDictionary(const ValueMap& dictionary,const std::string& plist)
void AnimationCache::addAnimationsWithFile(const std::string& plist)
AtlasNode * AtlasNode::create(const std::string& tile, int tileWidth, int tileHeight, int itemsToRender)
bool AtlasNode::initWithTileFile(const std::string& tile, int tileWidth, int tileHeight, int itemsToRender)
bool AtlasNode::initWithTexture(Texture2D* texture, int tileWidth, int tileHeight, int itemsToRender)
void AtlasNode::calculateMaxItems()
void AtlasNode::updateAtlasValues()
void AtlasNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
const Color3B& AtlasNode::getColor() const
void AtlasNode::setColor(const Color3B& color3)
void AtlasNode::setOpacity(GLubyte opacity)
void AtlasNode::setOpacityModifyRGB(bool value)
bool AtlasNode::isOpacityModifyRGB() const
void AtlasNode::updateOpacityModifyRGB()
void AtlasNode::setIgnoreContentScaleFactor(bool ignoreContentScaleFactor)
const BlendFunc& AtlasNode::getBlendFunc() const
void AtlasNode::setBlendFunc(const BlendFunc &blendFunc)
void AtlasNode::updateBlendFunc()
void AtlasNode::setTexture(Texture2D *texture)
Texture2D * AtlasNode::getTexture() const
void AtlasNode::setTextureAtlas(TextureAtlas* textureAtlas)
TextureAtlas * AtlasNode::getTextureAtlas() const
ssize_t AtlasNode::getQuadsToDraw() const
void AtlasNode::setQuadsToDraw(ssize_t quadsToDraw)
void PolygonInfo::setQuad(V3F_C4B_T2F_Quad *quad)
void PolygonInfo::releaseVertsAndIndices()
const unsigned int PolygonInfo::getVertCount() const
const unsigned int PolygonInfo::getTriaglesCount() const
const float PolygonInfo::getArea() const
std::vector<Vec2> AutoPolygon::trace(const Rect& rect, const float& threshold)
Vec2 AutoPolygon::findFirstNoneTransparentPixel(const Rect& rect, const float& threshold)
unsigned char AutoPolygon::getAlphaByIndex(const unsigned int& i)
unsigned char AutoPolygon::getAlphaByPos(const Vec2& pos)
unsigned int AutoPolygon::getSquareValue(const unsigned int& x, const unsigned int& y, const Rect& rect, const float& threshold)
std::vector<cocos2d::Vec2> AutoPolygon::marchSquare(const Rect& rect, const Vec2& start, const float& threshold)
float AutoPolygon::perpendicularDistance(const cocos2d::Vec2& i, const cocos2d::Vec2& start, const cocos2d::Vec2& end)
std::vector<cocos2d::Vec2> AutoPolygon::rdp(std::vector<cocos2d::Vec2> v, const float& optimization)
std::vector<Vec2> AutoPolygon::reduce(const std::vector<Vec2>& points, const Rect& rect , const float& epsilon)
std::vector<Vec2> AutoPolygon::expand(const std::vector<Vec2>& points, const cocos2d::Rect &rect, const float& epsilon)
TrianglesCommand::Triangles AutoPolygon::triangulate(const std::vector<Vec2>& points)
void AutoPolygon::calculateUV(const Rect& rect, V3F_C4B_T2F* verts, const ssize_t& count)
Rect AutoPolygon::getRealRect(const Rect& rect)
PolygonInfo AutoPolygon::generateTriangles(const Rect& rect, const float& epsilon, const float& threshold)
PolygonInfo AutoPolygon::generatePolygon(const std::string& filename, const Rect& rect, const float epsilon, const float threshold)
Camera* Camera::getDefaultCamera()
Camera* Camera::create()
Camera* Camera::createPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)
Camera* Camera::createOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)
const Mat4& Camera::getProjectionMatrix() const
const Mat4& Camera::getViewMatrix() const
void Camera::lookAt(const Vec3& lookAtPos, const Vec3& up)
const Mat4& Camera::getViewProjectionMatrix() const
void Camera::setAdditionalProjection(const Mat4& mat)
bool Camera::initDefault()
bool Camera::initPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)
bool Camera::initOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)
Vec2 Camera::project(const Vec3& src) const
Vec2 Camera::projectGL(const Vec3& src) const
Vec3 Camera::unproject(const Vec3& src) const
Vec3 Camera::unprojectGL(const Vec3& src) const
void Camera::unproject(const Size& viewport, const Vec3* src, Vec3* dst) const
void Camera::unprojectGL(const Size& viewport, const Vec3* src, Vec3* dst) const
bool Camera::isVisibleInFrustum(const AABB* aabb) const
float Camera::getDepthInView(const Mat4& transform) const
void Camera::setDepth(int8_t depth)
void Camera::onEnter()
void Camera::onExit()
void Camera::setScene(Scene* scene)
void Camera::clearBackground()
void Camera::setFrameBufferObject(experimental::FrameBuffer *fbo)
void Camera::applyFrameBufferObject()
void Camera::apply()
void Camera::applyViewport()
int Camera::getRenderOrder() const
void Camera::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void Camera::setBackgroundBrush(CameraBackgroundBrush* clearBrush)
CameraBackgroundBrush* CameraBackgroundBrush::createNoneBrush()
CameraBackgroundColorBrush* CameraBackgroundBrush::createColorBrush(const Color4F& color, float depth)
CameraBackgroundDepthBrush* CameraBackgroundBrush::createDepthBrush(float depth)
CameraBackgroundSkyBoxBrush* CameraBackgroundBrush::createSkyboxBrush(const std::string& positive_x, const std::string& negative_x, const std::string& positive_y, const std::string& negative_y, const std::string& positive_z, const std::string& negative_z)
CameraBackgroundDepthBrush* CameraBackgroundDepthBrush::create(float depth)
bool CameraBackgroundDepthBrush::init()
void CameraBackgroundDepthBrush::drawBackground(Camera* camera)
bool CameraBackgroundColorBrush::init()
void CameraBackgroundColorBrush::setColor(const Color4F& color)
CameraBackgroundColorBrush* CameraBackgroundColorBrush::create(const Color4F& color, float depth)
CameraBackgroundSkyBoxBrush* CameraBackgroundSkyBoxBrush::create(const std::string& positive_x, const std::string& negative_x, const std::string& positive_y, const std::string& negative_y, const std::string& positive_z, const std::string& negative_z)
CameraBackgroundSkyBoxBrush* CameraBackgroundSkyBoxBrush::create()
void CameraBackgroundSkyBoxBrush::drawBackground(Camera* camera)
bool CameraBackgroundSkyBoxBrush::init()
void CameraBackgroundSkyBoxBrush::initBuffer()
void CameraBackgroundSkyBoxBrush::setTexture(TextureCube*  texture)
ClippingNode* ClippingNode::create()
ClippingNode* ClippingNode::create(Node *pStencil)
bool ClippingNode::init()
bool ClippingNode::init(Node *stencil)
void ClippingNode::onEnter()
void ClippingNode::onEnterTransitionDidFinish()
void ClippingNode::onExitTransitionDidStart()
void ClippingNode::onExit()
void ClippingNode::drawFullScreenQuadClearStencil()
void ClippingNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void ClippingNode::setCameraMask(unsigned short mask, bool applyChildren)
Node* ClippingNode::getStencil() const
void ClippingNode::setStencil(Node *stencil)
bool ClippingNode::hasContent() const
GLfloat ClippingNode::getAlphaThreshold() const
void ClippingNode::setAlphaThreshold(GLfloat alphaThreshold)
bool ClippingNode::isInverted() const
void ClippingNode::setInverted(bool inverted)
void ClippingNode::onBeforeVisit()
void ClippingNode::onAfterDrawStencil()
void ClippingNode::onAfterVisit()
ClippingRectangleNode* ClippingRectangleNode::create(const Rect& clippingRegion)
ClippingRectangleNode* ClippingRectangleNode::create()
void ClippingRectangleNode::setClippingRegion(const Rect &clippingRegion)
void ClippingRectangleNode::onBeforeVisitScissor()
void ClippingRectangleNode::onAfterVisitScissor()
void ClippingRectangleNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
bool Component::init()
void Component::onEnter()
void Component::onExit()
void Component::onAdd()
void Component::onRemove()
void Component::update(float delta)
bool Component::serialize(void *ar)
Component* Component::create(void)
const std::string& Component::getName() const
void Component::setName(const std::string& name)
Node* Component::getOwner() const
void Component::setOwner(Node *owner)
bool Component::isEnabled() const
void Component::setEnabled(bool b)
Component* ComponentContainer::get(const std::string& name) const
bool ComponentContainer::add(Component *com)
bool ComponentContainer::remove(const std::string& name)
bool ComponentContainer::remove(Component *com)
void ComponentContainer::removeAll()
void ComponentContainer::alloc(void)
void ComponentContainer::visit(float delta)
bool ComponentContainer::isEmpty() const
void ComponentContainer::onEnter()
void ComponentContainer::onExit()
DrawNode* DrawNode::create()
void DrawNode::ensureCapacity(int count)
void DrawNode::ensureCapacityGLPoint(int count)
void DrawNode::ensureCapacityGLLine(int count)
bool DrawNode::init()
void DrawNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void DrawNode::onDraw(const Mat4 &transform, uint32_t flags)
void DrawNode::onDrawGLLine(const Mat4 &transform, uint32_t flags)
void DrawNode::onDrawGLPoint(const Mat4 &transform, uint32_t flags)
void DrawNode::drawPoint(const Vec2& position, const float pointSize, const Color4F &color)
void DrawNode::drawPoints(const Vec2 *position, unsigned int numberOfPoints, const Color4F &color)
void DrawNode::drawPoints(const Vec2 *position, unsigned int numberOfPoints, const float pointSize, const Color4F &color)
void DrawNode::drawLine(const Vec2 &origin, const Vec2 &destination, const Color4F &color)
void DrawNode::drawRect(const Vec2 &origin, const Vec2 &destination, const Color4F &color)
void DrawNode::drawPoly(const Vec2 *poli, unsigned int numberOfPoints, bool closePolygon, const Color4F &color)
void DrawNode::drawCircle(const Vec2& center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY, const Color4F &color)
void DrawNode::drawCircle(const Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, const Color4F &color)
void DrawNode::drawQuadBezier(const Vec2 &origin, const Vec2 &control, const Vec2 &destination, unsigned int segments, const Color4F &color)
void DrawNode::drawCubicBezier(const Vec2 &origin, const Vec2 &control1, const Vec2 &control2, const Vec2 &destination, unsigned int segments, const Color4F &color)
void DrawNode::drawCardinalSpline(PointArray *config, float tension,  unsigned int segments, const Color4F &color)
void DrawNode::drawCatmullRom(PointArray *points, unsigned int segments, const Color4F &color)
void DrawNode::drawDot(const Vec2 &pos, float radius, const Color4F &color)
void DrawNode::drawRect(const Vec2 &p1, const Vec2 &p2, const Vec2 &p3, const Vec2& p4, const Color4F &color)
void DrawNode::drawSegment(const Vec2 &from, const Vec2 &to, float radius, const Color4F &color)
void DrawNode::drawPolygon(const Vec2 *verts, int count, const Color4F &fillColor, float borderWidth, const Color4F &borderColor)
void DrawNode::drawSolidRect(const Vec2 &origin, const Vec2 &destination, const Color4F &color)
void DrawNode::drawSolidPoly(const Vec2 *poli, unsigned int numberOfPoints, const Color4F &color)
void DrawNode::drawSolidCircle(const Vec2& center, float radius, float angle, unsigned int segments, float scaleX, float scaleY, const Color4F &color)
void DrawNode::drawSolidCircle( const Vec2& center, float radius, float angle, unsigned int segments, const Color4F& color)
void DrawNode::drawTriangle(const Vec2 &p1, const Vec2 &p2, const Vec2 &p3, const Color4F &color)
void DrawNode::drawQuadraticBezier(const Vec2& from, const Vec2& control, const Vec2& to, unsigned int segments, const Color4F &color)
void DrawNode::clear()
const BlendFunc& DrawNode::getBlendFunc() const
void DrawNode::setBlendFunc(const BlendFunc &blendFunc)
void DrawNode::setLineWidth(int lineWidth)
TMXLayer * TMXLayer::create(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)
bool TMXLayer::initWithTilesetInfo(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)
void TMXLayer::draw(Renderer *renderer, const Mat4& transform, uint32_t flags)
void TMXLayer::onDraw(Primitive *primitive)
void TMXLayer::updateTiles(const Rect& culledRect)
void TMXLayer::updateVertexBuffer()
void TMXLayer::updateIndexBuffer()
void TMXLayer::setupTiles()
Mat4 TMXLayer::tileToNodeTransform()
void TMXLayer::updatePrimitives()
void TMXLayer::updateTotalQuads()
Sprite* TMXLayer::getTileAt(const Vec2& tileCoordinate)
int TMXLayer::getTileGIDAt(const Vec2& tileCoordinate, TMXTileFlags* flags/* = nullptr*/)
Vec2 TMXLayer::getPositionAt(const Vec2& pos)
int TMXLayer::getVertexZForPos(const Vec2& pos)
void TMXLayer::removeTileAt(const Vec2& tileCoordinate)
void TMXLayer::setFlaggedTileGIDByIndex(int index, int gid)
void TMXLayer::removeChild(Node* node, bool cleanup)
Value TMXLayer::getProperty(const std::string& propertyName) const
void TMXLayer::parseInternalProperties()
Vec2 TMXLayer::calculateLayerOffset(const Vec2& pos)
void TMXLayer::setTileGID(int gid, const Vec2& tileCoordinate)
void TMXLayer::setTileGID(int gid, const Vec2& tileCoordinate, TMXTileFlags flags)
void TMXLayer::setupTileSprite(Sprite* sprite, Vec2 pos, int gid)
std::string TMXLayer::getDescription() const
TMXTiledMap * TMXTiledMap::create(const std::string& tmxFile)
TMXTiledMap* TMXTiledMap::createWithXML(const std::string& tmxString, const std::string& resourcePath)
bool TMXTiledMap::initWithTMXFile(const std::string& tmxFile)
bool TMXTiledMap::initWithXML(const std::string& tmxString, const std::string& resourcePath)
TMXLayer * TMXTiledMap::parseLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)
TMXTilesetInfo * TMXTiledMap::tilesetForLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)
void TMXTiledMap::buildWithMapInfo(TMXMapInfo* mapInfo)
TMXLayer * TMXTiledMap::getLayer(const std::string& layerName) const
TMXObjectGroup * TMXTiledMap::getObjectGroup(const std::string& groupName) const
Value TMXTiledMap::getProperty(const std::string& propertyName) const
Value TMXTiledMap::getPropertiesForGID(int GID) const
std::string TMXTiledMap::getDescription() const
void FontAtlas::relaseTextures()
void FontAtlas::purgeTexturesAtlas()
void FontAtlas::listenRendererRecreated(EventCustom *event)
void FontAtlas::addLetterDefinition(char16_t utf16Char, const FontLetterDefinition &letterDefinition)
bool FontAtlas::getLetterDefinitionForChar(char16_t utf16Char, FontLetterDefinition &letterDefinition)
void FontAtlas::conversionU16TOGB2312(const std::u16string& u16Text, std::unordered_map<unsigned short, unsigned short>& charCodeMap)
void FontAtlas::findNewCharacters(const std::u16string& u16Text, std::unordered_map<unsigned short, unsigned short>& charCodeMap)
bool FontAtlas::prepareLetterDefinitions(const std::u16string& utf16Text)
void FontAtlas::addTexture(Texture2D *texture, int slot)
Texture2D* FontAtlas::getTexture(int slot)
void  FontAtlas::setLineHeight(float newHeight)
void FontAtlas::setAliasTexParameters()
void FontAtlas::setAntiAliasTexParameters()
void FontAtlasCache::purgeCachedData()
FontAtlas* FontAtlasCache::getFontAtlasTTF(const _ttfConfig* config)
FontAtlas* FontAtlasCache::getFontAtlasFNT(const std::string& fontFileName, const Vec2& imageOffset /* = Vec2::ZERO */)
FontAtlas* FontAtlasCache::getFontAtlasCharMap(const std::string& plistFile)
FontAtlas* FontAtlasCache::getFontAtlasCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)
FontAtlas* FontAtlasCache::getFontAtlasCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)
std::string FontAtlasCache::generateFontName(const std::string& fontFileName, int size, bool useDistanceField)
bool FontAtlasCache::releaseFontAtlas(FontAtlas *atlas)
FontCharMap * FontCharMap::create(const std::string& plistFile)
FontCharMap* FontCharMap::create(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)
FontCharMap* FontCharMap::create(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)
int* FontCharMap::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const
FontAtlas * FontCharMap::createFontAtlas()
inline void setAtlasName(const std::string& atlasName)
BMFontConfiguration* FNTConfigLoadFile(const std::string& fntFile)
BMFontConfiguration * BMFontConfiguration::create(const std::string& FNTfile)
bool BMFontConfiguration::initWithFNTfile(const std::string& FNTfile)
std::set<unsigned int>* BMFontConfiguration::getCharacterSet() const
std::string BMFontConfiguration::description(void) const
void BMFontConfiguration::purgeKerningDictionary()
void BMFontConfiguration::purgeFontDefDictionary()
std::set<unsigned int>* BMFontConfiguration::parseConfigFile(const std::string& controlFile)
std::set<unsigned int>* BMFontConfiguration::parseBinaryConfigFile(unsigned char* pData, unsigned long size, const std::string& controlFile)
void BMFontConfiguration::parseImageFileName(const char* line, const std::string& fntFile)
void BMFontConfiguration::parseInfoArguments(const char* line)
void BMFontConfiguration::parseCommonArguments(const char* line)
void BMFontConfiguration::parseCharacterDefinition(const char* line, BMFontDef *characterDefinition)
void BMFontConfiguration::parseKerningEntry(const char* line)
FontFNT * FontFNT::create(const std::string& fntFilePath, const Vec2& imageOffset /* = Vec2::ZERO */)
void FontFNT::purgeCachedData()
int * FontFNT::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const
int  FontFNT::getHorizontalKerningForChars(unsigned short firstChar, unsigned short secondChar) const
FontAtlas * FontFNT::createFontAtlas()
FontFreeType * FontFreeType::create(const std::string &fontName, int fontSize, GlyphCollection glyphs, const char *customGlyphs,bool distanceFieldEnabled /* = false */,int outline /* = 0 */)
bool FontFreeType::initFreeType()
void FontFreeType::shutdownFreeType()
FT_Library FontFreeType::getFTLibrary()
bool FontFreeType::createFontObject(const std::string &fontName, int fontSize)
FontAtlas * FontFreeType::createFontAtlas()
int * FontFreeType::getHorizontalKerningForTextUTF16(const std::u16string& text, int &outNumLetters) const
int  FontFreeType::getHorizontalKerningForChars(unsigned short firstChar, unsigned short secondChar) const
int FontFreeType::getFontAscender() const
unsigned char* FontFreeType::getGlyphBitmap(unsigned short theChar, long &outWidth, long &outHeight, Rect &outRect,int &xAdvance)
unsigned char * FontFreeType::getGlyphBitmapWithOutline(unsigned short theChar, FT_BBox &bbox)
void FontFreeType::renderCharAt(unsigned char *dest,int posX, int posY, unsigned char* bitmap,long bitmapWidth,long bitmapHeight)
void FontFreeType::setGlyphCollection(GlyphCollection glyphs, const char* customGlyphs /* = nullptr */)
const char* FontFreeType::getGlyphCollection() const
void GLBufferedNode::setGLBufferData(void *buf, GLuint bufSize, int slot)
void GLBufferedNode::setGLIndexData(void *buf, GLuint bufSize, int slot)
void Grabber::grab(Texture2D *texture)
void Grabber::beforeRender(Texture2D *texture)
void Grabber::afterRender(cocos2d::Texture2D *texture)
GridBase* GridBase::create(const Size& gridSize)
GridBase* GridBase::create(const Size& gridSize, Texture2D *texture, bool flipped)
bool GridBase::initWithSize(const Size& gridSize)
bool GridBase::initWithSize(const cocos2d::Size &gridSize, const cocos2d::Rect &rect)
bool GridBase::initWithSize(const Size& gridSize, Texture2D *texture, bool flipped)
bool GridBase::initWithSize(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)
void GridBase::setActive(bool active)
void GridBase::setTextureFlipped(bool flipped)
void GridBase::set2DProjection()
void GridBase::setGridRect(const cocos2d::Rect &rect)
void GridBase::beforeDraw(void)
void GridBase::afterDraw(cocos2d::Node *target)
void GridBase::blit(void)
void GridBase::reuse(void)
void GridBase::calculateVertexPoints(void)
Grid3D* Grid3D::create(const Size& gridSize)
Grid3D* Grid3D::create(const Size& gridSize, const Rect& rect)
Grid3D* Grid3D::create(const Size& gridSize, Texture2D *texture, bool flipped)
Grid3D* Grid3D::create(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)
void Grid3D::beforeBlit()
void Grid3D::afterBlit()
void Grid3D::blit(void)
void Grid3D::calculateVertexPoints(void)
Vec3 Grid3D::getVertex(const Vec2& pos) const
Vec3 Grid3D::getOriginalVertex(const Vec2& pos) const
void Grid3D::setVertex(const Vec2& pos, const Vec3& vertex)
void Grid3D::reuse(void)
TiledGrid3D* TiledGrid3D::create(const Size& gridSize)
TiledGrid3D* TiledGrid3D::create(const Size& gridSize, const Rect& rect)
TiledGrid3D* TiledGrid3D::create(const Size& gridSize, Texture2D *texture, bool flipped, const Rect& rect)
TiledGrid3D* TiledGrid3D::create(const Size& gridSize, Texture2D *texture, bool flipped)
void TiledGrid3D::blit(void)
void TiledGrid3D::calculateVertexPoints(void)
void TiledGrid3D::setTile(const Vec2& pos, const Quad3& coords)
Quad3 TiledGrid3D::getOriginalTile(const Vec2& pos) const
Quad3 TiledGrid3D::getTile(const Vec2& pos) const
void TiledGrid3D::reuse(void)
Label* Label::create()
Label* Label::create(const std::string& text, const std::string& font, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)
Label* Label::createWithSystemFont(const std::string& text, const std::string& font, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)
Label* Label::createWithTTF(const std::string& text, const std::string& fontFile, float fontSize, const Size& dimensions /* = Size::ZERO */, TextHAlignment hAlignment /* = TextHAlignment::LEFT */, TextVAlignment vAlignment /* = TextVAlignment::TOP */)
Label* Label::createWithTTF(const TTFConfig& ttfConfig, const std::string& text, TextHAlignment hAlignment /* = TextHAlignment::CENTER */, int maxLineWidth /* = 0 */)
Label* Label::createWithBMFont(const std::string& bmfontFilePath, const std::string& text,const TextHAlignment& hAlignment /* = TextHAlignment::LEFT */, int maxLineWidth /* = 0 */, const Vec2& imageOffset /* = Vec2::ZERO */)
Label* Label::createWithCharMap(const std::string& plistFile)
Label* Label::createWithCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)
Label* Label::createWithCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)
bool Label::setCharMap(const std::string& plistFile)
bool Label::setCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)
bool Label::setCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)
void Label::reset()
void Label::updateShaderProgram()
void Label::setFontAtlas(FontAtlas* atlas,bool distanceFieldEnabled /* = false */, bool useA8Shader /* = false */)
bool Label::setTTFConfig(const TTFConfig& ttfConfig)
bool Label::setBMFontFilePath(const std::string& bmfontFilePath, const Vec2& imageOffset /* = Vec2::ZERO */)
void Label::setString(const std::string& text)
void Label::setAlignment(TextHAlignment hAlignment,TextVAlignment vAlignment)
void Label::setMaxLineWidth(float maxLineWidth)
void Label::setDimensions(float width, float height)
void Label::setLineBreakWithoutSpace(bool breakWithoutSpace)
void Label::updateLabelLetters()
void Label::alignText()
bool Label::computeHorizontalKernings(const std::u16string& stringToRender)
void Label::updateQuads()
void Label::enableGlow(const Color4B& glowColor)
void Label::enableOutline(const Color4B& outlineColor,int outlineSize /* = -1 */)
void Label::enableShadow(const Color4B& shadowColor /* = Color4B::BLACK */,const Size &offset /* = Size(2 ,-2)*/, int blurRadius /* = 0 */)
void Label::disableEffect()
void Label::disableEffect(LabelEffect effect)
void Label::createSpriteForSystemFont(const FontDefinition& fontDef)
void Label::createShadowSpriteForSystemFont(const FontDefinition& fontDef)
void Label::setCameraMask(unsigned short mask, bool applyChildren)
void Label::setFontDefinition(const FontDefinition& textDefinition)
void Label::updateContent()
void Label::onDrawShadow(GLProgram* glProgram)
void Label::onDraw(const Mat4& transform, bool transformUpdated)
void Label::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void Label::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void Label::drawSelf(bool visibleByCamera, Renderer* renderer, uint32_t flags)
void Label::setSystemFontName(const std::string& systemFont)
void Label::setSystemFontSize(float fontSize)
Sprite* Label::getLetter(int letterIndex)
void Label::setLineHeight(float height)
float Label::getLineHeight() const
void Label::setAdditionalKerning(float space)
float Label::getAdditionalKerning() const
void Label::computeStringNumLines()
int Label::getStringNumLines()
int Label::getStringLength()
void Label::setOpacityModifyRGB(bool isOpacityModifyRGB)
void Label::updateDisplayedColor(const Color3B& parentColor)
void Label::updateDisplayedOpacity(GLubyte parentOpacity)
void Label::setTextColor(const Color4B &color)
void Label::updateColor()
std::string Label::getDescription() const
const Size& Label::getContentSize() const
Rect Label::getBoundingBox() const
void Label::setBlendFunc(const BlendFunc &blendFunc)
void Label::removeAllChildrenWithCleanup(bool cleanup)
void Label::removeChild(Node* child, bool cleanup /* = true */)
FontDefinition Label::_getFontDefinition() const
void Label::setGlobalZOrder(float globalZOrder)
LabelAtlas* LabelAtlas::create()
LabelAtlas* LabelAtlas::create(const std::string& string, const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)
bool LabelAtlas::initWithString(const std::string& string, const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)
bool LabelAtlas::initWithString(const std::string& string, Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)
LabelAtlas* LabelAtlas::create(const std::string& string, const std::string& fntFile)
bool LabelAtlas::initWithString(const std::string& theString, const std::string& fntFile)
void LabelAtlas::updateAtlasValues()
void LabelAtlas::setString(const std::string &label)
const std::string& LabelAtlas::getString(void) const
void LabelAtlas::updateColor()
void LabelAtlas::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
std::string LabelAtlas::getDescription() const
LabelBMFont * LabelBMFont::create()
LabelBMFont *LabelBMFont::create(const std::string& str, const std::string& fntFile, float width /* = 0 */, TextHAlignment alignment /* = TextHAlignment::LEFT */,const Vec2& imageOffset /* = Vec2::ZERO */)
bool LabelBMFont::initWithString(const std::string& str, const std::string& fntFile, float width /* = 0 */, TextHAlignment alignment /* = TextHAlignment::LEFT */,const Vec2& imageOffset /* = Vec2::ZERO */)
void LabelBMFont::setString(const std::string &newString)
const std::string& LabelBMFont::getString() const
void LabelBMFont::setOpacityModifyRGB(bool var)
bool LabelBMFont::isOpacityModifyRGB() const
void LabelBMFont::setAlignment(TextHAlignment alignment)
void LabelBMFont::setWidth(float width)
void LabelBMFont::setLineBreakWithoutSpace( bool breakWithoutSpace )
void LabelBMFont::setFntFile(const std::string& fntFile, const Vec2& imageOffset /* = Vec2::ZERO */)
const std::string& LabelBMFont::getFntFile() const
std::string LabelBMFont::getDescription() const
void LabelBMFont::setBlendFunc(const BlendFunc &blendFunc)
const BlendFunc &LabelBMFont::getBlendFunc() const
Node* LabelBMFont::getChildByTag(int tag) const
Sprite* LabelBMFont::getLetter(int ID)
void LabelBMFont::setColor(const Color3B& color)
const Size& LabelBMFont::getContentSize() const
Rect LabelBMFont::getBoundingBox() const
void LabelBMFont::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void Label::computeAlignmentOffset()
static int getFirstWordLen(const std::u16string& utf16Text, int startIndex, int textLen)
bool Label::multilineTextWrapByWord()
bool Label::multilineTextWrapByChar()
void Label::recordLetterInfo(const cocos2d::Vec2& point, char16_t utf16Char, int letterIndex, int lineIndex)
void Label::recordPlaceholderInfo(int letterIndex, char16_t utf16Char)
LabelTTF * LabelTTF::create()
LabelTTF * LabelTTF::createWithFontDefinition(const std::string& string, FontDefinition &textDefinition)
bool LabelTTF::initWithStringAndTextDefinition(const std::string& string, FontDefinition &textDefinition)
void LabelTTF::setString(const std::string &string)
const std::string& LabelTTF::getString() const
std::string LabelTTF::getDescription() const
TextHAlignment LabelTTF::getHorizontalAlignment() const
void LabelTTF::setHorizontalAlignment(TextHAlignment alignment)
TextVAlignment LabelTTF::getVerticalAlignment() const
void LabelTTF::setVerticalAlignment(TextVAlignment verticalAlignment)
const Size& LabelTTF::getDimensions() const
void LabelTTF::setDimensions(const Size &dim)
float LabelTTF::getFontSize() const
void LabelTTF::setFontSize(float fontSize)
const std::string& LabelTTF::getFontName() const
void LabelTTF::setFontName(const std::string& fontName)
void LabelTTF::enableShadow(const Size &shadowOffset, float shadowOpacity, float shadowBlur, bool updateTexture)
void LabelTTF::disableShadow(bool updateTexture)
void LabelTTF::enableStroke(const Color3B &strokeColor, float strokeSize, bool updateTexture)
void LabelTTF::disableStroke(bool updateTexture)
void LabelTTF::setFontFillColor(const Color3B &tintColor, bool updateTexture)
void LabelTTF::setTextDefinition(const FontDefinition& theDefinition)
const FontDefinition& LabelTTF::getTextDefinition()
void LabelTTF::setBlendFunc(const BlendFunc &blendFunc)
const BlendFunc &LabelTTF::getBlendFunc() const
void LabelTTF::setFlippedX(bool flippedX)
void LabelTTF::setFlippedY(bool flippedY)
void LabelTTF::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
const Size& LabelTTF::getContentSize() const
Rect LabelTTF::getBoundingBox() const
bool Layer::init()
Layer *Layer::create()
int Layer::executeScriptTouchHandler(EventTouch::EventCode eventType, Touch* touch, Event* event)
int Layer::executeScriptTouchesHandler(EventTouch::EventCode eventType, const std::vector<Touch*>& touches, Event* event)
bool Layer::isTouchEnabled() const
void Layer::setTouchEnabled(bool enabled)
void Layer::setTouchMode(Touch::DispatchMode mode)
void Layer::setSwallowsTouches(bool swallowsTouches)
Touch::DispatchMode Layer::getTouchMode() const
bool Layer::isSwallowsTouches() const
bool Layer::isAccelerometerEnabled() const
void Layer::setAccelerometerEnabled(bool enabled)
void Layer::setAccelerometerInterval(double interval)
void Layer::onAcceleration(Acceleration* acc, Event* unused_event)
void Layer::onKeyPressed(EventKeyboard::KeyCode keyCode, Event* unused_event)
void Layer::onKeyReleased(EventKeyboard::KeyCode keyCode, Event* unused_event)
bool Layer::isKeyboardEnabled() const
void Layer::setKeyboardEnabled(bool enabled)
void Layer::setKeypadEnabled(bool enabled)
bool Layer::onTouchBegan(Touch *touch, Event *event)
void Layer::onTouchMoved(Touch *touch, Event *event)
void Layer::onTouchEnded(Touch *touch, Event *event)
void Layer::onTouchCancelled(Touch *touch, Event *event)
void Layer::onTouchesBegan(const std::vector<Touch*>& touches, Event *event)
void Layer::onTouchesMoved(const std::vector<Touch*>& touches, Event *event)
void Layer::onTouchesEnded(const std::vector<Touch*>& touches, Event *event)
void Layer::onTouchesCancelled(const std::vector<Touch*>& touches, Event *event)
std::string Layer::getDescription() const
const BlendFunc &LayerColor::getBlendFunc() const
void LayerColor::setBlendFunc(const BlendFunc &var)
LayerColor* LayerColor::create()
LayerColor * LayerColor::create(const Color4B& color, GLfloat width, GLfloat height)
LayerColor * LayerColor::create(const Color4B& color)
bool LayerColor::init()
bool LayerColor::initWithColor(const Color4B& color, GLfloat w, GLfloat h)
bool LayerColor::initWithColor(const Color4B& color)
void LayerColor::setContentSize(const Size & size)
void LayerColor::changeWidthAndHeight(GLfloat w ,GLfloat h)
void LayerColor::changeWidth(GLfloat w)
void LayerColor::changeHeight(GLfloat h)
void LayerColor::updateColor()
void LayerColor::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void LayerColor::onDraw(const Mat4& transform, uint32_t flags)
std::string LayerColor::getDescription() const
LayerGradient* LayerGradient::create(const Color4B& start, const Color4B& end)
LayerGradient* LayerGradient::create(const Color4B& start, const Color4B& end, const Vec2& v)
LayerGradient* LayerGradient::create()
bool LayerGradient::init()
bool LayerGradient::initWithColor(const Color4B& start, const Color4B& end)
bool LayerGradient::initWithColor(const Color4B& start, const Color4B& end, const Vec2& v)
void LayerGradient::updateColor()
const Color3B& LayerGradient::getStartColor() const
void LayerGradient::setStartColor(const Color3B& color)
void LayerGradient::setEndColor(const Color3B& color)
const Color3B& LayerGradient::getEndColor() const
void LayerGradient::setStartOpacity(GLubyte o)
GLubyte LayerGradient::getStartOpacity() const
void LayerGradient::setEndOpacity(GLubyte o)
GLubyte LayerGradient::getEndOpacity() const
void LayerGradient::setVector(const Vec2& var)
const Vec2& LayerGradient::getVector() const
bool LayerGradient::isCompressedInterpolation() const
void LayerGradient::setCompressedInterpolation(bool compress)
std::string LayerGradient::getDescription() const
LayerMultiplex * LayerMultiplex::createVariadic(Layer * layer, ...)
LayerMultiplex * LayerMultiplex::create(Layer * layer, ...)
LayerMultiplex * LayerMultiplex::createWithLayer(Layer* layer)
LayerMultiplex* LayerMultiplex::create()
LayerMultiplex* LayerMultiplex::createWithArray(const Vector<Layer*>& arrayOfLayers)
void LayerMultiplex::addLayer(Layer* layer)
bool LayerMultiplex::init()
bool LayerMultiplex::initWithLayers(Layer *layer, va_list params)
bool LayerMultiplex::initWithArray(const Vector<Layer*>& arrayOfLayers)
void LayerMultiplex::switchTo(int n)
void LayerMultiplex::switchToAndReleaseMe(int n)
std::string LayerMultiplex::getDescription() const
void BaseLight::setIntensity(float intensity)
void BaseLight::onEnter()
void BaseLight::onExit()
void BaseLight::setRotationFromDirection( const Vec3 &direction )
DirectionLight* DirectionLight::create(const Vec3 &direction, const Color3B &color)
void DirectionLight::setDirection(const Vec3 &dir)
Vec3 DirectionLight::getDirection() const
Vec3 DirectionLight::getDirectionInWorld() const
PointLight* PointLight::create(const Vec3 &position, const Color3B &color, float range)
SpotLight* SpotLight::create(const Vec3 &direction, const Vec3 &position, const Color3B &color, float innerAngle, float outerAngle, float range)
void SpotLight::setDirection(const Vec3 &dir)
Vec3 SpotLight::getDirection() const
Vec3 SpotLight::getDirectionInWorld() const
void SpotLight::setInnerAngle(float angle)
void SpotLight::setOuterAngle(float angle)
AmbientLight* AmbientLight::create( const Color3B &color )
Menu* Menu::create()
Menu * Menu::variadicCreate(MenuItem* item, ...)
Menu * Menu::create(MenuItem* item, ...)
Menu* Menu::createWithArray(const Vector<MenuItem*>& arrayOfItems)
Menu* Menu::createWithItems(MenuItem* item, va_list args)
Menu* Menu::createWithItem(MenuItem* item)
bool Menu::init()
bool Menu::initWithArray(const Vector<MenuItem*>& arrayOfItems)
void Menu::addChild(Node * child)
void Menu::addChild(Node * child, int zOrder)
void Menu::addChild(Node * child, int zOrder, int tag)
void Menu::addChild(Node * child, int zOrder, const std::string &name)
void Menu::onEnter()
void Menu::onExit()
void Menu::removeChild(Node* child, bool cleanup)
bool Menu::onTouchBegan(Touch* touch, Event* event)
void Menu::onTouchEnded(Touch* touch, Event* event)
void Menu::onTouchCancelled(Touch* touch, Event* event)
void Menu::onTouchMoved(Touch* touch, Event* event)
void Menu::alignItemsVertically()
void Menu::alignItemsVerticallyWithPadding(float padding)
void Menu::alignItemsHorizontally(void)
void Menu::alignItemsHorizontallyWithPadding(float padding)
void Menu::alignItemsInColumns(int columns, ...)
void Menu::alignItemsInColumns(int columns, va_list args)
void Menu::alignItemsInColumnsWithArray(const ValueVector& rows)
void Menu::alignItemsInRows(int rows, ...)
void Menu::alignItemsInRows(int rows, va_list args)
void Menu::alignItemsInRowsWithArray(const ValueVector& columns)
MenuItem* Menu::getItemForTouch(Touch *touch, const Camera *camera)
std::string Menu::getDescription() const
MenuItem* MenuItem::create()
MenuItem* MenuItem::create(Ref *target, SEL_MenuHandler selector)
MenuItem* MenuItem::create( const ccMenuCallback& callback)
bool MenuItem::initWithTarget(cocos2d::Ref *target, SEL_MenuHandler selector )
bool MenuItem::initWithCallback(const ccMenuCallback& callback)
void MenuItem::selected()
void MenuItem::unselected()
void MenuItem::activate()
void MenuItem::setEnabled(bool enabled)
bool MenuItem::isEnabled() const
Rect MenuItem::rect() const
bool MenuItem::isSelected() const
void MenuItem::setTarget(Ref *target, SEL_MenuHandler selector)
void MenuItem::setCallback(const ccMenuCallback& callback)
std::string MenuItem::getDescription() const
void MenuItemLabel::setLabel(Node* var)
MenuItemLabel * MenuItemLabel::create(Node*label, Ref* target, SEL_MenuHandler selector)
MenuItemLabel * MenuItemLabel::create(Node*label, const ccMenuCallback& callback)
MenuItemLabel* MenuItemLabel::create(Node *label)
bool MenuItemLabel::initWithLabel(Node* label, Ref* target, SEL_MenuHandler selector)
bool MenuItemLabel::initWithLabel(Node* label, const ccMenuCallback& callback)
void MenuItemLabel::setString(const std::string& label)
void MenuItemLabel::activate()
void MenuItemLabel::selected()
void MenuItemLabel::unselected()
void MenuItemLabel::setEnabled(bool enabled)
MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap)
MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, Ref* target, SEL_MenuHandler selector)
MenuItemAtlasFont * MenuItemAtlasFont::create(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, const ccMenuCallback& callback)
bool MenuItemAtlasFont::initWithString(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, Ref* target, SEL_MenuHandler selector)
bool MenuItemAtlasFont::initWithString(const std::string& value, const std::string& charMapFile, int itemWidth, int itemHeight, char startCharMap, const ccMenuCallback& callback)
void MenuItemFont::setFontSize(int s)
int MenuItemFont::getFontSize()
void MenuItemFont::setFontName(const std::string& name)
const std::string& MenuItemFont::getFontName()
MenuItemFont * MenuItemFont::create(const std::string& value, Ref* target, SEL_MenuHandler selector)
MenuItemFont * MenuItemFont::create(const std::string& value, const ccMenuCallback& callback)
MenuItemFont * MenuItemFont::create(const std::string& value)
bool MenuItemFont::initWithString(const std::string& value, Ref* target, SEL_MenuHandler selector)
bool MenuItemFont::initWithString(const std::string& value, const ccMenuCallback& callback)
void MenuItemFont::setFontSizeObj(int s)
int MenuItemFont::getFontSizeObj() const
void MenuItemFont::setFontNameObj(const std::string& name)
const std::string& MenuItemFont::getFontNameObj() const
void MenuItemSprite::setNormalImage(Node* image)
void MenuItemSprite::setSelectedImage(Node* image)
void MenuItemSprite::setDisabledImage(Node* image)
MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, Node* disabledSprite)
MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, Ref* target, SEL_MenuHandler selector)
MenuItemSprite * MenuItemSprite::create(Node* normalSprite, Node* selectedSprite, const ccMenuCallback& callback)
MenuItemSprite * MenuItemSprite::create(Node *normalSprite, Node *selectedSprite, Node *disabledSprite, Ref *target, SEL_MenuHandler selector)
MenuItemSprite * MenuItemSprite::create(Node *normalSprite, Node *selectedSprite, Node *disabledSprite, const ccMenuCallback& callback)
bool MenuItemSprite::initWithNormalSprite(Node* normalSprite, Node* selectedSprite, Node* disabledSprite, Ref* target, SEL_MenuHandler selector)
bool MenuItemSprite::initWithNormalSprite(Node* normalSprite, Node* selectedSprite, Node* disabledSprite, const ccMenuCallback& callback)
void MenuItemSprite::selected()
void MenuItemSprite::unselected()
void MenuItemSprite::setEnabled(bool bEnabled)
void MenuItemSprite::updateImagesVisibility()
MenuItemImage* MenuItemImage::create()
bool MenuItemImage::init(void)
MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage)
MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, Ref* target, SEL_MenuHandler selector)
MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const ccMenuCallback& callback)
MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, Ref* target, SEL_MenuHandler selector)
MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, const ccMenuCallback& callback)
MenuItemImage * MenuItemImage::create(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage)
bool MenuItemImage::initWithNormalImage(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, Ref* target, SEL_MenuHandler selector)
bool MenuItemImage::initWithNormalImage(const std::string& normalImage, const std::string& selectedImage, const std::string& disabledImage, const ccMenuCallback& callback)
void MenuItemImage::setNormalSpriteFrame(SpriteFrame * frame)
void MenuItemImage::setSelectedSpriteFrame(SpriteFrame * frame)
void MenuItemImage::setDisabledSpriteFrame(SpriteFrame * frame)
MenuItemToggle * MenuItemToggle::createWithTarget(Ref* target, SEL_MenuHandler selector, const Vector<MenuItem*>& menuItems)
MenuItemToggle * MenuItemToggle::createWithCallback(const ccMenuCallback &callback, const Vector<MenuItem*>& menuItems)
MenuItemToggle * MenuItemToggle::createWithTarget(Ref* target, SEL_MenuHandler selector, MenuItem* item, ...)
MenuItemToggle * MenuItemToggle::createWithCallbackVA(const ccMenuCallback &callback, MenuItem* item, ...)
MenuItemToggle * MenuItemToggle::createWithCallback(const ccMenuCallback &callback, MenuItem* item, ...)
MenuItemToggle * MenuItemToggle::create()
bool MenuItemToggle::initWithTarget(Ref* target, SEL_MenuHandler selector, MenuItem* item, va_list args)
bool MenuItemToggle::initWithCallback(const ccMenuCallback &callback, MenuItem *item, va_list args)
MenuItemToggle* MenuItemToggle::create(MenuItem *item)
bool MenuItemToggle::initWithItem(MenuItem *item)
void MenuItemToggle::addSubItem(MenuItem *item)
void MenuItemToggle::setSelectedIndex(unsigned int index)
void MenuItemToggle::selected()
void MenuItemToggle::unselected()
void MenuItemToggle::activate()
void MenuItemToggle::setEnabled(bool enabled)
MenuItem* MenuItemToggle::getSelectedItem()
MotionStreak* MotionStreak::create(float fade, float minSeg, float stroke, const Color3B& color, const std::string& path)
MotionStreak* MotionStreak::create(float fade, float minSeg, float stroke, const Color3B& color, Texture2D* texture)
bool MotionStreak::initWithFade(float fade, float minSeg, float stroke, const Color3B& color, const std::string& path)
bool MotionStreak::initWithFade(float fade, float minSeg, float stroke, const Color3B& color, Texture2D* texture)
void MotionStreak::setPosition(const Vec2& position)
void MotionStreak::setPosition(float x, float y)
const Vec2& MotionStreak::getPosition() const
void MotionStreak::getPosition(float* x, float* y) const
float MotionStreak::getPositionX() const
Vec3 MotionStreak::getPosition3D() const
void MotionStreak::setPositionX(float x)
float MotionStreak::getPositionY() const
void MotionStreak::setPositionY(float y)
void MotionStreak::tintWithColor(const Color3B& colors)
Texture2D* MotionStreak::getTexture(void) const
void MotionStreak::setTexture(Texture2D *texture)
void MotionStreak::setBlendFunc(const BlendFunc &blendFunc)
const BlendFunc& MotionStreak::getBlendFunc(void) const
void MotionStreak::setOpacity(GLubyte opacity)
GLubyte MotionStreak::getOpacity(void) const
void MotionStreak::setOpacityModifyRGB(bool bValue)
bool MotionStreak::isOpacityModifyRGB(void) const
void MotionStreak::update(float delta)
void MotionStreak::reset()
void MotionStreak::onDraw(const Mat4 &transform, uint32_t flags)
void MotionStreak::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
Node * Node::create()
bool Node::init()
void Node::cleanup()
std::string Node::getDescription() const
float Node::getSkewX() const
void Node::setSkewX(float skewX)
float Node::getSkewY() const
void Node::setSkewY(float skewY)
void Node::setLocalZOrder(int z)
void Node::_setLocalZOrder(int z)
void Node::setGlobalZOrder(float globalZOrder)
float Node::getRotation() const
void Node::setRotation(float rotation)
float Node::getRotationSkewX() const
void Node::setRotation3D(const Vec3& rotation)
Vec3 Node::getRotation3D() const
void Node::updateRotationQuat()
void Node::updateRotation3D()
void Node::setRotationQuat(const Quaternion& quat)
Quaternion Node::getRotationQuat() const
void Node::setRotationSkewX(float rotationX)
float Node::getRotationSkewY() const
void Node::setRotationSkewY(float rotationY)
float Node::getScale(void) const
void Node::setScale(float scale)
float Node::getScaleX() const
void Node::setScale(float scaleX,float scaleY)
void Node::setScaleX(float scaleX)
float Node::getScaleY() const
void Node::setScaleZ(float scaleZ)
float Node::getScaleZ() const
void Node::setScaleY(float scaleY)
const Vec2& Node::getPosition() const
void Node::setPosition(const Vec2& position)
void Node::getPosition(float* x, float* y) const
void Node::setPosition(float x, float y)
void Node::setPosition3D(const Vec3& position)
Vec3 Node::getPosition3D() const
float Node::getPositionX() const
void Node::setPositionX(float x)
float Node::getPositionY() const
void Node::setPositionY(float y)
float Node::getPositionZ() const
void Node::setPositionZ(float positionZ)
const Vec2& Node::getNormalizedPosition() const
void Node::setNormalizedPosition(const Vec2& position)
ssize_t Node::getChildrenCount() const
bool Node::isVisible() const
void Node::setVisible(bool visible)
const Vec2& Node::getAnchorPointInPoints() const
const Vec2& Node::getAnchorPoint() const
void Node::setAnchorPoint(const Vec2& point)
const Size& Node::getContentSize() const
void Node::setContentSize(const Size & size)
bool Node::isRunning() const
void Node::setParent(Node * parent)
bool Node::isIgnoreAnchorPointForPosition() const
void Node::ignoreAnchorPointForPosition(bool newValue)
int Node::getTag() const
void Node::setTag(int tag)
std::string Node::getName() const
void Node::setName(const std::string& name)
void Node::setUserData(void *userData)
int Node::getOrderOfArrival() const
void Node::setOrderOfArrival(int orderOfArrival)
void Node::setUserObject(Ref* userObject)
GLProgramState* Node::getGLProgramState() const
void Node::setGLProgramState(cocos2d::GLProgramState* glProgramState)
void Node::setGLProgram(GLProgram* glProgram)
GLProgram * Node::getGLProgram() const
Scene* Node::getScene() const
Rect Node::getBoundingBox() const
void Node::childrenAlloc()
Node* Node::getChildByTag(int tag) const
Node* Node::getChildByName(const std::string& name) const
void Node::enumerateChildren(const std::string &name, std::function<bool (Node *)> callback) const
bool Node::doEnumerateRecursive(const Node* node, const std::string &name, std::function<bool (Node *)> callback) const
bool Node::doEnumerate(std::string name, std::function<bool (Node *)> callback) const
void Node::addChild(Node *child, int localZOrder, int tag)
void Node::addChild(Node* child, int localZOrder, const std::string &name)
void Node::addChildHelper(Node* child, int localZOrder, int tag, const std::string &name, bool setTag)
void Node::addChild(Node *child, int zOrder)
void Node::addChild(Node *child)
void Node::removeFromParent()
void Node::removeFromParentAndCleanup(bool cleanup)
void Node::removeChild(Node* child, bool cleanup /* = true */)
void Node::removeChildByTag(int tag, bool cleanup/* = true */)
void Node::removeChildByName(const std::string &name, bool cleanup)
void Node::removeAllChildren()
void Node::removeFromPhysicsWorld()
void Node::removeAllChildrenWithCleanup(bool cleanup)
void Node::detachChild(Node *child, ssize_t childIndex, bool doCleanup)
void Node::insertChild(Node* child, int z)
void Node::reorderChild(Node *child, int zOrder)
void Node::sortAllChildren()
void Node::draw()
void Node::draw(Renderer* renderer, const Mat4 &transform, uint32_t flags)
void Node::visit()
uint32_t Node::processParentFlags(const Mat4& parentTransform, uint32_t parentFlags)
bool Node::isVisitableByVisitingCamera() const
void Node::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)
Mat4 Node::transform(const Mat4& parentTransform)
void Node::onEnter()
void Node::onEnterTransitionDidFinish()
void Node::onExitTransitionDidStart()
void Node::onExit()
void Node::setEventDispatcher(EventDispatcher* dispatcher)
void Node::setActionManager(ActionManager* actionManager)
Action * Node::runAction(Action* action)
void Node::stopAllActions()
void Node::stopAction(Action* action)
void Node::stopActionByTag(int tag)
void Node::stopAllActionsByTag(int tag)
void Node::stopActionsByFlags(unsigned int flags)
Action * Node::getActionByTag(int tag)
ssize_t Node::getNumberOfRunningActions() const
void Node::setScheduler(Scheduler* scheduler)
bool Node::isScheduled(SEL_SCHEDULE selector)
bool Node::isScheduled(const std::string &key)
void Node::scheduleUpdate()
void Node::scheduleUpdateWithPriority(int priority)
void Node::scheduleUpdateWithPriorityLua(int nHandler, int priority)
void Node::unscheduleUpdate()
void Node::schedule(SEL_SCHEDULE selector)
void Node::schedule(SEL_SCHEDULE selector, float interval)
void Node::schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)
void Node::schedule(const std::function<void(float)> &callback, const std::string &key)
void Node::schedule(const std::function<void(float)> &callback, float interval, const std::string &key)
void Node::schedule(const std::function<void(float)>& callback, float interval, unsigned int repeat, float delay, const std::string &key)
void Node::scheduleOnce(SEL_SCHEDULE selector, float delay)
void Node::scheduleOnce(const std::function<void(float)> &callback, float delay, const std::string &key)
void Node::unschedule(SEL_SCHEDULE selector)
void Node::unschedule(const std::string &key)
void Node::unscheduleAllCallbacks()
void Node::resume()
void Node::pause()
void Node::resumeSchedulerAndActions()
void Node::pauseSchedulerAndActions()
void Node::update(float fDelta)
AffineTransform Node::getNodeToParentAffineTransform() const
Mat4 Node::getNodeToParentTransform(Node* ancestor) const
AffineTransform Node::getNodeToParentAffineTransform(Node* ancestor) const
const Mat4& Node::getNodeToParentTransform() const
void Node::setNodeToParentTransform(const Mat4& transform)
void Node::setAdditionalTransform(const AffineTransform& additionalTransform)
void Node::setAdditionalTransform(Mat4* additionalTransform)
AffineTransform Node::getParentToNodeAffineTransform() const
const Mat4& Node::getParentToNodeTransform() const
AffineTransform Node::getNodeToWorldAffineTransform() const
Mat4 Node::getNodeToWorldTransform() const
AffineTransform Node::getWorldToNodeAffineTransform() const
Mat4 Node::getWorldToNodeTransform() const
Vec2 Node::convertToNodeSpace(const Vec2& worldPoint) const
Vec2 Node::convertToWorldSpace(const Vec2& nodePoint) const
Vec2 Node::convertToNodeSpaceAR(const Vec2& worldPoint) const
Vec2 Node::convertToWorldSpaceAR(const Vec2& nodePoint) const
Vec2 Node::convertToWindowSpace(const Vec2& nodePoint) const
Vec2 Node::convertTouchToNodeSpace(Touch *touch) const
Vec2 Node::convertTouchToNodeSpaceAR(Touch *touch) const
void Node::updateTransform()
Component* Node::getComponent(const std::string& name)
bool Node::addComponent(Component *component)
bool Node::removeComponent(const std::string& name)
bool Node::removeComponent(Component *component)
void Node::removeAllComponents()
void Node::setPhysicsBody(PhysicsBody* body)
void Node::updatePhysicsBodyTransform(const Mat4& parentTransform, uint32_t parentFlags, float parentScaleX, float parentScaleY)
void Node::updateTransformFromPhysics(const Mat4& parentTransform, uint32_t parentFlags)
GLubyte Node::getOpacity(void) const
GLubyte Node::getDisplayedOpacity() const
void Node::setOpacity(GLubyte opacity)
void Node::updateDisplayedOpacity(GLubyte parentOpacity)
bool Node::isCascadeOpacityEnabled(void) const
void Node::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)
void Node::updateCascadeOpacity()
void Node::disableCascadeOpacity()
const Color3B& Node::getColor(void) const
const Color3B& Node::getDisplayedColor() const
void Node::setColor(const Color3B& color)
void Node::updateDisplayedColor(const Color3B& parentColor)
bool Node::isCascadeColorEnabled(void) const
void Node::setCascadeColorEnabled(bool cascadeColorEnabled)
void Node::updateCascadeColor()
void Node::disableCascadeColor()
void Node::setCameraMask(unsigned short mask, bool applyChildren)
NodeGrid* NodeGrid::create()
NodeGrid* NodeGrid::create(const cocos2d::Rect &rect)
void NodeGrid::setTarget(Node* target)
void NodeGrid::onGridBeginDraw()
void NodeGrid::onGridEndDraw()
void NodeGrid::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void NodeGrid::setGrid(GridBase *grid)
ParallaxNode * ParallaxNode::create()
void ParallaxNode::addChild(Node * child, int zOrder, int tag)
void ParallaxNode::addChild(Node * child, int zOrder, const std::string &name)
void ParallaxNode::addChild(Node *child, int z, const Vec2& ratio, const Vec2& offset)
void ParallaxNode::removeChild(Node* child, bool cleanup)
void ParallaxNode::removeAllChildrenWithCleanup(bool cleanup)
Vec2 ParallaxNode::absolutePosition()
void ParallaxNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
ParticleBatchNode* ParticleBatchNode::createWithTexture(Texture2D *tex, int capacity/* = kParticleDefaultCapacity*/)
ParticleBatchNode* ParticleBatchNode::create(const std::string& imageFile, int capacity/* = kParticleDefaultCapacity*/)
bool ParticleBatchNode::initWithTexture(Texture2D *tex, int capacity)
bool ParticleBatchNode::initWithFile(const std::string& fileImage, int capacity)
void ParticleBatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void ParticleBatchNode::addChild(Node * aChild, int zOrder, int tag)
void ParticleBatchNode::addChild(Node * aChild, int zOrder, const std::string &name)
void ParticleBatchNode::addChildByTagOrName(ParticleSystem* child, int zOrder, int tag, const std::string &name, bool setTag)
int ParticleBatchNode::addChildHelper(ParticleSystem* child, int z, int aTag, const std::string &name, bool setTag)
void ParticleBatchNode::reorderChild(Node * aChild, int zOrder)
void ParticleBatchNode::getCurrentIndex(int* oldIndex, int* newIndex, Node* child, int z)
int ParticleBatchNode::searchNewPositionInChildrenForZ(int z)
void  ParticleBatchNode::removeChild(Node* aChild, bool cleanup)
void ParticleBatchNode::removeChildAtIndex(int index, bool doCleanup)
void ParticleBatchNode::removeAllChildrenWithCleanup(bool doCleanup)
void ParticleBatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void ParticleBatchNode::increaseAtlasCapacityTo(ssize_t quantity)
void ParticleBatchNode::disableParticle(int particleIndex)
void ParticleBatchNode::insertChild(ParticleSystem* system, int index)
void ParticleBatchNode::updateAllAtlasIndexes()
void ParticleBatchNode::updateBlendFunc()
void ParticleBatchNode::setTexture(Texture2D* texture)
Texture2D* ParticleBatchNode::getTexture() const
void ParticleBatchNode::setBlendFunc(const BlendFunc &blendFunc)
const BlendFunc& ParticleBatchNode::getBlendFunc() const
ParticleFire* ParticleFire::create()
ParticleFire* ParticleFire::createWithTotalParticles(int numberOfParticles)
bool ParticleFire::initWithTotalParticles(int numberOfParticles)
ParticleFireworks* ParticleFireworks::create()
ParticleFireworks* ParticleFireworks::createWithTotalParticles(int numberOfParticles)
bool ParticleFireworks::initWithTotalParticles(int numberOfParticles)
ParticleSun* ParticleSun::create()
ParticleSun* ParticleSun::createWithTotalParticles(int numberOfParticles)
bool ParticleSun::initWithTotalParticles(int numberOfParticles)
ParticleGalaxy* ParticleGalaxy::create()
ParticleGalaxy* ParticleGalaxy::createWithTotalParticles(int numberOfParticles)
bool ParticleGalaxy::initWithTotalParticles(int numberOfParticles)
ParticleFlower* ParticleFlower::create()
ParticleFlower* ParticleFlower::createWithTotalParticles(int numberOfParticles)
bool ParticleFlower::initWithTotalParticles(int numberOfParticles)
ParticleMeteor * ParticleMeteor::create()
ParticleMeteor* ParticleMeteor::createWithTotalParticles(int numberOfParticles)
bool ParticleMeteor::initWithTotalParticles(int numberOfParticles)
ParticleSpiral* ParticleSpiral::create()
ParticleSpiral* ParticleSpiral::createWithTotalParticles(int numberOfParticles)
bool ParticleSpiral::initWithTotalParticles(int numberOfParticles)
ParticleExplosion* ParticleExplosion::create()
ParticleExplosion* ParticleExplosion::createWithTotalParticles(int numberOfParticles)
bool ParticleExplosion::initWithTotalParticles(int numberOfParticles)
ParticleSmoke* ParticleSmoke::create()
ParticleSmoke* ParticleSmoke::createWithTotalParticles(int numberOfParticles)
bool ParticleSmoke::initWithTotalParticles(int numberOfParticles)
ParticleSnow* ParticleSnow::create()
ParticleSnow* ParticleSnow::createWithTotalParticles(int numberOfParticles)
bool ParticleSnow::initWithTotalParticles(int numberOfParticles)
ParticleRain* ParticleRain::create()
ParticleRain* ParticleRain::createWithTotalParticles(int numberOfParticles)
bool ParticleRain::initWithTotalParticles(int numberOfParticles)
ParticleSystem * ParticleSystem::create(const std::string& plistFile)
ParticleSystem* ParticleSystem::createWithTotalParticles(int numberOfParticles)
bool ParticleSystem::init()
bool ParticleSystem::initWithFile(const std::string& plistFile)
bool ParticleSystem::initWithDictionary(ValueMap& dictionary)
bool ParticleSystem::initWithDictionary(ValueMap& dictionary, const std::string& dirname)
bool ParticleSystem::initWithTotalParticles(int numberOfParticles)
bool ParticleSystem::addParticle()
void ParticleSystem::initParticle(tParticle* particle)
void ParticleSystem::onEnter()
void ParticleSystem::onExit()
void ParticleSystem::stopSystem()
void ParticleSystem::resetSystem()
bool ParticleSystem::isFull()
void ParticleSystem::update(float dt)
void ParticleSystem::updateWithNoTime(void)
void ParticleSystem::updateQuadWithParticle(tParticle* particle, const Vec2& newPosition)
void ParticleSystem::postStep()
void ParticleSystem::setTexture(Texture2D* var)
void ParticleSystem::updateBlendFunc()
Texture2D * ParticleSystem::getTexture() const
void ParticleSystem::setBlendAdditive(bool additive)
bool ParticleSystem::isBlendAdditive() const
void ParticleSystem::setTangentialAccel(float t)
float ParticleSystem::getTangentialAccel() const
void ParticleSystem::setTangentialAccelVar(float t)
float ParticleSystem::getTangentialAccelVar() const
void ParticleSystem::setRadialAccel(float t)
float ParticleSystem::getRadialAccel() const
void ParticleSystem::setRadialAccelVar(float t)
float ParticleSystem::getRadialAccelVar() const
void ParticleSystem::setRotationIsDir(bool t)
bool ParticleSystem::getRotationIsDir() const
void ParticleSystem::setGravity(const Vec2& g)
const Vec2& ParticleSystem::getGravity()
void ParticleSystem::setSpeed(float speed)
float ParticleSystem::getSpeed() const
void ParticleSystem::setSpeedVar(float speedVar)
float ParticleSystem::getSpeedVar() const
void ParticleSystem::setStartRadius(float startRadius)
float ParticleSystem::getStartRadius() const
void ParticleSystem::setStartRadiusVar(float startRadiusVar)
float ParticleSystem::getStartRadiusVar() const
void ParticleSystem::setEndRadius(float endRadius)
float ParticleSystem::getEndRadius() const
void ParticleSystem::setEndRadiusVar(float endRadiusVar)
float ParticleSystem::getEndRadiusVar() const
void ParticleSystem::setRotatePerSecond(float degrees)
float ParticleSystem::getRotatePerSecond() const
void ParticleSystem::setRotatePerSecondVar(float degrees)
float ParticleSystem::getRotatePerSecondVar() const
bool ParticleSystem::isActive() const
int ParticleSystem::getTotalParticles() const
void ParticleSystem::setTotalParticles(int var)
const BlendFunc& ParticleSystem::getBlendFunc() const
void ParticleSystem::setBlendFunc(const BlendFunc &blendFunc)
bool ParticleSystem::isAutoRemoveOnFinish() const
void ParticleSystem::setAutoRemoveOnFinish(bool var)
ParticleBatchNode* ParticleSystem::getBatchNode(void) const
void ParticleSystem::setBatchNode(ParticleBatchNode* batchNode)
void ParticleSystem::setScale(float s)
void ParticleSystem::setRotation(float newRotation)
void ParticleSystem::setScaleX(float newScaleX)
void ParticleSystem::setScaleY(float newScaleY)
ParticleSystemQuad * ParticleSystemQuad::create(const std::string& filename)
ParticleSystemQuad * ParticleSystemQuad::createWithTotalParticles(int numberOfParticles)
ParticleSystemQuad * ParticleSystemQuad::create(ValueMap &dictionary)
bool ParticleSystemQuad::initWithTotalParticles(int numberOfParticles)
void ParticleSystemQuad::initTexCoordsWithRect(const Rect& pointRect)
void ParticleSystemQuad::updateTexCoords()
void ParticleSystemQuad::setTextureWithRect(Texture2D *texture, const Rect& rect)
void ParticleSystemQuad::setTexture(Texture2D* texture)
void ParticleSystemQuad::setDisplayFrame(SpriteFrame *spriteFrame)
void ParticleSystemQuad::initIndices()
void ParticleSystemQuad::updateQuadWithParticle(tParticle* particle, const Vec2& newPosition)
void ParticleSystemQuad::postStep()
void ParticleSystemQuad::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void ParticleSystemQuad::setTotalParticles(int tp)
void ParticleSystemQuad::setupVBOandVAO()
void ParticleSystemQuad::setupVBO()
void ParticleSystemQuad::listenRendererRecreated(EventCustom* event)
bool ParticleSystemQuad::allocMemory()
void ParticleSystemQuad::setBatchNode(ParticleBatchNode * batchNode)
ParticleSystemQuad * ParticleSystemQuad::create()
std::string ParticleSystemQuad::getDescription() const
ProgressTimer* ProgressTimer::create(Sprite* sp)
bool ProgressTimer::initWithSprite(Sprite* sp)
void ProgressTimer::setPercentage(float percentage)
void ProgressTimer::setSprite(Sprite *sprite)
void ProgressTimer::setType(Type type)
void ProgressTimer::setReverseProgress(bool reverse)
Tex2F ProgressTimer::textureCoordFromAlphaPoint(Vec2 alpha)
Vec2 ProgressTimer::vertexFromAlphaPoint(Vec2 alpha)
void ProgressTimer::updateColor(void)
void ProgressTimer::updateProgress(void)
void ProgressTimer::setAnchorPoint(const Vec2& anchorPoint)
Vec2 ProgressTimer::getMidpoint() const
void ProgressTimer::setColor(const Color3B &color)
const Color3B& ProgressTimer::getColor() const
void ProgressTimer::setOpacity(GLubyte opacity)
GLubyte ProgressTimer::getOpacity() const
void ProgressTimer::setMidpoint(const Vec2& midPoint)
void ProgressTimer::updateRadial(void)
void ProgressTimer::updateBar(void)
Vec2 ProgressTimer::boundaryTexCoord(char index)
void ProgressTimer::onDraw(const Mat4 &transform, uint32_t flags)
void ProgressTimer::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
ProtectedNode::ProtectedNode() : _reorderProtectedChildDirty(false)
ProtectedNode * ProtectedNode::create(void)
void ProtectedNode::cleanup()
void ProtectedNode::addProtectedChild(cocos2d::Node *child)
void ProtectedNode::addProtectedChild(cocos2d::Node *child, int localZOrder)
void ProtectedNode::addProtectedChild(Node *child, int zOrder, int tag)
Node* ProtectedNode::getProtectedChildByTag(int tag)
void ProtectedNode::removeProtectedChild(cocos2d::Node *child, bool cleanup)
void ProtectedNode::removeAllProtectedChildren()
void ProtectedNode::removeAllProtectedChildrenWithCleanup(bool cleanup)
void ProtectedNode::removeProtectedChildByTag(int tag, bool cleanup)
void ProtectedNode::insertProtectedChild(cocos2d::Node *child, int z)
void ProtectedNode::sortAllProtectedChildren()
void ProtectedNode::reorderProtectedChild(cocos2d::Node *child, int localZOrder)
void ProtectedNode::visit(Renderer* renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void ProtectedNode::onEnter()
void ProtectedNode::onEnterTransitionDidFinish()
void ProtectedNode::onExitTransitionDidStart()
void ProtectedNode::onExit()
void ProtectedNode::updateDisplayedOpacity(GLubyte parentOpacity)
void ProtectedNode::updateDisplayedColor(const Color3B& parentColor)
void ProtectedNode::disableCascadeColor()
void ProtectedNode::disableCascadeOpacity()
void ProtectedNode::setCameraMask(unsigned short mask, bool applyChildren)
void RenderTexture::listenToBackground(EventCustom *event)
void RenderTexture::listenToForeground(EventCustom *event)
RenderTexture * RenderTexture::create(int w, int h, Texture2D::PixelFormat eFormat)
RenderTexture * RenderTexture::create(int w ,int h, Texture2D::PixelFormat eFormat, GLuint uDepthStencilFormat)
RenderTexture * RenderTexture::create(int w, int h)
bool RenderTexture::initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat eFormat)
bool RenderTexture::initWithWidthAndHeight(int w, int h, Texture2D::PixelFormat format, GLuint depthStencilFormat)
void RenderTexture::setKeepMatrix(bool keepMatrix)
void RenderTexture::setVirtualViewport(const Vec2& rtBegin, const Rect& fullRect, const Rect& fullViewport)
void RenderTexture::beginWithClear(float r, float g, float b, float a)
void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue)
void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)
void RenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)
void RenderTexture::clear(float r, float g, float b, float a)
void RenderTexture::clearDepth(float depthValue)
void RenderTexture::clearStencil(int stencilValue)
void RenderTexture::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
bool RenderTexture::saveToFile(const std::string& filename, bool isRGBA, std::function<void (RenderTexture*, const std::string&)> callback)
bool RenderTexture::saveToFile(const std::string& fileName, Image::Format format, bool isRGBA, std::function<void (RenderTexture*, const std::string&)> callback)
void RenderTexture::onSaveToFile(const std::string& filename, bool isRGBA)
Image* RenderTexture::newImage(bool fliimage)
void RenderTexture::onBegin()
void RenderTexture::onEnd()
void RenderTexture::onClear()
void RenderTexture::onClearDepth()
void RenderTexture::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void RenderTexture::begin()
void RenderTexture::end()
void Scene::setNavMesh(NavMesh* navMesh)
bool Scene::init()
bool Scene::initWithSize(const Size& size)
Scene* Scene::create()
Scene* Scene::createWithSize(const Size& size)
std::string Scene::getDescription() const
void Scene::onProjectionChanged(EventCustom* event)
const std::vector<Camera*>& Scene::getCameras()
void Scene::render(Renderer* renderer)
void Scene::removeAllChildren()
void Scene::setPhysics3DDebugCamera(Camera* camera)
void Scene::setNavMeshDebugCamera(Camera *camera)
void Scene::addChild(Node* child, int zOrder, int tag)
void Scene::addChild(Node* child, int zOrder, const std::string &name)
Scene* Scene::createWithPhysics()
bool Scene::initWithPhysics()
void Scene::addChildToPhysicsWorld(Node* child)
void Scene::stepPhysicsAndNavigation(float deltaTime)
Sprite* Sprite::createWithTexture(Texture2D *texture)
Sprite* Sprite::createWithTexture(Texture2D *texture, const Rect& rect, bool rotated)
Sprite* Sprite::create(const std::string& filename)
Sprite* Sprite::create(const PolygonInfo& info)
Sprite* Sprite::create(const std::string& filename, const Rect& rect)
Sprite* Sprite::createWithSpriteFrame(SpriteFrame *spriteFrame)
Sprite* Sprite::createWithSpriteFrameName(const std::string& spriteFrameName)
Sprite* Sprite::create()
bool Sprite::init(void)
bool Sprite::initWithTexture(Texture2D *texture)
bool Sprite::initWithTexture(Texture2D *texture, const Rect& rect)
bool Sprite::initWithFile(const std::string& filename)
bool Sprite::initWithFile(const std::string &filename, const Rect& rect)
bool Sprite::initWithSpriteFrameName(const std::string& spriteFrameName)
bool Sprite::initWithSpriteFrame(SpriteFrame *spriteFrame)
bool Sprite::initWithPolygon(const cocos2d::PolygonInfo &info)
bool Sprite::initWithTexture(Texture2D *texture, const Rect& rect, bool rotated)
void Sprite::setTexture(const std::string &filename)
void Sprite::setTexture(Texture2D *texture)
Texture2D* Sprite::getTexture() const
void Sprite::setTextureRect(const Rect& rect)
void Sprite::setTextureRect(const Rect& rect, bool rotated, const Size& untrimmedSize)
void Sprite::debugDraw(bool on)
void Sprite::setVertexRect(const Rect& rect)
void Sprite::setTextureCoords(Rect rect)
void Sprite::updateTransform(void)
void Sprite::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void Sprite::addChild(Node *child, int zOrder, int tag)
void Sprite::addChild(Node *child, int zOrder, const std::string &name)
void Sprite::reorderChild(Node *child, int zOrder)
void Sprite::removeChild(Node *child, bool cleanup)
void Sprite::removeAllChildrenWithCleanup(bool cleanup)
void Sprite::sortAllChildren()
void Sprite::setReorderChildDirtyRecursively(void)
void Sprite::setDirtyRecursively(bool bValue)
void Sprite::setPosition(const Vec2& pos)
void Sprite::setPosition(float x, float y)
void Sprite::setRotation(float rotation)
void Sprite::setRotationSkewX(float fRotationX)
void Sprite::setRotationSkewY(float fRotationY)
void Sprite::setSkewX(float sx)
void Sprite::setSkewY(float sy)
void Sprite::setScaleX(float scaleX)
void Sprite::setScaleY(float scaleY)
void Sprite::setScale(float fScale)
void Sprite::setScale(float scaleX, float scaleY)
void Sprite::setPositionZ(float fVertexZ)
void Sprite::setAnchorPoint(const Vec2& anchor)
void Sprite::ignoreAnchorPointForPosition(bool value)
void Sprite::setVisible(bool bVisible)
void Sprite::setFlippedX(bool flippedX)
bool Sprite::isFlippedX(void) const
void Sprite::setFlippedY(bool flippedY)
bool Sprite::isFlippedY(void) const
void Sprite::updateColor(void)
void Sprite::setOpacityModifyRGB(bool modify)
bool Sprite::isOpacityModifyRGB(void) const
void Sprite::setSpriteFrame(const std::string &spriteFrameName)
void Sprite::setSpriteFrame(SpriteFrame *spriteFrame)
void Sprite::setDisplayFrameWithAnimationName(const std::string& animationName, ssize_t frameIndex)
bool Sprite::isFrameDisplayed(SpriteFrame *frame) const
SpriteFrame* Sprite::getSpriteFrame() const
SpriteBatchNode* Sprite::getBatchNode() const
void Sprite::setBatchNode(SpriteBatchNode *spriteBatchNode)
void Sprite::updateBlendFunc(void)
std::string Sprite::getDescription() const
PolygonInfo Sprite::getPolygonInfo() const
void Sprite::setPolygonInfo(const PolygonInfo& info)
SpriteBatchNode* SpriteBatchNode::createWithTexture(Texture2D* tex, ssize_t capacity/* = DEFAULT_CAPACITY*/)
SpriteBatchNode* SpriteBatchNode::create(const std::string& fileImage, ssize_t capacity/* = DEFAULT_CAPACITY*/)
bool SpriteBatchNode::initWithTexture(Texture2D *tex, ssize_t capacity/* = DEFAULT_CAPACITY*/)
bool SpriteBatchNode::init()
bool SpriteBatchNode::initWithFile(const std::string& fileImage, ssize_t capacity/* = DEFAULT_CAPACITY*/)
void SpriteBatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void SpriteBatchNode::addChild(Node *child, int zOrder, int tag)
void SpriteBatchNode::addChild(Node * child, int zOrder, const std::string &name)
void SpriteBatchNode::reorderChild(Node *child, int zOrder)
void SpriteBatchNode::removeChild(Node *child, bool cleanup)
void SpriteBatchNode::removeChildAtIndex(ssize_t index, bool doCleanup)
void SpriteBatchNode::removeAllChildrenWithCleanup(bool doCleanup)
void SpriteBatchNode::sortAllChildren()
void SpriteBatchNode::updateAtlasIndex(Sprite* sprite, ssize_t* curIndex)
void SpriteBatchNode::swap(ssize_t oldIndex, ssize_t newIndex)
void SpriteBatchNode::reorderBatch(bool reorder)
void SpriteBatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void SpriteBatchNode::increaseAtlasCapacity()
ssize_t SpriteBatchNode::rebuildIndexInOrder(Sprite *parent, ssize_t index)
ssize_t SpriteBatchNode::highestAtlasIndexInChild(Sprite *sprite)
ssize_t SpriteBatchNode::lowestAtlasIndexInChild(Sprite *sprite)
ssize_t SpriteBatchNode::atlasIndexForChild(Sprite *sprite, int nZ)
void SpriteBatchNode::appendChild(Sprite* sprite)
void SpriteBatchNode::removeSpriteFromAtlas(Sprite *sprite)
void SpriteBatchNode::updateBlendFunc()
void SpriteBatchNode::setBlendFunc(const BlendFunc &blendFunc)
const BlendFunc& SpriteBatchNode::getBlendFunc() const
Texture2D* SpriteBatchNode::getTexture() const
void SpriteBatchNode::setTexture(Texture2D *texture)
void SpriteBatchNode::insertQuadFromSprite(Sprite *sprite, ssize_t index)
void SpriteBatchNode::updateQuadFromSprite(Sprite *sprite, ssize_t index)
SpriteBatchNode * SpriteBatchNode::addSpriteWithoutQuad(Sprite*child, int z, int aTag)
std::string SpriteBatchNode::getDescription() const
SpriteFrame* SpriteFrame::create(const std::string& filename, const Rect& rect)
SpriteFrame* SpriteFrame::createWithTexture(Texture2D *texture, const Rect& rect)
SpriteFrame* SpriteFrame::createWithTexture(Texture2D* texture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)
SpriteFrame* SpriteFrame::create(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)
bool SpriteFrame::initWithTexture(Texture2D* texture, const Rect& rect)
bool SpriteFrame::initWithTextureFilename(const std::string& filename, const Rect& rect)
bool SpriteFrame::initWithTexture(Texture2D* texture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)
bool SpriteFrame::initWithTextureFilename(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)
SpriteFrame* SpriteFrame::clone() const
void SpriteFrame::setRect(const Rect& rect)
void SpriteFrame::setRectInPixels(const Rect& rectInPixels)
const Vec2& SpriteFrame::getOffset() const
void SpriteFrame::setOffset(const Vec2& offsets)
const Vec2& SpriteFrame::getOffsetInPixels() const
void SpriteFrame::setOffsetInPixels(const Vec2& offsetInPixels)
void SpriteFrame::setTexture(Texture2D * texture)
Texture2D* SpriteFrame::getTexture()
SpriteFrameCache* SpriteFrameCache::getInstance()
void SpriteFrameCache::destroyInstance()
bool SpriteFrameCache::init()
void SpriteFrameCache::addSpriteFramesWithDictionary(ValueMap& dictionary, Texture2D* texture)
void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist, Texture2D *texture)
void SpriteFrameCache::addSpriteFramesWithFileContent(const std::string& plist_content, Texture2D *texture)
void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist, const std::string& textureFileName)
void SpriteFrameCache::addSpriteFramesWithFile(const std::string& plist)
bool SpriteFrameCache::isSpriteFramesWithFileLoaded(const std::string& plist) const
void SpriteFrameCache::addSpriteFrame(SpriteFrame* frame, const std::string& frameName)
void SpriteFrameCache::removeSpriteFrames()
void SpriteFrameCache::removeUnusedSpriteFrames()
void SpriteFrameCache::removeSpriteFrameByName(const std::string& name)
void SpriteFrameCache::removeSpriteFramesFromFile(const std::string& plist)
void SpriteFrameCache::removeSpriteFramesFromFileContent(const std::string& plist_content)
void SpriteFrameCache::removeSpriteFramesFromDictionary(ValueMap& dictionary)
void SpriteFrameCache::removeSpriteFramesFromTexture(Texture2D* texture)
SpriteFrame* SpriteFrameCache::getSpriteFrameByName(const std::string& name)
TextFieldTTF * TextFieldTTF::textFieldWithPlaceHolder(const std::string& placeholder, const Size& dimensions, TextHAlignment alignment, const std::string& fontName, float fontSize)
TextFieldTTF * TextFieldTTF::textFieldWithPlaceHolder(const std::string& placeholder, const std::string& fontName, float fontSize)
bool TextFieldTTF::initWithPlaceHolder(const std::string& placeholder, const Size& dimensions, TextHAlignment alignment, const std::string& fontName, float fontSize)
bool TextFieldTTF::initWithPlaceHolder(const std::string& placeholder, const std::string& fontName, float fontSize)
bool TextFieldTTF::attachWithIME()
bool TextFieldTTF::detachWithIME()
bool TextFieldTTF::canAttachWithIME()
bool TextFieldTTF::canDetachWithIME()
void TextFieldTTF::insertText(const char * text, size_t len)
void TextFieldTTF::deleteBackward()
const std::string& TextFieldTTF::getContentText()
void TextFieldTTF::setTextColor(const Color4B &color)
void TextFieldTTF::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
const Color4B& TextFieldTTF::getColorSpaceHolder()
void TextFieldTTF::setColorSpaceHolder(const Color3B& color)
void TextFieldTTF::setColorSpaceHolder(const Color4B& color)
void TextFieldTTF::setString(const std::string &text)
const std::string& TextFieldTTF::getString() const
void TextFieldTTF::setPlaceHolder(const std::string& text)
const std::string& TextFieldTTF::getPlaceHolder() const
void TextFieldTTF::setSecureTextEntry(bool value)
bool TextFieldTTF::isSecureTextEntry()
TileMapAtlas * TileMapAtlas::create(const std::string& tile, const std::string& mapFile, int tileWidth, int tileHeight)
bool TileMapAtlas::initWithTileFile(const std::string& tile, const std::string& mapFile, int tileWidth, int tileHeight)
void TileMapAtlas::releaseMap()
void TileMapAtlas::calculateItemsToRender()
void TileMapAtlas::loadTGAfile(const std::string& file)
void TileMapAtlas::setTile(const Color3B& tile, const Vec2& position)
Color3B TileMapAtlas::getTileAt(const Vec2& position) const
void TileMapAtlas::updateAtlasValueAt(const Vec2& pos, const Color3B& value, int index)
void TileMapAtlas::updateAtlasValues()
TMXLayer * TMXLayer::create(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)
bool TMXLayer::initWithTilesetInfo(TMXTilesetInfo *tilesetInfo, TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)
void TMXLayer::releaseMap()
void TMXLayer::setupTiles()
Value TMXLayer::getProperty(const std::string& propertyName) const
void TMXLayer::parseInternalProperties()
void TMXLayer::setupTileSprite(Sprite* sprite, Vec2 pos, int gid)
Sprite* TMXLayer::reusedTileWithRect(Rect rect)
Sprite * TMXLayer::getTileAt(const Vec2& pos)
uint32_t TMXLayer::getTileGIDAt(const Vec2& pos, TMXTileFlags* flags/* = nullptr*/)
Sprite * TMXLayer::insertTileForGID(uint32_t gid, const Vec2& pos)
Sprite * TMXLayer::updateTileForGID(uint32_t gid, const Vec2& pos)
Sprite * TMXLayer::appendTileForGID(uint32_t gid, const Vec2& pos)
ssize_t TMXLayer::atlasIndexForExistantZ(int z)
ssize_t TMXLayer::atlasIndexForNewZ(int z)
void TMXLayer::setTileGID(uint32_t gid, const Vec2& pos)
void TMXLayer::setTileGID(uint32_t gid, const Vec2& pos, TMXTileFlags flags)
void TMXLayer::addChild(Node * child, int zOrder, int tag)
void TMXLayer::removeChild(Node* node, bool cleanup)
void TMXLayer::removeTileAt(const Vec2& pos)
Vec2 TMXLayer::calculateLayerOffset(const Vec2& pos)
Vec2 TMXLayer::getPositionAt(const Vec2& pos)
Vec2 TMXLayer::getPositionForOrthoAt(const Vec2& pos)
Vec2 TMXLayer::getPositionForIsoAt(const Vec2& pos)
Vec2 TMXLayer::getPositionForHexAt(const Vec2& pos)
Vec2 TMXLayer::getPositionForStaggeredAt(const Vec2 &pos)
int TMXLayer::getVertexZForPos(const Vec2& pos)
std::string TMXLayer::getDescription() const
ValueMap TMXObjectGroup::getObject(const std::string& objectName) const
Value TMXObjectGroup::getProperty(const std::string& propertyName) const
TMXTiledMap * TMXTiledMap::create(const std::string& tmxFile)
TMXTiledMap* TMXTiledMap::createWithXML(const std::string& tmxString, const std::string& resourcePath)
bool TMXTiledMap::initWithTMXFile(const std::string& tmxFile)
bool TMXTiledMap::initWithXML(const std::string& tmxString, const std::string& resourcePath)
TMXLayer * TMXTiledMap::parseLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)
TMXTilesetInfo * TMXTiledMap::tilesetForLayer(TMXLayerInfo *layerInfo, TMXMapInfo *mapInfo)
void TMXTiledMap::buildWithMapInfo(TMXMapInfo* mapInfo)
TMXLayer * TMXTiledMap::getLayer(const std::string& layerName) const
TMXObjectGroup * TMXTiledMap::getObjectGroup(const std::string& groupName) const
Value TMXTiledMap::getProperty(const std::string& propertyName) const
Value TMXTiledMap::getPropertiesForGID(int GID) const
bool TMXTiledMap::getPropertiesForGID(int GID, Value** value)
std::string TMXTiledMap::getDescription() const
ValueMap& TMXLayerInfo::getProperties()
void TMXLayerInfo::setProperties(ValueMap var)
Rect TMXTilesetInfo::getRectForGID(uint32_t gid)
TMXMapInfo * TMXMapInfo::create(const std::string& tmxFile)
TMXMapInfo * TMXMapInfo::createWithXML(const std::string& tmxString, const std::string& resourcePath)
void TMXMapInfo::internalInit(const std::string& tmxFileName, const std::string& resourcePath)
bool TMXMapInfo::initWithXML(const std::string& tmxString, const std::string& resourcePath)
bool TMXMapInfo::initWithTMXFile(const std::string& tmxFile)
bool TMXMapInfo::parseXMLString(const std::string& xmlString)
bool TMXMapInfo::parseXMLFile(const std::string& xmlFilename)
void TMXMapInfo::startElement(void *ctx, const char *name, const char **atts)
void TMXMapInfo::endElement(void *ctx, const char *name)
void TMXMapInfo::textHandler(void *ctx, const char *ch, int len)
TransitionScene * TransitionScene::create(float t, Scene *scene)
bool TransitionScene::initWithDuration(float t, Scene *scene)
void TransitionScene::sceneOrder()
void TransitionScene::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void TransitionScene::finish()
void TransitionScene::setNewScene(float dt)
void TransitionScene::hideOutShowIn()
void TransitionScene::onEnter()
void TransitionScene::onExit()
void TransitionScene::cleanup()
TransitionSceneOriented * TransitionSceneOriented::create(float t, Scene *scene, Orientation orientation)
bool TransitionSceneOriented::initWithDuration(float t, Scene *scene, Orientation orientation)
TransitionRotoZoom* TransitionRotoZoom::create(float t, Scene* scene)
void TransitionRotoZoom:: onEnter()
TransitionJumpZoom* TransitionJumpZoom::create(float t, Scene* scene)
void TransitionJumpZoom::onEnter()
TransitionMoveInL* TransitionMoveInL::create(float t, Scene* scene)
void TransitionMoveInL::onEnter()
ActionInterval* TransitionMoveInL::action()
ActionInterval* TransitionMoveInL::easeActionWithAction(ActionInterval* action)
void TransitionMoveInL::initScenes()
TransitionMoveInR* TransitionMoveInR::create(float t, Scene* scene)
void TransitionMoveInR::initScenes()
TransitionMoveInT* TransitionMoveInT::create(float t, Scene* scene)
void TransitionMoveInT::initScenes()
TransitionMoveInB* TransitionMoveInB::create(float t, Scene* scene)
void TransitionMoveInB::initScenes()
void TransitionSlideInL::onEnter()
void TransitionSlideInL::sceneOrder()
void TransitionSlideInL:: initScenes()
ActionInterval* TransitionSlideInL::action()
ActionInterval* TransitionSlideInL::easeActionWithAction(ActionInterval* action)
TransitionSlideInL* TransitionSlideInL::create(float t, Scene* scene)
TransitionSlideInR* TransitionSlideInR::create(float t, Scene* scene)
void TransitionSlideInR::sceneOrder()
void TransitionSlideInR::initScenes()
ActionInterval* TransitionSlideInR:: action()
TransitionSlideInT* TransitionSlideInT::create(float t, Scene* scene)
void TransitionSlideInT::sceneOrder()
void TransitionSlideInT::initScenes()
ActionInterval* TransitionSlideInT::action()
TransitionSlideInB* TransitionSlideInB::create(float t, Scene* scene)
void TransitionSlideInB::sceneOrder()
void TransitionSlideInB:: initScenes()
ActionInterval* TransitionSlideInB:: action()
TransitionShrinkGrow* TransitionShrinkGrow::create(float t, Scene* scene)
void TransitionShrinkGrow::onEnter()
ActionInterval* TransitionShrinkGrow:: easeActionWithAction(ActionInterval* action)
void TransitionFlipX::onEnter()
TransitionFlipX* TransitionFlipX::create(float t, Scene* s, Orientation o)
TransitionFlipX* TransitionFlipX::create(float t, Scene* s)
void TransitionFlipY::onEnter()
TransitionFlipY* TransitionFlipY::create(float t, Scene* s, Orientation o)
TransitionFlipY* TransitionFlipY::create(float t, Scene* s)
void TransitionFlipAngular::onEnter()
TransitionFlipAngular* TransitionFlipAngular::create(float t, Scene* s, Orientation o)
TransitionFlipAngular* TransitionFlipAngular::create(float t, Scene* s)
void TransitionZoomFlipX::onEnter()
TransitionZoomFlipX* TransitionZoomFlipX::create(float t, Scene* s, Orientation o)
TransitionZoomFlipX* TransitionZoomFlipX::create(float t, Scene* s)
void TransitionZoomFlipY::onEnter()
TransitionZoomFlipY* TransitionZoomFlipY::create(float t, Scene* s, Orientation o)
TransitionZoomFlipY* TransitionZoomFlipY::create(float t, Scene* s)
void TransitionZoomFlipAngular::onEnter()
TransitionZoomFlipAngular* TransitionZoomFlipAngular::create(float t, Scene* s, Orientation o)
TransitionZoomFlipAngular* TransitionZoomFlipAngular::create(float t, Scene* s)
TransitionFade * TransitionFade::create(float duration, Scene *scene, const Color3B& color)
TransitionFade* TransitionFade::create(float duration,Scene* scene)
bool TransitionFade::initWithDuration(float duration, Scene *scene, const Color3B& color)
bool TransitionFade::initWithDuration(float t, Scene *scene)
void TransitionFade::onExit()
TransitionCrossFade* TransitionCrossFade::create(float t, Scene* scene)
void TransitionCrossFade::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void TransitionCrossFade::onEnter()
void TransitionCrossFade::onExit()
TransitionTurnOffTiles* TransitionTurnOffTiles::create(float t, Scene* scene)
void TransitionTurnOffTiles::sceneOrder()
void TransitionTurnOffTiles::onEnter()
void TransitionTurnOffTiles::onExit()
void TransitionTurnOffTiles::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
ActionInterval* TransitionTurnOffTiles:: easeActionWithAction(ActionInterval* action)
TransitionSplitCols* TransitionSplitCols::create(float t, Scene* scene)
void TransitionSplitCols::onEnter()
void TransitionSplitCols::switchTargetToInscene()
void TransitionSplitCols::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void TransitionSplitCols::onExit()
ActionInterval* TransitionSplitCols:: action()
ActionInterval* TransitionSplitCols::easeActionWithAction(ActionInterval * action)
ActionInterval* TransitionSplitRows::action()
TransitionSplitRows* TransitionSplitRows::create(float t, Scene* scene)
TransitionFadeTR* TransitionFadeTR::create(float t, Scene* scene)
void TransitionFadeTR::sceneOrder()
void TransitionFadeTR::onEnter()
void TransitionFadeTR::onExit()
void TransitionFadeTR::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
ActionInterval*  TransitionFadeTR::actionWithSize(const Size& size)
ActionInterval* TransitionFadeTR:: easeActionWithAction(ActionInterval* action)
TransitionFadeBL* TransitionFadeBL::create(float t, Scene* scene)
ActionInterval*  TransitionFadeBL::actionWithSize(const Size& size)
TransitionFadeUp* TransitionFadeUp::create(float t, Scene* scene)
ActionInterval* TransitionFadeUp::actionWithSize(const Size& size)
TransitionFadeDown* TransitionFadeDown::create(float t, Scene* scene)
ActionInterval* TransitionFadeDown::actionWithSize(const Size& size)
TransitionPageTurn * TransitionPageTurn::create(float t, Scene *scene, bool backwards)
bool TransitionPageTurn::initWithDuration(float t, Scene *scene, bool backwards)
void TransitionPageTurn::sceneOrder()
void TransitionPageTurn::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void TransitionPageTurn::onEnter()
void TransitionPageTurn::onExit()
ActionInterval* TransitionPageTurn:: actionWithSize(const Size& vector)
TransitionProgress* TransitionProgress::create(float t, Scene* scene)
void TransitionProgress::onEnter()
void TransitionProgress::onExit()
void TransitionProgress::sceneOrder()
void TransitionProgress::setupTransition()
ProgressTimer* TransitionProgress::progressTimerNodeWithRenderTexture(RenderTexture* texture)
ProgressTimer* TransitionProgressRadialCCW::progressTimerNodeWithRenderTexture(RenderTexture* texture)
TransitionProgressRadialCCW* TransitionProgressRadialCCW::create(float t, Scene* scene)
TransitionProgressRadialCW* TransitionProgressRadialCW::create(float t, Scene* scene)
ProgressTimer* TransitionProgressRadialCW::progressTimerNodeWithRenderTexture(RenderTexture* texture)
TransitionProgressHorizontal* TransitionProgressHorizontal::create(float t, Scene* scene)
ProgressTimer* TransitionProgressHorizontal::progressTimerNodeWithRenderTexture(RenderTexture* texture)
TransitionProgressVertical* TransitionProgressVertical::create(float t, Scene* scene)
ProgressTimer* TransitionProgressVertical::progressTimerNodeWithRenderTexture(RenderTexture* texture)
TransitionProgressInOut* TransitionProgressInOut::create(float t, Scene* scene)
void TransitionProgressInOut::sceneOrder()
void TransitionProgressInOut::setupTransition()
ProgressTimer* TransitionProgressInOut::progressTimerNodeWithRenderTexture(RenderTexture* texture)
TransitionProgressOutIn* TransitionProgressOutIn::create(float t, Scene* scene)
ProgressTimer* TransitionProgressOutIn::progressTimerNodeWithRenderTexture(RenderTexture* texture)
AABB::AABB(const Vec3& min, const Vec3& max)
AABB::AABB(const AABB& box)
Vec3 AABB::getCenter()
void AABB::getCorners(Vec3 *dst) const
bool AABB::intersects(const AABB& aabb) const
bool AABB::containPoint(const Vec3& point) const
void AABB::merge(const AABB& box)
void AABB::set(const Vec3& min, const Vec3& max)
void AABB::reset()
bool AABB::isEmpty() const
void AABB::updateMinMax(const Vec3* point, ssize_t num)
void AABB::transform(const Mat4& mat)
Animate3D* Animate3D::create(Animation3D* animation)
Animate3D* Animate3D::create(Animation3D* animation, float fromTime, float duration)
Animate3D* Animate3D::createWithFrames(Animation3D* animation, int startFrame, int endFrame, float frameRate)
bool Animate3D::init(Animation3D* animation)
bool Animate3D::init(Animation3D* animation, float fromTime, float duration)
bool Animate3D::initWithFrames(Animation3D* animation, int startFrame, int endFrame, float frameRate)
Animate3D* Animate3D::clone() const
Animate3D* Animate3D::reverse() const
Node* findChildByNameRecursively(Node* node, const std::string &childName)
void Animate3D::startWithTarget(Node *target)
void Animate3D::stop()
void Animate3D::step(float dt)
bool cmpEventInfoAsc(Animate3D::Animate3DDisplayedEventInfo* info1, Animate3D::Animate3DDisplayedEventInfo* info2)
bool cmpEventInfoDes(Animate3D::Animate3DDisplayedEventInfo* info1, Animate3D::Animate3DDisplayedEventInfo* info2)
void Animate3D::update(float t)
float Animate3D::getSpeed() const
void Animate3D::setSpeed(float speed)
void Animate3D::setWeight(float weight)
void Animate3D::setOriginInterval(float interval)
void Animate3D::setQuality(Animate3DQuality quality)
Animate3DQuality Animate3D::getQuality() const
const ValueMap* Animate3D::getKeyFrameUserInfo(int keyFrame) const
ValueMap* Animate3D::getKeyFrameUserInfo(int keyFrame)
void Animate3D::setKeyFrameUserInfo(int keyFrame, const ValueMap &userInfo)
void Animate3D::removeFromMap()
Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName)
bool Animation3D::initWithFile(const std::string& filename, const std::string& animationName)
Animation3D::Curve* Animation3D::getBoneCurveByName(const std::string& name) const
bool Animation3D::init(const Animation3DData &data)
Animation3DCache* Animation3DCache::getInstance()
void Animation3DCache::destroyInstance()
Animation3D* Animation3DCache::getAnimation(const std::string& key)
void Animation3DCache::addAnimation(const std::string& key, Animation3D* animation)
void Animation3DCache::removeAllAnimations()
void Animation3DCache::removeUnusedAnimation()
AttachNode* AttachNode::create(Bone3D* attachBone)
Mat4 AttachNode::getWorldToNodeTransform() const
Mat4 AttachNode::getNodeToWorldTransform() const
const Mat4& AttachNode::getNodeToParentTransform() const
void AttachNode::visit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)
BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode)
BillBoard* BillBoard::create(const std::string& filename, Mode mode)
BillBoard* BillBoard::create(const std::string& filename, const Rect& rect, Mode mode)
BillBoard* BillBoard::create(Mode mode)
void BillBoard::visit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)
bool BillBoard::calculateBillbaordTransform()
void BillBoard::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void BillBoard::setMode( Mode mode )
BillBoard::Mode BillBoard::getMode() const
void getChildMap(std::map<int, std::vector<int> >& map, SkinData* skinData, const rapidjson::Value& val)
Bundle3D* Bundle3D::createBundle()
void Bundle3D::destroyBundle(Bundle3D* bundle)
void Bundle3D::clear()
bool Bundle3D::load(const std::string& path)
bool Bundle3D::loadObj(MeshDatas& meshdatas, MaterialDatas& materialdatas, NodeDatas& nodedatas, const std::string& fullPath, const char* mtl_basepath)
bool Bundle3D::loadSkinData(const std::string& id, SkinData* skindata)
bool Bundle3D::loadAnimationData(const std::string& id, Animation3DData* animationdata)
bool Bundle3D::loadMeshDatas(MeshDatas& meshdatas)
bool  Bundle3D::loadMeshDatasBinary(MeshDatas& meshdatas)
bool Bundle3D::loadMeshDatasBinary_0_1(MeshDatas& meshdatas)
bool Bundle3D::loadMeshDatasBinary_0_2(MeshDatas& meshdatas)
bool  Bundle3D::loadMeshDatasJson(MeshDatas& meshdatas)
bool Bundle3D::loadNodes(NodeDatas& nodedatas)
bool Bundle3D::loadMaterials(MaterialDatas& materialdatas)
bool Bundle3D::loadMaterialsBinary(MaterialDatas& materialdatas)
bool Bundle3D::loadMaterialsBinary_0_1(MaterialDatas& materialdatas)
bool Bundle3D::loadMaterialsBinary_0_2(MaterialDatas& materialdatas)
bool  Bundle3D::loadMaterialsJson(MaterialDatas& materialdatas)
bool Bundle3D::loadJson(const std::string& path)
bool Bundle3D::loadBinary(const std::string& path)
bool Bundle3D::loadMeshDataJson_0_1(MeshDatas& meshdatas)
bool Bundle3D::loadMeshDataJson_0_2(MeshDatas& meshdatas)
bool Bundle3D::loadSkinDataJson(SkinData* skindata)
bool Bundle3D::loadSkinDataBinary(SkinData* skindata)
bool Bundle3D::loadMaterialDataJson_0_1(MaterialDatas& materialdatas)
bool Bundle3D::loadMaterialDataJson_0_2(MaterialDatas& materialdatas)
bool Bundle3D::loadAnimationDataJson(const std::string& id, Animation3DData* animationdata)
bool Bundle3D::loadAnimationDataBinary(const std::string& id, Animation3DData* animationdata)
bool Bundle3D::loadNodesJson(NodeDatas& nodedatas)
NodeData* Bundle3D::parseNodesRecursivelyJson(const rapidjson::Value& jvalue, bool singleSprite)
bool Bundle3D::loadNodesBinary(NodeDatas& nodedatas)
NodeData* Bundle3D::parseNodesRecursivelyBinary(bool& skeleton, bool singleSprite)
GLenum Bundle3D::parseGLType(const std::string& str)
NTextureData::Usage Bundle3D::parseGLTextureType(const std::string& str)
unsigned int Bundle3D::parseGLProgramAttribute(const std::string& str)
void Bundle3D::getModelRelativePath(const std::string& path)
Reference* Bundle3D::seekToFirstType(unsigned int type, const std::string& id)
std::vector<Vec3> Bundle3D::getTrianglesList(const std::string& path)
cocos2d::AABB Bundle3D::calculateAABB( const std::vector<float>& vertex, int stride, const std::vector<unsigned short>& index )
void BundleReader::init(char* buffer, ssize_t length)
ssize_t BundleReader::read(void* ptr, ssize_t size, ssize_t count)
char* BundleReader::readLine(int num,char* line)
bool BundleReader::eof()
ssize_t BundleReader::length()
ssize_t BundleReader::tell()
bool BundleReader::seek(long int offset, int origin)
bool BundleReader::rewind()
std::string BundleReader::readString()
bool BundleReader::readMatrix(float* m)
bool Frustum::initFrustum(const Camera* camera)
bool Frustum::isOutOfFrustum(const AABB& aabb) const
bool Frustum::isOutOfFrustum(const OBB& obb) const
void Frustum::createPlane(const Camera* camera)
GLuint Mesh::getVertexBuffer() const
bool Mesh::hasVertexAttrib(int attrib) const
ssize_t Mesh::getMeshVertexAttribCount() const
const MeshVertexAttrib& Mesh::getMeshVertexAttribute(int idx)
int Mesh::getVertexSizeInBytes() const
Mesh* Mesh::create(const std::vector<float>& positions, const std::vector<float>& normals, const std::vector<float>& texs, const IndexArray& indices)
Mesh* Mesh::create(const std::vector<float>& vertices, int perVertexSizeInFloat, const IndexArray& indices, const std::vector<MeshVertexAttrib>& attribs)
Mesh* Mesh::create(const std::string& name, MeshIndexData* indexData, MeshSkin* skin)
void Mesh::setVisible(bool visible)
bool Mesh::isVisible() const
void Mesh::setTexture(const std::string& texPath)
void Mesh::setTexture(Texture2D* tex)
Texture2D* Mesh::getTexture() const
void Mesh::setMaterial(Material* material)
Material* Mesh::getMaterial() const
void Mesh::draw(Renderer* renderer, float globalZOrder, const Mat4& transform, uint32_t flags, unsigned int lightMask, const Vec4& color, bool forceDepthWrite)
void Mesh::setSkin(MeshSkin* skin)
void Mesh::setMeshIndexData(MeshIndexData* subMesh)
void Mesh::setGLProgramState(GLProgramState* glProgramState)
GLProgramState* Mesh::getGLProgramState() const
void Mesh::calculateAABB()
void Mesh::bindMeshCommand()
void Mesh::setLightUniforms(Pass* pass, Scene* scene, const Vec4& color, unsigned int lightmask)
void Mesh::setBlendFunc(const BlendFunc &blendFunc)
const BlendFunc& Mesh::getBlendFunc() const
GLenum Mesh::getPrimitiveType() const
ssize_t Mesh::getIndexCount() const
GLenum Mesh::getIndexFormat() const
GLuint Mesh::getIndexBuffer() const
MeshSkin* MeshSkin::create(Skeleton3D* skeleton, const std::vector<std::string>& boneNames, const std::vector<Mat4>& invBindPose)
ssize_t MeshSkin::getBoneCount() const
Bone3D* MeshSkin::getBoneByIndex(unsigned int index) const
Bone3D* MeshSkin::getBoneByName(const std::string& id) const
int MeshSkin::getBoneIndex(Bone3D* bone) const
Vec4* MeshSkin::getMatrixPalette()
ssize_t MeshSkin::getMatrixPaletteSize() const
void MeshSkin::removeAllBones()
void MeshSkin::addSkinBone(Bone3D* bone)
Bone3D* MeshSkin::getRootBone() const
const Mat4& MeshSkin::getInvBindPose(const Bone3D* bone)
MeshIndexData* MeshIndexData::create(const std::string& id, MeshVertexData* vertexData, IndexBuffer* indexbuffer, const AABB& aabb)
const VertexBuffer* MeshIndexData::getVertexBuffer() const
MeshVertexData* MeshVertexData::create(const MeshData& meshdata)
MeshIndexData* MeshVertexData::getMeshIndexDataById(const std::string& id) const
bool MeshVertexData::hasVertexAttrib(int attrib) const
OBB::OBB(const AABB& aabb)
OBB::OBB(const Vec3* verts, int num)
bool OBB::containPoint(const Vec3& point) const
void OBB::set(const Vec3& center, const Vec3& xAxis, const Vec3& yAxis, const Vec3& zAxis, const Vec3& extents)
void OBB::reset()
void OBB::getCorners(Vec3* verts) const
float OBB::projectPoint(const Vec3& point, const Vec3& axis)const
void OBB::getInterval(const OBB& box, const Vec3& axis, float &min, float &max)const
Vec3 OBB::getEdgeDirection(int index)const
Vec3 OBB::getFaceDirection(int index) const
bool OBB::intersects(const OBB& box) const
void OBB::transform(const Mat4& mat)
static inline std::string parseString(const char *&token)
const std::vector<float> &in_texcoords, const vertex_index &i)
const int material_id, const std::string &name, bool clearCache)
std::istream &inStream)
std::map<std::string, int> &matMap)
std::istream &inStream, MaterialReader &readMatFn)
Plane::Plane(const Vec3& p1, const Vec3& p2, const Vec3& p3)
Plane::Plane(const Vec3& normal, float dist)
Plane::Plane(const Vec3& normal, const Vec3& point)
void Plane::initPlane(const Vec3& p1, const Vec3& p2, const Vec3& p3)
void Plane::initPlane(const Vec3& normal, float dist)
void Plane::initPlane(const Vec3& normal, const Vec3& point)
float Plane::dist2Plane(const Vec3& p) const
PointSide Plane::getSide(const Vec3& point) const
Ray::Ray(const Ray& ray)
Ray::Ray(const Vec3& origin, const Vec3& direction)
bool Ray::intersects(const AABB& box, float* distance) const
bool Ray::intersects(const OBB& obb, float* distance) const
float Ray::dist(const Plane& plane) const
Vec3 Ray::intersects(const Plane& plane) const
void Ray::set(const Vec3& origin, const Vec3& direction)
void Ray::transform(const Mat4& matrix)
void Bone3D::setInverseBindPose(const Mat4& m)
const Mat4& Bone3D::getInverseBindPose()
void Bone3D::setOriPose(const Mat4& m)
void Bone3D::resetPose()
void Bone3D::setWorldMatDirty(bool dirty)
void Bone3D::updateWorldMat()
const Mat4& Bone3D::getWorldMat()
void Bone3D::setAnimationValue(float* trans, float* rot, float* scale, void* tag, float weight)
void Bone3D::clearBoneBlendState()
Bone3D* Bone3D::create(const std::string& id)
void Bone3D::updateJointMatrix(Vec4* matrixPalette)
Bone3D* Bone3D::getParentBone()
ssize_t Bone3D::getChildBoneCount() const
Bone3D* Bone3D::getChildBoneByIndex(int index) const
void Bone3D::addChildBone(Bone3D* bone)
void Bone3D::removeChildBoneByIndex(int index)
void Bone3D::removeChildBone(Bone3D* bone)
void Bone3D::removeAllChildBone()
void Bone3D::updateLocalMat()
Skeleton3D* Skeleton3D::create(const std::vector<NodeData*>& skeletondata)
ssize_t Skeleton3D::getBoneCount() const
Bone3D* Skeleton3D::getBoneByIndex(unsigned int index) const
Bone3D* Skeleton3D::getBoneByName(const std::string& id) const
ssize_t Skeleton3D::getRootCount() const
Bone3D* Skeleton3D::getRootBone(int index) const
int Skeleton3D::getBoneIndex(Bone3D* bone) const
void Skeleton3D::updateBoneMatrix()
void Skeleton3D::removeAllBones()
void Skeleton3D::addBone(Bone3D* bone)
Bone3D* Skeleton3D::createBone3D(const NodeData& nodedata)
const std::string& positive_z, const std::string& negative_z)
bool Skybox::init()
const std::string& positive_z, const std::string& negative_z)
void Skybox::initBuffers()
void Skybox::draw(Renderer* renderer, const Mat4& transform, uint32_t flags)
void Skybox::onDraw(const Mat4& transform, uint32_t flags)
void Skybox::setTexture(TextureCube* texture)
void Skybox::reload()
Sprite3D* Sprite3D::create()
Sprite3D* Sprite3D::create(const std::string& modelPath)
Sprite3D* Sprite3D::create(const std::string& modelPath, const std::string& texturePath)
void Sprite3D::createAsync(const std::string& modelPath, const std::function<void(Sprite3D*, void*)>& callback, void* callbackparam)
void Sprite3D::createAsync(const std::string& modelPath, const std::string& texturePath, const std::function<void(Sprite3D*, void*)>& callback, void* callbackparam)
void Sprite3D::afterAsyncLoad(void* param)
AABB Sprite3D::getAABBRecursivelyImp(Node *node)
bool Sprite3D::loadFromCache(const std::string& path)
bool Sprite3D::loadFromFile(const std::string& path, NodeDatas* nodedatas, MeshDatas* meshdatas,  MaterialDatas* materialdatas)
bool Sprite3D::init()
bool Sprite3D::initWithFile(const std::string& path)
bool Sprite3D::initFrom(const NodeDatas& nodeDatas, const MeshDatas& meshdatas, const MaterialDatas& materialdatas)
Sprite3D* Sprite3D::createSprite3DNode(NodeData* nodedata,ModelData* modeldata,const MaterialDatas& materialdatas)
void Sprite3D::createAttachSprite3DNode(NodeData* nodedata, const MaterialDatas& materialdatas)
void Sprite3D::setMaterial(Material *material)
void Sprite3D::setMaterial(Material *material, int meshIndex)
Material* Sprite3D::getMaterial(int meshIndex) const
void Sprite3D::genGLProgramState(bool useLight)
void Sprite3D::createNode(NodeData* nodedata, Node* root, const MaterialDatas& materialdatas, bool singleSprite)
MeshIndexData* Sprite3D::getMeshIndexData(const std::string& indexId) const
void  Sprite3D::addMesh(Mesh* mesh)
void Sprite3D::setTexture(const std::string& texFile)
void Sprite3D::setTexture(Texture2D* texture)
AttachNode* Sprite3D::getAttachNode(const std::string& boneName)
void Sprite3D::removeAttachNode(const std::string& boneName)
void Sprite3D::removeAllAttachNode()
void Sprite3D::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4 &parentTransform, uint32_t parentFlags)
void Sprite3D::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void Sprite3D::setGLProgramState(GLProgramState* glProgramState)
void Sprite3D::setGLProgram(GLProgram* glprogram)
void Sprite3D::setBlendFunc(const BlendFunc& blendFunc)
const BlendFunc& Sprite3D::getBlendFunc() const
AABB Sprite3D::getAABBRecursively()
const AABB& Sprite3D::getAABB() const
Action* Sprite3D::runAction(Action *action)
Rect Sprite3D::getBoundingBox() const
void Sprite3D::setCullFace(GLenum cullFace)
void Sprite3D::setCullFaceEnabled(bool enable)
Mesh* Sprite3D::getMeshByIndex(int index) const
Mesh* Sprite3D::getMeshByName(const std::string& name) const
std::vector<Mesh*> Sprite3D::getMeshArrayByName(const std::string& name) const
MeshSkin* Sprite3D::getSkin() const
void Sprite3D::setForce2DQueue(bool force2D)
Sprite3DCache* Sprite3DCache::getInstance()
void Sprite3DCache::destroyInstance()
Sprite3DCache::Sprite3DData* Sprite3DCache::getSpriteData(const std::string& key) const
bool Sprite3DCache::addSprite3DData(const std::string& key, Sprite3DCache::Sprite3DData* spritedata)
void Sprite3DCache::removeSprite3DData(const std::string& key)
void Sprite3DCache::removeAllSprite3DData()
Sprite3DMaterialCache* Sprite3DMaterialCache::getInstance()
void Sprite3DMaterialCache::destroyInstance()
bool Sprite3DMaterialCache::addSprite3DMaterial(const std::string& key, Texture2D* texture)
Texture2D* Sprite3DMaterialCache::getSprite3DMaterial(const std::string& key)
void Sprite3DMaterialCache::removeAllSprite3DMaterial()
void Sprite3DMaterialCache::removeUnusedSprite3DMaterial()
Terrain * Terrain::create(TerrainData &parameter, CrackFixedType fixedType)
bool Terrain::initWithTerrainData(TerrainData &parameter, CrackFixedType fixedType)
void cocos2d::Terrain::setLightMap(const std::string& fileName)
void cocos2d::Terrain::setLightDir(const Vec3& lightDir)
bool Terrain::initProperties()
void Terrain::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)
void Terrain::onDraw(const Mat4 &transform, uint32_t flags)
bool Terrain::initHeightMap(const char * heightMap)
void Terrain::setChunksLOD(Vec3 cameraPos)
float Terrain::getHeight(float x, float z, Vec3 * normal) const
float Terrain::getHeight(Vec2 pos, Vec3*Normal) const
float Terrain::getImageHeight(int pixel_x,int pixel_y) const
void Terrain::loadVertices()
void Terrain::calculateNormal()
void Terrain::setDrawWire(bool bool_value)
void Terrain::setLODDistance(float lod_1, float lod_2, float lod_3)
void Terrain::setIsEnableFrustumCull(bool bool_value)
cocos2d::Vec3 Terrain::getNormal(int pixel_x, int pixel_y) const
cocos2d::Vec3 Terrain::getIntersectionPoint(const Ray & ray) const
bool Terrain::getIntersectionPoint(const Ray & ray_, Vec3 & intersectionPoint) const
void Terrain::setMaxDetailMapAmount(int max_value)
cocos2d::Vec2 Terrain::convertToTerrainSpace(Vec2 worldSpaceXZ) const
void Terrain::resetHeightMap(const char * heightMap)
float Terrain::getMinHeight()
float Terrain::getMaxHeight()
cocos2d::AABB Terrain::getAABB()
Terrain::QuadTree * Terrain::getQuadTree()
std::vector<float> Terrain::getHeightData() const
Terrain::Chunk * cocos2d::Terrain::getChunkByIndex(int x, int y) const
void Terrain::setAlphaMap(cocos2d::Texture2D * newAlphaMapTexture)
void Terrain::setDetailMap(unsigned int index, DetailMap detailMap)
Terrain::ChunkIndices Terrain::lookForIndicesLOD(int neighborLod[4], int selfLod, bool * result)
Terrain::ChunkIndices Terrain::insertIndicesLOD(int neighborLod[4], int selfLod, GLushort * indices,int size)
Terrain::ChunkIndices Terrain::lookForIndicesLODSkrit(int selfLod, bool * result)
Terrain::ChunkIndices Terrain::insertIndicesLODSkirt(int selfLod, GLushort * indices, int size)
void Terrain::setSkirtHeightRatio(float ratio)
void Terrain::onEnter()
void Terrain::cacheUniformAttribLocation()
bool Terrain::initTextures()
void Terrain::reload()
void Terrain::Chunk::finish()
void Terrain::Chunk::bindAndDraw()
void Terrain::Chunk::generate(int imgWidth, int imageHei, int m, int n, const unsigned char * data)
void Terrain::Chunk::updateIndicesLOD()
void Terrain::Chunk::calculateAABB()
void Terrain::Chunk::calculateSlope()
bool Terrain::Chunk::getInsterctPointWithRay(const Ray& ray, Vec3 &interscetPoint)
void Terrain::Chunk::updateVerticesForLOD()
void Terrain::Chunk::updateIndicesLODSkirt()
Terrain::QuadTree::QuadTree(int x, int y, int w, int h, Terrain * terrain)
void Terrain::QuadTree::draw()
void Terrain::QuadTree::resetNeedDraw(bool value)
void Terrain::QuadTree::cullByCamera(const Camera * camera, const Mat4 & worldTransform)
void Terrain::QuadTree::preCalculateAABB(const Mat4 & worldTransform)
Terrain::TerrainData::TerrainData(const char * heightMapsrc , const char * textureSrc, const Size & chunksize, float height, float scale)
Terrain::TerrainData::TerrainData(const char * heightMapsrc, const char * alphamap, const DetailMap& detail1, const DetailMap& detail2, const DetailMap& detail3, const DetailMap& detail4, const Size & chunksize, float height, float scale)
Terrain::TerrainData::TerrainData(const char* heightMapsrc, const char * alphamap, const DetailMap& detail1, const DetailMap& detail2, const DetailMap& detail3, const Size & chunksize /*= Size(32,32)*/, float height /*= 2*/, float scale /*= 0.1*/)
Terrain::DetailMap::DetailMap(const char * detailMapPath, float size /*= 35*/)
Terrain::Triangle::Triangle(Vec3 p1, Vec3 p2, Vec3 p3)
void Terrain::Triangle::transform(cocos2d::Mat4 matrix)
bool Terrain::Triangle::getInsterctPoint(const Ray &ray, Vec3& interScetPoint)const
bool AudioPlayer::init(SLEngineItf engineEngine, SLObjectItf outputMixObject,const std::string& fileFullPath, float volume, bool loop)
bool AudioEngineImpl::init()
int AudioEngineImpl::play2d(const std::string &filePath ,bool loop ,float volume)
void AudioEngineImpl::update(float dt)
void AudioEngineImpl::setVolume(int audioID,float volume)
void AudioEngineImpl::setLoop(int audioID, bool loop)
void AudioEngineImpl::pause(int audioID)
void AudioEngineImpl::resume(int audioID)
void AudioEngineImpl::stop(int audioID)
void AudioEngineImpl::stopAll()
float AudioEngineImpl::getDuration(int audioID)
float AudioEngineImpl::getCurrentTime(int audioID)
bool AudioEngineImpl::setCurrentTime(int audioID, float time)
void AudioEngineImpl::setFinishCallback(int audioID, const std::function<void (int, const std::string &)> &callback)
void AudioEngineImpl::preload(const std::string& filePath, std::function<void(bool)> callback)
std::string getFullPathWithoutAssetsPrefix(const char* pszFilename)
SimpleAudioEngine* SimpleAudioEngine::getInstance()
void SimpleAudioEngine::end()
void SimpleAudioEngine::preloadBackgroundMusic(const char* pszFilePath)
void SimpleAudioEngine::playBackgroundMusic(const char* pszFilePath, bool bLoop)
void SimpleAudioEngine::stopBackgroundMusic(bool bReleaseData)
void SimpleAudioEngine::pauseBackgroundMusic()
void SimpleAudioEngine::resumeBackgroundMusic()
void SimpleAudioEngine::rewindBackgroundMusic()
bool SimpleAudioEngine::willPlayBackgroundMusic()
bool SimpleAudioEngine::isBackgroundMusicPlaying()
float SimpleAudioEngine::getBackgroundMusicVolume()
void SimpleAudioEngine::setBackgroundMusicVolume(float volume)
float SimpleAudioEngine::getEffectsVolume()
void SimpleAudioEngine::setEffectsVolume(float volume)
void SimpleAudioEngine::pauseEffect(unsigned int nSoundId)
void SimpleAudioEngine::pauseAllEffects()
void SimpleAudioEngine::resumeEffect(unsigned int nSoundId)
void SimpleAudioEngine::resumeAllEffects()
void SimpleAudioEngine::stopEffect(unsigned int nSoundId)
void SimpleAudioEngine::stopAllEffects()
void SimpleAudioEngine::preloadEffect(const char* pszFilePath)
void SimpleAudioEngine::unloadEffect(const char* pszFilePath)
void AndroidJavaEngine::preloadBackgroundMusic(const char* filePath)
void AndroidJavaEngine::playBackgroundMusic(const char* filePath, bool loop)
void AndroidJavaEngine::stopBackgroundMusic(bool releaseData)
void AndroidJavaEngine::pauseBackgroundMusic()
void AndroidJavaEngine::resumeBackgroundMusic()
void AndroidJavaEngine::rewindBackgroundMusic()
bool AndroidJavaEngine::willPlayBackgroundMusic()
bool AndroidJavaEngine::isBackgroundMusicPlaying()
float AndroidJavaEngine::getBackgroundMusicVolume()
void AndroidJavaEngine::setBackgroundMusicVolume(float volume)
float AndroidJavaEngine::getEffectsVolume()
void AndroidJavaEngine::setEffectsVolume(float volume)
void AndroidJavaEngine::pauseEffect(unsigned int soundID)
void AndroidJavaEngine::resumeEffect(unsigned int soundID)
void AndroidJavaEngine::stopEffect(unsigned int soundID)
void AndroidJavaEngine::pauseAllEffects()
void AndroidJavaEngine::resumeAllEffects()
void AndroidJavaEngine::stopAllEffects()
void AndroidJavaEngine::preloadEffect(const char* filePath)
void AndroidJavaEngine::unloadEffect(const char* filePath)
class AudioEngine::AudioEngineThreadPool
void AudioEngine::end()
bool AudioEngine::lazyInit()
int AudioEngine::play2d(const std::string& filePath, bool loop, float volume, const AudioProfile *profile)
void AudioEngine::setLoop(int audioID, bool loop)
void AudioEngine::setVolume(int audioID, float volume)
void AudioEngine::pause(int audioID)
void AudioEngine::pauseAll()
void AudioEngine::resume(int audioID)
void AudioEngine::resumeAll()
void AudioEngine::stop(int audioID)
void AudioEngine::remove(int audioID)
void AudioEngine::stopAll()
void AudioEngine::uncache(const std::string &filePath)
void AudioEngine::uncacheAll()
float AudioEngine::getDuration(int audioID)
bool AudioEngine::setCurrentTime(int audioID, float time)
float AudioEngine::getCurrentTime(int audioID)
void AudioEngine::setFinishCallback(int audioID, const std::function<void (int, const std::string &)> &callback)
bool AudioEngine::setMaxAudioInstance(int maxInstances)
bool AudioEngine::isLoop(int audioID)
float AudioEngine::getVolume(int audioID)
AudioEngine::AudioState AudioEngine::getState(int audioID)
AudioProfile* AudioEngine::getProfile(int audioID)
AudioProfile* AudioEngine::getDefaultProfile()
AudioProfile* AudioEngine::getProfile(const std::string &name)
void AudioEngine::preload(const std::string& filePath, std::function<void(bool isSuccess)> callback)
void AudioEngine::addTask(const std::function<void()>& task)
void OpenALDecoder::installDecoders()
void OpenALDecoder::addDecoder(OpenALDecoder *decoder)
const std::vector<OpenALDecoder *> &OpenALDecoder::getDecoders()
void OpenALFile::clear()
bool OpenALFile::mapToMemory()
SimpleAudioEngine* SimpleAudioEngine::getInstance()
void SimpleAudioEngine::end()
void SimpleAudioEngine::preloadBackgroundMusic(const char* pszFilePath)
void SimpleAudioEngine::playBackgroundMusic(const char* pszFilePath, bool bLoop)
void SimpleAudioEngine::stopBackgroundMusic(bool bReleaseData)
void SimpleAudioEngine::pauseBackgroundMusic()
void SimpleAudioEngine::resumeBackgroundMusic()
void SimpleAudioEngine::rewindBackgroundMusic()
bool SimpleAudioEngine::willPlayBackgroundMusic()
bool SimpleAudioEngine::isBackgroundMusicPlaying()
float SimpleAudioEngine::getBackgroundMusicVolume()
void SimpleAudioEngine::setBackgroundMusicVolume(float volume)
float SimpleAudioEngine::getEffectsVolume()
void SimpleAudioEngine::setEffectsVolume(float volume)
void SimpleAudioEngine::stopEffect(unsigned int nSoundId)
void SimpleAudioEngine::preloadEffect(const char* pszFilePath)
void SimpleAudioEngine::unloadEffect(const char* pszFilePath)
void SimpleAudioEngine::pauseEffect(unsigned int nSoundId)
void SimpleAudioEngine::pauseAllEffects()
void SimpleAudioEngine::resumeEffect(unsigned int nSoundId)
void SimpleAudioEngine::resumeAllEffects()
void SimpleAudioEngine::stopAllEffects()
AudioCache::AudioCache(const AudioCache& cache)
void AudioCache::readDataTask()
void AudioCache::invokingPlayCallbacks()
void AudioCache::addPlayCallback(const std::function<void()>& callback)
void AudioCache::invokingLoadCallbacks()
void AudioCache::addLoadCallback(const std::function<void(bool)>& callback)
bool AudioEngineImpl::init()
AudioCache* AudioEngineImpl::preload(const std::string& filePath, std::function<void(bool)> callback)
int AudioEngineImpl::play2d(const std::string &filePath ,bool loop ,float volume)
void AudioEngineImpl::_play2d(AudioCache *cache, int audioID)
void AudioEngineImpl::setVolume(int audioID,float volume)
void AudioEngineImpl::setLoop(int audioID, bool loop)
bool AudioEngineImpl::pause(int audioID)
bool AudioEngineImpl::resume(int audioID)
bool AudioEngineImpl::stop(int audioID)
void AudioEngineImpl::stopAll()
float AudioEngineImpl::getDuration(int audioID)
float AudioEngineImpl::getCurrentTime(int audioID)
bool AudioEngineImpl::setCurrentTime(int audioID, float time)
void AudioEngineImpl::setFinishCallback(int audioID, const std::function<void (int, const std::string &)> &callback)
void AudioEngineImpl::update(float dt)
void AudioEngineImpl::uncache(const std::string &filePath)
void AudioEngineImpl::uncacheAll()
AudioPlayer::AudioPlayer(const AudioPlayer& player)
void AudioPlayer::notifyExitThread()
bool AudioPlayer::play2d(AudioCache* cache)
void AudioPlayer::rotateBufferThread(int offsetFrame)
bool AudioPlayer::setLoop(bool loop)
bool AudioPlayer::setTime(float time)
void MciPlayer::Open(const char* pFileName, UINT uId)
void MciPlayer::Play(UINT uTimes /* = 1 */)
void MciPlayer::Close()
void MciPlayer::Pause()
void MciPlayer::Resume()
void MciPlayer::Stop()
void MciPlayer::Rewind()
bool MciPlayer::IsPlaying()
UINT MciPlayer::GetSoundID()
void MciPlayer::_SendGenericCommand( int nCommand, DWORD_PTR param1 /*= 0*/, DWORD_PTR parma2 /*= 0*/ )
SimpleAudioEngine* SimpleAudioEngine::getInstance()
void SimpleAudioEngine::end()
void SimpleAudioEngine::playBackgroundMusic(const char* pszFilePath, bool bLoop)
void SimpleAudioEngine::stopBackgroundMusic(bool bReleaseData)
void SimpleAudioEngine::pauseBackgroundMusic()
void SimpleAudioEngine::resumeBackgroundMusic()
void SimpleAudioEngine::rewindBackgroundMusic()
bool SimpleAudioEngine::willPlayBackgroundMusic()
bool SimpleAudioEngine::isBackgroundMusicPlaying()
void SimpleAudioEngine::stopEffect(unsigned int nSoundId)
void SimpleAudioEngine::preloadEffect(const char* pszFilePath)
void SimpleAudioEngine::pauseEffect(unsigned int nSoundId)
void SimpleAudioEngine::pauseAllEffects()
void SimpleAudioEngine::resumeEffect(unsigned int nSoundId)
void SimpleAudioEngine::resumeAllEffects()
void SimpleAudioEngine::stopAllEffects()
void SimpleAudioEngine::preloadBackgroundMusic(const char* pszFilePath)
void SimpleAudioEngine::unloadEffect(const char* pszFilePath)
float SimpleAudioEngine::getBackgroundMusicVolume()
void SimpleAudioEngine::setBackgroundMusicVolume(float volume)
float SimpleAudioEngine::getEffectsVolume()
void SimpleAudioEngine::setEffectsVolume(float volume)
static std::string _FullPath(const char * szPath)
AllocatorDiagnostics* AllocatorDiagnostics::instance()
void AllocatorDiagnostics::trackAllocator(AllocatorBase* allocator)
void AllocatorDiagnostics::untrackAllocator(AllocatorBase* allocator)
std::string AllocatorDiagnostics::diagnostics()
void* operator new[] (std::size_t size)
void* operator new(std::size_t size)
AsyncTaskPool* AsyncTaskPool::getInstance()
void AsyncTaskPool::destoryInstance()
void AutoreleasePool::addObject(Ref* object)
void AutoreleasePool::clear()
bool AutoreleasePool::contains(Ref* object) const
void AutoreleasePool::dump()
PoolManager* PoolManager::getInstance()
void PoolManager::destroyInstance()
AutoreleasePool* PoolManager::getCurrentPool() const
bool PoolManager::isObjectInPools(Ref* obj) const
void PoolManager::push(AutoreleasePool *pool)
void PoolManager::pop()
bool Configuration::init()
std::string Configuration::getInfo() const
void Configuration::gatherGPUInfo()
Configuration* Configuration::getInstance()
void Configuration::destroyInstance()
Configuration* Configuration::sharedConfiguration()
void Configuration::purgeConfiguration()
bool Configuration::checkForGLExtension(const std::string &searchName) const
int Configuration::getMaxTextureSize() const
int Configuration::getMaxModelviewStackDepth() const
int Configuration::getMaxTextureUnits() const
bool Configuration::supportsNPOT() const
bool Configuration::supportsPVRTC() const
bool Configuration::supportsETC() const
bool Configuration::supportsS3TC() const
bool Configuration::supportsATITC() const
bool Configuration::supportsBGRA8888() const
bool Configuration::supportsDiscardFramebuffer() const
bool Configuration::supportsShareableVAO() const
int Configuration::getMaxSupportDirLightInShader() const
int Configuration::getMaxSupportPointLightInShader() const
int Configuration::getMaxSupportSpotLightInShader() const
Animate3DQuality Configuration::getAnimate3DQuality() const
const Value& Configuration::getValue(const std::string& key, const Value& defaultValue) const
void Configuration::setValue(const std::string& key, const Value& value)
void Configuration::loadConfigFile(const std::string& filename)
static std::string &ltrim(std::string &s)
static std::string &rtrim(std::string &s)
static std::string &trim(std::string &s)
static std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems)
static std::vector<std::string> split(const std::string &s, char delim)
static bool isFloat( std::string myString )
bool Console::listenOnTCP(int port)
bool Console::listenOnFileDescriptor(int fd)
void Console::stop()
void Console::addCommand(const Command& cmd)
void Console::commandHelp(int fd, const std::string &args)
void Console::commandExit(int fd, const std::string &args)
void Console::commandSceneGraph(int fd, const std::string &args)
void Console::commandFileUtils(int fd, const std::string &args)
void Console::commandConfig(int fd, const std::string& args)
void Console::commandResolution(int fd, const std::string& args)
void Console::commandProjection(int fd, const std::string& args)
void Console::commandTextures(int fd, const std::string& args)
void Console::commandDirector(int fd, const std::string& args)
void Console::commandTouch(int fd, const std::string& args)
void Console::commandAllocator(int fd, const std::string& args)
void Console::commandUpload(int fd)
ssize_t Console::readBytes(int fd, char* buffer, size_t maxlen, bool* more)
bool Console::parseCommand(int fd)
ssize_t Console::readline(int fd, char* ptr, size_t maxlen)
void Console::addClient()
void Console::log(const char* buf)
void Console::loop()
void Console::setBindAddress(const std::string &address)
void Controller::startDiscoveryController()
void Controller::stopDiscoveryController()
void Controller::registerListeners()
bool Controller::isConnected() const
void Controller::receiveExternalKeyEvent(int externalKeyCode,bool receive)
Controller* Controller::getControllerByTag(int tag)
void Controller::init()
const Controller::KeyStatus& Controller::getKeyStatus(int keyCode)
void Controller::onConnected()
void Controller::onDisconnected()
void Controller::onButtonEvent(int keyCode, bool isPressed, float value, bool isAnalog)
void Controller::onAxisEvent(int axisCode, float value, bool isAnalog)
void Data::move(Data& other)
bool Data::isNull() const
unsigned char* Data::getBytes() const
ssize_t Data::getSize() const
void Data::copy(const unsigned char* bytes, const ssize_t size)
void Data::fastSet(unsigned char* bytes, const ssize_t size)
void Data::clear()
void DataVisitor::visit(const __Bool *value)
void DataVisitor::visit(const __Integer *value)
void DataVisitor::visit(const __Float *value)
void DataVisitor::visit(const __Double *value)
void DataVisitor::visit(const __String *value)
void DataVisitor::visit(const __Array *value)
void DataVisitor::visit(const __Dictionary *value)
void DataVisitor::visit(const __Set *value)
PrettyPrinter::PrettyPrinter(int indentLevel/* = 0 */)
void PrettyPrinter::clear()
std::string PrettyPrinter::getResult()
void PrettyPrinter::visitObject(const Ref *p)
void PrettyPrinter::visit(const __Bool * p)
void PrettyPrinter::visit(const __Integer *p)
void PrettyPrinter::visit(const __Float *p)
void PrettyPrinter::visit(const __Double *p)
void PrettyPrinter::visit(const __String *p)
void PrettyPrinter::visit(const __Array *p)
void PrettyPrinter::visit(const __Dictionary *p)
void PrettyPrinter::visit(const __Set *p)
void PrettyPrinter::setIndentLevel(int indentLevel)
Director* Director::getInstance()
bool Director::init(void)
void Director::setDefaultValues(void)
void Director::setGLDefaultValues()
void Director::drawScene()
void Director::calculateDeltaTime()
float Director::getDeltaTime() const
void Director::setOpenGLView(GLView *openGLView)
TextureCache* Director::getTextureCache() const
void Director::initTextureCache()
void Director::destroyTextureCache()
void Director::setViewport()
void Director::setNextDeltaTimeZero(bool nextDeltaTimeZero)
void Director::initMatrixStack()
void Director::resetMatrixStack()
void Director::popMatrix(MATRIX_STACK_TYPE type)
void Director::loadIdentityMatrix(MATRIX_STACK_TYPE type)
void Director::loadMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)
void Director::multiplyMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)
void Director::pushMatrix(MATRIX_STACK_TYPE type)
const Mat4& Director::getMatrix(MATRIX_STACK_TYPE type)
void Director::setProjection(Projection projection)
void Director::purgeCachedData(void)
float Director::getZEye(void) const
void Director::setAlphaBlending(bool on)
void Director::setDepthTest(bool on)
void Director::setClearColor(const Color4F& clearColor)
Vec2 Director::convertToGL(const Vec2& uiPoint)
Vec2 Director::convertToUI(const Vec2& glPoint)
const Size& Director::getWinSize(void) const
Size Director::getWinSizeInPixels() const
Size Director::getVisibleSize() const
Vec2 Director::getVisibleOrigin() const
void Director::runWithScene(Scene *scene)
void Director::replaceScene(Scene *scene)
void Director::pushScene(Scene *scene)
void Director::popScene(void)
void Director::popToRootScene(void)
void Director::popToSceneStackLevel(int level)
void Director::end()
void Director::restart()
void Director::reset()
void Director::purgeDirector()
void Director::restartDirector()
void Director::setNextScene()
void Director::pause()
void Director::resume()
void Director::showStats()
void Director::calculateMPF()
void Director::getFPSImageData(unsigned char** datapointer, ssize_t* length)
void Director::createStatsLabel()
void Director::setContentScaleFactor(float scaleFactor)
void Director::setNotificationNode(Node *node)
void Director::setScheduler(Scheduler* scheduler)
void Director::setActionManager(ActionManager* actionManager)
void Director::setEventDispatcher(EventDispatcher* dispatcher)
void DisplayLinkDirector::startAnimation()
void DisplayLinkDirector::mainLoop()
void DisplayLinkDirector::stopAnimation()
void DisplayLinkDirector::setAnimationInterval(float interval)
static EventListener::ListenerID __getListenerID(Event* event)
size_t EventDispatcher::EventListenerVector::size() const
bool EventDispatcher::EventListenerVector::empty() const
void EventDispatcher::EventListenerVector::push_back(EventListener* listener)
void EventDispatcher::EventListenerVector::clearSceneGraphListeners()
void EventDispatcher::EventListenerVector::clearFixedListeners()
void EventDispatcher::EventListenerVector::clear()
void EventDispatcher::visitTarget(Node* node, bool isRootNode)
void EventDispatcher::pauseEventListenersForTarget(Node* target, bool recursive/* = false */)
void EventDispatcher::resumeEventListenersForTarget(Node* target, bool recursive/* = false */)
void EventDispatcher::removeEventListenersForTarget(Node* target, bool recursive/* = false */)
void EventDispatcher::associateNodeAndEventListener(Node* node, EventListener* listener)
void EventDispatcher::dissociateNodeAndEventListener(Node* node, EventListener* listener)
void EventDispatcher::addEventListener(EventListener* listener)
void EventDispatcher::forceAddEventListener(EventListener* listener)
void EventDispatcher::addEventListenerWithSceneGraphPriority(EventListener* listener, Node* node)
void EventDispatcher::debugCheckNodeHasNoEventListenersOnDestruction(Node* node)
void EventDispatcher::addEventListenerWithFixedPriority(EventListener* listener, int fixedPriority)
EventListenerCustom* EventDispatcher::addCustomEventListener(const std::string &eventName, const std::function<void(EventCustom*)>& callback)
void EventDispatcher::removeEventListener(EventListener* listener)
void EventDispatcher::setPriority(EventListener* listener, int fixedPriority)
void EventDispatcher::dispatchEventToListeners(EventListenerVector* listeners, const std::function<bool(EventListener*)>& onEvent)
void EventDispatcher::dispatchTouchEventToListeners(EventListenerVector* listeners, const std::function<bool(EventListener*)>& onEvent)
void EventDispatcher::dispatchEvent(Event* event)
void EventDispatcher::dispatchCustomEvent(const std::string &eventName, void *optionalUserData)
void EventDispatcher::dispatchTouchEvent(EventTouch* event)
void EventDispatcher::updateListeners(Event* event)
void EventDispatcher::updateDirtyFlagForSceneGraph()
void EventDispatcher::sortEventListeners(const EventListener::ListenerID& listenerID)
void EventDispatcher::sortEventListenersOfSceneGraphPriority(const EventListener::ListenerID& listenerID, Node* rootNode)
std::sort(sceneGraphListeners->begin(), sceneGraphListeners->end(), [this](const EventListener* l1, const EventListener* l2)
void EventDispatcher::sortEventListenersOfFixedPriority(const EventListener::ListenerID& listenerID)
std::sort(fixedListeners->begin(), fixedListeners->end(), [](const EventListener* l1, const EventListener* l2)
EventDispatcher::EventListenerVector* EventDispatcher::getListeners(const EventListener::ListenerID& listenerID)
void EventDispatcher::removeEventListenersForListenerID(const EventListener::ListenerID& listenerID)
void EventDispatcher::removeEventListenersForType(EventListener::Type listenerType)
void EventDispatcher::removeCustomEventListeners(const std::string& customEventName)
void EventDispatcher::removeAllEventListeners()
void EventDispatcher::setEnabled(bool isEnabled)
bool EventDispatcher::isEnabled() const
void EventDispatcher::setDirtyForNode(Node* node)
void EventDispatcher::setDirty(const EventListener::ListenerID& listenerID, DirtyFlag flag)
bool EventListener::init(Type t, const ListenerID& listenerID, const std::function<void(Event*)>& callback)
bool EventListener::checkAvailable()
EventListenerAcceleration* EventListenerAcceleration::create(const std::function<void(Acceleration*, Event*)>& callback)
bool EventListenerAcceleration::init(const std::function<void(Acceleration*, Event* event)>& callback)
EventListenerAcceleration* EventListenerAcceleration::clone()
bool EventListenerAcceleration::checkAvailable()
EventListenerController* EventListenerController::create()
bool EventListenerController::init()
bool EventListenerController::checkAvailable()
EventListenerController* EventListenerController::clone()
EventListenerCustom* EventListenerCustom::create(const std::string& eventName, const std::function<void(EventCustom*)>& callback)
bool EventListenerCustom::init(const ListenerID& listenerId, const std::function<void(EventCustom*)>& callback)
EventListenerCustom* EventListenerCustom::clone()
bool EventListenerCustom::checkAvailable()
EventListenerFocus* EventListenerFocus::create()
EventListenerFocus* EventListenerFocus::clone()
bool EventListenerFocus::init()
bool EventListenerFocus::checkAvailable()
bool EventListenerKeyboard::checkAvailable()
EventListenerKeyboard* EventListenerKeyboard::create()
EventListenerKeyboard* EventListenerKeyboard::clone()
bool EventListenerKeyboard::init()
bool EventListenerMouse::checkAvailable()
EventListenerMouse* EventListenerMouse::create()
EventListenerMouse* EventListenerMouse::clone()
bool EventListenerMouse::init()
bool EventListenerTouchOneByOne::init()
void EventListenerTouchOneByOne::setSwallowTouches(bool needSwallow)
bool EventListenerTouchOneByOne::isSwallowTouches()
EventListenerTouchOneByOne* EventListenerTouchOneByOne::create()
bool EventListenerTouchOneByOne::checkAvailable()
EventListenerTouchOneByOne* EventListenerTouchOneByOne::clone()
bool EventListenerTouchAllAtOnce::init()
EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce::create()
bool EventListenerTouchAllAtOnce::checkAvailable()
EventListenerTouchAllAtOnce* EventListenerTouchAllAtOnce::clone()
Vec2 EventMouse::getLocationInView() const
Vec2 EventMouse::getPreviousLocationInView() const
Vec2 EventMouse::getStartLocationInView() const
Vec2 EventMouse::getLocation() const
Vec2 EventMouse::getPreviousLocation() const
Vec2 EventMouse::getStartLocation() const
Vec2 EventMouse::getDelta() const
bool IMEDelegate::attachWithIME()
bool IMEDelegate::detachWithIME()
class IMEDispatcher::Impl
void IMEDispatcher::addDelegate(IMEDelegate* delegate)
bool IMEDispatcher::attachDelegateWithIME(IMEDelegate * delegate)
bool IMEDispatcher::detachDelegateWithIME(IMEDelegate * delegate)
void IMEDispatcher::removeDelegate(IMEDelegate* delegate)
void IMEDispatcher::dispatchInsertText(const char * text, size_t len)
void IMEDispatcher::dispatchDeleteBackward()
const std::string& IMEDispatcher::getContentText()
void IMEDispatcher::dispatchKeyboardWillShow(IMEKeyboardNotificationInfo& info)
void IMEDispatcher::dispatchKeyboardDidShow(IMEKeyboardNotificationInfo& info)
void IMEDispatcher::dispatchKeyboardWillHide(IMEKeyboardNotificationInfo& info)
void IMEDispatcher::dispatchKeyboardDidHide(IMEKeyboardNotificationInfo& info)
IMEDispatcher* IMEDispatcher::sharedDispatcher()
int NinePatchImageParser::getFrameHeight()const
int NinePatchImageParser::getFrameWidth()const
int NinePatchImageParser::getPixelOriginOffset(Direction direction)const
Vec2 NinePatchImageParser::parseHorizontalMargin()const
Vec2 NinePatchImageParser::parseVerticalMargin()const
Rect NinePatchImageParser::parseCapInset() const
void NinePatchImageParser::setSpriteFrameInfo(Image* image, const cocos2d::Rect& frameRect, bool rotated )
bool NinePatchImageParser::isNinePatchImage(const std::string& filepath)
static inline void split(const std::string& src, const std::string& token, strArray& vect)
static bool splitWithForm(const std::string& content, strArray& strs)
Rect RectFromString(const std::string& str)
Vec2 PointFromString(const std::string& str)
Size SizeFromString(const std::string& pszContent)
Profiler* Profiler::getInstance()
Profiler* Profiler::sharedProfiler(void)
ProfilingTimer* Profiler::createAndAddTimerWithName(const char* timerName)
void Profiler::releaseTimer(const char* timerName)
void Profiler::releaseAllTimers()
bool Profiler::init()
void Profiler::displayTimers()
bool ProfilingTimer::initWithName(const char* timerName)
std::string ProfilingTimer::getDescription() const
void ProfilingTimer::reset()
Properties* Properties::createNonRefCounted(const std::string& url)
void Properties::readProperties()
signed char Properties::readChar()
char* Properties::readLine(char* output, int num)
bool Properties::seekFromCurrent(int offset)
bool Properties::eof()
void Properties::skipWhiteSpace()
char* Properties::trimWhiteSpace(char *str)
void Properties::resolveInheritance(const char* id)
void Properties::mergeWith(Properties* overrides)
const char* Properties::getNextProperty()
Properties* Properties::getNextNamespace()
void Properties::rewind()
Properties* Properties::getNamespace(const char* id, bool searchNames, bool recurse) const
const char* Properties::getNamespace() const
const char* Properties::getId() const
bool Properties::exists(const char* name) const
Properties::Type Properties::getType(const char* name) const
const char* Properties::getString(const char* name, const char* defaultValue) const
bool Properties::setString(const char* name, const char* value)
bool Properties::getBool(const char* name, bool defaultValue) const
int Properties::getInt(const char* name) const
float Properties::getFloat(const char* name) const
long Properties::getLong(const char* name) const
bool Properties::getMat4(const char* name, Mat4* out) const
bool Properties::getVec2(const char* name, Vec2* out) const
bool Properties::getVec3(const char* name, Vec3* out) const
bool Properties::getVec4(const char* name, Vec4* out) const
bool Properties::getQuaternionFromAxisAngle(const char* name, Quaternion* out) const
bool Properties::getColor(const char* name, Vec3* out) const
bool Properties::getColor(const char* name, Vec4* out) const
bool Properties::getPath(const char* name, std::string* path) const
const char* Properties::getVariable(const char* name, const char* defaultValue) const
void Properties::setVariable(const char* name, const char* value)
Properties* Properties::clone()
void Properties::setDirectoryPath(const std::string* path)
void Properties::setDirectoryPath(const std::string& path)
void calculateNamespacePath(const std::string& urlString, std::string& fileString, std::vector<std::string>& namespacePath)
Properties* getPropertiesFromNamespacePath(Properties* properties, const std::vector<std::string>& namespacePath)
bool Properties::parseVec2(const char* str, Vec2* out)
bool Properties::parseVec3(const char* str, Vec3* out)
bool Properties::parseVec4(const char* str, Vec4* out)
bool Properties::parseAxisAngle(const char* str, Quaternion* out)
bool Properties::parseColor(const char* str, Vec3* out)
bool Properties::parseColor(const char* str, Vec4* out)
std::mt19937 &cocos2d::RandomHelper::getEngine()
void Ref::retain()
void Ref::release()
Ref* Ref::autorelease()
unsigned int Ref::getReferenceCount() const
void Ref::printLeaks()
void Timer::setupTimerWithInterval(float seconds, unsigned int repeat, float delay)
void Timer::update(float dt)
bool TimerTargetSelector::initWithSelector(Scheduler* scheduler, SEL_SCHEDULE selector, Ref* target, float seconds, unsigned int repeat, float delay)
void TimerTargetSelector::trigger(float dt)
void TimerTargetSelector::cancel()
bool TimerTargetCallback::initWithCallback(Scheduler* scheduler, const ccSchedulerFunc& callback, void *target, const std::string& key, float seconds, unsigned int repeat, float delay)
void TimerTargetCallback::trigger(float dt)
void TimerTargetCallback::cancel()
bool TimerScriptHandler::initWithScriptHandler(int handler, float seconds)
void TimerScriptHandler::trigger(float dt)
void TimerScriptHandler::cancel()
void Scheduler::removeHashElement(_hashSelectorEntry *element)
void Scheduler::schedule(const ccSchedulerFunc& callback, void *target, float interval, bool paused, const std::string& key)
void Scheduler::schedule(const ccSchedulerFunc& callback, void *target, float interval, unsigned int repeat, float delay, bool paused, const std::string& key)
void Scheduler::unschedule(const std::string &key, void *target)
void Scheduler::priorityIn(tListEntry **list, const ccSchedulerFunc& callback, void *target, int priority, bool paused)
void Scheduler::appendIn(_listEntry **list, const ccSchedulerFunc& callback, void *target, bool paused)
void Scheduler::schedulePerFrame(const ccSchedulerFunc& callback, void *target, int priority, bool paused)
bool Scheduler::isScheduled(const std::string& key, void *target)
void Scheduler::removeUpdateFromHash(struct _listEntry *entry)
void Scheduler::unscheduleUpdate(void *target)
void Scheduler::unscheduleAll(void)
void Scheduler::unscheduleAllWithMinPriority(int minPriority)
void Scheduler::unscheduleAllForTarget(void *target)
unsigned int Scheduler::scheduleScriptFunc(unsigned int handler, float interval, bool paused)
void Scheduler::unscheduleScriptEntry(unsigned int scheduleScriptEntryID)
void Scheduler::resumeTarget(void *target)
void Scheduler::pauseTarget(void *target)
bool Scheduler::isTargetPaused(void *target)
std::set<void*> Scheduler::pauseAllTargets()
std::set<void*> Scheduler::pauseAllTargetsWithMinPriority(int minPriority)
void Scheduler::resumeTargets(const std::set<void*>& targetsToResume)
void Scheduler::performFunctionInCocosThread(const std::function<void ()> &function)
void Scheduler::update(float dt)
void Scheduler::schedule(SEL_SCHEDULE selector, Ref *target, float interval, unsigned int repeat, float delay, bool paused)
void Scheduler::schedule(SEL_SCHEDULE selector, Ref *target, float interval, bool paused)
bool Scheduler::isScheduled(SEL_SCHEDULE selector, Ref *target)
void Scheduler::unschedule(SEL_SCHEDULE selector, Ref *target)
ScriptHandlerEntry* ScriptHandlerEntry::create(int handler)
SchedulerScriptHandlerEntry* SchedulerScriptHandlerEntry::create(int handler, float interval, bool paused)
bool SchedulerScriptHandlerEntry::init(float interval, bool paused)
bool TouchScriptHandlerEntry::init(bool isMultiTouches, int priority, bool swallowsTouches)
void ScriptEngineManager::setScriptEngine(ScriptEngineProtocol *scriptEngine)
void ScriptEngineManager::removeScriptEngine(void)
ScriptEngineManager* ScriptEngineManager::getInstance()
void ScriptEngineManager::destroyInstance()
bool ScriptEngineManager::sendNodeEventToJS(Node* node, int action)
bool ScriptEngineManager::sendNodeEventToJSExtended(Node* node, int action)
void ScriptEngineManager::sendNodeEventToLua(Node* node, int action)
Vec2 Touch::getLocationInView() const
Vec2 Touch::getPreviousLocationInView() const
Vec2 Touch::getStartLocationInView() const
Vec2 Touch::getLocation() const
Vec2 Touch::getPreviousLocation() const
Vec2 Touch::getStartLocation() const
Vec2 Touch::getDelta() const
static tinyxml2::XMLElement* getXMLNodeForKey(const char* pKey, tinyxml2::XMLDocument **doc)
static void deleteNode(tinyxml2::XMLDocument* doc, tinyxml2::XMLElement* node)
void UserDefault::purgeSharedUserDefault()
void UserDefault::destroyInstance()
bool UserDefault::getBoolForKey(const char* pKey)
bool UserDefault::getBoolForKey(const char* pKey, bool defaultValue)
int UserDefault::getIntegerForKey(const char* pKey)
int UserDefault::getIntegerForKey(const char* pKey, int defaultValue)
float UserDefault::getFloatForKey(const char* pKey)
float UserDefault::getFloatForKey(const char* pKey, float defaultValue)
double  UserDefault::getDoubleForKey(const char* pKey)
double UserDefault::getDoubleForKey(const char* pKey, double defaultValue)
std::string UserDefault::getStringForKey(const char* pKey)
string UserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)
Data UserDefault::getDataForKey(const char* pKey)
Data UserDefault::getDataForKey(const char* pKey, const Data& defaultValue)
void UserDefault::setBoolForKey(const char* pKey, bool value)
void UserDefault::setIntegerForKey(const char* pKey, int value)
void UserDefault::setFloatForKey(const char* pKey, float value)
void UserDefault::setDoubleForKey(const char* pKey, double value)
void UserDefault::setStringForKey(const char* pKey, const std::string & value)
void UserDefault::setDataForKey(const char* pKey, const Data& value)
UserDefault* UserDefault::sharedUserDefault()
UserDefault* UserDefault::getInstance()
bool UserDefault::isXMLFileExist()
void UserDefault::initXMLFilePath()
bool UserDefault::createXMLFile()
const string& UserDefault::getXMLFilePath()
void UserDefault::flush()
void UserDefault::deleteValueForKey(const char* key)
static tinyxml2::XMLElement* getXMLNodeForKey(const char* pKey, tinyxml2::XMLElement** rootNode, tinyxml2::XMLDocument **doc)
bool UserDefault::getBoolForKey(const char* pKey)
bool UserDefault::getBoolForKey(const char* pKey, bool defaultValue)
int UserDefault::getIntegerForKey(const char* pKey)
int UserDefault::getIntegerForKey(const char* pKey, int defaultValue)
float UserDefault::getFloatForKey(const char* pKey)
float UserDefault::getFloatForKey(const char* pKey, float defaultValue)
double  UserDefault::getDoubleForKey(const char* pKey)
double UserDefault::getDoubleForKey(const char* pKey, double defaultValue)
std::string UserDefault::getStringForKey(const char* pKey)
string UserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)
Data UserDefault::getDataForKey(const char* pKey)
Data UserDefault::getDataForKey(const char* pKey, const Data& defaultValue)
void UserDefault::setBoolForKey(const char* pKey, bool value)
void UserDefault::setIntegerForKey(const char* pKey, int value)
void UserDefault::setFloatForKey(const char* pKey, float value)
void UserDefault::setDoubleForKey(const char* pKey, double value)
void UserDefault::setStringForKey(const char* pKey, const std::string & value)
void UserDefault::setDataForKey(const char* pKey, const Data& value)
UserDefault* UserDefault::getInstance()
void UserDefault::destroyInstance()
void UserDefault::setDelegate(UserDefault *delegate)
UserDefault* UserDefault::sharedUserDefault()
void UserDefault::purgeSharedUserDefault()
bool UserDefault::isXMLFileExist()
void UserDefault::initXMLFilePath()
bool UserDefault::createXMLFile()
const string& UserDefault::getXMLFilePath()
void UserDefault::flush()
void UserDefault::deleteValueForKey(const char* key)
unsigned int getIndexOfLastNotChar16(const std::vector<char16_t>& str, char16_t c)
static void trimUTF16VectorFromIndex(std::vector<char16_t>& str, int index)
void trimUTF16Vector(std::vector<char16_t>& str)
bool UTF8ToUTF16(const std::string& utf8, std::u16string& outUtf16)
bool UTF16ToUTF8(const std::u16string& utf16, std::string& outUtf8)
std::string getStringUTFCharsJNI(JNIEnv* env, jstring srcjStr, bool* ret)
jstring newStringUTFJNI(JNIEnv* env, std::string utf8Str, bool* ret)
std::vector<char16_t> getChar16VectorFromUTF16String(const std::u16string& utf16)
long getCharacterCountInUTF8String(const std::string& utf8)
void cc_utf8_trim_ws(std::vector<unsigned short>* str)
unsigned int cc_utf8_find_last_not_char(const std::vector<unsigned short>& str, unsigned short c)
std::vector<unsigned short> cc_utf16_vec_from_utf16_str(const unsigned short* str)
void onCaptureScreen(const std::function<void(bool, const std::string&)>& afterCaptured, const std::string& filename)
std::shared_ptr<GLubyte> flippedBuffer(new GLubyte[width * height * 4], [](GLubyte* p)
void captureScreen(const std::function<void(bool, const std::string&)>& afterCaptured, const std::string& filename)
std::vector<Node*> findChildren(const Node &node, const std::string &name)
unsigned char Value::asByte() const
int Value::asInt() const
float Value::asFloat() const
double Value::asDouble() const
bool Value::asBool() const
std::string Value::asString() const
ValueVector& Value::asValueVector()
const ValueVector& Value::asValueVector() const
ValueMap& Value::asValueMap()
const ValueMap& Value::asValueMap() const
ValueMapIntKey& Value::asIntKeyMap()
const ValueMapIntKey& Value::asIntKeyMap() const
static std::string getTabs(int depth)
static std::string visitVector(const ValueVector& v, int depth)
static std::string visitMap(const T& v, int depth)
static std::string visit(const Value& v, int depth)
std::string Value::getDescription() const
void Value::clear()
void Value::reset(Type type)
ObjectFactory::TInfo::TInfo(const TInfo &t)
ObjectFactory* ObjectFactory::getInstance()
void ObjectFactory::destroyInstance()
Ref* ObjectFactory::createObject(const std::string &name)
void ObjectFactory::registerType(const TInfo &t)
inline void ZipUtils::decodeEncodedPvr(unsigned int *data, ssize_t len)
inline unsigned int ZipUtils::checksumPvr(const unsigned int *data, ssize_t len)
int ZipUtils::inflateMemoryWithHint(unsigned char *in, ssize_t inLength, unsigned char **out, ssize_t *outLength, ssize_t outLenghtHint)
ssize_t ZipUtils::inflateMemoryWithHint(unsigned char *in, ssize_t inLength, unsigned char **out, ssize_t outLengthHint)
ssize_t ZipUtils::inflateMemory(unsigned char *in, ssize_t inLength, unsigned char **out)
int ZipUtils::inflateGZipFile(const char *path, unsigned char **out)
bool ZipUtils::isCCZFile(const char *path)
bool ZipUtils::isCCZBuffer(const unsigned char *buffer, ssize_t len)
bool ZipUtils::isGZipFile(const char *path)
bool ZipUtils::isGZipBuffer(const unsigned char *buffer, ssize_t len)
int ZipUtils::inflateCCZBuffer(const unsigned char *buffer, ssize_t bufferLen, unsigned char **out)
int ZipUtils::inflateCCZFile(const char *path, unsigned char **out)
void ZipUtils::setPvrEncryptionKeyPart(int index, unsigned int value)
void ZipUtils::setPvrEncryptionKey(unsigned int keyPart1, unsigned int keyPart2, unsigned int keyPart3, unsigned int keyPart4)
ZipFile *ZipFile::createWithBuffer(const void* buffer, uLong size)
bool ZipFile::setFilter(const std::string &filter)
bool ZipFile::fileExists(const std::string &fileName) const
unsigned char *ZipFile::getFileData(const std::string &fileName, ssize_t *size)
std::string ZipFile::getFirstFilename()
std::string ZipFile::getNextFilename()
int ZipFile::getCurrentFileInfo(std::string *filename, unz_file_info *info)
bool ZipFile::initWithBuffer(const void *buffer, uLong size)
__Array* __Array::create()
__Array* __Array::createWithObject(Ref* object)
__Array* __Array::create(Ref* object, ...)
__Array* __Array::createWithArray(__Array* otherArray)
__Array* __Array::createWithCapacity(int capacity)
__Array* __Array::createWithContentsOfFile(const std::string& fileName)
__Array* __Array::createWithContentsOfFileThreadSafe(const std::string& fileName)
bool __Array::init()
bool __Array::initWithObject(Ref* object)
bool __Array::initWithObjects(Ref* object, ...)
bool __Array::initWithCapacity(int capacity)
bool __Array::initWithArray(__Array* otherArray)
ssize_t __Array::getIndexOfObject(Ref* object) const
Ref*  __Array::getRandomObject()
bool __Array::containsObject(Ref* object) const
bool __Array::isEqualToArray(__Array* otherArray)
void __Array::addObject(Ref* object)
void __Array::addObjectsFromArray(__Array* otherArray)
void __Array::insertObject(Ref* object, int index)
void __Array::setObject(Ref* object, int index)
void __Array::removeLastObject(bool releaseObj)
void __Array::removeObject(Ref* object, bool releaseObj /* ignored */)
void __Array::removeObjectAtIndex(ssize_t index, bool releaseObj /* ignored */)
void __Array::removeObjectsInArray(__Array* otherArray)
void __Array::removeAllObjects()
void __Array::fastRemoveObjectAtIndex(int index)
void __Array::fastRemoveObject(Ref* object)
void __Array::exchangeObject(Ref* object1, Ref* object2)
void __Array::exchangeObjectAtIndex(ssize_t index1, ssize_t index2)
void __Array::replaceObjectAtIndex(int index, Ref* object, bool releaseObject /* ignored */)
void __Array::reverseObjects()
void __Array::reduceMemoryFootprint()
__Array* __Array::clone() const
void __Array::acceptVisitor(DataVisitor &visitor)
__Array* __Array::create()
__Array* __Array::createWithObject(Ref* object)
__Array* __Array::create(Ref* object, ...)
__Array* __Array::createWithArray(__Array* otherArray)
__Array* __Array::createWithCapacity(ssize_t capacity)
__Array* __Array::createWithContentsOfFile(const std::string& fileName)
__Array* __Array::createWithContentsOfFileThreadSafe(const std::string& fileName)
bool __Array::init()
bool __Array::initWithObject(Ref* object)
bool __Array::initWithObjects(Ref* object, ...)
bool __Array::initWithCapacity(ssize_t capacity)
bool __Array::initWithArray(__Array* otherArray)
ssize_t __Array::getIndexOfObject(Ref* object) const
Ref* __Array::getRandomObject()
bool __Array::containsObject(Ref* object) const
bool __Array::isEqualToArray(__Array* otherArray)
void __Array::addObject(Ref* object)
void __Array::addObjectsFromArray(__Array* otherArray)
void __Array::insertObject(Ref* object, ssize_t index)
void __Array::setObject(Ref* object, ssize_t index)
void __Array::removeLastObject(bool releaseObj)
void __Array::removeObject(Ref* object, bool releaseObj/* = true*/)
void __Array::removeObjectAtIndex(ssize_t index, bool releaseObj)
void __Array::removeObjectsInArray(__Array* otherArray)
void __Array::removeAllObjects()
void __Array::fastRemoveObjectAtIndex(ssize_t index)
void __Array::fastRemoveObject(Ref* object)
void __Array::exchangeObject(Ref* object1, Ref* object2)
void __Array::exchangeObjectAtIndex(ssize_t index1, ssize_t index2)
void __Array::replaceObjectAtIndex(ssize_t index, Ref* object, bool releaseObject/* = true*/)
void __Array::reverseObjects()
void __Array::reduceMemoryFootprint()
__Array* __Array::clone() const
void __Array::acceptVisitor(DataVisitor &visitor)
DictElement::DictElement(const char* pszKey, Ref* pObject)
DictElement::DictElement(intptr_t iKey, Ref* pObject)
unsigned int __Dictionary::count()
__Array* __Dictionary::allKeys()
__Array* __Dictionary::allKeysForObject(Ref* object)
Ref* __Dictionary::objectForKey(const std::string& key)
Ref* __Dictionary::objectForKey(intptr_t key)
const __String* __Dictionary::valueForKey(const std::string& key)
const __String* __Dictionary::valueForKey(intptr_t key)
void __Dictionary::setObject(Ref* pObject, const std::string& key)
void __Dictionary::setObject(Ref* pObject, intptr_t key)
void __Dictionary::removeObjectForKey(const std::string& key)
void __Dictionary::removeObjectForKey(intptr_t key)
void __Dictionary::setObjectUnSafe(Ref* pObject, const std::string& key)
void __Dictionary::setObjectUnSafe(Ref* pObject, const intptr_t key)
void __Dictionary::removeObjectsForKeys(__Array* pKey__Array)
void __Dictionary::removeObjectForElememt(DictElement* pElement)
void __Dictionary::removeAllObjects()
Ref* __Dictionary::randomObject()
__Dictionary* __Dictionary::create()
bool __Dictionary::init()
__Dictionary* __Dictionary::createWithDictionary(__Dictionary* srcDict)
__Dictionary* __Dictionary::createWithContentsOfFileThreadSafe(const char *pFileName)
void __Dictionary::acceptVisitor(DataVisitor &visitor)
__Dictionary* __Dictionary::createWithContentsOfFile(const char *pFileName)
bool __Dictionary::writeToFile(const char *fullPath)
__Dictionary* __Dictionary::clone() const
__NotificationCenter *__NotificationCenter::getInstance()
void __NotificationCenter::destroyInstance()
__NotificationCenter *__NotificationCenter::sharedNotificationCenter(void)
void __NotificationCenter::purgeNotificationCenter(void)
bool __NotificationCenter::observerExisted(Ref *target, const std::string& name, Ref *sender)
void __NotificationCenter::removeObserver(Ref *target, const std::string& name)
int __NotificationCenter::removeAllObservers(Ref *target)
void __NotificationCenter::registerScriptObserver(Ref *target, int handler,const std::string& name)
void __NotificationCenter::unregisterScriptObserver(Ref *target,const std::string& name)
void __NotificationCenter::postNotification(const std::string& name, Ref *sender)
void __NotificationCenter::postNotification(const std::string& name)
int __NotificationCenter::getObserverHandlerByName(const std::string& name)
void NotificationObserver::performSelector(Ref *sender)
Ref *NotificationObserver::getTarget() const
SEL_CallFuncO NotificationObserver::getSelector() const
const std::string& NotificationObserver::getName() const
Ref* NotificationObserver::getSender() const
int NotificationObserver::getHandler() const
void NotificationObserver::setHandler(int var)
__Set::__Set(const __Set &other)
void __Set::acceptVisitor(DataVisitor &visitor)
__Set * __Set::create()
__Set* __Set::copy(void)
__Set* __Set::mutableCopy(void)
int __Set::count(void)
void __Set::addObject(Ref *pObject)
void __Set::removeObject(Ref *pObject)
void __Set::removeAllObjects()
bool __Set::containsObject(Ref *pObject)
__SetIterator __Set::begin(void)
__SetIterator __Set::end(void)
Ref* __Set::anyObject()
bool __String::initWithFormatAndValist(const char* format, va_list ap)
bool __String::initWithFormat(const char* format, ...)
int __String::intValue() const
unsigned int __String::uintValue() const
float __String::floatValue() const
double __String::doubleValue() const
bool __String::boolValue() const
const char* __String::getCString() const
int __String::length() const
int __String::compare(const char * pStr) const
void __String::append(const std::string& str)
void __String::appendWithFormat(const char* format, ...)
__Array* __String::componentsSeparatedByString(const char *delimiter)
bool __String::isEqual(const Ref* pObject)
__String* __String::create(const std::string& str)
__String* __String::createWithData(const unsigned char* data, size_t nLen)
__String* __String::createWithFormat(const char* format, ...)
__String* __String::createWithContentsOfFile(const std::string &filename)
void __String::acceptVisitor(DataVisitor &visitor)
__String* __String::clone() const
std::string format(const char* format, ...)
bool CCBAnimationManager::init()
Vector<CCBSequence*>& CCBAnimationManager::getSequences()
void CCBAnimationManager::setSequences(const Vector<CCBSequence*>& seq)
int CCBAnimationManager::getAutoPlaySequenceId()
void CCBAnimationManager::setAutoPlaySequenceId(int autoPlaySequenceId)
Node* CCBAnimationManager::getRootNode()
void CCBAnimationManager::setRootNode(Node *pRootNode)
void CCBAnimationManager::setDocumentControllerName(const std::string &name)
std::string CCBAnimationManager::getDocumentControllerName()
void CCBAnimationManager::addDocumentCallbackNode(Node *node)
void CCBAnimationManager::addDocumentCallbackName(std::string name)
void CCBAnimationManager::addDocumentCallbackControlEvents(Control::EventType eventType)
ValueVector& CCBAnimationManager::getDocumentCallbackNames()
Vector<Node*>& CCBAnimationManager::getDocumentCallbackNodes()
ValueVector& CCBAnimationManager::getDocumentCallbackControlEvents()
void CCBAnimationManager::addDocumentOutletNode(Node *node)
void CCBAnimationManager::addDocumentOutletName(std::string name)
ValueVector& CCBAnimationManager::getDocumentOutletNames()
Vector<Node*>& CCBAnimationManager::getDocumentOutletNodes()
std::string CCBAnimationManager::getLastCompletedSequenceName()
ValueVector& CCBAnimationManager::getKeyframeCallbacks()
const Size& CCBAnimationManager::getRootContainerSize()
void CCBAnimationManager::setRootContainerSize(const Size &rootContainerSize)
CCBAnimationManagerDelegate* CCBAnimationManager::getDelegate()
void CCBAnimationManager::setDelegate(CCBAnimationManagerDelegate *pDelegate)
const char* CCBAnimationManager::getRunningSequenceName()
const Size& CCBAnimationManager::getContainerSize(Node *pNode)
void CCBAnimationManager::addNode(Node *pNode, const std::unordered_map<int, Map<std::string, CCBSequenceProperty*>>& seq)
void CCBAnimationManager::setBaseValue(const Value& value, Node *pNode, const std::string& propName)
const Value& CCBAnimationManager::getBaseValue(Node *pNode, const std::string& propName)
void CCBAnimationManager::setObject(Ref* obj, Node *pNode, const std::string& propName)
Ref* CCBAnimationManager::getObject(Node *pNode, const std::string& propName)
int CCBAnimationManager::getSequenceId(const char* pSequenceName)
CCBSequence* CCBAnimationManager::getSequence(int nSequenceId)
float CCBAnimationManager::getSequenceDuration(const char *pSequenceName)
void CCBAnimationManager::moveAnimationsFromNode(Node* fromNode, Node* toNode)
ActionInterval* CCBAnimationManager::getAction(CCBKeyframe *pKeyframe0, CCBKeyframe *pKeyframe1, const std::string& propName, Node *pNode)
void CCBAnimationManager::setAnimatedProperty(const std::string& propName, Node *pNode, const Value& value, Ref* obj, float fTweenDuration)
void CCBAnimationManager::setFirstFrame(Node *pNode, CCBSequenceProperty *pSeqProp, float fTweenDuration)
ActionInterval* CCBAnimationManager::getEaseAction(ActionInterval *pAction, CCBKeyframe::EasingType easingType, float fEasingOpt)
Sequence*  CCBAnimationManager::actionForCallbackChannel(CCBSequenceProperty* channel)
Sequence*  CCBAnimationManager::actionForSoundChannel(CCBSequenceProperty* channel)
void CCBAnimationManager::runAction(Node *pNode, CCBSequenceProperty *pSeqProp, float fTweenDuration)
void CCBAnimationManager::runAnimations(const char *pName, float fTweenDuration)
void CCBAnimationManager::runAnimations(const char *pName)
void CCBAnimationManager::runAnimations(int nSeqId, float fTweenDuraiton)
void CCBAnimationManager::runAnimationsForSequenceIdTweenDuration(int nSeqId, float fTweenDuration)
void CCBAnimationManager::runAnimationsForSequenceNamedTweenDuration(const char *pName, float fTweenDuration)
void CCBAnimationManager::runAnimationsForSequenceNamed(const char *pName)
void CCBAnimationManager::debug()
void CCBAnimationManager::setAnimationCompletedCallback(Ref *target, SEL_CallFunc callbackFunc)
void CCBAnimationManager::setCallFunc(CallFunc* callFunc, const std::string &callbackNamed)
void CCBAnimationManager::sequenceCompleted()
CCBSetSpriteFrame* CCBSetSpriteFrame::create(SpriteFrame *pSpriteFrame)
bool CCBSetSpriteFrame::initWithSpriteFrame(SpriteFrame *pSpriteFrame)
CCBSetSpriteFrame* CCBSetSpriteFrame::clone() const
CCBSetSpriteFrame* CCBSetSpriteFrame::reverse() const
void CCBSetSpriteFrame::update(float time)
CCBSoundEffect* CCBSoundEffect::actionWithSoundFile(const std::string &filename, float pitch, float pan, float gain)
bool CCBSoundEffect::initWithSoundFile(const std::string &filename, float pitch, float pan, float gain)
CCBSoundEffect* CCBSoundEffect::clone() const
CCBSoundEffect* CCBSoundEffect::reverse() const
void CCBSoundEffect::update(float time)
CCBRotateTo* CCBRotateTo::create(float fDuration, float fAngle)
bool CCBRotateTo::initWithDuration(float fDuration, float fAngle)
CCBRotateTo* CCBRotateTo::clone() const
CCBRotateTo* CCBRotateTo::reverse() const
void CCBRotateTo::startWithTarget(Node *pNode)
void CCBRotateTo::update(float time)
CCBRotateXTo* CCBRotateXTo::create(float fDuration, float fAngle)
bool CCBRotateXTo::initWithDuration(float fDuration, float fAngle)
void CCBRotateXTo::startWithTarget(Node *pNode)
CCBRotateXTo* CCBRotateXTo::clone() const
CCBRotateXTo* CCBRotateXTo::reverse() const
void CCBRotateXTo::update(float time)
CCBRotateYTo* CCBRotateYTo::create(float fDuration, float fAngle)
bool CCBRotateYTo::initWithDuration(float fDuration, float fAngle)
CCBRotateYTo* CCBRotateYTo::clone() const
CCBRotateYTo* CCBRotateYTo::reverse() const
void CCBRotateYTo::startWithTarget(Node *pNode)
void CCBRotateYTo::update(float time)
CCBEaseInstant* CCBEaseInstant::create(ActionInterval *pAction)
CCBEaseInstant* CCBEaseInstant::clone() const
CCBEaseInstant* CCBEaseInstant::reverse() const
void CCBEaseInstant::update(float dt)
void CCBFileLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char * pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)
const Value& CCBKeyframe::getValue() const
void CCBKeyframe::setValue(const Value& value)
Ref* CCBKeyframe::getObject() const
void CCBKeyframe::setObject(Ref* obj)
float CCBKeyframe::getTime()
void CCBKeyframe::setTime(float fTime)
CCBKeyframe::EasingType CCBKeyframe::getEasingType()
void CCBKeyframe::setEasingType(CCBKeyframe::EasingType easingType)
float CCBKeyframe::getEasingOpt()
void CCBKeyframe::setEasingOpt(float fEasingOpt)
CCBFile* CCBFile::create()
Node* CCBFile::getCCBFileNode()
void CCBFile::setCCBFileNode(Node *pNode)
void CCBReader::setCCBRootPath(const char* ccbRootPath)
const std::string& CCBReader::getCCBRootPath() const
bool CCBReader::init()
CCBAnimationManager* CCBReader::getAnimationManager()
void CCBReader::setAnimationManager(CCBAnimationManager *pAnimationManager)
CCBReader::CCBAnimationManagerMapPtr CCBReader::getAnimationManagers()
void CCBReader::setAnimationManagers(CCBAnimationManagerMapPtr x)
CCBMemberVariableAssigner * CCBReader::getCCBMemberVariableAssigner()
CCBSelectorResolver * CCBReader::getCCBSelectorResolver()
std::set<std::string>* CCBReader::getAnimatedProperties()
std::set<std::string>& CCBReader::getLoadedSpriteSheet()
Ref*  CCBReader::getOwner()
Node* CCBReader::readNodeGraphFromFile(const char *pCCBFileName)
Node* CCBReader::readNodeGraphFromFile(const char* pCCBFileName, Ref* pOwner)
Node* CCBReader::readNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner, const Size &parentSize)
Node* CCBReader::readNodeGraphFromData(std::shared_ptr<cocos2d::Data> data, Ref *pOwner, const Size &parentSize)
Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName)
Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner)
Scene* CCBReader::createSceneWithNodeGraphFromFile(const char *pCCBFileName, Ref *pOwner, const Size &parentSize)
void CCBReader::cleanUpNodeGraph(Node *node)
Node* CCBReader::readFileWithCleanUp(bool bCleanUp, CCBAnimationManagerMapPtr am)
bool CCBReader::readStringCache()
bool CCBReader::readHeader()
unsigned char CCBReader::readByte()
bool CCBReader::readBool()
std::string CCBReader::readUTF8()
bool CCBReader::getBit()
void CCBReader::alignBits()
int CCBReader::readInt(bool pSigned)
float CCBReader::readFloat()
std::string CCBReader::readCachedString()
Node * CCBReader::readNodeGraph(Node * pParent)
CCBKeyframe* CCBReader::readKeyframe(PropertyType type)
bool CCBReader::readCallbackKeyframesForSeq(CCBSequence* seq)
bool CCBReader::readSoundKeyframesForSeq(CCBSequence* seq)
Node * CCBReader::readNodeGraph()
bool CCBReader::readSequences()
std::string CCBReader::lastPathComponent(const char* pPath)
std::string CCBReader::deletePathExtension(const char* pPath)
std::string CCBReader::toLowerCase(const char* pString)
bool CCBReader::endsWith(const char* pString, const char* pEnding)
bool CCBReader::isJSControlled()
void CCBReader::addOwnerCallbackName(const std::string& name)
void CCBReader::addOwnerCallbackNode(Node *node)
void CCBReader::addOwnerCallbackControlEvents(Control::EventType type)
void CCBReader::addDocumentCallbackName(const std::string& name)
void CCBReader::addDocumentCallbackNode(Node *node)
void CCBReader::addDocumentCallbackControlEvents(Control::EventType eventType)
ValueVector CCBReader::getOwnerCallbackNames()
Vector<Node*>& CCBReader::getOwnerCallbackNodes()
ValueVector& CCBReader::getOwnerCallbackControlEvents()
ValueVector CCBReader::getOwnerOutletNames()
Vector<Node*>& CCBReader::getOwnerOutletNodes()
Vector<Node*>& CCBReader::getNodesWithAnimationManagers()
Vector<CCBAnimationManager*>& CCBReader::getAnimationManagersForNodes()
void CCBReader::addOwnerOutletName(std::string name)
void CCBReader::addOwnerOutletNode(Node *node)
float CCBReader::getResolutionScale()
void CCBReader::setResolutionScale(float scale)
float CCBSequence::getDuration()
void CCBSequence::setDuration(float fDuration)
const char* CCBSequence::getName()
void CCBSequence::setName(const char *pName)
int CCBSequence::getSequenceId()
void CCBSequence::setSequenceId(int nSequenceId)
CCBSequenceProperty* CCBSequence::getCallbackChannel()
void CCBSequence::setCallbackChannel(CCBSequenceProperty* callbackChannel)
CCBSequenceProperty* CCBSequence::getSoundChannel()
void CCBSequence::setSoundChannel(CCBSequenceProperty* soundChannel)
int CCBSequence::getChainedSequenceId()
void CCBSequence::setChainedSequenceId(int nChainedSequenceId)
bool CCBSequenceProperty::init()
const char* CCBSequenceProperty::getName()
void CCBSequenceProperty::setName(const char *pName)
int CCBSequenceProperty::getType()
void CCBSequenceProperty::setType(int type)
cocos2d::Vector<CCBKeyframe*>& CCBSequenceProperty::getKeyframes()
void ControlButtonLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)
void ControlButtonLoader::onHandlePropTypeString(Node * pNode, Node * pParent, const char * pPropertyName, const char * pString, CCBReader * ccbReader)
void ControlButtonLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char * pPropertyName, const char * pFontTTF, CCBReader * ccbReader)
void ControlButtonLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char * pPropertyName, float pFloatScale, CCBReader * ccbReader)
void ControlButtonLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)
void ControlButtonLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)
void ControlButtonLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)
void ControlButtonLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)
void ControlLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)
void ControlLoader::onHandlePropTypeBlockControl(Node * pNode, Node * pParent, const char * pPropertyName, BlockControlData * pBlockControlData, CCBReader * ccbReader)
void LabelBMFontLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)
void LabelBMFontLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)
void LabelBMFontLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)
void LabelBMFontLoader::onHandlePropTypeFntFile(Node * pNode, Node * pParent, const char * pPropertyName, const char* pFntFile, CCBReader * ccbReader)
void LabelBMFontLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char * pPropertyName, const char* pText, CCBReader * ccbReader)
void LabelTTFLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)
void LabelTTFLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)
void LabelTTFLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)
void LabelTTFLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char * pPropertyName, const char * pFontTTF, CCBReader * ccbReader)
void LabelTTFLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char * pPropertyName, const char * pText, CCBReader * ccbReader)
void LabelTTFLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char * pPropertyName, float pFloatScale, CCBReader * ccbReader)
void LabelTTFLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)
void LabelTTFLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size size, CCBReader * ccbReader)
void LayerColorLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)
void LayerColorLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)
void LayerColorLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)
void LayerGradientLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)
void LayerGradientLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)
void LayerGradientLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)
void LayerGradientLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)
void LayerLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)
void MenuItemImageLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)
void MenuItemLoader::onHandlePropTypeBlock(Node * pNode, Node * pParent, const char * pPropertyName, BlockData * pBlockData, CCBReader * ccbReader)
void MenuItemLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)
CC_DLL Vec2 getAbsolutePosition(const Vec2 &pt, CCBReader::PositionType type, const Size &containerSize, const std::string& propName)
CC_DLL void setRelativeScale(Node *pNode, float scaleX, float scaleY, CCBReader::ScaleType type, const std::string& propName)
ValueMap& NodeLoader::getCustomProperties()
Node * NodeLoader::loadNode(Node * pParent, CCBReader * ccbReader)
void NodeLoader::parseProperties(Node * pNode, Node * pParent, CCBReader * ccbReader)
Vec2 NodeLoader::parsePropTypePosition(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)
Vec2 NodeLoader::parsePropTypePoint(Node * pNode, Node * pParent, CCBReader * ccbReader)
Vec2 NodeLoader::parsePropTypePointLock(Node * pNode, Node * pParent, CCBReader * ccbReader)
Size NodeLoader::parsePropTypeSize(Node * pNode, Node * pParent, CCBReader * ccbReader)
float * NodeLoader::parsePropTypeFloatXY(Node * pNode, Node * pParent, CCBReader * ccbReader)
float * NodeLoader::parsePropTypeScaleLock(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)
float NodeLoader::parsePropTypeFloat(Node * pNode, Node * pParent, CCBReader * ccbReader)
float NodeLoader::parsePropTypeDegrees(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)
float NodeLoader::parsePropTypeFloatScale(Node * pNode, Node * pParent, CCBReader * ccbReader)
int NodeLoader::parsePropTypeInteger(Node * pNode, Node * pParent, CCBReader * ccbReader)
int NodeLoader::parsePropTypeIntegerLabeled(Node * pNode, Node * pParent, CCBReader * ccbReader)
float * NodeLoader::parsePropTypeFloatVar(Node * pNode, Node * pParent, CCBReader * ccbReader)
bool NodeLoader::parsePropTypeCheck(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)
SpriteFrame * NodeLoader::parsePropTypeSpriteFrame(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)
Animation * NodeLoader::parsePropTypeAnimation(Node * pNode, Node * pParent, CCBReader * ccbReader)
Texture2D * NodeLoader::parsePropTypeTexture(Node * pNode, Node * pParent, CCBReader * ccbReader)
unsigned char NodeLoader::parsePropTypeByte(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)
Color3B NodeLoader::parsePropTypeColor3(Node * pNode, Node * pParent, CCBReader * ccbReader, const char *pPropertyName)
Color4F * NodeLoader::parsePropTypeColor4FVar(Node * pNode, Node * pParent, CCBReader * ccbReader)
bool * NodeLoader::parsePropTypeFlip(Node * pNode, Node * pParent, CCBReader * ccbReader)
BlendFunc NodeLoader::parsePropTypeBlendFunc(Node * pNode, Node * pParent, CCBReader * ccbReader)
std::string NodeLoader::parsePropTypeFntFile(Node * pNode, Node * pParent, CCBReader * ccbReader)
std::string NodeLoader::parsePropTypeString(Node * pNode, Node * pParent, CCBReader * ccbReader)
std::string NodeLoader::parsePropTypeText(Node * pNode, Node * pParent, CCBReader * ccbReader)
std::string NodeLoader::parsePropTypeFontTTF(Node * pNode, Node * pParent, CCBReader * ccbReader)
BlockData * NodeLoader::parsePropTypeBlock(Node * pNode, Node * pParent, CCBReader * ccbReader)
BlockControlData * NodeLoader::parsePropTypeBlockControl(Node * pNode, Node * pParent, CCBReader * ccbReader)
Node * NodeLoader::parsePropTypeCCBFile(Node * pNode, Node * pParent, CCBReader * pCCBReader)
void NodeLoader::onHandlePropTypePosition(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPosition, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPoint, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypePointLock(Node * pNode, Node * pParent, const char* pPropertyName, Vec2 pPointLock, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char* pPropertyName, Size pSize, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeFloatXY(Node * pNode, Node * pParent, const char* pPropertyName, float * pFloat, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeScaleLock(Node * pNode, Node * pParent, const char* pPropertyName, float * pScaleLock, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char* pPropertyName, float pFloat, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeDegrees(Node * pNode, Node * pParent, const char* pPropertyName, float pDegrees, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeFloatScale(Node * pNode, Node * pParent, const char* pPropertyName, float pFloatScale, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeInteger(Node * pNode, Node * pParent, const char* pPropertyName, int pInteger, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char* pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeFloatVar(Node * pNode, Node * pParent, const char* pPropertyName, float * pFloatVar, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char* pPropertyName, bool pCheck, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char* pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeAnimation(Node * pNode, Node * pParent, const char* pPropertyName, Animation * pAnimation, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeTexture(Node * pNode, Node * pParent, const char* pPropertyName, Texture2D * pTexture2D, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char* pPropertyName, unsigned char pByte, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char* pPropertyName, Color3B pColor3B, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeColor4FVar(Node * pNode, Node * pParent, const char* pPropertyName, Color4F * pColor4FVar, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeFlip(Node * pNode, Node * pParent, const char* pPropertyName, bool * pFlip, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char* pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeFntFile(Node * pNode, Node * pParent, const char* pPropertyName, const char* pFntFile, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeString(Node * pNode, Node * pParent, const char* pPropertyName, const char * pString, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeText(Node * pNode, Node * pParent, const char* pPropertyName, const char * pText, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeFontTTF(Node * pNode, Node * pParent, const char* pPropertyName, const char * pFontTTF, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeBlock(Node * pNode, Node * pParent, const char* pPropertyName, BlockData * pBlockData, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeBlockControl(Node * pNode, Node * pParent, const char* pPropertyName, BlockControlData * pBlockControlData, CCBReader * ccbReader)
void NodeLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char* pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)
void NodeLoaderLibrary::registerDefaultNodeLoaders()
void NodeLoaderLibrary::registerNodeLoader(const char * pClassName, NodeLoader * pNodeLoader)
void NodeLoaderLibrary::unregisterNodeLoader(const char * pClassName)
NodeLoader * NodeLoaderLibrary::getNodeLoader(const char* pClassName)
void NodeLoaderLibrary::purge(bool pReleaseNodeLoaders)
NodeLoaderLibrary * NodeLoaderLibrary::getInstance()
void NodeLoaderLibrary::destroyInstance()
NodeLoaderLibrary * NodeLoaderLibrary::newDefaultNodeLoaderLibrary()
void ParticleSystemQuadLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)
void ParticleSystemQuadLoader::onHandlePropTypePoint(Node * pNode, Node * pParent, const char * pPropertyName, Vec2 pPoint, CCBReader * ccbReader)
void ParticleSystemQuadLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)
void ParticleSystemQuadLoader::onHandlePropTypeInteger(Node * pNode, Node * pParent, const char * pPropertyName, int pInteger, CCBReader * ccbReader)
void ParticleSystemQuadLoader::onHandlePropTypeFloatVar(Node * pNode, Node * pParent, const char * pPropertyName, float * pFloatVar, CCBReader * ccbReader)
void ParticleSystemQuadLoader::onHandlePropTypeColor4FVar(Node * pNode, Node * pParent, const char * pPropertyName, Color4F * pColor4FVar, CCBReader * ccbReader)
void ParticleSystemQuadLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)
void ParticleSystemQuadLoader::onHandlePropTypeTexture(Node * pNode, Node * pParent, const char * pPropertyName, Texture2D * pTexture2D, CCBReader * ccbReader)
void Scale9SpriteLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)
void Scale9SpriteLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)
void Scale9SpriteLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)
void Scale9SpriteLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)
void Scale9SpriteLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)
void Scale9SpriteLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)
void ScrollViewLoader::onHandlePropTypeSize(Node * pNode, Node * pParent, const char * pPropertyName, Size pSize, CCBReader * ccbReader)
void ScrollViewLoader::onHandlePropTypeCheck(Node * pNode, Node * pParent, const char * pPropertyName, bool pCheck, CCBReader * ccbReader)
void ScrollViewLoader::onHandlePropTypeCCBFile(Node * pNode, Node * pParent, const char * pPropertyName, Node * pCCBFileNode, CCBReader * ccbReader)
void ScrollViewLoader::onHandlePropTypeFloat(Node * pNode, Node * pParent, const char * pPropertyName, float pFloat, CCBReader * ccbReader)
void ScrollViewLoader::onHandlePropTypeIntegerLabeled(Node * pNode, Node * pParent, const char * pPropertyName, int pIntegerLabeled, CCBReader * ccbReader)
void SpriteLoader::onHandlePropTypeSpriteFrame(Node * pNode, Node * pParent, const char * pPropertyName, SpriteFrame * pSpriteFrame, CCBReader * ccbReader)
void SpriteLoader::onHandlePropTypeFlip(Node * pNode, Node * pParent, const char * pPropertyName, bool * pFlip, CCBReader * ccbReader)
void SpriteLoader::onHandlePropTypeColor3(Node * pNode, Node * pParent, const char * pPropertyName, Color3B pColor3B, CCBReader * ccbReader)
void SpriteLoader::onHandlePropTypeByte(Node * pNode, Node * pParent, const char * pPropertyName, unsigned char pByte, CCBReader * ccbReader)
void SpriteLoader::onHandlePropTypeBlendFunc(Node * pNode, Node * pParent, const char * pPropertyName, BlendFunc pBlendFunc, CCBReader * ccbReader)
ActionTimelineData* ActionTimelineData::create(int actionTag)
bool ActionTimelineData::init(int actionTag)
ActionTimeline* ActionTimeline::create()
bool ActionTimeline::init()
void ActionTimeline::play(std::string name, bool loop)
void ActionTimeline::gotoFrameAndPlay(int startIndex)
void ActionTimeline::gotoFrameAndPlay(int startIndex, bool loop)
void ActionTimeline::gotoFrameAndPlay(int startIndex, int endIndex, bool loop)
void ActionTimeline::gotoFrameAndPlay(int startIndex, int endIndex, int currentFrameIndex, bool loop)
void ActionTimeline::gotoFrameAndPause(int startIndex)
void ActionTimeline::pause()
void ActionTimeline::resume()
bool ActionTimeline::isPlaying() const
void ActionTimeline::setCurrentFrame(int frameIndex)
ActionTimeline* ActionTimeline::clone() const
void ActionTimeline::step(float delta)
void ActionTimeline::startWithTarget(Node *target)
void ActionTimeline::addTimeline(Timeline* timeline)
void ActionTimeline::removeTimeline(Timeline* timeline)
void ActionTimeline::addAnimationInfo(const AnimationInfo& animationInfo)
void ActionTimeline::removeAnimationInfo(std::string animationName)
bool ActionTimeline::IsAnimationInfoExists(const std::string& animationName)
AnimationInfo ActionTimeline::getAnimationInfo(const std::string &animationName)
void ActionTimeline::setFrameEventCallFunc(std::function<void(Frame *)> listener)
void ActionTimeline::clearFrameEventCallFunc()
void ActionTimeline::setLastFrameCallFunc(std::function<void()> listener)
void ActionTimeline::clearLastFrameCallFunc()
void ActionTimeline::emitFrameEvent(Frame* frame)
void ActionTimeline::gotoFrame(int frameIndex)
void ActionTimeline::stepToFrame(int frameIndex)
ActionTimelineCache* ActionTimelineCache::getInstance()
void ActionTimelineCache::destroyInstance()
void ActionTimelineCache::purge()
void ActionTimelineCache::init()
void ActionTimelineCache::removeAction(const std::string& fileName)
ActionTimeline* ActionTimelineCache::createAction(const std::string& filename)
ActionTimeline* ActionTimelineCache::createActionFromJson(const std::string& fileName)
ActionTimeline* ActionTimelineCache::loadAnimationActionWithFile(const std::string& fileName)
ActionTimeline* ActionTimelineCache::loadAnimationActionWithContent(const std::string&fileName, const std::string& content)
Timeline* ActionTimelineCache::loadTimeline(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadVisibleFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadPositionFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadScaleFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadSkewFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadRotationSkewFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadRotationFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadAnchorPointFrame (const rapidjson::Value& json)
Frame* ActionTimelineCache::loadInnerActionFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadColorFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadTextureFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadEventFrame(const rapidjson::Value& json)
Frame* ActionTimelineCache::loadZOrderFrame(const rapidjson::Value& json)
ActionTimeline* ActionTimelineCache::createActionWithFlatBuffersFile(const std::string &fileName)
ActionTimeline* ActionTimelineCache::loadAnimationActionWithFlatBuffersFile(const std::string &fileName)
ActionTimeline* ActionTimelineCache::loadAnimationWithDataBuffer(const cocos2d::Data data, const std::string fileName)
inline ActionTimeline* ActionTimelineCache::createActionWithDataBuffer(const cocos2d::Data data)
Timeline* ActionTimelineCache::loadTimelineWithFlatBuffers(const flatbuffers::TimeLine *flatbuffers)
Frame* ActionTimelineCache::loadVisibleFrameWithFlatBuffers(const flatbuffers::BoolFrame *flatbuffers)
Frame* ActionTimelineCache::loadPositionFrameWithFlatBuffers(const flatbuffers::PointFrame *flatbuffers)
Frame* ActionTimelineCache::loadScaleFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)
Frame* ActionTimelineCache::loadRotationSkewFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)
Frame* ActionTimelineCache::loadColorFrameWithFlatBuffers(const flatbuffers::ColorFrame *flatbuffers)
Frame* ActionTimelineCache::loadTextureFrameWithFlatBuffers(const flatbuffers::TextureFrame *flatbuffers)
Frame* ActionTimelineCache::loadEventFrameWithFlatBuffers(const flatbuffers::EventFrame *flatbuffers)
Frame* ActionTimelineCache::loadAlphaFrameWithFlatBuffers(const flatbuffers::IntFrame *flatbuffers)
Frame* ActionTimelineCache::loadAnchorPointFrameWithFlatBuffers(const flatbuffers::ScaleFrame *flatbuffers)
Frame* ActionTimelineCache::loadZOrderFrameWithFlatBuffers(const flatbuffers::IntFrame *flatbuffers)
Frame* ActionTimelineCache::loadInnerActionFrameWithFlatBuffers(const flatbuffers::InnerActionFrame *flatbuffers)
Frame* ActionTimelineCache::loadBlendFrameWithFlatBuffers(const flatbuffers::BlendFrame* flatbuffers)
const flatbuffers::EasingData *flatbuffers)
ActionTimeline* ActionTimelineCache::createActionWithFlatBuffersForSimulator(const std::string& fileName)
ActionTimelineNode* ActionTimelineNode::create(Node* root, ActionTimeline* action)
bool ActionTimelineNode::init()
bool ActionTimelineNode::init(Node* root, ActionTimeline* action)
void ActionTimelineNode::setRoot(cocos2d::Node* root)
cocos2d::Node* ActionTimelineNode::getRoot()
void ActionTimelineNode::setActionTimeline(ActionTimeline* action)
ActionTimeline* ActionTimelineNode::getActionTimeline()
BoneNode* BoneNode::create()
BoneNode* BoneNode::create(int length)
void BoneNode::addChild(cocos2d::Node* child, int localZOrder, int tag)
void BoneNode::addChild(Node* child, int localZOrder, const std::string &name)
void BoneNode::addSkin(SkinNode* skin, bool isDisplay, bool hideOthers)
void BoneNode::addSkin(SkinNode* skin, bool display)
void BoneNode::removeChild(Node* child, bool cleanup /* = true */)
void BoneNode::removeFromBoneList(BoneNode* bone)
void BoneNode::addToBoneList(BoneNode* bone)
void BoneNode::addToSkinList(SkinNode* skin)
void BoneNode::removeFromSkinList(SkinNode* skin)
void BoneNode::displaySkin(SkinNode* skin, bool hideOthers)
void BoneNode::displaySkin(const std::string &skinName, bool hideOthers)
cocos2d::Vector<SkinNode*> BoneNode::getVisibleSkins() const
cocos2d::Rect BoneNode::getBoundingBox() const
cocos2d::Rect BoneNode::getVisibleSkinsRect() const
void BoneNode::setBlendFunc(const cocos2d::BlendFunc& blendFunc)
void BoneNode::setDebugDrawLength(float length)
void BoneNode::setDebugDrawWidth(float width)
void BoneNode::setDebugDrawEnabled(bool isDebugDraw)
void BoneNode::setDebugDrawColor(const cocos2d::Color4F &color)
void BoneNode::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4& parentTransform, uint32_t parentFlags)
void BoneNode::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)
bool BoneNode::init()
void BoneNode::updateVertices()
void BoneNode::updateColor()
void BoneNode::updateDisplayedColor(const cocos2d::Color3B& parentColor)
void BoneNode::updateDisplayedOpacity(GLubyte parentOpacity)
void BoneNode::disableCascadeOpacity()
void BoneNode::disableCascadeColor()
void BoneNode::onDraw(const cocos2d::Mat4 &transform, uint32_t flags)
cocos2d::Vector<BoneNode*> BoneNode::getAllSubBones() const
cocos2d::Vector<SkinNode*> BoneNode::getAllSubSkins() const
void BoneNode::sortAllChildren()
SkeletonNode* BoneNode::getRootSkeletonNode() const
bool BoneNode::isPointOnRack(const cocos2d::Vec2& bonePoint)
void BoneNode::batchBoneDrawToSkeleton(BoneNode* bone) const
void BoneNode::visitSkins(cocos2d::Renderer* renderer, BoneNode* bone) const
void BoneNode::setRootSkeleton(BoneNode* bone, SkeletonNode* skeleton) const
void BoneNode::setLocalZOrder(int localZOrder)
void BoneNode::setName(const std::string& name)
void BoneNode::addToChildrenListHelper(Node * child)
void BoneNode::removeFromChildrenListHelper(Node * child)
void BoneNode::setVisible(bool visible)
void BoneNode::setContentSize(const cocos2d::Size& contentSize)
void BoneNode::setAnchorPoint(const cocos2d::Vec2& anchorPoint)
void Frame::emitEvent()
void Frame::cloneProperty(Frame* frame)
void Frame::apply(float percent)
float Frame::tweenPercent(float percent)
void Frame::setEasingParams(const std::vector<float>& easingParams)
const std::vector<float>& Frame::getEasingParams() const
VisibleFrame* VisibleFrame::create()
void VisibleFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
Frame* VisibleFrame::clone()
TextureFrame* TextureFrame::create()
void TextureFrame::setNode(Node* node)
void TextureFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
Frame* TextureFrame::clone()
RotationFrame* RotationFrame::create()
void RotationFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
void RotationFrame::onApply(float percent)
Frame* RotationFrame::clone()
SkewFrame* SkewFrame::create()
void SkewFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
void SkewFrame::onApply(float percent)
Frame* SkewFrame::clone()
RotationSkewFrame* RotationSkewFrame::create()
void RotationSkewFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
void RotationSkewFrame::onApply(float percent)
Frame* RotationSkewFrame::clone()
PositionFrame* PositionFrame::create()
void PositionFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
void PositionFrame::onApply(float percent)
Frame* PositionFrame::clone()
ScaleFrame* ScaleFrame::create()
void ScaleFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
void ScaleFrame::onApply(float percent)
Frame* ScaleFrame::clone()
AnchorPointFrame* AnchorPointFrame::create()
void AnchorPointFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
Frame* AnchorPointFrame::clone()
InnerActionFrame* InnerActionFrame::create()
void InnerActionFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
void InnerActionFrame::setStartFrameIndex(int frameIndex)
void InnerActionFrame::setEndFrameIndex(int frameIndex)
void InnerActionFrame::setAnimationName(const std::string& animationName)
Frame* InnerActionFrame::clone()
ColorFrame* ColorFrame::create()
void ColorFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
void ColorFrame::onApply(float percent)
Frame* ColorFrame::clone()
AlphaFrame* AlphaFrame::create()
void AlphaFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
void AlphaFrame::onApply(float percent)
Frame* AlphaFrame::clone()
EventFrame* EventFrame::create()
void EventFrame::init()
void EventFrame::setNode(cocos2d::Node* node)
void EventFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
Frame* EventFrame::clone()
ZOrderFrame* ZOrderFrame::create()
void ZOrderFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
Frame* ZOrderFrame::clone()
BlendFuncFrame* BlendFuncFrame::create()
void BlendFuncFrame::onEnter(Frame *nextFrame, int currentFrameIndex)
Frame* BlendFuncFrame::clone()
SkeletonNode* SkeletonNode::create()
bool SkeletonNode::init()
cocos2d::Rect SkeletonNode::getBoundingBox() const
void SkeletonNode::updateVertices()
void SkeletonNode::updateColor()
void SkeletonNode::visit(cocos2d::Renderer *renderer, const cocos2d::Mat4& parentTransform, uint32_t parentFlags)
void SkeletonNode::draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)
void SkeletonNode::batchDrawAllSubBones(const cocos2d::Mat4 &transform)
void SkeletonNode::onDraw(const cocos2d::Mat4 &transform, uint32_t flags)
void SkeletonNode::changeSkins(const std::map<std::string, std::string>& boneSkinNameMap)
void SkeletonNode::changeSkins(const std::string& skinGroupName)
BoneNode* SkeletonNode::getBoneNode(const std::string& boneName)
const cocos2d::Map<std::string, BoneNode*>& SkeletonNode::getAllSubBonesMap() const
void SkeletonNode::addSkinGroup(std::string groupName, std::map<std::string, std::string> boneSkinNameMap)
void SkeletonNode::checkSubBonesDirty()
void SkeletonNode::updateOrderedAllbones()
void SkeletonNode::sortOrderedAllBones()
Timeline* Timeline::create()
void Timeline::gotoFrame(int frameIndex)
void Timeline::stepToFrame(int frameIndex)
Timeline* Timeline::clone()
void Timeline::addFrame(Frame* frame)
void Timeline::insertFrame(Frame* frame, int index)
void Timeline::removeFrame(Frame* frame)
void Timeline::setNode(Node* node)
Node* Timeline::getNode() const
void Timeline::apply(unsigned int frameIndex)
void Timeline::binarySearchKeyFrame(unsigned int frameIndex)
void Timeline::updateCurrentKeyFrame(unsigned int frameIndex)
CSLoader* CSLoader::getInstance()
void CSLoader::destroyInstance()
void CSLoader::purge()
void CSLoader::init()
Node* CSLoader::createNode(const std::string& filename)
Node* CSLoader::createNode(const std::string &filename, const ccNodeLoadCallback &callback)
std::string CSLoader::getExtentionName(const std::string& name)
ActionTimeline* CSLoader::createTimeline(const std::string &filename)
ActionTimeline* CSLoader::createTimeline(const Data data, const std::string& filename)
ActionTimelineNode* CSLoader::createActionTimelineNode(const std::string& filename)
ActionTimelineNode* CSLoader::createActionTimelineNode(const std::string& filename, int startIndex, int endIndex, bool loop)
Node* CSLoader::createNodeFromJson(const std::string& filename)
Node* CSLoader::loadNodeWithFile(const std::string& fileName)
Node* CSLoader::loadNodeWithContent(const std::string& content)
Node* CSLoader::loadNode(const rapidjson::Value& json)
void CSLoader::initNode(Node* node, const rapidjson::Value& json)
Node* CSLoader::loadSimpleNode(const rapidjson::Value& json)
Node* CSLoader::loadSubGraph(const rapidjson::Value& json)
Node* CSLoader::loadSprite(const rapidjson::Value& json)
Node* CSLoader::loadParticle(const rapidjson::Value& json)
Node* CSLoader::loadTMXTiledMap(const rapidjson::Value &json)
Node* CSLoader::loadWidget(const rapidjson::Value& json)
Component* CSLoader::loadComponent(const rapidjson::Value &json)
Component* CSLoader::loadComAudio(const rapidjson::Value &json)
cocos2d::Node* CSLoader::createNode(const Data data)
Node * CSLoader::createNode(const Data data, const ccNodeLoadCallback &callback)
Node* CSLoader::createNodeWithFlatBuffersFile(const std::string &filename)
Node* CSLoader::createNodeWithFlatBuffersFile(const std::string &filename, const ccNodeLoadCallback &callback)
inline void CSLoader::reconstructNestNode(cocos2d::Node * node)
Node* CSLoader::nodeWithFlatBuffersFile(const std::string &fileName)
Node* CSLoader::nodeWithFlatBuffersFile(const std::string &fileName, const ccNodeLoadCallback &callback)
Node* CSLoader::nodeWithFlatBuffers(const flatbuffers::NodeTree *nodetree)
Node* CSLoader::nodeWithFlatBuffers(const flatbuffers::NodeTree *nodetree, const ccNodeLoadCallback &callback)
cocos2d::Node *handler)
bool CSLoader::isWidget(const std::string &type)
bool CSLoader::isCustomWidget(const std::string &type)
std::string CSLoader::getGUIClassName(const std::string &name)
std::string CSLoader::getWidgetReaderClassName(Widget* widget)
ObjectFactory::Instance ins)
Node* CSLoader::createNodeWithFlatBuffersForSimulator(const std::string& filename)
Node* CSLoader::nodeWithFlatBuffersForSimulator(const flatbuffers::NodeTree *nodetree)
void ActionFrame::setFrameIndex(int index)
int ActionFrame::getFrameIndex()
void ActionFrame::setFrameTime(float fTime)
float ActionFrame::getFrameTime()
void ActionFrame::setFrameType(int frameType)
int ActionFrame::getFrameType()
void ActionFrame::setEasingType(int easingType)
int ActionFrame::getEasingType()
ActionInterval* ActionFrame::getAction(float fDuration)
ActionInterval* ActionFrame::getAction(float fDuration,ActionFrame* srcFrame)
void ActionFrame::setEasingParameter(std::vector<float>& parameter)
ActionInterval* ActionFrame::getEasingAction(ActionInterval* action)
void ActionMoveFrame::setPosition(Vec2 pos)
Vec2 ActionMoveFrame::getPosition()
ActionInterval* ActionMoveFrame::getAction(float fDuration)
void ActionScaleFrame::setScaleX(float scaleX)
float ActionScaleFrame::getScaleX()
void ActionScaleFrame::setScaleY(float scaleY)
float ActionScaleFrame::getScaleY()
ActionInterval* ActionScaleFrame::getAction(float fDuration)
void ActionRotationFrame::setRotation(float rotation)
float ActionRotationFrame::getRotation()
ActionInterval* ActionRotationFrame::getAction(float fDuration)
ActionInterval* ActionRotationFrame::getAction(float fDuration,ActionFrame* srcFrame)
void ActionFadeFrame::setOpacity(int opacity)
int ActionFadeFrame::getOpacity()
ActionInterval* ActionFadeFrame::getAction(float fDuration)
void ActionTintFrame::setColor(Color3B ccolor)
Color3B ActionTintFrame::getColor()
ActionInterval* ActionTintFrame::getAction(float fDuration)
float ActionFrameEasing::bounceTime(float t)
float ActionFrameEasing::easeValue(float t)
ActionManagerEx* ActionManagerEx::getInstance()
void ActionManagerEx::destroyInstance()
void ActionManagerEx::initWithDictionary(const char* jsonName,const rapidjson::Value &dic, Ref* root)
ActionObject* ActionManagerEx::getActionByName(const char* jsonName,const char* actionName)
ActionObject* ActionManagerEx::playActionByName(const char* jsonName,const char* actionName)
ActionObject* ActionManagerEx::playActionByName(const char* jsonName,const char* actionName, CallFunc* func)
ActionObject* ActionManagerEx::stopActionByName(const char* jsonName,const char* actionName)
void ActionManagerEx::releaseActions()
void ActionNode::initWithDictionary(const rapidjson::Value& dic, Ref* root)
void ActionNode::initActionNodeFromRoot(Ref* root)
void ActionNode::setUnitTime(float fTime)
float ActionNode::getUnitTime()
void ActionNode::setActionTag(int tag)
int ActionNode::getActionTag()
void ActionNode::setObject(Ref* node)
Ref*  ActionNode::getObject()
Node* ActionNode::getActionNode()
void ActionNode::insertFrame(int index, ActionFrame* frame)
void ActionNode::addFrame(ActionFrame* frame)
void ActionNode::deleteFrame(ActionFrame* frame)
void ActionNode::clearAllFrame()
Spawn * ActionNode::refreshActionProperty()
void ActionNode::playAction()
void ActionNode::runAction()
void ActionNode::stopAction()
int ActionNode::getFirstFrameIndex()
int ActionNode::getLastFrameIndex()
bool ActionNode::updateActionToTimeLine(float fTime)
void ActionNode::easingToFrame(float duration,float delayTime,ActionFrame* srcFrame,ActionFrame* destFrame)
bool ActionNode::isActionDoneOnce()
void ActionObject::setName(const char* name)
const char* ActionObject::getName()
void ActionObject::setLoop(bool bLoop)
bool ActionObject::getLoop()
void ActionObject::setUnitTime(float fTime)
float ActionObject::getUnitTime()
float ActionObject::getCurrentTime()
void ActionObject::setCurrentTime(float fTime)
float ActionObject::getTotalTime()
bool ActionObject::isPlaying()
void ActionObject::initWithDictionary(const rapidjson::Value& dic, Ref* root)
cocos2d::Ref *root)
int ActionObject::valueToInt(const std::string& value)
bool ActionObject::valueToBool(const std::string& value)
float ActionObject::valueToFloat(const std::string& value)
void ActionObject::addActionNode(ActionNode* node)
void ActionObject::removeActionNode(ActionNode* node)
void ActionObject::play()
void ActionObject::play(CallFunc* func)
void ActionObject::pause()
void ActionObject::stop()
void ActionObject::updateToFrameByTime(float fTime)
void ActionObject::simulationActionUpdate(float dt)
Armature *Armature::create()
Armature *Armature::create(const std::string& name)
Armature *Armature::create(const std::string& name, Bone *parentBone)
bool Armature::init()
bool Armature::init(const std::string& name)
bool Armature::init(const std::string& name, Bone *parentBone)
Bone *Armature::createBone(const std::string& boneName)
void Armature::addBone(Bone *bone, const std::string& parentName)
void Armature::removeBone(Bone *bone, bool recursion)
Bone *Armature::getBone(const std::string& name) const
void Armature::changeBoneParent(Bone *bone, const std::string& parentName)
const cocos2d::Map<std::string, Bone*>& Armature::getBoneDic() const
const Mat4& Armature::getNodeToParentTransform() const
void Armature::updateOffsetPoint()
void Armature::setAnchorPoint(const Vec2& point)
const Vec2& Armature::getAnchorPointInPoints() const
const Vec2& Armature::getOffsetPoints() const
void Armature::setAnimation(ArmatureAnimation *animation)
ArmatureAnimation *Armature::getAnimation() const
bool Armature::getArmatureTransformDirty() const
void Armature::update(float dt)
void Armature::draw(cocos2d::Renderer *renderer, const Mat4 &transform, uint32_t flags)
void Armature::onEnter()
void Armature::onExit()
void Armature::visit(cocos2d::Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
Rect Armature::getBoundingBox() const
Bone *Armature::getBoneAtPoint(float x, float y) const
void Armature::setParentBone(Bone *parentBone)
Bone *Armature::getParentBone() const
void Armature::setColliderFilter(ColliderFilter *filter)
void Armature::drawContour()
b2Body *Armature::getBody() const
void Armature::setBody(b2Body *body)
b2Fixture *Armature::getShapeList()
cpBody *Armature::getBody() const
void Armature::setBody(cpBody *body)
cpShape *Armature::getShapeList()
ArmatureAnimation *ArmatureAnimation::create(Armature *armature)
bool ArmatureAnimation::init(Armature *armature)
void ArmatureAnimation::pause()
void ArmatureAnimation::resume()
void ArmatureAnimation::stop()
void ArmatureAnimation::setAnimationScale(float animationScale )
float ArmatureAnimation::getAnimationScale() const
void ArmatureAnimation::setSpeedScale(float speedScale)
float ArmatureAnimation::getSpeedScale() const
void ArmatureAnimation::play(const std::string& animationName, int durationTo,  int loop)
void ArmatureAnimation::playByIndex(int animationIndex, int durationTo, int loop)
void ArmatureAnimation::playWithIndex(int animationIndex, int durationTo, int loop)
void ArmatureAnimation::playWithNames(const std::vector<std::string>& movementNames, int durationTo, bool loop)
void ArmatureAnimation::playWithIndexes(const std::vector<int>& movementIndexes, int durationTo, bool loop)
void ArmatureAnimation::gotoAndPlay(int frameIndex)
void ArmatureAnimation::gotoAndPause(int frameIndex)
ssize_t ArmatureAnimation::getMovementCount() const
void ArmatureAnimation::update(float dt)
void ArmatureAnimation::updateHandler()
std::string ArmatureAnimation::getCurrentMovementID() const
void ArmatureAnimation::setMovementEventCallFunc(Ref *target, SEL_MovementEventCallFunc callFunc)
void ArmatureAnimation::setFrameEventCallFunc(Ref *target, SEL_FrameEventCallFunc callFunc)
void ArmatureAnimation::setMovementEventCallFunc(std::function<void(Armature *armature, MovementEventType movementType, const std::string& movementID)> listener)
void ArmatureAnimation::setFrameEventCallFunc(std::function<void(Bone *bone, const std::string& frameEventName, int originFrameIndex, int currentFrameIndex)> listener)
void ArmatureAnimation::setUserObject(Ref *pUserObject)
void ArmatureAnimation::frameEvent(Bone *bone, const std::string& frameEventName, int originFrameIndex, int currentFrameIndex)
void ArmatureAnimation::movementEvent(Armature *armature, MovementEventType movementType, const std::string& movementID)
void ArmatureAnimation::updateMovementList()
ArmatureDataManager *ArmatureDataManager::getInstance()
void ArmatureDataManager::destroyInstance()
bool ArmatureDataManager::init()
void ArmatureDataManager::removeArmatureFileInfo(const std::string& configFilePath)
void ArmatureDataManager::addArmatureData(const std::string& id, ArmatureData *armatureData, const std::string& configFilePath)
ArmatureData *ArmatureDataManager::getArmatureData(const std::string& id)
void ArmatureDataManager::removeArmatureData(const std::string& id)
void ArmatureDataManager::addAnimationData(const std::string& id, AnimationData *animationData, const std::string& configFilePath)
AnimationData *ArmatureDataManager::getAnimationData(const std::string& id)
void ArmatureDataManager::removeAnimationData(const std::string& id)
void ArmatureDataManager::addTextureData(const std::string& id, TextureData *textureData, const std::string& configFilePath)
TextureData *ArmatureDataManager::getTextureData(const std::string& id)
void ArmatureDataManager::removeTextureData(const std::string& id)
void ArmatureDataManager::addArmatureFileInfo(const std::string& configFilePath)
void ArmatureDataManager::addArmatureFileInfoAsync(const std::string& configFilePath, Ref *target, SEL_SCHEDULE selector)
void ArmatureDataManager::addArmatureFileInfo(const std::string& imagePath, const std::string& plistPath, const std::string& configFilePath)
void ArmatureDataManager::addArmatureFileInfoAsync(const std::string& imagePath, const std::string& plistPath, const std::string& configFilePath, Ref *target, SEL_SCHEDULE selector)
void ArmatureDataManager::addSpriteFrameFromFile(const std::string& plistPath, const std::string& imagePath, const std::string& configFilePath)
bool ArmatureDataManager::isAutoLoadSpriteFile()
const cocos2d::Map<std::string, ArmatureData*>& ArmatureDataManager::getArmatureDatas() const
const cocos2d::Map<std::string, AnimationData*>& ArmatureDataManager::getAnimationDatas() const
const cocos2d::Map<std::string, TextureData*>& ArmatureDataManager::getTextureDatas() const
void CCArmatureDataManager::addRelativeData(const std::string& configFilePath)
RelativeData *CCArmatureDataManager::getRelativeData(const std::string&  configFilePath)
BatchNode *BatchNode::create()
bool BatchNode::init()
void BatchNode::addChild(Node *child, int zOrder, int tag)
void BatchNode::addChild(cocos2d::Node *child, int zOrder, const std::string &name)
void BatchNode::removeChild(Node* child, bool cleanup)
void BatchNode::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void BatchNode::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void BatchNode::generateGroupCommand()
Bone *Bone::create()
Bone *Bone::create(const std::string& name)
bool Bone::init()
bool Bone::init(const std::string& name)
void Bone::setBoneData(BoneData *boneData)
BoneData *Bone::getBoneData() const
void Bone::setArmature(Armature *armature)
Armature *Bone::getArmature() const
void Bone::update(float delta)
void Bone::applyParentTransform(Bone *parent)
void Bone::setBlendFunc(const BlendFunc& blendFunc)
void Bone::updateDisplayedColor(const Color3B &parentColor)
void Bone::updateDisplayedOpacity(GLubyte parentOpacity)
void Bone::updateColor()
void Bone::updateZOrder()
void Bone::addChildBone(Bone *child)
void Bone::removeChildBone(Bone *bone, bool recursion)
void Bone::removeFromParent(bool recursion)
void Bone::setParentBone(Bone *parent)
Bone *Bone::getParentBone()
void Bone::setChildArmature(Armature *armature)
Armature *Bone::getChildArmature() const
Tween *Bone::getTween()
void Bone::setLocalZOrder(int zOrder)
Mat4 Bone::getNodeToArmatureTransform() const
Mat4 Bone::getNodeToWorldTransform() const
Node *Bone::getDisplayRenderNode()
DisplayType Bone::getDisplayRenderNodeType()
void Bone::addDisplay(DisplayData *displayData, int index)
void Bone::addDisplay(Node *display, int index)
void Bone::removeDisplay(int index)
void Bone::changeDisplayByIndex(int index, bool force)
void Bone::changeDisplayByName(const std::string &name, bool force)
void Bone::changeDisplayWithIndex(int index, bool force)
void Bone::changeDisplayWithName(const std::string& name, bool force)
ColliderDetector* Bone::getColliderDetector() const
void Bone::setColliderFilter(ColliderFilter *filter)
ColliderFilter *Bone::getColliderFilter()
void ColliderFilter::updateShape(b2Fixture *fixture)
void ColliderFilter::updateShape(cpShape *shape)
void ColliderBody::setColliderFilter(ColliderFilter *filter)
ColliderFilter *ColliderBody::getColliderFilter()
ColliderDetector *ColliderDetector::create()
ColliderDetector *ColliderDetector::create(Bone *bone)
bool ColliderDetector::init()
bool ColliderDetector::init(Bone *bone)
void ColliderDetector::addContourData(ContourData *contourData)
void ColliderDetector::addContourDataList(cocos2d::Vector<ContourData*> &contourDataList)
void ColliderDetector::removeContourData(ContourData *contourData)
void ColliderDetector::removeAll()
void ColliderDetector::setActive(bool active)
bool ColliderDetector::getActive()
const cocos2d::Vector<ColliderBody*>& ColliderDetector::getColliderBodyList()
void ColliderDetector::setColliderFilter(ColliderFilter *filter)
ColliderFilter *ColliderDetector::getColliderFilter()
void ColliderDetector::updateTransform(Mat4 &t)
void ColliderDetector::setBody(b2Body *pBody)
b2Body *ColliderDetector::getBody() const
void ColliderDetector::setBody(cpBody *pBody)
cpBody *ColliderDetector::getBody() const
bool ComAttribute::init()
void ComAttribute::setInt(const std::string& key, int value)
void ComAttribute::setFloat(const std::string& key, float value)
void ComAttribute::setBool(const std::string& key, bool value)
void ComAttribute::setString(const std::string& key, const std::string& value)
int ComAttribute::getInt(const std::string& key, int def) const
float ComAttribute::getFloat(const std::string& key, float def) const
bool ComAttribute::getBool(const std::string& key, bool def) const
std::string ComAttribute::getString(const std::string& key, const std::string& def) const
ComAttribute* ComAttribute::create(void)
bool ComAttribute::serialize(void* r)
bool ComAttribute::parse(const std::string &jsonFile)
bool ComAudio::init()
void ComAudio::onEnter()
void ComAudio::onExit()
void ComAudio::onAdd()
void ComAudio::onRemove()
bool ComAudio::isEnabled() const
void ComAudio::setEnabled(bool b)
bool ComAudio::serialize(void* r)
ComAudio* ComAudio::create(void)
void ComAudio::end()
void ComAudio::preloadBackgroundMusic(const char* pszFilePath)
void ComAudio::playBackgroundMusic(const char* pszFilePath, bool loop)
void ComAudio::playBackgroundMusic(const char* pszFilePath)
void ComAudio::playBackgroundMusic()
void ComAudio::stopBackgroundMusic(bool bReleaseData)
void ComAudio::stopBackgroundMusic()
void ComAudio::pauseBackgroundMusic()
void ComAudio::resumeBackgroundMusic()
void ComAudio::rewindBackgroundMusic()
bool ComAudio::willPlayBackgroundMusic()
bool ComAudio::isBackgroundMusicPlaying()
float ComAudio::getBackgroundMusicVolume()
void ComAudio::setBackgroundMusicVolume(float volume)
float ComAudio::getEffectsVolume()
void ComAudio::setEffectsVolume(float volume)
unsigned int ComAudio::playEffect(const char* pszFilePath, bool loop)
unsigned int ComAudio::playEffect(const char* pszFilePath)
unsigned int ComAudio::playEffect()
void ComAudio::pauseEffect(unsigned int nSoundId)
void ComAudio::pauseAllEffects()
void ComAudio::resumeEffect(unsigned int nSoundId)
void ComAudio::resumeAllEffects()
void ComAudio::stopEffect(unsigned int nSoundId)
void ComAudio::stopAllEffects()
void ComAudio::preloadEffect(const char* pszFilePath)
void ComAudio::unloadEffect(const char *pszFilePath)
void ComAudio::setFile(const char* pszFilePath)
void ComAudio::setLoop(bool loop)
const char* ComAudio::getFile()
bool ComAudio::isLoop()
bool ComController::init()
void ComController::onEnter()
void ComController::onExit()
void ComController::onAdd()
void ComController::onRemove()
void ComController::update(float delta)
bool ComController::isEnabled() const
void ComController::setEnabled(bool b)
ComController* ComController::create(void)
ComRender::ComRender(cocos2d::Node *node, const char *comName)
void ComRender::onEnter()
void ComRender::onExit()
void ComRender::onAdd()
void ComRender::onRemove()
cocos2d::Node* ComRender::getNode()
void ComRender::setNode(cocos2d::Node *node)
bool ComRender::serialize(void* r)
ComRender* ComRender::create(void)
ComRender* ComRender::create(cocos2d::Node *node, const char *comName)
bool ComRender::readJson(const std::string &fileName, rapidjson::Document &doc)
void DataReaderHelper::loadData()
DataReaderHelper *DataReaderHelper::getInstance()
void DataReaderHelper::setPositionReadScale(float scale)
float DataReaderHelper::getPositionReadScale()
void DataReaderHelper::purge()
void DataReaderHelper::addDataFromFile(const std::string& filePath)
void DataReaderHelper::addDataFromFileAsync(const std::string& imagePath, const std::string& plistPath, const std::string& filePath, Ref *target, SEL_SCHEDULE selector)
void DataReaderHelper::addDataAsyncCallBack(float dt)
void DataReaderHelper::removeConfigFile(const std::string& configFile)
void DataReaderHelper::addDataFromCache(const std::string& pFileContent, DataInfo *dataInfo)
ArmatureData *DataReaderHelper::decodeArmature(tinyxml2::XMLElement *armatureXML, DataInfo *dataInfo)
BoneData *DataReaderHelper::decodeBone(tinyxml2::XMLElement *boneXML, tinyxml2::XMLElement *parentXml, DataInfo *dataInfo)
DisplayData *DataReaderHelper::decodeBoneDisplay(tinyxml2::XMLElement *displayXML, DataInfo *dataInfo)
AnimationData *DataReaderHelper::decodeAnimation(tinyxml2::XMLElement *animationXML, DataInfo *dataInfo)
MovementData *DataReaderHelper::decodeMovement(tinyxml2::XMLElement *movementXML, ArmatureData *armatureData, DataInfo *dataInfo)
MovementBoneData *DataReaderHelper::decodeMovementBone(tinyxml2::XMLElement *movBoneXml, tinyxml2::XMLElement *parentXml, BoneData *boneData, DataInfo *dataInfo)
FrameData *DataReaderHelper::decodeFrame(tinyxml2::XMLElement *frameXML,  tinyxml2::XMLElement *parentFrameXml, BoneData *boneData, DataInfo *dataInfo)
TextureData *DataReaderHelper::decodeTexture(tinyxml2::XMLElement *textureXML, DataInfo *dataInfo)
ContourData *DataReaderHelper::decodeContour(tinyxml2::XMLElement *contourXML, DataInfo *dataInfo)
void DataReaderHelper::addDataFromJsonCache(const std::string& fileContent, DataInfo *dataInfo)
ArmatureData *DataReaderHelper::decodeArmature(const rapidjson::Value& json, DataInfo *dataInfo)
BoneData *DataReaderHelper::decodeBone(const rapidjson::Value& json, DataInfo *dataInfo)
DisplayData *DataReaderHelper::decodeBoneDisplay(const rapidjson::Value& json, DataInfo *dataInfo)
AnimationData *DataReaderHelper::decodeAnimation(const rapidjson::Value& json, DataInfo *dataInfo)
MovementData *DataReaderHelper::decodeMovement(const rapidjson::Value& json, DataInfo *dataInfo)
MovementBoneData *DataReaderHelper::decodeMovementBone(const rapidjson::Value& json, DataInfo *dataInfo)
FrameData *DataReaderHelper::decodeFrame(const rapidjson::Value& json, DataInfo *dataInfo)
TextureData *DataReaderHelper::decodeTexture(const rapidjson::Value& json)
ContourData *DataReaderHelper::decodeContour(const rapidjson::Value& json)
void DataReaderHelper::decodeNode(BaseData *node, const rapidjson::Value& json, DataInfo *dataInfo)
void BaseData::copy(const BaseData *node )
void BaseData::subtract(BaseData *from, BaseData *to, bool limit)
void BaseData::setColor(const Color4B &color)
Color4B BaseData::getColor()
const std::string DisplayData::changeDisplayToTexture(const std::string& displayName)
void DisplayData::copy(DisplayData *displayData)
void SpriteDisplayData::copy(DisplayData *displayData)
bool BoneData::init()
void BoneData::addDisplayData(DisplayData *displayData)
DisplayData *BoneData::getDisplayData(int index)
bool ArmatureData::init()
void ArmatureData::addBoneData(BoneData *boneData)
BoneData *ArmatureData::getBoneData(const std::string& boneName)
void FrameData::copy(const BaseData *baseData)
bool MovementBoneData::init()
void MovementBoneData::addFrameData(FrameData *frameData)
FrameData *MovementBoneData::getFrameData(int index)
void MovementData::addMovementBoneData(MovementBoneData *movBoneData)
MovementBoneData *MovementData::getMovementBoneData(const std::string& boneName)
void AnimationData::addMovement(MovementData *movData)
MovementData *AnimationData::getMovement(const std::string& movementName)
ssize_t AnimationData::getMovementCount()
bool ContourData::init()
void ContourData::addVertex(Vec2 &vertex)
bool TextureData::init()
void TextureData::addContourData(ContourData *contourData)
ContourData *TextureData::getContourData(int index)
DecorativeDisplay *DecorativeDisplay::create()
bool DecorativeDisplay::init()
void DecorativeDisplay::setDisplay(cocos2d::Node *display)
void DisplayFactory::addDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)
void DisplayFactory::createDisplay(Bone *bone, DecorativeDisplay *decoDisplay)
void DisplayFactory::updateDisplay(Bone *bone, float dt, bool dirty)
void DisplayFactory::addSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)
void DisplayFactory::createSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay)
void DisplayFactory::initSpriteDisplay(Bone *bone, DecorativeDisplay *decoDisplay, const char *displayName, Skin *skin)
void DisplayFactory::addArmatureDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)
void DisplayFactory::createArmatureDisplay(Bone *bone, DecorativeDisplay *decoDisplay)
void DisplayFactory::updateArmatureDisplay(Bone *bone, Node *display, float dt)
void DisplayFactory::addParticleDisplay(Bone *bone, DecorativeDisplay *decoDisplay, DisplayData *displayData)
void DisplayFactory::createParticleDisplay(Bone *bone, DecorativeDisplay *decoDisplay)
void DisplayFactory::updateParticleDisplay(Bone *bone, Node *display, float dt)
DisplayManager *DisplayManager::create(Bone *bone)
bool DisplayManager::init(Bone *bone)
void DisplayManager::addDisplay(DisplayData *displayData, int index)
void DisplayManager::addDisplay(Node *display, int index)
void DisplayManager::removeDisplay(int index)
const cocos2d::Vector<DecorativeDisplay*>& DisplayManager::getDecorativeDisplayList() const
void DisplayManager::changeDisplayWithIndex(int index, bool force)
void DisplayManager::changeDisplayWithName(const std::string& name, bool force)
void DisplayManager::setCurrentDecorativeDisplay(DecorativeDisplay *decoDisplay)
Node *DisplayManager::getDisplayRenderNode() const
DisplayType DisplayManager::getDisplayRenderNodeType() const
int DisplayManager::getCurrentDisplayIndex() const
DecorativeDisplay *DisplayManager::getCurrentDecorativeDisplay() const
DecorativeDisplay *DisplayManager::getDecorativeDisplayByIndex( int index) const
void DisplayManager::initDisplayList(BoneData *boneData)
bool DisplayManager::containPoint(Vec2 &point)
bool DisplayManager::containPoint(float x, float y)
void DisplayManager::setVisible(bool visible)
bool DisplayManager::isVisible() const
Size DisplayManager::getContentSize() const
Rect DisplayManager::getBoundingBox() const
Vec2 DisplayManager::getAnchorPoint() const
Vec2 DisplayManager::getAnchorPointInPoints() const
bool InputDelegate::onTouchBegan(Touch *pTouch, Event *pEvent)
void InputDelegate::onTouchMoved(Touch *pTouch, Event *pEvent)
void InputDelegate::onTouchEnded(Touch *pTouch, Event *pEvent)
void InputDelegate::onTouchCancelled(Touch *pTouch, Event *pEvent)
void InputDelegate::onTouchesBegan(const std::vector<Touch*>& pTouches, Event *pEvent)
void InputDelegate::onTouchesMoved(const std::vector<Touch*>& pTouches, Event *pEvent)
void InputDelegate::onTouchesEnded(const std::vector<Touch*>& pTouches, Event *pEvent)
void InputDelegate::onTouchesCancelled(const std::vector<Touch*>& pTouches, Event *pEvent)
bool InputDelegate::isTouchEnabled() const
void InputDelegate::setTouchEnabled(bool enabled)
void InputDelegate::setTouchMode(Touch::DispatchMode mode)
void InputDelegate::setTouchPriority(int priority)
int InputDelegate::getTouchPriority() const
Touch::DispatchMode InputDelegate::getTouchMode() const
bool InputDelegate::isAccelerometerEnabled() const
void InputDelegate::setAccelerometerEnabled(bool enabled)
bool InputDelegate::isKeypadEnabled() const
void InputDelegate::setKeypadEnabled(bool enabled)
void ProcessBase::pause()
void ProcessBase::resume()
void ProcessBase::stop()
void ProcessBase::play(int durationTo, int durationTween,  int loop, int tweenEasing)
void ProcessBase::update(float dt)
void ProcessBase::gotoFrame(int frameIndex)
int ProcessBase::getCurrentFrameIndex()
GUIReader* GUIReader::getInstance()
void GUIReader::destroyInstance()
int GUIReader::getVersionInteger(const char *str)
void GUIReader::storeFileDesignSize(const char *fileName, const cocos2d::Size &size)
const cocos2d::Size GUIReader::getFileDesignSize(const char* fileName) const
Widget* GUIReader::widgetFromJsonFile(const char *fileName)
std::string WidgetPropertiesReader::getWidgetReaderClassName(Widget* widget)
std::string WidgetPropertiesReader::getGUIClassName(const std::string &name)
cocos2d::ui::Widget* WidgetPropertiesReader::createGUI(const std::string &classname)
WidgetReaderProtocol* WidgetPropertiesReader::createWidgetReaderProtocol(const std::string &classname)
Widget* GUIReader::widgetFromBinaryFile(const char *fileName)
std::string  WidgetPropertiesReader::getWidgetReaderClassName(const std::string& classname)
void WidgetPropertiesReader::setAnchorPointForWidget(cocos2d::ui::Widget *widget, const rapidjson::Value &options)
Widget* WidgetPropertiesReader0250::createWidget(const rapidjson::Value& data, const char* fullPath, const char* fileName)
Widget* WidgetPropertiesReader0250::widgetFromJsonDictionary(const rapidjson::Value&data)
void WidgetPropertiesReader0250::setPropsForWidgetFromJsonDictionary(Widget*widget,const rapidjson::Value&options)
void WidgetPropertiesReader0250::setColorPropsForWidgetFromJsonDictionary(Widget *widget, const rapidjson::Value&options)
void WidgetPropertiesReader0250::setPropsForButtonFromJsonDictionary(Widget*widget,const rapidjson::Value& options)
void WidgetPropertiesReader0250::setPropsForCheckBoxFromJsonDictionary(Widget*widget,const rapidjson::Value& options)
void WidgetPropertiesReader0250::setPropsForImageViewFromJsonDictionary(Widget*widget,const rapidjson::Value& options)
void WidgetPropertiesReader0250::setPropsForLabelFromJsonDictionary(Widget*widget,const rapidjson::Value& options)
void WidgetPropertiesReader0250::setPropsForLabelAtlasFromJsonDictionary(Widget*widget,const rapidjson::Value& options)
void WidgetPropertiesReader0250::setPropsForLayoutFromJsonDictionary(Widget*widget,const rapidjson::Value& options)
void WidgetPropertiesReader0250::setPropsForScrollViewFromJsonDictionary(Widget*widget,const rapidjson::Value& options)
void WidgetPropertiesReader0250::setPropsForSliderFromJsonDictionary(Widget*widget,const rapidjson::Value& options)
void WidgetPropertiesReader0250::setPropsForTextFieldFromJsonDictionary(Widget*widget,const rapidjson::Value& options)
void WidgetPropertiesReader0250::setPropsForLoadingBarFromJsonDictionary(Widget *widget, const rapidjson::Value&options)
void WidgetPropertiesReader0250::setPropsForLabelBMFontFromJsonDictionary(Widget *widget, const rapidjson::Value&options)
void WidgetPropertiesReader0250::setPropsForAllWidgetFromJsonDictionary(WidgetReaderProtocol *reader, Widget *widget, const rapidjson::Value &options)
const rapidjson::Value &customOptions)
Widget* WidgetPropertiesReader0300::createWidget(const rapidjson::Value& data, const char* fullPath, const char* fileName)
cocos2d::ui::Widget* WidgetPropertiesReader0300::createWidgetFromBinary(CocoLoader* cocoLoader,stExpCocoNode*	cocoNode, const char* fileName)
Widget* WidgetPropertiesReader0300::widgetFromBinary(CocoLoader* cocoLoader,  stExpCocoNode*	cocoNode)
Widget* WidgetPropertiesReader0300::widgetFromJsonDictionary(const rapidjson::Value& data)
void WidgetPropertiesReader0300::setPropsForAllWidgetFromJsonDictionary(WidgetReaderProtocol *reader, Widget *widget, const rapidjson::Value &options)
const rapidjson::Value &customOptions)
Skin *Skin::create()
Skin *Skin::createWithSpriteFrameName(const std::string& pszSpriteFrameName)
Skin *Skin::create(const std::string& pszFileName)
bool Skin::initWithSpriteFrameName(const std::string& spriteFrameName)
bool Skin::initWithFile(const std::string& filename)
void Skin::setSkinData(const BaseData &var)
const BaseData &Skin::getSkinData() const
void Skin::updateArmatureTransform()
void Skin::updateTransform()
Mat4 Skin::getNodeToWorldTransform() const
Mat4 Skin::getNodeToWorldTransformAR() const
void Skin::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void Skin::setBone(Bone *bone)
Bone *Skin::getBone() const
SpriteFrameCacheHelper *SpriteFrameCacheHelper::getInstance()
void SpriteFrameCacheHelper::purge()
void SpriteFrameCacheHelper::retainSpriteFrames(const std::string &plistPath)
void SpriteFrameCacheHelper::releaseSpriteFrames(const std::string &plistPath)
void SpriteFrameCacheHelper::removeSpriteFrameFromFile(const std::string &plistPath)
void SpriteFrameCacheHelper::addSpriteFrameFromFile(const std::string& plistPath, const std::string& imagePath)
const char* SceneReader::sceneReaderVersion()
cocos2d::Node* SceneReader::createNodeWithSceneFile(const std::string &fileName, AttachComponentType attachComponent /*= AttachComponentType::EMPTY_NODE*/)
bool SceneReader::readJson(const std::string &fileName, rapidjson::Document &doc)
Node* SceneReader::nodeByTag(Node *parent, int tag)
cocos2d::Component* SceneReader::createComponent(const std::string classname)
std::string SceneReader::getComponentClassName(const std::string &name)
Node* SceneReader::createObject(const rapidjson::Value &dict, cocos2d::Node* parent, AttachComponentType attachComponent)
cocos2d::Node* SceneReader::createObject(CocoLoader *cocoLoader, stExpCocoNode *cocoNode, cocos2d::Node* parent, AttachComponentType attachComponent)
void SceneReader::setTarget(const std::function<void(cocos2d::Ref* obj, void* doc)>& selector)
Node* SceneReader::getNodeByTag(int nTag)
void SceneReader::setPropertyFromJsonDict(const rapidjson::Value &root, cocos2d::Node *node)
void SceneReader::setPropertyFromJsonDict(CocoLoader *cocoLoader, stExpCocoNode *cocoNode, cocos2d::Node *node)
SceneReader* SceneReader::getInstance()
void SceneReader::destroyInstance()
void TransformHelp::transformFromParent(BaseData &node, const BaseData &parentNode)
void TransformHelp::transformToParent(BaseData &node, const BaseData &parentNode)
void TransformHelp::transformFromParentWithoutScale(BaseData &node, const BaseData &parentNode)
void TransformHelp::transformToParentWithoutScale(BaseData &node, const BaseData &parentNode)
void TransformHelp::nodeToMatrix(const BaseData &node, AffineTransform &matrix)
void TransformHelp::nodeToMatrix(const BaseData &node, Mat4 &matrix)
void TransformHelp::matrixToNode(const AffineTransform &matrix, BaseData &node)
void TransformHelp::matrixToNode(const Mat4 &matrix, BaseData &node)
void TransformHelp::nodeConcat(BaseData &target, BaseData &source)
void TransformHelp::nodeSub(BaseData &target, BaseData &source)
Tween *Tween::create(Bone *bone)
bool Tween::init(Bone *bone)
void Tween::play(MovementBoneData *movementBoneData, int durationTo, int durationTween,  int loop, int tweenEasing)
void Tween::gotoAndPlay(int frameIndex)
void Tween::gotoAndPause(int frameIndex)
void Tween::updateHandler()
void Tween::setBetween(FrameData *from, FrameData *to, bool limit)
void Tween::arriveKeyFrame(FrameData *keyFrameData)
FrameData *Tween::tweenNodeTo(float percent, FrameData *node)
void Tween::tweenColorTo(float percent, FrameData *node)
float Tween::updateFrameData(float currentPercent)
char*	stExpCocoAttribDesc::GetName(CocoLoader* pCoco)
char*	stExpCocoObjectDesc::GetName(CocoLoader* pCoco)
stExpCocoAttribDesc* stExpCocoObjectDesc::GetAttribDescArray(CocoLoader* pCoco)
Type stExpCocoNode::GetType(CocoLoader*	pCoco)
char* stExpCocoNode::GetValue(CocoLoader* pCoco)
stExpCocoNode*	stExpCocoNode::GetChildArray(CocoLoader* pCoco)
bool	CocoLoader::ReadCocoBinBuff(char* pBinBuff)
DictionaryHelper* DictionaryHelper::getInstance()
void DictionaryHelper::destroyInstance()
const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, const char* key)
const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, const char* key, int idx)
const rapidjson::Value& DictionaryHelper::getSubDictionary_json(const rapidjson::Value &root, int idx)
int DictionaryHelper::getIntValue_json(const rapidjson::Value& root, const char* key, int def)
float DictionaryHelper::getFloatValue_json(const rapidjson::Value& root,const char* key, float def)
bool DictionaryHelper::getBooleanValue_json(const rapidjson::Value& root,const char* key, bool def)
const char* DictionaryHelper::getStringValue_json(const rapidjson::Value& root,const char* key, const char *def)
int DictionaryHelper::getArrayCount_json(const rapidjson::Value& root, const char* key, int def)
int DictionaryHelper::getIntValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, int def)
float DictionaryHelper::getFloatValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, float def)
bool DictionaryHelper::getBoolValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, bool def)
const char* DictionaryHelper::getStringValueFromArray_json(const rapidjson::Value& root,const char* arrayKey,int idx, const char *def)
const rapidjson::Value &DictionaryHelper::getDictionaryFromArray_json(const rapidjson::Value &root, const char* key,int idx)
bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root)
bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root,const char* key)
bool DictionaryHelper::checkObjectExist_json(const rapidjson::Value &root, int index)
FlatBuffersSerialize* FlatBuffersSerialize::getInstance()
void FlatBuffersSerialize::purge()
void FlatBuffersSerialize::destroyInstance()
void FlatBuffersSerialize::deleteFlatBufferBuilder()
const std::string &flatbuffersFileName)
std::string classType)
int FlatBuffersSerialize::getResourceType(std::string key)
std::string FlatBuffersSerialize::getGUIClassName(const std::string &name)
std::string FlatBuffersSerialize::getWidgetReaderClassName(Widget* widget)
Offset<NodeAction> FlatBuffersSerialize::createNodeAction(const tinyxml2::XMLElement *objectData)
Offset<TimeLine> FlatBuffersSerialize::createTimeLine(const tinyxml2::XMLElement *objectData)
Offset<flatbuffers::PointFrame> FlatBuffersSerialize::createPointFrame(const tinyxml2::XMLElement *objectData)
Offset<flatbuffers::ScaleFrame> FlatBuffersSerialize::createScaleFrame(const tinyxml2::XMLElement *objectData)
Offset<flatbuffers::ColorFrame> FlatBuffersSerialize::createColorFrame(const tinyxml2::XMLElement *objectData)
Offset<flatbuffers::TextureFrame> FlatBuffersSerialize::createTextureFrame(const tinyxml2::XMLElement *objectData)
Offset<flatbuffers::EventFrame> FlatBuffersSerialize::createEventFrame(const tinyxml2::XMLElement *objectData)
Offset<flatbuffers::IntFrame> FlatBuffersSerialize::createIntFrame(const tinyxml2::XMLElement *objectData)
Offset<flatbuffers::BoolFrame> FlatBuffersSerialize::createBoolFrame(const tinyxml2::XMLElement *objectData)
Offset<flatbuffers::InnerActionFrame> FlatBuffersSerialize::createInnerActionFrame(const tinyxml2::XMLElement *objectData)
flatbuffers::Offset<flatbuffers::BlendFrame> FlatBuffersSerialize::createBlendFrame(const tinyxml2::XMLElement* objectData)
flatbuffers::Offset<flatbuffers::EasingData> FlatBuffersSerialize::createEasingData(const tinyxml2::XMLElement *objectData)
FlatBufferBuilder* FlatBuffersSerialize::createFlatBuffersWithXMLFileForSimulator(const std::string &xmlFileName)
std::string classType)
Offset<ProjectNodeOptions> FlatBuffersSerialize::createProjectNodeOptionsForSimulator(const tinyxml2::XMLElement *objectData)
const char* TriggerMng::triggerMngVersion()
TriggerMng* TriggerMng::getInstance()
void TriggerMng::destroyInstance()
void TriggerMng::parse(const rapidjson::Value &root)
void TriggerMng::parse(cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)
TriggerObj* TriggerMng::getTriggerObj(unsigned int id) const
void TriggerMng::removeAll(void)
bool TriggerMng::removeTriggerObj(TriggerObj *Obj)
bool TriggerMng::removeTriggerObj(unsigned int id)
bool TriggerMng::isEmpty(void) const
void TriggerMng::buildJson(rapidjson::Document &document, cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)
void TriggerMng::addArmatureMovementCallBack(Armature *pAr, Ref *pTarget, SEL_MovementEventCallFunc mecf)
void TriggerMng::removeArmatureMovementCallBack(Armature *pAr, Ref *pTarget, SEL_MovementEventCallFunc mecf)
void TriggerMng::removeArmatureAllMovementCallBack(Armature *pAr)
void TriggerMng::removeAllArmatureMovementCallBack()
void TriggerMng::dispatchEvent(cocos2d::EventCustom* tEvent)
void TriggerMng::removeEventListener(cocos2d::EventListener* listener)
void TriggerMng::addEventListenerWithFixedPriority(cocos2d::EventListener* listener, int fixedPriority)
bool BaseTriggerCondition::init()
bool BaseTriggerCondition::detect()
void BaseTriggerCondition::serialize(const rapidjson::Value &val)
void BaseTriggerCondition::serialize(cocostudio::CocoLoader *cocoLoader, cocostudio::stExpCocoNode *cocoNode)
void BaseTriggerCondition::removeAll()
bool BaseTriggerAction::init()
void BaseTriggerAction::done()
void BaseTriggerAction::serialize(const rapidjson::Value &val)
void BaseTriggerAction::serialize(cocostudio::CocoLoader *cocoLoader, cocostudio::stExpCocoNode *cocoNode)
void BaseTriggerAction::removeAll()
bool TriggerObj::init()
TriggerObj* TriggerObj::create()
bool TriggerObj::detect()
void TriggerObj::done()
void TriggerObj::removeAll()
void TriggerObj::serialize(const rapidjson::Value &val)
void TriggerObj::serialize(cocostudio::CocoLoader *pCocoLoader, cocostudio::stExpCocoNode *pCocoNode)
unsigned int TriggerObj::getId()
void TriggerObj::setEnabled(bool enabled)
ArmatureNodeReader* ArmatureNodeReader::getInstance()
void ArmatureNodeReader::destroyInstance()
flatbuffers::FlatBufferBuilder *builder)
const flatbuffers::Table *nodeOptions)
cocos2d::Node*  ArmatureNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)
std::string ArmatureNodeReader::getArmatureName(const std::string& exporJsonPath)
BoneNodeReader* BoneNodeReader::getInstance()
void BoneNodeReader::destroyInstance()
flatbuffers::FlatBufferBuilder *builder)
const flatbuffers::Table *nodeOptions)
cocos2d::Node*  BoneNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)
SkeletonNodeReader* SkeletonNodeReader::getInstance()
void SkeletonNodeReader::destroyInstance()
cocos2d::Node*  SkeletonNodeReader::createNodeWithFlatBuffers(const flatbuffers::Table *nodeOptions)
PolygonBatch* PolygonBatch::createWithCapacity (ssize_t capacity)
bool PolygonBatch::initWithCapacity (ssize_t capacity)
PolygonBatch::~PolygonBatch ()
void PolygonBatch::flush ()
SkeletonAnimation* SkeletonAnimation::createWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)
SkeletonAnimation* SkeletonAnimation::createWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)
SkeletonAnimation* SkeletonAnimation::createWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)
void SkeletonAnimation::initialize ()
SkeletonAnimation::~SkeletonAnimation ()
void SkeletonAnimation::update (float deltaTime)
void SkeletonAnimation::setAnimationStateData (spAnimationStateData* stateData)
void SkeletonAnimation::setMix (const std::string& fromAnimation, const std::string& toAnimation, float duration)
spTrackEntry* SkeletonAnimation::setAnimation (int trackIndex, const std::string& name, bool loop)
spTrackEntry* SkeletonAnimation::addAnimation (int trackIndex, const std::string& name, bool loop, float delay)
spTrackEntry* SkeletonAnimation::getCurrent (int trackIndex)
void SkeletonAnimation::clearTracks ()
void SkeletonAnimation::clearTrack (int trackIndex)
void SkeletonAnimation::onAnimationStateEvent (int trackIndex, spEventType type, spEvent* event, int loopCount)
void SkeletonAnimation::onTrackEntryEvent (int trackIndex, spEventType type, spEvent* event, int loopCount)
void SkeletonAnimation::setStartListener (const StartListener& listener)
void SkeletonAnimation::setEndListener (const EndListener& listener)
void SkeletonAnimation::setCompleteListener (const CompleteListener& listener)
void SkeletonAnimation::setEventListener (const EventListener& listener)
void SkeletonAnimation::setTrackStartListener (spTrackEntry* entry, const StartListener& listener)
void SkeletonAnimation::setTrackEndListener (spTrackEntry* entry, const EndListener& listener)
void SkeletonAnimation::setTrackCompleteListener (spTrackEntry* entry, const CompleteListener& listener)
void SkeletonAnimation::setTrackEventListener (spTrackEntry* entry, const EventListener& listener)
spAnimationState* SkeletonAnimation::getState() const
SkeletonRenderer* SkeletonRenderer::createWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)
SkeletonRenderer* SkeletonRenderer::createWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)
SkeletonRenderer* SkeletonRenderer::createWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)
void SkeletonRenderer::initialize ()
void SkeletonRenderer::setSkeletonData (spSkeletonData *skeletonData, bool ownsSkeletonData)
SkeletonRenderer::~SkeletonRenderer ()
void SkeletonRenderer::initWithData (spSkeletonData* skeletonData, bool ownsSkeletonData)
void SkeletonRenderer::initWithFile (const std::string& skeletonDataFile, spAtlas* atlas, float scale)
void SkeletonRenderer::initWithFile (const std::string& skeletonDataFile, const std::string& atlasFile, float scale)
void SkeletonRenderer::update (float deltaTime)
void SkeletonRenderer::draw (Renderer* renderer, const Mat4& transform, uint32_t transformFlags)
void SkeletonRenderer::drawSkeleton (const Mat4 &transform, uint32_t transformFlags)
Texture2D* SkeletonRenderer::getTexture (spRegionAttachment* attachment) const
Texture2D* SkeletonRenderer::getTexture (spMeshAttachment* attachment) const
Texture2D* SkeletonRenderer::getTexture (spSkinnedMeshAttachment* attachment) const
Rect SkeletonRenderer::getBoundingBox () const
void SkeletonRenderer::updateWorldTransform ()
void SkeletonRenderer::setToSetupPose ()
void SkeletonRenderer::setBonesToSetupPose ()
void SkeletonRenderer::setSlotsToSetupPose ()
spBone* SkeletonRenderer::findBone (const std::string& boneName) const
spSlot* SkeletonRenderer::findSlot (const std::string& slotName) const
bool SkeletonRenderer::setSkin (const std::string& skinName)
bool SkeletonRenderer::setSkin (const char* skinName)
spAttachment* SkeletonRenderer::getAttachment (const std::string& slotName, const std::string& attachmentName) const
bool SkeletonRenderer::setAttachment (const std::string& slotName, const std::string& attachmentName)
bool SkeletonRenderer::setAttachment (const std::string& slotName, const char* attachmentName)
spSkeleton* SkeletonRenderer::getSkeleton ()
void SkeletonRenderer::setTimeScale (float scale)
float SkeletonRenderer::getTimeScale () const
void SkeletonRenderer::setDebugSlotsEnabled (bool enabled)
bool SkeletonRenderer::getDebugSlotsEnabled () const
void SkeletonRenderer::setDebugBonesEnabled (bool enabled)
bool SkeletonRenderer::getDebugBonesEnabled () const
void SkeletonRenderer::onEnter ()
void SkeletonRenderer::onExit ()
const BlendFunc& SkeletonRenderer::getBlendFunc () const
void SkeletonRenderer::setBlendFunc (const BlendFunc &blendFunc)
void SkeletonRenderer::setOpacityModifyRGB (bool value)
bool SkeletonRenderer::isOpacityModifyRGB () const
Size::Size(void) : width(0), height(0)
Size::Size(float w, float h) : width(w), height(h)
Size::Size(const Size& other) : width(other.width), height(other.height)
Size::Size(const Vec2& point) : width(point.x), height(point.y)
Size Size::operator+(const Size& right) const
Size Size::operator-(const Size& right) const
Size Size::operator*(float a) const
Size Size::operator/(float a) const
void Size::setSize(float w, float h)
bool Size::equals(const Size& target) const
Rect::Rect(float x, float y, float width, float height)
Rect::Rect(const Vec2& pos, const Size& dimension)
Rect::Rect(const Rect& other)
void Rect::setRect(float x, float y, float width, float height)
bool Rect::equals(const Rect& rect) const
float Rect::getMaxX() const
float Rect::getMidX() const
float Rect::getMinX() const
float Rect::getMaxY() const
float Rect::getMidY() const
float Rect::getMinY() const
bool Rect::containsPoint(const Vec2& point) const
bool Rect::intersectsRect(const Rect& rect) const
bool Rect::intersectsCircle(const cocos2d::Vec2 &center, float radius) const
void Rect::merge(const Rect& rect)
Rect Rect::unionWithRect(const Rect & rect) const
Mat4::Mat4(const float* mat)
Mat4::Mat4(const Mat4& copy)
void Mat4::createLookAt(const Vec3& eyePosition, const Vec3& targetPosition, const Vec3& up, Mat4* dst)
void Mat4::createOrthographic(float width, float height, float zNearPlane, float zFarPlane, Mat4* dst)
void Mat4::createScale(const Vec3& scale, Mat4* dst)
void Mat4::createScale(float xScale, float yScale, float zScale, Mat4* dst)
void Mat4::createRotation(const Quaternion& q, Mat4* dst)
void Mat4::createRotation(const Vec3& axis, float angle, Mat4* dst)
void Mat4::createRotationX(float angle, Mat4* dst)
void Mat4::createRotationY(float angle, Mat4* dst)
void Mat4::createRotationZ(float angle, Mat4* dst)
void Mat4::createTranslation(const Vec3& translation, Mat4* dst)
void Mat4::createTranslation(float xTranslation, float yTranslation, float zTranslation, Mat4* dst)
void Mat4::add(float scalar)
void Mat4::add(float scalar, Mat4* dst)
void Mat4::add(const Mat4& mat)
void Mat4::add(const Mat4& m1, const Mat4& m2, Mat4* dst)
bool Mat4::decompose(Vec3* scale, Quaternion* rotation, Vec3* translation) const
float Mat4::determinant() const
void Mat4::getScale(Vec3* scale) const
bool Mat4::getRotation(Quaternion* rotation) const
void Mat4::getTranslation(Vec3* translation) const
void Mat4::getUpVector(Vec3* dst) const
void Mat4::getDownVector(Vec3* dst) const
void Mat4::getLeftVector(Vec3* dst) const
void Mat4::getRightVector(Vec3* dst) const
void Mat4::getForwardVector(Vec3* dst) const
void Mat4::getBackVector(Vec3* dst) const
Mat4 Mat4::getInversed() const
bool Mat4::inverse()
bool Mat4::isIdentity() const
void Mat4::multiply(float scalar)
void Mat4::multiply(float scalar, Mat4* dst) const
void Mat4::multiply(const Mat4& m, float scalar, Mat4* dst)
void Mat4::multiply(const Mat4& mat)
void Mat4::multiply(const Mat4& m1, const Mat4& m2, Mat4* dst)
void Mat4::negate()
Mat4 Mat4::getNegated() const
void Mat4::rotate(const Quaternion& q)
void Mat4::rotate(const Quaternion& q, Mat4* dst) const
void Mat4::rotate(const Vec3& axis, float angle)
void Mat4::rotate(const Vec3& axis, float angle, Mat4* dst) const
void Mat4::rotateX(float angle)
void Mat4::rotateX(float angle, Mat4* dst) const
void Mat4::rotateY(float angle)
void Mat4::rotateY(float angle, Mat4* dst) const
void Mat4::rotateZ(float angle)
void Mat4::rotateZ(float angle, Mat4* dst) const
void Mat4::scale(float value)
void Mat4::scale(float value, Mat4* dst) const
void Mat4::scale(float xScale, float yScale, float zScale)
void Mat4::scale(float xScale, float yScale, float zScale, Mat4* dst) const
void Mat4::scale(const Vec3& s)
void Mat4::scale(const Vec3& s, Mat4* dst) const
void Mat4::set(const float* mat)
void Mat4::set(const Mat4& mat)
void Mat4::setIdentity()
void Mat4::setZero()
void Mat4::subtract(const Mat4& mat)
void Mat4::subtract(const Mat4& m1, const Mat4& m2, Mat4* dst)
void Mat4::transformVector(Vec3* vector) const
void Mat4::transformVector(const Vec3& vector, Vec3* dst) const
void Mat4::transformVector(float x, float y, float z, float w, Vec3* dst) const
void Mat4::transformVector(Vec4* vector) const
void Mat4::transformVector(const Vec4& vector, Vec4* dst) const
void Mat4::translate(float x, float y, float z)
void Mat4::translate(float x, float y, float z, Mat4* dst) const
void Mat4::translate(const Vec3& t)
void Mat4::translate(const Vec3& t, Mat4* dst) const
void Mat4::transpose()
Mat4 Mat4::getTransposed() const
void MathUtil::smooth(float* x, float target, float elapsedTime, float responseTime)
void MathUtil::smooth(float* x, float target, float elapsedTime, float riseTime, float fallTime)
float MathUtil::lerp(float from, float to, float alpha)
bool MathUtil::isNeon32Enabled()
bool MathUtil::isNeon64Enabled()
void MathUtil::addMatrix(const float* m, float scalar, float* dst)
void MathUtil::addMatrix(const float* m1, const float* m2, float* dst)
void MathUtil::subtractMatrix(const float* m1, const float* m2, float* dst)
void MathUtil::multiplyMatrix(const float* m, float scalar, float* dst)
void MathUtil::multiplyMatrix(const float* m1, const float* m2, float* dst)
void MathUtil::negateMatrix(const float* m, float* dst)
void MathUtil::transposeMatrix(const float* m, float* dst)
void MathUtil::transformVec4(const float* m, float x, float y, float z, float w, float* dst)
void MathUtil::transformVec4(const float* m, const float* v, float* dst)
void MathUtil::crossVec3(const float* v1, const float* v2, float* dst)
Quaternion::Quaternion(float* array)
Quaternion::Quaternion(const Mat4& m)
Quaternion::Quaternion(const Vec3& axis, float angle)
Quaternion::Quaternion(const Quaternion& copy)
const Quaternion& Quaternion::identity()
const Quaternion& Quaternion::zero()
bool Quaternion::isIdentity() const
bool Quaternion::isZero() const
void Quaternion::createFromRotationMatrix(const Mat4& m, Quaternion* dst)
void Quaternion::createFromAxisAngle(const Vec3& axis, float angle, Quaternion* dst)
void Quaternion::conjugate()
Quaternion Quaternion::getConjugated() const
bool Quaternion::inverse()
Quaternion Quaternion::getInversed() const
void Quaternion::multiply(const Quaternion& q)
void Quaternion::multiply(const Quaternion& q1, const Quaternion& q2, Quaternion* dst)
void Quaternion::normalize()
Quaternion Quaternion::getNormalized() const
void Quaternion::set(float xx, float yy, float zz, float ww)
void Quaternion::set(float* array)
void Quaternion::set(const Mat4& m)
void Quaternion::set(const Vec3& axis, float angle)
void Quaternion::set(const Quaternion& q)
void Quaternion::setIdentity()
float Quaternion::toAxisAngle(Vec3* axis) const
void Quaternion::lerp(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)
void Quaternion::slerp(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)
void Quaternion::squad(const Quaternion& q1, const Quaternion& q2, const Quaternion& s1, const Quaternion& s2, float t, Quaternion* dst)
void Quaternion::slerp(float q1x, float q1y, float q1z, float q1w, float q2x, float q2y, float q2z, float q2w, float t, float* dstx, float* dsty, float* dstz, float* dstw)
void Quaternion::slerpForSquad(const Quaternion& q1, const Quaternion& q2, float t, Quaternion* dst)
float Vec2::angle(const Vec2& v1, const Vec2& v2)
void Vec2::add(const Vec2& v1, const Vec2& v2, Vec2* dst)
void Vec2::clamp(const Vec2& min, const Vec2& max)
void Vec2::clamp(const Vec2& v, const Vec2& min, const Vec2& max, Vec2* dst)
float Vec2::distance(const Vec2& v) const
float Vec2::dot(const Vec2& v1, const Vec2& v2)
float Vec2::length() const
void Vec2::normalize()
Vec2 Vec2::getNormalized() const
void Vec2::rotate(const Vec2& point, float angle)
void Vec2::set(const float* array)
void Vec2::subtract(const Vec2& v1, const Vec2& v2, Vec2* dst)
bool Vec2::equals(const Vec2& target) const
bool Vec2::fuzzyEquals(const Vec2& b, float var) const
float Vec2::getAngle(const Vec2& other) const
Vec2 Vec2::rotateByAngle(const Vec2& pivot, float angle) const
bool Vec2::isSegmentOverlap(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D, Vec2* S, Vec2* E)
bool Vec2::isSegmentIntersect(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D)
Vec2 Vec2::getIntersectPoint(const Vec2& A, const Vec2& B, const Vec2& C, const Vec2& D)
Vec3::Vec3(const float* array)
Vec3::Vec3(const Vec3& p1, const Vec3& p2)
Vec3::Vec3(const Vec3& copy)
Vec3 Vec3::fromColor(unsigned int color)
float Vec3::angle(const Vec3& v1, const Vec3& v2)
void Vec3::add(const Vec3& v1, const Vec3& v2, Vec3* dst)
void Vec3::clamp(const Vec3& min, const Vec3& max)
void Vec3::clamp(const Vec3& v, const Vec3& min, const Vec3& max, Vec3* dst)
void Vec3::cross(const Vec3& v)
void Vec3::cross(const Vec3& v1, const Vec3& v2, Vec3* dst)
float Vec3::distance(const Vec3& v) const
float Vec3::distanceSquared(const Vec3& v) const
float Vec3::dot(const Vec3& v) const
float Vec3::dot(const Vec3& v1, const Vec3& v2)
void Vec3::normalize()
Vec3 Vec3::getNormalized() const
void Vec3::subtract(const Vec3& v1, const Vec3& v2, Vec3* dst)
void Vec3::smooth(const Vec3& target, float elapsedTime, float responseTime)
Vec4::Vec4(const float* src)
Vec4::Vec4(const Vec4& p1, const Vec4& p2)
Vec4::Vec4(const Vec4& copy)
Vec4 Vec4::fromColor(unsigned int color)
bool Vec4::isZero() const
bool Vec4::isOne() const
float Vec4::angle(const Vec4& v1, const Vec4& v2)
void Vec4::add(const Vec4& v)
void Vec4::add(const Vec4& v1, const Vec4& v2, Vec4* dst)
void Vec4::clamp(const Vec4& min, const Vec4& max)
void Vec4::clamp(const Vec4& v, const Vec4& min, const Vec4& max, Vec4* dst)
float Vec4::distance(const Vec4& v) const
float Vec4::distanceSquared(const Vec4& v) const
float Vec4::dot(const Vec4& v) const
float Vec4::dot(const Vec4& v1, const Vec4& v2)
float Vec4::length() const
float Vec4::lengthSquared() const
void Vec4::negate()
void Vec4::normalize()
Vec4 Vec4::getNormalized() const
void Vec4::scale(float scalar)
void Vec4::set(float xx, float yy, float zz, float ww)
void Vec4::set(const float* array)
void Vec4::set(const Vec4& v)
void Vec4::set(const Vec4& p1, const Vec4& p2)
void Vec4::subtract(const Vec4& v)
void Vec4::subtract(const Vec4& v1, const Vec4& v2, Vec4* dst)
NavMesh* NavMesh::create(const std::string &navFilePath, const std::string &geomFilePath)
bool NavMesh::initWithFilePath(const std::string &navFilePath, const std::string &geomFilePath)
bool NavMesh::read()
bool NavMesh::loadNavMeshFile()
bool NavMesh::loadGeomFile()
void NavMesh::dtDraw()
void cocos2d::NavMesh::drawOffMeshConnections()
void cocos2d::NavMesh::drawObstacles()
void cocos2d::NavMesh::drawAgents()
void NavMesh::removeNavMeshObstacle(NavMeshObstacle *obstacle)
void NavMesh::addNavMeshObstacle(NavMeshObstacle *obstacle)
void NavMesh::removeNavMeshAgent(NavMeshAgent *agent)
void NavMesh::addNavMeshAgent(NavMeshAgent *agent)
bool NavMesh::isDebugDrawEnabled() const
void NavMesh::setDebugDrawEnable(bool enable)
void NavMesh::debugDraw(Renderer* renderer)
void NavMesh::update(float dt)
void cocos2d::NavMesh::findPath(const Vec3 &start, const Vec3 &end, std::vector<Vec3> &pathPoints)
NavMeshAgent* NavMeshAgent::create(const NavMeshAgentParam &param)
const std::string& NavMeshAgent::getNavMeshAgentComponentName()
bool NavMeshAgent::initWith(const NavMeshAgentParam &param)
void cocos2d::NavMeshAgent::setNavMeshQuery(dtNavMeshQuery *query)
void cocos2d::NavMeshAgent::removeFrom(dtCrowd *crowed)
void cocos2d::NavMeshAgent::addTo(dtCrowd *crowed)
void cocos2d::NavMeshAgent::convertTodtAgentParam(const NavMeshAgentParam &inParam, dtCrowdAgentParams &outParam)
void cocos2d::NavMeshAgent::onExit()
void cocos2d::NavMeshAgent::onEnter()
float NavMeshAgent::getMaxSpeed() const
void NavMeshAgent::setSeparationWeight(float weight)
float NavMeshAgent::getSeparationWeight() const
void cocos2d::NavMeshAgent::setObstacleAvoidanceType(unsigned char type)
unsigned char NavMeshAgent::getObstacleAvoidanceType() const
Vec3 NavMeshAgent::getCurrentVelocity() const
void NavMeshAgent::setMaxSpeed(float maxSpeed)
float NavMeshAgent::getMaxAcceleration() const
void NavMeshAgent::setMaxAcceleration(float maxAcceleration)
float NavMeshAgent::getHeight() const
void NavMeshAgent::setHeight(float height)
float NavMeshAgent::getRadius() const
void NavMeshAgent::setRadius(float radius)
void NavMeshAgent::move(const Vec3 &destination, const MoveCallback &callback)
OffMeshLinkData NavMeshAgent::getCurrentOffMeshLinkData()
bool NavMeshAgent::isOnOffMeshLink()
void cocos2d::NavMeshAgent::completeOffMeshLink()
void NavMeshAgent::setAutoTraverseOffMeshLink(bool isAuto)
void NavMeshAgent::stop()
void NavMeshAgent::setOrientationRefAxes(const Vec3 &rotRefAxes)
void cocos2d::NavMeshAgent::setAutoOrientation(bool isAuto)
void NavMeshAgent::resume()
void NavMeshAgent::pause()
void NavMeshAgent::preUpdate(float delta)
void NavMeshAgent::postUpdate(float delta)
void NavMeshAgent::syncToNode()
void NavMeshAgent::syncToAgent()
Vec3 NavMeshAgent::getVelocity() const
void NavMeshDebugDraw::vertex(const float x, const float y, const float z, unsigned int color, const float u, const float v)
void NavMeshDebugDraw::vertex(const float* pos, unsigned int color, const float* uv)
void NavMeshDebugDraw::vertex(const float x, const float y, const float z, unsigned int color)
void NavMeshDebugDraw::vertex(const float* pos, unsigned int color)
void NavMeshDebugDraw::depthMask(bool state)
void NavMeshDebugDraw::begin(duDebugDrawPrimitives prim, float size /*= 1.0f*/)
void NavMeshDebugDraw::end()
Vec4 NavMeshDebugDraw::getColor(unsigned int col)
GLenum NavMeshDebugDraw::getPrimitiveType(duDebugDrawPrimitives prim)
void NavMeshDebugDraw::drawImplement(const cocos2d::Mat4& transform, uint32_t flags)
void NavMeshDebugDraw::draw(Renderer* renderer)
void NavMeshDebugDraw::clear()
NavMeshObstacle* NavMeshObstacle::create(float radius, float height)
const std::string& NavMeshObstacle::getNavMeshObstacleComponentName()
bool NavMeshObstacle::initWith(float radius, float height)
void cocos2d::NavMeshObstacle::removeFrom(dtTileCache *tileCache)
void cocos2d::NavMeshObstacle::addTo(dtTileCache *tileCache)
void cocos2d::NavMeshObstacle::onExit()
void cocos2d::NavMeshObstacle::onEnter()
void cocos2d::NavMeshObstacle::postUpdate(float delta)
void cocos2d::NavMeshObstacle::preUpdate(float delta)
void NavMeshObstacle::syncToNode()
void cocos2d::NavMeshObstacle::setRadius(float radius)
void cocos2d::NavMeshObstacle::setHeight(float height)
void NavMeshObstacle::syncToObstacle()
void LinearAllocator::free(void* /*ptr*/)
void* LinearAllocator::alloc(const int size)
void LinearAllocator::reset()
void LinearAllocator::resize(const int cap)
int FastLZCompressor::maxCompressedSize(const int bufferSize)
int Downloader::getConnectionTimeout()
void Downloader::setConnectionTimeout(int timeout)
void Downloader::notifyError(ErrorCode code, const std::string& msg/* ="" */, const std::string& customId/* ="" */, int curle_code/* = CURLE_OK*/, int curlm_code/* = CURLM_OK*/)
void Downloader::notifyError(const std::string& msg, int curlm_code, const std::string& customId/* = ""*/)
void Downloader::notifyError(const std::string& msg, const std::string& customId, int curle_code)
std::string Downloader::getFileNameFromUrl(const std::string& srcUrl)
void Downloader::prepareDownload(const DownloadUnit& downloadUnit)
void Downloader::downloadToBufferAsync(const std::string& srcUrl, unsigned char *buffer, long size, const std::string& customId/* = ""*/)
void Downloader::downloadToBufferSync(const std::string& srcUrl, unsigned char *buffer, long size, const std::string& customId/* = ""*/)
void Downloader::downloadToBuffer(const std::string& srcUrl, const std::string& customId, unsigned char* buffer, long size)
void Downloader::downloadAsync(const std::string& srcUrl, const std::string& storagePath, const std::string& customId/* = ""*/)
void Downloader::downloadSync(const std::string& srcUrl, const std::string& storagePath, const std::string& customId/* = ""*/)
void Downloader::downloadToFP(const std::string& srcUrl, const std::string& customId, const std::string& storagePath)
void Downloader::batchDownloadAsync(const DownloadUnits& units, const std::string& batchId/* = ""*/)
void Downloader::batchDownloadSync(const DownloadUnits& units, const std::string& batchId/* = ""*/)
void Downloader::groupBatchDownload(const DownloadUnits& units)
HeaderInfo Downloader::getHeader(const std::string &srcUrl)
size_t Downloader::fileWriteFunc(void *ptr, size_t size, size_t nmemb, void *userdata)
size_t Downloader::bufferWriteFunc(void *ptr, size_t size, size_t nmemb, void *userdata)
void Downloader::reportDownloadFinished(const std::string& url, const std::string& path, const std::string& customid)
void Downloader::reportProgressFinished(double totalToDownload, double nowDownloaded, const DownloadUnit* unit)
void Downloader::reportProgressInProgress(double totalToDownload, double nowDownloaded, const DownloadUnit* unit)
int Downloader::batchDownloadProgressFunc(void *userdata, double totalToDownload, double nowDownloaded)
int Downloader::downloadProgressFunc(void *userdata, double totalToDownload, double nowDownloaded)
bool DownloaderImpl::init()
std::string DownloaderImpl::getStrError() const
int DownloaderImpl::getHeader(const std::string& url, HeaderInfo* headerInfo)
bool DownloaderImpl::supportsResume(const std::string& url)
void DownloaderImpl::setConnectionTimeout(int connectionTimeout)
void HttpClient::processResponse(HttpResponse* response, char* responseMessage)
void HttpClient::networkThread()
void HttpClient::networkThreadAlone(HttpRequest* request, HttpResponse* response)
HttpClient* HttpClient::getInstance()
void HttpClient::destroyInstance()
void HttpClient::enableCookies(const char* cookieFile)
void HttpClient::setSSLVerification(const std::string& caFile)
bool HttpClient::lazyInitThreadSemphore()
void HttpClient::send(HttpRequest* request)
void HttpClient::sendImmediate(HttpRequest* request)
void HttpClient::dispatchResponseCallbacks()
void HttpClient::increaseThreadCount()
void HttpClient::decreaseThreadCountAndMayDeleteThis()
void HttpClient::setTimeoutForConnect(int value)
int HttpClient::getTimeoutForConnect()
void HttpClient::setTimeoutForRead(int value)
int HttpClient::getTimeoutForRead()
const std::string& HttpClient::getCookieFilename()
const std::string& HttpClient::getSSLVerification()
void HttpClient::enableCookies(const char* cookieFile)
void HttpClient::networkThread()
void HttpClient::networkThreadAlone(HttpRequest* request, HttpResponse* response)
HttpClient* HttpClient::getInstance()
void HttpClient::destroyInstance()
void HttpClient::enableCookies(const char* cookieFile)
void HttpClient::setSSLVerification(const std::string& caFile)
bool HttpClient::lazyInitThreadSemphore()
void HttpClient::send(HttpRequest* request)
void HttpClient::sendImmediate(HttpRequest* request)
void HttpClient::dispatchResponseCallbacks()
void HttpClient::processResponse(HttpResponse* response, char* responseMessage)
void HttpClient::increaseThreadCount()
void HttpClient::decreaseThreadCountAndMayDeleteThis()
void HttpClient::setTimeoutForConnect(int value)
int HttpClient::getTimeoutForConnect()
void HttpClient::setTimeoutForRead(int value)
int HttpClient::getTimeoutForRead()
const std::string& HttpClient::getCookieFilename()
const std::string& HttpClient::getSSLVerification()
void HttpCookie::readFile()
const std::vector<CookiesInfo>* HttpCookie::getCookies() const
const CookiesInfo* HttpCookie::getMatchCookie(const std::string& url) const
void HttpCookie::updateOrAddCookie(CookiesInfo* cookie)
void HttpCookie::writeFile()
void HttpCookie::setCookieFileName(std::string filename)
SocketIOPacket::SocketIOPacket() :_separator(":")
void SocketIOPacket::initWithType(const std::string& packetType)
void SocketIOPacket::initWithTypeIndex(int index)
std::string SocketIOPacket::toString()const
int SocketIOPacket::typeAsNumber()const
const std::string& SocketIOPacket::typeForIndex(int index)const
void SocketIOPacket::addData(const std::string& data)
std::string SocketIOPacket::stringify()const
int SocketIOPacketV10x::typeAsNumber()const
std::string SocketIOPacketV10x::stringify()const
SocketIOPacket * SocketIOPacket::createPacketWithType(std::string type, SocketIOPacket::SocketIOVersion version)
SocketIOPacket * SocketIOPacket::createPacketWithTypeIndex(int type, SocketIOPacket::SocketIOVersion version)
public WebSocket::Delegate
void SIOClientImpl::handshake()
void SIOClientImpl::handshakeResponse(HttpClient *sender, HttpResponse *response)
void SIOClientImpl::openSocket()
bool SIOClientImpl::init()
void SIOClientImpl::connect()
void SIOClientImpl::disconnect()
SIOClientImpl* SIOClientImpl::create(const std::string& host, int port)
SIOClient* SIOClientImpl::getClient(const std::string& endpoint)
void SIOClientImpl::addClient(const std::string& endpoint, SIOClient* client)
void SIOClientImpl::connectToEndpoint(const std::string& endpoint)
void SIOClientImpl::disconnectFromEndpoint(const std::string& endpoint)
void SIOClientImpl::heartbeat(float dt)
void SIOClientImpl::send(const std::string& endpoint, const std::string& s)
void SIOClientImpl::send(SocketIOPacket *packet)
void SIOClientImpl::emit(const std::string& endpoint, const std::string& eventname, const std::string& args)
void SIOClientImpl::onOpen(WebSocket* ws)
void SIOClientImpl::onMessage(WebSocket* ws, const WebSocket::Data& data)
void SIOClientImpl::onClose(WebSocket* ws)
void SIOClientImpl::onError(WebSocket* ws, const WebSocket::ErrorCode& error)
void SIOClient::onOpen()
void SIOClient::onConnect()
void SIOClient::send(const std::string& s)
void SIOClient::emit(const std::string& eventname, const std::string& args)
void SIOClient::disconnect()
void SIOClient::socketClosed()
void SIOClient::on(const std::string& eventName, SIOEvent e)
void SIOClient::fireEvent(const std::string& eventName, const std::string& data)
SocketIO* SocketIO::getInstance()
void SocketIO::destroyInstance()
SIOClient* SocketIO::connect(SocketIO::SIODelegate& delegate, const std::string& uri)
SIOClient* SocketIO::connect(const std::string& uri, SocketIO::SIODelegate& delegate)
SIOClientImpl* SocketIO::getSocket(const std::string& uri)
void SocketIO::addSocket(const std::string& uri, SIOClientImpl* socket)
void SocketIO::removeSocket(const std::string& uri)
bool WsThreadHelper::createThread(const WebSocket& ws)
void WsThreadHelper::quitSubThread()
void WsThreadHelper::wsThreadEntryFunc()
void WsThreadHelper::sendMessageToUIThread(WsMessage *msg)
void WsThreadHelper::sendMessageToSubThread(WsMessage *msg)
void WsThreadHelper::joinSubThread()
void WsThreadHelper::update(float dt)
const std::vector<std::string>* protocols/* = nullptr*/)
void WebSocket::send(const std::string& message)
void WebSocket::send(const unsigned char* binaryMsg, unsigned int len)
void WebSocket::close()
WebSocket::State WebSocket::getReadyState()
int WebSocket::onSubThreadLoop()
void WebSocket::onSubThreadStarted()
void WebSocket::onSubThreadEnded()
void WebSocket::onUIThreadReceiveMessage(WsMessage* msg)
PhysicsBody* PhysicsBody::create()
PhysicsBody* PhysicsBody::create(float mass)
PhysicsBody* PhysicsBody::create(float mass, float moment)
PhysicsBody* PhysicsBody::createCircle(float radius, const PhysicsMaterial& material, const Vec2& offset)
PhysicsBody* PhysicsBody::createBox(const Size& size, const PhysicsMaterial& material, const Vec2& offset)
PhysicsBody* PhysicsBody::createPolygon(const Vec2* points, int count, const PhysicsMaterial& material, const Vec2& offset)
PhysicsBody* PhysicsBody::createEdgeSegment(const Vec2& a, const Vec2& b, const PhysicsMaterial& material, float border/* = 1*/)
PhysicsBody* PhysicsBody::createEdgeBox(const Size& size, const PhysicsMaterial& material, float border/* = 1*/, const Vec2& offset)
PhysicsBody* PhysicsBody::createEdgePolygon(const Vec2* points, int count, const PhysicsMaterial& material, float border/* = 1*/)
PhysicsBody* PhysicsBody::createEdgeChain(const Vec2* points, int count, const PhysicsMaterial& material, float border/* = 1*/)
bool PhysicsBody::init()
void PhysicsBody::removeJoint(PhysicsJoint* joint)
void PhysicsBody::setDynamic(bool dynamic)
void PhysicsBody::setRotationEnable(bool enable)
void PhysicsBody::setGravityEnable(bool enable)
void PhysicsBody::setPosition(const Vec2& position)
void PhysicsBody::setRotation(float rotation)
void PhysicsBody::setScale(float scaleX, float scaleY)
const Vec2& PhysicsBody::getPosition()
float PhysicsBody::getRotation()
PhysicsShape* PhysicsBody::addShape(PhysicsShape* shape, bool addMassAndMoment/* = true*/)
void PhysicsBody::applyForce(const Vect& force)
void PhysicsBody::applyForce(const Vect& force, const Vec2& offset)
void PhysicsBody::resetForces()
void PhysicsBody::applyImpulse(const Vect& impulse)
void PhysicsBody::applyImpulse(const Vect& impulse, const Vec2& offset)
void PhysicsBody::applyTorque(float torque)
void PhysicsBody::setMass(float mass)
void PhysicsBody::addMass(float mass)
void PhysicsBody::addMoment(float moment)
void PhysicsBody::setVelocity(const Vec2& velocity)
Vec2 PhysicsBody::getVelocity()
Vec2 PhysicsBody::getVelocityAtLocalPoint(const Vec2& point)
Vec2 PhysicsBody::getVelocityAtWorldPoint(const Vec2& point)
void PhysicsBody::setAngularVelocity(float velocity)
float PhysicsBody::getAngularVelocity()
void PhysicsBody::setVelocityLimit(float limit)
float PhysicsBody::getVelocityLimit()
void PhysicsBody::setAngularVelocityLimit(float limit)
float PhysicsBody::getAngularVelocityLimit()
void PhysicsBody::setMoment(float moment)
PhysicsShape* PhysicsBody::getShape(int tag) const
void PhysicsBody::removeShape(int tag, bool reduceMassAndMoment/* = true*/)
void PhysicsBody::removeShape(PhysicsShape* shape, bool reduceMassAndMoment/* = true*/)
void PhysicsBody::removeAllShapes(bool reduceMassAndMoment/* = true*/)
void PhysicsBody::removeFromWorld()
void PhysicsBody::setEnable(bool enable)
bool PhysicsBody::isResting() const
void PhysicsBody::setResting(bool rest) const
void PhysicsBody::update(float delta)
void PhysicsBody::setCategoryBitmask(int bitmask)
int PhysicsBody::getCategoryBitmask() const
void PhysicsBody::setContactTestBitmask(int bitmask)
int PhysicsBody::getContactTestBitmask() const
void PhysicsBody::setCollisionBitmask(int bitmask)
int PhysicsBody::getCollisionBitmask() const
void PhysicsBody::setGroup(int group)
int PhysicsBody::getGroup() const
void PhysicsBody::setPositionOffset(const Vec2& position)
void PhysicsBody::setRotationOffset(float rotation)
Vec2 PhysicsBody::world2Local(const Vec2& point)
Vec2 PhysicsBody::local2World(const Vec2& point)
PhysicsContact* PhysicsContact::construct(PhysicsShape* a, PhysicsShape* b)
bool PhysicsContact::init(PhysicsShape* a, PhysicsShape* b)
void PhysicsContact::generateContactData()
float PhysicsContactPreSolve::getRestitution() const
float PhysicsContactPreSolve::getFriction() const
Vec2 PhysicsContactPreSolve::getSurfaceVelocity() const
void PhysicsContactPreSolve::setRestitution(float restitution)
void PhysicsContactPreSolve::setFriction(float friction)
void PhysicsContactPreSolve::setSurfaceVelocity(const Vect& velocity)
void PhysicsContactPreSolve::ignore()
float PhysicsContactPostSolve::getRestitution() const
float PhysicsContactPostSolve::getFriction() const
Vec2 PhysicsContactPostSolve::getSurfaceVelocity() const
bool EventListenerPhysicsContact::init()
void EventListenerPhysicsContact::onEvent(EventCustom* event)
EventListenerPhysicsContact* EventListenerPhysicsContact::create()
bool EventListenerPhysicsContact::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)
bool EventListenerPhysicsContact::checkAvailable()
EventListenerPhysicsContact* EventListenerPhysicsContact::clone()
EventListenerPhysicsContactWithBodies* EventListenerPhysicsContactWithBodies::create(PhysicsBody* bodyA, PhysicsBody* bodyB)
bool EventListenerPhysicsContactWithBodies::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)
EventListenerPhysicsContactWithBodies* EventListenerPhysicsContactWithBodies::clone()
EventListenerPhysicsContactWithShapes* EventListenerPhysicsContactWithShapes::create(PhysicsShape* shapeA, PhysicsShape* shapeB)
bool EventListenerPhysicsContactWithShapes::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)
EventListenerPhysicsContactWithShapes* EventListenerPhysicsContactWithShapes::clone()
EventListenerPhysicsContactWithGroup* EventListenerPhysicsContactWithGroup::create(int group)
bool EventListenerPhysicsContactWithGroup::hitTest(PhysicsShape* shapeA, PhysicsShape* shapeB)
EventListenerPhysicsContactWithGroup* EventListenerPhysicsContactWithGroup::clone()
bool PhysicsJoint::init(cocos2d::PhysicsBody *a, cocos2d::PhysicsBody *b)
bool PhysicsJoint::initJoint()
void PhysicsJoint::setEnable(bool enable)
void PhysicsJoint::setCollisionEnable(bool enable)
void PhysicsJoint::removeFormWorld()
void PhysicsJoint::setMaxForce(float force)
PhysicsJointFixed* PhysicsJointFixed::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr)
bool PhysicsJointFixed::createConstraints()
PhysicsJointPin* PhysicsJointPin::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& pivot)
PhysicsJointPin* PhysicsJointPin::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)
bool PhysicsJointPin::createConstraints()
PhysicsJointLimit* PhysicsJointLimit::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2, float min, float max)
PhysicsJointLimit* PhysicsJointLimit::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)
bool PhysicsJointLimit::createConstraints()
float PhysicsJointLimit::getMin() const
void PhysicsJointLimit::setMin(float min)
float PhysicsJointLimit::getMax() const
void PhysicsJointLimit::setMax(float max)
Vec2 PhysicsJointLimit::getAnchr1() const
void PhysicsJointLimit::setAnchr1(const Vec2& anchr)
Vec2 PhysicsJointLimit::getAnchr2() const
void PhysicsJointLimit::setAnchr2(const Vec2& anchr)
PhysicsJointDistance* PhysicsJointDistance::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2)
bool PhysicsJointDistance::createConstraints()
float PhysicsJointDistance::getDistance() const
void PhysicsJointDistance::setDistance(float distance)
PhysicsJointSpring* PhysicsJointSpring::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& anchr1, const Vec2& anchr2, float stiffness, float damping)
bool PhysicsJointSpring::createConstraints()
Vec2 PhysicsJointSpring::getAnchr1() const
void PhysicsJointSpring::setAnchr1(const Vec2& anchr)
Vec2 PhysicsJointSpring::getAnchr2() const
void PhysicsJointSpring::setAnchr2(const Vec2& anchr)
float PhysicsJointSpring::getRestLength() const
void PhysicsJointSpring::setRestLength(float restLength)
float PhysicsJointSpring::getStiffness() const
void PhysicsJointSpring::setStiffness(float stiffness)
float PhysicsJointSpring::getDamping() const
void PhysicsJointSpring::setDamping(float damping)
PhysicsJointGroove* PhysicsJointGroove::construct(PhysicsBody* a, PhysicsBody* b, const Vec2& grooveA, const Vec2& grooveB, const Vec2& anchr2)
bool PhysicsJointGroove::createConstraints()
Vec2 PhysicsJointGroove::getGrooveA() const
void PhysicsJointGroove::setGrooveA(const Vec2& grooveA)
Vec2 PhysicsJointGroove::getGrooveB() const
void PhysicsJointGroove::setGrooveB(const Vec2& grooveB)
Vec2 PhysicsJointGroove::getAnchr2() const
void PhysicsJointGroove::setAnchr2(const Vec2& anchr2)
PhysicsJointRotarySpring* PhysicsJointRotarySpring::construct(PhysicsBody* a, PhysicsBody* b, float stiffness, float damping)
bool PhysicsJointRotarySpring::createConstraints()
float PhysicsJointRotarySpring::getRestAngle() const
void PhysicsJointRotarySpring::setRestAngle(float restAngle)
float PhysicsJointRotarySpring::getStiffness() const
void PhysicsJointRotarySpring::setStiffness(float stiffness)
float PhysicsJointRotarySpring::getDamping() const
void PhysicsJointRotarySpring::setDamping(float damping)
PhysicsJointRotaryLimit* PhysicsJointRotaryLimit::construct(PhysicsBody* a, PhysicsBody* b, float min, float max)
PhysicsJointRotaryLimit* PhysicsJointRotaryLimit::construct(PhysicsBody* a, PhysicsBody* b)
bool PhysicsJointRotaryLimit::createConstraints()
float PhysicsJointRotaryLimit::getMin() const
void PhysicsJointRotaryLimit::setMin(float min)
float PhysicsJointRotaryLimit::getMax() const
void PhysicsJointRotaryLimit::setMax(float max)
PhysicsJointRatchet* PhysicsJointRatchet::construct(PhysicsBody* a, PhysicsBody* b, float phase, float ratchet)
bool PhysicsJointRatchet::createConstraints()
float PhysicsJointRatchet::getAngle() const
void PhysicsJointRatchet::setAngle(float angle)
float PhysicsJointRatchet::getPhase() const
void PhysicsJointRatchet::setPhase(float phase)
float PhysicsJointRatchet::getRatchet() const
void PhysicsJointRatchet::setRatchet(float ratchet)
PhysicsJointGear* PhysicsJointGear::construct(PhysicsBody* a, PhysicsBody* b, float phase, float ratio)
bool PhysicsJointGear::createConstraints()
float PhysicsJointGear::getPhase() const
void PhysicsJointGear::setPhase(float phase)
float PhysicsJointGear::getRatio() const
void PhysicsJointGear::setRatio(float ratio)
PhysicsJointMotor* PhysicsJointMotor::construct(PhysicsBody* a, PhysicsBody* b, float rate)
bool PhysicsJointMotor::createConstraints()
float PhysicsJointMotor::getRate() const
void PhysicsJointMotor::setRate(float rate)
void PhysicsShape::setMass(float mass)
void PhysicsShape::setMoment(float moment)
void PhysicsShape::setMaterial(const PhysicsMaterial& material)
void PhysicsShape::setScale(float scaleX, float scaleY)
void PhysicsShape::updateScale()
void PhysicsShape::addShape(cpShape* shape)
void PhysicsShape::setDensity(float density)
void PhysicsShape::setRestitution(float restitution)
void PhysicsShape::setFriction(float friction)
void PhysicsShape::setSensor(bool sensor)
void PhysicsShape::recenterPoints(Vec2* points, int count, const Vec2& center)
Vec2 PhysicsShape::getPolyonCenter(const Vec2* points, int count)
void PhysicsShape::setBody(PhysicsBody *body)
PhysicsShapeCircle* PhysicsShapeCircle::create(float radius, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)
bool PhysicsShapeCircle::init(float radius, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset /*= Vec2(0, 0)*/)
float PhysicsShapeCircle::calculateArea(float radius)
float PhysicsShapeCircle::calculateMoment(float mass, float radius, const Vec2& offset)
float PhysicsShapeCircle::calculateArea()
float PhysicsShapeCircle::calculateDefaultMoment()
float PhysicsShapeCircle::getRadius() const
Vec2 PhysicsShapeCircle::getOffset()
void PhysicsShapeCircle::updateScale()
PhysicsShapeEdgeSegment* PhysicsShapeEdgeSegment::create(const Vec2& a, const Vec2& b, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)
bool PhysicsShapeEdgeSegment::init(const Vec2& a, const Vec2& b, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)
Vec2 PhysicsShapeEdgeSegment::getPointA() const
Vec2 PhysicsShapeEdgeSegment::getPointB() const
Vec2 PhysicsShapeEdgeSegment::getCenter()
void PhysicsShapeEdgeSegment::updateScale()
PhysicsShapeBox* PhysicsShapeBox::create(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)
bool PhysicsShapeBox::init(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset /*= Vec2(0, 0)*/)
Size PhysicsShapeBox::getSize() const
PhysicsShapePolygon* PhysicsShapePolygon::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)
bool PhysicsShapePolygon::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, const Vec2& offset/* = Vec2(0, 0)*/)
float PhysicsShapePolygon::calculateArea(const Vec2* points, int count)
float PhysicsShapePolygon::calculateMoment(float mass, const Vec2* points, int count, const Vec2& offset)
float PhysicsShapePolygon::calculateArea()
float PhysicsShapePolygon::calculateDefaultMoment()
Vec2 PhysicsShapePolygon::getPoint(int i) const
void PhysicsShapePolygon::getPoints(Vec2* outPoints) const
int PhysicsShapePolygon::getPointsCount() const
Vec2 PhysicsShapePolygon::getCenter()
void PhysicsShapePolygon::updateScale()
PhysicsShapeEdgeBox* PhysicsShapeEdgeBox::create(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/, const Vec2& offset/* = Vec2(0, 0)*/)
bool PhysicsShapeEdgeBox::init(const Size& size, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/, const Vec2& offset/*= Vec2(0, 0)*/)
PhysicsShapeEdgePolygon* PhysicsShapeEdgePolygon::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)
bool PhysicsShapeEdgePolygon::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)
Vec2 PhysicsShapeEdgePolygon::getCenter()
void PhysicsShapeEdgePolygon::getPoints(cocos2d::Vec2 *outPoints) const
int PhysicsShapeEdgePolygon::getPointsCount() const
PhysicsShapeEdgeChain* PhysicsShapeEdgeChain::create(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)
void PhysicsShapeEdgePolygon::updateScale()
bool PhysicsShapeEdgeChain::init(const Vec2* points, int count, const PhysicsMaterial& material/* = MaterialDefault*/, float border/* = 1*/)
Vec2 PhysicsShapeEdgeChain::getCenter()
void PhysicsShapeEdgeChain::getPoints(Vec2* outPoints) const
int PhysicsShapeEdgeChain::getPointsCount() const
void PhysicsShapeEdgeChain::updateScale()
void PhysicsShape::setGroup(int group)
bool PhysicsShape::containsPoint(const Vec2& point) const
int PhysicsWorldCallback::collisionBeginCallbackFunc(cpArbiter *arb, struct cpSpace *space, PhysicsWorld *world)
int PhysicsWorldCallback::collisionPreSolveCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)
void PhysicsWorldCallback::collisionPostSolveCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)
void PhysicsWorldCallback::collisionSeparateCallbackFunc(cpArbiter *arb, cpSpace *space, PhysicsWorld *world)
void PhysicsWorldCallback::rayCastCallbackFunc(cpShape *shape, cpFloat t, cpVect n, RayCastCallbackInfo *info)
void PhysicsWorldCallback::queryRectCallbackFunc(cpShape *shape, RectQueryCallbackInfo *info)
void PhysicsWorldCallback::getShapesAtPointFunc(cpShape *shape, cpFloat distance, cpVect point, Vector<PhysicsShape*>* arr)
void PhysicsWorldCallback::queryPointFunc(cpShape *shape, cpFloat distance, cpVect point, PointQueryCallbackInfo *info)
void PhysicsWorld::debugDraw()
int PhysicsWorld::collisionBeginCallback(PhysicsContact& contact)
int PhysicsWorld::collisionPreSolveCallback(PhysicsContact& contact)
void PhysicsWorld::collisionPostSolveCallback(PhysicsContact& contact)
void PhysicsWorld::collisionSeparateCallback(PhysicsContact& contact)
void PhysicsWorld::rayCast(PhysicsRayCastCallbackFunc func, const Vec2& point1, const Vec2& point2, void* data)
void PhysicsWorld::queryRect(PhysicsQueryRectCallbackFunc func, const Rect& rect, void* data)
void PhysicsWorld::queryPoint(PhysicsQueryPointCallbackFunc func, const Vec2& point, void* data)
Vector<PhysicsShape*> PhysicsWorld::getShapes(const Vec2& point) const
PhysicsShape* PhysicsWorld::getShape(const Vec2& point) const
PhysicsWorld* PhysicsWorld::construct(Scene& scene)
bool PhysicsWorld::init(Scene& scene)
void PhysicsWorld::addBody(PhysicsBody* body)
void PhysicsWorld::doAddBody(PhysicsBody* body)
void PhysicsWorld::addBodyOrDelay(PhysicsBody* body)
void PhysicsWorld::updateBodies()
void PhysicsWorld::removeBody(int tag)
void PhysicsWorld::removeBody(PhysicsBody* body)
void PhysicsWorld::removeBodyOrDelay(PhysicsBody* body)
void PhysicsWorld::removeJoint(PhysicsJoint* joint, bool destroy)
void PhysicsWorld::updateJoints()
void PhysicsWorld::removeShape(PhysicsShape* shape)
void PhysicsWorld::addJoint(PhysicsJoint* joint)
void PhysicsWorld::removeAllJoints(bool destroy)
void PhysicsWorld::addShape(PhysicsShape* physicsShape)
void PhysicsWorld::doRemoveBody(PhysicsBody* body)
void PhysicsWorld::doRemoveJoint(PhysicsJoint* joint)
void PhysicsWorld::removeAllBodies()
void PhysicsWorld::setDebugDrawMask(int mask)
const Vector<PhysicsBody*>& PhysicsWorld::getAllBodies() const
PhysicsBody* PhysicsWorld::getBody(int tag) const
void PhysicsWorld::setGravity(const Vect& gravity)
void PhysicsWorld::setSubsteps(int steps)
void PhysicsWorld::step(float delta)
void PhysicsWorld::update(float delta, bool userCall/* = false*/)
bool PhysicsDebugDraw::begin()
void PhysicsDebugDraw::end()
void PhysicsDebugDraw::drawShape(PhysicsShape& shape)
void PhysicsDebugDraw::drawJoint(PhysicsJoint& joint)
void PhysicsDebugDraw::drawContact()
cocos2d::Vec3 convertbtVector3ToVec3( const btVector3 &btVec3 )
btVector3 convertVec3TobtVector3( const cocos2d::Vec3 &vec3 )
cocos2d::Mat4 convertbtTransformToMat4( const btTransform &btTrans )
btTransform convertMat4TobtTransform( const cocos2d::Mat4 &mat4 )
cocos2d::Quaternion convertbtQuatToQuat( const btQuaternion &btQuat )
btQuaternion convertQuatTobtQuat( const cocos2d::Quaternion &quat )
std::string& Physics3DComponent::getPhysics3DComponentName()
bool Physics3DComponent::init()
Physics3DComponent* Physics3DComponent::create(Physics3DObject* physicsObj, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)
void Physics3DComponent::setPhysics3DObject(Physics3DObject* physicsObj)
void Physics3DComponent::setEnabled(bool b)
void Physics3DComponent::addToPhysicsWorld(Physics3DWorld* world)
void Physics3DComponent::onEnter()
void Physics3DComponent::onExit()
void Physics3DComponent::preSimulate()
void Physics3DComponent::postSimulate()
void Physics3DComponent::setTransformInPhysics(const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)
void Physics3DComponent::setSyncFlag(PhysicsSyncFlag syncFlag)
void Physics3DComponent::syncPhysicsToNode()
void Physics3DComponent::syncNodeToPhysics()
float Physics3DConstraint::getBreakingImpulse() const
void Physics3DConstraint::setBreakingImpulse(float impulse)
bool Physics3DConstraint::isEnabled() const
void Physics3DConstraint::setEnabled(bool enabled)
int	Physics3DConstraint::getOverrideNumSolverIterations() const
void Physics3DConstraint::setOverrideNumSolverIterations(int overideNumIterations)
Physics3DPointToPointConstraint* Physics3DPointToPointConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotPointInA)
Physics3DPointToPointConstraint* Physics3DPointToPointConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotPointInA, const cocos2d::Vec3& pivotPointInB)
bool Physics3DPointToPointConstraint::init(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotPointInA)
bool Physics3DPointToPointConstraint::init(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotPointInA, const cocos2d::Vec3& pivotPointInB)
void	Physics3DPointToPointConstraint::setPivotPointInA(const cocos2d::Vec3& pivotA)
void	Physics3DPointToPointConstraint::setPivotPointInB(const cocos2d::Vec3& pivotB)
cocos2d::Vec3 Physics3DPointToPointConstraint::getPivotPointInA() const
cocos2d::Vec3 Physics3DPointToPointConstraint::getPivotPointInB() const
Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Mat4& rbAFrame, bool useReferenceFrameA)
Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Vec3& pivotInA, const cocos2d::Vec3& axisInA, bool useReferenceFrameA)
Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Vec3& pivotInA,const cocos2d::Vec3& pivotInB, cocos2d::Vec3& axisInA, cocos2d::Vec3& axisInB, bool useReferenceFrameA)
Physics3DHingeConstraint* Physics3DHingeConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& rbAFrame, const cocos2d::Mat4& rbBFrame, bool useReferenceFrameA)
cocos2d::Mat4 Physics3DHingeConstraint::getFrameOffsetA() const
cocos2d::Mat4 Physics3DHingeConstraint::getFrameOffsetB() const
void Physics3DHingeConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)
void	Physics3DHingeConstraint::setAngularOnly(bool angularOnly)
void	Physics3DHingeConstraint::enableAngularMotor(bool enableMotor, float targetVelocity, float maxMotorImpulse)
void Physics3DHingeConstraint::enableMotor(bool enableMotor)
void Physics3DHingeConstraint::setMaxMotorImpulse(float maxMotorImpulse)
void Physics3DHingeConstraint::setMotorTarget(const cocos2d::Quaternion& qAinB, float dt)
void Physics3DHingeConstraint::setMotorTarget(float targetAngle, float dt)
void	Physics3DHingeConstraint::setLimit(float low, float high, float softness, float biasFactor, float relaxationFactor)
void	Physics3DHingeConstraint::setAxis(const cocos2d::Vec3& axisInA)
float	Physics3DHingeConstraint::getLowerLimit() const
float	Physics3DHingeConstraint::getUpperLimit() const
float Physics3DHingeConstraint::getHingeAngle() const
float Physics3DHingeConstraint::getHingeAngle(const cocos2d::Mat4& transA, const cocos2d::Mat4& transB)
cocos2d::Mat4 Physics3DHingeConstraint::getAFrame() const
cocos2d::Mat4 Physics3DHingeConstraint::getBFrame() const
bool Physics3DHingeConstraint::getAngularOnly() const
bool Physics3DHingeConstraint::getEnableAngularMotor() const
float Physics3DHingeConstraint::getMotorTargetVelosity() const
float Physics3DHingeConstraint::getMaxMotorImpulse() const
bool Physics3DHingeConstraint::getUseFrameOffset() const
void Physics3DHingeConstraint::setUseFrameOffset(bool frameOffsetOnOff)
Physics3DSliderConstraint* Physics3DSliderConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInA, const cocos2d::Mat4& frameInB ,bool useLinearReferenceFrameA)
cocos2d::Mat4 Physics3DSliderConstraint::getFrameOffsetA() const
cocos2d::Mat4 Physics3DSliderConstraint::getFrameOffsetB() const
float Physics3DSliderConstraint::getLowerLinLimit() const
void Physics3DSliderConstraint::setLowerLinLimit(float lowerLimit)
float Physics3DSliderConstraint::getUpperLinLimit() const
void Physics3DSliderConstraint::setUpperLinLimit(float upperLimit)
float Physics3DSliderConstraint::getLowerAngLimit() const
void Physics3DSliderConstraint::setLowerAngLimit(float lowerLimit)
float Physics3DSliderConstraint::getUpperAngLimit() const
void Physics3DSliderConstraint::setUpperAngLimit(float upperLimit)
bool Physics3DSliderConstraint::getUseLinearReferenceFrameA() const
float Physics3DSliderConstraint::getSoftnessDirLin() const
float Physics3DSliderConstraint::getRestitutionDirLin() const
float Physics3DSliderConstraint::getDampingDirLin() const
float Physics3DSliderConstraint::getSoftnessDirAng() const
float Physics3DSliderConstraint::getRestitutionDirAng() const
float Physics3DSliderConstraint::getDampingDirAng() const
float Physics3DSliderConstraint::getSoftnessLimLin() const
float Physics3DSliderConstraint::getRestitutionLimLin() const
float Physics3DSliderConstraint::getDampingLimLin() const
float Physics3DSliderConstraint::getSoftnessLimAng() const
float Physics3DSliderConstraint::getRestitutionLimAng() const
float Physics3DSliderConstraint::getDampingLimAng() const
float Physics3DSliderConstraint::getSoftnessOrthoLin() const
float Physics3DSliderConstraint::getRestitutionOrthoLin() const
float Physics3DSliderConstraint::getDampingOrthoLin() const
float Physics3DSliderConstraint::getSoftnessOrthoAng() const
float Physics3DSliderConstraint::getRestitutionOrthoAng() const
float Physics3DSliderConstraint::getDampingOrthoAng() const
void Physics3DSliderConstraint::setSoftnessDirLin(float softnessDirLin)
void Physics3DSliderConstraint::setRestitutionDirLin(float restitutionDirLin)
void Physics3DSliderConstraint::setDampingDirLin(float dampingDirLin)
void Physics3DSliderConstraint::setSoftnessDirAng(float softnessDirAng)
void Physics3DSliderConstraint::setRestitutionDirAng(float restitutionDirAng)
void Physics3DSliderConstraint::setDampingDirAng(float dampingDirAng)
void Physics3DSliderConstraint::setSoftnessLimLin(float softnessLimLin)
void Physics3DSliderConstraint::setRestitutionLimLin(float restitutionLimLin)
void Physics3DSliderConstraint::setDampingLimLin(float dampingLimLin)
void Physics3DSliderConstraint::setSoftnessLimAng(float softnessLimAng)
void Physics3DSliderConstraint::setRestitutionLimAng(float restitutionLimAng)
void Physics3DSliderConstraint::setDampingLimAng(float dampingLimAng)
void Physics3DSliderConstraint::setSoftnessOrthoLin(float softnessOrthoLin)
void Physics3DSliderConstraint::setRestitutionOrthoLin(float restitutionOrthoLin)
void Physics3DSliderConstraint::setDampingOrthoLin(float dampingOrthoLin)
void Physics3DSliderConstraint::setSoftnessOrthoAng(float softnessOrthoAng)
void Physics3DSliderConstraint::setRestitutionOrthoAng(float restitutionOrthoAng)
void Physics3DSliderConstraint::setDampingOrthoAng(float dampingOrthoAng)
void Physics3DSliderConstraint::setPoweredLinMotor(bool onOff)
bool Physics3DSliderConstraint::getPoweredLinMotor() const
void Physics3DSliderConstraint::setTargetLinMotorVelocity(float targetLinMotorVelocity)
float Physics3DSliderConstraint::getTargetLinMotorVelocity() const
void Physics3DSliderConstraint::setMaxLinMotorForce(float maxLinMotorForce)
float Physics3DSliderConstraint::getMaxLinMotorForce() const
void Physics3DSliderConstraint::setPoweredAngMotor(bool onOff)
bool Physics3DSliderConstraint::getPoweredAngMotor() const
void Physics3DSliderConstraint::setTargetAngMotorVelocity(float targetAngMotorVelocity)
float Physics3DSliderConstraint::getTargetAngMotorVelocity() const
void Physics3DSliderConstraint::setMaxAngMotorForce(float maxAngMotorForce)
float Physics3DSliderConstraint::getMaxAngMotorForce() const
float Physics3DSliderConstraint::getLinearPos() const
float Physics3DSliderConstraint::getAngularPos() const
bool Physics3DSliderConstraint::getUseFrameOffset() const
void Physics3DSliderConstraint::setUseFrameOffset(bool frameOffsetOnOff)
void Physics3DSliderConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)
Physics3DConeTwistConstraint* Physics3DConeTwistConstraint::create(Physics3DRigidBody* rbA, const cocos2d::Mat4& frameA)
Physics3DConeTwistConstraint* Physics3DConeTwistConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)
void	Physics3DConeTwistConstraint::setLimit(float swingSpan1,float swingSpan2,float twistSpan, float softness, float biasFactor, float relaxationFactor)
cocos2d::Mat4 Physics3DConeTwistConstraint::getAFrame() const
cocos2d::Mat4 Physics3DConeTwistConstraint::getBFrame() const
float Physics3DConeTwistConstraint::getSwingSpan1() const
float Physics3DConeTwistConstraint::getSwingSpan2() const
float Physics3DConeTwistConstraint::getTwistSpan() const
float Physics3DConeTwistConstraint::getTwistAngle() const
void Physics3DConeTwistConstraint::setDamping(float damping)
void Physics3DConeTwistConstraint::enableMotor(bool b)
void Physics3DConeTwistConstraint::setMaxMotorImpulse(float maxMotorImpulse)
void Physics3DConeTwistConstraint::setMaxMotorImpulseNormalized(float maxMotorImpulse)
float Physics3DConeTwistConstraint::getFixThresh() const
void Physics3DConeTwistConstraint::setFixThresh(float fixThresh)
void Physics3DConeTwistConstraint::setMotorTarget(const btQuaternion &q)
void Physics3DConeTwistConstraint::setMotorTargetInConstraintSpace(const btQuaternion &q)
cocos2d::Vec3 Physics3DConeTwistConstraint::GetPointForAngle(float fAngleInRadians, float fLength) const
void Physics3DConeTwistConstraint::setFrames(const cocos2d::Mat4& frameA, const cocos2d::Mat4& frameB)
cocos2d::Mat4 Physics3DConeTwistConstraint::getFrameOffsetA() const
cocos2d::Mat4 Physics3DConeTwistConstraint::getFrameOffsetB() const
Physics3D6DofConstraint* Physics3D6DofConstraint::create(Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInB, bool useLinearReferenceFrameB)
Physics3D6DofConstraint* Physics3D6DofConstraint::create(Physics3DRigidBody* rbA, Physics3DRigidBody* rbB, const cocos2d::Mat4& frameInA, const cocos2d::Mat4& frameInB, bool useLinearReferenceFrameA)
void	Physics3D6DofConstraint::setLinearLowerLimit(const cocos2d::Vec3& linearLower)
cocos2d::Vec3	Physics3D6DofConstraint::getLinearLowerLimit() const
void	Physics3D6DofConstraint::setLinearUpperLimit(const cocos2d::Vec3& linearUpper)
cocos2d::Vec3	Physics3D6DofConstraint::getLinearUpperLimit() const
void	Physics3D6DofConstraint::setAngularLowerLimit(const cocos2d::Vec3& angularLower)
cocos2d::Vec3	Physics3D6DofConstraint::getAngularLowerLimit() const
void	Physics3D6DofConstraint::setAngularUpperLimit(const cocos2d::Vec3& angularUpper)
cocos2d::Vec3	Physics3D6DofConstraint::getAngularUpperLimit() const
bool	Physics3D6DofConstraint::isLimited(int limitIndex) const
bool Physics3D6DofConstraint::getUseFrameOffset() const
void Physics3D6DofConstraint::setUseFrameOffset(bool frameOffsetOnOff) const
void Physics3DDebugDrawer::drawLine( const btVector3& from,const btVector3& to,const btVector3& color )
void Physics3DDebugDrawer::drawContactPoint( const btVector3& PointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color )
void Physics3DDebugDrawer::reportErrorWarning( const char* warningString )
void Physics3DDebugDrawer::draw3dText( const btVector3& location,const char* textString )
void Physics3DDebugDrawer::setDebugMode( int debugMode )
int Physics3DDebugDrawer::getDebugMode() const
void Physics3DDebugDrawer::draw( Renderer *renderer)
void Physics3DDebugDrawer::ensureCapacity( int count )
void Physics3DDebugDrawer::drawImplementation( const Mat4 &transform, uint32_t flags )
void Physics3DDebugDrawer::init()
void Physics3DDebugDrawer::clear()
Physics3DRigidBody* Physics3DRigidBody::create(Physics3DRigidBodyDes* info)
bool Physics3DRigidBody::init(Physics3DRigidBodyDes* info)
void Physics3DRigidBody::setActive(bool active)
void Physics3DRigidBody::applyForce( const cocos2d::Vec3& force, const cocos2d::Vec3& rel_pos )
void Physics3DRigidBody::setLinearVelocity( const cocos2d::Vec3& lin_vel )
void Physics3DRigidBody::applyCentralForce( const cocos2d::Vec3& force )
void Physics3DRigidBody::applyCentralImpulse( const cocos2d::Vec3& impulse )
void Physics3DRigidBody::applyTorque( const cocos2d::Vec3& torque )
void Physics3DRigidBody::applyTorqueImpulse( const cocos2d::Vec3& torque )
void Physics3DRigidBody::applyImpulse( const cocos2d::Vec3& impulse, const cocos2d::Vec3& rel_pos )
void Physics3DRigidBody::applyDamping( float timeStep )
cocos2d::Vec3 Physics3DRigidBody::getLinearVelocity() const
void Physics3DRigidBody::setLinearFactor( const cocos2d::Vec3& linearFactor )
cocos2d::Vec3 Physics3DRigidBody::getLinearFactor() const
void Physics3DRigidBody::setAngularFactor( const cocos2d::Vec3& angFac )
void Physics3DRigidBody::setAngularFactor( float angFac )
cocos2d::Vec3 Physics3DRigidBody::getAngularFactor() const
void Physics3DRigidBody::setAngularVelocity( const cocos2d::Vec3& ang_vel )
cocos2d::Vec3 Physics3DRigidBody::getAngularVelocity() const
void Physics3DRigidBody::setCenterOfMassTransform( const cocos2d::Mat4& xform )
cocos2d::Mat4 Physics3DRigidBody::getCenterOfMassTransform() const
void Physics3DRigidBody::setDamping( float lin_damping, float ang_damping )
float Physics3DRigidBody::getLinearDamping() const
float Physics3DRigidBody::getAngularDamping() const
void Physics3DRigidBody::setGravity( const cocos2d::Vec3& acceleration )
cocos2d::Vec3 Physics3DRigidBody::getGravity() const
void Physics3DRigidBody::setInvInertiaDiagLocal( const cocos2d::Vec3& diagInvInertia )
cocos2d::Vec3 Physics3DRigidBody::getInvInertiaDiagLocal() const
void Physics3DRigidBody::setMassProps( float mass, const cocos2d::Vec3& inertia )
float Physics3DRigidBody::getInvMass() const
cocos2d::Vec3 Physics3DRigidBody::getTotalForce() const
cocos2d::Vec3 Physics3DRigidBody::getTotalTorque() const
void Physics3DRigidBody::setRestitution( float rest )
float Physics3DRigidBody::getRestitution() const
void Physics3DRigidBody::setFriction( float frict )
float Physics3DRigidBody::getFriction() const
void Physics3DRigidBody::setRollingFriction( float frict )
float Physics3DRigidBody::getRollingFriction() const
void Physics3DRigidBody::setHitFraction( float hitFraction )
float Physics3DRigidBody::getHitFraction() const
void Physics3DRigidBody::setCcdMotionThreshold( float ccdMotionThreshold )
float Physics3DRigidBody::getCcdMotionThreshold() const
void Physics3DRigidBody::setCcdSweptSphereRadius( float radius )
float Physics3DRigidBody::getCcdSweptSphereRadius() const
void Physics3DRigidBody::addConstraint( Physics3DConstraint *constraint )
void Physics3DRigidBody::removeConstraint( Physics3DConstraint *constraint )
void Physics3DRigidBody::removeConstraint( unsigned int idx )
Physics3DConstraint* Physics3DRigidBody::getConstraint( unsigned int idx ) const
unsigned int Physics3DRigidBody::getConstraintCount() const
cocos2d::Mat4 Physics3DRigidBody::getWorldTransform() const
void Physics3DRigidBody::setKinematic(bool kinematic)
bool Physics3DRigidBody::isKinematic() const
Physics3DCollider* Physics3DCollider::create(Physics3DColliderDes *info)
float Physics3DCollider::getCcdSweptSphereRadius() const
void Physics3DCollider::setCcdSweptSphereRadius(float radius)
float Physics3DCollider::getCcdMotionThreshold() const
void Physics3DCollider::setCcdMotionThreshold(float ccdMotionThreshold)
float Physics3DCollider::getHitFraction() const
void Physics3DCollider::setHitFraction(float hitFraction)
float Physics3DCollider::getRollingFriction() const
void Physics3DCollider::setRollingFriction(float frict)
float Physics3DCollider::getFriction() const
void Physics3DCollider::setFriction(float frict)
float Physics3DCollider::getRestitution() const
void Physics3DCollider::setRestitution(float rest)
bool Physics3DCollider::isTrigger() const
void Physics3DCollider::setTrigger(bool isTrigger)
bool Physics3DCollider::init(Physics3DColliderDes *info)
cocos2d::Mat4 Physics3DCollider::getWorldTransform() const
Physics3DShape::ShapeType Physics3DShape::getShapeType() const
Physics3DShape* Physics3DShape::createBox(const cocos2d::Vec3& extent)
Physics3DShape* Physics3DShape::createSphere(float radius)
Physics3DShape* Physics3DShape::createCylinder(float radius, float height)
Physics3DShape* Physics3DShape::createCapsule(float radius, float height)
Physics3DShape* Physics3DShape::createConvexHull( const cocos2d::Vec3 *points, int numPoints )
Physics3DShape* Physics3DShape::createMesh( const cocos2d::Vec3 *triangles, int numTriangles )
Physics3DShape* Physics3DShape::createCompoundShape( const std::vector<std::pair<Physics3DShape *, Mat4>> &shapes )
bool Physics3DShape::initBox(const cocos2d::Vec3& ext)
bool Physics3DShape::initSphere(float radius)
bool Physics3DShape::initCylinder(float radius, float height)
bool Physics3DShape::initCapsule(float radius, float height)
bool Physics3DShape::initConvexHull( const cocos2d::Vec3 *points, int numPoints )
bool Physics3DShape::initMesh( const cocos2d::Vec3 *triangles, int numTriangles )
bool Physics3DShape::initCompoundShape( const std::vector<std::pair<Physics3DShape *, Mat4>> &shapes )
Physics3DWorld* Physics3DWorld::create(Physics3DWorldDes* info)
void Physics3DWorld::setGravity(const Vec3& gravity)
Vec3 Physics3DWorld::getGravity() const
bool Physics3DWorld::init(Physics3DWorldDes* info)
void Physics3DWorld::setDebugDrawEnable(bool enableDebugDraw)
bool Physics3DWorld::isDebugDrawEnabled() const
void Physics3DWorld::addPhysics3DObject(Physics3DObject* physicsObj)
void Physics3DWorld::removePhysics3DObject(Physics3DObject* physicsObj)
void Physics3DWorld::removeAllPhysics3DObjects()
void Physics3DWorld::addPhysics3DConstraint(Physics3DConstraint* constraint, bool disableCollisionsBetweenLinkedObjs)
void Physics3DWorld::removePhysics3DConstraint(Physics3DConstraint* constraint)
void Physics3DWorld::removeAllPhysics3DConstraints()
void Physics3DWorld::stepSimulate(float dt)
void Physics3DWorld::debugDraw(Renderer* renderer)
bool Physics3DWorld::rayCast(const cocos2d::Vec3& startPos, const cocos2d::Vec3& endPos, Physics3DWorld::HitResult* result)
bool Physics3DWorld::sweepShape(Physics3DShape* shape, const cocos2d::Mat4& startTransform, const cocos2d::Mat4& endTransform, Physics3DWorld::HitResult* result)
Physics3DObject* Physics3DWorld::getPhysicsObject(const btCollisionObject* btObj)
void Physics3DWorld::collisionChecking()
bool Physics3DWorld::needCollisionChecking()
void Physics3DWorld::setGhostPairCallback()
PhysicsSprite3D* PhysicsSprite3D::create(const std::string &modelPath, Physics3DRigidBodyDes* rigidDes, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)
PhysicsSprite3D* PhysicsSprite3D::createWithCollider(const std::string &modelPath, Physics3DColliderDes* colliderDes, const cocos2d::Vec3& translateInPhysics, const cocos2d::Quaternion& rotInPhsyics)
Physics3DObject* PhysicsSprite3D::getPhysicsObj() const
void PhysicsSprite3D::setSyncFlag(Physics3DComponent::PhysicsSyncFlag syncFlag)
void PhysicsSprite3D::syncNodeToPhysics()
void PhysicsSprite3D::syncPhysicsToNode()
int Application::run()
void Application::setAnimationInterval(float interval)
Application* Application::getInstance()
Application* Application::sharedApplication()
const char * Application::getCurrentLanguageCode()
LanguageType Application::getCurrentLanguage()
Application::Platform Application::getTargetPlatform()
bool Application::openURL(const std::string &url)
void Application::applicationScreenSizeChanged(int newWidth, int newHeight)
int Device::getDPI()
void Device::setAccelerometerEnabled(bool isEnabled)
void Device::setAccelerometerInterval(float interval)
Data Device::getTextureDataForText(const char * text, const FontDefinition& textDefinition, TextAlign align, int &width, int &height, bool& hasPremultipliedAlpha)
void Device::setKeepScreenOn(bool value)
void Device::vibrate(float duration)
int EnhanceAPI::setResolutionPercent(int n)
int EnhanceAPI::setFPS(int fps)
int EnhanceAPI::fastLoading(int sec)
int EnhanceAPI::getTemperature()
int EnhanceAPI::setLowPowerMode(bool enable)
void FileUtilsAndroid::setassetmanager(AAssetManager* a)
FileUtils* FileUtils::getInstance()
bool FileUtilsAndroid::init()
std::string FileUtilsAndroid::getNewFilename(const std::string &filename) const
bool FileUtilsAndroid::isFileExistInternal(const std::string& strFilePath) const
bool FileUtilsAndroid::isDirectoryExistInternal(const std::string& dirPath) const
bool FileUtilsAndroid::isAbsolutePath(const std::string& strPath) const
Data FileUtilsAndroid::getData(const std::string& filename, bool forString)
std::string FileUtilsAndroid::getStringFromFile(const std::string& filename)
Data FileUtilsAndroid::getDataFromFile(const std::string& filename)
unsigned char* FileUtilsAndroid::getFileData(const std::string& filename, const char* mode, ssize_t * size)
string FileUtilsAndroid::getWritablePath() const
GLViewImpl* GLViewImpl::createWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)
GLViewImpl* GLViewImpl::create(const std::string& viewName)
GLViewImpl* GLViewImpl::createWithFullScreen(const std::string& viewName)
bool GLViewImpl::initWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)
bool GLViewImpl::initWithFullScreen(const std::string& viewName)
bool GLViewImpl::isOpenGLReady()
void GLViewImpl::end()
void GLViewImpl::swapBuffers()
void GLViewImpl::setIMEKeyboardState(bool bOpen)
static bool getStaticMethodInfo(cocos2d::JniMethodInfo &methodinfo, const char *className, const char *methodName, const char *paramCode)
void updateAssets(const std::string& filePath)
bool fileExists(const std::string& filePath)
void notifyFileLoaded(const std::string& filePath)
std::string getGameRoot()
void purgeCachedByFile(const std::string& filePath)
void updateAssets(const std::string& filePath)
bool fileExists(const std::string& filePath)
void notifyFileLoaded(const std::string& filePath)
std::string getGameRoot()
std::string getStringWithEllipsisJni(const char* text, float width, float fontSize)
std::string getPackageNameJNI()
std::string getFileDirectoryJNI()
std::string getCurrentLanguageJNI()
std::string getStringForKeyJNI(const char* key, const char* defaultValue)
JavaVM* JniHelper::getJavaVM()
void JniHelper::setJavaVM(JavaVM *javaVM)
JNIEnv* JniHelper::cacheEnv(JavaVM* jvm)
JNIEnv* JniHelper::getEnv()
bool JniHelper::setClassLoaderFrom(jobject activityinstance)
std::string JniHelper::jstring2string(jstring jstr)
void Lock::lock(void)
void Lock::unlock(void)
ValueMap FileUtils::getValueMapFromFile(const std::string& filename)
ValueMap FileUtils::getValueMapFromData(const char* filedata, int filesize)
ValueVector FileUtils::getValueVectorFromFile(const std::string& filename)
bool FileUtils::writeToFile(ValueMap& dict, const std::string &fullPath)
bool FileUtils::writeValueMapToFile(ValueMap& dict, const std::string& fullPath)
bool FileUtils::writeValueVectorToFile(ValueVector vecData, const std::string& fullPath)
static tinyxml2::XMLElement* generateElementForObject(const Value& value, tinyxml2::XMLDocument *doc)
static tinyxml2::XMLElement* generateElementForDict(const ValueMap& dict, tinyxml2::XMLDocument *doc)
static tinyxml2::XMLElement* generateElementForArray(const ValueVector& array, tinyxml2::XMLDocument *pDoc)
ValueMap FileUtils::getValueMapFromFile(const std::string& filename)
ValueMap FileUtils::getValueMapFromData(const char* filedata, int filesize)
ValueVector FileUtils::getValueVectorFromFile(const std::string& filename)
bool FileUtils::writeToFile(ValueMap& dict, const std::string &fullPath)
void FileUtils::destroyInstance()
void FileUtils::setDelegate(FileUtils *delegate)
bool FileUtils::writeStringToFile(std::string dataStr, const std::string& fullPath)
bool FileUtils::writeDataToFile(Data retData, const std::string& fullPath)
bool FileUtils::init()
void FileUtils::purgeCachedEntries()
static Data getData(const std::string& filename, bool forString)
std::string FileUtils::getStringFromFile(const std::string& filename)
Data FileUtils::getDataFromFile(const std::string& filename)
unsigned char* FileUtils::getFileData(const std::string& filename, const char* mode, ssize_t *size)
unsigned char* FileUtils::getFileDataFromZip(const std::string& zipFilePath, const std::string& filename, ssize_t *size)
std::string FileUtils::getNewFilename(const std::string &filename) const
std::string FileUtils::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath) const
std::string FileUtils::fullPathForFilename(const std::string &filename) const
std::string FileUtils::fullPathFromRelativeFile(const std::string &filename, const std::string &relativeFile)
void FileUtils::setSearchResolutionsOrder(const std::vector<std::string>& searchResolutionsOrder)
void FileUtils::addSearchResolutionsOrder(const std::string &order,const bool front)
const std::vector<std::string>& FileUtils::getSearchResolutionsOrder() const
const std::vector<std::string>& FileUtils::getSearchPaths() const
void FileUtils::setWritablePath(const std::string& writablePath)
void FileUtils::setDefaultResourceRootPath(const std::string& path)
void FileUtils::setSearchPaths(const std::vector<std::string>& searchPaths)
void FileUtils::addSearchPath(const std::string &searchpath,const bool front)
void FileUtils::setFilenameLookupDictionary(const ValueMap& filenameLookupDict)
void FileUtils::loadFilenameLookupDictionaryFromFile(const std::string &filename)
std::string FileUtils::getFullPathForDirectoryAndFilename(const std::string& directory, const std::string& filename) const
bool FileUtils::isFileExist(const std::string& filename) const
bool FileUtils::isAbsolutePath(const std::string& path) const
bool FileUtils::isDirectoryExist(const std::string& dirPath) const
bool FileUtils::isDirectoryExistInternal(const std::string& dirPath) const
bool FileUtils::createDirectory(const std::string& path)
bool FileUtils::removeDirectory(const std::string& path)
bool FileUtils::removeFile(const std::string &path)
bool FileUtils::renameFile(const std::string &oldfullpath, const std::string& newfullpath)
bool FileUtils::renameFile(const std::string &path, const std::string &oldname, const std::string &name)
std::string FileUtils::getSuitableFOpen(const std::string& filenameUtf8) const
bool FileUtils::isDirectoryExistInternal(const std::string& dirPath) const
bool FileUtils::createDirectory(const std::string& path)
bool FileUtils::removeDirectory(const std::string& path)
bool FileUtils::removeFile(const std::string &path)
bool FileUtils::renameFile(const std::string &oldfullpath, const std::string &newfullpath)
bool FileUtils::renameFile(const std::string &path, const std::string &oldname, const std::string &name)
std::string FileUtils::getSuitableFOpen(const std::string& filenameUtf8) const
long FileUtils::getFileSize(const std::string &filepath)
void FileUtils::setPopupNotify(bool notify)
bool FileUtils::isPopupNotify() const
std::string FileUtils::getFileExtension(const std::string& filePath) const
void GLView::setGLContextAttrs(GLContextAttrs& glContextAttrs)
GLContextAttrs GLView::getGLContextAttrs()
void GLView::pollInputEvents()
void GLView::pollEvents()
void GLView::updateDesignResolutionSize()
void GLView::setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)
const Size& GLView::getDesignResolutionSize() const
const Size& GLView::getFrameSize() const
void GLView::setFrameSize(float width, float height)
Rect GLView::getVisibleRect() const
Size GLView::getVisibleSize() const
Vec2 GLView::getVisibleOrigin() const
void GLView::setViewPortInPoints(float x , float y , float w , float h)
void GLView::setScissorInPoints(float x , float y , float w , float h)
bool GLView::isScissorEnabled()
Rect GLView::getScissorRect() const
void GLView::setViewName(const std::string& viewname )
const std::string& GLView::getViewName() const
void GLView::handleTouchesBegin(int num, intptr_t ids[], float xs[], float ys[])
void GLView::handleTouchesMove(int num, intptr_t ids[], float xs[], float ys[])
void GLView::handleTouchesOfEndOrCancel(EventTouch::EventCode eventCode, int num, intptr_t ids[], float xs[], float ys[])
void GLView::handleTouchesEnd(int num, intptr_t ids[], float xs[], float ys[])
void GLView::handleTouchesCancel(int num, intptr_t ids[], float xs[], float ys[])
const Rect& GLView::getViewPortRect() const
std::vector<Touch*> GLView::getAllTouches() const
float GLView::getScaleX() const
float GLView::getScaleY() const
Texture2D::PixelFormat getDevicePixelFormat(Texture2D::PixelFormat format)
bool Image::initWithImageFile(const std::string& path)
bool Image::initWithImageFileThreadSafe(const std::string& fullpath)
bool Image::initWithImageData(const unsigned char * data, ssize_t dataLen)
bool Image::isPng(const unsigned char * data, ssize_t dataLen)
bool Image::isEtc(const unsigned char * data, ssize_t dataLen)
bool Image::isS3TC(const unsigned char * data, ssize_t dataLen)
bool Image::isATITC(const unsigned char *data, ssize_t dataLen)
bool Image::isJpg(const unsigned char * data, ssize_t dataLen)
bool Image::isTiff(const unsigned char * data, ssize_t dataLen)
bool Image::isWebp(const unsigned char * data, ssize_t dataLen)
bool Image::isPvr(const unsigned char * data, ssize_t dataLen)
Image::Format Image::detectFormat(const unsigned char * data, ssize_t dataLen)
int Image::getBitPerPixel()
bool Image::hasAlpha()
bool Image::isCompressed()
bool Image::decodeWithWIC(const unsigned char *data, ssize_t dataLen)
bool Image::encodeWithWIC(const std::string& filePath, bool isToRGB, GUID containerFormat)
bool Image::initWithJpgData(const unsigned char * data, ssize_t dataLen)
bool Image::initWithPngData(const unsigned char * data, ssize_t dataLen)
bool Image::initWithTiffData(const unsigned char * data, ssize_t dataLen)
bool Image::initWithPVRv2Data(const unsigned char * data, ssize_t dataLen)
bool Image::initWithPVRv3Data(const unsigned char * data, ssize_t dataLen)
bool Image::initWithETCData(const unsigned char * data, ssize_t dataLen)
bool Image::initWithTGAData(tImageTGA* tgaData)
bool Image::initWithS3TCData(const unsigned char * data, ssize_t dataLen)
bool Image::initWithATITCData(const unsigned char *data, ssize_t dataLen)
bool Image::initWithPVRData(const unsigned char * data, ssize_t dataLen)
bool Image::initWithWebpData(const unsigned char * data, ssize_t dataLen)
bool Image::initWithRawData(const unsigned char * data, ssize_t dataLen, int width, int height, int bitsPerComponent, bool preMulti)
bool Image::saveToFile(const std::string& filename, bool isToRGB)
bool Image::saveImageToPNG(const std::string& filePath, bool isToRGB)
bool Image::saveImageToJPG(const std::string& filePath)
void Image::premultipliedAlpha()
void Image::setPVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)
class XmlSaxHander : public tinyxml2::XMLVisitor
bool XmlSaxHander::VisitEnter( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )
bool XmlSaxHander::VisitExit( const tinyxml2::XMLElement& element )
bool XmlSaxHander::Visit( const tinyxml2::XMLText& text )
bool SAXParser::init(const char *encoding)
bool SAXParser::parse(const char* xmlData, size_t dataLength)
bool SAXParser::parse(const std::string& filename)
void SAXParser::startElement(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)
void SAXParser::endElement(void *ctx, const CC_XML_CHAR *name)
void SAXParser::textHandler(void *ctx, const CC_XML_CHAR *name, int len)
void SAXParser::setDelegator(SAXDelegator* delegator)
void* ThreadHelper::createAutoreleasePool()
void ThreadHelper::releaseAutoreleasePool(void* autoreleasePool)
GLViewImpl* GLViewImpl::create(const std::string& viewName)
GLViewImpl* GLViewImpl::createWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)
GLViewImpl* GLViewImpl::createWithFullScreen(const std::string& viewName)
GLViewImpl* GLViewImpl::createWithFullScreen(const std::string& viewName, const GLFWvidmode &videoMode, GLFWmonitor *monitor)
bool GLViewImpl::initWithRect(const std::string& viewName, Rect rect, float frameZoomFactor)
bool GLViewImpl::initWithFullScreen(const std::string& viewName)
bool GLViewImpl::initWithFullscreen(const std::string &viewname, const GLFWvidmode &videoMode, GLFWmonitor *monitor)
bool GLViewImpl::isOpenGLReady()
void GLViewImpl::end()
void GLViewImpl::swapBuffers()
bool GLViewImpl::windowShouldClose()
void GLViewImpl::pollEvents()
void GLViewImpl::enableRetina(bool enabled)
void GLViewImpl::setIMEKeyboardState(bool /*bOpen*/)
void GLViewImpl::setCursorVisible( bool isVisible )
void GLViewImpl::setFrameZoomFactor(float zoomFactor)
float GLViewImpl::getFrameZoomFactor() const
void GLViewImpl::updateFrameSize()
void GLViewImpl::setFrameSize(float width, float height)
void GLViewImpl::setViewPortInPoints(float x , float y , float w , float h)
void GLViewImpl::setScissorInPoints(float x , float y , float w , float h)
Rect GLViewImpl::getScissorRect() const
void GLViewImpl::onGLFWError(int errorID, const char* errorDesc)
void GLViewImpl::onGLFWMouseCallBack(GLFWwindow* window, int button, int action, int modify)
void GLViewImpl::onGLFWMouseMoveCallBack(GLFWwindow* window, double x, double y)
void GLViewImpl::onGLFWMouseScrollCallback(GLFWwindow* window, double x, double y)
void GLViewImpl::onGLFWKeyCallback(GLFWwindow *window, int key, int scancode, int action, int mods)
void GLViewImpl::onGLFWCharCallback(GLFWwindow *window, unsigned int character)
void GLViewImpl::onGLFWWindowPosCallback(GLFWwindow *windows, int x, int y)
void GLViewImpl::onGLFWframebuffersize(GLFWwindow* window, int w, int h)
void GLViewImpl::onGLFWWindowSizeFunCallback(GLFWwindow *window, int width, int height)
void GLViewImpl::onGLFWWindowIconifyCallback(GLFWwindow* window, int iconified)
bool GLViewImpl::initGlew()
int Application::run()
void Application::setAnimationInterval(float interval)
Application* Application::getInstance()
Application* Application::sharedApplication()
LanguageType Application::getCurrentLanguage()
const char * Application::getCurrentLanguageCode()
Application::Platform Application::getTargetPlatform()
bool Application::openURL(const std::string &url)
void Application::setResourceRootPath(const std::string& rootResDir)
const std::string& Application::getResourceRootPath(void)
void Application::setStartupScriptFilename(const std::string& startupScriptFile)
int Device::getDPI()
void Device::setAccelerometerEnabled(bool isEnabled)
void Device::setAccelerometerInterval(float interval)
Data Device::getTextureDataForText(const char * text, const FontDefinition& textDefinition, TextAlign align, int &width, int &height, bool& hasPremultipliedAlpha)
void Device::setKeepScreenOn(bool value)
void Device::vibrate(float duration)
static inline std::string convertPathFormatToUnixStyle(const std::string& path)
static std::wstring StringUtf8ToWideChar(const std::string& strUtf8)
static std::string StringWideCharToUtf8(const std::wstring& strWideChar)
static std::string UTF8StringToMultiByte(const std::string& strUtf8)
FileUtils* FileUtils::getInstance()
bool FileUtilsWin32::init()
bool FileUtilsWin32::isDirectoryExistInternal(const std::string& dirPath) const
std::string FileUtilsWin32::getSuitableFOpen(const std::string& filenameUtf8) const
bool FileUtilsWin32::isFileExistInternal(const std::string& strFilePath) const
bool FileUtilsWin32::isAbsolutePath(const std::string& strPath) const
static bool checkFileName(const std::string& fullPath, const std::string& filename)
static Data getData(const std::string& filename, bool forString)
std::string FileUtilsWin32::getStringFromFile(const std::string& filename)
Data FileUtilsWin32::getDataFromFile(const std::string& filename)
unsigned char* FileUtilsWin32::getFileData(const std::string& filename, const char* mode, ssize_t* size)
std::string FileUtilsWin32::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath) const
std::string FileUtilsWin32::getFullPathForDirectoryAndFilename(const std::string& strDirectory, const std::string& strFilename) const
string FileUtilsWin32::getWritablePath() const
bool FileUtilsWin32::renameFile(const std::string &oldfullpath, const std::string& newfullpath)
bool FileUtilsWin32::renameFile(const std::string &path, const std::string &oldname, const std::string &name)
bool FileUtilsWin32::createDirectory(const std::string& dirPath)
bool FileUtilsWin32::removeFile(const std::string &filepath)
bool FileUtilsWin32::removeDirectory(const std::string& dirPath)
void BatchCommand::init(float globalOrder, GLProgram* shader, BlendFunc blendType, TextureAtlas *textureAtlas, const Mat4& modelViewTransform, uint32_t flags)
void BatchCommand::init(float globalOrder, GLProgram* shader, BlendFunc blendType, TextureAtlas *textureAtlas, const Mat4& modelViewTransform)
void BatchCommand::execute()
void CustomCommand::init(float depth, const cocos2d::Mat4 &modelViewTransform, uint32_t flags)
void CustomCommand::init(float globalOrder)
void CustomCommand::execute()
bool RenderTargetBase::init(unsigned int width, unsigned int height)
RenderTarget* RenderTarget::create(unsigned int width, unsigned int height, Texture2D::PixelFormat format/* = Texture2D::PixelFormat::RGBA8888*/)
bool RenderTarget::init(unsigned int width, unsigned int height, Texture2D::PixelFormat format)
bool RenderTargetRenderBuffer::init(unsigned int width, unsigned int height)
RenderTargetRenderBuffer* RenderTargetRenderBuffer::create(unsigned int width, unsigned int height)
bool RenderTargetDepthStencil::init(unsigned int width, unsigned int height)
RenderTargetDepthStencil* RenderTargetDepthStencil::create(unsigned int width, unsigned int height)
bool FrameBuffer::initWithGLView(GLView* view)
FrameBuffer* FrameBuffer::getOrCreateDefaultFBO(GLView* view)
void FrameBuffer::applyDefaultFBO()
void FrameBuffer::clearAllFBOs()
FrameBuffer* FrameBuffer::create(uint8_t fid, unsigned int width, unsigned int height)
bool FrameBuffer::init(uint8_t fid, unsigned int width, unsigned int height)
void FrameBuffer::clearFBO()
void FrameBuffer::attachRenderTarget(RenderTargetBase* rt)
void FrameBuffer::applyFBO()
void FrameBuffer::attachDepthStencilTarget(RenderTargetDepthStencil* rt)
static void replaceDefines(const std::string& compileTimeDefines, std::string& out)
GLProgram* GLProgram::createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)
GLProgram* GLProgram::createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)
GLProgram* GLProgram::createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)
GLProgram* GLProgram::createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)
bool GLProgram::initWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)
bool GLProgram::initWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)
bool GLProgram::initWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)
bool GLProgram::initWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)
void GLProgram::bindPredefinedVertexAttribs()
void GLProgram::parseVertexAttribs()
void GLProgram::parseUniforms()
Uniform* GLProgram::getUniform(const std::string &name)
VertexAttrib* GLProgram::getVertexAttrib(const std::string &name)
std::string GLProgram::getDescription() const
bool GLProgram::compileShader(GLuint * shader, GLenum type, const GLchar* source)
bool GLProgram::compileShader(GLuint* shader, GLenum type, const GLchar* source, const std::string& convertedDefines)
GLint GLProgram::getAttribLocation(const std::string &attributeName) const
GLint GLProgram::getUniformLocation(const std::string &attributeName) const
void GLProgram::bindAttribLocation(const std::string &attributeName, GLuint index) const
void GLProgram::updateUniforms()
bool GLProgram::link()
void GLProgram::use()
static std::string logForOpenGLShader(GLuint shader)
static std::string logForOpenGLProgram(GLuint program)
std::string GLProgram::getVertexShaderLog() const
std::string GLProgram::getFragmentShaderLog() const
std::string GLProgram::getProgramLog() const
bool GLProgram::updateUniformLocation(GLint location, const GLvoid* data, unsigned int bytes)
GLint GLProgram::getUniformLocationForName(const char* name) const
void GLProgram::setUniformLocationWith1i(GLint location, GLint i1)
void GLProgram::setUniformLocationWith2i(GLint location, GLint i1, GLint i2)
void GLProgram::setUniformLocationWith3i(GLint location, GLint i1, GLint i2, GLint i3)
void GLProgram::setUniformLocationWith4i(GLint location, GLint i1, GLint i2, GLint i3, GLint i4)
void GLProgram::setUniformLocationWith2iv(GLint location, GLint* ints, unsigned int numberOfArrays)
void GLProgram::setUniformLocationWith3iv(GLint location, GLint* ints, unsigned int numberOfArrays)
void GLProgram::setUniformLocationWith4iv(GLint location, GLint* ints, unsigned int numberOfArrays)
void GLProgram::setUniformLocationWith1f(GLint location, GLfloat f1)
void GLProgram::setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)
void GLProgram::setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)
void GLProgram::setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)
void GLProgram::setUniformLocationWith1fv( GLint location, const GLfloat* floats, unsigned int numberOfArrays )
void GLProgram::setUniformLocationWith2fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)
void GLProgram::setUniformLocationWith3fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)
void GLProgram::setUniformLocationWith4fv(GLint location, const GLfloat* floats, unsigned int numberOfArrays)
void GLProgram::setUniformLocationWithMatrix2fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)
void GLProgram::setUniformLocationWithMatrix3fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)
void GLProgram::setUniformLocationWithMatrix4fv(GLint location, const GLfloat* matrixArray, unsigned int numberOfMatrices)
void GLProgram::setUniformsForBuiltins()
void GLProgram::setUniformsForBuiltins(const Mat4 &matrixMV)
void GLProgram::reset()
GLProgramCache* GLProgramCache::getInstance()
void GLProgramCache::destroyInstance()
GLProgramCache* GLProgramCache::sharedShaderCache()
void GLProgramCache::purgeSharedShaderCache()
bool GLProgramCache::init()
void GLProgramCache::loadDefaultGLPrograms()
void GLProgramCache::reloadDefaultGLPrograms()
void GLProgramCache::reloadDefaultGLProgramsRelativeToLights()
void GLProgramCache::loadDefaultGLProgram(GLProgram *p, int type)
GLProgram* GLProgramCache::getGLProgram(const std::string &key)
void GLProgramCache::addGLProgram(GLProgram* program, const std::string &key)
std::string GLProgramCache::getShaderMacrosForLight() const
void UniformValue::apply()
void UniformValue::setCallback(const std::function<void(GLProgram*, Uniform*)> &callback)
void UniformValue::setTexture(GLuint textureId, GLuint textureUnit)
void UniformValue::setInt(int value)
void UniformValue::setFloat(float value)
void UniformValue::setFloatv(ssize_t size, const float* pointer)
void UniformValue::setVec2(const Vec2& value)
void UniformValue::setVec2v(ssize_t size, const Vec2* pointer)
void UniformValue::setVec3(const Vec3& value)
void UniformValue::setVec3v(ssize_t size, const Vec3* pointer)
void UniformValue::setVec4(const Vec4& value)
void UniformValue::setVec4v(ssize_t size, const Vec4* pointer)
void UniformValue::setMat4(const Mat4& value)
void VertexAttribValue::apply()
void VertexAttribValue::setCallback(const std::function<void(VertexAttrib*)> &callback)
void VertexAttribValue::setPointer(GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)
GLProgramState* GLProgramState::create(GLProgram *glprogram)
GLProgramState* GLProgramState::getOrCreateWithGLProgramName(const std::string& glProgramName )
GLProgramState* GLProgramState::getOrCreateWithGLProgram(GLProgram *glprogram)
GLProgramState* GLProgramState::getOrCreateWithShaders(const std::string& vertexShader, const std::string& fragShader, const std::string& compileTimeDefines)
GLProgramState* GLProgramState::clone() const
bool GLProgramState::init(GLProgram* glprogram)
void GLProgramState::resetGLProgram()
void GLProgramState::apply(const Mat4& modelView)
void GLProgramState::updateUniformsAndAttributes()
void GLProgramState::applyGLProgram(const Mat4& modelView)
void GLProgramState::applyAttributes(bool applyAttribFlags)
void GLProgramState::applyUniforms()
void GLProgramState::setGLProgram(GLProgram *glprogram)
uint32_t GLProgramState::getVertexAttribsFlags() const
ssize_t GLProgramState::getVertexAttribCount() const
UniformValue* GLProgramState::getUniformValue(GLint uniformLocation)
UniformValue* GLProgramState::getUniformValue(const std::string& name)
VertexAttribValue* GLProgramState::getVertexAttribValue(const std::string& name)
void GLProgramState::setVertexAttribCallback(const std::string& name, const std::function<void(VertexAttrib*)> &callback)
void GLProgramState::setVertexAttribPointer(const std::string& name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)
void GLProgramState::setUniformCallback(const std::string& uniformName, const std::function<void(GLProgram*, Uniform*)> &callback)
void GLProgramState::setUniformCallback(GLint uniformLocation, const std::function<void(GLProgram*, Uniform*)> &callback)
void GLProgramState::setUniformFloat(const std::string& uniformName, float value)
void GLProgramState::setUniformFloat(GLint uniformLocation, float value)
void GLProgramState::setUniformInt(const std::string& uniformName, int value)
void GLProgramState::setUniformInt(GLint uniformLocation, int value)
void GLProgramState::setUniformFloatv(const std::string& uniformName, ssize_t size, const float* pointer)
void GLProgramState::setUniformFloatv(GLint uniformLocation, ssize_t size, const float* pointer)
void GLProgramState::setUniformVec2(const std::string& uniformName, const Vec2& value)
void GLProgramState::setUniformVec2(GLint uniformLocation, const Vec2& value)
void GLProgramState::setUniformVec2v(const std::string& uniformName, ssize_t size, const Vec2* pointer)
void GLProgramState::setUniformVec2v(GLint uniformLocation, ssize_t size, const Vec2* pointer)
void GLProgramState::setUniformVec3(const std::string& uniformName, const Vec3& value)
void GLProgramState::setUniformVec3(GLint uniformLocation, const Vec3& value)
void GLProgramState::setUniformVec3v(const std::string& uniformName, ssize_t size, const Vec3* pointer)
void GLProgramState::setUniformVec3v(GLint uniformLocation, ssize_t size, const Vec3* pointer)
void GLProgramState::setUniformVec4(const std::string& uniformName, const Vec4& value)
void GLProgramState::setUniformVec4(GLint uniformLocation, const Vec4& value)
void GLProgramState::setUniformVec4v(const std::string& uniformName, ssize_t size, const Vec4* value)
void GLProgramState::setUniformVec4v(GLint uniformLocation, ssize_t size, const Vec4* pointer)
void GLProgramState::setUniformMat4(const std::string& uniformName, const Mat4& value)
void GLProgramState::setUniformMat4(GLint uniformLocation, const Mat4& value)
void GLProgramState::setUniformTexture(const std::string& uniformName, Texture2D *texture)
void GLProgramState::setUniformTexture(GLint uniformLocation, Texture2D *texture)
void GLProgramState::setUniformTexture(const std::string& uniformName, GLuint textureId)
void GLProgramState::setUniformTexture(GLint uniformLocation, GLuint textureId)
void GLProgramState::setParameterAutoBinding(const std::string& uniformName, const std::string& autoBinding)
void GLProgramState::applyAutoBinding(const std::string& uniformName, const std::string& autoBinding)
void GLProgramState::setNodeBinding(Node* target)
Node* GLProgramState::getNodeBinding() const
GLProgramStateCache* GLProgramStateCache::getInstance()
void GLProgramStateCache::destroyInstance()
GLProgramState* GLProgramStateCache::getGLProgramState(GLProgram* glprogram)
void GLProgramStateCache::removeUnusedGLProgramState()
void GLProgramStateCache::removeAllGLProgramState()
bool GroupCommandManager::init()
int GroupCommandManager::getGroupID()
void GroupCommandManager::releaseGroupID(int groupID)
void GroupCommand::init(float globalOrder)
Material* Material::createWithFilename(const std::string& filepath)
Material* Material::createWithProperties(Properties* materialProperties)
Material* Material::createWithGLStateProgram(GLProgramState* programState)
bool Material::initWithGLProgramState(cocos2d::GLProgramState *state)
bool Material::initWithFile(const std::string& validfilename)
bool Material::initWithProperties(Properties* materialProperties)
void Material::setTarget(cocos2d::Node *target)
bool Material::parseProperties(Properties* materialProperties)
bool Material::parseTechnique(Properties* techniqueProperties)
bool Material::parsePass(Technique* technique, Properties* passProperties)
bool Material::parseSampler(GLProgramState* glProgramState, Properties* samplerProperties)
bool Material::parseShader(Pass* pass, Properties* shaderProperties)
bool Material::parseUniform(GLProgramState* programState, Properties* properties, const char* uniformName)
bool Material::parseRenderState(RenderState* renderState, Properties* properties)
void Material::setName(const std::string&name)
std::string Material::getName() const
Material* Material::clone() const
Technique* Material::getTechnique() const
const Vector<Technique*>& Material::getTechniques() const
Technique* Material::getTechniqueByName(const std::string& name)
Technique* Material::getTechniqueByIndex(ssize_t index)
void Material::addTechnique(Technique* technique)
void Material::setTechnique(const std::string& techniqueName)
ssize_t Material::getTechniqueCount() const
void MeshCommand::setDisplayColor(const Vec4& color)
void MeshCommand::setMatrixPalette(const Vec4* matrixPalette)
void MeshCommand::setMatrixPaletteSize(int size)
void MeshCommand::applyRenderState()
void MeshCommand::genMaterialID(GLuint texID, void* glProgramState, GLuint vertexBuffer, GLuint indexBuffer, BlendFunc blend)
uint32_t MeshCommand::getMaterialID() const
void MeshCommand::preBatchDraw()
void MeshCommand::batchDraw()
void MeshCommand::postBatchDraw()
void MeshCommand::execute()
void MeshCommand::buildVAO()
void MeshCommand::releaseVAO()
void MeshCommand::listenRendererRecreated(EventCustom* event)
Pass* Pass::create(Technique* technique)
Pass* Pass::createWithGLProgramState(Technique* technique, GLProgramState* programState)
bool Pass::init(Technique* technique)
bool Pass::initWithGLProgramState(Technique* technique, GLProgramState *glProgramState)
Pass* Pass::clone() const
GLProgramState* Pass::getGLProgramState() const
void Pass::setGLProgramState(GLProgramState* glProgramState)
uint32_t Pass::getHash() const
void Pass::bind(const Mat4& modelView)
void Pass::bind(const Mat4& modelView, bool bindAttributes)
Node* Pass::getTarget() const
void Pass::unbind()
void Pass::setVertexAttribBinding(VertexAttribBinding* binding)
VertexAttribBinding* Pass::getVertexAttributeBinding() const
Primitive* Primitive::create(VertexData* verts, IndexBuffer* indices, int type)
const VertexData* Primitive::getVertexData() const
const IndexBuffer* Primitive::getIndexData() const
bool Primitive::init(VertexData* verts, IndexBuffer* indices, int type)
void Primitive::draw()
void PrimitiveCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, Primitive* primitive, const Mat4& mv, uint32_t flags)
void PrimitiveCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, Primitive* primitive,const Mat4& mv)
void PrimitiveCommand::execute() const
void QuadCommand::init(float globalOrder, GLuint textureID, GLProgramState* shader, const BlendFunc& blendType, V3F_C4B_T2F_Quad* quads, ssize_t quadCount, const Mat4 &mv)
void QuadCommand::generateMaterialID()
void QuadCommand::useMaterial() const
void RenderCommand::init(float globalZOrder, const cocos2d::Mat4 &transform, uint32_t flags)
void RenderCommand::printID()
void RenderQueue::push_back(RenderCommand* command)
ssize_t RenderQueue::size() const
void RenderQueue::sort()
RenderCommand* RenderQueue::operator[](ssize_t index) const
void RenderQueue::clear()
void RenderQueue::realloc(size_t reserveSize)
void RenderQueue::saveRenderState()
void RenderQueue::restoreRenderState()
void Renderer::initGLView()
void Renderer::setupBuffer()
void Renderer::setupVBOAndVAO()
void Renderer::setupVBO()
void Renderer::mapBuffers()
void Renderer::addCommand(RenderCommand* command)
void Renderer::addCommand(RenderCommand* command, int renderQueue)
void Renderer::pushGroup(int renderQueueID)
void Renderer::popGroup()
int Renderer::createRenderQueue()
void Renderer::processRenderCommand(RenderCommand* command)
void Renderer::visitRenderQueue(RenderQueue& queue)
void Renderer::render()
void Renderer::clean()
void Renderer::clear()
void Renderer::setDepthTest(bool enable)
void Renderer::fillVerticesAndIndices(const TrianglesCommand* cmd)
void Renderer::fillQuads(const QuadCommand *cmd)
void Renderer::drawBatchedTriangles()
void Renderer::drawBatchedQuads()
void Renderer::flush()
void Renderer::flush2D()
void Renderer::flush3D()
void Renderer::flushQuads()
void Renderer::flushTriangles()
bool Renderer::checkVisibility(const Mat4 &transform, const Size &size)
void Renderer::setClearColor(const Color4F &clearColor)
void RenderState::initialize()
void RenderState::finalize()
bool RenderState::init(RenderState* parent)
std::string RenderState::getName() const
void RenderState::setTexture(Texture2D* texture)
Texture2D* RenderState::getTexture() const
void RenderState::bind(Pass* pass)
RenderState* RenderState::getTopmost(RenderState* below)
RenderState::StateBlock* RenderState::getStateBlock() const
void RenderState::cloneInto(RenderState* renderState) const
RenderState::StateBlock* RenderState::StateBlock::create()
void RenderState::StateBlock::bind()
void RenderState::StateBlock::bindNoRestore()
void RenderState::StateBlock::restore(long stateOverrideBits)
void RenderState::StateBlock::enableDepthWrite()
void RenderState::StateBlock::cloneInto(StateBlock* state) const
static bool parseBoolean(const std::string& value)
static int parseInt(const std::string& value)
static unsigned int parseUInt(const std::string& value)
static RenderState::Blend parseBlend(const std::string& value)
static RenderState::DepthFunction parseDepthFunc(const std::string& value)
static RenderState::CullFaceSide parseCullFaceSide(const std::string& value)
static RenderState::FrontFace parseFrontFace(const std::string& value)
static RenderState::StencilFunction parseStencilFunc(const std::string& value)
static RenderState::StencilOperation parseStencilOp(const std::string& value)
void RenderState::StateBlock::setState(const std::string& name, const std::string& value)
bool RenderState::StateBlock::isDirty() const
uint32_t RenderState::StateBlock::getHash() const
void RenderState::StateBlock::invalidate(long stateBits)
void RenderState::StateBlock::setBlend(bool enabled)
void RenderState::StateBlock::setBlendFunc(const BlendFunc& blendFunc)
void RenderState::StateBlock::setBlendSrc(Blend blend)
void RenderState::StateBlock::setBlendDst(Blend blend)
void RenderState::StateBlock::setCullFace(bool enabled)
void RenderState::StateBlock::setCullFaceSide(CullFaceSide side)
void RenderState::StateBlock::setFrontFace(FrontFace winding)
void RenderState::StateBlock::setDepthTest(bool enabled)
void RenderState::StateBlock::setDepthWrite(bool enabled)
void RenderState::StateBlock::setDepthFunction(DepthFunction func)
Technique* Technique::createWithGLProgramState(Material* parent, GLProgramState* state)
Technique* Technique::create(Material* material)
bool Technique::init(Material* parent)
Technique* Technique::clone() const
void Technique::addPass(Pass *pass)
std::string Technique::getName() const
void Technique::setName(const std::string &name)
Pass* Technique::getPassByIndex(ssize_t index) const
ssize_t Technique::getPassCount() const
const Vector<Pass*>& Technique::getPasses() const
void Texture2D::convertI8ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertAI88ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertI8ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertAI88ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertI8ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertAI88ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertI8ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertAI88ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertI8ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertAI88ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertI8ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertAI88ToA8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertAI88ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGB888ToRGBA8888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGBA8888ToRGB888(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGB888ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGBA8888ToRGB565(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGB888ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGBA8888ToI8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGBA8888ToA8(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGB888ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGBA8888ToAI88(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGB888ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGBA8888ToRGBA4444(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGB888ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::convertRGBA8888ToRGB5A1(const unsigned char* data, ssize_t dataLen, unsigned char* outData)
void Texture2D::releaseGLTexture()
Texture2D::PixelFormat Texture2D::getPixelFormat() const
int Texture2D::getPixelsWide() const
int Texture2D::getPixelsHigh() const
GLuint Texture2D::getName() const
Size Texture2D::getContentSize() const
const Size& Texture2D::getContentSizeInPixels()
GLfloat Texture2D::getMaxS() const
void Texture2D::setMaxS(GLfloat maxS)
GLfloat Texture2D::getMaxT() const
void Texture2D::setMaxT(GLfloat maxT)
GLProgram* Texture2D::getGLProgram() const
void Texture2D::setGLProgram(GLProgram* shaderProgram)
bool Texture2D::hasPremultipliedAlpha() const
bool Texture2D::initWithData(const void *data, ssize_t dataLen, Texture2D::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const Size& contentSize)
bool Texture2D::initWithMipmaps(MipmapInfo* mipmaps, int mipmapsNum, PixelFormat pixelFormat, int pixelsWide, int pixelsHigh)
bool Texture2D::updateWithData(const void *data,int offsetX,int offsetY,int width,int height)
std::string Texture2D::getDescription() const
bool Texture2D::initWithImage(Image *image)
bool Texture2D::initWithImage(Image *image, PixelFormat format)
Texture2D::PixelFormat Texture2D::convertI8ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)
Texture2D::PixelFormat Texture2D::convertAI88ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)
Texture2D::PixelFormat Texture2D::convertRGB888ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)
Texture2D::PixelFormat Texture2D::convertRGBA8888ToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)
Texture2D::PixelFormat Texture2D::convertDataToFormat(const unsigned char* data, ssize_t dataLen, PixelFormat originFormat, PixelFormat format, unsigned char** outData, ssize_t* outDataLen)
bool Texture2D::initWithString(const char *text, const std::string& fontName, float fontSize, const Size& dimensions/* = Size(0, 0)*/, TextHAlignment hAlignment/* =  TextHAlignment::CENTER */, TextVAlignment vAlignment/* =  TextVAlignment::TOP */)
bool Texture2D::initWithString(const char *text, const FontDefinition& textDefinition)
void Texture2D::drawAtPoint(const Vec2& point)
void Texture2D::drawInRect(const Rect& rect)
void Texture2D::PVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)
void Texture2D::generateMipmap()
bool Texture2D::hasMipmaps() const
void Texture2D::setTexParameters(const TexParams &texParams)
void Texture2D::setAliasTexParameters()
void Texture2D::setAntiAliasTexParameters()
const char* Texture2D::getStringForFormat() const
void Texture2D::setDefaultAlphaPixelFormat(Texture2D::PixelFormat format)
Texture2D::PixelFormat Texture2D::getDefaultAlphaPixelFormat()
unsigned int Texture2D::getBitsPerPixelForFormat(Texture2D::PixelFormat format) const
unsigned int Texture2D::getBitsPerPixelForFormat() const
const Texture2D::PixelFormatInfoMap& Texture2D::getPixelFormatInfoMap()
void Texture2D::addSpriteFrameCapInset(SpriteFrame* spritframe, const Rect& capInsets)
bool Texture2D::isContain9PatchInfo()const
const Rect& Texture2D::getSpriteFrameCapInset( cocos2d::SpriteFrame *spriteFrame )const
void Texture2D::removeSpriteFrameCapInset(SpriteFrame* spriteFrame)
ssize_t TextureAtlas::getTotalQuads() const
ssize_t TextureAtlas::getCapacity() const
Texture2D* TextureAtlas::getTexture() const
void TextureAtlas::setTexture(Texture2D * var)
V3F_C4B_T2F_Quad* TextureAtlas::getQuads()
void TextureAtlas::setQuads(V3F_C4B_T2F_Quad* quads)
TextureAtlas * TextureAtlas::create(const std::string& file, ssize_t capacity)
TextureAtlas * TextureAtlas::createWithTexture(Texture2D *texture, ssize_t capacity)
bool TextureAtlas::initWithFile(const std::string& file, ssize_t capacity)
bool TextureAtlas::initWithTexture(Texture2D *texture, ssize_t capacity)
void TextureAtlas::listenRendererRecreated(EventCustom* event)
std::string TextureAtlas::getDescription() const
void TextureAtlas::setupIndices()
void TextureAtlas::setupVBOandVAO()
void TextureAtlas::setupVBO()
void TextureAtlas::mapBuffers()
void TextureAtlas::updateQuad(V3F_C4B_T2F_Quad *quad, ssize_t index)
void TextureAtlas::insertQuad(V3F_C4B_T2F_Quad *quad, ssize_t index)
void TextureAtlas::insertQuads(V3F_C4B_T2F_Quad* quads, ssize_t index, ssize_t amount)
void TextureAtlas::insertQuadFromIndex(ssize_t oldIndex, ssize_t newIndex)
void TextureAtlas::removeQuadAtIndex(ssize_t index)
void TextureAtlas::removeQuadsAtIndex(ssize_t index, ssize_t amount)
void TextureAtlas::removeAllQuads()
bool TextureAtlas::resizeCapacity(ssize_t newCapacity)
void TextureAtlas::increaseTotalQuadsWith(ssize_t amount)
void TextureAtlas::moveQuadsFromIndex(ssize_t oldIndex, ssize_t amount, ssize_t newIndex)
void TextureAtlas::moveQuadsFromIndex(ssize_t index, ssize_t newIndex)
void TextureAtlas::fillWithEmptyQuadsFromIndex(ssize_t index, ssize_t amount)
void TextureAtlas::drawQuads()
void TextureAtlas::drawNumberOfQuads(ssize_t numberOfQuads)
void TextureAtlas::drawNumberOfQuads(ssize_t numberOfQuads, ssize_t start)
TextureCache * TextureCache::getInstance()
void TextureCache::destroyInstance()
TextureCache * TextureCache::sharedTextureCache()
void TextureCache::purgeSharedTextureCache()
std::string TextureCache::getDescription() const
struct TextureCache::AsyncStruct
AsyncStruct(const std::string& fn, std::function<void(Texture2D*)> f) : filename(fn), callback(f), loadSuccess(false)
void TextureCache::addImageAsync(const std::string &path, const std::function<void(Texture2D*)>& callback)
void TextureCache::unbindImageAsync(const std::string& filename)
void TextureCache::unbindAllImageAsync()
void TextureCache::loadImage()
void TextureCache::addImageAsyncCallBack(float dt)
Texture2D * TextureCache::addImage(const std::string &path)
void TextureCache::parseNinePatchImage(cocos2d::Image *image, cocos2d::Texture2D *texture,const std::string& path)
Texture2D* TextureCache::addImage(Image *image, const std::string &key)
bool TextureCache::reloadTexture(const std::string& fileName)
void TextureCache::removeAllTextures()
void TextureCache::removeUnusedTextures()
void TextureCache::removeTexture(Texture2D* texture)
void TextureCache::removeTextureForKey(const std::string &textureKeyName)
Texture2D* TextureCache::getTextureForKey(const std::string &textureKeyName) const
void TextureCache::reloadAllTextures()
const std::string TextureCache::getTextureFilePath( cocos2d::Texture2D *texture )const
void TextureCache::waitForQuit()
std::string TextureCache::getCachedTextureInfo() const
void VolatileTextureMgr::addImageTexture(Texture2D *tt, const std::string& imageFileName)
void VolatileTextureMgr::addImage(Texture2D *tt, Image *image)
VolatileTexture* VolatileTextureMgr::findVolotileTexture(Texture2D *tt)
void VolatileTextureMgr::addDataTexture(Texture2D *tt, void* data, int dataLen, Texture2D::PixelFormat pixelFormat, const Size& contentSize)
void VolatileTextureMgr::addStringTexture(Texture2D *tt, const char* text, const FontDefinition& fontDefinition)
void VolatileTextureMgr::setHasMipmaps(Texture2D *t, bool hasMipmaps)
void VolatileTextureMgr::setTexParameters(Texture2D *t, const Texture2D::TexParams &texParams)
void VolatileTextureMgr::removeTexture(Texture2D *t)
void VolatileTextureMgr::reloadAllTextures()
unsigned char* getImageData(Image* img, Texture2D::PixelFormat&  ePixFmt)
Image* createImage(const std::string& path)
const std::string& positive_z, const std::string& negative_z)
const std::string& positive_z, const std::string& negative_z)
void TextureCube::setTexParameters(const TexParams& texParams)
bool TextureCube::reloadTexture()
void TrianglesCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, const Triangles& triangles,const Mat4& mv, uint32_t flags)
void TrianglesCommand::init(float globalOrder, GLuint textureID, GLProgramState* glProgramState, BlendFunc blendType, const Triangles& triangles,const Mat4& mv)
void TrianglesCommand::generateMaterialID()
void TrianglesCommand::useMaterial() const
VertexAttribBinding* VertexAttribBinding::create(MeshIndexData* meshIndexData, GLProgramState* glProgramState)
bool VertexAttribBinding::init(MeshIndexData* meshIndexData, GLProgramState* glProgramState)
void VertexAttribBinding::bind()
void VertexAttribBinding::unbind()
uint32_t VertexAttribBinding::getVertexAttribsFlags() const
void VertexAttribBinding::parseAttributes()
VertexAttribValue* VertexAttribBinding::getVertexAttribValue(const std::string& name)
void VertexAttribBinding::setVertexAttribPointer(const std::string &name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid* pointer)
VertexBuffer* VertexBuffer::create(int sizePerVertex, int vertexNumber, GLenum usage/* = GL_STATIC_DRAW*/)
bool VertexBuffer::init(int sizePerVertex, int vertexNumber, GLenum usage/* = GL_STATIC_DRAW*/)
int VertexBuffer::getSizePerVertex() const
int VertexBuffer::getVertexNumber() const
bool VertexBuffer::updateVertices(const void* verts, int count, int begin)
GLuint VertexBuffer::getVBO() const
void VertexBuffer::recreateVBO() const
int VertexBuffer::getSize() const
IndexBuffer* IndexBuffer::create(IndexType type, int number, GLenum usage/* = GL_STATIC_DRAW*/)
bool IndexBuffer::init(IndexBuffer::IndexType type, int number, GLenum usage/* = GL_STATIC_DRAW*/)
IndexBuffer::IndexType IndexBuffer::getType() const
int IndexBuffer::getSizePerIndex() const
int IndexBuffer::getIndexNumber() const
bool IndexBuffer::updateIndices(const void* indices, int count, int begin)
int IndexBuffer::getSize() const
GLuint IndexBuffer::getVBO() const
void IndexBuffer::recreateVBO() const
VertexData* VertexData::create()
size_t VertexData::getVertexStreamCount() const
bool VertexData::setStream(VertexBuffer* buffer, const VertexStreamAttribute& stream)
void VertexData::removeStream(int semantic)
const VertexStreamAttribute* VertexData::getStreamAttribute(int semantic) const
VertexStreamAttribute* VertexData::getStreamAttribute(int semantic)
VertexBuffer* VertexData::getStreamBuffer(int semantic) const
void VertexData::use()
static void splitFilename (std::string& str)
void localStorageInit( const std::string& fullpath)
void localStorageSetItem( const std::string& key, const std::string& value)
bool localStorageGetItem( const std::string& key, std::string *outItem )
void localStorageRemoveItem( const std::string& key )
void localStorageInit( const std::string& fullpath/* = "" */)
void localStorageSetItem( const std::string& key, const std::string& value)
bool localStorageGetItem( const std::string& key, std::string *outItem )
void localStorageRemoveItem( const std::string& key )
bool AbstractCheckButton::init()
void AbstractCheckButton::initRenderer()
void AbstractCheckButton::loadTextureBackGround(const std::string& backGround,TextureResType texType)
void AbstractCheckButton::setupBackgroundTexture()
void AbstractCheckButton::loadTextureBackGround(SpriteFrame* spriteFrame)
void AbstractCheckButton::loadTextureBackGroundSelected(const std::string& backGroundSelected,TextureResType texType)
void AbstractCheckButton::loadTextureBackGroundSelected(SpriteFrame* spriteframe)
void AbstractCheckButton::setupBackgroundSelectedTexture()
void AbstractCheckButton::loadTextureFrontCross(const std::string& cross,TextureResType texType)
void AbstractCheckButton::loadTextureFrontCross(SpriteFrame* spriteFrame)
void AbstractCheckButton::setupFrontCrossTexture()
void AbstractCheckButton::loadTextureBackGroundDisabled(const std::string& backGroundDisabled,TextureResType texType)
void AbstractCheckButton::loadTextureBackGroundDisabled(SpriteFrame* spriteframe)
void AbstractCheckButton::setupBackgroundDisable()
void AbstractCheckButton::loadTextureFrontCrossDisabled(const std::string& frontCrossDisabled,TextureResType texType)
void AbstractCheckButton::loadTextureFrontCrossDisabled(SpriteFrame* spriteframe)
void AbstractCheckButton::setupFrontCrossDisableTexture()
void AbstractCheckButton::onPressStateChangedToNormal()
void AbstractCheckButton::onPressStateChangedToPressed()
void AbstractCheckButton::onPressStateChangedToDisabled()
void AbstractCheckButton::setZoomScale(float scale)
float AbstractCheckButton::getZoomScale()const
void AbstractCheckButton::setSelected(bool selected)
bool AbstractCheckButton::isSelected()const
void AbstractCheckButton::onSizeChanged()
void AbstractCheckButton::adaptRenderers()
Size AbstractCheckButton::getVirtualRendererSize() const
Node* AbstractCheckButton::getVirtualRenderer()
void AbstractCheckButton::backGroundTextureScaleChangedWithSize()
void AbstractCheckButton::backGroundSelectedTextureScaleChangedWithSize()
void AbstractCheckButton::frontCrossTextureScaleChangedWithSize()
void AbstractCheckButton::backGroundDisabledTextureScaleChangedWithSize()
void AbstractCheckButton::frontCrossDisabledTextureScaleChangedWithSize()
void AbstractCheckButton::copySpecialProperties(Widget *widget)
Button* Button::create()
bool Button::init()
void Button::initRenderer()
void Button::createTitleRenderer()
void Button::setScale9Enabled(bool able)
bool Button::isScale9Enabled()const
void Button::ignoreContentAdaptWithSize(bool ignore)
void Button::loadTextureNormal(const std::string& normal,TextureResType texType)
void Button::setupNormalTexture()
void Button::loadTextureNormal(SpriteFrame* normalSpriteFrame)
void Button::loadTexturePressed(const std::string& selected,TextureResType texType)
void Button::setupPressedTexture()
void Button::loadTexturePressed(SpriteFrame* pressedSpriteFrame)
void Button::loadTextureDisabled(const std::string& disabled,TextureResType texType)
void Button::setupDisabledTexture()
void Button::loadTextureDisabled(SpriteFrame* disabledSpriteFrame)
void Button::setCapInsets(const Rect &capInsets)
void Button::setCapInsetsNormalRenderer(const Rect &capInsets)
void Button::setCapInsetsPressedRenderer(const Rect &capInsets)
void Button::setCapInsetsDisabledRenderer(const Rect &capInsets)
const Rect& Button::getCapInsetsNormalRenderer()const
const Rect& Button::getCapInsetsPressedRenderer()const
const Rect& Button::getCapInsetsDisabledRenderer()const
void Button::onPressStateChangedToNormal()
void Button::onPressStateChangedToPressed()
void Button::onPressStateChangedToDisabled()
void Button::updateTitleLocation()
void Button::updateContentSize()
void Button::onSizeChanged()
void Button::adaptRenderers()
Size Button::getVirtualRendererSize() const
Node* Button::getVirtualRenderer()
void Button::normalTextureScaleChangedWithSize()
void Button::pressedTextureScaleChangedWithSize()
void Button::disabledTextureScaleChangedWithSize()
void Button::setPressedActionEnabled(bool enabled)
void Button::setTitleAlignment(TextHAlignment hAlignment)
void Button::setTitleAlignment(TextHAlignment hAlignment, TextVAlignment vAlignment)
void Button::setTitleText(const std::string& text)
const std::string Button::getTitleText() const
void Button::setTitleColor(const Color3B& color)
Color3B Button::getTitleColor() const
void Button::setTitleFontSize(float size)
float Button::getTitleFontSize() const
void Button::setZoomScale(float scale)
float Button::getZoomScale()const
void Button::setTitleFontName(const std::string& fontName)
Label* Button::getTitleRenderer()const
const std::string Button::getTitleFontName() const
std::string Button::getDescription() const
Widget* Button::createCloneInstance()
void Button::copySpecialProperties(Widget *widget)
Size Button::getNormalSize() const
Size Button::getNormalTextureSize() const
CheckBox* CheckBox::create()
void CheckBox::onTouchEnded(Touch *touch, Event *unusedEvent)
void CheckBox::dispatchSelectChangedEvent(bool selected)
void CheckBox::addEventListenerCheckBox(Ref *target, SEL_SelectedStateEvent selector)
void CheckBox::addEventListener(const ccCheckBoxCallback& callback)
std::string CheckBox::getDescription() const
Widget* CheckBox::createCloneInstance()
void CheckBox::copySpecialProperties(Widget *widget)
void EditBox::touchDownAction(Ref *sender, TouchEventType controlEvent)
TextureResType texType /*= TextureResType::LOCAL*/)
EditBox* EditBox::create(const cocos2d::Size &size, cocos2d::ui::Scale9Sprite *normalSprite, ui::Scale9Sprite *pressedSprite, Scale9Sprite* disabledSprite)
bool EditBox::initWithSizeAndBackgroundSprite(const cocos2d::Size &size, cocos2d::ui::Scale9Sprite *pNormal9SpriteBg)
void EditBox::setDelegate(EditBoxDelegate* pDelegate)
EditBoxDelegate* EditBox::getDelegate()
void EditBox::setText(const char* pText)
const char* EditBox::getText(void)
void EditBox::setFont(const char* pFontName, int fontSize)
void EditBox::setFontName(const char* pFontName)
void EditBox::setFontSize(int fontSize)
void EditBox::setFontColor(const Color3B& color)
void EditBox::setFontColor(const Color4B& color)
void EditBox::setPlaceholderFont(const char* pFontName, int fontSize)
void EditBox::setPlaceholderFontName(const char* pFontName)
void EditBox::setPlaceholderFontSize(int fontSize)
void EditBox::setPlaceholderFontColor(const Color3B& color)
void EditBox::setPlaceholderFontColor(const Color4B& color)
void EditBox::setPlaceHolder(const char* pText)
const char* EditBox::getPlaceHolder(void)
void EditBox::setInputMode(EditBox::InputMode inputMode)
void EditBox::setMaxLength(int maxLength)
int EditBox::getMaxLength()
void EditBox::setInputFlag(EditBox::InputFlag inputFlag)
void EditBox::setReturnType(EditBox::KeyboardReturnType returnType)
void EditBox::setPosition(const Vec2& pos)
void EditBox::setVisible(bool visible)
void EditBox::setContentSize(const Size& size)
void EditBox::adaptRenderers()
void EditBox::setAnchorPoint(const Vec2& anchorPoint)
std::string EditBox::getDescription() const
void EditBox::draw(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void EditBox::onEnter(void)
void EditBox::updatePosition(float dt)
void EditBox::onExit(void)
void EditBox::keyboardWillShow(IMEKeyboardNotificationInfo& info)
void EditBox::keyboardDidShow(IMEKeyboardNotificationInfo& info)
void EditBox::keyboardWillHide(IMEKeyboardNotificationInfo& info)
void EditBox::keyboardDidHide(IMEKeyboardNotificationInfo& info)
void EditBox::registerScriptEditBoxHandler(int handler)
void EditBox::unregisterScriptEditBoxHandler(void)
void EditBoxImplAndroid::createNativeControl(const Rect& frame)
void EditBoxImplAndroid::setNativeFont(const char* pFontName, int fontSize)
void EditBoxImplAndroid::setNativeFontColor(const Color4B& color)
void EditBoxImplAndroid::setNativePlaceholderFont(const char* pFontName, int fontSize)
void EditBoxImplAndroid::setNativePlaceholderFontColor(const Color4B& color)
void EditBoxImplAndroid::setNativeInputMode(EditBox::InputMode inputMode)
void EditBoxImplAndroid::setNativeMaxLength(int maxLength)
void EditBoxImplAndroid::setNativeInputFlag(EditBox::InputFlag inputFlag)
void EditBoxImplAndroid::setNativeReturnType(EditBox::KeyboardReturnType returnType)
bool EditBoxImplAndroid::isEditing()
void EditBoxImplAndroid::setNativeText(const char* pText)
void EditBoxImplAndroid::setNativePlaceHolder(const char* pText)
void EditBoxImplAndroid::setNativeVisible(bool visible)
void EditBoxImplAndroid::updateNativeFrame(const Rect& rect)
void EditBoxImplAndroid::nativeOpenKeyboard()
void EditBoxImplAndroid::nativeCloseKeyboard()
void editBoxEditingDidChanged(int index, const std::string& text)
void editBoxEditingDidEnd(int index, const std::string& text)
const char* EditBoxImplAndroid::getNativeDefaultFontName()
bool EditBoxImplCommon::initWithSize(const Size& size)
void EditBoxImplCommon::initInactiveLabels(const Size& size)
void EditBoxImplCommon::placeInactiveLabels()
void EditBoxImplCommon::setInactiveText(const char* pText)
void EditBoxImplCommon::setFont(const char* pFontName, int fontSize)
void EditBoxImplCommon::setFontColor(const Color4B& color)
void EditBoxImplCommon::setPlaceholderFont(const char* pFontName, int fontSize)
void EditBoxImplCommon::setPlaceholderFontColor(const Color4B &color)
void EditBoxImplCommon::setInputMode(EditBox::InputMode inputMode)
void EditBoxImplCommon::setMaxLength(int maxLength)
int EditBoxImplCommon::getMaxLength()
void EditBoxImplCommon::setInputFlag(EditBox::InputFlag inputFlag)
void EditBoxImplCommon::setReturnType(EditBox::KeyboardReturnType returnType)
void EditBoxImplCommon::refreshInactiveText()
void EditBoxImplCommon::setText(const char* text)
const char*  EditBoxImplCommon::getText(void)
void EditBoxImplCommon::setPlaceHolder(const char* pText)
void EditBoxImplCommon::setVisible(bool visible)
void EditBoxImplCommon::setContentSize(const Size& size)
void EditBoxImplCommon::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void EditBoxImplCommon::onEnter(void)
void EditBoxImplCommon::openKeyboard()
void EditBoxImplCommon::closeKeyboard()
void EditBoxImplCommon::onEndEditing(const std::string& text)
void EditBoxImplCommon::editBoxEditingDidBegin()
void EditBoxImplCommon::editBoxEditingDidEnd(const std::string& text)
void EditBoxImplCommon::editBoxEditingChanged(const std::string& text)
CWin32InputBox::CWin32InputBox(WIN32INPUTBOX_PARAM *param)
void CWin32InputBox::SetParam(WIN32INPUTBOX_PARAM *param)
WIN32INPUTBOX_PARAM *CWin32InputBox::GetParam()
INT_PTR CWin32InputBox::InputBoxEx(WIN32INPUTBOX_PARAM *param)
void CWin32InputBox::InitDialog()
LRESULT CALLBACK CWin32InputBox::DlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
void EditBoxImplWin::doAnimationWhenKeyboardMove(float duration, float distance)
bool EditBoxImplWin::initWithSize(const Size& size)
void EditBoxImplWin::setFont(const char* pFontName, int fontSize)
void EditBoxImplWin::setFontColor(const Color4B& color)
void EditBoxImplWin::setPlaceholderFont(const char* pFontName, int fontSize)
void EditBoxImplWin::setPlaceholderFontColor(const Color4B& color)
void EditBoxImplWin::setInputMode(EditBox::InputMode inputMode)
void EditBoxImplWin::setMaxLength(int maxLength)
int EditBoxImplWin::getMaxLength()
void EditBoxImplWin::setInputFlag(EditBox::InputFlag inputFlag)
void EditBoxImplWin::setReturnType(EditBox::KeyboardReturnType returnType)
bool EditBoxImplWin::isEditing()
void EditBoxImplWin::setText(const char* pText)
const char*  EditBoxImplWin::getText(void)
void EditBoxImplWin::setPlaceHolder(const char* pText)
void EditBoxImplWin::setPosition(const Vec2& pos)
void EditBoxImplWin::setVisible(bool visible)
void EditBoxImplWin::setContentSize(const Size& size)
void EditBoxImplWin::setAnchorPoint(const Vec2& anchorPoint)
void EditBoxImplWin::draw(Renderer *renderer, const Mat4 &transform, uint32_t flags)
void EditBoxImplWin::openKeyboard()
void EditBoxImplWin::closeKeyboard()
void EditBoxImplWin::onEnter(void)
HBox* HBox::create()
HBox* HBox::create(const cocos2d::Size &size)
bool HBox::init()
bool HBox::initWithSize(const Size& size)
Widget* Helper::seekWidgetByTag(Widget* root, int tag)
Widget* Helper::seekWidgetByName(Widget* root, const std::string& name)
Widget* Helper::seekActionWidgetByActionTag(Widget* root, int tag)
std::string Helper::getSubStringOfUTF8String(const std::string& str, std::string::size_type start, std::string::size_type length)
void Helper::changeLayoutSystemActiveState(bool bActive)
void Helper::doLayout(cocos2d::Node *rootNode)
Rect Helper::restrictCapInsetRect(const cocos2d::Rect &capInsets, const Size& textureSize )
Rect Helper::convertBoundingBoxToScreen(Node* node)
ImageView* ImageView::create(const std::string &imageFileName, TextureResType texType)
ImageView* ImageView::create()
bool ImageView::init()
bool ImageView::init(const std::string &imageFileName, TextureResType texType)
void ImageView::initRenderer()
void ImageView::loadTexture(const std::string& fileName, TextureResType texType)
void ImageView::loadTexture(SpriteFrame* spriteframe)
void ImageView::setupTexture()
void ImageView::setTextureRect(const Rect &rect)
void ImageView::setScale9Enabled(bool able)
bool ImageView::isScale9Enabled()const
void ImageView::ignoreContentAdaptWithSize(bool ignore)
void ImageView::setCapInsets(const Rect &capInsets)
const Rect& ImageView::getCapInsets()const
void ImageView::onSizeChanged()
void ImageView::adaptRenderers()
Size ImageView::getVirtualRendererSize() const
Node* ImageView::getVirtualRenderer()
void ImageView::imageTextureScaleChangedWithSize()
std::string ImageView::getDescription() const
Widget* ImageView::createCloneInstance()
void ImageView::copySpecialProperties(Widget *widget)
void Layout::onEnter()
void Layout::onExit()
Layout* Layout::create()
bool Layout::init()
void Layout::addChild(Node* child)
void Layout::addChild(Node * child, int localZOrder)
void Layout::addChild(Node *child, int zOrder, int tag)
void Layout::addChild(Node* child, int zOrder, const std::string &name)
void Layout::removeChild(Node *child, bool cleanup)
void Layout::removeAllChildren()
void Layout::removeAllChildrenWithCleanup(bool cleanup)
bool Layout::isClippingEnabled()const
void Layout::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
void Layout::stencilClippingVisit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)
void Layout::onBeforeVisitStencil()
void Layout::drawFullScreenQuadClearStencil()
void Layout::onAfterDrawStencil()
void Layout::onAfterVisitStencil()
void Layout::onBeforeVisitScissor()
void Layout::onAfterVisitScissor()
void Layout::scissorClippingVisit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)
void Layout::setClippingEnabled(bool able)
void Layout::setClippingType(ClippingType type)
Layout::ClippingType Layout::getClippingType()const
void Layout::setStencilClippingSize(const Size &size)
const Rect& Layout::getClippingRect()
void Layout::onSizeChanged()
void Layout::setBackGroundImageScale9Enabled(bool able)
bool Layout::isBackGroundImageScale9Enabled()const
void Layout::setBackGroundImage(const std::string& fileName,TextureResType texType)
void Layout::setBackGroundImageCapInsets(const Rect &capInsets)
const Rect& Layout::getBackGroundImageCapInsets()const
void Layout::supplyTheLayoutParameterLackToChild(Widget *child)
void Layout::addBackGroundImage()
void Layout::removeBackGroundImage()
void Layout::setBackGroundColorType(BackGroundColorType type)
Layout::BackGroundColorType Layout::getBackGroundColorType()const
void Layout::setBackGroundColor(const Color3B &color)
const Color3B& Layout::getBackGroundColor()const
void Layout::setBackGroundColor(const Color3B &startColor, const Color3B &endColor)
const Color3B& Layout::getBackGroundStartColor()const
const Color3B& Layout::getBackGroundEndColor()const
void Layout::setBackGroundColorOpacity(GLubyte opacity)
GLubyte Layout::getBackGroundColorOpacity()const
void Layout::setBackGroundColorVector(const Vec2 &vector)
const Vec2& Layout::getBackGroundColorVector()const
void Layout::setBackGroundImageColor(const Color3B &color)
void Layout::setBackGroundImageOpacity(GLubyte opacity)
const Color3B& Layout::getBackGroundImageColor()const
GLubyte Layout::getBackGroundImageOpacity()const
void Layout::updateBackGroundImageColor()
void Layout::updateBackGroundImageOpacity()
void Layout::updateBackGroundImageRGBA()
const Size& Layout::getBackGroundImageTextureSize() const
void Layout::setLayoutType(Type type)
Layout::Type Layout::getLayoutType() const
void Layout::forceDoLayout()
void Layout::requestDoLayout()
Size Layout::getLayoutContentSize()const
const Vector<Node*>& Layout::getLayoutElements()const
LayoutManager* Layout::createLayoutManager()
void Layout::doLayout()
std::string Layout::getDescription() const
Widget* Layout::createCloneInstance()
void Layout::copyClonedWidgetChildren(Widget* model)
void Layout::copySpecialProperties(Widget *widget)
void Layout::setLoopFocus(bool loop)
bool Layout::isLoopFocus()const
void Layout::setPassFocusToChild(bool pass)
bool Layout::isPassFocusToChild()const
Size Layout::getLayoutAccumulatedSize()const
Vec2 Layout::getWorldCenterPoint(Widget* widget)const
float Layout::calculateNearestDistance(Widget* baseWidget)
float Layout::calculateFarthestDistance(cocos2d::ui::Widget *baseWidget)
int Layout::findFirstFocusEnabledWidgetIndex()
int Layout::findNearestChildWidgetIndex(FocusDirection direction, Widget* baseWidget)
int Layout::findFarthestChildWidgetIndex(FocusDirection direction, cocos2d::ui::Widget *baseWidget)
Widget* Layout::findFocusEnabledChildWidgetByIndex(ssize_t index)
Widget *Layout::findFirstNonLayoutWidget()
void Layout::findProperSearchingFunctor(FocusDirection dir, Widget* baseWidget)
Widget* Layout::passFocusToChild(FocusDirection dir, cocos2d::ui::Widget *current)
bool Layout::checkFocusEnabledChild()const
Widget* Layout::getChildWidgetByIndex(ssize_t index)const
Widget* Layout::getPreviousFocusedWidget(FocusDirection direction, Widget *current)
Widget* Layout::getNextFocusedWidget(FocusDirection direction, Widget *current)
bool  Layout::isLastWidgetInContainer(Widget* widget, FocusDirection direction)const
bool  Layout::isWidgetAncestorSupportLoopFocus(Widget* widget, FocusDirection direction)const
Widget* Layout::findNextFocusedWidget(FocusDirection direction, Widget* current)
void Layout::setCameraMask(unsigned short mask, bool applyChildren)
LinearHorizontalLayoutManager* LinearHorizontalLayoutManager::create()
void LinearHorizontalLayoutManager::doLayout(LayoutProtocol* layout)
LinearVerticalLayoutManager* LinearVerticalLayoutManager::create()
void LinearVerticalLayoutManager::doLayout(LayoutProtocol* layout)
RelativeLayoutManager* RelativeLayoutManager::create()
Vector<Widget*> RelativeLayoutManager::getAllWidgets(cocos2d::ui::LayoutProtocol *layout)
Widget* RelativeLayoutManager::getRelativeWidget(Widget* widget)
bool RelativeLayoutManager::caculateFinalPositionWithRelativeWidget(LayoutProtocol *layout)
void RelativeLayoutManager::caculateFinalPositionWithRelativeAlign()
void RelativeLayoutManager::doLayout(LayoutProtocol *layout)
Margin::Margin(void) : left(0), top(0), right(0), bottom(0)
Margin::Margin(float l, float t, float r, float b) : left(l), top(t), right(r), bottom(b)
Margin::Margin(const Margin& other) : left(other.left), top(other.top), right(other.right), bottom(other.bottom)
void Margin::setMargin(float l, float t, float r, float b)
bool Margin::equals(const Margin &target) const
LayoutParameter* LayoutParameter::create()
void LayoutParameter::setMargin(const Margin &margin)
const Margin& LayoutParameter::getMargin() const
LayoutParameter::Type LayoutParameter::getLayoutType() const
LayoutParameter* LayoutParameter::clone()
LayoutParameter* LayoutParameter::createCloneInstance()
void LayoutParameter::copyProperties(LayoutParameter *model)
LinearLayoutParameter* LinearLayoutParameter::create()
void LinearLayoutParameter::setGravity(LinearGravity gravity)
LinearLayoutParameter::LinearGravity LinearLayoutParameter::getGravity() const
LayoutParameter* LinearLayoutParameter::createCloneInstance()
void LinearLayoutParameter::copyProperties(LayoutParameter *model)
RelativeLayoutParameter* RelativeLayoutParameter::create()
void RelativeLayoutParameter::setAlign(RelativeAlign align)
RelativeLayoutParameter::RelativeAlign RelativeLayoutParameter::getAlign() const
void RelativeLayoutParameter::setRelativeToWidgetName(const std::string& name)
const std::string& RelativeLayoutParameter::getRelativeToWidgetName() const
void RelativeLayoutParameter::setRelativeName(const std::string& name)
const std::string& RelativeLayoutParameter::getRelativeName() const
LayoutParameter* RelativeLayoutParameter::createCloneInstance()
void RelativeLayoutParameter::copyProperties(LayoutParameter *model)
ListView* ListView::create()
bool ListView::init()
void ListView::setItemModel(Widget *model)
void ListView::updateInnerContainerSize()
void ListView::remedyVerticalLayoutParameter(LinearLayoutParameter* layoutParameter, ssize_t itemIndex)
void ListView::remedyHorizontalLayoutParameter(LinearLayoutParameter* layoutParameter, ssize_t itemIndex)
void ListView::remedyLayoutParameter(Widget *item)
void ListView::pushBackDefaultItem()
void ListView::insertDefaultItem(ssize_t index)
void ListView::pushBackCustomItem(Widget* item)
void ListView::addChild(cocos2d::Node *child, int zOrder, int tag)
void ListView::addChild(cocos2d::Node *child)
void ListView::addChild(cocos2d::Node *child, int zOrder)
void ListView::addChild(Node* child, int zOrder, const std::string &name)
void ListView::removeChild(cocos2d::Node *child, bool cleaup)
void ListView::removeAllChildren()
void ListView::removeAllChildrenWithCleanup(bool cleanup)
void ListView::insertCustomItem(Widget* item, ssize_t index)
void ListView::removeItem(ssize_t index)
void ListView::removeLastItem()
void ListView::removeAllItems()
Widget* ListView::getItem(ssize_t index)const
Vector<Widget*>& ListView::getItems()
ssize_t ListView::getIndex(Widget *item) const
void ListView::setGravity(Gravity gravity)
void ListView::setItemsMargin(float margin)
float ListView::getItemsMargin()const
void ListView::setDirection(Direction dir)
void ListView::requestRefreshView()
void ListView::refreshView()
void ListView::forceDoLayout()
void ListView::doLayout()
void ListView::addEventListenerListView(Ref *target, SEL_ListViewEvent selector)
void ListView::addEventListener(const ccListViewCallback& callback)
void ListView::selectedItemEvent(TouchEventType event)
void ListView::interceptTouchEvent(TouchEventType event, Widget *sender, Touch* touch)
ssize_t ListView::getCurSelectedIndex() const
void ListView::onSizeChanged()
std::string ListView::getDescription() const
Widget* ListView::createCloneInstance()
void ListView::copyClonedWidgetChildren(Widget* model)
void ListView::copySpecialProperties(Widget *widget)
LoadingBar* LoadingBar::create()
LoadingBar* LoadingBar::create(const std::string &textureName, float percentage)
void LoadingBar::initRenderer()
void LoadingBar::setDirection(cocos2d::ui::LoadingBar::Direction direction)
LoadingBar::Direction LoadingBar::getDirection()const
void LoadingBar::loadTexture(const std::string& texture,TextureResType texType)
void LoadingBar::loadTexture(SpriteFrame* spriteframe)
void LoadingBar::setupTexture()
void LoadingBar::setScale9Enabled(bool enabled)
bool LoadingBar::isScale9Enabled()const
void LoadingBar::setCapInsets(const Rect &capInsets)
const Rect& LoadingBar::getCapInsets()const
void LoadingBar::setPercent(float percent)
void LoadingBar::updateProgressBar()
float LoadingBar::getPercent() const
void LoadingBar::onSizeChanged()
void LoadingBar::adaptRenderers()
void LoadingBar::ignoreContentAdaptWithSize(bool ignore)
Size LoadingBar::getVirtualRendererSize() const
Node* LoadingBar::getVirtualRenderer()
void LoadingBar::barRendererScaleChangedWithSize()
void LoadingBar::setScale9Scale()
std::string LoadingBar::getDescription() const
Widget* LoadingBar::createCloneInstance()
void LoadingBar::copySpecialProperties(Widget *widget)
PageView* PageView::create()
void PageView::onEnter()
bool PageView::init()
void PageView::addWidgetToPage(Widget *widget, ssize_t pageIdx, bool forceCreate)
Layout* PageView::createPage()
void PageView::addPage(Layout* page)
void PageView::insertPage(Layout* page, int idx)
void PageView::removePage(Layout* page)
void PageView::removePageAtIndex(ssize_t index)
void PageView::removeAllPages()
void PageView::updateBoundaryPages()
ssize_t PageView::getPageCount()const
float PageView::getPositionXByIndex(ssize_t idx)const
float PageView::getPositionYByIndex(ssize_t idx)const
void PageView::onSizeChanged()
void PageView::updateAllPagesSize()
void PageView::updateAllPagesPosition()
void PageView::setCurPageIndex( ssize_t index )
void PageView::scrollToPage(ssize_t idx)
void PageView::setDirection(cocos2d::ui::PageView::Direction direction)
PageView::Direction PageView::getDirection()const
void PageView::update(float dt)
bool PageView::onTouchBegan(Touch *touch, Event *unusedEvent)
void PageView::onTouchMoved(Touch *touch, Event *unusedEvent)
void PageView::onTouchEnded(Touch *touch, Event *unusedEvent)
void PageView::onTouchCancelled(Touch *touch, Event *unusedEvent)
void PageView::doLayout()
void PageView::movePages(Vec2 offset)
bool PageView::scrollPages(Vec2 touchOffset)
void PageView::handleMoveLogic(Touch *touch)
void PageView::setCustomScrollThreshold(float threshold)
float PageView::getCustomScrollThreshold()const
void PageView::setUsingCustomScrollThreshold(bool flag)
bool PageView::isUsingCustomScrollThreshold()const
void PageView::handleReleaseLogic(Touch *touch)
void PageView::interceptTouchEvent(TouchEventType event, Widget *sender, Touch *touch)
void PageView::pageTurningEvent()
void PageView::addEventListenerPageView(Ref *target, SEL_PageViewEvent selector)
void PageView::addEventListener(const ccPageViewCallback& callback)
ssize_t PageView::getCurPageIndex() const
Vector<Layout*>& PageView::getPages()
Layout* PageView::getPage(ssize_t index)
std::string PageView::getDescription() const
Widget* PageView::createCloneInstance()
void PageView::copyClonedWidgetChildren(Widget* model)
void PageView::copySpecialProperties(Widget *widget)
RadioButton* RadioButton::create()
void RadioButton::dispatchSelectChangedEvent(bool selected)
void RadioButton::addEventListener(const ccRadioButtonCallback& callback)
void RadioButton::releaseUpEvent()
std::string RadioButton::getDescription() const
Widget* RadioButton::createCloneInstance()
void RadioButton::copySpecialProperties(Widget *widget)
RadioButtonGroup* RadioButtonGroup::create()
void RadioButtonGroup::addEventListener(const ccRadioButtonGroupCallback& callback)
void RadioButtonGroup::addRadioButton(RadioButton* radioButton)
void RadioButtonGroup::removeRadioButton(RadioButton* radioButton)
void RadioButtonGroup::removeAllRadioButtons()
ssize_t RadioButtonGroup::getNumberOfRadioButtons() const
RadioButton* RadioButtonGroup::getRadioButtonByIndex(int index) const
void RadioButtonGroup::deselect()
int RadioButtonGroup::getSelectedButtonIndex() const
void RadioButtonGroup::setSelectedButton(int index)
void RadioButtonGroup::setSelectedButton(RadioButton* radioButton)
void RadioButtonGroup::setSelectedButtonWithoutEvent(int index)
void RadioButtonGroup::setSelectedButtonWithoutEvent(RadioButton* radioButton)
std::string RadioButtonGroup::getDescription() const
void RadioButtonGroup::setAllowedNoSelection(bool allowedNoSelection)
bool RadioButtonGroup::isAllowedNoSelection() const
Widget* RadioButtonGroup::createCloneInstance()
void RadioButtonGroup::copySpecialProperties(Widget *widget)
void RadioButtonGroup::onChangedRadioButtonSelect(RadioButton* radioButton)
RelativeBox* RelativeBox::create()
RelativeBox* RelativeBox::create(const cocos2d::Size &size)
bool RelativeBox::init()
bool RelativeBox::initWithSize(const Size& size)
bool RichElement::init(int tag, const Color3B &color, GLubyte opacity)
RichElementText* RichElementText::create(int tag, const Color3B &color, GLubyte opacity, const std::string& text, const std::string& fontName, float fontSize)
bool RichElementText::init(int tag, const Color3B &color, GLubyte opacity, const std::string& text, const std::string& fontName, float fontSize)
RichElementImage* RichElementImage::create(int tag, const Color3B &color, GLubyte opacity, const std::string& filePath)
bool RichElementImage::init(int tag, const Color3B &color, GLubyte opacity, const std::string& filePath)
RichElementCustomNode* RichElementCustomNode::create(int tag, const Color3B &color, GLubyte opacity, cocos2d::Node *customNode)
bool RichElementCustomNode::init(int tag, const Color3B &color, GLubyte opacity, cocos2d::Node *customNode)
RichText* RichText::create()
bool RichText::init()
void RichText::initRenderer()
void RichText::insertElement(RichElement *element, int index)
void RichText::pushBackElement(RichElement *element)
void RichText::removeElement(int index)
void RichText::removeElement(RichElement *element)
void RichText::formatText()
void RichText::handleTextRenderer(const std::string& text, const std::string& fontName, float fontSize, const Color3B &color, GLubyte opacity)
void RichText::handleImageRenderer(const std::string& fileParh, const Color3B &color, GLubyte opacity)
void RichText::handleCustomRenderer(cocos2d::Node *renderer)
void RichText::addNewLine()
void RichText::formarRenderers()
void RichText::adaptRenderers()
void RichText::pushToContainer(cocos2d::Node *renderer)
void RichText::setVerticalSpace(float space)
void RichText::ignoreContentAdaptWithSize(bool ignore)
std::string RichText::getDescription() const
ScrollView* ScrollView::create()
void ScrollView::onEnter()
bool ScrollView::init()
void ScrollView::initRenderer()
void ScrollView::onSizeChanged()
void ScrollView::setInnerContainerSize(const Size &size)
const Size& ScrollView::getInnerContainerSize() const
void ScrollView::setInnerContainerPosition(const Vec2 &position)
const Vec2 ScrollView::getInnerContainerPosition() const
void ScrollView::addChild(Node* child)
void ScrollView::addChild(Node * child, int localZOrder)
void ScrollView::addChild(Node *child, int zOrder, int tag)
void ScrollView::addChild(Node* child, int zOrder, const std::string &name)
void ScrollView::removeAllChildren()
void ScrollView::removeAllChildrenWithCleanup(bool cleanup)
void ScrollView::removeChild(Node* child, bool cleanup)
Vector<Node*>& ScrollView::getChildren()
const Vector<Node*>& ScrollView::getChildren() const
ssize_t ScrollView::getChildrenCount() const
Node* ScrollView::getChildByTag(int tag) const
Node* ScrollView::getChildByName(const std::string& name)const
void ScrollView::moveChildren(float offsetX, float offsetY)
void ScrollView::moveChildrenToPosition(const Vec2& position)
void ScrollView::updateScrollBar(const Vec2& outOfBoundary)
bool ScrollView::startBounceBackIfNeeded()
Vec2 ScrollView::getHowMuchOutOfBoundary(const Vec2& addition) const
void ScrollView::processAutoScrolling(float deltaTime)
bool ScrollView::isOutOfBoundary(MoveDirection dir) const
bool ScrollView::isOutOfBoundaryTopOrBottom() const
bool ScrollView::isOutOfBoundaryLeftOrRight() const
void ScrollView::startAutoScroll(const Vec2& deltaMove, float duration, bool attenuated)
void ScrollView::startAutoScrollChildrenWithDestination(const Vec2& des, float second, bool attenuated)
void ScrollView::jumpToDestination(const Vec2 &des)
void ScrollView::startInertiaScroll()
void ScrollView::processInertiaScrolling(float dt)
bool ScrollView::scrollChildren(float touchOffsetX, float touchOffsetY)
void ScrollView::scrollToBottom(float second, bool attenuated)
void ScrollView::scrollToTop(float second, bool attenuated)
void ScrollView::scrollToLeft(float second, bool attenuated)
void ScrollView::scrollToRight(float second, bool attenuated)
void ScrollView::scrollToTopLeft(float second, bool attenuated)
void ScrollView::scrollToTopRight(float second, bool attenuated)
void ScrollView::scrollToBottomLeft(float second, bool attenuated)
void ScrollView::scrollToBottomRight(float second, bool attenuated)
void ScrollView::scrollToPercentVertical(float percent, float second, bool attenuated)
void ScrollView::scrollToPercentHorizontal(float percent, float second, bool attenuated)
void ScrollView::scrollToPercentBothDirection(const Vec2& percent, float second, bool attenuated)
void ScrollView::jumpToBottom()
void ScrollView::jumpToTop()
void ScrollView::jumpToLeft()
void ScrollView::jumpToRight()
void ScrollView::jumpToTopLeft()
void ScrollView::jumpToTopRight()
void ScrollView::jumpToBottomLeft()
void ScrollView::jumpToBottomRight()
void ScrollView::jumpToPercentVertical(float percent)
void ScrollView::jumpToPercentHorizontal(float percent)
void ScrollView::jumpToPercentBothDirection(const Vec2& percent)
void ScrollView::startRecordSlidAction()
void ScrollView::endRecordSlidAction()
void ScrollView::handlePressLogic(Touch *touch)
void ScrollView::handleMoveLogic(Touch *touch)
void ScrollView::handleReleaseLogic(Touch *touch)
bool ScrollView::onTouchBegan(Touch *touch, Event *unusedEvent)
void ScrollView::onTouchMoved(Touch *touch, Event *unusedEvent)
void ScrollView::onTouchEnded(Touch *touch, Event *unusedEvent)
void ScrollView::onTouchCancelled(Touch *touch, Event *unusedEvent)
void ScrollView::update(float dt)
void ScrollView::interceptTouchEvent(Widget::TouchEventType event, Widget *sender,Touch* touch)
void ScrollView::processScrollEvent(MoveDirection dir, bool bounce)
void ScrollView::processScrollingEvent()
void ScrollView::dispatchEvent(ScrollviewEventType scrollEventType, EventType eventType)
void ScrollView::addEventListenerScrollView(Ref *target, SEL_ScrollViewEvent selector)
void ScrollView::addEventListener(const ccScrollViewCallback& callback)
void ScrollView::setDirection(Direction dir)
ScrollView::Direction ScrollView::getDirection()const
void ScrollView::setBounceEnabled(bool enabled)
bool ScrollView::isBounceEnabled() const
void ScrollView::setInertiaScrollEnabled(bool enabled)
bool ScrollView::isInertiaScrollEnabled() const
void ScrollView::setScrollBarEnabled(bool enabled)
bool ScrollView::isScrollBarEnabled() const
void ScrollView::setScrollBarPositionFromCorner(const Vec2& positionFromCorner)
void ScrollView::setScrollBarPositionFromCornerForVertical(const Vec2& positionFromCorner)
Vec2 ScrollView::getScrollBarPositionFromCornerForVertical() const
void ScrollView::setScrollBarPositionFromCornerForHorizontal(const Vec2& positionFromCorner)
Vec2 ScrollView::getScrollBarPositionFromCornerForHorizontal() const
void ScrollView::setScrollBarWidth(float width)
float ScrollView::getScrollBarWidth() const
void ScrollView::setScrollBarColor(const Color3B& color)
const Color3B& ScrollView::getScrollBarColor() const
void ScrollView::setScrollBarOpacity(GLubyte opacity)
GLubyte ScrollView::getScrollBarOpacity() const
void ScrollView::setScrollBarAutoHideEnabled(bool autoHideEnabled)
bool ScrollView::isScrollBarAutoHideEnabled() const
void ScrollView::setScrollBarAutoHideTime(float autoHideTime)
float ScrollView::getScrollBarAutoHideTime() const
Layout* ScrollView::getInnerContainer()const
void ScrollView::setLayoutType(Type type)
Layout::Type ScrollView::getLayoutType() const
void ScrollView::doLayout()
std::string ScrollView::getDescription() const
Widget* ScrollView::createCloneInstance()
void ScrollView::copyClonedWidgetChildren(Widget* model)
void ScrollView::copySpecialProperties(Widget *widget)
void ScrollView::initScrollBar()
void ScrollView::removeScrollBar()
Widget* ScrollView::findNextFocusedWidget(cocos2d::ui::Widget::FocusDirection direction, cocos2d::ui::Widget *current)
ScrollViewBar* ScrollViewBar::create(ScrollView* parent, ScrollView::Direction direction)
bool ScrollViewBar::init()
void ScrollViewBar::setPositionFromCorner(const Vec2& positionFromCorner)
Vec2 ScrollViewBar::getPositionFromCorner() const
void ScrollViewBar::setWidth(float width)
void ScrollViewBar::setAutoHideEnabled(bool autoHideEnabled)
float ScrollViewBar::getWidth() const
void ScrollViewBar::updateLength(float length)
void ScrollViewBar::onEnter()
void ScrollViewBar::update(float deltaTime)
void ScrollViewBar::processAutoHide(float deltaTime)
void ScrollViewBar::onTouchBegan()
void ScrollViewBar::onTouchEnded()
void ScrollViewBar::onScrolled(const Vec2& outOfBoundary)
float ScrollViewBar::calculateLength(float innerContainerMeasure, float scrollViewMeasure, float outOfBoundaryValue)
Vec2 ScrollViewBar::calculatePosition(float innerContainerMeasure, float scrollViewMeasure, float innerContainerPosition, float outOfBoundaryValue, float length)
Slider* Slider::create()
bool Slider::init()
void Slider::initRenderer()
void Slider::loadBarTexture(const std::string& fileName, TextureResType texType)
void Slider::loadBarTexture(SpriteFrame* spriteframe)
void Slider::setupBarTexture()
void Slider::loadProgressBarTexture(const std::string& fileName, TextureResType texType)
void Slider::loadProgressBarTexture(SpriteFrame* spriteframe)
void Slider::setupProgressBarTexture()
void Slider::setScale9Enabled(bool able)
bool Slider::isScale9Enabled()const
void Slider::ignoreContentAdaptWithSize(bool ignore)
void Slider::setCapInsets(const Rect &capInsets)
void Slider::setCapInsetsBarRenderer(const Rect &capInsets)
const Rect& Slider::getCapInsetsBarRenderer()const
void Slider::setCapInsetProgressBarRebderer(const Rect &capInsets)
const Rect& Slider::getCapInsetsProgressBarRebderer()const
void Slider::loadSlidBallTextureNormal(const std::string& normal,TextureResType texType)
void Slider::loadSlidBallTextureNormal(SpriteFrame* spriteframe)
void Slider::loadSlidBallTexturePressed(const std::string& pressed,TextureResType texType)
void Slider::loadSlidBallTexturePressed(SpriteFrame* spriteframe)
void Slider::loadSlidBallTextureDisabled(const std::string& disabled,TextureResType texType)
void Slider::loadSlidBallTextureDisabled(SpriteFrame* spriteframe)
void Slider::setMaxPercent(int percent)
int Slider::getMaxPercent()const
void Slider::setPercent(int percent)
bool Slider::hitTest(const cocos2d::Vec2 &pt, const Camera *camera, Vec3 *p) const
bool Slider::onTouchBegan(Touch *touch, Event *unusedEvent)
void Slider::onTouchMoved(Touch *touch, Event *unusedEvent)
void Slider::onTouchEnded(Touch *touch, Event *unusedEvent)
void Slider::onTouchCancelled(Touch *touch, Event *unusedEvent)
float Slider::getPercentWithBallPos(const Vec2 &pt) const
void Slider::addEventListenerSlider(Ref *target, SEL_SlidPercentChangedEvent selector)
void Slider::addEventListener(const ccSliderCallback& callback)
void Slider::percentChangedEvent(EventType event)
int Slider::getPercent()const
void Slider::onSizeChanged()
void Slider::adaptRenderers()
Size Slider::getVirtualRendererSize() const
Node* Slider::getVirtualRenderer()
void Slider::barRendererScaleChangedWithSize()
void Slider::progressBarRendererScaleChangedWithSize()
void Slider::onPressStateChangedToNormal()
void Slider::onPressStateChangedToPressed()
void Slider::onPressStateChangedToDisabled()
void Slider::setZoomScale(float scale)
float Slider::getZoomScale()const
std::string Slider::getDescription() const
Widget* Slider::createCloneInstance()
void Slider::copySpecialProperties(Widget *widget)
Text* Text::create()
bool Text::init()
Text* Text::create(const std::string &textContent, const std::string &fontName, float fontSize)
bool Text::init(const std::string &textContent, const std::string &fontName, float fontSize)
void Text::initRenderer()
void Text::setString(const std::string &text)
const std::string& Text::getString() const
ssize_t Text::getStringLength()const
void Text::setFontSize(float size)
float Text::getFontSize()const
void Text::setFontName(const std::string& name)
const std::string& Text::getFontName()const
Text::Type Text::getType() const
void Text::setTextAreaSize(const Size &size)
const Size& Text::getTextAreaSize()const
void Text::setTextHorizontalAlignment(TextHAlignment alignment)
TextHAlignment Text::getTextHorizontalAlignment()const
void Text::setTextVerticalAlignment(TextVAlignment alignment)
TextVAlignment Text::getTextVerticalAlignment()const
void Text::setTextColor(const Color4B color)
const Color4B& Text::getTextColor() const
void Text::setTouchScaleChangeEnabled(bool enable)
bool Text::isTouchScaleChangeEnabled()const
void Text::onPressStateChangedToNormal()
void Text::onPressStateChangedToPressed()
void Text::onPressStateChangedToDisabled()
void Text::onSizeChanged()
void Text::adaptRenderers()
Size Text::getVirtualRendererSize() const
Size Text::getAutoRenderSize()
Node* Text::getVirtualRenderer()
void Text::labelScaleChangedWithSize()
std::string Text::getDescription() const
void Text::enableShadow(const Color4B& shadowColor,const Size &offset, int blurRadius)
void Text::enableOutline(const Color4B& outlineColor,int outlineSize)
void Text::enableGlow(const Color4B& glowColor)
void Text::disableEffect()
void Text::disableEffect(LabelEffect effect)
Widget* Text::createCloneInstance()
void Text::copySpecialProperties(Widget *widget)
TextAtlas* TextAtlas::create()
void TextAtlas::initRenderer()
const std::string &startCharMap)
void TextAtlas::setProperty(const std::string& stringValue, const std::string& charMapFile, int itemWidth, int itemHeight, const std::string& startCharMap)
void TextAtlas::setString(const std::string& value)
const std::string& TextAtlas::getString() const
ssize_t TextAtlas::getStringLength()const
void TextAtlas::onSizeChanged()
void TextAtlas::adaptRenderers()
Size TextAtlas::getVirtualRendererSize() const
Node* TextAtlas::getVirtualRenderer()
void TextAtlas::labelAtlasScaleChangedWithSize()
std::string TextAtlas::getDescription() const
Widget* TextAtlas::createCloneInstance()
void TextAtlas::copySpecialProperties(Widget *widget)
TextBMFont* TextBMFont::create()
TextBMFont* TextBMFont::create(const std::string &text, const std::string &filename)
void TextBMFont::initRenderer()
void TextBMFont::setFntFile(const std::string& fileName)
void TextBMFont::setString(const std::string& value)
const std::string& TextBMFont::getString()const
ssize_t TextBMFont::getStringLength()const
void TextBMFont::onSizeChanged()
void TextBMFont::adaptRenderers()
Size TextBMFont::getVirtualRendererSize() const
Node* TextBMFont::getVirtualRenderer()
void TextBMFont::labelBMFontScaleChangedWithSize()
std::string TextBMFont::getDescription() const
Widget* TextBMFont::createCloneInstance()
void TextBMFont::copySpecialProperties(Widget *widget)
UICCTextField * UICCTextField::create(const std::string& placeholder, const std::string& fontName, float fontSize)
void UICCTextField::onEnter()
bool UICCTextField::onTextFieldAttachWithIME(TextFieldTTF *pSender)
bool UICCTextField::onTextFieldInsertText(TextFieldTTF *pSender, const char *text, size_t nLen)
bool UICCTextField::onTextFieldDeleteBackward(TextFieldTTF *pSender, const char *delText, size_t nLen)
bool UICCTextField::onTextFieldDetachWithIME(TextFieldTTF *pSender)
void UICCTextField::insertText(const char*  text, size_t len)
void UICCTextField::deleteBackward()
void UICCTextField::openIME()
void UICCTextField::closeIME()
void UICCTextField::setMaxLengthEnabled(bool enable)
bool UICCTextField::isMaxLengthEnabled()const
void UICCTextField::setMaxLength(int length)
int UICCTextField::getMaxLength()const
int UICCTextField::getCharCount()const
void UICCTextField::setPasswordEnabled(bool enable)
bool UICCTextField::isPasswordEnabled()const
void UICCTextField::setPasswordStyleText(const std::string& styleText)
void UICCTextField::setPasswordText(const std::string& text)
void UICCTextField::setAttachWithIME(bool attach)
bool UICCTextField::getAttachWithIME()const
void UICCTextField::setDetachWithIME(bool detach)
bool UICCTextField::getDetachWithIME()const
void UICCTextField::setInsertText(bool insert)
bool UICCTextField::getInsertText()const
void UICCTextField::setDeleteBackward(bool deleteBackward)
bool UICCTextField::getDeleteBackward()const
TextField* TextField::create()
TextField* TextField::create(const std::string &placeholder, const std::string &fontName, int fontSize)
bool TextField::init()
void TextField::onEnter()
void TextField::initRenderer()
void TextField::setTouchSize(const Size &size)
void TextField::setTouchAreaEnabled(bool enable)
bool TextField::hitTest(const Vec2 &pt, const Camera* camera, Vec3 *p) const
Size TextField::getTouchSize()const
void TextField::setString(const std::string& text)
void TextField::setPlaceHolder(const std::string& value)
const std::string& TextField::getPlaceHolder()const
const Color4B& TextField::getPlaceHolderColor()const
void TextField::setPlaceHolderColor(const cocos2d::Color3B &color)
void TextField::setPlaceHolderColor(const cocos2d::Color4B &color)
const Color4B& TextField::getTextColor()const
void TextField::setTextColor(const cocos2d::Color4B &textColor)
void TextField::setFontSize(int size)
int TextField::getFontSize()const
void TextField::setFontName(const std::string& name)
const std::string& TextField::getFontName()const
void TextField::didNotSelectSelf()
const std::string& TextField::getString()const
int TextField::getStringLength() const
bool TextField::onTouchBegan(Touch *touch, Event *unusedEvent)
void TextField::setMaxLengthEnabled(bool enable)
bool TextField::isMaxLengthEnabled()const
void TextField::setMaxLength(int length)
int TextField::getMaxLength()const
void TextField::setPasswordEnabled(bool enable)
bool TextField::isPasswordEnabled()const
void TextField::setPasswordStyleText(const char *styleText)
const char* TextField::getPasswordStyleText()const
void TextField::update(float dt)
bool TextField::getAttachWithIME()const
void TextField::setAttachWithIME(bool attach)
bool TextField::getDetachWithIME()const
void TextField::setDetachWithIME(bool detach)
bool TextField::getInsertText()const
void TextField::setInsertText(bool insertText)
bool TextField::getDeleteBackward()const
void TextField::setDeleteBackward(bool deleteBackward)
void TextField::attachWithIMEEvent()
void TextField::detachWithIMEEvent()
void TextField::insertTextEvent()
void TextField::deleteBackwardEvent()
void TextField::addEventListenerTextField(Ref *target, SEL_TextFieldEvent selecor)
void TextField::addEventListener(const ccTextFieldCallback& callback)
void TextField::onSizeChanged()
void TextField::adaptRenderers()
void TextField::textfieldRendererScaleChangedWithSize()
Size TextField::getAutoRenderSize()
Size TextField::getVirtualRendererSize() const
Node* TextField::getVirtualRenderer()
std::string TextField::getDescription() const
void TextField::attachWithIME()
Widget* TextField::createCloneInstance()
void TextField::copySpecialProperties(Widget *widget)
void TextField::setTextAreaSize(const Size &size)
void TextField::setTextHorizontalAlignment(TextHAlignment alignment)
TextHAlignment TextField::getTextHorizontalAlignment() const
void TextField::setTextVerticalAlignment(TextVAlignment alignment)
TextVAlignment TextField::getTextVerticalAlignment() const
VBox* VBox::create()
VBox* VBox::create(const cocos2d::Size &size)
bool VBox::init()
bool VBox::initWithSize(const Size& size)
void setVideoURLJNI(int index,int videoSource,const std::string& videoUrl)
void VideoPlayer::setFileName(const std::string& fileName)
void VideoPlayer::setURL(const std::string& videoUrl)
void VideoPlayer::draw(Renderer* renderer, const Mat4 &transform, uint32_t flags)
void VideoPlayer::setFullScreenEnabled(bool enabled)
bool VideoPlayer::isFullScreenEnabled()const
void VideoPlayer::setKeepAspectRatioEnabled(bool enable)
void VideoPlayer::drawDebugData()
void VideoPlayer::play()
void VideoPlayer::pause()
void VideoPlayer::resume()
void VideoPlayer::stop()
void VideoPlayer::seekTo(float sec)
bool VideoPlayer::isPlaying() const
void VideoPlayer::setVisible(bool visible)
void VideoPlayer::addEventListener(const VideoPlayer::ccVideoPlayerCallback& callback)
void VideoPlayer::onPlayEvent(int event)
cocos2d::ui::Widget* VideoPlayer::createCloneInstance()
void VideoPlayer::copySpecialProperties(Widget *widget)
static std::string getFixedBaseUrl(const std::string& baseUrl)
void setJavascriptInterfaceSchemeJNI(const int index, const std::string &scheme)
void loadDataJNI(const int index, const std::string &data, const std::string &MIMEType, const std::string &encoding, const std::string &baseURL)
void loadHTMLStringJNI(const int index, const std::string &string, const std::string &baseURL)
void loadUrlJNI(const int index, const std::string &url)
void loadFileJNI(const int index, const std::string &filePath)
void evaluateJSJNI(const int index, const std::string &js)
std::string getUrlStringByFileName(const std::string &fileName)
WebViewImpl::WebViewImpl(WebView *webView) : _viewTag(-1), _webView(webView)
void WebViewImpl::loadData(const Data &data, const std::string &MIMEType, const std::string &encoding, const std::string &baseURL)
void WebViewImpl::loadHTMLString(const std::string &string, const std::string &baseURL)
void WebViewImpl::loadURL(const std::string &url)
void WebViewImpl::loadFile(const std::string &fileName)
void WebViewImpl::stopLoading()
void WebViewImpl::reload()
bool WebViewImpl::canGoBack()
bool WebViewImpl::canGoForward()
void WebViewImpl::goBack()
void WebViewImpl::goForward()
void WebViewImpl::setJavascriptInterfaceScheme(const std::string &scheme)
void WebViewImpl::evaluateJS(const std::string &js)
void WebViewImpl::setScalesPageToFit(const bool scalesPageToFit)
bool WebViewImpl::shouldStartLoading(const int viewTag, const std::string &url)
void WebViewImpl::draw(cocos2d::Renderer *renderer, cocos2d::Mat4 const &transform, uint32_t flags)
void WebViewImpl::setVisible(bool visible)
class Widget::FocusNavigationController
void Widget::FocusNavigationController::onKeypadKeyPressed(EventKeyboard::KeyCode  keyCode, Event *event)
void Widget::FocusNavigationController::enableFocusNavigation(bool flag)
void Widget::FocusNavigationController::setFirstFocsuedWidget(Widget* widget)
void Widget::FocusNavigationController::addKeyboardEventListener()
void Widget::FocusNavigationController::removeKeyboardEventListener()
void Widget::cleanupWidget()
Widget* Widget::create()
bool Widget::init()
void Widget::onEnter()
void Widget::onExit()
void Widget::visit(Renderer *renderer, const Mat4 &parentTransform, uint32_t parentFlags)
Widget* Widget::getWidgetParent()
void Widget::setEnabled(bool enabled)
void Widget::initRenderer()
LayoutComponent* Widget::getOrCreateLayoutComponent()
void Widget::setContentSize(const cocos2d::Size &contentSize)
void Widget::setSize(const Size &size)
void Widget::setSizePercent(const Vec2 &percent)
void Widget::updateSizeAndPosition()
void Widget::updateSizeAndPosition(const cocos2d::Size &parentSize)
void Widget::setSizeType(SizeType type)
Widget::SizeType Widget::getSizeType() const
void Widget::ignoreContentAdaptWithSize(bool ignore)
bool Widget::isIgnoreContentAdaptWithSize() const
const Size& Widget::getSize() const
const Size& Widget::getCustomSize() const
const Vec2& Widget::getSizePercent()
Vec2 Widget::getWorldPosition()const
Node* Widget::getVirtualRenderer()
void Widget::onSizeChanged()
Size Widget::getVirtualRendererSize() const
void Widget::updateContentSizeWithTextureSize(const cocos2d::Size &size)
void Widget::setTouchEnabled(bool enable)
bool Widget::isTouchEnabled() const
bool Widget::isHighlighted() const
void Widget::setHighlighted(bool hilight)
void Widget::setBright(bool bright)
void Widget::setBrightStyle(BrightStyle style)
void Widget::onPressStateChangedToNormal()
void Widget::onPressStateChangedToPressed()
void Widget::onPressStateChangedToDisabled()
void Widget::updateChildrenDisplayedRGBA()
Widget* Widget::getAncensterWidget(Node* node)
bool Widget::isAncestorsVisible(Node* node)
bool Widget::isAncestorsEnabled()
void Widget::setPropagateTouchEvents(bool isPropagate)
bool Widget::isPropagateTouchEvents()const
void Widget::setSwallowTouches(bool swallow)
bool Widget::isSwallowTouches()const
bool Widget::onTouchBegan(Touch *touch, Event *unusedEvent)
void Widget::propagateTouchEvent(cocos2d::ui::Widget::TouchEventType event, cocos2d::ui::Widget *sender, cocos2d::Touch *touch)
void Widget::onTouchMoved(Touch *touch, Event *unusedEvent)
void Widget::onTouchEnded(Touch *touch, Event *unusedEvent)
void Widget::onTouchCancelled(Touch *touch, Event *unusedEvent)
void Widget::pushDownEvent()
void Widget::moveEvent()
void Widget::releaseUpEvent()
void Widget::cancelUpEvent()
void Widget::addTouchEventListener(Ref *target, SEL_TouchEvent selector)
void Widget::addTouchEventListener(const ccWidgetTouchCallback& callback)
void Widget::addClickEventListener(const ccWidgetClickCallback &callback)
void Widget::addCCSEventListener(const ccWidgetEventCallback &callback)
bool Widget::hitTest(const Vec2 &pt, const Camera* camera, Vec3 *p) const
bool Widget::isClippingParentContainsPoint(const Vec2 &pt)
void Widget::interceptTouchEvent(cocos2d::ui::Widget::TouchEventType event, cocos2d::ui::Widget *sender, Touch *touch)
void Widget::setPosition(const Vec2 &pos)
void Widget::setPositionPercent(const Vec2 &percent)
void Widget::setPositionType(PositionType type)
Widget::PositionType Widget::getPositionType() const
bool Widget::isBright() const
bool Widget::isEnabled() const
float Widget::getLeftBoundary() const
float Widget::getBottomBoundary() const
float Widget::getRightBoundary() const
float Widget::getTopBoundary() const
const Vec2& Widget::getTouchBeganPosition()const
const Vec2& Widget::getTouchMovePosition()const
const Vec2& Widget::getTouchEndPosition()const
void Widget::setLayoutParameter(LayoutParameter *parameter)
LayoutParameter* Widget::getLayoutParameter()const
LayoutParameter* Widget::getLayoutParameter(LayoutParameter::Type type)
std::string Widget::getDescription() const
Widget* Widget::clone()
Widget* Widget::createCloneInstance()
void Widget::copyClonedWidgetChildren(Widget* model)
GLProgramState* Widget::getNormalGLProgramState()const
GLProgramState* Widget::getGrayGLProgramState()const
void Widget::copySpecialProperties(Widget* model)
void Widget::copyProperties(Widget *widget)
void Widget::setActionTag(int tag)
int Widget::getActionTag()const
void Widget::setFocused(bool focus)
bool Widget::isFocused()const
void Widget::setFocusEnabled(bool enable)
bool Widget::isFocusEnabled()const
Widget* Widget::findNextFocusedWidget(FocusDirection direction,  Widget* current)
void Widget::dispatchFocusEvent(cocos2d::ui::Widget *widgetLoseFocus, cocos2d::ui::Widget *widgetGetFocus)
void Widget::requestFocus()
void Widget::onFocusChange(Widget* widgetLostFocus, Widget* widgetGetFocus)
Widget* Widget::getCurrentFocusedWidget()const
void Widget::enableDpadNavigation(bool enable)
bool Widget::isUnifySizeEnabled()const
void Widget::setUnifySizeEnabled(bool enable)
void Widget::setLayoutComponentEnabled(bool enable)
bool Widget::isLayoutComponentEnabled()const
