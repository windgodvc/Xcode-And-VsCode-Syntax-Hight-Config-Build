
(

/****************************************************************************/
// MARK: Lua keywords
/****************************************************************************/
	{
		Identifier = "xcode.lang.lua.identifier";
		Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_[";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_?[]";
            Words = (
                "cc.Animation3D:initWithFile()",
                "cc.Animation3D:init()",
                "cc.Animation3D:getDuration()",
                "cc.Animation3D:create()",
                "cc.Animation3D:constructor()",
                "cc.Animation3D:finalize()",
                "cc.Animate3D:setKeyFrameUserInfo()",
                "cc.Animate3D:getSpeed()",
                "cc.Animate3D:setQuality()",
                "cc.Animate3D:setWeight()",
                "cc.Animate3D:removeFromMap()",
                "cc.Animate3D:initWithFrames()",
                "cc.Animate3D:getOriginInterval()",
                "cc.Animate3D:setSpeed()",
                "cc.Animate3D:init()",
                "cc.Animate3D:setOriginInterval()",
                "cc.Animate3D:getWeight()",
                "cc.Animate3D:getQuality()",
                "cc.Animate3D:create()",
                "cc.Animate3D:getTransitionTime()",
                "cc.Animate3D:createWithFrames()",
                "cc.Animate3D:setTransitionTime()",
                "cc.Animate3D:constructor()",
                "cc.Animate3D:finalize()",
                "cc.TextureCube:reloadTexture()",
                "cc.TextureCube:setTexParameters()",
                "cc.TextureCube:create()",
                "cc.TextureCube:constructor()",
                "cc.TextureCube:finalize()",
                "cc.AttachNode:create()",
                "cc.AttachNode:constructor()",
                "cc.AttachNode:finalize()",
                "cc.BillBoard:getMode()",
                "cc.BillBoard:setMode()",
                "cc.BillBoard:create()",
                "cc.BillBoard:createWithTexture()",
                "cc.BillBoard:constructor()",
                "cc.BillBoard:finalize()",
                "cc.Mesh:setTexture()",
                "cc.Mesh:getTexture()",
                "cc.Mesh:getMaterial()",
                "cc.Mesh:getVertexSizeInBytes()",
                "cc.Mesh:setMaterial()",
                "cc.Mesh:getName()",
                "cc.Mesh:getMeshVertexAttribute()",
                "cc.Mesh:calculateAABB()",
                "cc.Mesh:draw()",
                "cc.Mesh:getBlendFunc()",
                "cc.Mesh:setName()",
                "cc.Mesh:setMeshIndexData()",
                "cc.Mesh:getMeshVertexAttribCount()",
                "cc.Mesh:setBlendFunc()",
                "cc.Mesh:setForce2DQueue()",
                "cc.Mesh:setSkin()",
                "cc.Mesh:isVisible()",
                "cc.Mesh:setGLProgramState()",
                "cc.Mesh:setVisible()",
                "cc.Mesh:constructor()",
                "cc.Mesh:finalize()",
                "cc.Skeleton3D:removeAllBones()",
                "cc.Skeleton3D:addBone()",
                "cc.Skeleton3D:getBoneByName()",
                "cc.Skeleton3D:getRootBone()",
                "cc.Skeleton3D:updateBoneMatrix()",
                "cc.Skeleton3D:getBoneByIndex()",
                "cc.Skeleton3D:getRootCount()",
                "cc.Skeleton3D:getBoneIndex()",
                "cc.Skeleton3D:getBoneCount()",
                "cc.Skeleton3D:constructor()",
                "cc.Skeleton3D:finalize()",
                "cc.Skybox:reload()",
                "cc.Skybox:init()",
                "cc.Skybox:setTexture()",
                "cc.Skybox:create()",
                "cc.Skybox:constructor()",
                "cc.Skybox:finalize()",
                "cc.Sprite3D:setCullFaceEnabled()",
                "cc.Sprite3D:setTexture()",
                "cc.Sprite3D:getLightMask()",
                "cc.Sprite3D:getMaterial()",
                "cc.Sprite3D:setCullFace()",
                "cc.Sprite3D:removeAllAttachNode()",
                "cc.Sprite3D:setMaterial()",
                "cc.Sprite3D:getMesh()",
                "cc.Sprite3D:getMeshCount()",
                "cc.Sprite3D:getMeshByIndex()",
                "cc.Sprite3D:isForceDepthWrite()",
                "cc.Sprite3D:getBlendFunc()",
                "cc.Sprite3D:setLightMask()",
                "cc.Sprite3D:getAttachNode()",
                "cc.Sprite3D:setBlendFunc()",
                "cc.Sprite3D:setForce2DQueue()",
                "cc.Sprite3D:removeAttachNode()",
                "cc.Sprite3D:getSkeleton()",
                "cc.Sprite3D:setForceDepthWrite()",
                "cc.Sprite3D:getMeshByName()",
                "cc.Sprite3D:create()",
                "cc.Sprite3D:finalize()",
                "cc.Sprite3DCache:removeSprite3DData()",
                "cc.Sprite3DCache:removeAllSprite3DData()",
                "cc.Sprite3DCache:destroyInstance()",
                "cc.Sprite3DCache:getInstance()",
                "cc.Sprite3DCache:constructor()",
                "cc.Sprite3DCache:finalize()",
                "cc.Terrain:initHeightMap()",
                "cc.Terrain:setMaxDetailMapAmount()",
                "cc.Terrain:setDrawWire()",
                "cc.Terrain:getHeightData()",
                "cc.Terrain:setDetailMap()",
                "cc.Terrain:resetHeightMap()",
                "cc.Terrain:setLightDir()",
                "cc.Terrain:setAlphaMap()",
                "cc.Terrain:setSkirtHeightRatio()",
                "cc.Terrain:convertToTerrainSpace()",
                "cc.Terrain:initTextures()",
                "cc.Terrain:initProperties()",
                "cc.Terrain:initWithTerrainData()",
                "cc.Terrain:setLODDistance()",
                "cc.Terrain:getTerrainSize()",
                "cc.Terrain:getNormal()",
                "cc.Terrain:reload()",
                "cc.Terrain:getImageHeight()",
                "cc.Terrain:setLightMap()",
                "cc.Terrain:setIsEnableFrustumCull()",
                "cc.Terrain:getMinHeight()",
                "cc.Terrain:getMaxHeight()",
                "cc.Terrain:constructor()",
                "cc.Terrain:finalize()",
                "cc.Bundle3D:load()",
                "cc.Bundle3D:loadSkinData()",
                "cc.Bundle3D:clear()",
                "cc.Bundle3D:loadMaterials()",
                "cc.Bundle3D:loadNodes()",
                "cc.Bundle3D:loadAnimationData()",
                "cc.Bundle3D:createBundle()",
                "cc.Bundle3D:destroyBundle()",
                "cc.Bundle3D:constructor()",
                "cc.Bundle3D:finalize()",
                "ccexp.AudioProfile:constructor()",
                "ccexp.AudioProfile:finalize()",
                "ccexp.AudioEngine:lazyInit()",
                "ccexp.AudioEngine:setCurrentTime()",
                "ccexp.AudioEngine:getVolume()",
                "ccexp.AudioEngine:uncache()",
                "ccexp.AudioEngine:resumeAll()",
                "ccexp.AudioEngine:stopAll()",
                "ccexp.AudioEngine:pause()",
                "ccexp.AudioEngine:end()",
                "ccexp.AudioEngine:getMaxAudioInstance()",
                "ccexp.AudioEngine:getCurrentTime()",
                "ccexp.AudioEngine:setMaxAudioInstance()",
                "ccexp.AudioEngine:isLoop()",
                "ccexp.AudioEngine:pauseAll()",
                "ccexp.AudioEngine:uncacheAll()",
                "ccexp.AudioEngine:setVolume()",
                "ccexp.AudioEngine:preload()",
                "ccexp.AudioEngine:play2d()",
                "ccexp.AudioEngine:getState()",
                "ccexp.AudioEngine:resume()",
                "ccexp.AudioEngine:stop()",
                "ccexp.AudioEngine:getDuration()",
                "ccexp.AudioEngine:setLoop()",
                "ccexp.AudioEngine:getDefaultProfile()",
                "ccexp.AudioEngine:getProfile()",
                "ccexp.AudioEngine:finalize()",
                "cc.Ref:release()",
                "cc.Ref:retain()",
                "cc.Ref:getReferenceCount()",
                "cc.Ref:finalize()",
                "cc.Console:listenOnTCP()",
                "cc.Console:log()",
                "cc.Console:setBindAddress()",
                "cc.Console:stop()",
                "cc.Console:listenOnFileDescriptor()",
                "cc.Console:finalize()",
                "cc.Texture2D:getMaxT()",
                "cc.Texture2D:getStringForFormat()",
                "cc.Texture2D:initWithImage()",
                "cc.Texture2D:getMaxS()",
                "cc.Texture2D:releaseGLTexture()",
                "cc.Texture2D:hasPremultipliedAlpha()",
                "cc.Texture2D:getPixelsHigh()",
                "cc.Texture2D:getBitsPerPixelForFormat()",
                "cc.Texture2D:getName()",
                "cc.Texture2D:initWithString()",
                "cc.Texture2D:setMaxT()",
                "cc.Texture2D:drawInRect()",
                "cc.Texture2D:getContentSize()",
                "cc.Texture2D:setAliasTexParameters()",
                "cc.Texture2D:setAntiAliasTexParameters()",
                "cc.Texture2D:generateMipmap()",
                "cc.Texture2D:getDescription()",
                "cc.Texture2D:getPixelFormat()",
                "cc.Texture2D:setGLProgram()",
                "cc.Texture2D:getContentSizeInPixels()",
                "cc.Texture2D:getPixelsWide()",
                "cc.Texture2D:drawAtPoint()",
                "cc.Texture2D:getGLProgram()",
                "cc.Texture2D:hasMipmaps()",
                "cc.Texture2D:setMaxS()",
                "cc.Texture2D:setDefaultAlphaPixelFormat()",
                "cc.Texture2D:getDefaultAlphaPixelFormat()",
                "cc.Texture2D:constructor()",
                "cc.Texture2D:finalize()",
                "cc.Touch:getPreviousLocationInView()",
                "cc.Touch:getLocation()",
                "cc.Touch:getDelta()",
                "cc.Touch:getStartLocationInView()",
                "cc.Touch:getStartLocation()",
                "cc.Touch:getID()",
                "cc.Touch:setTouchInfo()",
                "cc.Touch:getLocationInView()",
                "cc.Touch:getPreviousLocation()",
                "cc.Touch:constructor()",
                "cc.Touch:finalize()",
                "cc.Event:isStopped()",
                "cc.Event:getType()",
                "cc.Event:getCurrentTarget()",
                "cc.Event:stopPropagation()",
                "cc.Event:constructor()",
                "cc.Event:finalize()",
                "cc.EventTouch:getEventCode()",
                "cc.EventTouch:setEventCode()",
                "cc.EventTouch:constructor()",
                "cc.EventTouch:finalize()",
                "cc.EventKeyboard:constructor()",
                "cc.EventKeyboard:finalize()",
                "cc.Node:addChild()",
                "cc.Node:removeComponent()",
                "cc.Node:getDescription()",
                "cc.Node:setRotationSkewY()",
                "cc.Node:setOpacityModifyRGB()",
                "cc.Node:setCascadeOpacityEnabled()",
                "cc.Node:getChildren()",
                "cc.Node:setOnExitCallback()",
                "cc.Node:pause()",
                "cc.Node:convertToWorldSpaceAR()",
                "cc.Node:isIgnoreAnchorPointForPosition()",
                "cc.Node:getChildByName()",
                "cc.Node:updateDisplayedOpacity()",
                "cc.Node:init()",
                "cc.Node:getCameraMask()",
                "cc.Node:setRotation()",
                "cc.Node:setScaleZ()",
                "cc.Node:setScaleY()",
                "cc.Node:setScaleX()",
                "cc.Node:setRotationSkewX()",
                "cc.Node:setonEnterTransitionDidFinishCallback()",
                "cc.Node:removeAllComponents()",
                "cc.Node:getOpacity()",
                "cc.Node:setCameraMask()",
                "cc.Node:getTag()",
                "cc.Node:getGLProgram()",
                "cc.Node:getNodeToWorldTransform()",
                "cc.Node:getPosition3D()",
                "cc.Node:removeChild()",
                "cc.Node:convertToWorldSpace()",
                "cc.Node:getScene()",
                "cc.Node:getEventDispatcher()",
                "cc.Node:setSkewX()",
                "cc.Node:setGLProgramState()",
                "cc.Node:setOnEnterCallback()",
                "cc.Node:stopActionsByFlags()",
                "cc.Node:setNormalizedPosition()",
                "cc.Node:setonExitTransitionDidStartCallback()",
                "cc.Node:convertTouchToNodeSpace()",
                "cc.Node:removeAllChildrenWithCleanup()",
                "cc.Node:getNodeToParentAffineTransform()",
                "cc.Node:isCascadeOpacityEnabled()",
                "cc.Node:setParent()",
                "cc.Node:getName()",
                "cc.Node:resume()",
                "cc.Node:getRotation3D()",
                "cc.Node:getNodeToParentTransform()",
                "cc.Node:convertTouchToNodeSpaceAR()",
                "cc.Node:convertToNodeSpace()",
                "cc.Node:setPosition()",
                "cc.Node:stopActionByTag()",
                "cc.Node:reorderChild()",
                "cc.Node:ignoreAnchorPointForPosition()",
                "cc.Node:setSkewY()",
                "cc.Node:setPositionZ()",
                "cc.Node:setRotation3D()",
                "cc.Node:setPositionX()",
                "cc.Node:setNodeToParentTransform()",
                "cc.Node:getAnchorPoint()",
                "cc.Node:getNumberOfRunningActions()",
                "cc.Node:updateTransform()",
                "cc.Node:isVisible()",
                "cc.Node:getChildrenCount()",
                "cc.Node:convertToNodeSpaceAR()",
                "cc.Node:addComponent()",
                "cc.Node:runAction()",
                "cc.Node:visit()",
                "cc.Node:isOpacityModifyRGB()",
                "cc.Node:getRotation()",
                "cc.Node:getAnchorPointInPoints()",
                "cc.Node:removeChildByName()",
                "cc.Node:getGLProgramState()",
                "cc.Node:setScheduler()",
                "cc.Node:stopAllActions()",
                "cc.Node:getSkewX()",
                "cc.Node:getSkewY()",
                "cc.Node:getDisplayedColor()",
                "cc.Node:getActionByTag()",
                "cc.Node:setName()",
                "cc.Node:getDisplayedOpacity()",
                "cc.Node:getLocalZOrder()",
                "cc.Node:getScheduler()",
                "cc.Node:getParentToNodeAffineTransform()",
                "cc.Node:getOrderOfArrival()",
                "cc.Node:setActionManager()",
                "cc.Node:setColor()",
                "cc.Node:isRunning()",
                "cc.Node:getParent()",
                "cc.Node:getPositionZ()",
                "cc.Node:getPositionY()",
                "cc.Node:getPositionX()",
                "cc.Node:removeChildByTag()",
                "cc.Node:setPositionY()",
                "cc.Node:getNodeToWorldAffineTransform()",
                "cc.Node:updateDisplayedColor()",
                "cc.Node:setVisible()",
                "cc.Node:getParentToNodeTransform()",
                "cc.Node:isScheduled()",
                "cc.Node:setGlobalZOrder()",
                "cc.Node:setScale()",
                "cc.Node:getChildByTag()",
                "cc.Node:setOrderOfArrival()",
                "cc.Node:getScaleZ()",
                "cc.Node:getScaleY()",
                "cc.Node:getScaleX()",
                "cc.Node:setLocalZOrder()",
                "cc.Node:getWorldToNodeAffineTransform()",
                "cc.Node:setCascadeColorEnabled()",
                "cc.Node:setOpacity()",
                "cc.Node:cleanup()",
                "cc.Node:getComponent()",
                "cc.Node:getContentSize()",
                "cc.Node:stopAllActionsByTag()",
                "cc.Node:getColor()",
                "cc.Node:getBoundingBox()",
                "cc.Node:setEventDispatcher()",
                "cc.Node:getGlobalZOrder()",
                "cc.Node:draw()",
                "cc.Node:setUserObject()",
                "cc.Node:removeFromParentAndCleanup()",
                "cc.Node:setPosition3D()",
                "cc.Node:update()",
                "cc.Node:sortAllChildren()",
                "cc.Node:getWorldToNodeTransform()",
                "cc.Node:setGLProgram()",
                "cc.Node:getScale()",
                "cc.Node:getNormalizedPosition()",
                "cc.Node:getRotationSkewX()",
                "cc.Node:getRotationSkewY()",
                "cc.Node:setTag()",
                "cc.Node:isCascadeColorEnabled()",
                "cc.Node:stopAction()",
                "cc.Node:getActionManager()",
                "cc.Node:create()",
                "cc.Node:constructor()",
                "cc.Node:finalize()",
                "cc.Scene:setCameraOrderDirty()",
                "cc.Scene:render()",
                "cc.Scene:onProjectionChanged()",
                "cc.Scene:initWithSize()",
                "cc.Scene:getDefaultCamera()",
                "cc.Scene:createWithSize()",
                "cc.Scene:create()",
                "cc.Scene:constructor()",
                "cc.Scene:finalize()",
                "cc.GLView:setFrameSize()",
                "cc.GLView:getViewPortRect()",
                "cc.GLView:setContentScaleFactor()",
                "cc.GLView:getContentScaleFactor()",
                "cc.GLView:setIMEKeyboardState()",
                "cc.GLView:setScissorInPoints()",
                "cc.GLView:getViewName()",
                "cc.GLView:isOpenGLReady()",
                "cc.GLView:setCursorVisible()",
                "cc.GLView:end()",
                "cc.GLView:getScaleY()",
                "cc.GLView:getScaleX()",
                "cc.GLView:getVisibleOrigin()",
                "cc.GLView:getFrameSize()",
                "cc.GLView:setFrameZoomFactor()",
                "cc.GLView:getFrameZoomFactor()",
                "cc.GLView:getDesignResolutionSize()",
                "cc.GLView:windowShouldClose()",
                "cc.GLView:swapBuffers()",
                "cc.GLView:setDesignResolutionSize()",
                "cc.GLView:getResolutionPolicy()",
                "cc.GLView:isRetinaDisplay()",
                "cc.GLView:setViewPortInPoints()",
                "cc.GLView:getScissorRect()",
                "cc.GLView:getRetinaFactor()",
                "cc.GLView:setViewName()",
                "cc.GLView:getVisibleRect()",
                "cc.GLView:getVisibleSize()",
                "cc.GLView:isScissorEnabled()",
                "cc.GLView:pollEvents()",
                "cc.GLView:setGLContextAttrs()",
                "cc.GLView:getGLContextAttrs()",
                "cc.GLView:finalize()",
                "cc.Director:pause()",
                "cc.Director:setEventDispatcher()",
                "cc.Director:setContentScaleFactor()",
                "cc.Director:getContentScaleFactor()",
                "cc.Director:getWinSizeInPixels()",
                "cc.Director:getDeltaTime()",
                "cc.Director:setGLDefaultValues()",
                "cc.Director:setActionManager()",
                "cc.Director:setAlphaBlending()",
                "cc.Director:popToRootScene()",
                "cc.Director:loadMatrix()",
                "cc.Director:getNotificationNode()",
                "cc.Director:getWinSize()",
                "cc.Director:getTextureCache()",
                "cc.Director:isSendCleanupToScene()",
                "cc.Director:getVisibleOrigin()",
                "cc.Director:mainLoop()",
                "cc.Director:setDepthTest()",
                "cc.Director:getFrameRate()",
                "cc.Director:getSecondsPerFrame()",
                "cc.Director:resetMatrixStack()",
                "cc.Director:convertToUI()",
                "cc.Director:pushMatrix()",
                "cc.Director:setDefaultValues()",
                "cc.Director:init()",
                "cc.Director:setScheduler()",
                "cc.Director:getMatrix()",
                "cc.Director:startAnimation()",
                "cc.Director:getOpenGLView()",
                "cc.Director:getRunningScene()",
                "cc.Director:setViewport()",
                "cc.Director:stopAnimation()",
                "cc.Director:popToSceneStackLevel()",
                "cc.Director:resume()",
                "cc.Director:isNextDeltaTimeZero()",
                "cc.Director:setClearColor()",
                "cc.Director:end()",
                "cc.Director:setOpenGLView()",
                "cc.Director:convertToGL()",
                "cc.Director:purgeCachedData()",
                "cc.Director:getTotalFrames()",
                "cc.Director:runWithScene()",
                "cc.Director:setNotificationNode()",
                "cc.Director:drawScene()",
                "cc.Director:restart()",
                "cc.Director:popScene()",
                "cc.Director:loadIdentityMatrix()",
                "cc.Director:isDisplayStats()",
                "cc.Director:setProjection()",
                "cc.Director:getConsole()",
                "cc.Director:multiplyMatrix()",
                "cc.Director:getZEye()",
                "cc.Director:setNextDeltaTimeZero()",
                "cc.Director:popMatrix()",
                "cc.Director:getVisibleSize()",
                "cc.Director:getScheduler()",
                "cc.Director:pushScene()",
                "cc.Director:getAnimationInterval()",
                "cc.Director:isPaused()",
                "cc.Director:setDisplayStats()",
                "cc.Director:getEventDispatcher()",
                "cc.Director:replaceScene()",
                "cc.Director:setAnimationInterval()",
                "cc.Director:getActionManager()",
                "cc.Director:getInstance()",
                "cc.Director:finalize()",
                "cc.Timer:getInterval()",
                "cc.Timer:setupTimerWithInterval()",
                "cc.Timer:setInterval()",
                "cc.Timer:update()",
                "cc.Timer:trigger()",
                "cc.Timer:cancel()",
                "cc.Timer:finalize()",
                "cc.Scheduler:setTimeScale()",
                "cc.Scheduler:getTimeScale()",
                "cc.Scheduler:constructor()",
                "cc.Scheduler:finalize()",
                "cc.AsyncTaskPool:stopTasks()",
                "cc.AsyncTaskPool:destoryInstance()",
                "cc.AsyncTaskPool:getInstance()",
                "cc.AsyncTaskPool:constructor()",
                "cc.AsyncTaskPool:finalize()",
                "cc.Action:startWithTarget()",
                "cc.Action:setOriginalTarget()",
                "cc.Action:clone()",
                "cc.Action:getOriginalTarget()",
                "cc.Action:stop()",
                "cc.Action:update()",
                "cc.Action:getTarget()",
                "cc.Action:getFlags()",
                "cc.Action:step()",
                "cc.Action:setTag()",
                "cc.Action:setFlags()",
                "cc.Action:getTag()",
                "cc.Action:setTarget()",
                "cc.Action:isDone()",
                "cc.Action:reverse()",
                "cc.Action:finalize()",
                "cc.FiniteTimeAction:setDuration()",
                "cc.FiniteTimeAction:getDuration()",
                "cc.FiniteTimeAction:finalize()",
                "cc.Speed:setInnerAction()",
                "cc.Speed:getSpeed()",
                "cc.Speed:setSpeed()",
                "cc.Speed:initWithAction()",
                "cc.Speed:getInnerAction()",
                "cc.Speed:create()",
                "cc.Speed:constructor()",
                "cc.Speed:finalize()",
                "cc.Follow:setBoundarySet()",
                "cc.Follow:initWithTarget()",
                "cc.Follow:isBoundarySet()",
                "cc.Follow:create()",
                "cc.Follow:constructor()",
                "cc.Follow:finalize()",
                "cc.SpriteFrame:clone()",
                "cc.SpriteFrame:setRotated()",
                "cc.SpriteFrame:setTexture()",
                "cc.SpriteFrame:getOffset()",
                "cc.SpriteFrame:setRectInPixels()",
                "cc.SpriteFrame:getTexture()",
                "cc.SpriteFrame:getRect()",
                "cc.SpriteFrame:setOffsetInPixels()",
                "cc.SpriteFrame:getRectInPixels()",
                "cc.SpriteFrame:setOriginalSize()",
                "cc.SpriteFrame:getOriginalSizeInPixels()",
                "cc.SpriteFrame:setOriginalSizeInPixels()",
                "cc.SpriteFrame:setOffset()",
                "cc.SpriteFrame:initWithTexture()",
                "cc.SpriteFrame:isRotated()",
                "cc.SpriteFrame:initWithTextureFilename()",
                "cc.SpriteFrame:setRect()",
                "cc.SpriteFrame:getOffsetInPixels()",
                "cc.SpriteFrame:getOriginalSize()",
                "cc.SpriteFrame:create()",
                "cc.SpriteFrame:createWithTexture()",
                "cc.SpriteFrame:constructor()",
                "cc.SpriteFrame:finalize()",
                "cc.AnimationFrame:setSpriteFrame()",
                "cc.AnimationFrame:getUserInfo()",
                "cc.AnimationFrame:setDelayUnits()",
                "cc.AnimationFrame:clone()",
                "cc.AnimationFrame:getSpriteFrame()",
                "cc.AnimationFrame:getDelayUnits()",
                "cc.AnimationFrame:setUserInfo()",
                "cc.AnimationFrame:initWithSpriteFrame()",
                "cc.AnimationFrame:create()",
                "cc.AnimationFrame:constructor()",
                "cc.AnimationFrame:finalize()",
                "cc.Animation:getLoops()",
                "cc.Animation:addSpriteFrame()",
                "cc.Animation:setRestoreOriginalFrame()",
                "cc.Animation:clone()",
                "cc.Animation:getDuration()",
                "cc.Animation:initWithAnimationFrames()",
                "cc.Animation:init()",
                "cc.Animation:setFrames()",
                "cc.Animation:getFrames()",
                "cc.Animation:setLoops()",
                "cc.Animation:setDelayPerUnit()",
                "cc.Animation:addSpriteFrameWithFile()",
                "cc.Animation:getTotalDelayUnits()",
                "cc.Animation:getDelayPerUnit()",
                "cc.Animation:initWithSpriteFrames()",
                "cc.Animation:getRestoreOriginalFrame()",
                "cc.Animation:addSpriteFrameWithTexture()",
                "cc.Animation:create()",
                "cc.Animation:createWithSpriteFrames()",
                "cc.Animation:constructor()",
                "cc.Animation:finalize()",
                "cc.ActionInterval:getAmplitudeRate()",
                "cc.ActionInterval:initWithDuration()",
                "cc.ActionInterval:setAmplitudeRate()",
                "cc.ActionInterval:getElapsed()",
                "cc.ActionInterval:finalize()",
                "cc.Sequence:initWithTwoActions()",
                "cc.Sequence:constructor()",
                "cc.Sequence:finalize()",
                "cc.Repeat:setInnerAction()",
                "cc.Repeat:initWithAction()",
                "cc.Repeat:getInnerAction()",
                "cc.Repeat:create()",
                "cc.Repeat:constructor()",
                "cc.Repeat:finalize()",
                "cc.RepeatForever:setInnerAction()",
                "cc.RepeatForever:initWithAction()",
                "cc.RepeatForever:getInnerAction()",
                "cc.RepeatForever:create()",
                "cc.RepeatForever:constructor()",
                "cc.RepeatForever:finalize()",
                "cc.Spawn:initWithTwoActions()",
                "cc.Spawn:constructor()",
                "cc.Spawn:finalize()",
                "cc.RotateTo:initWithDuration()",
                "cc.RotateTo:create()",
                "cc.RotateTo:constructor()",
                "cc.RotateTo:finalize()",
                "cc.RotateBy:initWithDuration()",
                "cc.RotateBy:create()",
                "cc.RotateBy:constructor()",
                "cc.RotateBy:finalize()",
                "cc.MoveBy:initWithDuration()",
                "cc.MoveBy:create()",
                "cc.MoveBy:constructor()",
                "cc.MoveBy:finalize()",
                "cc.MoveTo:initWithDuration()",
                "cc.MoveTo:create()",
                "cc.MoveTo:constructor()",
                "cc.MoveTo:finalize()",
                "cc.SkewTo:initWithDuration()",
                "cc.SkewTo:create()",
                "cc.SkewTo:constructor()",
                "cc.SkewTo:finalize()",
                "cc.SkewBy:initWithDuration()",
                "cc.SkewBy:create()",
                "cc.SkewBy:constructor()",
                "cc.SkewBy:finalize()",
                "cc.JumpBy:initWithDuration()",
                "cc.JumpBy:create()",
                "cc.JumpBy:constructor()",
                "cc.JumpBy:finalize()",
                "cc.JumpTo:initWithDuration()",
                "cc.JumpTo:create()",
                "cc.JumpTo:constructor()",
                "cc.JumpTo:finalize()",
                "cc.BezierBy:initWithDuration()",
                "cc.BezierBy:constructor()",
                "cc.BezierBy:finalize()",
                "cc.BezierTo:initWithDuration()",
                "cc.BezierTo:constructor()",
                "cc.BezierTo:finalize()",
                "cc.ScaleTo:initWithDuration()",
                "cc.ScaleTo:create()",
                "cc.ScaleTo:constructor()",
                "cc.ScaleTo:finalize()",
                "cc.ScaleBy:create()",
                "cc.ScaleBy:constructor()",
                "cc.ScaleBy:finalize()",
                "cc.Blink:initWithDuration()",
                "cc.Blink:create()",
                "cc.Blink:constructor()",
                "cc.Blink:finalize()",
                "cc.FadeTo:initWithDuration()",
                "cc.FadeTo:create()",
                "cc.FadeTo:constructor()",
                "cc.FadeTo:finalize()",
                "cc.FadeIn:setReverseAction()",
                "cc.FadeIn:create()",
                "cc.FadeIn:constructor()",
                "cc.FadeIn:finalize()",
                "cc.FadeOut:setReverseAction()",
                "cc.FadeOut:create()",
                "cc.FadeOut:constructor()",
                "cc.FadeOut:finalize()",
                "cc.TintTo:initWithDuration()",
                "cc.TintTo:create()",
                "cc.TintTo:constructor()",
                "cc.TintTo:finalize()",
                "cc.TintBy:initWithDuration()",
                "cc.TintBy:create()",
                "cc.TintBy:constructor()",
                "cc.TintBy:finalize()",
                "cc.DelayTime:create()",
                "cc.DelayTime:constructor()",
                "cc.DelayTime:finalize()",
                "cc.Animate:initWithAnimation()",
                "cc.Animate:getAnimation()",
                "cc.Animate:getCurrentFrameIndex()",
                "cc.Animate:setAnimation()",
                "cc.Animate:create()",
                "cc.Animate:constructor()",
                "cc.Animate:finalize()",
                "cc.TargetedAction:getForcedTarget()",
                "cc.TargetedAction:initWithTarget()",
                "cc.TargetedAction:setForcedTarget()",
                "cc.TargetedAction:create()",
                "cc.TargetedAction:constructor()",
                "cc.TargetedAction:finalize()",
                "cc.ActionFloat:initWithDuration()",
                "cc.ActionFloat:create()",
                "cc.ActionFloat:constructor()",
                "cc.ActionFloat:finalize()",
                "cc.Properties:getVariable()",
                "cc.Properties:getString()",
                "cc.Properties:getLong()",
                "cc.Properties:getNamespace()",
                "cc.Properties:getPath()",
                "cc.Properties:getMat4()",
                "cc.Properties:exists()",
                "cc.Properties:setString()",
                "cc.Properties:getId()",
                "cc.Properties:rewind()",
                "cc.Properties:setVariable()",
                "cc.Properties:getBool()",
                "cc.Properties:getColor()",
                "cc.Properties:getType()",
                "cc.Properties:getNextNamespace()",
                "cc.Properties:getInt()",
                "cc.Properties:getVec3()",
                "cc.Properties:getVec2()",
                "cc.Properties:getVec4()",
                "cc.Properties:getNextProperty()",
                "cc.Properties:getFloat()",
                "cc.Properties:getQuaternionFromAxisAngle()",
                "cc.Properties:parseColor()",
                "cc.Properties:parseVec3()",
                "cc.Properties:parseAxisAngle()",
                "cc.Properties:parseVec2()",
                "cc.Properties:parseVec4()",
                "cc.Properties:finalize()",
                "cc.UserDefault:setIntegerForKey()",
                "cc.UserDefault:deleteValueForKey()",
                "cc.UserDefault:getFloatForKey()",
                "cc.UserDefault:getBoolForKey()",
                "cc.UserDefault:setDoubleForKey()",
                "cc.UserDefault:setFloatForKey()",
                "cc.UserDefault:getStringForKey()",
                "cc.UserDefault:setStringForKey()",
                "cc.UserDefault:flush()",
                "cc.UserDefault:getIntegerForKey()",
                "cc.UserDefault:getDoubleForKey()",
                "cc.UserDefault:setBoolForKey()",
                "cc.UserDefault:destroyInstance()",
                "cc.UserDefault:getXMLFilePath()",
                "cc.UserDefault:isXMLFileExist()",
                "cc.UserDefault:finalize()",
                "cc.FileUtils:fullPathForFilename()",
                "cc.FileUtils:getStringFromFile()",
                "cc.FileUtils:setFilenameLookupDictionary()",
                "cc.FileUtils:removeFile()",
                "cc.FileUtils:isAbsolutePath()",
                "cc.FileUtils:renameFile()",
                "cc.FileUtils:loadFilenameLookupDictionaryFromFile()",
                "cc.FileUtils:isPopupNotify()",
                "cc.FileUtils:getValueVectorFromFile()",
                "cc.FileUtils:getSearchPaths()",
                "cc.FileUtils:writeToFile()",
                "cc.FileUtils:getValueMapFromFile()",
                "cc.FileUtils:getFileSize()",
                "cc.FileUtils:getValueMapFromData()",
                "cc.FileUtils:removeDirectory()",
                "cc.FileUtils:setSearchPaths()",
                "cc.FileUtils:writeStringToFile()",
                "cc.FileUtils:setSearchResolutionsOrder()",
                "cc.FileUtils:addSearchResolutionsOrder()",
                "cc.FileUtils:addSearchPath()",
                "cc.FileUtils:writeValueVectorToFile()",
                "cc.FileUtils:isFileExist()",
                "cc.FileUtils:purgeCachedEntries()",
                "cc.FileUtils:fullPathFromRelativeFile()",
                "cc.FileUtils:getSuitableFOpen()",
                "cc.FileUtils:writeValueMapToFile()",
                "cc.FileUtils:getFileExtension()",
                "cc.FileUtils:setWritablePath()",
                "cc.FileUtils:setPopupNotify()",
                "cc.FileUtils:isDirectoryExist()",
                "cc.FileUtils:setDefaultResourceRootPath()",
                "cc.FileUtils:getSearchResolutionsOrder()",
                "cc.FileUtils:createDirectory()",
                "cc.FileUtils:getWritablePath()",
                "cc.FileUtils:destroyInstance()",
                "cc.FileUtils:getInstance()",
                "cc.FileUtils:finalize()",
                "cc.EventAcceleration:finalize()",
                "cc.EventCustom:getEventName()",
                "cc.EventCustom:constructor()",
                "cc.EventCustom:finalize()",
                "cc.EventListener:setEnabled()",
                "cc.EventListener:isEnabled()",
                "cc.EventListener:clone()",
                "cc.EventListener:checkAvailable()",
                "cc.EventListener:finalize()",
                "cc.EventDispatcher:pauseEventListenersForTarget()",
                "cc.EventDispatcher:addEventListenerWithSceneGraphPriority()",
                "cc.EventDispatcher:setEnabled()",
                "cc.EventDispatcher:addEventListenerWithFixedPriority()",
                "cc.EventDispatcher:removeEventListener()",
                "cc.EventDispatcher:resumeEventListenersForTarget()",
                "cc.EventDispatcher:removeEventListenersForTarget()",
                "cc.EventDispatcher:setPriority()",
                "cc.EventDispatcher:addCustomEventListener()",
                "cc.EventDispatcher:dispatchEvent()",
                "cc.EventDispatcher:removeAllEventListeners()",
                "cc.EventDispatcher:removeCustomEventListeners()",
                "cc.EventDispatcher:isEnabled()",
                "cc.EventDispatcher:removeEventListenersForType()",
                "cc.EventDispatcher:constructor()",
                "cc.EventDispatcher:finalize()",
                "cc.EventFocus:constructor()",
                "cc.EventFocus:finalize()",
                "cc.EventListenerAcceleration:init()",
                "cc.EventListenerAcceleration:constructor()",
                "cc.EventListenerAcceleration:finalize()",
                "cc.EventListenerCustom:constructor()",
                "cc.EventListenerCustom:finalize()",
                "cc.EventListenerFocus:init()",
                "cc.EventListenerFocus:constructor()",
                "cc.EventListenerFocus:finalize()",
                "cc.EventListenerKeyboard:init()",
                "cc.EventListenerKeyboard:constructor()",
                "cc.EventListenerKeyboard:finalize()",
                "cc.EventMouse:getPreviousLocationInView()",
                "cc.EventMouse:getLocation()",
                "cc.EventMouse:getMouseButton()",
                "cc.EventMouse:getPreviousLocation()",
                "cc.EventMouse:getDelta()",
                "cc.EventMouse:setScrollData()",
                "cc.EventMouse:getStartLocationInView()",
                "cc.EventMouse:getStartLocation()",
                "cc.EventMouse:setMouseButton()",
                "cc.EventMouse:getLocationInView()",
                "cc.EventMouse:getScrollY()",
                "cc.EventMouse:getScrollX()",
                "cc.EventMouse:getCursorX()",
                "cc.EventMouse:getCursorY()",
                "cc.EventMouse:setCursorPosition()",
                "cc.EventMouse:constructor()",
                "cc.EventMouse:finalize()",
                "cc.EventListenerMouse:init()",
                "cc.EventListenerMouse:constructor()",
                "cc.EventListenerMouse:finalize()",
                "cc.EventListenerTouchOneByOne:isSwallowTouches()",
                "cc.EventListenerTouchOneByOne:setSwallowTouches()",
                "cc.EventListenerTouchOneByOne:init()",
                "cc.EventListenerTouchOneByOne:constructor()",
                "cc.EventListenerTouchOneByOne:finalize()",
                "cc.EventListenerTouchAllAtOnce:init()",
                "cc.EventListenerTouchAllAtOnce:constructor()",
                "cc.EventListenerTouchAllAtOnce:finalize()",
                "cc.ActionCamera:setEye()",
                "cc.ActionCamera:getEye()",
                "cc.ActionCamera:setUp()",
                "cc.ActionCamera:getCenter()",
                "cc.ActionCamera:setCenter()",
                "cc.ActionCamera:getUp()",
                "cc.ActionCamera:constructor()",
                "cc.ActionCamera:finalize()",
                "cc.OrbitCamera:initWithDuration()",
                "cc.OrbitCamera:create()",
                "cc.OrbitCamera:constructor()",
                "cc.OrbitCamera:finalize()",
                "cc.CardinalSplineTo:getPoints()",
                "cc.CardinalSplineTo:updatePosition()",
                "cc.CardinalSplineTo:initWithDuration()",
                "cc.CardinalSplineTo:constructor()",
                "cc.CardinalSplineTo:finalize()",
                "cc.CardinalSplineBy:constructor()",
                "cc.CardinalSplineBy:finalize()",
                "cc.CatmullRomTo:initWithDuration()",
                "cc.CatmullRomTo:finalize()",
                "cc.CatmullRomBy:initWithDuration()",
                "cc.CatmullRomBy:finalize()",
                "cc.ActionEase:initWithAction()",
                "cc.ActionEase:getInnerAction()",
                "cc.ActionEase:finalize()",
                "cc.EaseRateAction:setRate()",
                "cc.EaseRateAction:initWithAction()",
                "cc.EaseRateAction:getRate()",
                "cc.EaseRateAction:create()",
                "cc.EaseRateAction:finalize()",
                "cc.EaseIn:create()",
                "cc.EaseIn:constructor()",
                "cc.EaseIn:finalize()",
                "cc.EaseOut:create()",
                "cc.EaseOut:constructor()",
                "cc.EaseOut:finalize()",
                "cc.EaseInOut:create()",
                "cc.EaseInOut:constructor()",
                "cc.EaseInOut:finalize()",
                "cc.EaseExponentialIn:create()",
                "cc.EaseExponentialIn:constructor()",
                "cc.EaseExponentialIn:finalize()",
                "cc.EaseExponentialOut:create()",
                "cc.EaseExponentialOut:constructor()",
                "cc.EaseExponentialOut:finalize()",
                "cc.EaseExponentialInOut:create()",
                "cc.EaseExponentialInOut:constructor()",
                "cc.EaseExponentialInOut:finalize()",
                "cc.EaseSineIn:create()",
                "cc.EaseSineIn:constructor()",
                "cc.EaseSineIn:finalize()",
                "cc.EaseSineOut:create()",
                "cc.EaseSineOut:constructor()",
                "cc.EaseSineOut:finalize()",
                "cc.EaseSineInOut:create()",
                "cc.EaseSineInOut:constructor()",
                "cc.EaseSineInOut:finalize()",
                "cc.EaseElastic:setPeriod()",
                "cc.EaseElastic:initWithAction()",
                "cc.EaseElastic:getPeriod()",
                "cc.EaseElastic:finalize()",
                "cc.EaseElasticIn:create()",
                "cc.EaseElasticIn:constructor()",
                "cc.EaseElasticIn:finalize()",
                "cc.EaseElasticOut:create()",
                "cc.EaseElasticOut:constructor()",
                "cc.EaseElasticOut:finalize()",
                "cc.EaseElasticInOut:create()",
                "cc.EaseElasticInOut:constructor()",
                "cc.EaseElasticInOut:finalize()",
                "cc.EaseBounce:finalize()",
                "cc.EaseBounceIn:create()",
                "cc.EaseBounceIn:constructor()",
                "cc.EaseBounceIn:finalize()",
                "cc.EaseBounceOut:create()",
                "cc.EaseBounceOut:constructor()",
                "cc.EaseBounceOut:finalize()",
                "cc.EaseBounceInOut:create()",
                "cc.EaseBounceInOut:constructor()",
                "cc.EaseBounceInOut:finalize()",
                "cc.EaseBackIn:create()",
                "cc.EaseBackIn:constructor()",
                "cc.EaseBackIn:finalize()",
                "cc.EaseBackOut:create()",
                "cc.EaseBackOut:constructor()",
                "cc.EaseBackOut:finalize()",
                "cc.EaseBackInOut:create()",
                "cc.EaseBackInOut:constructor()",
                "cc.EaseBackInOut:finalize()",
                "cc.EaseBezierAction:setBezierParamer()",
                "cc.EaseBezierAction:create()",
                "cc.EaseBezierAction:constructor()",
                "cc.EaseBezierAction:finalize()",
                "cc.EaseQuadraticActionIn:create()",
                "cc.EaseQuadraticActionIn:constructor()",
                "cc.EaseQuadraticActionIn:finalize()",
                "cc.EaseQuadraticActionOut:create()",
                "cc.EaseQuadraticActionOut:constructor()",
                "cc.EaseQuadraticActionOut:finalize()",
                "cc.EaseQuadraticActionInOut:create()",
                "cc.EaseQuadraticActionInOut:constructor()",
                "cc.EaseQuadraticActionInOut:finalize()",
                "cc.EaseQuarticActionIn:create()",
                "cc.EaseQuarticActionIn:constructor()",
                "cc.EaseQuarticActionIn:finalize()",
                "cc.EaseQuarticActionOut:create()",
                "cc.EaseQuarticActionOut:constructor()",
                "cc.EaseQuarticActionOut:finalize()",
                "cc.EaseQuarticActionInOut:create()",
                "cc.EaseQuarticActionInOut:constructor()",
                "cc.EaseQuarticActionInOut:finalize()",
                "cc.EaseQuinticActionIn:create()",
                "cc.EaseQuinticActionIn:constructor()",
                "cc.EaseQuinticActionIn:finalize()",
                "cc.EaseQuinticActionOut:create()",
                "cc.EaseQuinticActionOut:constructor()",
                "cc.EaseQuinticActionOut:finalize()",
                "cc.EaseQuinticActionInOut:create()",
                "cc.EaseQuinticActionInOut:constructor()",
                "cc.EaseQuinticActionInOut:finalize()",
                "cc.EaseCircleActionIn:create()",
                "cc.EaseCircleActionIn:constructor()",
                "cc.EaseCircleActionIn:finalize()",
                "cc.EaseCircleActionOut:create()",
                "cc.EaseCircleActionOut:constructor()",
                "cc.EaseCircleActionOut:finalize()",
                "cc.EaseCircleActionInOut:create()",
                "cc.EaseCircleActionInOut:constructor()",
                "cc.EaseCircleActionInOut:finalize()",
                "cc.EaseCubicActionIn:create()",
                "cc.EaseCubicActionIn:constructor()",
                "cc.EaseCubicActionIn:finalize()",
                "cc.EaseCubicActionOut:create()",
                "cc.EaseCubicActionOut:constructor()",
                "cc.EaseCubicActionOut:finalize()",
                "cc.EaseCubicActionInOut:create()",
                "cc.EaseCubicActionInOut:constructor()",
                "cc.EaseCubicActionInOut:finalize()",
                "cc.ActionInstant:finalize()",
                "cc.Show:create()",
                "cc.Show:constructor()",
                "cc.Show:finalize()",
                "cc.Hide:create()",
                "cc.Hide:constructor()",
                "cc.Hide:finalize()",
                "cc.ToggleVisibility:create()",
                "cc.ToggleVisibility:constructor()",
                "cc.ToggleVisibility:finalize()",
                "cc.RemoveSelf:init()",
                "cc.RemoveSelf:create()",
                "cc.RemoveSelf:constructor()",
                "cc.RemoveSelf:finalize()",
                "cc.FlipX:initWithFlipX()",
                "cc.FlipX:create()",
                "cc.FlipX:constructor()",
                "cc.FlipX:finalize()",
                "cc.FlipY:initWithFlipY()",
                "cc.FlipY:create()",
                "cc.FlipY:constructor()",
                "cc.FlipY:finalize()",
                "cc.Place:initWithPosition()",
                "cc.Place:create()",
                "cc.Place:constructor()",
                "cc.Place:finalize()",
                "cc.CallFunc:execute()",
                "cc.CallFunc:getTargetCallback()",
                "cc.CallFunc:setTargetCallback()",
                "cc.CallFunc:constructor()",
                "cc.CallFunc:finalize()",
                "cc.GridAction:getGrid()",
                "cc.GridAction:initWithDuration()",
                "cc.GridAction:finalize()",
                "cc.Grid3DAction:getGridRect()",
                "cc.Grid3DAction:finalize()",
                "cc.TiledGrid3DAction:finalize()",
                "cc.StopGrid:create()",
                "cc.StopGrid:constructor()",
                "cc.StopGrid:finalize()",
                "cc.ReuseGrid:initWithTimes()",
                "cc.ReuseGrid:create()",
                "cc.ReuseGrid:constructor()",
                "cc.ReuseGrid:finalize()",
                "cc.Waves3D:setAmplitudeRate()",
                "cc.Waves3D:initWithDuration()",
                "cc.Waves3D:getAmplitude()",
                "cc.Waves3D:getAmplitudeRate()",
                "cc.Waves3D:setAmplitude()",
                "cc.Waves3D:create()",
                "cc.Waves3D:constructor()",
                "cc.Waves3D:finalize()",
                "cc.FlipX3D:initWithSize()",
                "cc.FlipX3D:initWithDuration()",
                "cc.FlipX3D:create()",
                "cc.FlipX3D:constructor()",
                "cc.FlipX3D:finalize()",
                "cc.FlipY3D:create()",
                "cc.FlipY3D:constructor()",
                "cc.FlipY3D:finalize()",
                "cc.Lens3D:setConcave()",
                "cc.Lens3D:initWithDuration()",
                "cc.Lens3D:setLensEffect()",
                "cc.Lens3D:getLensEffect()",
                "cc.Lens3D:setPosition()",
                "cc.Lens3D:getPosition()",
                "cc.Lens3D:create()",
                "cc.Lens3D:constructor()",
                "cc.Lens3D:finalize()",
                "cc.Ripple3D:setAmplitudeRate()",
                "cc.Ripple3D:initWithDuration()",
                "cc.Ripple3D:getAmplitudeRate()",
                "cc.Ripple3D:setAmplitude()",
                "cc.Ripple3D:getAmplitude()",
                "cc.Ripple3D:setPosition()",
                "cc.Ripple3D:getPosition()",
                "cc.Ripple3D:create()",
                "cc.Ripple3D:constructor()",
                "cc.Ripple3D:finalize()",
                "cc.Shaky3D:initWithDuration()",
                "cc.Shaky3D:create()",
                "cc.Shaky3D:constructor()",
                "cc.Shaky3D:finalize()",
                "cc.Liquid:setAmplitudeRate()",
                "cc.Liquid:initWithDuration()",
                "cc.Liquid:getAmplitude()",
                "cc.Liquid:getAmplitudeRate()",
                "cc.Liquid:setAmplitude()",
                "cc.Liquid:create()",
                "cc.Liquid:constructor()",
                "cc.Liquid:finalize()",
                "cc.Waves:setAmplitudeRate()",
                "cc.Waves:initWithDuration()",
                "cc.Waves:getAmplitude()",
                "cc.Waves:getAmplitudeRate()",
                "cc.Waves:setAmplitude()",
                "cc.Waves:create()",
                "cc.Waves:constructor()",
                "cc.Waves:finalize()",
                "cc.Twirl:setAmplitudeRate()",
                "cc.Twirl:initWithDuration()",
                "cc.Twirl:getAmplitudeRate()",
                "cc.Twirl:setAmplitude()",
                "cc.Twirl:getAmplitude()",
                "cc.Twirl:setPosition()",
                "cc.Twirl:getPosition()",
                "cc.Twirl:create()",
                "cc.Twirl:constructor()",
                "cc.Twirl:finalize()",
                "cc.ActionManager:getActionByTag()",
                "cc.ActionManager:removeActionByTag()",
                "cc.ActionManager:removeActionsByFlags()",
                "cc.ActionManager:removeAllActions()",
                "cc.ActionManager:addAction()",
                "cc.ActionManager:resumeTarget()",
                "cc.ActionManager:update()",
                "cc.ActionManager:pauseTarget()",
                "cc.ActionManager:getNumberOfRunningActionsInTarget()",
                "cc.ActionManager:removeAllActionsFromTarget()",
                "cc.ActionManager:resumeTargets()",
                "cc.ActionManager:removeAction()",
                "cc.ActionManager:removeAllActionsByTag()",
                "cc.ActionManager:pauseAllRunningActions()",
                "cc.ActionManager:constructor()",
                "cc.ActionManager:finalize()",
                "cc.PageTurn3D:create()",
                "cc.PageTurn3D:finalize()",
                "cc.ProgressTo:initWithDuration()",
                "cc.ProgressTo:create()",
                "cc.ProgressTo:constructor()",
                "cc.ProgressTo:finalize()",
                "cc.ProgressFromTo:initWithDuration()",
                "cc.ProgressFromTo:create()",
                "cc.ProgressFromTo:constructor()",
                "cc.ProgressFromTo:finalize()",
                "cc.ShakyTiles3D:initWithDuration()",
                "cc.ShakyTiles3D:create()",
                "cc.ShakyTiles3D:constructor()",
                "cc.ShakyTiles3D:finalize()",
                "cc.ShatteredTiles3D:initWithDuration()",
                "cc.ShatteredTiles3D:create()",
                "cc.ShatteredTiles3D:constructor()",
                "cc.ShatteredTiles3D:finalize()",
                "cc.ShuffleTiles:initWithDuration()",
                "cc.ShuffleTiles:getDelta()",
                "cc.ShuffleTiles:create()",
                "cc.ShuffleTiles:constructor()",
                "cc.ShuffleTiles:finalize()",
                "cc.FadeOutTRTiles:turnOnTile()",
                "cc.FadeOutTRTiles:turnOffTile()",
                "cc.FadeOutTRTiles:transformTile()",
                "cc.FadeOutTRTiles:testFunc()",
                "cc.FadeOutTRTiles:create()",
                "cc.FadeOutTRTiles:constructor()",
                "cc.FadeOutTRTiles:finalize()",
                "cc.FadeOutBLTiles:create()",
                "cc.FadeOutBLTiles:constructor()",
                "cc.FadeOutBLTiles:finalize()",
                "cc.FadeOutUpTiles:create()",
                "cc.FadeOutUpTiles:constructor()",
                "cc.FadeOutUpTiles:finalize()",
                "cc.FadeOutDownTiles:create()",
                "cc.FadeOutDownTiles:constructor()",
                "cc.FadeOutDownTiles:finalize()",
                "cc.TurnOffTiles:turnOnTile()",
                "cc.TurnOffTiles:turnOffTile()",
                "cc.TurnOffTiles:initWithDuration()",
                "cc.TurnOffTiles:create()",
                "cc.TurnOffTiles:constructor()",
                "cc.TurnOffTiles:finalize()",
                "cc.WavesTiles3D:setAmplitudeRate()",
                "cc.WavesTiles3D:initWithDuration()",
                "cc.WavesTiles3D:getAmplitude()",
                "cc.WavesTiles3D:getAmplitudeRate()",
                "cc.WavesTiles3D:setAmplitude()",
                "cc.WavesTiles3D:create()",
                "cc.WavesTiles3D:constructor()",
                "cc.WavesTiles3D:finalize()",
                "cc.JumpTiles3D:setAmplitudeRate()",
                "cc.JumpTiles3D:initWithDuration()",
                "cc.JumpTiles3D:getAmplitude()",
                "cc.JumpTiles3D:getAmplitudeRate()",
                "cc.JumpTiles3D:setAmplitude()",
                "cc.JumpTiles3D:create()",
                "cc.JumpTiles3D:constructor()",
                "cc.JumpTiles3D:finalize()",
                "cc.SplitRows:initWithDuration()",
                "cc.SplitRows:create()",
                "cc.SplitRows:constructor()",
                "cc.SplitRows:finalize()",
                "cc.SplitCols:initWithDuration()",
                "cc.SplitCols:create()",
                "cc.SplitCols:constructor()",
                "cc.SplitCols:finalize()",
                "cc.ActionTween:initWithDuration()",
                "cc.ActionTween:create()",
                "cc.ActionTween:finalize()",
                "cc.GLProgramState:getVertexAttribsFlags()",
                "cc.GLProgramState:setUniformVec4()",
                "cc.GLProgramState:applyAutoBinding()",
                "cc.GLProgramState:setUniformVec2()",
                "cc.GLProgramState:setUniformVec3()",
                "cc.GLProgramState:apply()",
                "cc.GLProgramState:getNodeBinding()",
                "cc.GLProgramState:setUniformVec4v()",
                "cc.GLProgramState:applyGLProgram()",
                "cc.GLProgramState:setNodeBinding()",
                "cc.GLProgramState:setUniformInt()",
                "cc.GLProgramState:setParameterAutoBinding()",
                "cc.GLProgramState:setUniformVec2v()",
                "cc.GLProgramState:getUniformCount()",
                "cc.GLProgramState:applyAttributes()",
                "cc.GLProgramState:clone()",
                "cc.GLProgramState:setGLProgram()",
                "cc.GLProgramState:setUniformFloatv()",
                "cc.GLProgramState:getGLProgram()",
                "cc.GLProgramState:setUniformTexture()",
                "cc.GLProgramState:applyUniforms()",
                "cc.GLProgramState:setUniformFloat()",
                "cc.GLProgramState:setUniformMat4()",
                "cc.GLProgramState:setUniformVec3v()",
                "cc.GLProgramState:getVertexAttribCount()",
                "cc.GLProgramState:create()",
                "cc.GLProgramState:getOrCreateWithGLProgramName()",
                "cc.GLProgramState:getOrCreateWithGLProgram()",
                "cc.GLProgramState:getOrCreateWithShaders()",
                "cc.GLProgramState:finalize()",
                "cc.AtlasNode:updateAtlasValues()",
                "cc.AtlasNode:initWithTileFile()",
                "cc.AtlasNode:getTexture()",
                "cc.AtlasNode:setTextureAtlas()",
                "cc.AtlasNode:setBlendFunc()",
                "cc.AtlasNode:getTextureAtlas()",
                "cc.AtlasNode:getBlendFunc()",
                "cc.AtlasNode:getQuadsToDraw()",
                "cc.AtlasNode:setTexture()",
                "cc.AtlasNode:initWithTexture()",
                "cc.AtlasNode:setQuadsToDraw()",
                "cc.AtlasNode:create()",
                "cc.AtlasNode:constructor()",
                "cc.AtlasNode:finalize()",
                "cc.ClippingNode:hasContent()",
                "cc.ClippingNode:setInverted()",
                "cc.ClippingNode:setStencil()",
                "cc.ClippingNode:getAlphaThreshold()",
                "cc.ClippingNode:init()",
                "cc.ClippingNode:getStencil()",
                "cc.ClippingNode:setAlphaThreshold()",
                "cc.ClippingNode:isInverted()",
                "cc.ClippingNode:create()",
                "cc.ClippingNode:finalize()",
                "cc.ClippingRectangleNode:isClippingEnabled()",
                "cc.ClippingRectangleNode:setClippingEnabled()",
                "cc.ClippingRectangleNode:getClippingRegion()",
                "cc.ClippingRectangleNode:setClippingRegion()",
                "cc.ClippingRectangleNode:create()",
                "cc.ClippingRectangleNode:finalize()",
                "cc.DrawNode:drawLine()",
                "cc.DrawNode:drawRect()",
                "cc.DrawNode:drawSolidCircle()",
                "cc.DrawNode:setLineWidth()",
                "cc.DrawNode:onDrawGLPoint()",
                "cc.DrawNode:drawDot()",
                "cc.DrawNode:drawSegment()",
                "cc.DrawNode:getBlendFunc()",
                "cc.DrawNode:onDraw()",
                "cc.DrawNode:drawCircle()",
                "cc.DrawNode:drawQuadBezier()",
                "cc.DrawNode:onDrawGLLine()",
                "cc.DrawNode:drawTriangle()",
                "cc.DrawNode:setBlendFunc()",
                "cc.DrawNode:clear()",
                "cc.DrawNode:drawSolidRect()",
                "cc.DrawNode:drawPoint()",
                "cc.DrawNode:drawCubicBezier()",
                "cc.DrawNode:create()",
                "cc.DrawNode:constructor()",
                "cc.DrawNode:finalize()",
                "cc.Label:isClipMarginEnabled()",
                "cc.Label:enableShadow()",
                "cc.Label:setDimensions()",
                "cc.Label:getString()",
                "cc.Label:getHeight()",
                "cc.Label:disableEffect()",
                "cc.Label:setTTFConfig()",
                "cc.Label:getTextColor()",
                "cc.Label:getBlendFunc()",
                "cc.Label:setWidth()",
                "cc.Label:getMaxLineWidth()",
                "cc.Label:getHorizontalAlignment()",
                "cc.Label:setClipMarginEnabled()",
                "cc.Label:setString()",
                "cc.Label:setSystemFontName()",
                "cc.Label:setBMFontFilePath()",
                "cc.Label:getFontAtlas()",
                "cc.Label:setLineHeight()",
                "cc.Label:setSystemFontSize()",
                "cc.Label:updateContent()",
                "cc.Label:getStringLength()",
                "cc.Label:setLineBreakWithoutSpace()",
                "cc.Label:getStringNumLines()",
                "cc.Label:enableOutline()",
                "cc.Label:getAdditionalKerning()",
                "cc.Label:removeAllChildrenWithCleanup()",
                "cc.Label:setCharMap()",
                "cc.Label:getDimensions()",
                "cc.Label:setMaxLineWidth()",
                "cc.Label:getSystemFontName()",
                "cc.Label:setVerticalAlignment()",
                "cc.Label:getLineHeight()",
                "cc.Label:getTTFConfig()",
                "cc.Label:getVerticalAlignment()",
                "cc.Label:setTextColor()",
                "cc.Label:setHeight()",
                "cc.Label:getWidth()",
                "cc.Label:enableGlow()",
                "cc.Label:getLetter()",
                "cc.Label:setAdditionalKerning()",
                "cc.Label:getSystemFontSize()",
                "cc.Label:setBlendFunc()",
                "cc.Label:getTextAlignment()",
                "cc.Label:getBMFontFilePath()",
                "cc.Label:setHorizontalAlignment()",
                "cc.Label:setAlignment()",
                "cc.Label:requestSystemFontRefresh()",
                "cc.Label:createWithBMFont()",
                "cc.Label:create()",
                "cc.Label:createWithCharMap()",
                "cc.Label:createWithSystemFont()",
                "cc.Label:finalize()",
                "cc.LabelAtlas:setString()",
                "cc.LabelAtlas:initWithString()",
                "cc.LabelAtlas:getString()",
                "cc.LabelAtlas:create()",
                "cc.LabelAtlas:constructor()",
                "cc.LabelAtlas:finalize()",
                "cc.Layer:create()",
                "cc.Layer:constructor()",
                "cc.Layer:finalize()",
                "cc.LayerColor:changeWidthAndHeight()",
                "cc.LayerColor:getBlendFunc()",
                "cc.LayerColor:setBlendFunc()",
                "cc.LayerColor:changeWidth()",
                "cc.LayerColor:initWithColor()",
                "cc.LayerColor:changeHeight()",
                "cc.LayerColor:create()",
                "cc.LayerColor:constructor()",
                "cc.LayerColor:finalize()",
                "cc.LayerGradient:getStartColor()",
                "cc.LayerGradient:isCompressedInterpolation()",
                "cc.LayerGradient:getStartOpacity()",
                "cc.LayerGradient:setVector()",
                "cc.LayerGradient:setStartOpacity()",
                "cc.LayerGradient:setCompressedInterpolation()",
                "cc.LayerGradient:setEndOpacity()",
                "cc.LayerGradient:getVector()",
                "cc.LayerGradient:setEndColor()",
                "cc.LayerGradient:initWithColor()",
                "cc.LayerGradient:getEndColor()",
                "cc.LayerGradient:getEndOpacity()",
                "cc.LayerGradient:setStartColor()",
                "cc.LayerGradient:create()",
                "cc.LayerGradient:constructor()",
                "cc.LayerGradient:finalize()",
                "cc.LayerMultiplex:initWithArray()",
                "cc.LayerMultiplex:switchToAndReleaseMe()",
                "cc.LayerMultiplex:addLayer()",
                "cc.LayerMultiplex:switchTo()",
                "cc.LayerMultiplex:constructor()",
                "cc.LayerMultiplex:finalize()",
                "cc.MenuItem:setEnabled()",
                "cc.MenuItem:activate()",
                "cc.MenuItem:isEnabled()",
                "cc.MenuItem:selected()",
                "cc.MenuItem:isSelected()",
                "cc.MenuItem:unselected()",
                "cc.MenuItem:rect()",
                "cc.MenuItem:constructor()",
                "cc.MenuItem:finalize()",
                "cc.MenuItemLabel:setLabel()",
                "cc.MenuItemLabel:getDisabledColor()",
                "cc.MenuItemLabel:setString()",
                "cc.MenuItemLabel:initWithLabel()",
                "cc.MenuItemLabel:setDisabledColor()",
                "cc.MenuItemLabel:getLabel()",
                "cc.MenuItemLabel:constructor()",
                "cc.MenuItemLabel:finalize()",
                "cc.MenuItemAtlasFont:initWithString()",
                "cc.MenuItemAtlasFont:constructor()",
                "cc.MenuItemAtlasFont:finalize()",
                "cc.MenuItemFont:getFontNameObj()",
                "cc.MenuItemFont:setFontNameObj()",
                "cc.MenuItemFont:initWithString()",
                "cc.MenuItemFont:getFontSizeObj()",
                "cc.MenuItemFont:setFontSizeObj()",
                "cc.MenuItemFont:setFontName()",
                "cc.MenuItemFont:getFontSize()",
                "cc.MenuItemFont:getFontName()",
                "cc.MenuItemFont:setFontSize()",
                "cc.MenuItemFont:constructor()",
                "cc.MenuItemFont:finalize()",
                "cc.MenuItemSprite:setEnabled()",
                "cc.MenuItemSprite:selected()",
                "cc.MenuItemSprite:setNormalImage()",
                "cc.MenuItemSprite:setDisabledImage()",
                "cc.MenuItemSprite:initWithNormalSprite()",
                "cc.MenuItemSprite:setSelectedImage()",
                "cc.MenuItemSprite:getDisabledImage()",
                "cc.MenuItemSprite:getSelectedImage()",
                "cc.MenuItemSprite:getNormalImage()",
                "cc.MenuItemSprite:unselected()",
                "cc.MenuItemSprite:constructor()",
                "cc.MenuItemSprite:finalize()",
                "cc.MenuItemImage:setDisabledSpriteFrame()",
                "cc.MenuItemImage:setSelectedSpriteFrame()",
                "cc.MenuItemImage:setNormalSpriteFrame()",
                "cc.MenuItemImage:init()",
                "cc.MenuItemImage:initWithNormalImage()",
                "cc.MenuItemImage:constructor()",
                "cc.MenuItemImage:finalize()",
                "cc.MenuItemToggle:setSubItems()",
                "cc.MenuItemToggle:initWithItem()",
                "cc.MenuItemToggle:getSelectedIndex()",
                "cc.MenuItemToggle:addSubItem()",
                "cc.MenuItemToggle:getSelectedItem()",
                "cc.MenuItemToggle:setSelectedIndex()",
                "cc.MenuItemToggle:constructor()",
                "cc.MenuItemToggle:finalize()",
                "cc.Menu:initWithArray()",
                "cc.Menu:setEnabled()",
                "cc.Menu:alignItemsVertically()",
                "cc.Menu:isEnabled()",
                "cc.Menu:alignItemsHorizontallyWithPadding()",
                "cc.Menu:alignItemsVerticallyWithPadding()",
                "cc.Menu:alignItemsHorizontally()",
                "cc.Menu:constructor()",
                "cc.Menu:finalize()",
                "cc.MotionStreak:reset()",
                "cc.MotionStreak:setTexture()",
                "cc.MotionStreak:getTexture()",
                "cc.MotionStreak:tintWithColor()",
                "cc.MotionStreak:setBlendFunc()",
                "cc.MotionStreak:setStartingPositionInitialized()",
                "cc.MotionStreak:getBlendFunc()",
                "cc.MotionStreak:isStartingPositionInitialized()",
                "cc.MotionStreak:isFastMode()",
                "cc.MotionStreak:getStroke()",
                "cc.MotionStreak:initWithFade()",
                "cc.MotionStreak:setFastMode()",
                "cc.MotionStreak:setStroke()",
                "cc.MotionStreak:create()",
                "cc.MotionStreak:constructor()",
                "cc.MotionStreak:finalize()",
                "cc.NodeGrid:setGridRect()",
                "cc.NodeGrid:setTarget()",
                "cc.NodeGrid:setGrid()",
                "cc.NodeGrid:getGrid()",
                "cc.NodeGrid:getGridRect()",
                "cc.NodeGrid:create()",
                "cc.NodeGrid:constructor()",
                "cc.NodeGrid:finalize()",
                "cc.ParticleBatchNode:setTexture()",
                "cc.ParticleBatchNode:initWithTexture()",
                "cc.ParticleBatchNode:disableParticle()",
                "cc.ParticleBatchNode:getTexture()",
                "cc.ParticleBatchNode:setTextureAtlas()",
                "cc.ParticleBatchNode:initWithFile()",
                "cc.ParticleBatchNode:setBlendFunc()",
                "cc.ParticleBatchNode:removeAllChildrenWithCleanup()",
                "cc.ParticleBatchNode:getTextureAtlas()",
                "cc.ParticleBatchNode:getBlendFunc()",
                "cc.ParticleBatchNode:insertChild()",
                "cc.ParticleBatchNode:removeChildAtIndex()",
                "cc.ParticleBatchNode:create()",
                "cc.ParticleBatchNode:createWithTexture()",
                "cc.ParticleBatchNode:constructor()",
                "cc.ParticleBatchNode:finalize()",
                "cc.ParticleSystem:getStartSizeVar()",
                "cc.ParticleSystem:getTexture()",
                "cc.ParticleSystem:isFull()",
                "cc.ParticleSystem:getBatchNode()",
                "cc.ParticleSystem:getStartColor()",
                "cc.ParticleSystem:getPositionType()",
                "cc.ParticleSystem:setPosVar()",
                "cc.ParticleSystem:getEndSpin()",
                "cc.ParticleSystem:setRotatePerSecondVar()",
                "cc.ParticleSystem:getStartSpinVar()",
                "cc.ParticleSystem:getRadialAccelVar()",
                "cc.ParticleSystem:getEndSizeVar()",
                "cc.ParticleSystem:setTangentialAccel()",
                "cc.ParticleSystem:getRadialAccel()",
                "cc.ParticleSystem:setStartRadius()",
                "cc.ParticleSystem:setRotatePerSecond()",
                "cc.ParticleSystem:setEndSize()",
                "cc.ParticleSystem:getGravity()",
                "cc.ParticleSystem:getTangentialAccel()",
                "cc.ParticleSystem:setEndRadius()",
                "cc.ParticleSystem:getSpeed()",
                "cc.ParticleSystem:getAngle()",
                "cc.ParticleSystem:setEndColor()",
                "cc.ParticleSystem:setStartSpin()",
                "cc.ParticleSystem:setDuration()",
                "cc.ParticleSystem:initWithTotalParticles()",
                "cc.ParticleSystem:setTexture()",
                "cc.ParticleSystem:getPosVar()",
                "cc.ParticleSystem:updateWithNoTime()",
                "cc.ParticleSystem:isBlendAdditive()",
                "cc.ParticleSystem:getSpeedVar()",
                "cc.ParticleSystem:setPositionType()",
                "cc.ParticleSystem:stopSystem()",
                "cc.ParticleSystem:getSourcePosition()",
                "cc.ParticleSystem:setLifeVar()",
                "cc.ParticleSystem:setTotalParticles()",
                "cc.ParticleSystem:setEndColorVar()",
                "cc.ParticleSystem:getAtlasIndex()",
                "cc.ParticleSystem:getStartSize()",
                "cc.ParticleSystem:setStartSpinVar()",
                "cc.ParticleSystem:resetSystem()",
                "cc.ParticleSystem:setAtlasIndex()",
                "cc.ParticleSystem:setTangentialAccelVar()",
                "cc.ParticleSystem:setEndRadiusVar()",
                "cc.ParticleSystem:getEndRadius()",
                "cc.ParticleSystem:isActive()",
                "cc.ParticleSystem:setRadialAccelVar()",
                "cc.ParticleSystem:setStartSize()",
                "cc.ParticleSystem:setSpeed()",
                "cc.ParticleSystem:getStartSpin()",
                "cc.ParticleSystem:getRotatePerSecond()",
                "cc.ParticleSystem:setEmitterMode()",
                "cc.ParticleSystem:getDuration()",
                "cc.ParticleSystem:setSourcePosition()",
                "cc.ParticleSystem:getEndSpinVar()",
                "cc.ParticleSystem:setBlendAdditive()",
                "cc.ParticleSystem:setLife()",
                "cc.ParticleSystem:setAngleVar()",
                "cc.ParticleSystem:setRotationIsDir()",
                "cc.ParticleSystem:setEndSizeVar()",
                "cc.ParticleSystem:setAngle()",
                "cc.ParticleSystem:setBatchNode()",
                "cc.ParticleSystem:getTangentialAccelVar()",
                "cc.ParticleSystem:getEmitterMode()",
                "cc.ParticleSystem:setEndSpinVar()",
                "cc.ParticleSystem:initWithFile()",
                "cc.ParticleSystem:getAngleVar()",
                "cc.ParticleSystem:setStartColor()",
                "cc.ParticleSystem:getRotatePerSecondVar()",
                "cc.ParticleSystem:getEndSize()",
                "cc.ParticleSystem:getLife()",
                "cc.ParticleSystem:setSpeedVar()",
                "cc.ParticleSystem:setAutoRemoveOnFinish()",
                "cc.ParticleSystem:setGravity()",
                "cc.ParticleSystem:postStep()",
                "cc.ParticleSystem:setEmissionRate()",
                "cc.ParticleSystem:getEndColorVar()",
                "cc.ParticleSystem:getRotationIsDir()",
                "cc.ParticleSystem:getEmissionRate()",
                "cc.ParticleSystem:getEndColor()",
                "cc.ParticleSystem:getLifeVar()",
                "cc.ParticleSystem:setStartSizeVar()",
                "cc.ParticleSystem:addParticle()",
                "cc.ParticleSystem:getStartRadius()",
                "cc.ParticleSystem:getParticleCount()",
                "cc.ParticleSystem:getStartRadiusVar()",
                "cc.ParticleSystem:getBlendFunc()",
                "cc.ParticleSystem:setStartColorVar()",
                "cc.ParticleSystem:setEndSpin()",
                "cc.ParticleSystem:setRadialAccel()",
                "cc.ParticleSystem:initWithDictionary()",
                "cc.ParticleSystem:isAutoRemoveOnFinish()",
                "cc.ParticleSystem:getTotalParticles()",
                "cc.ParticleSystem:setStartRadiusVar()",
                "cc.ParticleSystem:setBlendFunc()",
                "cc.ParticleSystem:getEndRadiusVar()",
                "cc.ParticleSystem:getStartColorVar()",
                "cc.ParticleSystem:create()",
                "cc.ParticleSystem:createWithTotalParticles()",
                "cc.ParticleSystem:constructor()",
                "cc.ParticleSystem:finalize()",
                "cc.ParticleSystemQuad:setDisplayFrame()",
                "cc.ParticleSystemQuad:setTextureWithRect()",
                "cc.ParticleSystemQuad:listenRendererRecreated()",
                "cc.ParticleSystemQuad:create()",
                "cc.ParticleSystemQuad:createWithTotalParticles()",
                "cc.ParticleSystemQuad:constructor()",
                "cc.ParticleSystemQuad:finalize()",
                "cc.ParticleFire:create()",
                "cc.ParticleFire:createWithTotalParticles()",
                "cc.ParticleFire:constructor()",
                "cc.ParticleFire:finalize()",
                "cc.ParticleFireworks:init()",
                "cc.ParticleFireworks:initWithTotalParticles()",
                "cc.ParticleFireworks:create()",
                "cc.ParticleFireworks:createWithTotalParticles()",
                "cc.ParticleFireworks:constructor()",
                "cc.ParticleFireworks:finalize()",
                "cc.ParticleSun:init()",
                "cc.ParticleSun:initWithTotalParticles()",
                "cc.ParticleSun:create()",
                "cc.ParticleSun:createWithTotalParticles()",
                "cc.ParticleSun:constructor()",
                "cc.ParticleSun:finalize()",
                "cc.ParticleGalaxy:init()",
                "cc.ParticleGalaxy:initWithTotalParticles()",
                "cc.ParticleGalaxy:create()",
                "cc.ParticleGalaxy:createWithTotalParticles()",
                "cc.ParticleGalaxy:constructor()",
                "cc.ParticleGalaxy:finalize()",
                "cc.ParticleFlower:init()",
                "cc.ParticleFlower:initWithTotalParticles()",
                "cc.ParticleFlower:create()",
                "cc.ParticleFlower:createWithTotalParticles()",
                "cc.ParticleFlower:constructor()",
                "cc.ParticleFlower:finalize()",
                "cc.ParticleMeteor:init()",
                "cc.ParticleMeteor:initWithTotalParticles()",
                "cc.ParticleMeteor:create()",
                "cc.ParticleMeteor:createWithTotalParticles()",
                "cc.ParticleMeteor:constructor()",
                "cc.ParticleMeteor:finalize()",
                "cc.ParticleSpiral:init()",
                "cc.ParticleSpiral:initWithTotalParticles()",
                "cc.ParticleSpiral:create()",
                "cc.ParticleSpiral:createWithTotalParticles()",
                "cc.ParticleSpiral:constructor()",
                "cc.ParticleSpiral:finalize()",
                "cc.ParticleExplosion:init()",
                "cc.ParticleExplosion:initWithTotalParticles()",
                "cc.ParticleExplosion:create()",
                "cc.ParticleExplosion:createWithTotalParticles()",
                "cc.ParticleExplosion:constructor()",
                "cc.ParticleExplosion:finalize()",
                "cc.ParticleSmoke:init()",
                "cc.ParticleSmoke:initWithTotalParticles()",
                "cc.ParticleSmoke:create()",
                "cc.ParticleSmoke:createWithTotalParticles()",
                "cc.ParticleSmoke:constructor()",
                "cc.ParticleSmoke:finalize()",
                "cc.ParticleSnow:init()",
                "cc.ParticleSnow:initWithTotalParticles()",
                "cc.ParticleSnow:create()",
                "cc.ParticleSnow:createWithTotalParticles()",
                "cc.ParticleSnow:constructor()",
                "cc.ParticleSnow:finalize()",
                "cc.ParticleRain:init()",
                "cc.ParticleRain:initWithTotalParticles()",
                "cc.ParticleRain:create()",
                "cc.ParticleRain:createWithTotalParticles()",
                "cc.ParticleRain:constructor()",
                "cc.ParticleRain:finalize()",
                "cc.ProgressTimer:initWithSprite()",
                "cc.ProgressTimer:isReverseDirection()",
                "cc.ProgressTimer:setBarChangeRate()",
                "cc.ProgressTimer:getPercentage()",
                "cc.ProgressTimer:setSprite()",
                "cc.ProgressTimer:getType()",
                "cc.ProgressTimer:getSprite()",
                "cc.ProgressTimer:setMidpoint()",
                "cc.ProgressTimer:getBarChangeRate()",
                "cc.ProgressTimer:setReverseDirection()",
                "cc.ProgressTimer:getMidpoint()",
                "cc.ProgressTimer:setPercentage()",
                "cc.ProgressTimer:setType()",
                "cc.ProgressTimer:create()",
                "cc.ProgressTimer:constructor()",
                "cc.ProgressTimer:finalize()",
                "cc.ProtectedNode:addProtectedChild()",
                "cc.ProtectedNode:disableCascadeColor()",
                "cc.ProtectedNode:removeProtectedChildByTag()",
                "cc.ProtectedNode:reorderProtectedChild()",
                "cc.ProtectedNode:removeAllProtectedChildrenWithCleanup()",
                "cc.ProtectedNode:disableCascadeOpacity()",
                "cc.ProtectedNode:sortAllProtectedChildren()",
                "cc.ProtectedNode:getProtectedChildByTag()",
                "cc.ProtectedNode:removeProtectedChild()",
                "cc.ProtectedNode:removeAllProtectedChildren()",
                "cc.ProtectedNode:create()",
                "cc.ProtectedNode:constructor()",
                "cc.ProtectedNode:finalize()",
                "cc.Image:hasPremultipliedAlpha()",
                "cc.Image:saveToFile()",
                "cc.Image:hasAlpha()",
                "cc.Image:isCompressed()",
                "cc.Image:getHeight()",
                "cc.Image:initWithImageFile()",
                "cc.Image:getWidth()",
                "cc.Image:getBitPerPixel()",
                "cc.Image:getFileType()",
                "cc.Image:getNumberOfMipmaps()",
                "cc.Image:getRenderFormat()",
                "cc.Image:setPVRImagesHavePremultipliedAlpha()",
                "cc.Image:constructor()",
                "cc.Image:finalize()",
                "cc.PolygonInfo:getArea()",
                "cc.PolygonInfo:getTriaglesCount()",
                "cc.PolygonInfo:getVertCount()",
                "cc.PolygonInfo:setQuad()",
                "cc.PolygonInfo:constructor()",
                "cc.PolygonInfo:finalize()",
                "cc.AutoPolygon:constructor()",
                "cc.AutoPolygon:finalize()",
                "cc.Sprite:setSpriteFrame()",
                "cc.Sprite:setTexture()",
                "cc.Sprite:getTexture()",
                "cc.Sprite:setFlippedY()",
                "cc.Sprite:setFlippedX()",
                "cc.Sprite:initWithTexture()",
                "cc.Sprite:getBatchNode()",
                "cc.Sprite:getOffsetPosition()",
                "cc.Sprite:removeAllChildrenWithCleanup()",
                "cc.Sprite:setTextureRect()",
                "cc.Sprite:initWithSpriteFrameName()",
                "cc.Sprite:isFrameDisplayed()",
                "cc.Sprite:getAtlasIndex()",
                "cc.Sprite:setBatchNode()",
                "cc.Sprite:getBlendFunc()",
                "cc.Sprite:setDisplayFrameWithAnimationName()",
                "cc.Sprite:setTextureAtlas()",
                "cc.Sprite:getSpriteFrame()",
                "cc.Sprite:isDirty()",
                "cc.Sprite:setAtlasIndex()",
                "cc.Sprite:setDirty()",
                "cc.Sprite:isTextureRectRotated()",
                "cc.Sprite:getTextureRect()",
                "cc.Sprite:debugDraw()",
                "cc.Sprite:initWithFile()",
                "cc.Sprite:setBlendFunc()",
                "cc.Sprite:getTextureAtlas()",
                "cc.Sprite:initWithSpriteFrame()",
                "cc.Sprite:isFlippedX()",
                "cc.Sprite:isFlippedY()",
                "cc.Sprite:setVertexRect()",
                "cc.Sprite:createWithTexture()",
                "cc.Sprite:createWithSpriteFrameName()",
                "cc.Sprite:createWithSpriteFrame()",
                "cc.Sprite:constructor()",
                "cc.Sprite:finalize()",
                "cc.RenderTexture:setVirtualViewport()",
                "cc.RenderTexture:clearStencil()",
                "cc.RenderTexture:getClearDepth()",
                "cc.RenderTexture:getClearStencil()",
                "cc.RenderTexture:end()",
                "cc.RenderTexture:setClearStencil()",
                "cc.RenderTexture:setSprite()",
                "cc.RenderTexture:getSprite()",
                "cc.RenderTexture:isAutoDraw()",
                "cc.RenderTexture:setKeepMatrix()",
                "cc.RenderTexture:setClearFlags()",
                "cc.RenderTexture:begin()",
                "cc.RenderTexture:saveToFile()",
                "cc.RenderTexture:setAutoDraw()",
                "cc.RenderTexture:setClearColor()",
                "cc.RenderTexture:endToLua()",
                "cc.RenderTexture:beginWithClear()",
                "cc.RenderTexture:clearDepth()",
                "cc.RenderTexture:getClearColor()",
                "cc.RenderTexture:clear()",
                "cc.RenderTexture:getClearFlags()",
                "cc.RenderTexture:newImage()",
                "cc.RenderTexture:setClearDepth()",
                "cc.RenderTexture:initWithWidthAndHeight()",
                "cc.RenderTexture:create()",
                "cc.RenderTexture:constructor()",
                "cc.RenderTexture:finalize()",
                "cc.TransitionEaseScene:easeActionWithAction()",
                "cc.TransitionEaseScene:finalize()",
                "cc.TransitionScene:getInScene()",
                "cc.TransitionScene:finish()",
                "cc.TransitionScene:initWithDuration()",
                "cc.TransitionScene:getDuration()",
                "cc.TransitionScene:hideOutShowIn()",
                "cc.TransitionScene:create()",
                "cc.TransitionScene:constructor()",
                "cc.TransitionScene:finalize()",
                "cc.TransitionSceneOriented:initWithDuration()",
                "cc.TransitionSceneOriented:create()",
                "cc.TransitionSceneOriented:constructor()",
                "cc.TransitionSceneOriented:finalize()",
                "cc.TransitionRotoZoom:create()",
                "cc.TransitionRotoZoom:constructor()",
                "cc.TransitionRotoZoom:finalize()",
                "cc.TransitionJumpZoom:create()",
                "cc.TransitionJumpZoom:constructor()",
                "cc.TransitionJumpZoom:finalize()",
                "cc.TransitionMoveInL:action()",
                "cc.TransitionMoveInL:easeActionWithAction()",
                "cc.TransitionMoveInL:create()",
                "cc.TransitionMoveInL:constructor()",
                "cc.TransitionMoveInL:finalize()",
                "cc.TransitionMoveInR:create()",
                "cc.TransitionMoveInR:constructor()",
                "cc.TransitionMoveInR:finalize()",
                "cc.TransitionMoveInT:create()",
                "cc.TransitionMoveInT:constructor()",
                "cc.TransitionMoveInT:finalize()",
                "cc.TransitionMoveInB:create()",
                "cc.TransitionMoveInB:constructor()",
                "cc.TransitionMoveInB:finalize()",
                "cc.TransitionSlideInL:action()",
                "cc.TransitionSlideInL:easeActionWithAction()",
                "cc.TransitionSlideInL:create()",
                "cc.TransitionSlideInL:constructor()",
                "cc.TransitionSlideInL:finalize()",
                "cc.TransitionSlideInR:create()",
                "cc.TransitionSlideInR:constructor()",
                "cc.TransitionSlideInR:finalize()",
                "cc.TransitionSlideInB:create()",
                "cc.TransitionSlideInB:constructor()",
                "cc.TransitionSlideInB:finalize()",
                "cc.TransitionSlideInT:create()",
                "cc.TransitionSlideInT:constructor()",
                "cc.TransitionSlideInT:finalize()",
                "cc.TransitionShrinkGrow:easeActionWithAction()",
                "cc.TransitionShrinkGrow:create()",
                "cc.TransitionShrinkGrow:constructor()",
                "cc.TransitionShrinkGrow:finalize()",
                "cc.TransitionFlipX:create()",
                "cc.TransitionFlipX:constructor()",
                "cc.TransitionFlipX:finalize()",
                "cc.TransitionFlipY:create()",
                "cc.TransitionFlipY:constructor()",
                "cc.TransitionFlipY:finalize()",
                "cc.TransitionFlipAngular:create()",
                "cc.TransitionFlipAngular:constructor()",
                "cc.TransitionFlipAngular:finalize()",
                "cc.TransitionZoomFlipX:create()",
                "cc.TransitionZoomFlipX:constructor()",
                "cc.TransitionZoomFlipX:finalize()",
                "cc.TransitionZoomFlipY:create()",
                "cc.TransitionZoomFlipY:constructor()",
                "cc.TransitionZoomFlipY:finalize()",
                "cc.TransitionZoomFlipAngular:create()",
                "cc.TransitionZoomFlipAngular:constructor()",
                "cc.TransitionZoomFlipAngular:finalize()",
                "cc.TransitionFade:initWithDuration()",
                "cc.TransitionFade:create()",
                "cc.TransitionFade:constructor()",
                "cc.TransitionFade:finalize()",
                "cc.TransitionCrossFade:create()",
                "cc.TransitionCrossFade:constructor()",
                "cc.TransitionCrossFade:finalize()",
                "cc.TransitionTurnOffTiles:easeActionWithAction()",
                "cc.TransitionTurnOffTiles:create()",
                "cc.TransitionTurnOffTiles:constructor()",
                "cc.TransitionTurnOffTiles:finalize()",
                "cc.TransitionSplitCols:action()",
                "cc.TransitionSplitCols:easeActionWithAction()",
                "cc.TransitionSplitCols:create()",
                "cc.TransitionSplitCols:constructor()",
                "cc.TransitionSplitCols:finalize()",
                "cc.TransitionSplitRows:create()",
                "cc.TransitionSplitRows:constructor()",
                "cc.TransitionSplitRows:finalize()",
                "cc.TransitionFadeTR:easeActionWithAction()",
                "cc.TransitionFadeTR:actionWithSize()",
                "cc.TransitionFadeTR:create()",
                "cc.TransitionFadeTR:constructor()",
                "cc.TransitionFadeTR:finalize()",
                "cc.TransitionFadeBL:create()",
                "cc.TransitionFadeBL:constructor()",
                "cc.TransitionFadeBL:finalize()",
                "cc.TransitionFadeUp:create()",
                "cc.TransitionFadeUp:constructor()",
                "cc.TransitionFadeUp:finalize()",
                "cc.TransitionFadeDown:create()",
                "cc.TransitionFadeDown:constructor()",
                "cc.TransitionFadeDown:finalize()",
                "cc.TransitionPageTurn:actionWithSize()",
                "cc.TransitionPageTurn:initWithDuration()",
                "cc.TransitionPageTurn:create()",
                "cc.TransitionPageTurn:constructor()",
                "cc.TransitionPageTurn:finalize()",
                "cc.TransitionProgress:create()",
                "cc.TransitionProgress:constructor()",
                "cc.TransitionProgress:finalize()",
                "cc.TransitionProgressRadialCCW:create()",
                "cc.TransitionProgressRadialCCW:constructor()",
                "cc.TransitionProgressRadialCCW:finalize()",
                "cc.TransitionProgressRadialCW:create()",
                "cc.TransitionProgressRadialCW:constructor()",
                "cc.TransitionProgressRadialCW:finalize()",
                "cc.TransitionProgressHorizontal:create()",
                "cc.TransitionProgressHorizontal:constructor()",
                "cc.TransitionProgressHorizontal:finalize()",
                "cc.TransitionProgressVertical:create()",
                "cc.TransitionProgressVertical:constructor()",
                "cc.TransitionProgressVertical:finalize()",
                "cc.TransitionProgressInOut:create()",
                "cc.TransitionProgressInOut:constructor()",
                "cc.TransitionProgressInOut:finalize()",
                "cc.TransitionProgressOutIn:create()",
                "cc.TransitionProgressOutIn:constructor()",
                "cc.TransitionProgressOutIn:finalize()",
                "cc.Camera:getDepth()",
                "cc.Camera:getViewProjectionMatrix()",
                "cc.Camera:applyViewport()",
                "cc.Camera:setBackgroundBrush()",
                "cc.Camera:lookAt()",
                "cc.Camera:apply()",
                "cc.Camera:getBackgroundBrush()",
                "cc.Camera:getProjectionMatrix()",
                "cc.Camera:getDepthInView()",
                "cc.Camera:clearBackground()",
                "cc.Camera:setAdditionalProjection()",
                "cc.Camera:setViewport()",
                "cc.Camera:initDefault()",
                "cc.Camera:getCameraFlag()",
                "cc.Camera:getType()",
                "cc.Camera:initOrthographic()",
                "cc.Camera:getRenderOrder()",
                "cc.Camera:isVisibleInFrustum()",
                "cc.Camera:setDepth()",
                "cc.Camera:setScene()",
                "cc.Camera:projectGL()",
                "cc.Camera:getViewMatrix()",
                "cc.Camera:getNearPlane()",
                "cc.Camera:project()",
                "cc.Camera:setCameraFlag()",
                "cc.Camera:getFarPlane()",
                "cc.Camera:applyFrameBufferObject()",
                "cc.Camera:setFrameBufferObject()",
                "cc.Camera:isViewProjectionUpdated()",
                "cc.Camera:initPerspective()",
                "cc.Camera:createOrthographic()",
                "cc.Camera:getVisitingCamera()",
                "cc.Camera:create()",
                "cc.Camera:createPerspective()",
                "cc.Camera:getDefaultViewport()",
                "cc.Camera:setDefaultViewport()",
                "cc.Camera:getDefaultCamera()",
                "cc.Camera:constructor()",
                "cc.Camera:finalize()",
                "cc.CameraBackgroundBrush:getBrushType()",
                "cc.CameraBackgroundBrush:drawBackground()",
                "cc.CameraBackgroundBrush:init()",
                "cc.CameraBackgroundBrush:createSkyboxBrush()",
                "cc.CameraBackgroundBrush:createColorBrush()",
                "cc.CameraBackgroundBrush:createNoneBrush()",
                "cc.CameraBackgroundBrush:createDepthBrush()",
                "cc.CameraBackgroundBrush:constructor()",
                "cc.CameraBackgroundBrush:finalize()",
                "cc.CameraBackgroundDepthBrush:setDepth()",
                "cc.CameraBackgroundDepthBrush:create()",
                "cc.CameraBackgroundDepthBrush:constructor()",
                "cc.CameraBackgroundDepthBrush:finalize()",
                "cc.CameraBackgroundColorBrush:setColor()",
                "cc.CameraBackgroundColorBrush:create()",
                "cc.CameraBackgroundColorBrush:constructor()",
                "cc.CameraBackgroundColorBrush:finalize()",
                "cc.CameraBackgroundSkyBoxBrush:setTexture()",
                "cc.CameraBackgroundSkyBoxBrush:create()",
                "cc.CameraBackgroundSkyBoxBrush:constructor()",
                "cc.CameraBackgroundSkyBoxBrush:finalize()",
                "cc.GridBase:setGridSize()",
                "cc.GridBase:setGridRect()",
                "cc.GridBase:afterBlit()",
                "cc.GridBase:getGridRect()",
                "cc.GridBase:afterDraw()",
                "cc.GridBase:beforeDraw()",
                "cc.GridBase:calculateVertexPoints()",
                "cc.GridBase:isTextureFlipped()",
                "cc.GridBase:getGridSize()",
                "cc.GridBase:getStep()",
                "cc.GridBase:set2DProjection()",
                "cc.GridBase:setStep()",
                "cc.GridBase:setTextureFlipped()",
                "cc.GridBase:blit()",
                "cc.GridBase:setActive()",
                "cc.GridBase:getReuseGrid()",
                "cc.GridBase:initWithSize()",
                "cc.GridBase:beforeBlit()",
                "cc.GridBase:setReuseGrid()",
                "cc.GridBase:isActive()",
                "cc.GridBase:reuse()",
                "cc.GridBase:create()",
                "cc.GridBase:finalize()",
                "cc.Grid3D:getNeedDepthTestForBlit()",
                "cc.Grid3D:setNeedDepthTestForBlit()",
                "cc.Grid3D:create()",
                "cc.Grid3D:constructor()",
                "cc.Grid3D:finalize()",
                "cc.TiledGrid3D:create()",
                "cc.TiledGrid3D:constructor()",
                "cc.TiledGrid3D:finalize()",
                "cc.BaseLight:setEnabled()",
                "cc.BaseLight:getIntensity()",
                "cc.BaseLight:isEnabled()",
                "cc.BaseLight:getLightType()",
                "cc.BaseLight:setLightFlag()",
                "cc.BaseLight:setIntensity()",
                "cc.BaseLight:getLightFlag()",
                "cc.BaseLight:finalize()",
                "cc.DirectionLight:getDirection()",
                "cc.DirectionLight:getDirectionInWorld()",
                "cc.DirectionLight:setDirection()",
                "cc.DirectionLight:create()",
                "cc.DirectionLight:constructor()",
                "cc.DirectionLight:finalize()",
                "cc.PointLight:getRange()",
                "cc.PointLight:setRange()",
                "cc.PointLight:create()",
                "cc.PointLight:constructor()",
                "cc.PointLight:finalize()",
                "cc.SpotLight:getRange()",
                "cc.SpotLight:setDirection()",
                "cc.SpotLight:getCosInnerAngle()",
                "cc.SpotLight:getOuterAngle()",
                "cc.SpotLight:getInnerAngle()",
                "cc.SpotLight:getDirection()",
                "cc.SpotLight:getCosOuterAngle()",
                "cc.SpotLight:setOuterAngle()",
                "cc.SpotLight:setInnerAngle()",
                "cc.SpotLight:getDirectionInWorld()",
                "cc.SpotLight:setRange()",
                "cc.SpotLight:create()",
                "cc.SpotLight:constructor()",
                "cc.SpotLight:finalize()",
                "cc.AmbientLight:create()",
                "cc.AmbientLight:constructor()",
                "cc.AmbientLight:finalize()",
                "cc.GLProgram:getFragmentShaderLog()",
                "cc.GLProgram:initWithByteArrays()",
                "cc.GLProgram:initWithFilenames()",
                "cc.GLProgram:use()",
                "cc.GLProgram:getVertexShaderLog()",
                "cc.GLProgram:setUniformsForBuiltins()",
                "cc.GLProgram:updateUniforms()",
                "cc.GLProgram:setUniformLocationWith1i()",
                "cc.GLProgram:reset()",
                "cc.GLProgram:bindAttribLocation()",
                "cc.GLProgram:getAttribLocation()",
                "cc.GLProgram:link()",
                "cc.GLProgram:createWithByteArrays()",
                "cc.GLProgram:createWithFilenames()",
                "cc.GLProgram:constructor()",
                "cc.GLProgram:finalize()",
                "cc.GLProgramCache:reloadDefaultGLProgramsRelativeToLights()",
                "cc.GLProgramCache:addGLProgram()",
                "cc.GLProgramCache:reloadDefaultGLPrograms()",
                "cc.GLProgramCache:loadDefaultGLPrograms()",
                "cc.GLProgramCache:getGLProgram()",
                "cc.GLProgramCache:destroyInstance()",
                "cc.GLProgramCache:getInstance()",
                "cc.GLProgramCache:constructor()",
                "cc.GLProgramCache:finalize()",
                "cc.RenderState:setTexture()",
                "cc.RenderState:getTopmost()",
                "cc.RenderState:getTexture()",
                "cc.RenderState:bind()",
                "cc.RenderState:getName()",
                "cc.RenderState:getStateBlock()",
                "cc.RenderState:initialize()",
                "cc.RenderState:finalize()",
                "cc.Pass:unbind()",
                "cc.Pass:bind()",
                "cc.Pass:clone()",
                "cc.Pass:getGLProgramState()",
                "cc.Pass:getVertexAttributeBinding()",
                "cc.Pass:getHash()",
                "cc.Pass:setVertexAttribBinding()",
                "cc.Pass:create()",
                "cc.Pass:createWithGLProgramState()",
                "cc.Pass:finalize()",
                "cc.Technique:getPassCount()",
                "cc.Technique:clone()",
                "cc.Technique:addPass()",
                "cc.Technique:getPasses()",
                "cc.Technique:getName()",
                "cc.Technique:getPassByIndex()",
                "cc.Technique:create()",
                "cc.Technique:createWithGLProgramState()",
                "cc.Technique:finalize()",
                "cc.Material:clone()",
                "cc.Material:getTechniqueCount()",
                "cc.Material:setName()",
                "cc.Material:getTechniqueByIndex()",
                "cc.Material:getName()",
                "cc.Material:getTechniques()",
                "cc.Material:setTechnique()",
                "cc.Material:getTechniqueByName()",
                "cc.Material:addTechnique()",
                "cc.Material:getTechnique()",
                "cc.Material:createWithFilename()",
                "cc.Material:createWithGLStateProgram()",
                "cc.Material:createWithProperties()",
                "cc.Material:finalize()",
                "cc.TextureCache:reloadTexture()",
                "cc.TextureCache:unbindAllImageAsync()",
                "cc.TextureCache:removeTextureForKey()",
                "cc.TextureCache:removeAllTextures()",
                "cc.TextureCache:getDescription()",
                "cc.TextureCache:getCachedTextureInfo()",
                "cc.TextureCache:addImage()",
                "cc.TextureCache:unbindImageAsync()",
                "cc.TextureCache:getTextureForKey()",
                "cc.TextureCache:getTextureFilePath()",
                "cc.TextureCache:removeUnusedTextures()",
                "cc.TextureCache:removeTexture()",
                "cc.TextureCache:waitForQuit()",
                "cc.TextureCache:constructor()",
                "cc.TextureCache:finalize()",
                "cc.Device:setAccelerometerEnabled()",
                "cc.Device:setAccelerometerInterval()",
                "cc.Device:setKeepScreenOn()",
                "cc.Device:vibrate()",
                "cc.Device:getDPI()",
                "cc.Device:finalize()",
                "cc.Application:openURL()",
                "cc.Application:getTargetPlatform()",
                "cc.Application:getCurrentLanguage()",
                "cc.Application:getCurrentLanguageCode()",
                "cc.Application:setAnimationInterval()",
                "cc.Application:getInstance()",
                "cc.Application:finalize()",
                "cc.GLViewImpl:createWithRect()",
                "cc.GLViewImpl:create()",
                "cc.GLViewImpl:createWithFullScreen()",
                "cc.GLViewImpl:finalize()",
                "cc.AnimationCache:getAnimation()",
                "cc.AnimationCache:addAnimation()",
                "cc.AnimationCache:init()",
                "cc.AnimationCache:addAnimationsWithDictionary()",
                "cc.AnimationCache:removeAnimation()",
                "cc.AnimationCache:addAnimationsWithFile()",
                "cc.AnimationCache:destroyInstance()",
                "cc.AnimationCache:getInstance()",
                "cc.AnimationCache:constructor()",
                "cc.AnimationCache:finalize()",
                "cc.SpriteBatchNode:appendChild()",
                "cc.SpriteBatchNode:reorderBatch()",
                "cc.SpriteBatchNode:getTexture()",
                "cc.SpriteBatchNode:setTexture()",
                "cc.SpriteBatchNode:removeChildAtIndex()",
                "cc.SpriteBatchNode:removeSpriteFromAtlas()",
                "cc.SpriteBatchNode:addSpriteWithoutQuad()",
                "cc.SpriteBatchNode:atlasIndexForChild()",
                "cc.SpriteBatchNode:increaseAtlasCapacity()",
                "cc.SpriteBatchNode:lowestAtlasIndexInChild()",
                "cc.SpriteBatchNode:getBlendFunc()",
                "cc.SpriteBatchNode:initWithTexture()",
                "cc.SpriteBatchNode:setTextureAtlas()",
                "cc.SpriteBatchNode:removeAllChildrenWithCleanup()",
                "cc.SpriteBatchNode:insertQuadFromSprite()",
                "cc.SpriteBatchNode:initWithFile()",
                "cc.SpriteBatchNode:setBlendFunc()",
                "cc.SpriteBatchNode:rebuildIndexInOrder()",
                "cc.SpriteBatchNode:getTextureAtlas()",
                "cc.SpriteBatchNode:highestAtlasIndexInChild()",
                "cc.SpriteBatchNode:create()",
                "cc.SpriteBatchNode:createWithTexture()",
                "cc.SpriteBatchNode:constructor()",
                "cc.SpriteBatchNode:finalize()",
                "cc.SpriteFrameCache:addSpriteFramesWithFileContent()",
                "cc.SpriteFrameCache:addSpriteFrame()",
                "cc.SpriteFrameCache:addSpriteFramesWithFile()",
                "cc.SpriteFrameCache:getSpriteFrameByName()",
                "cc.SpriteFrameCache:removeSpriteFramesFromFile()",
                "cc.SpriteFrameCache:init()",
                "cc.SpriteFrameCache:removeSpriteFrames()",
                "cc.SpriteFrameCache:removeUnusedSpriteFrames()",
                "cc.SpriteFrameCache:removeSpriteFramesFromFileContent()",
                "cc.SpriteFrameCache:removeSpriteFrameByName()",
                "cc.SpriteFrameCache:isSpriteFramesWithFileLoaded()",
                "cc.SpriteFrameCache:removeSpriteFramesFromTexture()",
                "cc.SpriteFrameCache:destroyInstance()",
                "cc.SpriteFrameCache:getInstance()",
                "cc.SpriteFrameCache:finalize()",
                "cc.ParallaxNode:addChild()",
                "cc.ParallaxNode:removeAllChildrenWithCleanup()",
                "cc.ParallaxNode:create()",
                "cc.ParallaxNode:constructor()",
                "cc.ParallaxNode:finalize()",
                "cc.TMXObjectGroup:setPositionOffset()",
                "cc.TMXObjectGroup:getProperty()",
                "cc.TMXObjectGroup:getPositionOffset()",
                "cc.TMXObjectGroup:getObject()",
                "cc.TMXObjectGroup:getObjects()",
                "cc.TMXObjectGroup:setGroupName()",
                "cc.TMXObjectGroup:getProperties()",
                "cc.TMXObjectGroup:getGroupName()",
                "cc.TMXObjectGroup:setProperties()",
                "cc.TMXObjectGroup:setObjects()",
                "cc.TMXObjectGroup:constructor()",
                "cc.TMXObjectGroup:finalize()",
                "cc.TMXLayerInfo:setProperties()",
                "cc.TMXLayerInfo:getProperties()",
                "cc.TMXLayerInfo:constructor()",
                "cc.TMXLayerInfo:finalize()",
                "cc.TMXTilesetInfo:getRectForGID()",
                "cc.TMXTilesetInfo:constructor()",
                "cc.TMXTilesetInfo:finalize()",
                "cc.TMXMapInfo:setObjectGroups()",
                "cc.TMXMapInfo:setTileSize()",
                "cc.TMXMapInfo:initWithTMXFile()",
                "cc.TMXMapInfo:getOrientation()",
                "cc.TMXMapInfo:isStoringCharacters()",
                "cc.TMXMapInfo:setLayers()",
                "cc.TMXMapInfo:parseXMLFile()",
                "cc.TMXMapInfo:getParentElement()",
                "cc.TMXMapInfo:setTMXFileName()",
                "cc.TMXMapInfo:parseXMLString()",
                "cc.TMXMapInfo:getLayers()",
                "cc.TMXMapInfo:getTilesets()",
                "cc.TMXMapInfo:getParentGID()",
                "cc.TMXMapInfo:setParentElement()",
                "cc.TMXMapInfo:initWithXML()",
                "cc.TMXMapInfo:setParentGID()",
                "cc.TMXMapInfo:getLayerAttribs()",
                "cc.TMXMapInfo:getTileSize()",
                "cc.TMXMapInfo:getTileProperties()",
                "cc.TMXMapInfo:getObjectGroups()",
                "cc.TMXMapInfo:getTMXFileName()",
                "cc.TMXMapInfo:setCurrentString()",
                "cc.TMXMapInfo:setProperties()",
                "cc.TMXMapInfo:setOrientation()",
                "cc.TMXMapInfo:setTileProperties()",
                "cc.TMXMapInfo:setMapSize()",
                "cc.TMXMapInfo:setStoringCharacters()",
                "cc.TMXMapInfo:getMapSize()",
                "cc.TMXMapInfo:setTilesets()",
                "cc.TMXMapInfo:getProperties()",
                "cc.TMXMapInfo:getCurrentString()",
                "cc.TMXMapInfo:setLayerAttribs()",
                "cc.TMXMapInfo:create()",
                "cc.TMXMapInfo:createWithXML()",
                "cc.TMXMapInfo:constructor()",
                "cc.TMXMapInfo:finalize()",
                "cc.TMXLayer:getPositionAt()",
                "cc.TMXLayer:setLayerOrientation()",
                "cc.TMXLayer:releaseMap()",
                "cc.TMXLayer:getLayerSize()",
                "cc.TMXLayer:setMapTileSize()",
                "cc.TMXLayer:getLayerOrientation()",
                "cc.TMXLayer:setProperties()",
                "cc.TMXLayer:setLayerName()",
                "cc.TMXLayer:removeTileAt()",
                "cc.TMXLayer:initWithTilesetInfo()",
                "cc.TMXLayer:setupTiles()",
                "cc.TMXLayer:setTileGID()",
                "cc.TMXLayer:getMapTileSize()",
                "cc.TMXLayer:getProperty()",
                "cc.TMXLayer:setLayerSize()",
                "cc.TMXLayer:getLayerName()",
                "cc.TMXLayer:setTileSet()",
                "cc.TMXLayer:getTileSet()",
                "cc.TMXLayer:getProperties()",
                "cc.TMXLayer:getTileAt()",
                "cc.TMXLayer:create()",
                "cc.TMXLayer:constructor()",
                "cc.TMXLayer:finalize()",
                "cc.TMXTiledMap:setObjectGroups()",
                "cc.TMXTiledMap:getProperty()",
                "cc.TMXTiledMap:setMapSize()",
                "cc.TMXTiledMap:getObjectGroup()",
                "cc.TMXTiledMap:getObjectGroups()",
                "cc.TMXTiledMap:initWithXML()",
                "cc.TMXTiledMap:initWithTMXFile()",
                "cc.TMXTiledMap:getTileSize()",
                "cc.TMXTiledMap:getMapSize()",
                "cc.TMXTiledMap:getProperties()",
                "cc.TMXTiledMap:setTileSize()",
                "cc.TMXTiledMap:setProperties()",
                "cc.TMXTiledMap:getLayer()",
                "cc.TMXTiledMap:getMapOrientation()",
                "cc.TMXTiledMap:setMapOrientation()",
                "cc.TMXTiledMap:create()",
                "cc.TMXTiledMap:createWithXML()",
                "cc.TMXTiledMap:constructor()",
                "cc.TMXTiledMap:finalize()",
                "cc.TileMapAtlas:initWithTileFile()",
                "cc.TileMapAtlas:releaseMap()",
                "cc.TileMapAtlas:getTileAt()",
                "cc.TileMapAtlas:setTile()",
                "cc.TileMapAtlas:create()",
                "cc.TileMapAtlas:constructor()",
                "cc.TileMapAtlas:finalize()",
                "cc.Component:setEnabled()",
                "cc.Component:setName()",
                "cc.Component:isEnabled()",
                "cc.Component:onRemove()",
                "cc.Component:update()",
                "cc.Component:getOwner()",
                "cc.Component:init()",
                "cc.Component:onAdd()",
                "cc.Component:getName()",
                "cc.Component:setOwner()",
                "cc.Component:create()",
                "cc.Component:finalize()",
                "cc.CCBAnimationManager:moveAnimationsFromNode()",
                "cc.CCBAnimationManager:setAutoPlaySequenceId()",
                "cc.CCBAnimationManager:getDocumentCallbackNames()",
                "cc.CCBAnimationManager:actionForSoundChannel()",
                "cc.CCBAnimationManager:setBaseValue()",
                "cc.CCBAnimationManager:getDocumentOutletNodes()",
                "cc.CCBAnimationManager:getLastCompletedSequenceName()",
                "cc.CCBAnimationManager:setRootNode()",
                "cc.CCBAnimationManager:runAnimationsForSequenceNamedTweenDuration()",
                "cc.CCBAnimationManager:addDocumentOutletName()",
                "cc.CCBAnimationManager:getSequences()",
                "cc.CCBAnimationManager:getRootContainerSize()",
                "cc.CCBAnimationManager:setDocumentControllerName()",
                "cc.CCBAnimationManager:setObject()",
                "cc.CCBAnimationManager:getContainerSize()",
                "cc.CCBAnimationManager:actionForCallbackChannel()",
                "cc.CCBAnimationManager:getDocumentOutletNames()",
                "cc.CCBAnimationManager:addDocumentCallbackControlEvents()",
                "cc.CCBAnimationManager:init()",
                "cc.CCBAnimationManager:getKeyframeCallbacks()",
                "cc.CCBAnimationManager:getDocumentCallbackControlEvents()",
                "cc.CCBAnimationManager:setRootContainerSize()",
                "cc.CCBAnimationManager:runAnimationsForSequenceIdTweenDuration()",
                "cc.CCBAnimationManager:getRunningSequenceName()",
                "cc.CCBAnimationManager:getAutoPlaySequenceId()",
                "cc.CCBAnimationManager:addDocumentCallbackName()",
                "cc.CCBAnimationManager:getRootNode()",
                "cc.CCBAnimationManager:addDocumentOutletNode()",
                "cc.CCBAnimationManager:getSequenceDuration()",
                "cc.CCBAnimationManager:addDocumentCallbackNode()",
                "cc.CCBAnimationManager:runAnimationsForSequenceNamed()",
                "cc.CCBAnimationManager:getSequenceId()",
                "cc.CCBAnimationManager:getDocumentCallbackNodes()",
                "cc.CCBAnimationManager:setSequences()",
                "cc.CCBAnimationManager:debug()",
                "cc.CCBAnimationManager:getDocumentControllerName()",
                "cc.CCBAnimationManager:constructor()",
                "cc.CCBAnimationManager:finalize()",
                "cc.CCBReader:addOwnerOutletName()",
                "cc.CCBReader:getOwnerCallbackNames()",
                "cc.CCBReader:addDocumentCallbackControlEvents()",
                "cc.CCBReader:setCCBRootPath()",
                "cc.CCBReader:addOwnerOutletNode()",
                "cc.CCBReader:getOwnerCallbackNodes()",
                "cc.CCBReader:readSoundKeyframesForSeq()",
                "cc.CCBReader:getCCBRootPath()",
                "cc.CCBReader:getOwnerCallbackControlEvents()",
                "cc.CCBReader:getOwnerOutletNodes()",
                "cc.CCBReader:readUTF8()",
                "cc.CCBReader:addOwnerCallbackControlEvents()",
                "cc.CCBReader:getOwnerOutletNames()",
                "cc.CCBReader:setAnimationManager()",
                "cc.CCBReader:readCallbackKeyframesForSeq()",
                "cc.CCBReader:getAnimationManagersForNodes()",
                "cc.CCBReader:getNodesWithAnimationManagers()",
                "cc.CCBReader:getAnimationManager()",
                "cc.CCBReader:setResolutionScale()",
                "cc.CCBReader:constructor()",
                "cc.CCBReader:finalize()",
                "cc.SimpleAudioEngine:preloadBackgroundMusic()",
                "cc.SimpleAudioEngine:stopBackgroundMusic()",
                "cc.SimpleAudioEngine:stopAllEffects()",
                "cc.SimpleAudioEngine:getBackgroundMusicVolume()",
                "cc.SimpleAudioEngine:resumeBackgroundMusic()",
                "cc.SimpleAudioEngine:setBackgroundMusicVolume()",
                "cc.SimpleAudioEngine:preloadEffect()",
                "cc.SimpleAudioEngine:isBackgroundMusicPlaying()",
                "cc.SimpleAudioEngine:getEffectsVolume()",
                "cc.SimpleAudioEngine:willPlayBackgroundMusic()",
                "cc.SimpleAudioEngine:pauseEffect()",
                "cc.SimpleAudioEngine:playEffect()",
                "cc.SimpleAudioEngine:rewindBackgroundMusic()",
                "cc.SimpleAudioEngine:playBackgroundMusic()",
                "cc.SimpleAudioEngine:resumeAllEffects()",
                "cc.SimpleAudioEngine:setEffectsVolume()",
                "cc.SimpleAudioEngine:stopEffect()",
                "cc.SimpleAudioEngine:pauseBackgroundMusic()",
                "cc.SimpleAudioEngine:pauseAllEffects()",
                "cc.SimpleAudioEngine:unloadEffect()",
                "cc.SimpleAudioEngine:resumeEffect()",
                "cc.SimpleAudioEngine:end()",
                "cc.SimpleAudioEngine:getInstance()",
                "cc.SimpleAudioEngine:finalize()",
                "cc.Controller:receiveExternalKeyEvent()",
                "cc.Controller:getDeviceName()",
                "cc.Controller:isConnected()",
                "cc.Controller:getDeviceId()",
                "cc.Controller:setTag()",
                "cc.Controller:getTag()",
                "cc.Controller:startDiscoveryController()",
                "cc.Controller:stopDiscoveryController()",
                "cc.Controller:getControllerByTag()",
                "cc.Controller:finalize()",
                "cc.EventController:getControllerEventType()",
                "cc.EventController:setConnectStatus()",
                "cc.EventController:isConnected()",
                "cc.EventController:setKeyCode()",
                "cc.EventController:getController()",
                "cc.EventController:getKeyCode()",
                "cc.EventController:constructor()",
                "cc.EventController:finalize()",
                "cc.EventListenerController:create()",
                "cc.EventListenerController:finalize()",
                "cc.CSLoader:createNodeFromJson()",
                "cc.CSLoader:createNodeWithFlatBuffersFile()",
                "cc.CSLoader:loadNodeWithFile()",
                "cc.CSLoader:bindCallback()",
                "cc.CSLoader:setJsonPath()",
                "cc.CSLoader:init()",
                "cc.CSLoader:loadNodeWithContent()",
                "cc.CSLoader:isRecordJsonPath()",
                "cc.CSLoader:getJsonPath()",
                "cc.CSLoader:setRecordJsonPath()",
                "cc.CSLoader:createNodeWithFlatBuffersForSimulator()",
                "cc.CSLoader:destroyInstance()",
                "cc.CSLoader:getInstance()",
                "cc.CSLoader:constructor()",
                "cc.CSLoader:finalize()",
                "ccexp.TMXLayer:getPositionAt()",
                "ccexp.TMXLayer:setLayerOrientation()",
                "ccexp.TMXLayer:getLayerSize()",
                "ccexp.TMXLayer:setMapTileSize()",
                "ccexp.TMXLayer:getLayerOrientation()",
                "ccexp.TMXLayer:setProperties()",
                "ccexp.TMXLayer:setLayerName()",
                "ccexp.TMXLayer:removeTileAt()",
                "ccexp.TMXLayer:getProperties()",
                "ccexp.TMXLayer:setupTiles()",
                "ccexp.TMXLayer:setupTileSprite()",
                "ccexp.TMXLayer:setTileGID()",
                "ccexp.TMXLayer:getMapTileSize()",
                "ccexp.TMXLayer:getProperty()",
                "ccexp.TMXLayer:setLayerSize()",
                "ccexp.TMXLayer:getLayerName()",
                "ccexp.TMXLayer:setTileSet()",
                "ccexp.TMXLayer:getTileSet()",
                "ccexp.TMXLayer:getTileAt()",
                "ccexp.TMXLayer:create()",
                "ccexp.TMXLayer:constructor()",
                "ccexp.TMXLayer:finalize()",
                "ccexp.TMXTiledMap:setObjectGroups()",
                "ccexp.TMXTiledMap:getProperty()",
                "ccexp.TMXTiledMap:setMapSize()",
                "ccexp.TMXTiledMap:getObjectGroup()",
                "ccexp.TMXTiledMap:getObjectGroups()",
                "ccexp.TMXTiledMap:getTileSize()",
                "ccexp.TMXTiledMap:getMapSize()",
                "ccexp.TMXTiledMap:getProperties()",
                "ccexp.TMXTiledMap:getPropertiesForGID()",
                "ccexp.TMXTiledMap:setTileSize()",
                "ccexp.TMXTiledMap:setProperties()",
                "ccexp.TMXTiledMap:getLayer()",
                "ccexp.TMXTiledMap:getMapOrientation()",
                "ccexp.TMXTiledMap:setMapOrientation()",
                "ccexp.TMXTiledMap:create()",
                "ccexp.TMXTiledMap:createWithXML()",
                "ccexp.TMXTiledMap:finalize()",
                "ccexp.VideoPlayer:getFileName()",
                "ccexp.VideoPlayer:getURL()",
                "ccexp.VideoPlayer:play()",
                "ccexp.VideoPlayer:setKeepAspectRatioEnabled()",
                "ccexp.VideoPlayer:stop()",
                "ccexp.VideoPlayer:setFullScreenEnabled()",
                "ccexp.VideoPlayer:setFileName()",
                "ccexp.VideoPlayer:setURL()",
                "ccexp.VideoPlayer:isKeepAspectRatioEnabled()",
                "ccexp.VideoPlayer:onPlayEvent()",
                "ccexp.VideoPlayer:isFullScreenEnabled()",
                "ccexp.VideoPlayer:isPlaying()",
                "ccexp.VideoPlayer:seekTo()",
                "ccexp.VideoPlayer:create()",
                "ccexp.VideoPlayer:constructor()",
                "ccexp.VideoPlayer:finalize()",
                "ccexp.WebView:canGoBack()",
                "ccexp.WebView:loadHTMLString()",
                "ccexp.WebView:goForward()",
                "ccexp.WebView:goBack()",
                "ccexp.WebView:setScalesPageToFit()",
                "ccexp.WebView:loadFile()",
                "ccexp.WebView:loadURL()",
                "ccexp.WebView:evaluateJS()",
                "ccexp.WebView:getOnJSCallback()",
                "ccexp.WebView:canGoForward()",
                "ccexp.WebView:stopLoading()",
                "ccexp.WebView:reload()",
                "ccexp.WebView:setJavascriptInterfaceScheme()",
                "ccexp.WebView:create()",
                "ccexp.WebView:constructor()",
                "ccexp.WebView:finalize()",
                "cc.Control:setEnabled()",
                "cc.Control:getState()",
                "cc.Control:sendActionsForControlEvents()",
                "cc.Control:setSelected()",
                "cc.Control:isEnabled()",
                "cc.Control:needsLayout()",
                "cc.Control:hasVisibleParents()",
                "cc.Control:isSelected()",
                "cc.Control:isTouchInside()",
                "cc.Control:setHighlighted()",
                "cc.Control:getTouchLocation()",
                "cc.Control:isHighlighted()",
                "cc.Control:create()",
                "cc.Control:constructor()",
                "cc.Control:finalize()",
                "cc.ControlButton:isPushed()",
                "cc.ControlButton:setTitleLabelForState()",
                "cc.ControlButton:setAdjustBackgroundImage()",
                "cc.ControlButton:setTitleForState()",
                "cc.ControlButton:setLabelAnchorPoint()",
                "cc.ControlButton:getLabelAnchorPoint()",
                "cc.ControlButton:initWithBackgroundSprite()",
                "cc.ControlButton:getTitleTTFSizeForState()",
                "cc.ControlButton:setTitleTTFForState()",
                "cc.ControlButton:setTitleTTFSizeForState()",
                "cc.ControlButton:setTitleLabel()",
                "cc.ControlButton:setPreferredSize()",
                "cc.ControlButton:getCurrentTitleColor()",
                "cc.ControlButton:setZoomOnTouchDown()",
                "cc.ControlButton:setBackgroundSprite()",
                "cc.ControlButton:getBackgroundSpriteForState()",
                "cc.ControlButton:getHorizontalOrigin()",
                "cc.ControlButton:initWithTitleAndFontNameAndFontSize()",
                "cc.ControlButton:setTitleBMFontForState()",
                "cc.ControlButton:getScaleRatio()",
                "cc.ControlButton:getTitleTTFForState()",
                "cc.ControlButton:getBackgroundSprite()",
                "cc.ControlButton:getTitleColorForState()",
                "cc.ControlButton:setTitleColorForState()",
                "cc.ControlButton:doesAdjustBackgroundImage()",
                "cc.ControlButton:setBackgroundSpriteFrameForState()",
                "cc.ControlButton:setBackgroundSpriteForState()",
                "cc.ControlButton:setScaleRatio()",
                "cc.ControlButton:getTitleBMFontForState()",
                "cc.ControlButton:getTitleLabel()",
                "cc.ControlButton:getPreferredSize()",
                "cc.ControlButton:getVerticalMargin()",
                "cc.ControlButton:getTitleLabelForState()",
                "cc.ControlButton:setMargins()",
                "cc.ControlButton:getCurrentTitle()",
                "cc.ControlButton:initWithLabelAndBackgroundSprite()",
                "cc.ControlButton:getZoomOnTouchDown()",
                "cc.ControlButton:getTitleForState()",
                "cc.ControlButton:create()",
                "cc.ControlButton:constructor()",
                "cc.ControlButton:finalize()",
                "cc.ControlHuePicker:initWithTargetAndPos()",
                "cc.ControlHuePicker:setHue()",
                "cc.ControlHuePicker:getStartPos()",
                "cc.ControlHuePicker:getHue()",
                "cc.ControlHuePicker:getSlider()",
                "cc.ControlHuePicker:setBackground()",
                "cc.ControlHuePicker:setHuePercentage()",
                "cc.ControlHuePicker:getBackground()",
                "cc.ControlHuePicker:getHuePercentage()",
                "cc.ControlHuePicker:setSlider()",
                "cc.ControlHuePicker:create()",
                "cc.ControlHuePicker:constructor()",
                "cc.ControlHuePicker:finalize()",
                "cc.ControlSaturationBrightnessPicker:getShadow()",
                "cc.ControlSaturationBrightnessPicker:initWithTargetAndPos()",
                "cc.ControlSaturationBrightnessPicker:getStartPos()",
                "cc.ControlSaturationBrightnessPicker:getOverlay()",
                "cc.ControlSaturationBrightnessPicker:getSlider()",
                "cc.ControlSaturationBrightnessPicker:getBackground()",
                "cc.ControlSaturationBrightnessPicker:getSaturation()",
                "cc.ControlSaturationBrightnessPicker:getBrightness()",
                "cc.ControlSaturationBrightnessPicker:create()",
                "cc.ControlSaturationBrightnessPicker:constructor()",
                "cc.ControlSaturationBrightnessPicker:finalize()",
                "cc.ControlColourPicker:hueSliderValueChanged()",
                "cc.ControlColourPicker:getHuePicker()",
                "cc.ControlColourPicker:getcolourPicker()",
                "cc.ControlColourPicker:setBackground()",
                "cc.ControlColourPicker:setcolourPicker()",
                "cc.ControlColourPicker:colourSliderValueChanged()",
                "cc.ControlColourPicker:setHuePicker()",
                "cc.ControlColourPicker:getBackground()",
                "cc.ControlColourPicker:create()",
                "cc.ControlColourPicker:constructor()",
                "cc.ControlColourPicker:finalize()",
                "cc.ControlPotentiometer:setPreviousLocation()",
                "cc.ControlPotentiometer:setValue()",
                "cc.ControlPotentiometer:getProgressTimer()",
                "cc.ControlPotentiometer:getMaximumValue()",
                "cc.toLineFromPoint:toPoint()",
                "cc.ControlPotentiometer:potentiometerBegan()",
                "cc.ControlPotentiometer:setMaximumValue()",
                "cc.ControlPotentiometer:getMinimumValue()",
                "cc.ControlPotentiometer:setThumbSprite()",
                "cc.ControlPotentiometer:getValue()",
                "cc.ControlPotentiometer:getPreviousLocation()",
                "cc.ControlPotentiometer:distanceBetweenPointAndPoint()",
                "cc.ControlPotentiometer:potentiometerEnded()",
                "cc.ControlPotentiometer:setProgressTimer()",
                "cc.ControlPotentiometer:setMinimumValue()",
                "cc.ControlPotentiometer:getThumbSprite()",
                "cc.ProgressTimer:ThumbSprite()",
                "cc.ControlPotentiometer:potentiometerMoved()",
                "cc.ControlPotentiometer:create()",
                "cc.ControlPotentiometer:constructor()",
                "cc.ControlPotentiometer:finalize()",
                "cc.ControlSlider:setBackgroundSprite()",
                "cc.ControlSlider:getMaximumAllowedValue()",
                "cc.ControlSlider:initWithSprites()",
                "cc.ControlSlider:getMinimumAllowedValue()",
                "cc.ControlSlider:getMaximumValue()",
                "cc.ControlSlider:getSelectedThumbSprite()",
                "cc.ControlSlider:setProgressSprite()",
                "cc.ControlSlider:setMaximumValue()",
                "cc.ControlSlider:getMinimumValue()",
                "cc.ControlSlider:setThumbSprite()",
                "cc.ControlSlider:getValue()",
                "cc.ControlSlider:getBackgroundSprite()",
                "cc.ControlSlider:getThumbSprite()",
                "cc.ControlSlider:setValue()",
                "cc.ControlSlider:locationFromTouch()",
                "cc.ControlSlider:setMinimumValue()",
                "cc.ControlSlider:setMinimumAllowedValue()",
                "cc.ControlSlider:getProgressSprite()",
                "cc.ControlSlider:setSelectedThumbSprite()",
                "cc.ControlSlider:setMaximumAllowedValue()",
                "cc.ControlSlider:create()",
                "cc.ControlSlider:constructor()",
                "cc.ControlSlider:finalize()",
                "cc.ControlStepper:getMinusSprite()",
                "cc.ControlStepper:setValue()",
                "cc.ControlStepper:setStepValue()",
                "cc.ControlStepper:initWithMinusSpriteAndPlusSprite()",
                "cc.ControlStepper:setValueWithSendingEvent()",
                "cc.ControlStepper:setMaximumValue()",
                "cc.ControlStepper:getMinusLabel()",
                "cc.ControlStepper:getPlusLabel()",
                "cc.ControlStepper:setWraps()",
                "cc.ControlStepper:setMinusLabel()",
                "cc.ControlStepper:startAutorepeat()",
                "cc.ControlStepper:updateLayoutUsingTouchLocation()",
                "cc.ControlStepper:isContinuous()",
                "cc.ControlStepper:stopAutorepeat()",
                "cc.ControlStepper:setMinimumValue()",
                "cc.ControlStepper:setPlusLabel()",
                "cc.ControlStepper:getValue()",
                "cc.ControlStepper:getPlusSprite()",
                "cc.ControlStepper:setPlusSprite()",
                "cc.ControlStepper:setMinusSprite()",
                "cc.ControlStepper:create()",
                "cc.ControlStepper:constructor()",
                "cc.ControlStepper:finalize()",
                "cc.ControlSwitch:setOn()",
                "cc.ControlSwitch:locationFromTouch()",
                "cc.ControlSwitch:isOn()",
                "cc.ControlSwitch:initWithMaskSprite()",
                "cc.ControlSwitch:hasMoved()",
                "cc.ControlSwitch:create()",
                "cc.ControlSwitch:constructor()",
                "cc.ControlSwitch:finalize()",
                "cc.ScrollView:isClippingToBounds()",
                "cc.ScrollView:setContainer()",
                "cc.ScrollView:setContentOffsetInDuration()",
                "cc.ScrollView:setZoomScaleInDuration()",
                "cc.ScrollView:updateTweenAction()",
                "cc.ScrollView:setMaxScale()",
                "cc.ScrollView:hasVisibleParents()",
                "cc.ScrollView:getDirection()",
                "cc.ScrollView:getContainer()",
                "cc.ScrollView:setMinScale()",
                "cc.ScrollView:getZoomScale()",
                "cc.ScrollView:updateInset()",
                "cc.ScrollView:initWithViewSize()",
                "cc.ScrollView:pause()",
                "cc.ScrollView:setDirection()",
                "cc.ScrollView:setBounceable()",
                "cc.ScrollView:setContentOffset()",
                "cc.ScrollView:isDragging()",
                "cc.ScrollView:isTouchEnabled()",
                "cc.ScrollView:isBounceable()",
                "cc.ScrollView:setTouchEnabled()",
                "cc.ScrollView:getContentOffset()",
                "cc.ScrollView:resume()",
                "cc.ScrollView:setClippingToBounds()",
                "cc.ScrollView:setViewSize()",
                "cc.ScrollView:getViewSize()",
                "cc.ScrollView:maxContainerOffset()",
                "cc.ScrollView:isTouchMoved()",
                "cc.ScrollView:isNodeVisible()",
                "cc.ScrollView:minContainerOffset()",
                "cc.ScrollView:setZoomScale()",
                "cc.ScrollView:create()",
                "cc.ScrollView:constructor()",
                "cc.ScrollView:finalize()",
                "cc.TableViewCell:reset()",
                "cc.TableViewCell:getIdx()",
                "cc.TableViewCell:setIdx()",
                "cc.TableViewCell:create()",
                "cc.TableViewCell:constructor()",
                "cc.TableViewCell:finalize()",
                "cc.TableView:updateCellAtIndex()",
                "cc.TableView:setVerticalFillOrder()",
                "cc.TableView:scrollViewDidZoom()",
                "cc.:updateContentSize()",
                "cc.TableView:getVerticalFillOrder()",
                "cc.TableView:removeCellAtIndex()",
                "cc.TableView:initWithViewSize()",
                "cc.TableView:scrollViewDidScroll()",
                "cc.TableView:reloadData()",
                "cc.TableView:insertCellAtIndex()",
                "cc.TableView:cellAtIndex()",
                "cc.TableView:dequeueCell()",
                "cc.TableView:constructor()",
                "cc.TableView:finalize()",
                "cc.AssetsManager:setStoragePath()",
                "cc.AssetsManager:setPackageUrl()",
                "cc.AssetsManager:checkUpdate()",
                "cc.AssetsManager:getStoragePath()",
                "cc.AssetsManager:update()",
                "cc.AssetsManager:setConnectionTimeout()",
                "cc.AssetsManager:setVersionFileUrl()",
                "cc.AssetsManager:getPackageUrl()",
                "cc.AssetsManager:getConnectionTimeout()",
                "cc.AssetsManager:getVersion()",
                "cc.AssetsManager:getVersionFileUrl()",
                "cc.AssetsManager:deleteVersion()",
                "cc.AssetsManager:create()",
                "cc.AssetsManager:constructor()",
                "cc.AssetsManager:finalize()",
                "cc.EventAssetsManagerEx:getAssetsManagerEx()",
                "cc.EventAssetsManagerEx:getAssetId()",
                "cc.EventAssetsManagerEx:getCURLECode()",
                "cc.EventAssetsManagerEx:getMessage()",
                "cc.EventAssetsManagerEx:getCURLMCode()",
                "cc.EventAssetsManagerEx:getPercentByFile()",
                "cc.EventAssetsManagerEx:getEventCode()",
                "cc.EventAssetsManagerEx:getPercent()",
                "cc.EventAssetsManagerEx:constructor()",
                "cc.EventAssetsManagerEx:finalize()",
                "cc.Manifest:getManifestFileUrl()",
                "cc.Manifest:isVersionLoaded()",
                "cc.Manifest:isLoaded()",
                "cc.Manifest:getPackageUrl()",
                "cc.Manifest:getVersion()",
                "cc.Manifest:getVersionFileUrl()",
                "cc.Manifest:getSearchPaths()",
                "cc.Manifest:finalize()",
                "cc.AssetsManagerEx:getState()",
                "cc.AssetsManagerEx:checkUpdate()",
                "cc.AssetsManagerEx:getStoragePath()",
                "cc.AssetsManagerEx:update()",
                "cc.AssetsManagerEx:getLocalManifest()",
                "cc.AssetsManagerEx:getRemoteManifest()",
                "cc.AssetsManagerEx:downloadFailedAssets()",
                "cc.AssetsManagerEx:create()",
                "cc.AssetsManagerEx:constructor()",
                "cc.AssetsManagerEx:finalize()",
                "cc.EventListenerAssetsManagerEx:init()",
                "cc.EventListenerAssetsManagerEx:constructor()",
                "cc.EventListenerAssetsManagerEx:finalize()",
                "cc.ParticleSystem3D:removeAffector()",
                "cc.ParticleSystem3D:resumeParticleSystem()",
                "cc.ParticleSystem3D:removeAllAffector()",
                "cc.ParticleSystem3D:addAffector()",
                "cc.ParticleSystem3D:startParticleSystem()",
                "cc.ParticleSystem3D:isEnabled()",
                "cc.ParticleSystem3D:setEmitter()",
                "cc.ParticleSystem3D:isKeepLocal()",
                "cc.ParticleSystem3D:setEnabled()",
                "cc.ParticleSystem3D:getParticleQuota()",
                "cc.ParticleSystem3D:getBlendFunc()",
                "cc.ParticleSystem3D:pauseParticleSystem()",
                "cc.ParticleSystem3D:getState()",
                "cc.ParticleSystem3D:getAliveParticleCount()",
                "cc.ParticleSystem3D:setParticleQuota()",
                "cc.ParticleSystem3D:setBlendFunc()",
                "cc.ParticleSystem3D:setRender()",
                "cc.ParticleSystem3D:stopParticleSystem()",
                "cc.ParticleSystem3D:setKeepLocal()",
                "cc.ParticleSystem3D:constructor()",
                "cc.ParticleSystem3D:finalize()",
                "cc.PUParticleSystem3D:initWithFilePath()",
                "cc.PUParticleSystem3D:getParticleSystemScaleVelocity()",
                "cc.PUParticleSystem3D:setEmittedSystemQuota()",
                "cc.PUParticleSystem3D:getDefaultDepth()",
                "cc.PUParticleSystem3D:getEmittedSystemQuota()",
                "cc.PUParticleSystem3D:initWithFilePathAndMaterialPath()",
                "cc.PUParticleSystem3D:clearAllParticles()",
                "cc.PUParticleSystem3D:getMaterialName()",
                "cc.PUParticleSystem3D:calulateRotationOffset()",
                "cc.PUParticleSystem3D:getMaxVelocity()",
                "cc.PUParticleSystem3D:forceUpdate()",
                "cc.PUParticleSystem3D:getTimeElapsedSinceStart()",
                "cc.PUParticleSystem3D:removeAllBehaviourTemplate()",
                "cc.PUParticleSystem3D:getEmittedEmitterQuota()",
                "cc.PUParticleSystem3D:forceEmission()",
                "cc.PUParticleSystem3D:addListener()",
                "cc.PUParticleSystem3D:isMarkedForEmission()",
                "cc.PUParticleSystem3D:getDefaultWidth()",
                "cc.PUParticleSystem3D:setEmittedEmitterQuota()",
                "cc.PUParticleSystem3D:setMarkedForEmission()",
                "cc.PUParticleSystem3D:clone()",
                "cc.PUParticleSystem3D:addEmitter()",
                "cc.PUParticleSystem3D:addBehaviourTemplate()",
                "cc.PUParticleSystem3D:setDefaultWidth()",
                "cc.PUParticleSystem3D:copyAttributesTo()",
                "cc.PUParticleSystem3D:setMaterialName()",
                "cc.PUParticleSystem3D:getParentParticleSystem()",
                "cc.PUParticleSystem3D:removeListener()",
                "cc.PUParticleSystem3D:setMaxVelocity()",
                "cc.PUParticleSystem3D:getDefaultHeight()",
                "cc.PUParticleSystem3D:getDerivedPosition()",
                "cc.PUParticleSystem3D:rotationOffset()",
                "cc.PUParticleSystem3D:removeAllEmitter()",
                "cc.PUParticleSystem3D:setParticleSystemScaleVelocity()",
                "cc.PUParticleSystem3D:getDerivedScale()",
                "cc.PUParticleSystem3D:setDefaultHeight()",
                "cc.PUParticleSystem3D:removeAllListener()",
                "cc.PUParticleSystem3D:makeParticleLocal()",
                "cc.PUParticleSystem3D:removerAllObserver()",
                "cc.PUParticleSystem3D:setDefaultDepth()",
                "cc.PUParticleSystem3D:addObserver()",
                "cc.PUParticleSystem3D:create()",
                "cc.PUParticleSystem3D:constructor()",
                "cc.PUParticleSystem3D:finalize()",
                "cc.NavMeshAgent:setMaxSpeed()",
                "cc.NavMeshAgent:syncToNode()",
                "cc.NavMeshAgent:completeOffMeshLink()",
                "cc.NavMeshAgent:getSeparationWeight()",
                "cc.NavMeshAgent:setAutoTraverseOffMeshLink()",
                "cc.NavMeshAgent:getCurrentVelocity()",
                "cc.NavMeshAgent:syncToAgent()",
                "cc.NavMeshAgent:isOnOffMeshLink()",
                "cc.NavMeshAgent:setSeparationWeight()",
                "cc.NavMeshAgent:pause()",
                "cc.NavMeshAgent:getUserData()",
                "cc.NavMeshAgent:setAutoOrientation()",
                "cc.NavMeshAgent:getHeight()",
                "cc.NavMeshAgent:getMaxSpeed()",
                "cc.NavMeshAgent:getCurrentOffMeshLinkData()",
                "cc.NavMeshAgent:getRadius()",
                "cc.NavMeshAgent:setSyncFlag()",
                "cc.NavMeshAgent:getSyncFlag()",
                "cc.NavMeshAgent:resume()",
                "cc.NavMeshAgent:stop()",
                "cc.NavMeshAgent:setMaxAcceleration()",
                "cc.NavMeshAgent:setOrientationRefAxes()",
                "cc.NavMeshAgent:getMaxAcceleration()",
                "cc.NavMeshAgent:setHeight()",
                "cc.NavMeshAgent:setUserData()",
                "cc.NavMeshAgent:getObstacleAvoidanceType()",
                "cc.NavMeshAgent:getVelocity()",
                "cc.NavMeshAgent:setRadius()",
                "cc.NavMeshAgent:setObstacleAvoidanceType()",
                "cc.NavMeshAgent:getNavMeshAgentComponentName()",
                "cc.NavMeshAgent:create()",
                "cc.NavMeshAgent:constructor()",
                "cc.NavMeshAgent:finalize()",
                "cc.NavMeshObstacle:getSyncFlag()",
                "cc.NavMeshObstacle:initWith()",
                "cc.NavMeshObstacle:syncToObstacle()",
                "cc.NavMeshObstacle:syncToNode()",
                "cc.NavMeshObstacle:getHeight()",
                "cc.NavMeshObstacle:setSyncFlag()",
                "cc.NavMeshObstacle:getRadius()",
                "cc.NavMeshObstacle:create()",
                "cc.NavMeshObstacle:getNavMeshObstacleComponentName()",
                "cc.NavMeshObstacle:constructor()",
                "cc.NavMeshObstacle:finalize()",
                "cc.NavMesh:removeNavMeshObstacle()",
                "cc.NavMesh:removeNavMeshAgent()",
                "cc.NavMesh:update()",
                "cc.NavMesh:isDebugDrawEnabled()",
                "cc.NavMesh:addNavMeshAgent()",
                "cc.NavMesh:addNavMeshObstacle()",
                "cc.NavMesh:setDebugDrawEnable()",
                "cc.NavMesh:debugDraw()",
                "cc.NavMesh:create()",
                "cc.NavMesh:constructor()",
                "cc.NavMesh:finalize()",
                "cc.Physics3DShape:getbtShape()",
                "cc.Physics3DShape:initSphere()",
                "cc.Physics3DShape:initBox()",
                "cc.Physics3DShape:initCapsule()",
                "cc.Physics3DShape:initCylinder()",
                "cc.Physics3DShape:getShapeType()",
                "cc.Physics3DShape:createBox()",
                "cc.Physics3DShape:createCylinder()",
                "cc.Physics3DShape:createConvexHull()",
                "cc.Physics3DShape:createCapsule()",
                "cc.Physics3DShape:createSphere()",
                "cc.Physics3DShape:constructor()",
                "cc.Physics3DShape:finalize()",
                "cc.Physics3DObject:setUserData()",
                "cc.Physics3DObject:getUserData()",
                "cc.Physics3DObject:getObjType()",
                "cc.Physics3DObject:setPhysicsWorld()",
                "cc.Physics3DObject:getWorldTransform()",
                "cc.Physics3DObject:getPhysicsWorld()",
                "cc.Physics3DObject:setMask()",
                "cc.Physics3DObject:getCollisionCallback()",
                "cc.Physics3DObject:getMask()",
                "cc.Physics3DObject:needCollisionCallback()",
                "cc.Physics3DObject:finalize()",
                "cc.Physics3DRigidBody:setGravity()",
                "cc.Physics3DRigidBody:getFriction()",
                "cc.Physics3DRigidBody:setAngularFactor()",
                "cc.Physics3DRigidBody:addConstraint()",
                "cc.Physics3DRigidBody:getRigidBody()",
                "cc.Physics3DRigidBody:getTotalForce()",
                "cc.Physics3DRigidBody:getConstraintCount()",
                "cc.Physics3DRigidBody:applyCentralForce()",
                "cc.Physics3DRigidBody:setMassProps()",
                "cc.Physics3DRigidBody:setFriction()",
                "cc.Physics3DRigidBody:setKinematic()",
                "cc.Physics3DRigidBody:setDamping()",
                "cc.Physics3DRigidBody:applyImpulse()",
                "cc.Physics3DRigidBody:isKinematic()",
                "cc.Physics3DRigidBody:applyTorque()",
                "cc.Physics3DRigidBody:setCcdMotionThreshold()",
                "cc.Physics3DRigidBody:setRollingFriction()",
                "cc.Physics3DRigidBody:getCcdMotionThreshold()",
                "cc.Physics3DRigidBody:getLinearFactor()",
                "cc.Physics3DRigidBody:applyDamping()",
                "cc.Physics3DRigidBody:getAngularVelocity()",
                "cc.Physics3DRigidBody:init()",
                "cc.Physics3DRigidBody:applyTorqueImpulse()",
                "cc.Physics3DRigidBody:setActive()",
                "cc.Physics3DRigidBody:setLinearFactor()",
                "cc.Physics3DRigidBody:setLinearVelocity()",
                "cc.Physics3DRigidBody:getLinearVelocity()",
                "cc.Physics3DRigidBody:setCcdSweptSphereRadius()",
                "cc.Physics3DRigidBody:applyForce()",
                "cc.Physics3DRigidBody:setAngularVelocity()",
                "cc.Physics3DRigidBody:applyCentralImpulse()",
                "cc.Physics3DRigidBody:getGravity()",
                "cc.Physics3DRigidBody:getRollingFriction()",
                "cc.Physics3DRigidBody:setCenterOfMassTransform()",
                "cc.Physics3DRigidBody:setInvInertiaDiagLocal()",
                "cc.Physics3DRigidBody:removeConstraint()",
                "cc.Physics3DRigidBody:getTotalTorque()",
                "cc.Physics3DRigidBody:getInvMass()",
                "cc.Physics3DRigidBody:getConstraint()",
                "cc.Physics3DRigidBody:getRestitution()",
                "cc.Physics3DRigidBody:getCcdSweptSphereRadius()",
                "cc.Physics3DRigidBody:getHitFraction()",
                "cc.Physics3DRigidBody:getAngularDamping()",
                "cc.Physics3DRigidBody:getInvInertiaDiagLocal()",
                "cc.Physics3DRigidBody:getCenterOfMassTransform()",
                "cc.Physics3DRigidBody:getAngularFactor()",
                "cc.Physics3DRigidBody:setRestitution()",
                "cc.Physics3DRigidBody:setHitFraction()",
                "cc.Physics3DRigidBody:getLinearDamping()",
                "cc.Physics3DRigidBody:constructor()",
                "cc.Physics3DRigidBody:finalize()",
                "cc.Physics3DComponent:syncNodeToPhysics()",
                "cc.Physics3DComponent:addToPhysicsWorld()",
                "cc.Physics3DComponent:syncPhysicsToNode()",
                "cc.Physics3DComponent:getPhysics3DObject()",
                "cc.Physics3DComponent:setPhysics3DObject()",
                "cc.Physics3DComponent:setSyncFlag()",
                "cc.Physics3DComponent:getPhysics3DComponentName()",
                "cc.Physics3DComponent:constructor()",
                "cc.Physics3DComponent:finalize()",
                "cc.PhysicsSprite3D:syncNodeToPhysics()",
                "cc.PhysicsSprite3D:syncPhysicsToNode()",
                "cc.PhysicsSprite3D:getPhysicsObj()",
                "cc.PhysicsSprite3D:setSyncFlag()",
                "cc.PhysicsSprite3D:constructor()",
                "cc.PhysicsSprite3D:finalize()",
                "cc.Physics3DWorld:setGravity()",
                "cc.Physics3DWorld:stepSimulate()",
                "cc.Physics3DWorld:needCollisionChecking()",
                "cc.Physics3DWorld:collisionChecking()",
                "cc.Physics3DWorld:setGhostPairCallback()",
                "cc.Physics3DWorld:removeAllPhysics3DObjects()",
                "cc.Physics3DWorld:isDebugDrawEnabled()",
                "cc.Physics3DWorld:removeAllPhysics3DConstraints()",
                "cc.Physics3DWorld:getGravity()",
                "cc.Physics3DWorld:removePhysics3DConstraint()",
                "cc.Physics3DWorld:addPhysics3DObject()",
                "cc.Physics3DWorld:setDebugDrawEnable()",
                "cc.Physics3DWorld:removePhysics3DObject()",
                "cc.Physics3DWorld:addPhysics3DConstraint()",
                "cc.Physics3DWorld:debugDraw()",
                "cc.Physics3DWorld:constructor()",
                "cc.Physics3DWorld:finalize()",
                "cc.Physics3DConstraint:setEnabled()",
                "cc.Physics3DConstraint:setBreakingImpulse()",
                "cc.Physics3DConstraint:getUserData()",
                "cc.Physics3DConstraint:getBreakingImpulse()",
                "cc.Physics3DConstraint:getBodyA()",
                "cc.Physics3DConstraint:isEnabled()",
                "cc.Physics3DConstraint:getOverrideNumSolverIterations()",
                "cc.Physics3DConstraint:getBodyB()",
                "cc.Physics3DConstraint:setOverrideNumSolverIterations()",
                "cc.Physics3DConstraint:getConstraintType()",
                "cc.Physics3DConstraint:setUserData()",
                "cc.Physics3DConstraint:getbtContraint()",
                "cc.Physics3DConstraint:finalize()",
                "cc.Physics3DPointToPointConstraint:getPivotPointInA()",
                "cc.Physics3DPointToPointConstraint:getPivotPointInB()",
                "cc.Physics3DPointToPointConstraint:init()",
                "cc.Physics3DPointToPointConstraint:setPivotPointInA()",
                "cc.Physics3DPointToPointConstraint:setPivotPointInB()",
                "cc.Physics3DPointToPointConstraint:create()",
                "cc.Physics3DPointToPointConstraint:constructor()",
                "cc.Physics3DPointToPointConstraint:finalize()",
                "cc.Physics3DHingeConstraint:getHingeAngle()",
                "cc.Physics3DHingeConstraint:getMotorTargetVelosity()",
                "cc.Physics3DHingeConstraint:getFrameOffsetA()",
                "cc.Physics3DHingeConstraint:getFrameOffsetB()",
                "cc.Physics3DHingeConstraint:setMaxMotorImpulse()",
                "cc.Physics3DHingeConstraint:enableAngularMotor()",
                "cc.Physics3DHingeConstraint:getUpperLimit()",
                "cc.Physics3DHingeConstraint:getMaxMotorImpulse()",
                "cc.Physics3DHingeConstraint:getLowerLimit()",
                "cc.Physics3DHingeConstraint:setUseFrameOffset()",
                "cc.Physics3DHingeConstraint:getEnableAngularMotor()",
                "cc.Physics3DHingeConstraint:enableMotor()",
                "cc.Physics3DHingeConstraint:getBFrame()",
                "cc.Physics3DHingeConstraint:setFrames()",
                "cc.Physics3DHingeConstraint:getUseFrameOffset()",
                "cc.Physics3DHingeConstraint:setAngularOnly()",
                "cc.Physics3DHingeConstraint:setLimit()",
                "cc.Physics3DHingeConstraint:getAngularOnly()",
                "cc.Physics3DHingeConstraint:setAxis()",
                "cc.Physics3DHingeConstraint:getAFrame()",
                "cc.Physics3DHingeConstraint:create()",
                "cc.Physics3DHingeConstraint:constructor()",
                "cc.Physics3DHingeConstraint:finalize()",
                "cc.Physics3DSliderConstraint:setPoweredAngMotor()",
                "cc.Physics3DSliderConstraint:getDampingLimAng()",
                "cc.Physics3DSliderConstraint:setRestitutionOrthoLin()",
                "cc.Physics3DSliderConstraint:setRestitutionDirLin()",
                "cc.Physics3DSliderConstraint:getLinearPos()",
                "cc.Physics3DSliderConstraint:getFrameOffsetA()",
                "cc.Physics3DSliderConstraint:getFrameOffsetB()",
                "cc.Physics3DSliderConstraint:setPoweredLinMotor()",
                "cc.Physics3DSliderConstraint:getDampingDirAng()",
                "cc.Physics3DSliderConstraint:getRestitutionLimLin()",
                "cc.Physics3DSliderConstraint:getSoftnessOrthoAng()",
                "cc.Physics3DSliderConstraint:setSoftnessOrthoLin()",
                "cc.Physics3DSliderConstraint:setSoftnessLimLin()",
                "cc.Physics3DSliderConstraint:getAngularPos()",
                "cc.Physics3DSliderConstraint:setRestitutionLimAng()",
                "cc.Physics3DSliderConstraint:setUpperLinLimit()",
                "cc.Physics3DSliderConstraint:setDampingDirLin()",
                "cc.Physics3DSliderConstraint:getUpperAngLimit()",
                "cc.Physics3DSliderConstraint:getDampingDirLin()",
                "cc.Physics3DSliderConstraint:getSoftnessDirAng()",
                "cc.Physics3DSliderConstraint:getPoweredAngMotor()",
                "cc.Physics3DSliderConstraint:setLowerAngLimit()",
                "cc.Physics3DSliderConstraint:setUpperAngLimit()",
                "cc.Physics3DSliderConstraint:setTargetLinMotorVelocity()",
                "cc.Physics3DSliderConstraint:setDampingLimAng()",
                "cc.Physics3DSliderConstraint:getRestitutionLimAng()",
                "cc.Physics3DSliderConstraint:getUseFrameOffset()",
                "cc.Physics3DSliderConstraint:getSoftnessOrthoLin()",
                "cc.Physics3DSliderConstraint:getDampingOrthoAng()",
                "cc.Physics3DSliderConstraint:setUseFrameOffset()",
                "cc.Physics3DSliderConstraint:setLowerLinLimit()",
                "cc.Physics3DSliderConstraint:getRestitutionDirLin()",
                "cc.Physics3DSliderConstraint:getTargetLinMotorVelocity()",
                "cc.Physics3DSliderConstraint:getLowerLinLimit()",
                "cc.Physics3DSliderConstraint:getSoftnessLimLin()",
                "cc.Physics3DSliderConstraint:setDampingOrthoAng()",
                "cc.Physics3DSliderConstraint:setSoftnessDirAng()",
                "cc.Physics3DSliderConstraint:getPoweredLinMotor()",
                "cc.Physics3DSliderConstraint:setRestitutionOrthoAng()",
                "cc.Physics3DSliderConstraint:setDampingDirAng()",
                "cc.Physics3DSliderConstraint:setFrames()",
                "cc.Physics3DSliderConstraint:getRestitutionOrthoAng()",
                "cc.Physics3DSliderConstraint:getMaxAngMotorForce()",
                "cc.Physics3DSliderConstraint:getDampingOrthoLin()",
                "cc.Physics3DSliderConstraint:getUpperLinLimit()",
                "cc.Physics3DSliderConstraint:setMaxLinMotorForce()",
                "cc.Physics3DSliderConstraint:getRestitutionOrthoLin()",
                "cc.Physics3DSliderConstraint:setTargetAngMotorVelocity()",
                "cc.Physics3DSliderConstraint:getSoftnessLimAng()",
                "cc.Physics3DSliderConstraint:setRestitutionDirAng()",
                "cc.Physics3DSliderConstraint:getDampingLimLin()",
                "cc.Physics3DSliderConstraint:getLowerAngLimit()",
                "cc.Physics3DSliderConstraint:getRestitutionDirAng()",
                "cc.Physics3DSliderConstraint:getTargetAngMotorVelocity()",
                "cc.Physics3DSliderConstraint:setRestitutionLimLin()",
                "cc.Physics3DSliderConstraint:getMaxLinMotorForce()",
                "cc.Physics3DSliderConstraint:setDampingOrthoLin()",
                "cc.Physics3DSliderConstraint:setSoftnessOrthoAng()",
                "cc.Physics3DSliderConstraint:setDampingLimLin()",
                "cc.Physics3DSliderConstraint:setSoftnessDirLin()",
                "cc.Physics3DSliderConstraint:setMaxAngMotorForce()",
                "cc.Physics3DSliderConstraint:getSoftnessDirLin()",
                "cc.Physics3DSliderConstraint:setSoftnessLimAng()",
                "cc.Physics3DSliderConstraint:getUseLinearReferenceFrameA()",
                "cc.Physics3DSliderConstraint:create()",
                "cc.Physics3DSliderConstraint:constructor()",
                "cc.Physics3DSliderConstraint:finalize()",
                "cc.Physics3DConeTwistConstraint:getBFrame()",
                "cc.Physics3DConeTwistConstraint:setFixThresh()",
                "cc.Physics3DConeTwistConstraint:getFrameOffsetB()",
                "cc.Physics3DConeTwistConstraint:getFrameOffsetA()",
                "cc.Physics3DConeTwistConstraint:getFixThresh()",
                "cc.Physics3DConeTwistConstraint:getSwingSpan2()",
                "cc.Physics3DConeTwistConstraint:getSwingSpan1()",
                "cc.Physics3DConeTwistConstraint:setMaxMotorImpulse()",
                "cc.Physics3DConeTwistConstraint:setFrames()",
                "cc.Physics3DConeTwistConstraint:getTwistAngle()",
                "cc.Physics3DConeTwistConstraint:GetPointForAngle()",
                "cc.Physics3DConeTwistConstraint:setMaxMotorImpulseNormalized()",
                "cc.Physics3DConeTwistConstraint:getTwistSpan()",
                "cc.Physics3DConeTwistConstraint:setDamping()",
                "cc.Physics3DConeTwistConstraint:setLimit()",
                "cc.Physics3DConeTwistConstraint:getAFrame()",
                "cc.Physics3DConeTwistConstraint:enableMotor()",
                "cc.Physics3DConeTwistConstraint:create()",
                "cc.Physics3DConeTwistConstraint:constructor()",
                "cc.Physics3DConeTwistConstraint:finalize()",
                "cc.Physics3D6DofConstraint:setLinearLowerLimit()",
                "cc.Physics3D6DofConstraint:getLinearLowerLimit()",
                "cc.Physics3D6DofConstraint:getAngularUpperLimit()",
                "cc.Physics3D6DofConstraint:getUseFrameOffset()",
                "cc.Physics3D6DofConstraint:getLinearUpperLimit()",
                "cc.Physics3D6DofConstraint:setAngularLowerLimit()",
                "cc.Physics3D6DofConstraint:isLimited()",
                "cc.Physics3D6DofConstraint:setUseFrameOffset()",
                "cc.Physics3D6DofConstraint:setLinearUpperLimit()",
                "cc.Physics3D6DofConstraint:getAngularLowerLimit()",
                "cc.Physics3D6DofConstraint:setAngularUpperLimit()",
                "cc.Physics3D6DofConstraint:create()",
                "cc.Physics3D6DofConstraint:constructor()",
                "cc.Physics3D6DofConstraint:finalize()",
                "cc.PhysicsShape:getFriction()",
                "cc.PhysicsShape:setGroup()",
                "cc.PhysicsShape:setDensity()",
                "cc.PhysicsShape:getMass()",
                "cc.PhysicsShape:getMaterial()",
                "cc.PhysicsShape:setSensor()",
                "cc.PhysicsShape:getCollisionBitmask()",
                "cc.PhysicsShape:getArea()",
                "cc.PhysicsShape:setCategoryBitmask()",
                "cc.PhysicsShape:getGroup()",
                "cc.PhysicsShape:setMoment()",
                "cc.PhysicsShape:containsPoint()",
                "cc.PhysicsShape:getCategoryBitmask()",
                "cc.PhysicsShape:isSensor()",
                "cc.PhysicsShape:getType()",
                "cc.PhysicsShape:getContactTestBitmask()",
                "cc.PhysicsShape:getCenter()",
                "cc.PhysicsShape:getDensity()",
                "cc.PhysicsShape:setMass()",
                "cc.PhysicsShape:getTag()",
                "cc.PhysicsShape:calculateDefaultMoment()",
                "cc.PhysicsShape:setCollisionBitmask()",
                "cc.PhysicsShape:getMoment()",
                "cc.PhysicsShape:getOffset()",
                "cc.PhysicsShape:getRestitution()",
                "cc.PhysicsShape:setFriction()",
                "cc.PhysicsShape:setMaterial()",
                "cc.PhysicsShape:setTag()",
                "cc.PhysicsShape:setContactTestBitmask()",
                "cc.PhysicsShape:setRestitution()",
                "cc.PhysicsShape:getBody()",
                "cc.PhysicsShape:finalize()",
                "cc.PhysicsShapeCircle:getRadius()",
                "cc.PhysicsShapeCircle:create()",
                "cc.PhysicsShapeCircle:calculateArea()",
                "cc.PhysicsShapeCircle:calculateMoment()",
                "cc.PhysicsShapeCircle:finalize()",
                "cc.PhysicsShapePolygon:getPointsCount()",
                "cc.PhysicsShapePolygon:getPoint()",
                "cc.PhysicsShapePolygon:finalize()",
                "cc.PhysicsShapeBox:getSize()",
                "cc.PhysicsShapeBox:create()",
                "cc.PhysicsShapeBox:finalize()",
                "cc.PhysicsShapeEdgeSegment:getPointB()",
                "cc.PhysicsShapeEdgeSegment:getPointA()",
                "cc.PhysicsShapeEdgeSegment:create()",
                "cc.PhysicsShapeEdgeSegment:finalize()",
                "cc.PhysicsShapeEdgePolygon:getPointsCount()",
                "cc.PhysicsShapeEdgePolygon:finalize()",
                "cc.PhysicsShapeEdgeBox:create()",
                "cc.PhysicsShapeEdgeBox:finalize()",
                "cc.PhysicsShapeEdgeChain:getPointsCount()",
                "cc.PhysicsShapeEdgeChain:finalize()",
                "cc.PhysicsBody:isGravityEnabled()",
                "cc.PhysicsBody:resetForces()",
                "cc.PhysicsBody:getVelocityLimit()",
                "cc.PhysicsBody:setGroup()",
                "cc.PhysicsBody:getMass()",
                "cc.PhysicsBody:getCollisionBitmask()",
                "cc.PhysicsBody:getRotationOffset()",
                "cc.PhysicsBody:getRotation()",
                "cc.PhysicsBody:getMoment()",
                "cc.PhysicsBody:applyImpulse()",
                "cc.PhysicsBody:setRotationOffset()",
                "cc.PhysicsBody:applyForce()",
                "cc.PhysicsBody:addShape()",
                "cc.PhysicsBody:applyTorque()",
                "cc.PhysicsBody:getAngularVelocityLimit()",
                "cc.PhysicsBody:setAngularVelocityLimit()",
                "cc.PhysicsBody:getVelocity()",
                "cc.PhysicsBody:getLinearDamping()",
                "cc.PhysicsBody:removeAllShapes()",
                "cc.PhysicsBody:setAngularDamping()",
                "cc.PhysicsBody:setVelocityLimit()",
                "cc.PhysicsBody:setResting()",
                "cc.PhysicsBody:getPositionOffset()",
                "cc.PhysicsBody:setCategoryBitmask()",
                "cc.PhysicsBody:getWorld()",
                "cc.PhysicsBody:getAngularVelocity()",
                "cc.PhysicsBody:getPosition()",
                "cc.PhysicsBody:setEnable()",
                "cc.PhysicsBody:setGravityEnable()",
                "cc.PhysicsBody:getGroup()",
                "cc.PhysicsBody:setMoment()",
                "cc.PhysicsBody:getTag()",
                "cc.PhysicsBody:local2World()",
                "cc.PhysicsBody:getCategoryBitmask()",
                "cc.PhysicsBody:setDynamic()",
                "cc.PhysicsBody:getFirstShape()",
                "cc.PhysicsBody:getShapes()",
                "cc.PhysicsBody:getContactTestBitmask()",
                "cc.PhysicsBody:setAngularVelocity()",
                "cc.PhysicsBody:world2Local()",
                "cc.PhysicsBody:isEnabled()",
                "cc.PhysicsBody:removeShape()",
                "cc.PhysicsBody:setMass()",
                "cc.PhysicsBody:addMoment()",
                "cc.PhysicsBody:setVelocity()",
                "cc.PhysicsBody:setLinearDamping()",
                "cc.PhysicsBody:setCollisionBitmask()",
                "cc.PhysicsBody:setPositionOffset()",
                "cc.PhysicsBody:setRotationEnable()",
                "cc.PhysicsBody:isRotationEnabled()",
                "cc.PhysicsBody:getCPBody()",
                "cc.PhysicsBody:getAngularDamping()",
                "cc.PhysicsBody:getVelocityAtLocalPoint()",
                "cc.PhysicsBody:isResting()",
                "cc.PhysicsBody:addMass()",
                "cc.PhysicsBody:getShape()",
                "cc.PhysicsBody:setTag()",
                "cc.PhysicsBody:getVelocityAtWorldPoint()",
                "cc.PhysicsBody:setContactTestBitmask()",
                "cc.PhysicsBody:removeFromWorld()",
                "cc.PhysicsBody:isDynamic()",
                "cc.PhysicsBody:getNode()",
                "cc.PhysicsBody:createBox()",
                "cc.PhysicsBody:createEdgeSegment()",
                "cc.PhysicsBody:create()",
                "cc.PhysicsBody:createEdgeBox()",
                "cc.PhysicsBody:createCircle()",
                "cc.PhysicsBody:finalize()",
                "cc.PhysicsContact:getContactData()",
                "cc.PhysicsContact:getEventCode()",
                "cc.PhysicsContact:getPreContactData()",
                "cc.PhysicsContact:getShapeA()",
                "cc.PhysicsContact:getShapeB()",
                "cc.PhysicsContact:finalize()",
                "cc.PhysicsContactPreSolve:getFriction()",
                "cc.PhysicsContactPreSolve:getRestitution()",
                "cc.PhysicsContactPreSolve:setFriction()",
                "cc.PhysicsContactPreSolve:ignore()",
                "cc.PhysicsContactPreSolve:getSurfaceVelocity()",
                "cc.PhysicsContactPreSolve:setSurfaceVelocity()",
                "cc.PhysicsContactPreSolve:setRestitution()",
                "cc.PhysicsContactPreSolve:finalize()",
                "cc.PhysicsContactPostSolve:getFriction()",
                "cc.PhysicsContactPostSolve:getSurfaceVelocity()",
                "cc.PhysicsContactPostSolve:getRestitution()",
                "cc.PhysicsContactPostSolve:finalize()",
                "cc.EventListenerPhysicsContact:create()",
                "cc.EventListenerPhysicsContact:finalize()",
                "cc.EventListenerPhysicsContactWithBodies:hitTest()",
                "cc.EventListenerPhysicsContactWithBodies:create()",
                "cc.EventListenerPhysicsContactWithBodies:finalize()",
                "cc.EventListenerPhysicsContactWithShapes:hitTest()",
                "cc.EventListenerPhysicsContactWithShapes:create()",
                "cc.EventListenerPhysicsContactWithShapes:finalize()",
                "cc.EventListenerPhysicsContactWithGroup:hitTest()",
                "cc.EventListenerPhysicsContactWithGroup:create()",
                "cc.EventListenerPhysicsContactWithGroup:finalize()",
                "cc.PhysicsJoint:getBodyA()",
                "cc.PhysicsJoint:getBodyB()",
                "cc.PhysicsJoint:getMaxForce()",
                "cc.PhysicsJoint:setMaxForce()",
                "cc.PhysicsJoint:isEnabled()",
                "cc.PhysicsJoint:setEnable()",
                "cc.PhysicsJoint:setCollisionEnable()",
                "cc.PhysicsJoint:getWorld()",
                "cc.PhysicsJoint:setTag()",
                "cc.PhysicsJoint:removeFormWorld()",
                "cc.PhysicsJoint:isCollisionEnabled()",
                "cc.PhysicsJoint:getTag()",
                "cc.PhysicsJoint:finalize()",
                "cc.PhysicsJointFixed:createConstraints()",
                "cc.PhysicsJointFixed:construct()",
                "cc.PhysicsJointFixed:finalize()",
                "cc.PhysicsJointLimit:setAnchr2()",
                "cc.PhysicsJointLimit:setAnchr1()",
                "cc.PhysicsJointLimit:setMax()",
                "cc.PhysicsJointLimit:getAnchr2()",
                "cc.PhysicsJointLimit:getAnchr1()",
                "cc.PhysicsJointLimit:createConstraints()",
                "cc.PhysicsJointLimit:getMin()",
                "cc.PhysicsJointLimit:getMax()",
                "cc.PhysicsJointLimit:setMin()",
                "cc.PhysicsJointLimit:construct()",
                "cc.PhysicsJointLimit:finalize()",
                "cc.PhysicsJointPin:createConstraints()",
                "cc.PhysicsJointPin:construct()",
                "cc.PhysicsJointPin:finalize()",
                "cc.PhysicsJointDistance:createConstraints()",
                "cc.PhysicsJointDistance:setDistance()",
                "cc.PhysicsJointDistance:getDistance()",
                "cc.PhysicsJointDistance:construct()",
                "cc.PhysicsJointDistance:finalize()",
                "cc.PhysicsJointSpring:setAnchr2()",
                "cc.PhysicsJointSpring:setAnchr1()",
                "cc.PhysicsJointSpring:getDamping()",
                "cc.PhysicsJointSpring:setStiffness()",
                "cc.PhysicsJointSpring:getRestLength()",
                "cc.PhysicsJointSpring:getAnchr2()",
                "cc.PhysicsJointSpring:getAnchr1()",
                "cc.PhysicsJointSpring:getStiffness()",
                "cc.PhysicsJointSpring:createConstraints()",
                "cc.PhysicsJointSpring:setRestLength()",
                "cc.PhysicsJointSpring:setDamping()",
                "cc.PhysicsJointSpring:construct()",
                "cc.PhysicsJointSpring:finalize()",
                "cc.PhysicsJointGroove:setAnchr2()",
                "cc.PhysicsJointGroove:setGrooveA()",
                "cc.PhysicsJointGroove:setGrooveB()",
                "cc.PhysicsJointGroove:getGrooveA()",
                "cc.PhysicsJointGroove:getGrooveB()",
                "cc.PhysicsJointGroove:getAnchr2()",
                "cc.PhysicsJointGroove:createConstraints()",
                "cc.PhysicsJointGroove:construct()",
                "cc.PhysicsJointGroove:finalize()",
                "cc.PhysicsJointRotarySpring:getDamping()",
                "cc.PhysicsJointRotarySpring:setRestAngle()",
                "cc.PhysicsJointRotarySpring:getStiffness()",
                "cc.PhysicsJointRotarySpring:createConstraints()",
                "cc.PhysicsJointRotarySpring:setStiffness()",
                "cc.PhysicsJointRotarySpring:setDamping()",
                "cc.PhysicsJointRotarySpring:getRestAngle()",
                "cc.PhysicsJointRotarySpring:construct()",
                "cc.PhysicsJointRotarySpring:finalize()",
                "cc.PhysicsJointRotaryLimit:getMax()",
                "cc.PhysicsJointRotaryLimit:createConstraints()",
                "cc.PhysicsJointRotaryLimit:setMin()",
                "cc.PhysicsJointRotaryLimit:setMax()",
                "cc.PhysicsJointRotaryLimit:getMin()",
                "cc.PhysicsJointRotaryLimit:construct()",
                "cc.PhysicsJointRotaryLimit:finalize()",
                "cc.PhysicsJointRatchet:getAngle()",
                "cc.PhysicsJointRatchet:setAngle()",
                "cc.PhysicsJointRatchet:createConstraints()",
                "cc.PhysicsJointRatchet:setPhase()",
                "cc.PhysicsJointRatchet:getPhase()",
                "cc.PhysicsJointRatchet:setRatchet()",
                "cc.PhysicsJointRatchet:getRatchet()",
                "cc.PhysicsJointRatchet:construct()",
                "cc.PhysicsJointRatchet:finalize()",
                "cc.PhysicsJointGear:setRatio()",
                "cc.PhysicsJointGear:getPhase()",
                "cc.PhysicsJointGear:setPhase()",
                "cc.PhysicsJointGear:createConstraints()",
                "cc.PhysicsJointGear:getRatio()",
                "cc.PhysicsJointGear:construct()",
                "cc.PhysicsJointGear:finalize()",
                "cc.PhysicsJointMotor:setRate()",
                "cc.PhysicsJointMotor:getRate()",
                "cc.PhysicsJointMotor:createConstraints()",
                "cc.PhysicsJointMotor:construct()",
                "cc.PhysicsJointMotor:finalize()",
                "cc.PhysicsWorld:setGravity()",
                "cc.PhysicsWorld:getAllBodies()",
                "cc.PhysicsWorld:getDebugDrawMask()",
                "cc.PhysicsWorld:setSubsteps()",
                "cc.PhysicsWorld:setAutoStep()",
                "cc.PhysicsWorld:addJoint()",
                "cc.PhysicsWorld:removeAllJoints()",
                "cc.PhysicsWorld:isAutoStep()",
                "cc.PhysicsWorld:removeBody()",
                "cc.PhysicsWorld:removeJoint()",
                "cc.PhysicsWorld:getShapes()",
                "cc.PhysicsWorld:step()",
                "cc.PhysicsWorld:setDebugDrawMask()",
                "cc.PhysicsWorld:getGravity()",
                "cc.PhysicsWorld:setUpdateRate()",
                "cc.PhysicsWorld:getSubsteps()",
                "cc.PhysicsWorld:getSpeed()",
                "cc.PhysicsWorld:getUpdateRate()",
                "cc.PhysicsWorld:removeAllBodies()",
                "cc.PhysicsWorld:setSpeed()",
                "cc.PhysicsWorld:getShape()",
                "cc.PhysicsWorld:getBody()",
                "cc.PhysicsWorld:finalize()",
                "cc.PhysicsDebugDraw:finalize()",
                "sp.SkeletonRenderer:setTimeScale()",
                "sp.SkeletonRenderer:getDebugSlotsEnabled()",
                "sp.SkeletonRenderer:setBonesToSetupPose()",
                "sp.SkeletonRenderer:initWithData()",
                "sp.SkeletonRenderer:setDebugSlotsEnabled()",
                "sp.SkeletonRenderer:setSlotsToSetupPose()",
                "sp.SkeletonRenderer:setToSetupPose()",
                "sp.SkeletonRenderer:getBlendFunc()",
                "sp.SkeletonRenderer:initialize()",
                "sp.SkeletonRenderer:setDebugBonesEnabled()",
                "sp.SkeletonRenderer:getDebugBonesEnabled()",
                "sp.SkeletonRenderer:getTimeScale()",
                "sp.SkeletonRenderer:initWithFile()",
                "sp.SkeletonRenderer:setBlendFunc()",
                "sp.SkeletonRenderer:setSkin()",
                "sp.SkeletonRenderer:getSkeleton()",
                "sp.SkeletonRenderer:createWithFile()",
                "sp.SkeletonRenderer:constructor()",
                "sp.SkeletonRenderer:finalize()",
                "sp.SkeletonAnimation:setStartListener()",
                "sp.SkeletonAnimation:setTrackEventListener()",
                "sp.SkeletonAnimation:setTrackCompleteListener()",
                "sp.SkeletonAnimation:setTrackStartListener()",
                "sp.SkeletonAnimation:setCompleteListener()",
                "sp.SkeletonAnimation:setTrackEndListener()",
                "sp.SkeletonAnimation:setEventListener()",
                "sp.SkeletonAnimation:setMix()",
                "sp.SkeletonAnimation:setEndListener()",
                "sp.SkeletonAnimation:initialize()",
                "sp.SkeletonAnimation:clearTracks()",
                "sp.SkeletonAnimation:clearTrack()",
                "sp.SkeletonAnimation:finalize()",
                "ccs.ActionFrame:getAction()",
                "ccs.ActionFrame:getFrameType()",
                "ccs.ActionFrame:setFrameTime()",
                "ccs.ActionFrame:setEasingType()",
                "ccs.ActionFrame:getFrameTime()",
                "ccs.ActionFrame:getFrameIndex()",
                "ccs.ActionFrame:setFrameType()",
                "ccs.ActionFrame:setFrameIndex()",
                "ccs.ActionFrame:setEasingParameter()",
                "ccs.ActionFrame:getEasingType()",
                "ccs.ActionFrame:constructor()",
                "ccs.ActionFrame:finalize()",
                "ccs.ActionMoveFrame:setPosition()",
                "ccs.ActionMoveFrame:getAction()",
                "ccs.ActionMoveFrame:getPosition()",
                "ccs.ActionMoveFrame:constructor()",
                "ccs.ActionMoveFrame:finalize()",
                "ccs.ActionScaleFrame:setScaleY()",
                "ccs.ActionScaleFrame:setScaleX()",
                "ccs.ActionScaleFrame:getScaleY()",
                "ccs.ActionScaleFrame:getScaleX()",
                "ccs.ActionScaleFrame:getAction()",
                "ccs.ActionScaleFrame:constructor()",
                "ccs.ActionScaleFrame:finalize()",
                "ccs.ActionRotationFrame:setRotation()",
                "ccs.ActionRotationFrame:getAction()",
                "ccs.ActionRotationFrame:getRotation()",
                "ccs.ActionRotationFrame:constructor()",
                "ccs.ActionRotationFrame:finalize()",
                "ccs.ActionFadeFrame:getOpacity()",
                "ccs.ActionFadeFrame:getAction()",
                "ccs.ActionFadeFrame:setOpacity()",
                "ccs.ActionFadeFrame:constructor()",
                "ccs.ActionFadeFrame:finalize()",
                "ccs.ActionTintFrame:getColor()",
                "ccs.ActionTintFrame:getAction()",
                "ccs.ActionTintFrame:setColor()",
                "ccs.ActionTintFrame:constructor()",
                "ccs.ActionTintFrame:finalize()",
                "ccs.ActionObject:setCurrentTime()",
                "ccs.ActionObject:pause()",
                "ccs.ActionObject:setName()",
                "ccs.ActionObject:setUnitTime()",
                "ccs.ActionObject:getTotalTime()",
                "ccs.ActionObject:getName()",
                "ccs.ActionObject:stop()",
                "ccs.ActionObject:play()",
                "ccs.ActionObject:getCurrentTime()",
                "ccs.ActionObject:removeActionNode()",
                "ccs.ActionObject:getLoop()",
                "ccs.ActionObject:addActionNode()",
                "ccs.ActionObject:getUnitTime()",
                "ccs.ActionObject:isPlaying()",
                "ccs.ActionObject:updateToFrameByTime()",
                "ccs.ActionObject:setLoop()",
                "ccs.ActionObject:simulationActionUpdate()",
                "ccs.ActionObject:constructor()",
                "ccs.ActionObject:finalize()",
                "ccs.ActionManagerEx:stopActionByName()",
                "ccs.ActionManagerEx:getActionByName()",
                "ccs.ActionManagerEx:playActionByName()",
                "ccs.ActionManagerEx:releaseActions()",
                "ccs.ActionManagerEx:destroyInstance()",
                "ccs.ActionManagerEx:getInstance()",
                "ccs.ActionManagerEx:finalize()",
                "ccs.BaseData:getColor()",
                "ccs.BaseData:setColor()",
                "ccs.BaseData:create()",
                "ccs.BaseData:constructor()",
                "ccs.BaseData:finalize()",
                "ccs.DisplayData:copy()",
                "ccs.DisplayData:changeDisplayToTexture()",
                "ccs.DisplayData:create()",
                "ccs.DisplayData:constructor()",
                "ccs.DisplayData:finalize()",
                "ccs.SpriteDisplayData:copy()",
                "ccs.SpriteDisplayData:create()",
                "ccs.SpriteDisplayData:constructor()",
                "ccs.SpriteDisplayData:finalize()",
                "ccs.ArmatureDisplayData:create()",
                "ccs.ArmatureDisplayData:constructor()",
                "ccs.ArmatureDisplayData:finalize()",
                "ccs.ParticleDisplayData:create()",
                "ccs.ParticleDisplayData:constructor()",
                "ccs.ParticleDisplayData:finalize()",
                "ccs.BoneData:getDisplayData()",
                "ccs.BoneData:init()",
                "ccs.BoneData:addDisplayData()",
                "ccs.BoneData:create()",
                "ccs.BoneData:constructor()",
                "ccs.BoneData:finalize()",
                "ccs.ArmatureData:addBoneData()",
                "ccs.ArmatureData:init()",
                "ccs.ArmatureData:getBoneData()",
                "ccs.ArmatureData:create()",
                "ccs.ArmatureData:constructor()",
                "ccs.ArmatureData:finalize()",
                "ccs.FrameData:copy()",
                "ccs.FrameData:create()",
                "ccs.FrameData:constructor()",
                "ccs.FrameData:finalize()",
                "ccs.MovementBoneData:init()",
                "ccs.MovementBoneData:getFrameData()",
                "ccs.MovementBoneData:addFrameData()",
                "ccs.MovementBoneData:create()",
                "ccs.MovementBoneData:constructor()",
                "ccs.MovementBoneData:finalize()",
                "ccs.MovementData:getMovementBoneData()",
                "ccs.MovementData:addMovementBoneData()",
                "ccs.MovementData:create()",
                "ccs.MovementData:constructor()",
                "ccs.MovementData:finalize()",
                "ccs.AnimationData:getMovement()",
                "ccs.AnimationData:getMovementCount()",
                "ccs.AnimationData:addMovement()",
                "ccs.AnimationData:create()",
                "ccs.AnimationData:constructor()",
                "ccs.AnimationData:finalize()",
                "ccs.ContourData:init()",
                "ccs.ContourData:addVertex()",
                "ccs.ContourData:create()",
                "ccs.ContourData:constructor()",
                "ccs.ContourData:finalize()",
                "ccs.TextureData:getContourData()",
                "ccs.TextureData:init()",
                "ccs.TextureData:addContourData()",
                "ccs.TextureData:create()",
                "ccs.TextureData:constructor()",
                "ccs.TextureData:finalize()",
                "ccs.Tween:getAnimation()",
                "ccs.Tween:gotoAndPause()",
                "ccs.Tween:play()",
                "ccs.Tween:gotoAndPlay()",
                "ccs.Tween:init()",
                "ccs.Tween:setAnimation()",
                "ccs.Tween:create()",
                "ccs.Tween:constructor()",
                "ccs.Tween:finalize()",
                "ccs.DisplayManager:getDisplayRenderNode()",
                "ccs.DisplayManager:getAnchorPointInPoints()",
                "ccs.DisplayManager:getDisplayRenderNodeType()",
                "ccs.DisplayManager:removeDisplay()",
                "ccs.DisplayManager:setForceChangeDisplay()",
                "ccs.DisplayManager:init()",
                "ccs.DisplayManager:getContentSize()",
                "ccs.DisplayManager:getBoundingBox()",
                "ccs.DisplayManager:addDisplay()",
                "ccs.DisplayManager:containPoint()",
                "ccs.DisplayManager:changeDisplayWithIndex()",
                "ccs.DisplayManager:changeDisplayWithName()",
                "ccs.DisplayManager:isForceChangeDisplay()",
                "ccs.DisplayManager:getCurrentDisplayIndex()",
                "ccs.DisplayManager:getAnchorPoint()",
                "ccs.DisplayManager:getDecorativeDisplayList()",
                "ccs.DisplayManager:isVisible()",
                "ccs.DisplayManager:setVisible()",
                "ccs.DisplayManager:create()",
                "ccs.DisplayManager:constructor()",
                "ccs.DisplayManager:finalize()",
                "ccs.Bone:isTransformDirty()",
                "ccs.Bone:setBlendFunc()",
                "ccs.Bone:isIgnoreMovementBoneData()",
                "ccs.Bone:updateZOrder()",
                "ccs.Bone:getDisplayRenderNode()",
                "ccs.Bone:isBlendDirty()",
                "ccs.Bone:addChildBone()",
                "ccs.Bone:getWorldInfo()",
                "ccs.Bone:getTween()",
                "ccs.Bone:getParentBone()",
                "ccs.Bone:updateColor()",
                "ccs.Bone:setTransformDirty()",
                "ccs.Bone:getDisplayRenderNodeType()",
                "ccs.Bone:removeDisplay()",
                "ccs.Bone:setBoneData()",
                "ccs.Bone:init()",
                "ccs.Bone:setParentBone()",
                "ccs.Bone:addDisplay()",
                "ccs.Bone:getBlendFunc()",
                "ccs.Bone:removeFromParent()",
                "ccs.Bone:getColliderDetector()",
                "ccs.Bone:getChildArmature()",
                "ccs.Bone:getTweenData()",
                "ccs.Bone:changeDisplayWithIndex()",
                "ccs.Bone:changeDisplayWithName()",
                "ccs.Bone:setArmature()",
                "ccs.Bone:setBlendDirty()",
                "ccs.Bone:removeChildBone()",
                "ccs.Bone:setChildArmature()",
                "ccs.Bone:getNodeToArmatureTransform()",
                "ccs.Bone:getDisplayManager()",
                "ccs.Bone:getArmature()",
                "ccs.Bone:getBoneData()",
                "ccs.Bone:create()",
                "ccs.Bone:constructor()",
                "ccs.Bone:finalize()",
                "ccs.BatchNode:create()",
                "ccs.BatchNode:finalize()",
                "ccs.ArmatureAnimation:getSpeedScale()",
                "ccs.ArmatureAnimation:play()",
                "ccs.ArmatureAnimation:gotoAndPause()",
                "ccs.ArmatureAnimation:playWithIndexes()",
                "ccs.ArmatureAnimation:setAnimationData()",
                "ccs.ArmatureAnimation:setSpeedScale()",
                "ccs.ArmatureAnimation:getAnimationData()",
                "ccs.ArmatureAnimation:gotoAndPlay()",
                "ccs.ArmatureAnimation:init()",
                "ccs.ArmatureAnimation:playWithNames()",
                "ccs.ArmatureAnimation:getMovementCount()",
                "ccs.ArmatureAnimation:playWithIndex()",
                "ccs.ArmatureAnimation:getCurrentMovementID()",
                "ccs.ArmatureAnimation:create()",
                "ccs.ArmatureAnimation:constructor()",
                "ccs.ArmatureAnimation:finalize()",
                "ccs.ArmatureDataManager:getAnimationDatas()",
                "ccs.ArmatureDataManager:removeAnimationData()",
                "ccs.ArmatureDataManager:addArmatureData()",
                "ccs.ArmatureDataManager:addArmatureFileInfo()",
                "ccs.ArmatureDataManager:removeArmatureFileInfo()",
                "ccs.ArmatureDataManager:getTextureDatas()",
                "ccs.ArmatureDataManager:getTextureData()",
                "ccs.ArmatureDataManager:getArmatureData()",
                "ccs.ArmatureDataManager:getAnimationData()",
                "ccs.ArmatureDataManager:addAnimationData()",
                "ccs.ArmatureDataManager:init()",
                "ccs.ArmatureDataManager:removeArmatureData()",
                "ccs.ArmatureDataManager:getArmatureDatas()",
                "ccs.ArmatureDataManager:removeTextureData()",
                "ccs.ArmatureDataManager:addTextureData()",
                "ccs.ArmatureDataManager:isAutoLoadSpriteFile()",
                "ccs.ArmatureDataManager:addSpriteFrameFromFile()",
                "ccs.ArmatureDataManager:destroyInstance()",
                "ccs.ArmatureDataManager:getInstance()",
                "ccs.ArmatureDataManager:finalize()",
                "ccs.Armature:getBone()",
                "ccs.Armature:changeBoneParent()",
                "ccs.Armature:setAnimation()",
                "ccs.Armature:getBoneAtPoint()",
                "ccs.Armature:getArmatureTransformDirty()",
                "ccs.Armature:setVersion()",
                "ccs.Armature:updateOffsetPoint()",
                "ccs.Armature:getParentBone()",
                "ccs.Armature:removeBone()",
                "ccs.Armature:getBatchNode()",
                "ccs.Armature:init()",
                "ccs.Armature:setParentBone()",
                "ccs.Armature:setBatchNode()",
                "ccs.Armature:getBlendFunc()",
                "ccs.Armature:setArmatureData()",
                "ccs.Armature:addBone()",
                "ccs.Armature:getArmatureData()",
                "ccs.Armature:getVersion()",
                "ccs.Armature:getAnimation()",
                "ccs.Armature:getOffsetPoints()",
                "ccs.Armature:setBlendFunc()",
                "ccs.Armature:getBoneDic()",
                "ccs.Armature:create()",
                "ccs.Armature:constructor()",
                "ccs.Armature:finalize()",
                "ccs.Skin:getBone()",
                "ccs.Skin:getNodeToWorldTransformAR()",
                "ccs.Skin:getDisplayName()",
                "ccs.Skin:updateArmatureTransform()",
                "ccs.Skin:setBone()",
                "ccs.Skin:create()",
                "ccs.Skin:createWithSpriteFrameName()",
                "ccs.Skin:constructor()",
                "ccs.Skin:finalize()",
                "ccs.ComAttribute:getFloat()",
                "ccs.ComAttribute:getString()",
                "ccs.ComAttribute:setFloat()",
                "ccs.ComAttribute:setString()",
                "ccs.ComAttribute:getBool()",
                "ccs.ComAttribute:setInt()",
                "ccs.ComAttribute:parse()",
                "ccs.ComAttribute:getInt()",
                "ccs.ComAttribute:setBool()",
                "ccs.ComAttribute:create()",
                "ccs.ComAttribute:createInstance()",
                "ccs.ComAttribute:finalize()",
                "ccs.ComAudio:stopAllEffects()",
                "ccs.ComAudio:getEffectsVolume()",
                "ccs.ComAudio:stopEffect()",
                "ccs.ComAudio:getBackgroundMusicVolume()",
                "ccs.ComAudio:willPlayBackgroundMusic()",
                "ccs.ComAudio:setBackgroundMusicVolume()",
                "ccs.ComAudio:end()",
                "ccs.ComAudio:stopBackgroundMusic()",
                "ccs.ComAudio:pauseBackgroundMusic()",
                "ccs.ComAudio:isBackgroundMusicPlaying()",
                "ccs.ComAudio:isLoop()",
                "ccs.ComAudio:resumeAllEffects()",
                "ccs.ComAudio:pauseAllEffects()",
                "ccs.ComAudio:preloadBackgroundMusic()",
                "ccs.ComAudio:playBackgroundMusic()",
                "ccs.ComAudio:playEffect()",
                "ccs.ComAudio:preloadEffect()",
                "ccs.ComAudio:setLoop()",
                "ccs.ComAudio:unloadEffect()",
                "ccs.ComAudio:rewindBackgroundMusic()",
                "ccs.ComAudio:pauseEffect()",
                "ccs.ComAudio:resumeBackgroundMusic()",
                "ccs.ComAudio:setFile()",
                "ccs.ComAudio:setEffectsVolume()",
                "ccs.ComAudio:getFile()",
                "ccs.ComAudio:resumeEffect()",
                "ccs.ComAudio:create()",
                "ccs.ComAudio:createInstance()",
                "ccs.ComAudio:finalize()",
                "ccs.ComController:create()",
                "ccs.ComController:createInstance()",
                "ccs.ComController:constructor()",
                "ccs.ComController:finalize()",
                "ccs.ComRender:setNode()",
                "ccs.ComRender:getNode()",
                "ccs.ComRender:create()",
                "ccs.ComRender:createInstance()",
                "ccs.ComRender:finalize()",
                "ccs.GUIReader:setFilePath()",
                "ccs.GUIReader:widgetFromJsonFile()",
                "ccs.GUIReader:getFilePath()",
                "ccs.GUIReader:widgetFromBinaryFile()",
                "ccs.GUIReader:getVersionInteger()",
                "ccs.GUIReader:destroyInstance()",
                "ccs.GUIReader:getInstance()",
                "ccs.GUIReader:finalize()",
                "ccs.SceneReader:setTarget()",
                "ccs.SceneReader:createNodeWithSceneFile()",
                "ccs.SceneReader:getAttachComponentType()",
                "ccs.SceneReader:getNodeByTag()",
                "ccs.SceneReader:destroyInstance()",
                "ccs.SceneReader:sceneReaderVersion()",
                "ccs.SceneReader:getInstance()",
                "ccs.SceneReader:finalize()",
                "ccs.ActionTimelineCache:createActionFromJson()",
                "ccs.ActionTimelineCache:createActionWithFlatBuffersFile()",
                "ccs.ActionTimelineCache:loadAnimationActionWithFlatBuffersFile()",
                "ccs.ActionTimelineCache:purge()",
                "ccs.ActionTimelineCache:init()",
                "ccs.ActionTimelineCache:loadAnimationActionWithFile()",
                "ccs.ActionTimelineCache:loadAnimationActionWithContent()",
                "ccs.ActionTimelineCache:removeAction()",
                "ccs.ActionTimelineCache:createActionWithFlatBuffersForSimulator()",
                "ccs.ActionTimelineCache:destroyInstance()",
                "ccs.ActionTimelineCache:createAction()",
                "ccs.ActionTimelineCache:finalize()",
                "ccs.Frame:clone()",
                "ccs.Frame:setTweenType()",
                "ccs.Frame:setNode()",
                "ccs.Frame:setTimeline()",
                "ccs.Frame:isEnterWhenPassed()",
                "ccs.Frame:getTweenType()",
                "ccs.Frame:getEasingParams()",
                "ccs.Frame:setEasingParams()",
                "ccs.Frame:getFrameIndex()",
                "ccs.Frame:apply()",
                "ccs.Frame:isTween()",
                "ccs.Frame:setFrameIndex()",
                "ccs.Frame:setTween()",
                "ccs.Frame:getTimeline()",
                "ccs.Frame:getNode()",
                "ccs.Frame:finalize()",
                "ccs.VisibleFrame:isVisible()",
                "ccs.VisibleFrame:setVisible()",
                "ccs.VisibleFrame:create()",
                "ccs.VisibleFrame:constructor()",
                "ccs.VisibleFrame:finalize()",
                "ccs.TextureFrame:getTextureName()",
                "ccs.TextureFrame:setTextureName()",
                "ccs.TextureFrame:create()",
                "ccs.TextureFrame:constructor()",
                "ccs.TextureFrame:finalize()",
                "ccs.RotationFrame:setRotation()",
                "ccs.RotationFrame:getRotation()",
                "ccs.RotationFrame:create()",
                "ccs.RotationFrame:constructor()",
                "ccs.RotationFrame:finalize()",
                "ccs.SkewFrame:getSkewY()",
                "ccs.SkewFrame:setSkewX()",
                "ccs.SkewFrame:setSkewY()",
                "ccs.SkewFrame:getSkewX()",
                "ccs.SkewFrame:create()",
                "ccs.SkewFrame:constructor()",
                "ccs.SkewFrame:finalize()",
                "ccs.RotationSkewFrame:create()",
                "ccs.RotationSkewFrame:constructor()",
                "ccs.RotationSkewFrame:finalize()",
                "ccs.PositionFrame:getX()",
                "ccs.PositionFrame:getY()",
                "ccs.PositionFrame:setPosition()",
                "ccs.PositionFrame:setX()",
                "ccs.PositionFrame:setY()",
                "ccs.PositionFrame:getPosition()",
                "ccs.PositionFrame:create()",
                "ccs.PositionFrame:constructor()",
                "ccs.PositionFrame:finalize()",
                "ccs.ScaleFrame:setScaleY()",
                "ccs.ScaleFrame:setScaleX()",
                "ccs.ScaleFrame:getScaleY()",
                "ccs.ScaleFrame:getScaleX()",
                "ccs.ScaleFrame:setScale()",
                "ccs.ScaleFrame:create()",
                "ccs.ScaleFrame:constructor()",
                "ccs.ScaleFrame:finalize()",
                "ccs.AnchorPointFrame:setAnchorPoint()",
                "ccs.AnchorPointFrame:getAnchorPoint()",
                "ccs.AnchorPointFrame:create()",
                "ccs.AnchorPointFrame:constructor()",
                "ccs.AnchorPointFrame:finalize()",
                "ccs.InnerActionFrame:getEndFrameIndex()",
                "ccs.InnerActionFrame:getStartFrameIndex()",
                "ccs.InnerActionFrame:getInnerActionType()",
                "ccs.InnerActionFrame:setEndFrameIndex()",
                "ccs.InnerActionFrame:setEnterWithName()",
                "ccs.InnerActionFrame:setSingleFrameIndex()",
                "ccs.InnerActionFrame:setStartFrameIndex()",
                "ccs.InnerActionFrame:getSingleFrameIndex()",
                "ccs.InnerActionFrame:setInnerActionType()",
                "ccs.InnerActionFrame:setAnimationName()",
                "ccs.InnerActionFrame:create()",
                "ccs.InnerActionFrame:constructor()",
                "ccs.InnerActionFrame:finalize()",
                "ccs.ColorFrame:getColor()",
                "ccs.ColorFrame:setColor()",
                "ccs.ColorFrame:create()",
                "ccs.ColorFrame:constructor()",
                "ccs.ColorFrame:finalize()",
                "ccs.AlphaFrame:getAlpha()",
                "ccs.AlphaFrame:setAlpha()",
                "ccs.AlphaFrame:create()",
                "ccs.AlphaFrame:constructor()",
                "ccs.AlphaFrame:finalize()",
                "ccs.EventFrame:setEvent()",
                "ccs.EventFrame:init()",
                "ccs.EventFrame:getEvent()",
                "ccs.EventFrame:create()",
                "ccs.EventFrame:constructor()",
                "ccs.EventFrame:finalize()",
                "ccs.ZOrderFrame:getZOrder()",
                "ccs.ZOrderFrame:setZOrder()",
                "ccs.ZOrderFrame:create()",
                "ccs.ZOrderFrame:constructor()",
                "ccs.ZOrderFrame:finalize()",
                "ccs.BlendFuncFrame:getBlendFunc()",
                "ccs.BlendFuncFrame:setBlendFunc()",
                "ccs.BlendFuncFrame:create()",
                "ccs.BlendFuncFrame:constructor()",
                "ccs.BlendFuncFrame:finalize()",
                "ccs.Timeline:clone()",
                "ccs.Timeline:gotoFrame()",
                "ccs.Timeline:setNode()",
                "ccs.Timeline:getActionTimeline()",
                "ccs.Timeline:insertFrame()",
                "ccs.Timeline:setActionTag()",
                "ccs.Timeline:addFrame()",
                "ccs.Timeline:getFrames()",
                "ccs.Timeline:getActionTag()",
                "ccs.Timeline:getNode()",
                "ccs.Timeline:removeFrame()",
                "ccs.Timeline:setActionTimeline()",
                "ccs.Timeline:stepToFrame()",
                "ccs.Timeline:create()",
                "ccs.Timeline:constructor()",
                "ccs.Timeline:finalize()",
                "ccs.ActionTimelineData:setActionTag()",
                "ccs.ActionTimelineData:init()",
                "ccs.ActionTimelineData:getActionTag()",
                "ccs.ActionTimelineData:create()",
                "ccs.ActionTimelineData:constructor()",
                "ccs.ActionTimelineData:finalize()",
                "ccs.ActionTimeline:addTimeline()",
                "ccs.ActionTimeline:getCurrentFrame()",
                "ccs.ActionTimeline:getStartFrame()",
                "ccs.ActionTimeline:pause()",
                "ccs.ActionTimeline:init()",
                "ccs.ActionTimeline:removeTimeline()",
                "ccs.ActionTimeline:clearFrameEventCallFunc()",
                "ccs.ActionTimeline:setLastFrameCallFunc()",
                "ccs.ActionTimeline:getTimelines()",
                "ccs.ActionTimeline:play()",
                "ccs.ActionTimeline:getAnimationInfo()",
                "ccs.ActionTimeline:resume()",
                "ccs.ActionTimeline:removeAnimationInfo()",
                "ccs.ActionTimeline:getTimeSpeed()",
                "ccs.ActionTimeline:addAnimationInfo()",
                "ccs.ActionTimeline:getDuration()",
                "ccs.ActionTimeline:gotoFrameAndPause()",
                "ccs.ActionTimeline:isPlaying()",
                "ccs.ActionTimeline:gotoFrameAndPlay()",
                "ccs.ActionTimeline:IsAnimationInfoExists()",
                "ccs.ActionTimeline:getEndFrame()",
                "ccs.ActionTimeline:setTimeSpeed()",
                "ccs.ActionTimeline:clearLastFrameCallFunc()",
                "ccs.ActionTimeline:setDuration()",
                "ccs.ActionTimeline:setCurrentFrame()",
                "ccs.ActionTimeline:create()",
                "ccs.ActionTimeline:constructor()",
                "ccs.ActionTimeline:finalize()",
                "ccs.ActionTimelineNode:getRoot()",
                "ccs.ActionTimelineNode:getActionTimeline()",
                "ccs.ActionTimelineNode:setActionTimeline()",
                "ccs.ActionTimelineNode:init()",
                "ccs.ActionTimelineNode:setRoot()",
                "ccs.ActionTimelineNode:create()",
                "ccs.ActionTimelineNode:constructor()",
                "ccs.ActionTimelineNode:finalize()",
                "ccs.BoneNode:getDebugDrawWidth()",
                "ccs.BoneNode:getChildBones()",
                "ccs.BoneNode:getBlendFunc()",
                "ccs.BoneNode:getAllSubBones()",
                "ccs.BoneNode:setBlendFunc()",
                "ccs.BoneNode:setDebugDrawEnabled()",
                "ccs.BoneNode:getVisibleSkinsRect()",
                "ccs.BoneNode:getAllSubSkins()",
                "ccs.BoneNode:displaySkin()",
                "ccs.BoneNode:isDebugDrawEnabled()",
                "ccs.BoneNode:addSkin()",
                "ccs.BoneNode:getRootSkeletonNode()",
                "ccs.BoneNode:setDebugDrawLength()",
                "ccs.BoneNode:getSkins()",
                "ccs.BoneNode:getVisibleSkins()",
                "ccs.BoneNode:setDebugDrawWidth()",
                "ccs.BoneNode:getDebugDrawLength()",
                "ccs.BoneNode:setDebugDrawColor()",
                "ccs.BoneNode:getDebugDrawColor()",
                "ccs.BoneNode:create()",
                "ccs.BoneNode:constructor()",
                "ccs.BoneNode:finalize()",
                "ccs.SkeletonNode:getBoneNode()",
                "ccs.SkeletonNode:changeSkins()",
                "ccs.SkeletonNode:addSkinGroup()",
                "ccs.SkeletonNode:getAllSubBonesMap()",
                "ccs.SkeletonNode:create()",
                "ccs.SkeletonNode:constructor()",
                "ccs.SkeletonNode:finalize()",
                "ccs.ComExtensionData:setActionTag()",
                "ccs.ComExtensionData:getCustomProperty()",
                "ccs.ComExtensionData:getActionTag()",
                "ccs.ComExtensionData:setCustomProperty()",
                "ccs.ComExtensionData:create()",
                "ccs.ComExtensionData:createInstance()",
                "ccs.ComExtensionData:constructor()",
                "ccs.ComExtensionData:finalize()",
                "ccui.LayoutParameter:clone()",
                "ccui.LayoutParameter:getLayoutType()",
                "ccui.LayoutParameter:createCloneInstance()",
                "ccui.LayoutParameter:copyProperties()",
                "ccui.LayoutParameter:create()",
                "ccui.LayoutParameter:constructor()",
                "ccui.LayoutParameter:finalize()",
                "ccui.LinearLayoutParameter:setGravity()",
                "ccui.LinearLayoutParameter:getGravity()",
                "ccui.LinearLayoutParameter:create()",
                "ccui.LinearLayoutParameter:constructor()",
                "ccui.LinearLayoutParameter:finalize()",
                "ccui.RelativeLayoutParameter:setAlign()",
                "ccui.RelativeLayoutParameter:setRelativeToWidgetName()",
                "ccui.RelativeLayoutParameter:getRelativeName()",
                "ccui.RelativeLayoutParameter:getRelativeToWidgetName()",
                "ccui.RelativeLayoutParameter:setRelativeName()",
                "ccui.RelativeLayoutParameter:getAlign()",
                "ccui.RelativeLayoutParameter:create()",
                "ccui.RelativeLayoutParameter:constructor()",
                "ccui.RelativeLayoutParameter:finalize()",
                "ccui.Widget:setLayoutComponentEnabled()",
                "ccui.Widget:setSizePercent()",
                "ccui.Widget:getCustomSize()",
                "ccui.Widget:getLeftBoundary()",
                "ccui.Widget:setFlippedX()",
                "ccui.Widget:setCallbackName()",
                "ccui.Widget:getVirtualRenderer()",
                "ccui.Widget:setPropagateTouchEvents()",
                "ccui.Widget:isUnifySizeEnabled()",
                "ccui.Widget:getSizePercent()",
                "ccui.Widget:setPositionPercent()",
                "ccui.Widget:setSwallowTouches()",
                "ccui.Widget:getLayoutSize()",
                "ccui.Widget:setHighlighted()",
                "ccui.Widget:setPositionType()",
                "ccui.Widget:isIgnoreContentAdaptWithSize()",
                "ccui.Widget:getVirtualRendererSize()",
                "ccui.Widget:isHighlighted()",
                "ccui.Widget:getLayoutParameter()",
                "ccui.Widget:getPositionType()",
                "ccui.Widget:getTopBoundary()",
                "ccui.Widget:ignoreContentAdaptWithSize()",
                "ccui.Widget:findNextFocusedWidget()",
                "ccui.Widget:isEnabled()",
                "ccui.Widget:isFocused()",
                "ccui.Widget:getTouchBeganPosition()",
                "ccui.Widget:isTouchEnabled()",
                "ccui.Widget:getCallbackName()",
                "ccui.Widget:getActionTag()",
                "ccui.Widget:getWorldPosition()",
                "ccui.Widget:isFocusEnabled()",
                "ccui.Widget:setFocused()",
                "ccui.Widget:setActionTag()",
                "ccui.Widget:setTouchEnabled()",
                "ccui.Widget:setFlippedY()",
                "ccui.Widget:setEnabled()",
                "ccui.Widget:getRightBoundary()",
                "ccui.Widget:setBrightStyle()",
                "ccui.Widget:setLayoutParameter()",
                "ccui.Widget:clone()",
                "ccui.Widget:setFocusEnabled()",
                "ccui.Widget:getBottomBoundary()",
                "ccui.Widget:isBright()",
                "ccui.Widget:dispatchFocusEvent()",
                "ccui.Widget:setUnifySizeEnabled()",
                "ccui.Widget:isPropagateTouchEvents()",
                "ccui.Widget:getCurrentFocusedWidget()",
                "ccui.Widget:hitTest()",
                "ccui.Widget:isLayoutComponentEnabled()",
                "ccui.Widget:requestFocus()",
                "ccui.Widget:updateSizeAndPosition()",
                "ccui.Widget:onFocusChange()",
                "ccui.Widget:getTouchMovePosition()",
                "ccui.Widget:getSizeType()",
                "ccui.Widget:getCallbackType()",
                "ccui.Widget:getTouchEndPosition()",
                "ccui.Widget:getPositionPercent()",
                "ccui.Widget:propagateTouchEvent()",
                "ccui.Widget:isFlippedX()",
                "ccui.Widget:isFlippedY()",
                "ccui.Widget:isClippingParentContainsPoint()",
                "ccui.Widget:setSizeType()",
                "ccui.Widget:interceptTouchEvent()",
                "ccui.Widget:setBright()",
                "ccui.Widget:setCallbackType()",
                "ccui.Widget:isSwallowTouches()",
                "ccui.Widget:enableDpadNavigation()",
                "ccui.Widget:create()",
                "ccui.Widget:constructor()",
                "ccui.Widget:finalize()",
                "ccui.Layout:setBackGroundColorVector()",
                "ccui.Layout:setClippingType()",
                "ccui.Layout:setBackGroundColorType()",
                "ccui.Layout:setLoopFocus()",
                "ccui.Layout:setBackGroundImageColor()",
                "ccui.Layout:getBackGroundColorVector()",
                "ccui.Layout:getClippingType()",
                "ccui.Layout:isLoopFocus()",
                "ccui.Layout:removeBackGroundImage()",
                "ccui.Layout:getBackGroundColorOpacity()",
                "ccui.Layout:isClippingEnabled()",
                "ccui.Layout:setBackGroundImageOpacity()",
                "ccui.Layout:setBackGroundImage()",
                "ccui.Layout:setBackGroundColor()",
                "ccui.Layout:requestDoLayout()",
                "ccui.Layout:getBackGroundImageCapInsets()",
                "ccui.Layout:getBackGroundColor()",
                "ccui.Layout:setClippingEnabled()",
                "ccui.Layout:getBackGroundImageColor()",
                "ccui.Layout:isBackGroundImageScale9Enabled()",
                "ccui.Layout:getBackGroundColorType()",
                "ccui.Layout:getBackGroundEndColor()",
                "ccui.Layout:setBackGroundColorOpacity()",
                "ccui.Layout:getBackGroundImageOpacity()",
                "ccui.Layout:isPassFocusToChild()",
                "ccui.Layout:setBackGroundImageCapInsets()",
                "ccui.Layout:getBackGroundImageTextureSize()",
                "ccui.Layout:forceDoLayout()",
                "ccui.Layout:getLayoutType()",
                "ccui.Layout:setPassFocusToChild()",
                "ccui.Layout:getBackGroundStartColor()",
                "ccui.Layout:setBackGroundImageScale9Enabled()",
                "ccui.Layout:setLayoutType()",
                "ccui.Layout:create()",
                "ccui.Layout:createInstance()",
                "ccui.Layout:constructor()",
                "ccui.Layout:finalize()",
                "ccui.Button:getNormalTextureSize()",
                "ccui.Button:getTitleText()",
                "ccui.Button:setTitleFontSize()",
                "ccui.Button:setScale9Enabled()",
                "ccui.Button:getTitleRenderer()",
                "ccui.Button:getZoomScale()",
                "ccui.Button:getCapInsetsDisabledRenderer()",
                "ccui.Button:setTitleColor()",
                "ccui.Button:setCapInsetsDisabledRenderer()",
                "ccui.Button:setCapInsets()",
                "ccui.Button:loadTextureDisabled()",
                "ccui.Button:init()",
                "ccui.Button:setTitleText()",
                "ccui.Button:setCapInsetsNormalRenderer()",
                "ccui.Button:loadTexturePressed()",
                "ccui.Button:setTitleFontName()",
                "ccui.Button:getCapInsetsNormalRenderer()",
                "ccui.Button:setTitleAlignment()",
                "ccui.Button:getCapInsetsPressedRenderer()",
                "ccui.Button:loadTextures()",
                "ccui.Button:isScale9Enabled()",
                "ccui.Button:loadTextureNormal()",
                "ccui.Button:setCapInsetsPressedRenderer()",
                "ccui.Button:getTitleFontSize()",
                "ccui.Button:getTitleFontName()",
                "ccui.Button:getTitleColor()",
                "ccui.Button:setPressedActionEnabled()",
                "ccui.Button:setZoomScale()",
                "ccui.Button:create()",
                "ccui.Button:createInstance()",
                "ccui.Button:constructor()",
                "ccui.Button:finalize()",
                "ccui.AbstractCheckButton:loadTextureBackGroundSelected()",
                "ccui.AbstractCheckButton:loadTextureBackGroundDisabled()",
                "ccui.AbstractCheckButton:setSelected()",
                "ccui.AbstractCheckButton:getRendererFrontCrossDisabled()",
                "ccui.AbstractCheckButton:getRendererBackground()",
                "ccui.AbstractCheckButton:loadTextureFrontCross()",
                "ccui.AbstractCheckButton:getRendererBackgroundDisabled()",
                "ccui.AbstractCheckButton:isSelected()",
                "ccui.AbstractCheckButton:init()",
                "ccui.AbstractCheckButton:loadTextures()",
                "ccui.AbstractCheckButton:getZoomScale()",
                "ccui.AbstractCheckButton:getRendererFrontCross()",
                "ccui.AbstractCheckButton:getRendererBackgroundSelected()",
                "ccui.AbstractCheckButton:loadTextureBackGround()",
                "ccui.AbstractCheckButton:setZoomScale()",
                "ccui.AbstractCheckButton:loadTextureFrontCrossDisabled()",
                "ccui.AbstractCheckButton:finalize()",
                "ccui.CheckBox:addEventListener()",
                "ccui.CheckBox:create()",
                "ccui.CheckBox:createInstance()",
                "ccui.CheckBox:constructor()",
                "ccui.CheckBox:finalize()",
                "ccui.RadioButton:addEventListener()",
                "ccui.RadioButton:create()",
                "ccui.RadioButton:createInstance()",
                "ccui.RadioButton:constructor()",
                "ccui.RadioButton:finalize()",
                "ccui.RadioButtonGroup:removeRadioButton()",
                "ccui.RadioButtonGroup:isAllowedNoSelection()",
                "ccui.RadioButtonGroup:getSelectedButtonIndex()",
                "ccui.RadioButtonGroup:setAllowedNoSelection()",
                "ccui.RadioButtonGroup:setSelectedButtonWithoutEvent()",
                "ccui.RadioButtonGroup:addEventListener()",
                "ccui.RadioButtonGroup:removeAllRadioButtons()",
                "ccui.RadioButtonGroup:getRadioButtonByIndex()",
                "ccui.RadioButtonGroup:getNumberOfRadioButtons()",
                "ccui.RadioButtonGroup:addRadioButton()",
                "ccui.RadioButtonGroup:setSelectedButton()",
                "ccui.RadioButtonGroup:create()",
                "ccui.RadioButtonGroup:constructor()",
                "ccui.RadioButtonGroup:finalize()",
                "ccui.ImageView:loadTexture()",
                "ccui.ImageView:init()",
                "ccui.ImageView:setScale9Enabled()",
                "ccui.ImageView:setTextureRect()",
                "ccui.ImageView:setCapInsets()",
                "ccui.ImageView:getCapInsets()",
                "ccui.ImageView:isScale9Enabled()",
                "ccui.ImageView:create()",
                "ccui.ImageView:createInstance()",
                "ccui.ImageView:constructor()",
                "ccui.ImageView:finalize()",
                "ccui.Text:enableShadow()",
                "ccui.Text:getFontSize()",
                "ccui.Text:getString()",
                "ccui.Text:disableEffect()",
                "ccui.Text:getTextColor()",
                "ccui.Text:setTextVerticalAlignment()",
                "ccui.Text:setFontName()",
                "ccui.Text:setTouchScaleChangeEnabled()",
                "ccui.Text:setString()",
                "ccui.Text:init()",
                "ccui.Text:isTouchScaleChangeEnabled()",
                "ccui.Text:getFontName()",
                "ccui.Text:setTextAreaSize()",
                "ccui.Text:getStringLength()",
                "ccui.Text:getAutoRenderSize()",
                "ccui.Text:enableOutline()",
                "ccui.Text:getType()",
                "ccui.Text:getTextHorizontalAlignment()",
                "ccui.Text:setFontSize()",
                "ccui.Text:setTextColor()",
                "ccui.Text:enableGlow()",
                "ccui.Text:getTextVerticalAlignment()",
                "ccui.Text:getTextAreaSize()",
                "ccui.Text:setTextHorizontalAlignment()",
                "ccui.Text:create()",
                "ccui.Text:createInstance()",
                "ccui.Text:constructor()",
                "ccui.Text:finalize()",
                "ccui.TextAtlas:getStringLength()",
                "ccui.TextAtlas:getString()",
                "ccui.TextAtlas:setString()",
                "ccui.TextAtlas:setProperty()",
                "ccui.TextAtlas:adaptRenderers()",
                "ccui.TextAtlas:create()",
                "ccui.TextAtlas:createInstance()",
                "ccui.TextAtlas:constructor()",
                "ccui.TextAtlas:finalize()",
                "ccui.LoadingBar:setPercent()",
                "ccui.LoadingBar:loadTexture()",
                "ccui.LoadingBar:setDirection()",
                "ccui.LoadingBar:setScale9Enabled()",
                "ccui.LoadingBar:setCapInsets()",
                "ccui.LoadingBar:getDirection()",
                "ccui.LoadingBar:getCapInsets()",
                "ccui.LoadingBar:isScale9Enabled()",
                "ccui.LoadingBar:getPercent()",
                "ccui.LoadingBar:create()",
                "ccui.LoadingBar:createInstance()",
                "ccui.LoadingBar:constructor()",
                "ccui.LoadingBar:finalize()",
                "ccui.ScrollView:scrollToTop()",
                "ccui.ScrollView:scrollToPercentHorizontal()",
                "ccui.ScrollView:setScrollBarOpacity()",
                "ccui.ScrollView:setScrollBarEnabled()",
                "ccui.ScrollView:isInertiaScrollEnabled()",
                "ccui.ScrollView:scrollToPercentBothDirection()",
                "ccui.ScrollView:getDirection()",
                "ccui.ScrollView:setScrollBarColor()",
                "ccui.ScrollView:scrollToBottomLeft()",
                "ccui.ScrollView:getInnerContainer()",
                "ccui.ScrollView:jumpToBottom()",
                "ccui.ScrollView:setInnerContainerPosition()",
                "ccui.ScrollView:setDirection()",
                "ccui.ScrollView:scrollToTopLeft()",
                "ccui.ScrollView:jumpToTopRight()",
                "ccui.ScrollView:jumpToBottomLeft()",
                "ccui.ScrollView:setInnerContainerSize()",
                "ccui.ScrollView:getInnerContainerPosition()",
                "ccui.ScrollView:getInnerContainerSize()",
                "ccui.ScrollView:isBounceEnabled()",
                "ccui.ScrollView:jumpToPercentVertical()",
                "ccui.ScrollView:addEventListener()",
                "ccui.ScrollView:setScrollBarAutoHideTime()",
                "ccui.ScrollView:setScrollBarPositionFromCornerForHorizontal()",
                "ccui.ScrollView:setInertiaScrollEnabled()",
                "ccui.ScrollView:setScrollBarAutoHideEnabled()",
                "ccui.ScrollView:getScrollBarColor()",
                "ccui.ScrollView:jumpToTopLeft()",
                "ccui.ScrollView:jumpToPercentHorizontal()",
                "ccui.ScrollView:jumpToBottomRight()",
                "ccui.ScrollView:getScrollBarPositionFromCornerForHorizontal()",
                "ccui.ScrollView:setScrollBarWidth()",
                "ccui.ScrollView:setBounceEnabled()",
                "ccui.ScrollView:jumpToTop()",
                "ccui.ScrollView:scrollToLeft()",
                "ccui.ScrollView:jumpToPercentBothDirection()",
                "ccui.ScrollView:getScrollBarPositionFromCornerForVertical()",
                "ccui.ScrollView:scrollToPercentVertical()",
                "ccui.ScrollView:scrollToBottom()",
                "ccui.ScrollView:getScrollBarOpacity()",
                "ccui.ScrollView:scrollToBottomRight()",
                "ccui.ScrollView:setScrollBarPositionFromCorner()",
                "ccui.ScrollView:setScrollBarPositionFromCornerForVertical()",
                "ccui.ScrollView:getScrollBarAutoHideTime()",
                "ccui.ScrollView:jumpToLeft()",
                "ccui.ScrollView:scrollToRight()",
                "ccui.ScrollView:isScrollBarEnabled()",
                "ccui.ScrollView:getScrollBarWidth()",
                "ccui.ScrollView:isScrollBarAutoHideEnabled()",
                "ccui.ScrollView:jumpToRight()",
                "ccui.ScrollView:scrollToTopRight()",
                "ccui.ScrollView:create()",
                "ccui.ScrollView:createInstance()",
                "ccui.ScrollView:constructor()",
                "ccui.ScrollView:finalize()",
                "ccui.ListView:getIndex()",
                "ccui.ListView:removeAllItems()",
                "ccui.ListView:setGravity()",
                "ccui.ListView:pushBackCustomItem()",
                "ccui.ListView:getItems()",
                "ccui.ListView:removeItem()",
                "ccui.ListView:getCurSelectedIndex()",
                "ccui.ListView:insertDefaultItem()",
                "ccui.ListView:requestRefreshView()",
                "ccui.ListView:setItemsMargin()",
                "ccui.ListView:refreshView()",
                "ccui.ListView:removeLastItem()",
                "ccui.ListView:getItemsMargin()",
                "ccui.ListView:addEventListener()",
                "ccui.ListView:getItem()",
                "ccui.ListView:setItemModel()",
                "ccui.ListView:doLayout()",
                "ccui.ListView:pushBackDefaultItem()",
                "ccui.ListView:insertCustomItem()",
                "ccui.ListView:create()",
                "ccui.ListView:createInstance()",
                "ccui.ListView:constructor()",
                "ccui.ListView:finalize()",
                "ccui.Slider:setMaxPercent()",
                "ccui.Slider:setPercent()",
                "ccui.Slider:loadSlidBallTextureDisabled()",
                "ccui.Slider:getMaxPercent()",
                "ccui.Slider:loadSlidBallTextureNormal()",
                "ccui.Slider:loadBarTexture()",
                "ccui.Slider:loadProgressBarTexture()",
                "ccui.Slider:loadSlidBallTextures()",
                "ccui.Slider:setCapInsetProgressBarRebderer()",
                "ccui.Slider:setCapInsetsBarRenderer()",
                "ccui.Slider:getCapInsetsProgressBarRebderer()",
                "ccui.Slider:setScale9Enabled()",
                "ccui.Slider:setZoomScale()",
                "ccui.Slider:setCapInsets()",
                "ccui.Slider:getZoomScale()",
                "ccui.Slider:addEventListener()",
                "ccui.Slider:loadSlidBallTexturePressed()",
                "ccui.Slider:isScale9Enabled()",
                "ccui.Slider:getCapInsetsBarRenderer()",
                "ccui.Slider:getPercent()",
                "ccui.Slider:create()",
                "ccui.Slider:createInstance()",
                "ccui.Slider:constructor()",
                "ccui.Slider:finalize()",
                "ccui.TextField:setAttachWithIME()",
                "ccui.TextField:getFontSize()",
                "ccui.TextField:getString()",
                "ccui.TextField:setPasswordStyleText()",
                "ccui.TextField:getDeleteBackward()",
                "ccui.TextField:getTextColor()",
                "ccui.TextField:getPlaceHolder()",
                "ccui.TextField:getAttachWithIME()",
                "ccui.TextField:setFontName()",
                "ccui.TextField:getInsertText()",
                "ccui.TextField:setInsertText()",
                "ccui.TextField:setString()",
                "ccui.TextField:getDetachWithIME()",
                "ccui.TextField:setTextVerticalAlignment()",
                "ccui.TextField:addEventListener()",
                "ccui.TextField:didNotSelectSelf()",
                "ccui.TextField:getFontName()",
                "ccui.TextField:setTextAreaSize()",
                "ccui.TextField:attachWithIME()",
                "ccui.TextField:getStringLength()",
                "ccui.TextField:getAutoRenderSize()",
                "ccui.TextField:setPasswordEnabled()",
                "ccui.TextField:getPlaceHolderColor()",
                "ccui.TextField:getPasswordStyleText()",
                "ccui.TextField:setMaxLengthEnabled()",
                "ccui.TextField:isPasswordEnabled()",
                "ccui.TextField:setDeleteBackward()",
                "ccui.TextField:getTextHorizontalAlignment()",
                "ccui.TextField:setFontSize()",
                "ccui.TextField:setPlaceHolder()",
                "ccui.TextField:setPlaceHolderColor()",
                "ccui.TextField:setTextHorizontalAlignment()",
                "ccui.TextField:setTextColor()",
                "ccui.TextField:getMaxLength()",
                "ccui.TextField:isMaxLengthEnabled()",
                "ccui.TextField:setDetachWithIME()",
                "ccui.TextField:getTextVerticalAlignment()",
                "ccui.TextField:setTouchAreaEnabled()",
                "ccui.TextField:setMaxLength()",
                "ccui.TextField:setTouchSize()",
                "ccui.TextField:getTouchSize()",
                "ccui.TextField:create()",
                "ccui.TextField:createInstance()",
                "ccui.TextField:constructor()",
                "ccui.TextField:finalize()",
                "ccui.TextBMFont:setFntFile()",
                "ccui.TextBMFont:getStringLength()",
                "ccui.TextBMFont:setString()",
                "ccui.TextBMFont:getString()",
                "ccui.TextBMFont:create()",
                "ccui.TextBMFont:createInstance()",
                "ccui.TextBMFont:constructor()",
                "ccui.TextBMFont:finalize()",
                "ccui.PageView:getCustomScrollThreshold()",
                "ccui.PageView:getCurPageIndex()",
                "ccui.PageView:setDirection()",
                "ccui.PageView:addWidgetToPage()",
                "ccui.PageView:isUsingCustomScrollThreshold()",
                "ccui.PageView:setCurPageIndex()",
                "ccui.PageView:removePage()",
                "ccui.PageView:addEventListener()",
                "ccui.PageView:setUsingCustomScrollThreshold()",
                "ccui.PageView:setCustomScrollThreshold()",
                "ccui.PageView:insertPage()",
                "ccui.PageView:getDirection()",
                "ccui.PageView:scrollToPage()",
                "ccui.PageView:getPage()",
                "ccui.PageView:removePageAtIndex()",
                "ccui.PageView:getPages()",
                "ccui.PageView:removeAllPages()",
                "ccui.PageView:addPage()",
                "ccui.PageView:create()",
                "ccui.PageView:createInstance()",
                "ccui.PageView:constructor()",
                "ccui.PageView:finalize()",
                "ccui.Helper:getSubStringOfUTF8String()",
                "ccui.Helper:convertBoundingBoxToScreen()",
                "ccui.Helper:changeLayoutSystemActiveState()",
                "ccui.Helper:seekActionWidgetByActionTag()",
                "ccui.Helper:seekWidgetByName()",
                "ccui.Helper:seekWidgetByTag()",
                "ccui.Helper:restrictCapInsetRect()",
                "ccui.Helper:doLayout()",
                "ccui.Helper:finalize()",
                "ccui.RichElement:init()",
                "ccui.RichElement:constructor()",
                "ccui.RichElement:finalize()",
                "ccui.RichElementText:init()",
                "ccui.RichElementText:create()",
                "ccui.RichElementText:constructor()",
                "ccui.RichElementText:finalize()",
                "ccui.RichElementImage:init()",
                "ccui.RichElementImage:create()",
                "ccui.RichElementImage:constructor()",
                "ccui.RichElementImage:finalize()",
                "ccui.RichElementCustomNode:init()",
                "ccui.RichElementCustomNode:create()",
                "ccui.RichElementCustomNode:constructor()",
                "ccui.RichElementCustomNode:finalize()",
                "ccui.RichText:insertElement()",
                "ccui.RichText:pushBackElement()",
                "ccui.RichText:setVerticalSpace()",
                "ccui.RichText:formatText()",
                "ccui.RichText:removeElement()",
                "ccui.RichText:create()",
                "ccui.RichText:constructor()",
                "ccui.RichText:finalize()",
                "ccui.HBox:initWithSize()",
                "ccui.HBox:create()",
                "ccui.HBox:constructor()",
                "ccui.HBox:finalize()",
                "ccui.VBox:initWithSize()",
                "ccui.VBox:create()",
                "ccui.VBox:constructor()",
                "ccui.VBox:finalize()",
                "ccui.RelativeBox:initWithSize()",
                "ccui.RelativeBox:create()",
                "ccui.RelativeBox:constructor()",
                "ccui.RelativeBox:finalize()",
                "ccui.Scale9Sprite:disableCascadeColor()",
                "ccui.Scale9Sprite:updateWithSprite()",
                "ccui.Scale9Sprite:isFlippedX()",
                "ccui.Scale9Sprite:setScale9Enabled()",
                "ccui.Scale9Sprite:setFlippedY()",
                "ccui.Scale9Sprite:setFlippedX()",
                "ccui.Scale9Sprite:resizableSpriteWithCapInsets()",
                "ccui.Scale9Sprite:disableCascadeOpacity()",
                "ccui.Scale9Sprite:getState()",
                "ccui.Scale9Sprite:setState()",
                "ccui.Scale9Sprite:setInsetBottom()",
                "ccui.Scale9Sprite:initWithSpriteFrameName()",
                "ccui.Scale9Sprite:getSprite()",
                "ccui.Scale9Sprite:setInsetTop()",
                "ccui.Scale9Sprite:init()",
                "ccui.Scale9Sprite:setPreferredSize()",
                "ccui.Scale9Sprite:setSpriteFrame()",
                "ccui.Scale9Sprite:getBlendFunc()",
                "ccui.Scale9Sprite:getInsetBottom()",
                "ccui.Scale9Sprite:getCapInsets()",
                "ccui.Scale9Sprite:isScale9Enabled()",
                "ccui.Scale9Sprite:getInsetRight()",
                "ccui.Scale9Sprite:getOriginalSize()",
                "ccui.Scale9Sprite:initWithFile()",
                "ccui.Scale9Sprite:setBlendFunc()",
                "ccui.Scale9Sprite:getInsetTop()",
                "ccui.Scale9Sprite:setInsetLeft()",
                "ccui.Scale9Sprite:initWithSpriteFrame()",
                "ccui.Scale9Sprite:getPreferredSize()",
                "ccui.Scale9Sprite:setCapInsets()",
                "ccui.Scale9Sprite:isFlippedY()",
                "ccui.Scale9Sprite:getInsetLeft()",
                "ccui.Scale9Sprite:setInsetRight()",
                "ccui.Scale9Sprite:create()",
                "ccui.Scale9Sprite:createWithSpriteFrameName()",
                "ccui.Scale9Sprite:createWithSpriteFrame()",
                "ccui.Scale9Sprite:constructor()",
                "ccui.Scale9Sprite:finalize()",
                "ccui.EditBox:keyboardDidShow()",
                "ccui.EditBox:getScriptEditBoxHandler()",
                "ccui.EditBox:getText()",
                "ccui.EditBox:keyboardDidHide()",
                "ccui.EditBox:setPlaceholderFontName()",
                "ccui.EditBox:getPlaceHolder()",
                "ccui.EditBox:setFontName()",
                "ccui.EditBox:registerScriptEditBoxHandler()",
                "ccui.EditBox:setPlaceholderFontSize()",
                "ccui.EditBox:setInputMode()",
                "ccui.EditBox:unregisterScriptEditBoxHandler()",
                "ccui.EditBox:keyboardWillShow()",
                "ccui.EditBox:setPlaceholderFontColor()",
                "ccui.EditBox:setFontColor()",
                "ccui.EditBox:keyboardWillHide()",
                "ccui.EditBox:touchDownAction()",
                "ccui.EditBox:setPlaceholderFont()",
                "ccui.EditBox:setFontSize()",
                "ccui.EditBox:initWithSizeAndBackgroundSprite()",
                "ccui.EditBox:setPlaceHolder()",
                "ccui.EditBox:setReturnType()",
                "ccui.EditBox:setInputFlag()",
                "ccui.EditBox:getMaxLength()",
                "ccui.EditBox:setText()",
                "ccui.EditBox:setMaxLength()",
                "ccui.EditBox:setFont()",
                "ccui.EditBox:create()",
                "ccui.EditBox:constructor()",
                "ccui.EditBox:finalize()",
                "ccui.LayoutComponent:setStretchWidthEnabled()",
                "ccui.LayoutComponent:setPercentWidth()",
                "ccui.LayoutComponent:getAnchorPosition()",
                "ccui.LayoutComponent:setPositionPercentXEnabled()",
                "ccui.LayoutComponent:setStretchHeightEnabled()",
                "ccui.LayoutComponent:setActiveEnabled()",
                "ccui.LayoutComponent:getRightMargin()",
                "ccui.LayoutComponent:getSize()",
                "ccui.LayoutComponent:setAnchorPosition()",
                "ccui.LayoutComponent:refreshLayout()",
                "ccui.LayoutComponent:isPercentWidthEnabled()",
                "ccui.LayoutComponent:setVerticalEdge()",
                "ccui.LayoutComponent:getTopMargin()",
                "ccui.LayoutComponent:setSizeWidth()",
                "ccui.LayoutComponent:getPercentContentSize()",
                "ccui.LayoutComponent:getVerticalEdge()",
                "ccui.LayoutComponent:setPercentWidthEnabled()",
                "ccui.LayoutComponent:isStretchWidthEnabled()",
                "ccui.LayoutComponent:setLeftMargin()",
                "ccui.LayoutComponent:getSizeWidth()",
                "ccui.LayoutComponent:setPositionPercentYEnabled()",
                "ccui.LayoutComponent:getSizeHeight()",
                "ccui.LayoutComponent:getPositionPercentY()",
                "ccui.LayoutComponent:getPositionPercentX()",
                "ccui.LayoutComponent:setTopMargin()",
                "ccui.LayoutComponent:getPercentHeight()",
                "ccui.LayoutComponent:getUsingPercentContentSize()",
                "ccui.LayoutComponent:setPositionPercentY()",
                "ccui.LayoutComponent:setPositionPercentX()",
                "ccui.LayoutComponent:setRightMargin()",
                "ccui.LayoutComponent:isPositionPercentYEnabled()",
                "ccui.LayoutComponent:setPercentHeight()",
                "ccui.LayoutComponent:setPercentOnlyEnabled()",
                "ccui.LayoutComponent:setHorizontalEdge()",
                "ccui.LayoutComponent:setPosition()",
                "ccui.LayoutComponent:setUsingPercentContentSize()",
                "ccui.LayoutComponent:getLeftMargin()",
                "ccui.LayoutComponent:getPosition()",
                "ccui.LayoutComponent:setSizeHeight()",
                "ccui.LayoutComponent:isPositionPercentXEnabled()",
                "ccui.LayoutComponent:getBottomMargin()",
                "ccui.LayoutComponent:setPercentHeightEnabled()",
                "ccui.LayoutComponent:setPercentContentSize()",
                "ccui.LayoutComponent:isPercentHeightEnabled()",
                "ccui.LayoutComponent:getPercentWidth()",
                "ccui.LayoutComponent:getHorizontalEdge()",
                "ccui.LayoutComponent:isStretchHeightEnabled()",
                "ccui.LayoutComponent:setBottomMargin()",
                "ccui.LayoutComponent:setSize()",
                "ccui.LayoutComponent:create()",
                "ccui.LayoutComponent:bindLayoutComponent()",
                "ccui.LayoutComponent:constructor()",
                "ccui.LayoutComponent:finalize()",
                "and",
                "break",
                "do", 
                "else",
                "elseif",
                "end",
                "for",
                "function",
                "if",
                "in",
                "local",
                "not",
                "or",
                "repeat",
                "return",
                "then",
                "until",
                "while",
                "assert",
                "collectgarbage",
                "dofile",
                "error",
                "getfenv",
                "getmetatable",
                "ipairs",
                "load",
                "loadfile",
                "loadstring",
                "module",
                "next",
                "pairs",
                "pcall",
                "print",
                "rawequal",
                "rawget",
                "rawset",
                "require",
                "select",
                "setfenv",
                "setmetatable",
                "tonumber",
                "tostring",
                "type",
                "unpack",
                "xpcall",
                "_G",
                "_VERSION",

// there is now probably a better way of highlighting the following

                "__add",
                "__concat",
                "__div",
                "__eq",
                "__gc",
                "__index",
                "__le",
                "__lt",
                "__metatable",
                "__mode",
                "__mul",
                "__newindex",
                "__pow",
                "__sub",
                "__tostring",
                "__unm",

                "package",
                "package.cpath",
                "package.loaded",
                "package.loadlib",
                "package.path",
                "package.preload",
                "package.seeall",

                "coroutine",
                "coroutine.create",
                "coroutine.resume",
                "coroutine.running",
                "coroutine.status",
                "coroutine.wrap",
                "coroutine.yield",

                "string",
                "string.byte",
                "string.char",
                "string.dump",
                "string.find",
                "string.format",
                "string.gmatch",
                "string.gsub",
                "string.len",
                "string.lower",
                "string.match",
                "string.rep",
                "string.sub",
                "string.upper",
                
                "table",
                "table.concat",
                "table.insert",
                "table.maxn",
                "table.remove",
                "table.sort",

                "math",
                "math.abs",
                "math.acos",
                "math.asin",
                "math.atan",
                "math.atan2",
                "math.ceil",
                "math.cos",
                "math.cosh",
                "math.deg",
                "math.exp",
                "math.floor",
                "math.fmod",
                "math.frexp",
                "math.huge",
                "math.ldexp",
                "math.log",
                "math.log10",
                "math.max",
                "math.min",
                "math.modf",
                "math.pi",
                "math.pow",
                "math.rad",
                "math.random",
                "math.randomseed",
                "math.sin",
                "math.sinh",
                "math.sqrt",
                "math.tan",
                "math.tanh",

                "io",
                "io.close",
                "io.flush",
                "io.input",
                "io.lines",
                "io.open",
                "io.popen",
                "io.output",
                "io.read",
                "io.tmpfile",
                "io.type",
                "io.write",
                
                "file:close",
                "file:flush",
                "file:lines",
                "file:read",
                "file:seek",
                "file:setvbuf",
                "file:write",

                "os",
                "os.clock",
                "os.date",
                "os.difftime",
                "os.execute",
                "os.exit",
                "os.getenv",
                "os.remove",
                "os.rename",
                "os.setlocale",
                "os.time",
                "os.tmpname",
                 
                "debug",
                "debug.debug",
                "debug.getfenv",
                "debug.gethook",
                "debug.getinfo",
                "debug.getlocal",
                "debug.getmetatable",
                "debug.getregistry",
                "debug.getupvalue",
                "debug.setfenv",
                "debug.sethook",
                "debug.setlocal",
                "debug.setmetatable",
                "debug.setupvalue",
                "debug.traceback",
            );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
		};
    },
        
    {
        Identifier = "xcode.lang.lau.interestingOperators";
        Syntax = {
            Words = (
                "..",
                ".",
                ":",
             );
            Type = "xcode.syntax.plain";
        };
    },


    
/****************************************************************************/
// MARK: Lua Syntax Coloring
/****************************************************************************/

    {
        Identifier = "xcode.lang.lua";
        Description = "Lua Coloring";
        BasedOn = "xcode.lang.simpleColoring";
        IncludeInMenu = YES;
        Name = "Lua";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer.toplevel";
            IncludeRules = (
                "xcode.lang.lua.module",
                "xcode.lang.lua.class",
                "xcode.lang.lua.function",
                "xcode.lang.lua.block",
                "xcode.lang.lua.block.if",
                "xcode.lang.lua.block.while",
                "xcode.lang.lua.block.repeat",
                "xcode.lang.lua.block.for",
                "xcode.lang.lua.bracketexpr",
                "xcode.lang.lua.parenexpr",
            );
            Type = "xcode.syntax.plain";
        };
    },
    
    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.lua.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.lua.comment",
                "xcode.lang.lua.comment.singleline",
                "xcode.lang.string",
                "xcode.lang.string.lua0",
                "xcode.lang.string.lua1",
                "xcode.lang.string.lua2",
                "xcode.lang.string.lua3",
                "xcode.lang.string.lua4",
                "xcode.lang.string.lua5",
                "xcode.lang.character",
                "xcode.lang.lua.identifier",
                "xcode.lang.number",
                "xcode.lang.lau.interestingOperators",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.lua.lexer.toplevel";
        Syntax = {
            IncludeRules = (
                "xcode.lang.lua.comment",
                "xcode.lang.lua.comment.singleline",
                "xcode.lang.string",
                "xcode.lang.string.lua0",
                "xcode.lang.string.lua1",
                "xcode.lang.string.lua2",
                "xcode.lang.string.lua3",
                "xcode.lang.string.lua4",
                "xcode.lang.string.lua5",
                "xcode.lang.character",
                "xcode.lang.lua.module.declarator",
                "xcode.lang.lua.class.declarator",
                "xcode.lang.lua.function.declarator",
                "xcode.lang.lua.identifier",
                "xcode.lang.number",
            );
        };
    },

    {
        Identifier = "xcode.lang.string.lua0";
        Syntax = {
            Start = "[[";
            End = "]]";
            Type = "xcode.syntax.string";
        };
    },
  
    {
        Identifier = "xcode.lang.string.lua1";
        Syntax = {
            Start = "[=[";
            End = "]=]";
            Type = "xcode.syntax.string";
        };
    },
  
    {
        Identifier = "xcode.lang.string.lua2";
        Syntax = {
            Start = "[==[";
            End = "]==]";
            Type = "xcode.syntax.string";
        };
    },
  
    {
        Identifier = "xcode.lang.string.lua3";
        Syntax = {
            Start = "[===[";
            End = "]===]";
            Type = "xcode.syntax.string";
        };
    },
  
    {
        Identifier = "xcode.lang.string.lua4";
        Syntax = {
            Start = "[====[";
            End = "]====]";
            Type = "xcode.syntax.string";
        };
    },
  
    {
        Identifier = "xcode.lang.string.lua5";
        Syntax = {
            Start = "[=====[";
            End = "]=====]";
            Type = "xcode.syntax.string";
        };
    },
  
    {
        Identifier = "xcode.lang.lua.module";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer.toplevel";
            Start = "xcode.lang.lua.module.declarator";
            End = "end";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.lua.class",
                "xcode.lang.lua.function",
            );
            Type = "xcode.syntax.definition.class";
        };
    },
    
    {
        Identifier = "xcode.lang.lua.module.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Rules = (
                "require",
                "xcode.lang.lua.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.lua.class";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer.toplevel";
            Start = "xcode.lang.lua.class.declarator";
            End = "end";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.lua.function",
            );
            Type = "xcode.syntax.definition.class";
        };
    },
    
    {
        Identifier = "xcode.lang.lua.class.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Rules = (
                "class",
                "xcode.lang.lua.identifier",
                "xcode.lang.lua.superclass?"
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.lua.superclass";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Rules = (
                "->",
                "xcode.lang.lua.identifier",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.lua.function";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer.toplevel";
            Start = "xcode.lang.lua.function.declarator";
            End = "end";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.lua.block",
                "xcode.lang.lua.block.if",
                "xcode.lang.lua.block.while",
                "xcode.lang.lua.block.repeat",
                "xcode.lang.lua.block.for",
                "xcode.lang.lua.bracketexpr",
                "xcode.lang.lua.parenexpr",
            );
            Type = "xcode.syntax.definition.function";
        };
    },
    
    {
        Identifier = "xcode.lang.lua.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Rules = (
                "function",
                "xcode.lang.lua.function.name",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.lua.function.name";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Rules = (
                "xcode.lang.lua.identifier",
                "xcode.lang.lua.function.name.more?",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.lua.function.name.more";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Rules = (
                ".",
                "xcode.lang.lua.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    

/****************************************************************************/
// MARK: Lua blocks
/****************************************************************************/
 {
        Identifier = "xcode.lang.lua.block";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.lua.block.if",
                "xcode.lang.lua.block.while",
                "xcode.lang.lua.block.repeat",
                "xcode.lang.lua.block.for",
                "xcode.lang.lua.bracketexpr",
                "xcode.lang.lua.parenexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.lua.block.if";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Start = "if";
            End = "end";
            Foldable = YES;
            Recursive = YES;
            StartAtBOL = YES;
            IncludeRules = (
                "xcode.lang.lua.block",
                "xcode.lang.lua.block.while",
                "xcode.lang.lua.block.repeat",
                "xcode.lang.lua.block.for",
                "xcode.lang.lua.bracketexpr",
                "xcode.lang.lua.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.lua.block.while";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Start = "while";
            End = "end";
            Foldable = YES;
            Recursive = YES;
            StartAtBOL = YES;
            IncludeRules = (
                "xcode.lang.lua.block",
                "xcode.lang.lua.block.if",
                "xcode.lang.lua.block.repeat",
                "xcode.lang.lua.block.for",
                "xcode.lang.lua.bracketexpr",
                "xcode.lang.lua.parenexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.lua.block.repeat";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Start = "repeat";
            End = "until";
            Foldable = YES;
            Recursive = YES;
            StartAtBOL = YES;
            IncludeRules = (
                "xcode.lang.lua.block",
                "xcode.lang.lua.block.if",
                "xcode.lang.lua.block.while",
                "xcode.lang.lua.block.for",
                "xcode.lang.lua.bracketexpr",
                "xcode.lang.lua.parenexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.lua.block.for";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Start = "for";
            End = "end";
            Foldable = YES;
            Recursive = YES;
            StartAtBOL = YES;
            IncludeRules = (
                "xcode.lang.lua.block",
                "xcode.lang.lua.block.if",
                "xcode.lang.lua.block.while",
                "xcode.lang.lua.block.repeat",
                "xcode.lang.lua.bracketexpr",
                "xcode.lang.lua.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.lua.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.lua.bracketexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.lua.bracketexpr";
        Syntax = {
            Tokenizer = "xcode.lang.lua.lexer";
            Start = "[";
            End = "]";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.lua.parenexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.lua.comment";
        Syntax = {
            Start = "--[[";
            End = "]]";
            Foldable = YES;
            IncludeRules = ( 
                "xcode.lang.url", 
                "xcode.lang.url.mail", 
                "xcode.lang.comment.mark"
            );
            Type = "xcode.syntax.comment";
        };
    },
    
    {
        Identifier = "xcode.lang.lua.comment.singleline";
        Syntax = {
            Start = "--";
            End = "\n";
            IncludeRules = ( 
                "xcode.lang.url", 
                "xcode.lang.url.mail", 
                "xcode.lang.comment.mark"
            );
            Type = "xcode.syntax.comment";
        };
    },
        {
        Identifier = "xcode.lang.lua.comment1";
        Syntax = {
            Start = "--[=[";
            End = "]=]";
            Foldable = YES;
            IncludeRules = ( 
                "xcode.lang.url", 
                "xcode.lang.url.mail", 
                "xcode.lang.comment.mark"
            );
            Type = "xcode.syntax.comment";
        };
    },
    
)